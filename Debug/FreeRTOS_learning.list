
FreeRTOS_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d00  08007d00  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d00  08007d00  00017d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d08  08007d08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b88  20000078  08007d88  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c00  08007d88  00021c00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e337  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa6  00000000  00000000  0003e3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00041e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  00043728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039bc  00000000  00000000  00044e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b26c  00000000  00000000  00048834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acb69  00000000  00000000  00063aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  0011065c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a9c 	.word	0x08007a9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08007a9c 	.word	0x08007a9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fc5c 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f852 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f924 	bl	8000878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8d4 	bl	80007dc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000634:	f000 f894 	bl	8000760 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8000638:	4917      	ldr	r1, [pc, #92]	; (8000698 <main+0x78>)
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <main+0x7c>)
 800063c:	2201      	movs	r2, #1
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fc32 	bl	8002ea8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f004 fc42 	bl	8004ecc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000648:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <main+0x80>)
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <main+0x84>)
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f004 fc84 	bl	8004f5c <osThreadNew>
 8000654:	0002      	movs	r2, r0
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <main+0x88>)
 8000658:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  blinkingRatioThreadHandle = osThreadNew(ChangeBlinkingRatioThread, NULL, &blinkingRatioTask_attributes);
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <main+0x8c>)
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x90>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f004 fc7b 	bl	8004f5c <osThreadNew>
 8000666:	0002      	movs	r2, r0
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <main+0x94>)
 800066a:	601a      	str	r2, [r3, #0]
  toggleLEDThreadHandle = osThreadNew(ToggleLEDThread, NULL, &toggleLEDTask_attributes);
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <main+0x98>)
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <main+0x9c>)
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f004 fc72 	bl	8004f5c <osThreadNew>
 8000678:	0002      	movs	r2, r0
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <main+0xa0>)
 800067c:	601a      	str	r2, [r3, #0]
  sendByteOverUartHandle = osThreadNew(SendBytOverUartThread, NULL, &sendByteOverUarTask_attributes);
 800067e:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <main+0xa4>)
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <main+0xa8>)
 8000682:	2100      	movs	r1, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f004 fc69 	bl	8004f5c <osThreadNew>
 800068a:	0002      	movs	r2, r0
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xac>)
 800068e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f004 fc3e 	bl	8004f10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x74>
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	2000019c 	.word	0x2000019c
 800069c:	200000f8 	.word	0x200000f8
 80006a0:	08007b04 	.word	0x08007b04
 80006a4:	08000b05 	.word	0x08000b05
 80006a8:	2000018c 	.word	0x2000018c
 80006ac:	08007b28 	.word	0x08007b28
 80006b0:	08000a29 	.word	0x08000a29
 80006b4:	20000190 	.word	0x20000190
 80006b8:	08007b4c 	.word	0x08007b4c
 80006bc:	080009dd 	.word	0x080009dd
 80006c0:	20000194 	.word	0x20000194
 80006c4:	08007b70 	.word	0x08007b70
 80006c8:	08000a45 	.word	0x08000a45
 80006cc:	20000198 	.word	0x20000198

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b093      	sub	sp, #76	; 0x4c
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	2410      	movs	r4, #16
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2338      	movs	r3, #56	; 0x38
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f007 f906 	bl	80078f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e6:	003b      	movs	r3, r7
 80006e8:	0018      	movs	r0, r3
 80006ea:	2310      	movs	r3, #16
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f007 f8ff 	bl	80078f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 ff77 	bl	80015ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2202      	movs	r2, #2
 8000702:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	193b      	adds	r3, r7, r4
 8000720:	0018      	movs	r0, r3
 8000722:	f000 ffaf 	bl	8001684 <HAL_RCC_OscConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800072a:	f000 fa07 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	003b      	movs	r3, r7
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	003b      	movs	r3, r7
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	003b      	movs	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000746:	003b      	movs	r3, r7
 8000748:	2100      	movs	r1, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fab4 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000754:	f000 f9f2 	bl	8000b3c <Error_Handler>
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b013      	add	sp, #76	; 0x4c
 800075e:	bd90      	pop	{r4, r7, pc}

08000760 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <MX_SPI1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_SPI1_Init+0x74>)
 800076c:	2282      	movs	r2, #130	; 0x82
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x74>)
 800077a:	22e0      	movs	r2, #224	; 0xe0
 800077c:	00d2      	lsls	r2, r2, #3
 800077e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000782:	2202      	movs	r2, #2
 8000784:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x74>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	0092      	lsls	r2, r2, #2
 8000792:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007ae:	2207      	movs	r2, #7
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_SPI1_Init+0x74>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 fe05 	bl	80023d0 <HAL_SPI_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 f9b7 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000094 	.word	0x20000094
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <MX_USART2_UART_Init+0x94>)
 80007e2:	4a24      	ldr	r2, [pc, #144]	; (8000874 <MX_USART2_UART_Init+0x98>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_USART2_UART_Init+0x94>)
 80007e8:	22e1      	movs	r2, #225	; 0xe1
 80007ea:	0252      	lsls	r2, r2, #9
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_USART2_UART_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_USART2_UART_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_USART2_UART_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_USART2_UART_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_USART2_UART_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000826:	0018      	movs	r0, r3
 8000828:	f002 fa4c 	bl	8002cc4 <HAL_UART_Init>
 800082c:	1e03      	subs	r3, r0, #0
 800082e:	d001      	beq.n	8000834 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000830:	f000 f984 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f004 f9dd 	bl	8004bf8 <HAL_UARTEx_SetTxFifoThreshold>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000842:	f000 f97b 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_USART2_UART_Init+0x94>)
 8000848:	2100      	movs	r1, #0
 800084a:	0018      	movs	r0, r3
 800084c:	f004 fa14 	bl	8004c78 <HAL_UARTEx_SetRxFifoThreshold>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f972 	bl	8000b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x94>)
 800085a:	0018      	movs	r0, r3
 800085c:	f004 f992 	bl	8004b84 <HAL_UARTEx_DisableFifoMode>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000864:	f000 f96a 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	200000f8 	.word	0x200000f8
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	2414      	movs	r4, #20
 8000880:	193b      	adds	r3, r7, r4
 8000882:	0018      	movs	r0, r3
 8000884:	2314      	movs	r3, #20
 8000886:	001a      	movs	r2, r3
 8000888:	2100      	movs	r1, #0
 800088a:	f007 f832 	bl	80078f2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b40      	ldr	r3, [pc, #256]	; (8000990 <MX_GPIO_Init+0x118>)
 8000890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_GPIO_Init+0x118>)
 8000894:	2104      	movs	r1, #4
 8000896:	430a      	orrs	r2, r1
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <MX_GPIO_Init+0x118>)
 800089c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089e:	2204      	movs	r2, #4
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <MX_GPIO_Init+0x118>)
 80008a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <MX_GPIO_Init+0x118>)
 80008ac:	2120      	movs	r1, #32
 80008ae:	430a      	orrs	r2, r1
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
 80008b2:	4b37      	ldr	r3, [pc, #220]	; (8000990 <MX_GPIO_Init+0x118>)
 80008b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b6:	2220      	movs	r2, #32
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_GPIO_Init+0x118>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_GPIO_Init+0x118>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_GPIO_Init+0x118>)
 80008cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_GPIO_Init+0x118>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_GPIO_Init+0x118>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_GPIO_Init+0x118>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fe0c 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	2101      	movs	r1, #1
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fe06 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	0192      	lsls	r2, r2, #6
 800090e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2284      	movs	r2, #132	; 0x84
 8000914:	0392      	lsls	r2, r2, #14
 8000916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800091e:	193b      	adds	r3, r7, r4
 8000920:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <MX_GPIO_Init+0x120>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 fc91 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2220      	movs	r2, #32
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2202      	movs	r2, #2
 8000940:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000942:	193a      	adds	r2, r7, r4
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fc7e 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800096a:	187b      	adds	r3, r7, r1
 800096c:	4a09      	ldr	r2, [pc, #36]	; (8000994 <MX_GPIO_Init+0x11c>)
 800096e:	0019      	movs	r1, r3
 8000970:	0010      	movs	r0, r2
 8000972:	f000 fc6b 	bl	800124c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2103      	movs	r1, #3
 800097a:	2007      	movs	r0, #7
 800097c:	f000 fb74 	bl	8001068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000980:	2007      	movs	r0, #7
 8000982:	f000 fb86 	bl	8001092 <HAL_NVIC_EnableIRQ>

}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b00b      	add	sp, #44	; 0x2c
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40021000 	.word	0x40021000
 8000994:	50000400 	.word	0x50000400
 8000998:	50000800 	.word	0x50000800

0800099c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 80009a8:	1dbb      	adds	r3, r7, #6
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	019b      	lsls	r3, r3, #6
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d10b      	bne.n	80009cc <HAL_GPIO_EXTI_Falling_Callback+0x30>
  {
    osThreadFlagsSet(blinkingRatioThreadHandle, BIT_1);
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2102      	movs	r1, #2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f004 fb64 	bl	8005088 <osThreadFlagsSet>
    osThreadFlagsSet(sendByteOverUartHandle, BIT_1);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2102      	movs	r1, #2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f004 fb5e 	bl	8005088 <osThreadFlagsSet>

  }
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000190 	.word	0x20000190
 80009d8:	20000198 	.word	0x20000198

080009dc <ToggleLEDThread>:

void ToggleLEDThread(void * argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    osDelay(blinking_ratio);
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <ToggleLEDThread+0x20>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 fc17 	bl	800521c <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80009ee:	23a0      	movs	r3, #160	; 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2120      	movs	r1, #32
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fdaa 	bl	800154e <HAL_GPIO_TogglePin>
    osDelay(blinking_ratio);
 80009fa:	e7f3      	b.n	80009e4 <ToggleLEDThread+0x8>
 80009fc:	20000000 	.word	0x20000000

08000a00 <ChangeBlinkingRatio>:
  }
}

void ChangeBlinkingRatio(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  if (blinking_ratio == 250)
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <ChangeBlinkingRatio+0x24>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2bfa      	cmp	r3, #250	; 0xfa
 8000a0a:	d104      	bne.n	8000a16 <ChangeBlinkingRatio+0x16>
    blinking_ratio = 1000;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <ChangeBlinkingRatio+0x24>)
 8000a0e:	22fa      	movs	r2, #250	; 0xfa
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	601a      	str	r2, [r3, #0]
  else
    blinking_ratio = 250;
}
 8000a14:	e002      	b.n	8000a1c <ChangeBlinkingRatio+0x1c>
    blinking_ratio = 250;
 8000a16:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <ChangeBlinkingRatio+0x24>)
 8000a18:	22fa      	movs	r2, #250	; 0xfa
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000000 	.word	0x20000000

08000a28 <ChangeBlinkingRatioThread>:

void ChangeBlinkingRatioThread(void * argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  (void) argument;
  for(;;)
  {
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	001a      	movs	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f004 fb6f 	bl	800511c <osThreadFlagsWait>

    ChangeBlinkingRatio();
 8000a3e:	f7ff ffdf 	bl	8000a00 <ChangeBlinkingRatio>
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8000a42:	e7f5      	b.n	8000a30 <ChangeBlinkingRatioThread+0x8>

08000a44 <SendBytOverUartThread>:
const uint8_t button_press_str[] = "Button pressed\r\n";
const uint8_t data_rec_str[] = "received sth\r\n";
const uint8_t data_rec_e_str[] = "received e\r\n";

void SendBytOverUartThread(void *argument)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void) argument;
  uint32_t events = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8000a50:	2301      	movs	r3, #1
 8000a52:	425b      	negs	r3, r3
 8000a54:	001a      	movs	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f004 fb5f 	bl	800511c <osThreadFlagsWait>
 8000a5e:	0003      	movs	r3, r0
 8000a60:	60fb      	str	r3, [r7, #12]

    switch (events)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d003      	beq.n	8000a70 <SendBytOverUartThread+0x2c>
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d014      	beq.n	8000a98 <SendBytOverUartThread+0x54>
        break;
      case BIT_1:
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
        break;
      default:
        break;
 8000a6e:	e01b      	b.n	8000aa8 <SendBytOverUartThread+0x64>
        if (rec_character == 'e')
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <SendBytOverUartThread+0x68>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b65      	cmp	r3, #101	; 0x65
 8000a76:	d107      	bne.n	8000a88 <SendBytOverUartThread+0x44>
          HAL_UART_Transmit(&huart2, data_rec_e_str, sizeof(data_rec_e_str), 500);
 8000a78:	23fa      	movs	r3, #250	; 0xfa
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <SendBytOverUartThread+0x6c>)
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <SendBytOverUartThread+0x70>)
 8000a80:	220d      	movs	r2, #13
 8000a82:	f002 f975 	bl	8002d70 <HAL_UART_Transmit>
        break;
 8000a86:	e00f      	b.n	8000aa8 <SendBytOverUartThread+0x64>
          HAL_UART_Transmit(&huart2, data_rec_str, sizeof(data_rec_str), 500);
 8000a88:	23fa      	movs	r3, #250	; 0xfa
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	490a      	ldr	r1, [pc, #40]	; (8000ab8 <SendBytOverUartThread+0x74>)
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <SendBytOverUartThread+0x70>)
 8000a90:	220f      	movs	r2, #15
 8000a92:	f002 f96d 	bl	8002d70 <HAL_UART_Transmit>
        break;
 8000a96:	e007      	b.n	8000aa8 <SendBytOverUartThread+0x64>
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
 8000a98:	23fa      	movs	r3, #250	; 0xfa
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <SendBytOverUartThread+0x78>)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <SendBytOverUartThread+0x70>)
 8000aa0:	2211      	movs	r2, #17
 8000aa2:	f002 f965 	bl	8002d70 <HAL_UART_Transmit>
        break;
 8000aa6:	46c0      	nop			; (mov r8, r8)
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8000aa8:	e7d2      	b.n	8000a50 <SendBytOverUartThread+0xc>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	2000019c 	.word	0x2000019c
 8000ab0:	08007bb8 	.word	0x08007bb8
 8000ab4:	200000f8 	.word	0x200000f8
 8000ab8:	08007ba8 	.word	0x08007ba8
 8000abc:	08007b94 	.word	0x08007b94

08000ac0 <HAL_UART_RxCpltCallback>:
    }
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <HAL_UART_RxCpltCallback+0x34>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10b      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x2a>
  {
    osThreadFlagsSet(sendByteOverUartHandle, BIT_0);
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_UART_RxCpltCallback+0x38>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f004 fad5 	bl	8005088 <osThreadFlagsSet>
    HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8000ade:	4907      	ldr	r1, [pc, #28]	; (8000afc <HAL_UART_RxCpltCallback+0x3c>)
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_UART_RxCpltCallback+0x40>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f9df 	bl	8002ea8 <HAL_UART_Receive_IT>
  }
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40004400 	.word	0x40004400
 8000af8:	20000198 	.word	0x20000198
 8000afc:	2000019c 	.word	0x2000019c
 8000b00:	200000f8 	.word	0x200000f8

08000b04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000b0c:	23fa      	movs	r3, #250	; 0xfa
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f004 fb83 	bl	800521c <osDelay>
 8000b16:	e7f9      	b.n	8000b0c <StartDefaultTask+0x8>

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d101      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2a:	f000 f9f9 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40001000 	.word	0x40001000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_MspInit+0x50>)
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x50>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x50>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x50>)
 8000b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x50>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0549      	lsls	r1, r1, #21
 8000b70:	430a      	orrs	r2, r1
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x50>)
 8000b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	055b      	lsls	r3, r3, #21
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000b82:	2302      	movs	r3, #2
 8000b84:	425b      	negs	r3, r3
 8000b86:	2200      	movs	r2, #0
 8000b88:	2103      	movs	r1, #3
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fa6c 	bl	8001068 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	2414      	movs	r4, #20
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f006 fe9f 	bl	80078f2 <memset>
  if(hspi->Instance==SPI1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <HAL_SPI_MspInit+0x9c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d138      	bne.n	8000c30 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0149      	lsls	r1, r1, #5
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	641a      	str	r2, [r3, #64]	; 0x40
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	015b      	lsls	r3, r3, #5
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_SPI_MspInit+0xa0>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000bf2:	0021      	movs	r1, r4
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	22c2      	movs	r2, #194	; 0xc2
 8000bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	187a      	adds	r2, r7, r1
 8000c14:	23a0      	movs	r3, #160	; 0xa0
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fb16 	bl	800124c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2103      	movs	r1, #3
 8000c24:	2019      	movs	r0, #25
 8000c26:	f000 fa1f 	bl	8001068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c2a:	2019      	movs	r0, #25
 8000c2c:	f000 fa31 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00b      	add	sp, #44	; 0x2c
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40013000 	.word	0x40013000
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b097      	sub	sp, #92	; 0x5c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	2344      	movs	r3, #68	; 0x44
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	2314      	movs	r3, #20
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f006 fe4d 	bl	80078f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	2410      	movs	r4, #16
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	2334      	movs	r3, #52	; 0x34
 8000c60:	001a      	movs	r2, r3
 8000c62:	2100      	movs	r1, #0
 8000c64:	f006 fe45 	bl	80078f2 <memset>
  if(huart->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <HAL_UART_MspInit+0xc8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d146      	bne.n	8000d00 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2202      	movs	r2, #2
 8000c76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 f9ed 	bl	8002060 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	1e03      	subs	r3, r0, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c8a:	f7ff ff57 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_UART_MspInit+0xcc>)
 8000c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_UART_MspInit+0xcc>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0289      	lsls	r1, r1, #10
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_UART_MspInit+0xcc>)
 8000c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	029b      	lsls	r3, r3, #10
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0xcc>)
 8000cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_UART_MspInit+0xcc>)
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_UART_MspInit+0xcc>)
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cc2:	2144      	movs	r1, #68	; 0x44
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2202      	movs	r2, #2
 8000cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	187a      	adds	r2, r7, r1
 8000ce4:	23a0      	movs	r3, #160	; 0xa0
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 faae 	bl	800124c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f000 f9b7 	bl	8001068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cfa:	201c      	movs	r0, #28
 8000cfc:	f000 f9c9 	bl	8001092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b017      	add	sp, #92	; 0x5c
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d18:	232b      	movs	r3, #43	; 0x2b
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d20:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <HAL_InitTick+0xf0>)
 8000d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_InitTick+0xf0>)
 8000d26:	2110      	movs	r1, #16
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d2c:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <HAL_InitTick+0xf0>)
 8000d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d30:	2210      	movs	r2, #16
 8000d32:	4013      	ands	r3, r2
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d38:	230c      	movs	r3, #12
 8000d3a:	18fa      	adds	r2, r7, r3
 8000d3c:	2410      	movs	r4, #16
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 f962 	bl	800200c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d104      	bne.n	8000d5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d54:	f001 f944 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5c:	e004      	b.n	8000d68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d5e:	f001 f93f 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8000d62:	0003      	movs	r3, r0
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	4926      	ldr	r1, [pc, #152]	; (8000e04 <HAL_InitTick+0xf4>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff f9cb 	bl	8000108 <__udivsi3>
 8000d72:	0003      	movs	r3, r0
 8000d74:	3b01      	subs	r3, #1
 8000d76:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_InitTick+0xf8>)
 8000d7a:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <HAL_InitTick+0xfc>)
 8000d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_InitTick+0xf8>)
 8000d80:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <HAL_InitTick+0x100>)
 8000d82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_InitTick+0xf8>)
 8000d86:	6a3a      	ldr	r2, [r7, #32]
 8000d88:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_InitTick+0xf8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_InitTick+0xf8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_InitTick+0xf8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d9c:	252b      	movs	r5, #43	; 0x2b
 8000d9e:	197c      	adds	r4, r7, r5
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_InitTick+0xf8>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f001 fce8 	bl	8002778 <HAL_TIM_Base_Init>
 8000da8:	0003      	movs	r3, r0
 8000daa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000dac:	197b      	adds	r3, r7, r5
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d11e      	bne.n	8000df2 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000db4:	197c      	adds	r4, r7, r5
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0xf8>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f001 fd3d 	bl	8002838 <HAL_TIM_Base_Start_IT>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000dc2:	197b      	adds	r3, r7, r5
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d113      	bne.n	8000df2 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000dca:	2011      	movs	r0, #17
 8000dcc:	f000 f961 	bl	8001092 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d809      	bhi.n	8000dea <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	0019      	movs	r1, r3
 8000ddc:	2011      	movs	r0, #17
 8000dde:	f000 f943 	bl	8001068 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_InitTick+0x104>)
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e003      	b.n	8000df2 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000dea:	232b      	movs	r3, #43	; 0x2b
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000df2:	232b      	movs	r3, #43	; 0x2b
 8000df4:	18fb      	adds	r3, r7, r3
 8000df6:	781b      	ldrb	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b00c      	add	sp, #48	; 0x30
 8000dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	000f4240 	.word	0x000f4240
 8000e08:	200001a0 	.word	0x200001a0
 8000e0c:	40001000 	.word	0x40001000
 8000e10:	000003e7 	.word	0x000003e7
 8000e14:	20000008 	.word	0x20000008

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fba9 	bl	8001584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 fd56 	bl	80028f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	200001a0 	.word	0x200001a0

08000e50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <SPI1_IRQHandler+0x14>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f001 fb72 	bl	8002540 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000094 	.word	0x20000094

08000e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <USART2_IRQHandler+0x14>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 f878 	bl	8002f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	200000f8 	.word	0x200000f8

08000e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e90:	f7ff fff6 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eba:	f006 fceb 	bl	8007894 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ebe:	f7ff fbaf 	bl	8000620 <main>

08000ec2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ed0:	08007d10 	.word	0x08007d10
  ldr r2, =_sbss
 8000ed4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ed8:	20001c00 	.word	0x20001c00

08000edc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_COMP_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x3c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Init+0x3c>)
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	0049      	lsls	r1, r1, #1
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efa:	2003      	movs	r0, #3
 8000efc:	f7ff ff08 	bl	8000d10 <HAL_InitTick>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e001      	b.n	8000f10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe1c 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	781b      	ldrb	r3, [r3, #0]
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x1c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	001a      	movs	r2, r3
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x20>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	18d2      	adds	r2, r2, r3
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_IncTick+0x20>)
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	200001ec 	.word	0x200001ec

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <HAL_GetTick+0x10>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	200001ec 	.word	0x200001ec

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	0002      	movs	r2, r0
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6a:	d809      	bhi.n	8000f80 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	001a      	movs	r2, r3
 8000f72:	231f      	movs	r3, #31
 8000f74:	401a      	ands	r2, r3
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_EnableIRQ+0x30>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0002      	movs	r2, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa0:	d828      	bhi.n	8000ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	33c0      	adds	r3, #192	; 0xc0
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	589b      	ldr	r3, [r3, r2]
 8000fb2:	1dfa      	adds	r2, r7, #7
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	2203      	movs	r2, #3
 8000fba:	400a      	ands	r2, r1
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	21ff      	movs	r1, #255	; 0xff
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	43d2      	mvns	r2, r2
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2303      	movs	r3, #3
 8000fda:	4003      	ands	r3, r0
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	481f      	ldr	r0, [pc, #124]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	430a      	orrs	r2, r1
 8000fec:	33c0      	adds	r3, #192	; 0xc0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ff2:	e031      	b.n	8001058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <__NVIC_SetPriority+0xd8>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	400b      	ands	r3, r1
 8001000:	3b08      	subs	r3, #8
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3306      	adds	r3, #6
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <__NVIC_SetPriority+0xd8>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	001c      	movs	r4, r3
 8001044:	230f      	movs	r3, #15
 8001046:	4023      	ands	r3, r4
 8001048:	3b08      	subs	r3, #8
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	430a      	orrs	r2, r1
 800104e:	3306      	adds	r3, #6
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	18c3      	adds	r3, r0, r3
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b003      	add	sp, #12
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	210f      	movs	r1, #15
 8001074:	187b      	adds	r3, r7, r1
 8001076:	1c02      	adds	r2, r0, #0
 8001078:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	187b      	adds	r3, r7, r1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b25b      	sxtb	r3, r3
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff81 	bl	8000f8c <__NVIC_SetPriority>
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	0002      	movs	r2, r0
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ff57 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e050      	b.n	8001168 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2225      	movs	r2, #37	; 0x25
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d008      	beq.n	80010e4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2224      	movs	r2, #36	; 0x24
 80010dc:	2100      	movs	r1, #0
 80010de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e041      	b.n	8001168 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	210e      	movs	r1, #14
 80010f0:	438a      	bics	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	491c      	ldr	r1, [pc, #112]	; (8001170 <HAL_DMA_Abort+0xbc>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2101      	movs	r1, #1
 8001110:	438a      	bics	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_DMA_Abort+0xc0>)
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	221c      	movs	r2, #28
 800111e:	4013      	ands	r3, r2
 8001120:	2201      	movs	r2, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_DMA_Abort+0xc0>)
 8001126:	430a      	orrs	r2, r1
 8001128:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001132:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00c      	beq.n	8001156 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	490a      	ldr	r1, [pc, #40]	; (8001170 <HAL_DMA_Abort+0xbc>)
 8001148:	400a      	ands	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001154:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2225      	movs	r2, #37	; 0x25
 800115a:	2101      	movs	r1, #1
 800115c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2224      	movs	r2, #36	; 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	fffffeff 	.word	0xfffffeff
 8001174:	40020000 	.word	0x40020000

08001178 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	210f      	movs	r1, #15
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2225      	movs	r2, #37	; 0x25
 800118c:	5c9b      	ldrb	r3, [r3, r2]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d006      	beq.n	80011a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2204      	movs	r2, #4
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e049      	b.n	8001236 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	210e      	movs	r1, #14
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	491d      	ldr	r1, [pc, #116]	; (8001244 <HAL_DMA_Abort_IT+0xcc>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_DMA_Abort_IT+0xd0>)
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	221c      	movs	r2, #28
 80011dc:	4013      	ands	r3, r2
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_DMA_Abort_IT+0xd0>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00c      	beq.n	8001214 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001204:	490f      	ldr	r1, [pc, #60]	; (8001244 <HAL_DMA_Abort_IT+0xcc>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001212:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2225      	movs	r2, #37	; 0x25
 8001218:	2101      	movs	r1, #1
 800121a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	0010      	movs	r0, r2
 8001234:	4798      	blx	r3
    }
  }
  return status;
 8001236:	230f      	movs	r3, #15
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}
 8001244:	fffffeff 	.word	0xfffffeff
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e147      	b.n	80014ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2101      	movs	r1, #1
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4091      	lsls	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d100      	bne.n	8001274 <HAL_GPIO_Init+0x28>
 8001272:	e138      	b.n	80014e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	2b01      	cmp	r3, #1
 800127e:	d005      	beq.n	800128c <HAL_GPIO_Init+0x40>
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	4013      	ands	r3, r2
 8001288:	2b02      	cmp	r3, #2
 800128a:	d130      	bne.n	80012ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012c2:	2201      	movs	r2, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	2201      	movs	r2, #1
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d017      	beq.n	800132a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	4013      	ands	r3, r2
 8001332:	2b02      	cmp	r3, #2
 8001334:	d123      	bne.n	800137e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	58d3      	ldr	r3, [r2, r3]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2207      	movs	r2, #7
 8001348:	4013      	ands	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2107      	movs	r1, #7
 8001362:	400b      	ands	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	6939      	ldr	r1, [r7, #16]
 800137c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	43da      	mvns	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2203      	movs	r2, #3
 800139c:	401a      	ands	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	409a      	lsls	r2, r3
 80013a4:	0013      	movs	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	23c0      	movs	r3, #192	; 0xc0
 80013b8:	029b      	lsls	r3, r3, #10
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_GPIO_Init+0x174>
 80013be:	e092      	b.n	80014e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013c0:	4a50      	ldr	r2, [pc, #320]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3318      	adds	r3, #24
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	589b      	ldr	r3, [r3, r2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2203      	movs	r2, #3
 80013d2:	4013      	ands	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	220f      	movs	r2, #15
 80013d8:	409a      	lsls	r2, r3
 80013da:	0013      	movs	r3, r2
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x1ca>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a45      	ldr	r2, [pc, #276]	; (8001508 <HAL_GPIO_Init+0x2bc>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x1c6>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a44      	ldr	r2, [pc, #272]	; (800150c <HAL_GPIO_Init+0x2c0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x1c2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a43      	ldr	r2, [pc, #268]	; (8001510 <HAL_GPIO_Init+0x2c4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x1be>
 8001406:	2303      	movs	r3, #3
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 800140a:	2305      	movs	r3, #5
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x1cc>
 8001416:	2300      	movs	r3, #0
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	2103      	movs	r1, #3
 800141c:	400a      	ands	r2, r1
 800141e:	00d2      	lsls	r2, r2, #3
 8001420:	4093      	lsls	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001428:	4936      	ldr	r1, [pc, #216]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3318      	adds	r3, #24
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001436:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 800148c:	2384      	movs	r3, #132	; 0x84
 800148e:	58d3      	ldr	r3, [r2, r3]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	029b      	lsls	r3, r3, #10
 80014a4:	4013      	ands	r3, r2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b0:	4914      	ldr	r1, [pc, #80]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80014b2:	2284      	movs	r2, #132	; 0x84
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	58d3      	ldr	r3, [r2, r3]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	4013      	ands	r3, r2
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014de:	4909      	ldr	r1, [pc, #36]	; (8001504 <HAL_GPIO_Init+0x2b8>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	1e13      	subs	r3, r2, #0
 80014f6:	d000      	beq.n	80014fa <HAL_GPIO_Init+0x2ae>
 80014f8:	e6b0      	b.n	800125c <HAL_GPIO_Init+0x10>
  }
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b006      	add	sp, #24
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021800 	.word	0x40021800
 8001508:	50000400 	.word	0x50000400
 800150c:	50000800 	.word	0x50000800
 8001510:	50000c00 	.word	0x50000c00

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	0008      	movs	r0, r1
 800151e:	0011      	movs	r1, r2
 8001520:	1cbb      	adds	r3, r7, #2
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	1c7b      	adds	r3, r7, #1
 8001528:	1c0a      	adds	r2, r1, #0
 800152a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152c:	1c7b      	adds	r3, r7, #1
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001534:	1cbb      	adds	r3, r7, #2
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	1cbb      	adds	r3, r7, #2
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	000a      	movs	r2, r1
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001562:	1cbb      	adds	r3, r7, #2
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	041a      	lsls	r2, r3, #16
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	1cb9      	adds	r1, r7, #2
 8001572:	8809      	ldrh	r1, [r1, #0]
 8001574:	400b      	ands	r3, r1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
}
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b004      	add	sp, #16
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	0002      	movs	r2, r0
 800158c:	1dbb      	adds	r3, r7, #6
 800158e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	1dba      	adds	r2, r7, #6
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	4013      	ands	r3, r2
 800159a:	d008      	beq.n	80015ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800159e:	1dba      	adds	r2, r7, #6
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80015a4:	1dbb      	adds	r3, r7, #6
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 f815 	bl	80015d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	1dba      	adds	r2, r7, #6
 80015b4:	8812      	ldrh	r2, [r2, #0]
 80015b6:	4013      	ands	r3, r2
 80015b8:	d008      	beq.n	80015cc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015bc:	1dba      	adds	r2, r7, #6
 80015be:	8812      	ldrh	r2, [r2, #0]
 80015c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015c2:	1dbb      	adds	r3, r7, #6
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff f9e8 	bl	800099c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021800 	.word	0x40021800

080015d8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	0002      	movs	r2, r0
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	429a      	cmp	r2, r3
 800160e:	d11f      	bne.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	0013      	movs	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	189b      	adds	r3, r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4912      	ldr	r1, [pc, #72]	; (8001668 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800161e:	0018      	movs	r0, r3
 8001620:	f7fe fd72 	bl	8000108 <__udivsi3>
 8001624:	0003      	movs	r3, r0
 8001626:	3301      	adds	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162a:	e008      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3b01      	subs	r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e001      	b.n	800163e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e009      	b.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	401a      	ands	r2, r3
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	429a      	cmp	r2, r3
 800164e:	d0ed      	beq.n	800162c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b004      	add	sp, #16
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40007000 	.word	0x40007000
 8001660:	fffff9ff 	.word	0xfffff9ff
 8001664:	20000004 	.word	0x20000004
 8001668:	000f4240 	.word	0x000f4240

0800166c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	23e0      	movs	r3, #224	; 0xe0
 8001676:	01db      	lsls	r3, r3, #7
 8001678:	4013      	ands	r3, r2
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000

08001684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e2fe      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x1e>
 80016a0:	e07c      	b.n	800179c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a2:	4bc3      	ldr	r3, [pc, #780]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2238      	movs	r2, #56	; 0x38
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ac:	4bc0      	ldr	r3, [pc, #768]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2203      	movs	r2, #3
 80016b2:	4013      	ands	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_OscConfig+0x3e>
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d002      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4bb9      	ldr	r3, [pc, #740]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	4013      	ands	r3, r2
 80016d2:	d062      	beq.n	800179a <HAL_RCC_OscConfig+0x116>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d15e      	bne.n	800179a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e2d9      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_OscConfig+0x78>
 80016ec:	4bb0      	ldr	r3, [pc, #704]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4baf      	ldr	r3, [pc, #700]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	430a      	orrs	r2, r1
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e020      	b.n	800173e <HAL_RCC_OscConfig+0xba>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	23a0      	movs	r3, #160	; 0xa0
 8001702:	02db      	lsls	r3, r3, #11
 8001704:	429a      	cmp	r2, r3
 8001706:	d10e      	bne.n	8001726 <HAL_RCC_OscConfig+0xa2>
 8001708:	4ba9      	ldr	r3, [pc, #676]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4ba8      	ldr	r3, [pc, #672]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	02c9      	lsls	r1, r1, #11
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	4ba6      	ldr	r3, [pc, #664]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4ba5      	ldr	r3, [pc, #660]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0249      	lsls	r1, r1, #9
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e00b      	b.n	800173e <HAL_RCC_OscConfig+0xba>
 8001726:	4ba2      	ldr	r3, [pc, #648]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4ba1      	ldr	r3, [pc, #644]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800172c:	49a1      	ldr	r1, [pc, #644]	; (80019b4 <HAL_RCC_OscConfig+0x330>)
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4b9f      	ldr	r3, [pc, #636]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b9e      	ldr	r3, [pc, #632]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001738:	499f      	ldr	r1, [pc, #636]	; (80019b8 <HAL_RCC_OscConfig+0x334>)
 800173a:	400a      	ands	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d014      	beq.n	8001770 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fbfd 	bl	8000f44 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fbf8 	bl	8000f44 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e298      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	4b93      	ldr	r3, [pc, #588]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xcc>
 800176e:	e015      	b.n	800179c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fbe8 	bl	8000f44 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177a:	f7ff fbe3 	bl	8000f44 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e283      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178c:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0xf6>
 8001798:	e000      	b.n	800179c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2202      	movs	r2, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d100      	bne.n	80017a8 <HAL_RCC_OscConfig+0x124>
 80017a6:	e099      	b.n	80018dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a8:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2238      	movs	r2, #56	; 0x38
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b2:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2203      	movs	r2, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d102      	bne.n	80017c8 <HAL_RCC_OscConfig+0x144>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d002      	beq.n	80017ce <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d135      	bne.n	800183a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x162>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e256      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a74      	ldr	r2, [pc, #464]	; (80019bc <HAL_RCC_OscConfig+0x338>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	021a      	lsls	r2, r3, #8
 80017f6:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d112      	bne.n	8001828 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001802:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <HAL_RCC_OscConfig+0x33c>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0adb      	lsrs	r3, r3, #11
 800181c:	2207      	movs	r2, #7
 800181e:	4013      	ands	r3, r2
 8001820:	4a68      	ldr	r2, [pc, #416]	; (80019c4 <HAL_RCC_OscConfig+0x340>)
 8001822:	40da      	lsrs	r2, r3
 8001824:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x344>)
 8001826:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x348>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fa6f 	bl	8000d10 <HAL_InitTick>
 8001832:	1e03      	subs	r3, r0, #0
 8001834:	d051      	beq.n	80018da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e22c      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d030      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001842:	4b5b      	ldr	r3, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5e      	ldr	r2, [pc, #376]	; (80019c0 <HAL_RCC_OscConfig+0x33c>)
 8001848:	4013      	ands	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001856:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	0049      	lsls	r1, r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fb6e 	bl	8000f44 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fb69 	bl	8000f44 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e209      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	4b4b      	ldr	r3, [pc, #300]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4013      	ands	r3, r2
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b48      	ldr	r3, [pc, #288]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a4a      	ldr	r2, [pc, #296]	; (80019bc <HAL_RCC_OscConfig+0x338>)
 8001892:	4013      	ands	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	021a      	lsls	r2, r3, #8
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	e01b      	b.n	80018dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	4949      	ldr	r1, [pc, #292]	; (80019d0 <HAL_RCC_OscConfig+0x34c>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb48 	bl	8000f44 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb43 	bl	8000f44 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1e3      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x236>
 80018d8:	e000      	b.n	80018dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2208      	movs	r2, #8
 80018e2:	4013      	ands	r3, r2
 80018e4:	d047      	beq.n	8001976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2238      	movs	r2, #56	; 0x38
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b18      	cmp	r3, #24
 80018f0:	d10a      	bne.n	8001908 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d03c      	beq.n	8001976 <HAL_RCC_OscConfig+0x2f2>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d138      	bne.n	8001976 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e1c5      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d019      	beq.n	8001944 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001912:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff fb12 	bl	8000f44 <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fb0d 	bl	8000f44 <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1ad      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d0f1      	beq.n	8001926 <HAL_RCC_OscConfig+0x2a2>
 8001942:	e018      	b.n	8001976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001946:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800194a:	2101      	movs	r1, #1
 800194c:	438a      	bics	r2, r1
 800194e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff faf8 	bl	8000f44 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195a:	f7ff faf3 	bl	8000f44 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e193      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f1      	bne.n	800195a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2204      	movs	r2, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d100      	bne.n	8001982 <HAL_RCC_OscConfig+0x2fe>
 8001980:	e0c6      	b.n	8001b10 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	231f      	movs	r3, #31
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2238      	movs	r2, #56	; 0x38
 8001990:	4013      	ands	r3, r2
 8001992:	2b20      	cmp	r3, #32
 8001994:	d11e      	bne.n	80019d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_OscConfig+0x32c>)
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d100      	bne.n	80019a2 <HAL_RCC_OscConfig+0x31e>
 80019a0:	e0b6      	b.n	8001b10 <HAL_RCC_OscConfig+0x48c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d000      	beq.n	80019ac <HAL_RCC_OscConfig+0x328>
 80019aa:	e0b1      	b.n	8001b10 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e171      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	fffeffff 	.word	0xfffeffff
 80019b8:	fffbffff 	.word	0xfffbffff
 80019bc:	ffff80ff 	.word	0xffff80ff
 80019c0:	ffffc7ff 	.word	0xffffc7ff
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	20000004 	.word	0x20000004
 80019cc:	20000008 	.word	0x20000008
 80019d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019d4:	4bb1      	ldr	r3, [pc, #708]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 80019d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	4013      	ands	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_OscConfig+0x360>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x362>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d011      	beq.n	8001a0e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4bac      	ldr	r3, [pc, #688]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 80019ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ee:	4bab      	ldr	r3, [pc, #684]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0549      	lsls	r1, r1, #21
 80019f4:	430a      	orrs	r2, r1
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019f8:	4ba8      	ldr	r3, [pc, #672]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a06:	231f      	movs	r3, #31
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	4ba4      	ldr	r3, [pc, #656]	; (8001ca0 <HAL_RCC_OscConfig+0x61c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d11a      	bne.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a1a:	4ba1      	ldr	r3, [pc, #644]	; (8001ca0 <HAL_RCC_OscConfig+0x61c>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	4ba0      	ldr	r3, [pc, #640]	; (8001ca0 <HAL_RCC_OscConfig+0x61c>)
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	0049      	lsls	r1, r1, #1
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa8c 	bl	8000f44 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff fa87 	bl	8000f44 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e127      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b96      	ldr	r3, [pc, #600]	; (8001ca0 <HAL_RCC_OscConfig+0x61c>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3e2>
 8001a58:	4b90      	ldr	r3, [pc, #576]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a5c:	4b8f      	ldr	r3, [pc, #572]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	430a      	orrs	r2, r1
 8001a62:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a64:	e01c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x404>
 8001a6e:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a72:	4b8a      	ldr	r3, [pc, #552]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a74:	2104      	movs	r1, #4
 8001a76:	430a      	orrs	r2, r1
 8001a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7e:	4b87      	ldr	r3, [pc, #540]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
 8001a88:	4b84      	ldr	r3, [pc, #528]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a8c:	4b83      	ldr	r3, [pc, #524]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a94:	4b81      	ldr	r3, [pc, #516]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a98:	4b80      	ldr	r3, [pc, #512]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d014      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fa4c 	bl	8000f44 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab0:	e009      	b.n	8001ac6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fa47 	bl	8000f44 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4a79      	ldr	r2, [pc, #484]	; (8001ca4 <HAL_RCC_OscConfig+0x620>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0e6      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	4b75      	ldr	r3, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
 8001ad0:	e013      	b.n	8001afa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa37 	bl	8000f44 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ada:	e009      	b.n	8001af0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff fa32 	bl	8000f44 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	4a6f      	ldr	r2, [pc, #444]	; (8001ca4 <HAL_RCC_OscConfig+0x620>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0d1      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af0:	4b6a      	ldr	r3, [pc, #424]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2202      	movs	r2, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001afa:	231f      	movs	r3, #31
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b08:	4b64      	ldr	r3, [pc, #400]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b0a:	4967      	ldr	r1, [pc, #412]	; (8001ca8 <HAL_RCC_OscConfig+0x624>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x496>
 8001b18:	e0bb      	b.n	8001c92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1a:	4b60      	ldr	r3, [pc, #384]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2238      	movs	r2, #56	; 0x38
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d100      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4a4>
 8001b26:	e07b      	b.n	8001c20 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d156      	bne.n	8001bde <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b30:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b36:	495d      	ldr	r1, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001b38:	400a      	ands	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fa02 	bl	8000f44 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff f9fd 	bl	8000f44 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e09d      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	049b      	lsls	r3, r3, #18
 8001b60:	4013      	ands	r3, r2
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4a51      	ldr	r2, [pc, #324]	; (8001cb0 <HAL_RCC_OscConfig+0x62c>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	431a      	orrs	r2, r3
 8001b92:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0449      	lsls	r1, r1, #17
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0549      	lsls	r1, r1, #21
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f9c6 	bl	8000f44 <HAL_GetTick>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff f9c1 	bl	8000f44 <HAL_GetTick>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e061      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	049b      	lsls	r3, r3, #18
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x53a>
 8001bdc:	e059      	b.n	8001c92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001be4:	4931      	ldr	r1, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x628>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff f9ab 	bl	8000f44 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f9a6 	bl	8000f44 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e046      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	049b      	lsls	r3, r3, #18
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001c18:	4926      	ldr	r1, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x630>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	e038      	b.n	8001c92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e033      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x618>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2203      	movs	r2, #3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d126      	bne.n	8001c8e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2270      	movs	r2, #112	; 0x70
 8001c44:	401a      	ands	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d11f      	bne.n	8001c8e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	23fe      	movs	r3, #254	; 0xfe
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d116      	bne.n	8001c8e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	23f8      	movs	r3, #248	; 0xf8
 8001c64:	039b      	lsls	r3, r3, #14
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10e      	bne.n	8001c8e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	23e0      	movs	r3, #224	; 0xe0
 8001c74:	051b      	lsls	r3, r3, #20
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	0f5b      	lsrs	r3, r3, #29
 8001c84:	075a      	lsls	r2, r3, #29
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b008      	add	sp, #32
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	00001388 	.word	0x00001388
 8001ca8:	efffffff 	.word	0xefffffff
 8001cac:	feffffff 	.word	0xfeffffff
 8001cb0:	11c1808c 	.word	0x11c1808c
 8001cb4:	eefefffc 	.word	0xeefefffc

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0e9      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d91e      	bls.n	8001d18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f92a 	bl	8000f44 <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7ff f925 	bl	8000f44 <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0ca      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1ee      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2204      	movs	r2, #4
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d006      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d2c:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b5f      	ldr	r3, [pc, #380]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	21e0      	movs	r1, #224	; 0xe0
 8001d34:	01c9      	lsls	r1, r1, #7
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d057      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d12b      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e097      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	049b      	lsls	r3, r3, #18
 8001d80:	4013      	ands	r3, r2
 8001d82:	d11f      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e08b      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d113      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e07f      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e074      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e06d      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b37      	ldr	r3, [pc, #220]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f8b4 	bl	8000f44 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7ff f8af 	bl	8000f44 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a2f      	ldr	r2, [pc, #188]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e054      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2238      	movs	r2, #56	; 0x38
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ec      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d21e      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f88c 	bl	8000f44 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7ff f887 	bl	8000f44 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e02c      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <HAL_RCC_ClockConfig+0x200>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e72:	f000 f829 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e76:	0001      	movs	r1, r0
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	220f      	movs	r2, #15
 8001e80:	401a      	ands	r2, r3
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x204>)
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	58d3      	ldr	r3, [r2, r3]
 8001e88:	221f      	movs	r2, #31
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	000a      	movs	r2, r1
 8001e8e:	40da      	lsrs	r2, r3
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_ClockConfig+0x208>)
 8001e92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x20c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7fe ff39 	bl	8000d10 <HAL_InitTick>
 8001e9e:	0003      	movs	r3, r0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b004      	add	sp, #16
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	00001388 	.word	0x00001388
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	fffff0ff 	.word	0xfffff0ff
 8001eb8:	ffff8fff 	.word	0xffff8fff
 8001ebc:	08007bc8 	.word	0x08007bc8
 8001ec0:	20000004 	.word	0x20000004
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ece:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2238      	movs	r2, #56	; 0x38
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0adb      	lsrs	r3, r3, #11
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eee:	f7fe f90b 	bl	8000108 <__udivsi3>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e05d      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2238      	movs	r2, #56	; 0x38
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d102      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f04:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e054      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d138      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d10d      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f38:	f7fe f8e6 	bl	8000108 <__udivsi3>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	0019      	movs	r1, r3
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	227f      	movs	r2, #127	; 0x7f
 8001f48:	4013      	ands	r3, r2
 8001f4a:	434b      	muls	r3, r1
 8001f4c:	617b      	str	r3, [r7, #20]
        break;
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f54:	f7fe f8d8 	bl	8000108 <__udivsi3>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	227f      	movs	r2, #127	; 0x7f
 8001f64:	4013      	ands	r3, r2
 8001f66:	434b      	muls	r3, r1
 8001f68:	617b      	str	r3, [r7, #20]
        break;
 8001f6a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0f5b      	lsrs	r3, r3, #29
 8001f72:	2207      	movs	r2, #7
 8001f74:	4013      	ands	r3, r2
 8001f76:	3301      	adds	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	6978      	ldr	r0, [r7, #20]
 8001f7e:	f7fe f8c3 	bl	8000108 <__udivsi3>
 8001f82:	0003      	movs	r3, r0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e015      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f88:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2238      	movs	r2, #56	; 0x38
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d103      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2238      	movs	r2, #56	; 0x38
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b18      	cmp	r3, #24
 8001fa6:	d103      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fa8:	23fa      	movs	r3, #250	; 0xfa
 8001faa:	01db      	lsls	r3, r3, #7
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e001      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fb4:	693b      	ldr	r3, [r7, #16]
}
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b006      	add	sp, #24
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fe4:	f7ff fff2 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fe8:	0004      	movs	r4, r0
 8001fea:	f7ff fb3f 	bl	800166c <LL_RCC_GetAPB1Prescaler>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	0b1a      	lsrs	r2, r3, #12
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	58d3      	ldr	r3, [r2, r3]
 8001ff8:	221f      	movs	r2, #31
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	40dc      	lsrs	r4, r3
 8001ffe:	0023      	movs	r3, r4
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	bdb0      	pop	{r4, r5, r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	08007c08 	.word	0x08007c08

0800200c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_RCC_GetClockConfig+0x4c>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2207      	movs	r2, #7
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_GetClockConfig+0x4c>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	23f0      	movs	r3, #240	; 0xf0
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	401a      	ands	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_GetClockConfig+0x4c>)
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	23e0      	movs	r3, #224	; 0xe0
 800203c:	01db      	lsls	r3, r3, #7
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetClockConfig+0x50>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2207      	movs	r2, #7
 800204a:	401a      	ands	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	40022000 	.word	0x40022000

08002060 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002068:	2313      	movs	r3, #19
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002070:	2312      	movs	r3, #18
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	d100      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002084:	e0a3      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2011      	movs	r0, #17
 8002088:	183b      	adds	r3, r7, r0
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4bc3      	ldr	r3, [pc, #780]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	055b      	lsls	r3, r3, #21
 8002096:	4013      	ands	r3, r2
 8002098:	d110      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4bc0      	ldr	r3, [pc, #768]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800209c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209e:	4bbf      	ldr	r3, [pc, #764]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0549      	lsls	r1, r1, #21
 80020a4:	430a      	orrs	r2, r1
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80020a8:	4bbc      	ldr	r3, [pc, #752]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	055b      	lsls	r3, r3, #21
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	183b      	adds	r3, r7, r0
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020bc:	4bb8      	ldr	r3, [pc, #736]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4bb7      	ldr	r3, [pc, #732]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	0049      	lsls	r1, r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ca:	f7fe ff3b 	bl	8000f44 <HAL_GetTick>
 80020ce:	0003      	movs	r3, r0
 80020d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020d2:	e00b      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d4:	f7fe ff36 	bl	8000f44 <HAL_GetTick>
 80020d8:	0002      	movs	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d904      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80020e2:	2313      	movs	r3, #19
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2203      	movs	r2, #3
 80020e8:	701a      	strb	r2, [r3, #0]
        break;
 80020ea:	e005      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ec:	4bac      	ldr	r3, [pc, #688]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2380      	movs	r3, #128	; 0x80
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0ed      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020f8:	2313      	movs	r3, #19
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d154      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002102:	4ba6      	ldr	r3, [pc, #664]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4013      	ands	r3, r2
 800210c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d019      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	429a      	cmp	r2, r3
 800211c:	d014      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800211e:	4b9f      	ldr	r3, [pc, #636]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	4aa0      	ldr	r2, [pc, #640]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002124:	4013      	ands	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002128:	4b9c      	ldr	r3, [pc, #624]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800212c:	4b9b      	ldr	r3, [pc, #620]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	0249      	lsls	r1, r1, #9
 8002132:	430a      	orrs	r2, r1
 8002134:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002136:	4b99      	ldr	r3, [pc, #612]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800213a:	4b98      	ldr	r3, [pc, #608]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213c:	499a      	ldr	r1, [pc, #616]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800213e:	400a      	ands	r2, r1
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002142:	4b96      	ldr	r3, [pc, #600]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2201      	movs	r2, #1
 800214c:	4013      	ands	r3, r2
 800214e:	d016      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fef8 	bl	8000f44 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002158:	e00c      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fef3 	bl	8000f44 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	4a91      	ldr	r2, [pc, #580]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d904      	bls.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800216a:	2313      	movs	r3, #19
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]
            break;
 8002172:	e004      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002174:	4b89      	ldr	r3, [pc, #548]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d0ed      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800217e:	2313      	movs	r3, #19
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	4a85      	ldr	r2, [pc, #532]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002196:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002198:	430a      	orrs	r2, r1
 800219a:	65da      	str	r2, [r3, #92]	; 0x5c
 800219c:	e00c      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800219e:	2312      	movs	r3, #18
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2213      	movs	r2, #19
 80021a4:	18ba      	adds	r2, r7, r2
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e005      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ac:	2312      	movs	r3, #18
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2213      	movs	r2, #19
 80021b2:	18ba      	adds	r2, r7, r2
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021b8:	2311      	movs	r3, #17
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c6:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c8:	4979      	ldr	r1, [pc, #484]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d009      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d8:	4b70      	ldr	r3, [pc, #448]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	2203      	movs	r2, #3
 80021de:	4393      	bics	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e8:	430a      	orrs	r2, r1
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2202      	movs	r2, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f6:	4b69      	ldr	r3, [pc, #420]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	220c      	movs	r2, #12
 80021fc:	4393      	bics	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002206:	430a      	orrs	r2, r1
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2210      	movs	r2, #16
 8002210:	4013      	ands	r3, r2
 8002212:	d009      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	4a66      	ldr	r2, [pc, #408]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800221a:	4013      	ands	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	4b5e      	ldr	r3, [pc, #376]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002224:	430a      	orrs	r2, r1
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002238:	4a5f      	ldr	r2, [pc, #380]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800223a:	4013      	ands	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	4b56      	ldr	r3, [pc, #344]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002244:	430a      	orrs	r2, r1
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4013      	ands	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800225a:	4013      	ands	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002264:	430a      	orrs	r2, r1
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2220      	movs	r2, #32
 800226e:	4013      	ands	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002282:	430a      	orrs	r2, r1
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	01db      	lsls	r3, r3, #7
 800228e:	4013      	ands	r3, r2
 8002290:	d015      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002292:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	0899      	lsrs	r1, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d106      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0249      	lsls	r1, r1, #9
 80022ba:	430a      	orrs	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	031b      	lsls	r3, r3, #12
 80022c6:	4013      	ands	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022ca:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	4393      	bics	r3, r2
 80022d2:	0019      	movs	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d8:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022da:	430a      	orrs	r2, r1
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	039b      	lsls	r3, r3, #14
 80022e6:	4013      	ands	r3, r2
 80022e8:	d016      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	4a35      	ldr	r2, [pc, #212]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	03db      	lsls	r3, r3, #15
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0449      	lsls	r1, r1, #17
 8002314:	430a      	orrs	r2, r1
 8002316:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	03db      	lsls	r3, r3, #15
 8002320:	4013      	ands	r3, r2
 8002322:	d016      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002334:	430a      	orrs	r2, r1
 8002336:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	045b      	lsls	r3, r3, #17
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	0449      	lsls	r1, r1, #17
 800234e:	430a      	orrs	r2, r1
 8002350:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	4013      	ands	r3, r2
 800235c:	d016      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236e:	430a      	orrs	r2, r1
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	01db      	lsls	r3, r3, #7
 800237a:	429a      	cmp	r2, r3
 800237c:	d106      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0249      	lsls	r1, r1, #9
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800238c:	2312      	movs	r3, #18
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b006      	add	sp, #24
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	fffffcff 	.word	0xfffffcff
 80023a8:	fffeffff 	.word	0xfffeffff
 80023ac:	00001388 	.word	0x00001388
 80023b0:	efffffff 	.word	0xefffffff
 80023b4:	fffff3ff 	.word	0xfffff3ff
 80023b8:	fff3ffff 	.word	0xfff3ffff
 80023bc:	ffcfffff 	.word	0xffcfffff
 80023c0:	ffffcfff 	.word	0xffffcfff
 80023c4:	ffbfffff 	.word	0xffbfffff
 80023c8:	feffffff 	.word	0xfeffffff
 80023cc:	ffff3fff 	.word	0xffff3fff

080023d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0a8      	b.n	8002534 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	2382      	movs	r3, #130	; 0x82
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d009      	beq.n	800240a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
 80023fc:	e005      	b.n	800240a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	225d      	movs	r2, #93	; 0x5d
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	225c      	movs	r2, #92	; 0x5c
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	0018      	movs	r0, r3
 8002428:	f7fe fbb8 	bl	8000b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	225d      	movs	r2, #93	; 0x5d
 8002430:	2102      	movs	r1, #2
 8002432:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2140      	movs	r1, #64	; 0x40
 8002440:	438a      	bics	r2, r1
 8002442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	23e0      	movs	r3, #224	; 0xe0
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	429a      	cmp	r2, r3
 800244e:	d902      	bls.n	8002456 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e002      	b.n	800245c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	015b      	lsls	r3, r3, #5
 800245a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	23f0      	movs	r3, #240	; 0xf0
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	429a      	cmp	r2, r3
 8002466:	d008      	beq.n	800247a <HAL_SPI_Init+0xaa>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	23e0      	movs	r3, #224	; 0xe0
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	429a      	cmp	r2, r3
 8002472:	d002      	beq.n	800247a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	2382      	movs	r3, #130	; 0x82
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	2384      	movs	r3, #132	; 0x84
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	400b      	ands	r3, r1
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2102      	movs	r1, #2
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2101      	movs	r1, #1
 80024a0:	400b      	ands	r3, r1
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6999      	ldr	r1, [r3, #24]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	400b      	ands	r3, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2138      	movs	r1, #56	; 0x38
 80024b6:	400b      	ands	r3, r1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	400b      	ands	r3, r1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	0011      	movs	r1, r2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	401a      	ands	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	2204      	movs	r2, #4
 80024e0:	401a      	ands	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	2110      	movs	r1, #16
 80024e8:	400b      	ands	r3, r1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	2108      	movs	r1, #8
 80024f2:	400b      	ands	r3, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68d9      	ldr	r1, [r3, #12]
 80024fa:	23f0      	movs	r3, #240	; 0xf0
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	400b      	ands	r3, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	0011      	movs	r1, r2
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	015b      	lsls	r3, r3, #5
 800250a:	401a      	ands	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4907      	ldr	r1, [pc, #28]	; (800253c <HAL_SPI_Init+0x16c>)
 8002520:	400a      	ands	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	225d      	movs	r2, #93	; 0x5d
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}
 800253c:	fffff7ff 	.word	0xfffff7ff

08002540 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	001a      	movs	r2, r3
 800255e:	2301      	movs	r3, #1
 8002560:	4013      	ands	r3, r2
 8002562:	d10f      	bne.n	8002584 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2201      	movs	r2, #1
 8002568:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800256a:	d00b      	beq.n	8002584 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	099b      	lsrs	r3, r3, #6
 8002570:	001a      	movs	r2, r3
 8002572:	2301      	movs	r3, #1
 8002574:	4013      	ands	r3, r2
 8002576:	d005      	beq.n	8002584 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	0010      	movs	r0, r2
 8002580:	4798      	blx	r3
    return;
 8002582:	e0d5      	b.n	8002730 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	001a      	movs	r2, r3
 800258a:	2301      	movs	r3, #1
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <HAL_SPI_IRQHandler+0x68>
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	09db      	lsrs	r3, r3, #7
 8002594:	001a      	movs	r2, r3
 8002596:	2301      	movs	r3, #1
 8002598:	4013      	ands	r3, r2
 800259a:	d005      	beq.n	80025a8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	0010      	movs	r0, r2
 80025a4:	4798      	blx	r3
    return;
 80025a6:	e0c3      	b.n	8002730 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	001a      	movs	r2, r3
 80025ae:	2301      	movs	r3, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d10c      	bne.n	80025ce <HAL_SPI_IRQHandler+0x8e>
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	001a      	movs	r2, r3
 80025ba:	2301      	movs	r3, #1
 80025bc:	4013      	ands	r3, r2
 80025be:	d106      	bne.n	80025ce <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	001a      	movs	r2, r3
 80025c6:	2301      	movs	r3, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_SPI_IRQHandler+0x8e>
 80025cc:	e0b0      	b.n	8002730 <HAL_SPI_IRQHandler+0x1f0>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	001a      	movs	r2, r3
 80025d4:	2301      	movs	r3, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_SPI_IRQHandler+0x9c>
 80025da:	e0a9      	b.n	8002730 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	001a      	movs	r2, r3
 80025e2:	2301      	movs	r3, #1
 80025e4:	4013      	ands	r3, r2
 80025e6:	d023      	beq.n	8002630 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	225d      	movs	r2, #93	; 0x5d
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d011      	beq.n	8002618 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	2204      	movs	r2, #4
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	e00b      	b.n	8002630 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
        return;
 800262e:	e07f      	b.n	8002730 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	001a      	movs	r2, r3
 8002636:	2301      	movs	r3, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d014      	beq.n	8002666 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	2201      	movs	r2, #1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	438a      	bics	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	001a      	movs	r2, r3
 800266c:	2301      	movs	r3, #1
 800266e:	4013      	ands	r3, r2
 8002670:	d00c      	beq.n	800268c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	2208      	movs	r2, #8
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002690:	2b00      	cmp	r3, #0
 8002692:	d04c      	beq.n	800272e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	21e0      	movs	r1, #224	; 0xe0
 80026a0:	438a      	bics	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	225d      	movs	r2, #93	; 0x5d
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d103      	bne.n	80026bc <HAL_SPI_IRQHandler+0x17c>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d032      	beq.n	8002722 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2103      	movs	r1, #3
 80026c8:	438a      	bics	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <HAL_SPI_IRQHandler+0x1f8>)
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7fe fd49 	bl	8001178 <HAL_DMA_Abort_IT>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	2240      	movs	r2, #64	; 0x40
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_SPI_IRQHandler+0x1f8>)
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	0018      	movs	r0, r3
 800270c:	f7fe fd34 	bl	8001178 <HAL_DMA_Abort_IT>
 8002710:	1e03      	subs	r3, r0, #0
 8002712:	d00b      	beq.n	800272c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002720:	e004      	b.n	800272c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f809 	bl	800273c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800272a:	e000      	b.n	800272e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800272c:	46c0      	nop			; (mov r8, r8)
    return;
 800272e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002730:	46bd      	mov	sp, r7
 8002732:	b008      	add	sp, #32
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	0800274d 	.word	0x0800274d

0800273c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2246      	movs	r2, #70	; 0x46
 800275e:	2100      	movs	r1, #0
 8002760:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff ffe6 	bl	800273c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b004      	add	sp, #16
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e04a      	b.n	8002820 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223d      	movs	r2, #61	; 0x3d
 800278e:	5c9b      	ldrb	r3, [r3, r2]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223c      	movs	r2, #60	; 0x3c
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 f841 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223d      	movs	r2, #61	; 0x3d
 80027aa:	2102      	movs	r1, #2
 80027ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	0019      	movs	r1, r3
 80027b8:	0010      	movs	r0, r2
 80027ba:	f000 f9eb 	bl	8002b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2248      	movs	r2, #72	; 0x48
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223e      	movs	r2, #62	; 0x3e
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223f      	movs	r2, #63	; 0x3f
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2241      	movs	r2, #65	; 0x41
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2242      	movs	r2, #66	; 0x42
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2243      	movs	r2, #67	; 0x43
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2244      	movs	r2, #68	; 0x44
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2245      	movs	r2, #69	; 0x45
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2246      	movs	r2, #70	; 0x46
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2247      	movs	r2, #71	; 0x47
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223d      	movs	r2, #61	; 0x3d
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	223d      	movs	r2, #61	; 0x3d
 8002844:	5c9b      	ldrb	r3, [r3, r2]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d001      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e042      	b.n	80028d6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	223d      	movs	r2, #61	; 0x3d
 8002854:	2102      	movs	r1, #2
 8002856:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_TIM_Base_Start_IT+0xa8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00f      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x5a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	05db      	lsls	r3, r3, #23
 800287a:	429a      	cmp	r2, r3
 800287c:	d009      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x5a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <HAL_TIM_Base_Start_IT+0xac>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x5a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d116      	bne.n	80028c0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <HAL_TIM_Base_Start_IT+0xb4>)
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d016      	beq.n	80028d2 <HAL_TIM_Base_Start_IT+0x9a>
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d011      	beq.n	80028d2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028be:	e008      	b.n	80028d2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e000      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b004      	add	sp, #16
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40014000 	.word	0x40014000
 80028ec:	00010007 	.word	0x00010007

080028f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d124      	bne.n	8002950 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2202      	movs	r2, #2
 800290e:	4013      	ands	r3, r2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d11d      	bne.n	8002950 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2203      	movs	r2, #3
 800291a:	4252      	negs	r2, r2
 800291c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2203      	movs	r2, #3
 800292c:	4013      	ands	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f916 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002938:	e007      	b.n	800294a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f909 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f915 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2204      	movs	r2, #4
 8002958:	4013      	ands	r3, r2
 800295a:	2b04      	cmp	r3, #4
 800295c:	d125      	bne.n	80029aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2204      	movs	r2, #4
 8002966:	4013      	ands	r3, r2
 8002968:	2b04      	cmp	r3, #4
 800296a:	d11e      	bne.n	80029aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2205      	movs	r2, #5
 8002972:	4252      	negs	r2, r2
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	23c0      	movs	r3, #192	; 0xc0
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4013      	ands	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f8e9 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002992:	e007      	b.n	80029a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	0018      	movs	r0, r3
 8002998:	f000 f8dc 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 f8e8 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2208      	movs	r2, #8
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d124      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2208      	movs	r2, #8
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11d      	bne.n	8002a02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2209      	movs	r2, #9
 80029cc:	4252      	negs	r2, r2
 80029ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2204      	movs	r2, #4
 80029d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	2203      	movs	r2, #3
 80029de:	4013      	ands	r3, r2
 80029e0:	d004      	beq.n	80029ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f8bd 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 80029ea:	e007      	b.n	80029fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f8b0 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 f8bc 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2210      	movs	r2, #16
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d125      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2210      	movs	r2, #16
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d11e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2211      	movs	r2, #17
 8002a24:	4252      	negs	r2, r2
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	23c0      	movs	r3, #192	; 0xc0
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f890 	bl	8002b64 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e007      	b.n	8002a56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 f883 	bl	8002b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f88f 	bl	8002b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10f      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	4252      	negs	r2, r2
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7fe f847 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d10f      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d108      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2281      	movs	r2, #129	; 0x81
 8002aac:	4252      	negs	r2, r2
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 f8f6 	bl	8002ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10e      	bne.n	8002aea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_TIM_IRQHandler+0x260>)
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f8e5 	bl	8002cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2240      	movs	r2, #64	; 0x40
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d10f      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d108      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2241      	movs	r2, #65	; 0x41
 8002b0c:	4252      	negs	r2, r2
 8002b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f836 	bl	8002b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d10f      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d108      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2221      	movs	r2, #33	; 0x21
 8002b3a:	4252      	negs	r2, r2
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 f8a7 	bl	8002c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	fffffeff 	.word	0xfffffeff

08002b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d008      	beq.n	8002bbe <TIM_Base_SetConfig+0x2a>
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	05db      	lsls	r3, r3, #23
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x2a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a30      	ldr	r2, [pc, #192]	; (8002c7c <TIM_Base_SetConfig+0xe8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2270      	movs	r2, #112	; 0x70
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d018      	beq.n	8002c0a <TIM_Base_SetConfig+0x76>
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d013      	beq.n	8002c0a <TIM_Base_SetConfig+0x76>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <TIM_Base_SetConfig+0xe8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00f      	beq.n	8002c0a <TIM_Base_SetConfig+0x76>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a24      	ldr	r2, [pc, #144]	; (8002c80 <TIM_Base_SetConfig+0xec>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_Base_SetConfig+0x76>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <TIM_Base_SetConfig+0xf0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0x76>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <TIM_Base_SetConfig+0xf4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0x76>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <TIM_Base_SetConfig+0xf8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <TIM_Base_SetConfig+0xfc>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	4393      	bics	r3, r2
 8002c22:	001a      	movs	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <TIM_Base_SetConfig+0xe4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <TIM_Base_SetConfig+0xce>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <TIM_Base_SetConfig+0xf0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <TIM_Base_SetConfig+0xce>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <TIM_Base_SetConfig+0xf4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0xce>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <TIM_Base_SetConfig+0xf8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d103      	bne.n	8002c6a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	615a      	str	r2, [r3, #20]
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b004      	add	sp, #16
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40002000 	.word	0x40002000
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800
 8002c90:	fffffcff 	.word	0xfffffcff

08002c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e046      	b.n	8002d64 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2288      	movs	r2, #136	; 0x88
 8002cda:	589b      	ldr	r3, [r3, r2]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2284      	movs	r2, #132	; 0x84
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7fd ffa8 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2288      	movs	r2, #136	; 0x88
 8002cf4:	2124      	movs	r1, #36	; 0x24
 8002cf6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 fc6c 	bl	80035e8 <UART_SetConfig>
 8002d10:	0003      	movs	r3, r0
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e024      	b.n	8002d64 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f000 ff1d 	bl	8003b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	490d      	ldr	r1, [pc, #52]	; (8002d6c <HAL_UART_Init+0xa8>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	212a      	movs	r1, #42	; 0x2a
 8002d46:	438a      	bics	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 ffb5 	bl	8003ccc <UART_CheckIdleState>
 8002d62:	0003      	movs	r3, r0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	ffffb7ff 	.word	0xffffb7ff

08002d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	1dbb      	adds	r3, r7, #6
 8002d7e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2288      	movs	r2, #136	; 0x88
 8002d84:	589b      	ldr	r3, [r3, r2]
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d000      	beq.n	8002d8c <HAL_UART_Transmit+0x1c>
 8002d8a:	e088      	b.n	8002e9e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_UART_Transmit+0x2a>
 8002d92:	1dbb      	adds	r3, r7, #6
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e080      	b.n	8002ea0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	015b      	lsls	r3, r3, #5
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d109      	bne.n	8002dbe <HAL_UART_Transmit+0x4e>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d105      	bne.n	8002dbe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d001      	beq.n	8002dbe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e070      	b.n	8002ea0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2290      	movs	r2, #144	; 0x90
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2288      	movs	r2, #136	; 0x88
 8002dca:	2121      	movs	r1, #33	; 0x21
 8002dcc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dce:	f7fe f8b9 	bl	8000f44 <HAL_GetTick>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1dba      	adds	r2, r7, #6
 8002dda:	2154      	movs	r1, #84	; 0x54
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1dba      	adds	r2, r7, #6
 8002de4:	2156      	movs	r1, #86	; 0x56
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	015b      	lsls	r3, r3, #5
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d108      	bne.n	8002e08 <HAL_UART_Transmit+0x98>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e003      	b.n	8002e10 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e10:	e02c      	b.n	8002e6c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	0013      	movs	r3, r2
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	f000 ffa2 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e039      	b.n	8002ea0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	001a      	movs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	05d2      	lsls	r2, r2, #23
 8002e3e:	0dd2      	lsrs	r2, r2, #23
 8002e40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e007      	b.n	8002e5a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2256      	movs	r2, #86	; 0x56
 8002e5e:	5a9b      	ldrh	r3, [r3, r2]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b299      	uxth	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2256      	movs	r2, #86	; 0x56
 8002e6a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2256      	movs	r2, #86	; 0x56
 8002e70:	5a9b      	ldrh	r3, [r3, r2]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1cc      	bne.n	8002e12 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	0013      	movs	r3, r2
 8002e82:	2200      	movs	r2, #0
 8002e84:	2140      	movs	r1, #64	; 0x40
 8002e86:	f000 ff6f 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8002e8a:	1e03      	subs	r3, r0, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e006      	b.n	8002ea0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2288      	movs	r2, #136	; 0x88
 8002e96:	2120      	movs	r1, #32
 8002e98:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b008      	add	sp, #32
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	1dbb      	adds	r3, r7, #6
 8002eb4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	228c      	movs	r2, #140	; 0x8c
 8002eba:	589b      	ldr	r3, [r3, r2]
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d14a      	bne.n	8002f56 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_UART_Receive_IT+0x26>
 8002ec6:	1dbb      	adds	r3, r7, #6
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e042      	b.n	8002f58 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	015b      	lsls	r3, r3, #5
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d109      	bne.n	8002ef2 <HAL_UART_Receive_IT+0x4a>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d001      	beq.n	8002ef2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e032      	b.n	8002f58 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_UART_Receive_IT+0xb8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d020      	beq.n	8002f44 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d019      	beq.n	8002f44 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f10:	f3ef 8310 	mrs	r3, PRIMASK
 8002f14:	613b      	str	r3, [r7, #16]
  return(result);
 8002f16:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2180      	movs	r1, #128	; 0x80
 8002f32:	04c9      	lsls	r1, r1, #19
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f383 8810 	msr	PRIMASK, r3
}
 8002f42:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 ffd3 	bl	8003ef8 <UART_Start_Receive_IT>
 8002f52:	0003      	movs	r3, r0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b008      	add	sp, #32
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40008000 	.word	0x40008000

08002f64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f64:	b5b0      	push	{r4, r5, r7, lr}
 8002f66:	b0aa      	sub	sp, #168	; 0xa8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	22a4      	movs	r2, #164	; 0xa4
 8002f74:	18b9      	adds	r1, r7, r2
 8002f76:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	20a0      	movs	r0, #160	; 0xa0
 8002f80:	1839      	adds	r1, r7, r0
 8002f82:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	249c      	movs	r4, #156	; 0x9c
 8002f8c:	1939      	adds	r1, r7, r4
 8002f8e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f90:	0011      	movs	r1, r2
 8002f92:	18bb      	adds	r3, r7, r2
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4aa2      	ldr	r2, [pc, #648]	; (8003220 <HAL_UART_IRQHandler+0x2bc>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2298      	movs	r2, #152	; 0x98
 8002f9c:	18bd      	adds	r5, r7, r2
 8002f9e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002fa0:	18bb      	adds	r3, r7, r2
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11a      	bne.n	8002fde <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2220      	movs	r2, #32
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d015      	beq.n	8002fde <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fb2:	183b      	adds	r3, r7, r0
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d105      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	055b      	lsls	r3, r3, #21
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00a      	beq.n	8002fde <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d100      	bne.n	8002fd2 <HAL_UART_IRQHandler+0x6e>
 8002fd0:	e2dc      	b.n	800358c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	0010      	movs	r0, r2
 8002fda:	4798      	blx	r3
      }
      return;
 8002fdc:	e2d6      	b.n	800358c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002fde:	2398      	movs	r3, #152	; 0x98
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d100      	bne.n	8002fea <HAL_UART_IRQHandler+0x86>
 8002fe8:	e122      	b.n	8003230 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002fea:	239c      	movs	r3, #156	; 0x9c
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8c      	ldr	r2, [pc, #560]	; (8003224 <HAL_UART_IRQHandler+0x2c0>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d106      	bne.n	8003004 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ff6:	23a0      	movs	r3, #160	; 0xa0
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a8a      	ldr	r2, [pc, #552]	; (8003228 <HAL_UART_IRQHandler+0x2c4>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	d100      	bne.n	8003004 <HAL_UART_IRQHandler+0xa0>
 8003002:	e115      	b.n	8003230 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003004:	23a4      	movs	r3, #164	; 0xa4
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d012      	beq.n	8003036 <HAL_UART_IRQHandler+0xd2>
 8003010:	23a0      	movs	r3, #160	; 0xa0
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4013      	ands	r3, r2
 800301c:	d00b      	beq.n	8003036 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2201      	movs	r2, #1
 8003024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2290      	movs	r2, #144	; 0x90
 800302a:	589b      	ldr	r3, [r3, r2]
 800302c:	2201      	movs	r2, #1
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2190      	movs	r1, #144	; 0x90
 8003034:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003036:	23a4      	movs	r3, #164	; 0xa4
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d011      	beq.n	8003066 <HAL_UART_IRQHandler+0x102>
 8003042:	239c      	movs	r3, #156	; 0x9c
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2201      	movs	r2, #1
 800304a:	4013      	ands	r3, r2
 800304c:	d00b      	beq.n	8003066 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2202      	movs	r2, #2
 8003054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2290      	movs	r2, #144	; 0x90
 800305a:	589b      	ldr	r3, [r3, r2]
 800305c:	2204      	movs	r2, #4
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2190      	movs	r1, #144	; 0x90
 8003064:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003066:	23a4      	movs	r3, #164	; 0xa4
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2204      	movs	r2, #4
 800306e:	4013      	ands	r3, r2
 8003070:	d011      	beq.n	8003096 <HAL_UART_IRQHandler+0x132>
 8003072:	239c      	movs	r3, #156	; 0x9c
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	d00b      	beq.n	8003096 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2290      	movs	r2, #144	; 0x90
 800308a:	589b      	ldr	r3, [r3, r2]
 800308c:	2202      	movs	r2, #2
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2190      	movs	r1, #144	; 0x90
 8003094:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003096:	23a4      	movs	r3, #164	; 0xa4
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2208      	movs	r2, #8
 800309e:	4013      	ands	r3, r2
 80030a0:	d017      	beq.n	80030d2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030a2:	23a0      	movs	r3, #160	; 0xa0
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2220      	movs	r2, #32
 80030aa:	4013      	ands	r3, r2
 80030ac:	d105      	bne.n	80030ba <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030ae:	239c      	movs	r3, #156	; 0x9c
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5b      	ldr	r2, [pc, #364]	; (8003224 <HAL_UART_IRQHandler+0x2c0>)
 80030b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030b8:	d00b      	beq.n	80030d2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2208      	movs	r2, #8
 80030c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2290      	movs	r2, #144	; 0x90
 80030c6:	589b      	ldr	r3, [r3, r2]
 80030c8:	2208      	movs	r2, #8
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2190      	movs	r1, #144	; 0x90
 80030d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030d2:	23a4      	movs	r3, #164	; 0xa4
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	4013      	ands	r3, r2
 80030de:	d013      	beq.n	8003108 <HAL_UART_IRQHandler+0x1a4>
 80030e0:	23a0      	movs	r3, #160	; 0xa0
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	04db      	lsls	r3, r3, #19
 80030ea:	4013      	ands	r3, r2
 80030ec:	d00c      	beq.n	8003108 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2290      	movs	r2, #144	; 0x90
 80030fc:	589b      	ldr	r3, [r3, r2]
 80030fe:	2220      	movs	r2, #32
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2190      	movs	r1, #144	; 0x90
 8003106:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2290      	movs	r2, #144	; 0x90
 800310c:	589b      	ldr	r3, [r3, r2]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d100      	bne.n	8003114 <HAL_UART_IRQHandler+0x1b0>
 8003112:	e23d      	b.n	8003590 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003114:	23a4      	movs	r3, #164	; 0xa4
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2220      	movs	r2, #32
 800311c:	4013      	ands	r3, r2
 800311e:	d015      	beq.n	800314c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003120:	23a0      	movs	r3, #160	; 0xa0
 8003122:	18fb      	adds	r3, r7, r3
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2220      	movs	r2, #32
 8003128:	4013      	ands	r3, r2
 800312a:	d106      	bne.n	800313a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800312c:	239c      	movs	r3, #156	; 0x9c
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	055b      	lsls	r3, r3, #21
 8003136:	4013      	ands	r3, r2
 8003138:	d008      	beq.n	800314c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	0010      	movs	r0, r2
 800314a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2290      	movs	r2, #144	; 0x90
 8003150:	589b      	ldr	r3, [r3, r2]
 8003152:	2194      	movs	r1, #148	; 0x94
 8003154:	187a      	adds	r2, r7, r1
 8003156:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	4013      	ands	r3, r2
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d004      	beq.n	8003170 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003166:	187b      	adds	r3, r7, r1
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2228      	movs	r2, #40	; 0x28
 800316c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800316e:	d04c      	beq.n	800320a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	0018      	movs	r0, r3
 8003174:	f000 ffe4 	bl	8004140 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	4013      	ands	r3, r2
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d13c      	bne.n	8003200 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003186:	f3ef 8310 	mrs	r3, PRIMASK
 800318a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800318c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318e:	2090      	movs	r0, #144	; 0x90
 8003190:	183a      	adds	r2, r7, r0
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	2301      	movs	r3, #1
 8003196:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319a:	f383 8810 	msr	PRIMASK, r3
}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	438a      	bics	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	183b      	adds	r3, r7, r0
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b8:	f383 8810 	msr	PRIMASK, r3
}
 80031bc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2280      	movs	r2, #128	; 0x80
 80031c2:	589b      	ldr	r3, [r3, r2]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d016      	beq.n	80031f6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	589b      	ldr	r3, [r3, r2]
 80031ce:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_UART_IRQHandler+0x2c8>)
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	589b      	ldr	r3, [r3, r2]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fd ffcd 	bl	8001178 <HAL_DMA_Abort_IT>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d01c      	beq.n	800321c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	589b      	ldr	r3, [r3, r2]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	5852      	ldr	r2, [r2, r1]
 80031f0:	0010      	movs	r0, r2
 80031f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	e012      	b.n	800321c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 f9e1 	bl	80035c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fe:	e00d      	b.n	800321c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f9dc 	bl	80035c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	e008      	b.n	800321c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f000 f9d7 	bl	80035c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2290      	movs	r2, #144	; 0x90
 8003216:	2100      	movs	r1, #0
 8003218:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800321a:	e1b9      	b.n	8003590 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	46c0      	nop			; (mov r8, r8)
    return;
 800321e:	e1b7      	b.n	8003590 <HAL_UART_IRQHandler+0x62c>
 8003220:	0000080f 	.word	0x0000080f
 8003224:	10000001 	.word	0x10000001
 8003228:	04000120 	.word	0x04000120
 800322c:	0800420d 	.word	0x0800420d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d000      	beq.n	800323a <HAL_UART_IRQHandler+0x2d6>
 8003238:	e13e      	b.n	80034b8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800323a:	23a4      	movs	r3, #164	; 0xa4
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2210      	movs	r2, #16
 8003242:	4013      	ands	r3, r2
 8003244:	d100      	bne.n	8003248 <HAL_UART_IRQHandler+0x2e4>
 8003246:	e137      	b.n	80034b8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003248:	23a0      	movs	r3, #160	; 0xa0
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	4013      	ands	r3, r2
 8003252:	d100      	bne.n	8003256 <HAL_UART_IRQHandler+0x2f2>
 8003254:	e130      	b.n	80034b8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2210      	movs	r2, #16
 800325c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	4013      	ands	r3, r2
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d000      	beq.n	800326e <HAL_UART_IRQHandler+0x30a>
 800326c:	e0a4      	b.n	80033b8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	217e      	movs	r1, #126	; 0x7e
 800327a:	187b      	adds	r3, r7, r1
 800327c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800327e:	187b      	adds	r3, r7, r1
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d100      	bne.n	8003288 <HAL_UART_IRQHandler+0x324>
 8003286:	e185      	b.n	8003594 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	225c      	movs	r2, #92	; 0x5c
 800328c:	5a9b      	ldrh	r3, [r3, r2]
 800328e:	187a      	adds	r2, r7, r1
 8003290:	8812      	ldrh	r2, [r2, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d300      	bcc.n	8003298 <HAL_UART_IRQHandler+0x334>
 8003296:	e17d      	b.n	8003594 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	187a      	adds	r2, r7, r1
 800329c:	215e      	movs	r1, #94	; 0x5e
 800329e:	8812      	ldrh	r2, [r2, #0]
 80032a0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	589b      	ldr	r3, [r3, r2]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2220      	movs	r2, #32
 80032ae:	4013      	ands	r3, r2
 80032b0:	d170      	bne.n	8003394 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80032bc:	2301      	movs	r3, #1
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	f383 8810 	msr	PRIMASK, r3
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	49b4      	ldr	r1, [pc, #720]	; (80035a4 <HAL_UART_IRQHandler+0x640>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032de:	f383 8810 	msr	PRIMASK, r3
}
 80032e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e4:	f3ef 8310 	mrs	r3, PRIMASK
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80032ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	677b      	str	r3, [r7, #116]	; 0x74
 80032ee:	2301      	movs	r3, #1
 80032f0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	f383 8810 	msr	PRIMASK, r3
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	438a      	bics	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003316:	f3ef 8310 	mrs	r3, PRIMASK
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800331c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331e:	673b      	str	r3, [r7, #112]	; 0x70
 8003320:	2301      	movs	r3, #1
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003326:	f383 8810 	msr	PRIMASK, r3
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	438a      	bics	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	228c      	movs	r2, #140	; 0x8c
 800334c:	2120      	movs	r1, #32
 800334e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800335c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003360:	2301      	movs	r3, #1
 8003362:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2110      	movs	r1, #16
 8003378:	438a      	bics	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	589b      	ldr	r3, [r3, r2]
 800338e:	0018      	movs	r0, r3
 8003390:	f7fd fe90 	bl	80010b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	225c      	movs	r2, #92	; 0x5c
 800339e:	5a9a      	ldrh	r2, [r3, r2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	215e      	movs	r1, #94	; 0x5e
 80033a4:	5a5b      	ldrh	r3, [r3, r1]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 f90d 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033b6:	e0ed      	b.n	8003594 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	225c      	movs	r2, #92	; 0x5c
 80033bc:	5a99      	ldrh	r1, [r3, r2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	225e      	movs	r2, #94	; 0x5e
 80033c2:	5a9b      	ldrh	r3, [r3, r2]
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	208e      	movs	r0, #142	; 0x8e
 80033c8:	183b      	adds	r3, r7, r0
 80033ca:	1a8a      	subs	r2, r1, r2
 80033cc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	225e      	movs	r2, #94	; 0x5e
 80033d2:	5a9b      	ldrh	r3, [r3, r2]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d100      	bne.n	80033dc <HAL_UART_IRQHandler+0x478>
 80033da:	e0dd      	b.n	8003598 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80033dc:	183b      	adds	r3, r7, r0
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d100      	bne.n	80033e6 <HAL_UART_IRQHandler+0x482>
 80033e4:	e0d8      	b.n	8003598 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033ee:	2488      	movs	r4, #136	; 0x88
 80033f0:	193a      	adds	r2, r7, r4
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4967      	ldr	r1, [pc, #412]	; (80035a8 <HAL_UART_IRQHandler+0x644>)
 800340c:	400a      	ands	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	193b      	adds	r3, r7, r4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f383 8810 	msr	PRIMASK, r3
}
 800341c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341e:	f3ef 8310 	mrs	r3, PRIMASK
 8003422:	61bb      	str	r3, [r7, #24]
  return(result);
 8003424:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003426:	2484      	movs	r4, #132	; 0x84
 8003428:	193a      	adds	r2, r7, r4
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	495a      	ldr	r1, [pc, #360]	; (80035ac <HAL_UART_IRQHandler+0x648>)
 8003444:	400a      	ands	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	193b      	adds	r3, r7, r4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	228c      	movs	r2, #140	; 0x8c
 800345a:	2120      	movs	r1, #32
 800345c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346a:	f3ef 8310 	mrs	r3, PRIMASK
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003472:	2480      	movs	r4, #128	; 0x80
 8003474:	193a      	adds	r2, r7, r4
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2110      	movs	r1, #16
 8003490:	438a      	bics	r2, r1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	193b      	adds	r3, r7, r4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034a8:	183b      	adds	r3, r7, r0
 80034aa:	881a      	ldrh	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0011      	movs	r1, r2
 80034b0:	0018      	movs	r0, r3
 80034b2:	f000 f88d 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034b6:	e06f      	b.n	8003598 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034b8:	23a4      	movs	r3, #164	; 0xa4
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	035b      	lsls	r3, r3, #13
 80034c2:	4013      	ands	r3, r2
 80034c4:	d010      	beq.n	80034e8 <HAL_UART_IRQHandler+0x584>
 80034c6:	239c      	movs	r3, #156	; 0x9c
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	03db      	lsls	r3, r3, #15
 80034d0:	4013      	ands	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	0352      	lsls	r2, r2, #13
 80034dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f001 fb37 	bl	8004b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034e6:	e05a      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80034e8:	23a4      	movs	r3, #164	; 0xa4
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	4013      	ands	r3, r2
 80034f2:	d016      	beq.n	8003522 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034f4:	23a0      	movs	r3, #160	; 0xa0
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	4013      	ands	r3, r2
 80034fe:	d106      	bne.n	800350e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003500:	239c      	movs	r3, #156	; 0x9c
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	4013      	ands	r3, r2
 800350c:	d009      	beq.n	8003522 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	2b00      	cmp	r3, #0
 8003514:	d042      	beq.n	800359c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	0010      	movs	r0, r2
 800351e:	4798      	blx	r3
    }
    return;
 8003520:	e03c      	b.n	800359c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003522:	23a4      	movs	r3, #164	; 0xa4
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	4013      	ands	r3, r2
 800352c:	d00a      	beq.n	8003544 <HAL_UART_IRQHandler+0x5e0>
 800352e:	23a0      	movs	r3, #160	; 0xa0
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2240      	movs	r2, #64	; 0x40
 8003536:	4013      	ands	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0018      	movs	r0, r3
 800353e:	f000 fe7c 	bl	800423a <UART_EndTransmit_IT>
    return;
 8003542:	e02c      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003544:	23a4      	movs	r3, #164	; 0xa4
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	4013      	ands	r3, r2
 8003550:	d00b      	beq.n	800356a <HAL_UART_IRQHandler+0x606>
 8003552:	23a0      	movs	r3, #160	; 0xa0
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	05db      	lsls	r3, r3, #23
 800355c:	4013      	ands	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f001 fb06 	bl	8004b74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003568:	e019      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800356a:	23a4      	movs	r3, #164	; 0xa4
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	045b      	lsls	r3, r3, #17
 8003574:	4013      	ands	r3, r2
 8003576:	d012      	beq.n	800359e <HAL_UART_IRQHandler+0x63a>
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	da0d      	bge.n	800359e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f001 faed 	bl	8004b64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800358a:	e008      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
      return;
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	e006      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
    return;
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	e004      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
      return;
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	e002      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
      return;
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	e000      	b.n	800359e <HAL_UART_IRQHandler+0x63a>
    return;
 800359c:	46c0      	nop			; (mov r8, r8)
  }
}
 800359e:	46bd      	mov	sp, r7
 80035a0:	b02a      	add	sp, #168	; 0xa8
 80035a2:	bdb0      	pop	{r4, r5, r7, pc}
 80035a4:	fffffeff 	.word	0xfffffeff
 80035a8:	fffffedf 	.word	0xfffffedf
 80035ac:	effffffe 	.word	0xeffffffe

080035b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	000a      	movs	r2, r1
 80035da:	1cbb      	adds	r3, r7, #2
 80035dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b002      	add	sp, #8
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b5b0      	push	{r4, r5, r7, lr}
 80035ea:	b090      	sub	sp, #64	; 0x40
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f0:	231a      	movs	r3, #26
 80035f2:	2220      	movs	r2, #32
 80035f4:	189b      	adds	r3, r3, r2
 80035f6:	19db      	adds	r3, r3, r7
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	431a      	orrs	r2, r3
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	4313      	orrs	r3, r2
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4aaf      	ldr	r2, [pc, #700]	; (80038d8 <UART_SetConfig+0x2f0>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003626:	430b      	orrs	r3, r1
 8003628:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4aaa      	ldr	r2, [pc, #680]	; (80038dc <UART_SetConfig+0x2f4>)
 8003632:	4013      	ands	r3, r2
 8003634:	0018      	movs	r0, r3
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	68d9      	ldr	r1, [r3, #12]
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	0003      	movs	r3, r0
 8003640:	430b      	orrs	r3, r1
 8003642:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4aa4      	ldr	r2, [pc, #656]	; (80038e0 <UART_SetConfig+0x2f8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800365a:	4313      	orrs	r3, r2
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a9f      	ldr	r2, [pc, #636]	; (80038e4 <UART_SetConfig+0x2fc>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003670:	430b      	orrs	r3, r1
 8003672:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	220f      	movs	r2, #15
 800367c:	4393      	bics	r3, r2
 800367e:	0018      	movs	r0, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	0003      	movs	r3, r0
 800368a:	430b      	orrs	r3, r1
 800368c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a95      	ldr	r2, [pc, #596]	; (80038e8 <UART_SetConfig+0x300>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d131      	bne.n	80036fc <UART_SetConfig+0x114>
 8003698:	4b94      	ldr	r3, [pc, #592]	; (80038ec <UART_SetConfig+0x304>)
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	2203      	movs	r2, #3
 800369e:	4013      	ands	r3, r2
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d01d      	beq.n	80036e0 <UART_SetConfig+0xf8>
 80036a4:	d823      	bhi.n	80036ee <UART_SetConfig+0x106>
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d00c      	beq.n	80036c4 <UART_SetConfig+0xdc>
 80036aa:	d820      	bhi.n	80036ee <UART_SetConfig+0x106>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <UART_SetConfig+0xce>
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d00e      	beq.n	80036d2 <UART_SetConfig+0xea>
 80036b4:	e01b      	b.n	80036ee <UART_SetConfig+0x106>
 80036b6:	231b      	movs	r3, #27
 80036b8:	2220      	movs	r2, #32
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	19db      	adds	r3, r3, r7
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	e0b4      	b.n	800382e <UART_SetConfig+0x246>
 80036c4:	231b      	movs	r3, #27
 80036c6:	2220      	movs	r2, #32
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	19db      	adds	r3, r3, r7
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e0ad      	b.n	800382e <UART_SetConfig+0x246>
 80036d2:	231b      	movs	r3, #27
 80036d4:	2220      	movs	r2, #32
 80036d6:	189b      	adds	r3, r3, r2
 80036d8:	19db      	adds	r3, r3, r7
 80036da:	2204      	movs	r2, #4
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e0a6      	b.n	800382e <UART_SetConfig+0x246>
 80036e0:	231b      	movs	r3, #27
 80036e2:	2220      	movs	r2, #32
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	19db      	adds	r3, r3, r7
 80036e8:	2208      	movs	r2, #8
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e09f      	b.n	800382e <UART_SetConfig+0x246>
 80036ee:	231b      	movs	r3, #27
 80036f0:	2220      	movs	r2, #32
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	2210      	movs	r2, #16
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e098      	b.n	800382e <UART_SetConfig+0x246>
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7b      	ldr	r2, [pc, #492]	; (80038f0 <UART_SetConfig+0x308>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d131      	bne.n	800376a <UART_SetConfig+0x182>
 8003706:	4b79      	ldr	r3, [pc, #484]	; (80038ec <UART_SetConfig+0x304>)
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	220c      	movs	r2, #12
 800370c:	4013      	ands	r3, r2
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d01d      	beq.n	800374e <UART_SetConfig+0x166>
 8003712:	d823      	bhi.n	800375c <UART_SetConfig+0x174>
 8003714:	2b08      	cmp	r3, #8
 8003716:	d00c      	beq.n	8003732 <UART_SetConfig+0x14a>
 8003718:	d820      	bhi.n	800375c <UART_SetConfig+0x174>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <UART_SetConfig+0x13c>
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00e      	beq.n	8003740 <UART_SetConfig+0x158>
 8003722:	e01b      	b.n	800375c <UART_SetConfig+0x174>
 8003724:	231b      	movs	r3, #27
 8003726:	2220      	movs	r2, #32
 8003728:	189b      	adds	r3, r3, r2
 800372a:	19db      	adds	r3, r3, r7
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e07d      	b.n	800382e <UART_SetConfig+0x246>
 8003732:	231b      	movs	r3, #27
 8003734:	2220      	movs	r2, #32
 8003736:	189b      	adds	r3, r3, r2
 8003738:	19db      	adds	r3, r3, r7
 800373a:	2202      	movs	r2, #2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e076      	b.n	800382e <UART_SetConfig+0x246>
 8003740:	231b      	movs	r3, #27
 8003742:	2220      	movs	r2, #32
 8003744:	189b      	adds	r3, r3, r2
 8003746:	19db      	adds	r3, r3, r7
 8003748:	2204      	movs	r2, #4
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e06f      	b.n	800382e <UART_SetConfig+0x246>
 800374e:	231b      	movs	r3, #27
 8003750:	2220      	movs	r2, #32
 8003752:	189b      	adds	r3, r3, r2
 8003754:	19db      	adds	r3, r3, r7
 8003756:	2208      	movs	r2, #8
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e068      	b.n	800382e <UART_SetConfig+0x246>
 800375c:	231b      	movs	r3, #27
 800375e:	2220      	movs	r2, #32
 8003760:	189b      	adds	r3, r3, r2
 8003762:	19db      	adds	r3, r3, r7
 8003764:	2210      	movs	r2, #16
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e061      	b.n	800382e <UART_SetConfig+0x246>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a61      	ldr	r2, [pc, #388]	; (80038f4 <UART_SetConfig+0x30c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d106      	bne.n	8003782 <UART_SetConfig+0x19a>
 8003774:	231b      	movs	r3, #27
 8003776:	2220      	movs	r2, #32
 8003778:	189b      	adds	r3, r3, r2
 800377a:	19db      	adds	r3, r3, r7
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e055      	b.n	800382e <UART_SetConfig+0x246>
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5c      	ldr	r2, [pc, #368]	; (80038f8 <UART_SetConfig+0x310>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d106      	bne.n	800379a <UART_SetConfig+0x1b2>
 800378c:	231b      	movs	r3, #27
 800378e:	2220      	movs	r2, #32
 8003790:	189b      	adds	r3, r3, r2
 8003792:	19db      	adds	r3, r3, r7
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e049      	b.n	800382e <UART_SetConfig+0x246>
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a50      	ldr	r2, [pc, #320]	; (80038e0 <UART_SetConfig+0x2f8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d13e      	bne.n	8003822 <UART_SetConfig+0x23a>
 80037a4:	4b51      	ldr	r3, [pc, #324]	; (80038ec <UART_SetConfig+0x304>)
 80037a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037a8:	23c0      	movs	r3, #192	; 0xc0
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	22c0      	movs	r2, #192	; 0xc0
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d027      	beq.n	8003806 <UART_SetConfig+0x21e>
 80037b6:	22c0      	movs	r2, #192	; 0xc0
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d82a      	bhi.n	8003814 <UART_SetConfig+0x22c>
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d011      	beq.n	80037ea <UART_SetConfig+0x202>
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d822      	bhi.n	8003814 <UART_SetConfig+0x22c>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <UART_SetConfig+0x1f4>
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00e      	beq.n	80037f8 <UART_SetConfig+0x210>
 80037da:	e01b      	b.n	8003814 <UART_SetConfig+0x22c>
 80037dc:	231b      	movs	r3, #27
 80037de:	2220      	movs	r2, #32
 80037e0:	189b      	adds	r3, r3, r2
 80037e2:	19db      	adds	r3, r3, r7
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e021      	b.n	800382e <UART_SetConfig+0x246>
 80037ea:	231b      	movs	r3, #27
 80037ec:	2220      	movs	r2, #32
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	19db      	adds	r3, r3, r7
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e01a      	b.n	800382e <UART_SetConfig+0x246>
 80037f8:	231b      	movs	r3, #27
 80037fa:	2220      	movs	r2, #32
 80037fc:	189b      	adds	r3, r3, r2
 80037fe:	19db      	adds	r3, r3, r7
 8003800:	2204      	movs	r2, #4
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e013      	b.n	800382e <UART_SetConfig+0x246>
 8003806:	231b      	movs	r3, #27
 8003808:	2220      	movs	r2, #32
 800380a:	189b      	adds	r3, r3, r2
 800380c:	19db      	adds	r3, r3, r7
 800380e:	2208      	movs	r2, #8
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e00c      	b.n	800382e <UART_SetConfig+0x246>
 8003814:	231b      	movs	r3, #27
 8003816:	2220      	movs	r2, #32
 8003818:	189b      	adds	r3, r3, r2
 800381a:	19db      	adds	r3, r3, r7
 800381c:	2210      	movs	r2, #16
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e005      	b.n	800382e <UART_SetConfig+0x246>
 8003822:	231b      	movs	r3, #27
 8003824:	2220      	movs	r2, #32
 8003826:	189b      	adds	r3, r3, r2
 8003828:	19db      	adds	r3, r3, r7
 800382a:	2210      	movs	r2, #16
 800382c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <UART_SetConfig+0x2f8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d000      	beq.n	800383a <UART_SetConfig+0x252>
 8003838:	e0a9      	b.n	800398e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800383a:	231b      	movs	r3, #27
 800383c:	2220      	movs	r2, #32
 800383e:	189b      	adds	r3, r3, r2
 8003840:	19db      	adds	r3, r3, r7
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d015      	beq.n	8003874 <UART_SetConfig+0x28c>
 8003848:	dc18      	bgt.n	800387c <UART_SetConfig+0x294>
 800384a:	2b04      	cmp	r3, #4
 800384c:	d00d      	beq.n	800386a <UART_SetConfig+0x282>
 800384e:	dc15      	bgt.n	800387c <UART_SetConfig+0x294>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <UART_SetConfig+0x272>
 8003854:	2b02      	cmp	r3, #2
 8003856:	d005      	beq.n	8003864 <UART_SetConfig+0x27c>
 8003858:	e010      	b.n	800387c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385a:	f7fe fbc1 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 800385e:	0003      	movs	r3, r0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003862:	e014      	b.n	800388e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <UART_SetConfig+0x314>)
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003868:	e011      	b.n	800388e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe fb2d 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 800386e:	0003      	movs	r3, r0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003872:	e00c      	b.n	800388e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800387a:	e008      	b.n	800388e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003880:	231a      	movs	r3, #26
 8003882:	2220      	movs	r2, #32
 8003884:	189b      	adds	r3, r3, r2
 8003886:	19db      	adds	r3, r3, r7
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
        break;
 800388c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	2b00      	cmp	r3, #0
 8003892:	d100      	bne.n	8003896 <UART_SetConfig+0x2ae>
 8003894:	e14b      	b.n	8003b2e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <UART_SetConfig+0x318>)
 800389c:	0052      	lsls	r2, r2, #1
 800389e:	5ad3      	ldrh	r3, [r2, r3]
 80038a0:	0019      	movs	r1, r3
 80038a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038a4:	f7fc fc30 	bl	8000108 <__udivsi3>
 80038a8:	0003      	movs	r3, r0
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	0013      	movs	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	189b      	adds	r3, r3, r2
 80038b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d305      	bcc.n	80038c8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d91d      	bls.n	8003904 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80038c8:	231a      	movs	r3, #26
 80038ca:	2220      	movs	r2, #32
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e12b      	b.n	8003b2e <UART_SetConfig+0x546>
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	cfff69f3 	.word	0xcfff69f3
 80038dc:	ffffcfff 	.word	0xffffcfff
 80038e0:	40008000 	.word	0x40008000
 80038e4:	11fff4ff 	.word	0x11fff4ff
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40004400 	.word	0x40004400
 80038f4:	40004800 	.word	0x40004800
 80038f8:	40004c00 	.word	0x40004c00
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	08007c28 	.word	0x08007c28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003910:	4b92      	ldr	r3, [pc, #584]	; (8003b5c <UART_SetConfig+0x574>)
 8003912:	0052      	lsls	r2, r2, #1
 8003914:	5ad3      	ldrh	r3, [r2, r3]
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	69b8      	ldr	r0, [r7, #24]
 8003922:	69f9      	ldr	r1, [r7, #28]
 8003924:	f7fc fd66 	bl	80003f4 <__aeabi_uldivmod>
 8003928:	0002      	movs	r2, r0
 800392a:	000b      	movs	r3, r1
 800392c:	0e11      	lsrs	r1, r2, #24
 800392e:	021d      	lsls	r5, r3, #8
 8003930:	430d      	orrs	r5, r1
 8003932:	0214      	lsls	r4, r2, #8
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68b8      	ldr	r0, [r7, #8]
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	1900      	adds	r0, r0, r4
 8003946:	4169      	adcs	r1, r5
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f7fc fd4d 	bl	80003f4 <__aeabi_uldivmod>
 800395a:	0002      	movs	r2, r0
 800395c:	000b      	movs	r3, r1
 800395e:	0013      	movs	r3, r2
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003964:	23c0      	movs	r3, #192	; 0xc0
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d309      	bcc.n	8003980 <UART_SetConfig+0x398>
 800396c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	035b      	lsls	r3, r3, #13
 8003972:	429a      	cmp	r2, r3
 8003974:	d204      	bcs.n	8003980 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	e0d6      	b.n	8003b2e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003980:	231a      	movs	r3, #26
 8003982:	2220      	movs	r2, #32
 8003984:	189b      	adds	r3, r3, r2
 8003986:	19db      	adds	r3, r3, r7
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e0cf      	b.n	8003b2e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	429a      	cmp	r2, r3
 8003998:	d000      	beq.n	800399c <UART_SetConfig+0x3b4>
 800399a:	e070      	b.n	8003a7e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800399c:	231b      	movs	r3, #27
 800399e:	2220      	movs	r2, #32
 80039a0:	189b      	adds	r3, r3, r2
 80039a2:	19db      	adds	r3, r3, r7
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d015      	beq.n	80039d6 <UART_SetConfig+0x3ee>
 80039aa:	dc18      	bgt.n	80039de <UART_SetConfig+0x3f6>
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d00d      	beq.n	80039cc <UART_SetConfig+0x3e4>
 80039b0:	dc15      	bgt.n	80039de <UART_SetConfig+0x3f6>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <UART_SetConfig+0x3d4>
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d005      	beq.n	80039c6 <UART_SetConfig+0x3de>
 80039ba:	e010      	b.n	80039de <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7fe fb10 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 80039c0:	0003      	movs	r3, r0
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039c4:	e014      	b.n	80039f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c6:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <UART_SetConfig+0x578>)
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039ca:	e011      	b.n	80039f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039cc:	f7fe fa7c 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 80039d0:	0003      	movs	r3, r0
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039d4:	e00c      	b.n	80039f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039dc:	e008      	b.n	80039f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80039e2:	231a      	movs	r3, #26
 80039e4:	2220      	movs	r2, #32
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	19db      	adds	r3, r3, r7
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]
        break;
 80039ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d100      	bne.n	80039f8 <UART_SetConfig+0x410>
 80039f6:	e09a      	b.n	8003b2e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fc:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <UART_SetConfig+0x574>)
 80039fe:	0052      	lsls	r2, r2, #1
 8003a00:	5ad3      	ldrh	r3, [r2, r3]
 8003a02:	0019      	movs	r1, r3
 8003a04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a06:	f7fc fb7f 	bl	8000108 <__udivsi3>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	005a      	lsls	r2, r3, #1
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	18d2      	adds	r2, r2, r3
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	0010      	movs	r0, r2
 8003a1e:	f7fc fb73 	bl	8000108 <__udivsi3>
 8003a22:	0003      	movs	r3, r0
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	2b0f      	cmp	r3, #15
 8003a2a:	d921      	bls.n	8003a70 <UART_SetConfig+0x488>
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	025b      	lsls	r3, r3, #9
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d21c      	bcs.n	8003a70 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	200e      	movs	r0, #14
 8003a3c:	2420      	movs	r4, #32
 8003a3e:	1903      	adds	r3, r0, r4
 8003a40:	19db      	adds	r3, r3, r7
 8003a42:	210f      	movs	r1, #15
 8003a44:	438a      	bics	r2, r1
 8003a46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2207      	movs	r2, #7
 8003a50:	4013      	ands	r3, r2
 8003a52:	b299      	uxth	r1, r3
 8003a54:	1903      	adds	r3, r0, r4
 8003a56:	19db      	adds	r3, r3, r7
 8003a58:	1902      	adds	r2, r0, r4
 8003a5a:	19d2      	adds	r2, r2, r7
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	1902      	adds	r2, r0, r4
 8003a68:	19d2      	adds	r2, r2, r7
 8003a6a:	8812      	ldrh	r2, [r2, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e05e      	b.n	8003b2e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003a70:	231a      	movs	r3, #26
 8003a72:	2220      	movs	r2, #32
 8003a74:	189b      	adds	r3, r3, r2
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e057      	b.n	8003b2e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a7e:	231b      	movs	r3, #27
 8003a80:	2220      	movs	r2, #32
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	19db      	adds	r3, r3, r7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d015      	beq.n	8003ab8 <UART_SetConfig+0x4d0>
 8003a8c:	dc18      	bgt.n	8003ac0 <UART_SetConfig+0x4d8>
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00d      	beq.n	8003aae <UART_SetConfig+0x4c6>
 8003a92:	dc15      	bgt.n	8003ac0 <UART_SetConfig+0x4d8>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <UART_SetConfig+0x4b6>
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d005      	beq.n	8003aa8 <UART_SetConfig+0x4c0>
 8003a9c:	e010      	b.n	8003ac0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9e:	f7fe fa9f 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aa6:	e014      	b.n	8003ad2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <UART_SetConfig+0x578>)
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aac:	e011      	b.n	8003ad2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fa0b 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ab6:	e00c      	b.n	8003ad2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003abe:	e008      	b.n	8003ad2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003ac4:	231a      	movs	r3, #26
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	19db      	adds	r3, r3, r7
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
        break;
 8003ad0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02a      	beq.n	8003b2e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003adc:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <UART_SetConfig+0x574>)
 8003ade:	0052      	lsls	r2, r2, #1
 8003ae0:	5ad3      	ldrh	r3, [r2, r3]
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ae6:	f7fc fb0f 	bl	8000108 <__udivsi3>
 8003aea:	0003      	movs	r3, r0
 8003aec:	001a      	movs	r2, r3
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	18d2      	adds	r2, r2, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0019      	movs	r1, r3
 8003afc:	0010      	movs	r0, r2
 8003afe:	f7fc fb03 	bl	8000108 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	d90a      	bls.n	8003b22 <UART_SetConfig+0x53a>
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d205      	bcs.n	8003b22 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e005      	b.n	8003b2e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b22:	231a      	movs	r3, #26
 8003b24:	2220      	movs	r2, #32
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	19db      	adds	r3, r3, r7
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	226a      	movs	r2, #106	; 0x6a
 8003b32:	2101      	movs	r1, #1
 8003b34:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	2268      	movs	r2, #104	; 0x68
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	2200      	movs	r2, #0
 8003b42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	2200      	movs	r2, #0
 8003b48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b4a:	231a      	movs	r3, #26
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	19db      	adds	r3, r3, r7
 8003b52:	781b      	ldrb	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b010      	add	sp, #64	; 0x40
 8003b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5c:	08007c28 	.word	0x08007c28
 8003b60:	00f42400 	.word	0x00f42400

08003b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	2201      	movs	r2, #1
 8003b72:	4013      	ands	r3, r2
 8003b74:	d00b      	beq.n	8003b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <UART_AdvFeatureConfig+0x144>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	2202      	movs	r2, #2
 8003b94:	4013      	ands	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4a43      	ldr	r2, [pc, #268]	; (8003cac <UART_AdvFeatureConfig+0x148>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d00b      	beq.n	8003bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a3b      	ldr	r2, [pc, #236]	; (8003cb0 <UART_AdvFeatureConfig+0x14c>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d00b      	beq.n	8003bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <UART_AdvFeatureConfig+0x150>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	0019      	movs	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <UART_AdvFeatureConfig+0x154>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <UART_AdvFeatureConfig+0x158>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	2240      	movs	r2, #64	; 0x40
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d01d      	beq.n	8003c7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <UART_AdvFeatureConfig+0x15c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	035b      	lsls	r3, r3, #13
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d10b      	bne.n	8003c7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <UART_AdvFeatureConfig+0x160>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	4013      	ands	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <UART_AdvFeatureConfig+0x164>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	fffdffff 	.word	0xfffdffff
 8003cac:	fffeffff 	.word	0xfffeffff
 8003cb0:	fffbffff 	.word	0xfffbffff
 8003cb4:	ffff7fff 	.word	0xffff7fff
 8003cb8:	ffffefff 	.word	0xffffefff
 8003cbc:	ffffdfff 	.word	0xffffdfff
 8003cc0:	ffefffff 	.word	0xffefffff
 8003cc4:	ff9fffff 	.word	0xff9fffff
 8003cc8:	fff7ffff 	.word	0xfff7ffff

08003ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2290      	movs	r2, #144	; 0x90
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cdc:	f7fd f932 	bl	8000f44 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2208      	movs	r2, #8
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10c      	bne.n	8003d0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	0391      	lsls	r1, r2, #14
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <UART_CheckIdleState+0x98>)
 8003cfc:	9200      	str	r2, [sp, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f000 f832 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d001      	beq.n	8003d0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e026      	b.n	8003d5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2204      	movs	r2, #4
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d10c      	bne.n	8003d34 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	03d1      	lsls	r1, r2, #15
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <UART_CheckIdleState+0x98>)
 8003d24:	9200      	str	r2, [sp, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f000 f81e 	bl	8003d68 <UART_WaitOnFlagUntilTimeout>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e012      	b.n	8003d5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2288      	movs	r2, #136	; 0x88
 8003d38:	2120      	movs	r1, #32
 8003d3a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	228c      	movs	r2, #140	; 0x8c
 8003d40:	2120      	movs	r1, #32
 8003d42:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2284      	movs	r2, #132	; 0x84
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	01ffffff 	.word	0x01ffffff

08003d68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b094      	sub	sp, #80	; 0x50
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	1dfb      	adds	r3, r7, #7
 8003d76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d78:	e0a7      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	d100      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003d80:	e0a3      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fd f8df 	bl	8000f44 <HAL_GetTick>
 8003d86:	0002      	movs	r2, r0
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d13f      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d98:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003da0:	647b      	str	r3, [r7, #68]	; 0x44
 8003da2:	2301      	movs	r3, #1
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	494e      	ldr	r1, [pc, #312]	; (8003ef4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dca:	f3ef 8310 	mrs	r3, PRIMASK
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2101      	movs	r1, #1
 8003dec:	438a      	bics	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2288      	movs	r2, #136	; 0x88
 8003e00:	2120      	movs	r1, #32
 8003e02:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	228c      	movs	r2, #140	; 0x8c
 8003e08:	2120      	movs	r1, #32
 8003e0a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2284      	movs	r2, #132	; 0x84
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e069      	b.n	8003eec <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	4013      	ands	r3, r2
 8003e22:	d052      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	401a      	ands	r2, r3
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d148      	bne.n	8003eca <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e42:	f3ef 8310 	mrs	r3, PRIMASK
 8003e46:	613b      	str	r3, [r7, #16]
  return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7e:	2301      	movs	r3, #1
 8003e80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	438a      	bics	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2288      	movs	r2, #136	; 0x88
 8003eaa:	2120      	movs	r1, #32
 8003eac:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	228c      	movs	r2, #140	; 0x8c
 8003eb2:	2120      	movs	r1, #32
 8003eb4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2290      	movs	r2, #144	; 0x90
 8003eba:	2120      	movs	r1, #32
 8003ebc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2284      	movs	r2, #132	; 0x84
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e010      	b.n	8003eec <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	425a      	negs	r2, r3
 8003eda:	4153      	adcs	r3, r2
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	001a      	movs	r2, r3
 8003ee0:	1dfb      	adds	r3, r7, #7
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d100      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0x182>
 8003ee8:	e747      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b014      	add	sp, #80	; 0x50
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	fffffe5f 	.word	0xfffffe5f

08003ef8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b098      	sub	sp, #96	; 0x60
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1dba      	adds	r2, r7, #6
 8003f10:	215c      	movs	r1, #92	; 0x5c
 8003f12:	8812      	ldrh	r2, [r2, #0]
 8003f14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1dba      	adds	r2, r7, #6
 8003f1a:	215e      	movs	r1, #94	; 0x5e
 8003f1c:	8812      	ldrh	r2, [r2, #0]
 8003f1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	015b      	lsls	r3, r3, #5
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d10d      	bne.n	8003f4e <UART_Start_Receive_IT+0x56>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <UART_Start_Receive_IT+0x4c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2260      	movs	r2, #96	; 0x60
 8003f3e:	497b      	ldr	r1, [pc, #492]	; (800412c <UART_Start_Receive_IT+0x234>)
 8003f40:	5299      	strh	r1, [r3, r2]
 8003f42:	e02e      	b.n	8003fa2 <UART_Start_Receive_IT+0xaa>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2260      	movs	r2, #96	; 0x60
 8003f48:	21ff      	movs	r1, #255	; 0xff
 8003f4a:	5299      	strh	r1, [r3, r2]
 8003f4c:	e029      	b.n	8003fa2 <UART_Start_Receive_IT+0xaa>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <UART_Start_Receive_IT+0x7a>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <UART_Start_Receive_IT+0x70>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2260      	movs	r2, #96	; 0x60
 8003f62:	21ff      	movs	r1, #255	; 0xff
 8003f64:	5299      	strh	r1, [r3, r2]
 8003f66:	e01c      	b.n	8003fa2 <UART_Start_Receive_IT+0xaa>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2260      	movs	r2, #96	; 0x60
 8003f6c:	217f      	movs	r1, #127	; 0x7f
 8003f6e:	5299      	strh	r1, [r3, r2]
 8003f70:	e017      	b.n	8003fa2 <UART_Start_Receive_IT+0xaa>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	055b      	lsls	r3, r3, #21
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d10d      	bne.n	8003f9a <UART_Start_Receive_IT+0xa2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <UART_Start_Receive_IT+0x98>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2260      	movs	r2, #96	; 0x60
 8003f8a:	217f      	movs	r1, #127	; 0x7f
 8003f8c:	5299      	strh	r1, [r3, r2]
 8003f8e:	e008      	b.n	8003fa2 <UART_Start_Receive_IT+0xaa>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2260      	movs	r2, #96	; 0x60
 8003f94:	213f      	movs	r1, #63	; 0x3f
 8003f96:	5299      	strh	r1, [r3, r2]
 8003f98:	e003      	b.n	8003fa2 <UART_Start_Receive_IT+0xaa>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2260      	movs	r2, #96	; 0x60
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2290      	movs	r2, #144	; 0x90
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	228c      	movs	r2, #140	; 0x8c
 8003fae:	2122      	movs	r1, #34	; 0x22
 8003fb0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	059b      	lsls	r3, r3, #22
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d150      	bne.n	8004092 <UART_Start_Receive_IT+0x19a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2268      	movs	r2, #104	; 0x68
 8003ff4:	5a9b      	ldrh	r3, [r3, r2]
 8003ff6:	1dba      	adds	r2, r7, #6
 8003ff8:	8812      	ldrh	r2, [r2, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d349      	bcc.n	8004092 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	015b      	lsls	r3, r3, #5
 8004006:	429a      	cmp	r2, r3
 8004008:	d107      	bne.n	800401a <UART_Start_Receive_IT+0x122>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a46      	ldr	r2, [pc, #280]	; (8004130 <UART_Start_Receive_IT+0x238>)
 8004016:	675a      	str	r2, [r3, #116]	; 0x74
 8004018:	e002      	b.n	8004020 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a45      	ldr	r2, [pc, #276]	; (8004134 <UART_Start_Receive_IT+0x23c>)
 800401e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d019      	beq.n	800405c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004028:	f3ef 8310 	mrs	r3, PRIMASK
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004030:	65bb      	str	r3, [r7, #88]	; 0x58
 8004032:	2301      	movs	r3, #1
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	0049      	lsls	r1, r1, #1
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004052:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	f383 8810 	msr	PRIMASK, r3
}
 800405a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405c:	f3ef 8310 	mrs	r3, PRIMASK
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004064:	657b      	str	r3, [r7, #84]	; 0x54
 8004066:	2301      	movs	r3, #1
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2180      	movs	r1, #128	; 0x80
 800407e:	0549      	lsls	r1, r1, #21
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f383 8810 	msr	PRIMASK, r3
}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	e047      	b.n	8004122 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	015b      	lsls	r3, r3, #5
 800409a:	429a      	cmp	r2, r3
 800409c:	d107      	bne.n	80040ae <UART_Start_Receive_IT+0x1b6>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <UART_Start_Receive_IT+0x240>)
 80040aa:	675a      	str	r2, [r3, #116]	; 0x74
 80040ac:	e002      	b.n	80040b4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <UART_Start_Receive_IT+0x244>)
 80040b2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d019      	beq.n	80040f0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040bc:	f3ef 8310 	mrs	r3, PRIMASK
 80040c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80040c2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80040c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c6:	2301      	movs	r3, #1
 80040c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f383 8810 	msr	PRIMASK, r3
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2190      	movs	r1, #144	; 0x90
 80040de:	0049      	lsls	r1, r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f383 8810 	msr	PRIMASK, r3
}
 80040ee:	e018      	b.n	8004122 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f0:	f3ef 8310 	mrs	r3, PRIMASK
 80040f4:	613b      	str	r3, [r7, #16]
  return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040f8:	653b      	str	r3, [r7, #80]	; 0x50
 80040fa:	2301      	movs	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2120      	movs	r1, #32
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f383 8810 	msr	PRIMASK, r3
}
 8004120:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b018      	add	sp, #96	; 0x60
 800412a:	bd80      	pop	{r7, pc}
 800412c:	000001ff 	.word	0x000001ff
 8004130:	08004869 	.word	0x08004869
 8004134:	0800457d 	.word	0x0800457d
 8004138:	08004409 	.word	0x08004409
 800413c:	08004295 	.word	0x08004295

08004140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08e      	sub	sp, #56	; 0x38
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004148:	f3ef 8310 	mrs	r3, PRIMASK
 800414c:	617b      	str	r3, [r7, #20]
  return(result);
 800414e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
 8004152:	2301      	movs	r3, #1
 8004154:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f383 8810 	msr	PRIMASK, r3
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4926      	ldr	r1, [pc, #152]	; (8004204 <UART_EndRxTransfer+0xc4>)
 800416a:	400a      	ands	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004170:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f383 8810 	msr	PRIMASK, r3
}
 8004178:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417a:	f3ef 8310 	mrs	r3, PRIMASK
 800417e:	623b      	str	r3, [r7, #32]
  return(result);
 8004180:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
 8004184:	2301      	movs	r3, #1
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f383 8810 	msr	PRIMASK, r3
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	491b      	ldr	r1, [pc, #108]	; (8004208 <UART_EndRxTransfer+0xc8>)
 800419c:	400a      	ands	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	f383 8810 	msr	PRIMASK, r3
}
 80041aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d118      	bne.n	80041e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041be:	2301      	movs	r3, #1
 80041c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2110      	movs	r1, #16
 80041d6:	438a      	bics	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	228c      	movs	r2, #140	; 0x8c
 80041ea:	2120      	movs	r1, #32
 80041ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b00e      	add	sp, #56	; 0x38
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	fffffedf 	.word	0xfffffedf
 8004208:	effffffe 	.word	0xeffffffe

0800420c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	225e      	movs	r2, #94	; 0x5e
 800421e:	2100      	movs	r1, #0
 8004220:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2256      	movs	r2, #86	; 0x56
 8004226:	2100      	movs	r1, #0
 8004228:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff f9c7 	bl	80035c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b004      	add	sp, #16
 8004238:	bd80      	pop	{r7, pc}

0800423a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	60bb      	str	r3, [r7, #8]
  return(result);
 8004248:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	2301      	movs	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2140      	movs	r1, #64	; 0x40
 8004264:	438a      	bics	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2288      	movs	r2, #136	; 0x88
 8004278:	2120      	movs	r1, #32
 800427a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff f993 	bl	80035b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b006      	add	sp, #24
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b090      	sub	sp, #64	; 0x40
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800429c:	203e      	movs	r0, #62	; 0x3e
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	2160      	movs	r1, #96	; 0x60
 80042a4:	5a52      	ldrh	r2, [r2, r1]
 80042a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	228c      	movs	r2, #140	; 0x8c
 80042ac:	589b      	ldr	r3, [r3, r2]
 80042ae:	2b22      	cmp	r3, #34	; 0x22
 80042b0:	d000      	beq.n	80042b4 <UART_RxISR_8BIT+0x20>
 80042b2:	e09a      	b.n	80043ea <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	213c      	movs	r1, #60	; 0x3c
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042c0:	187b      	adds	r3, r7, r1
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b2d9      	uxtb	r1, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	400a      	ands	r2, r1
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	225e      	movs	r2, #94	; 0x5e
 80042e4:	5a9b      	ldrh	r3, [r3, r2]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b299      	uxth	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	225e      	movs	r2, #94	; 0x5e
 80042f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	225e      	movs	r2, #94	; 0x5e
 80042f6:	5a9b      	ldrh	r3, [r3, r2]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d000      	beq.n	8004300 <UART_RxISR_8BIT+0x6c>
 80042fe:	e07c      	b.n	80043fa <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004300:	f3ef 8310 	mrs	r3, PRIMASK
 8004304:	61bb      	str	r3, [r7, #24]
  return(result);
 8004306:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004308:	63bb      	str	r3, [r7, #56]	; 0x38
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f383 8810 	msr	PRIMASK, r3
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4938      	ldr	r1, [pc, #224]	; (8004404 <UART_RxISR_8BIT+0x170>)
 8004322:	400a      	ands	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f383 8810 	msr	PRIMASK, r3
}
 8004330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004332:	f3ef 8310 	mrs	r3, PRIMASK
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
 800433c:	2301      	movs	r3, #1
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2101      	movs	r1, #1
 8004354:	438a      	bics	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	228c      	movs	r2, #140	; 0x8c
 8004368:	2120      	movs	r1, #32
 800436a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d12f      	bne.n	80043e0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004386:	f3ef 8310 	mrs	r3, PRIMASK
 800438a:	60fb      	str	r3, [r7, #12]
  return(result);
 800438c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
 8004390:	2301      	movs	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f383 8810 	msr	PRIMASK, r3
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2110      	movs	r1, #16
 80043a8:	438a      	bics	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f383 8810 	msr	PRIMASK, r3
}
 80043b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	2210      	movs	r2, #16
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d103      	bne.n	80043ce <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2210      	movs	r2, #16
 80043cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	225c      	movs	r2, #92	; 0x5c
 80043d2:	5a9a      	ldrh	r2, [r3, r2]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	0011      	movs	r1, r2
 80043d8:	0018      	movs	r0, r3
 80043da:	f7ff f8f9 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043de:	e00c      	b.n	80043fa <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7fc fb6c 	bl	8000ac0 <HAL_UART_RxCpltCallback>
}
 80043e8:	e007      	b.n	80043fa <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699a      	ldr	r2, [r3, #24]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2108      	movs	r1, #8
 80043f6:	430a      	orrs	r2, r1
 80043f8:	619a      	str	r2, [r3, #24]
}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b010      	add	sp, #64	; 0x40
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	fffffedf 	.word	0xfffffedf

08004408 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b090      	sub	sp, #64	; 0x40
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004410:	203e      	movs	r0, #62	; 0x3e
 8004412:	183b      	adds	r3, r7, r0
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	2160      	movs	r1, #96	; 0x60
 8004418:	5a52      	ldrh	r2, [r2, r1]
 800441a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	228c      	movs	r2, #140	; 0x8c
 8004420:	589b      	ldr	r3, [r3, r2]
 8004422:	2b22      	cmp	r3, #34	; 0x22
 8004424:	d000      	beq.n	8004428 <UART_RxISR_16BIT+0x20>
 8004426:	e09a      	b.n	800455e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442e:	213c      	movs	r1, #60	; 0x3c
 8004430:	187b      	adds	r3, r7, r1
 8004432:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800443a:	187b      	adds	r3, r7, r1
 800443c:	183a      	adds	r2, r7, r0
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	4013      	ands	r3, r2
 8004444:	b29a      	uxth	r2, r3
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	225e      	movs	r2, #94	; 0x5e
 8004458:	5a9b      	ldrh	r3, [r3, r2]
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b299      	uxth	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	225e      	movs	r2, #94	; 0x5e
 8004464:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	225e      	movs	r2, #94	; 0x5e
 800446a:	5a9b      	ldrh	r3, [r3, r2]
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d000      	beq.n	8004474 <UART_RxISR_16BIT+0x6c>
 8004472:	e07c      	b.n	800456e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004474:	f3ef 8310 	mrs	r3, PRIMASK
 8004478:	617b      	str	r3, [r7, #20]
  return(result);
 800447a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4938      	ldr	r1, [pc, #224]	; (8004578 <UART_RxISR_16BIT+0x170>)
 8004496:	400a      	ands	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a6:	f3ef 8310 	mrs	r3, PRIMASK
 80044aa:	623b      	str	r3, [r7, #32]
  return(result);
 80044ac:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
 80044b0:	2301      	movs	r3, #1
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f383 8810 	msr	PRIMASK, r3
}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2101      	movs	r1, #1
 80044c8:	438a      	bics	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	228c      	movs	r2, #140	; 0x8c
 80044dc:	2120      	movs	r1, #32
 80044de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d12f      	bne.n	8004554 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fa:	f3ef 8310 	mrs	r3, PRIMASK
 80044fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004500:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004504:	2301      	movs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f383 8810 	msr	PRIMASK, r3
}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2110      	movs	r1, #16
 800451c:	438a      	bics	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f383 8810 	msr	PRIMASK, r3
}
 800452a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2210      	movs	r2, #16
 8004534:	4013      	ands	r3, r2
 8004536:	2b10      	cmp	r3, #16
 8004538:	d103      	bne.n	8004542 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2210      	movs	r2, #16
 8004540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	225c      	movs	r2, #92	; 0x5c
 8004546:	5a9a      	ldrh	r2, [r3, r2]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0011      	movs	r1, r2
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff f83f 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004552:	e00c      	b.n	800456e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	0018      	movs	r0, r3
 8004558:	f7fc fab2 	bl	8000ac0 <HAL_UART_RxCpltCallback>
}
 800455c:	e007      	b.n	800456e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699a      	ldr	r2, [r3, #24]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2108      	movs	r1, #8
 800456a:	430a      	orrs	r2, r1
 800456c:	619a      	str	r2, [r3, #24]
}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b010      	add	sp, #64	; 0x40
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	fffffedf 	.word	0xfffffedf

0800457c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b09c      	sub	sp, #112	; 0x70
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004584:	236a      	movs	r3, #106	; 0x6a
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	2160      	movs	r1, #96	; 0x60
 800458c:	5a52      	ldrh	r2, [r2, r1]
 800458e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	228c      	movs	r2, #140	; 0x8c
 80045ac:	589b      	ldr	r3, [r3, r2]
 80045ae:	2b22      	cmp	r3, #34	; 0x22
 80045b0:	d000      	beq.n	80045b4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80045b2:	e144      	b.n	800483e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045b4:	235e      	movs	r3, #94	; 0x5e
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	2168      	movs	r1, #104	; 0x68
 80045bc:	5a52      	ldrh	r2, [r2, r1]
 80045be:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045c0:	e0eb      	b.n	800479a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c8:	215c      	movs	r1, #92	; 0x5c
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045ce:	187b      	adds	r3, r7, r1
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	236a      	movs	r3, #106	; 0x6a
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b2d9      	uxtb	r1, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	400a      	ands	r2, r1
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	225e      	movs	r2, #94	; 0x5e
 80045f4:	5a9b      	ldrh	r3, [r3, r2]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b299      	uxth	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	225e      	movs	r2, #94	; 0x5e
 8004600:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800460a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460c:	2207      	movs	r2, #7
 800460e:	4013      	ands	r3, r2
 8004610:	d049      	beq.n	80046a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	2201      	movs	r2, #1
 8004616:	4013      	ands	r3, r2
 8004618:	d010      	beq.n	800463c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800461a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4013      	ands	r3, r2
 8004622:	d00b      	beq.n	800463c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2290      	movs	r2, #144	; 0x90
 8004630:	589b      	ldr	r3, [r3, r2]
 8004632:	2201      	movs	r2, #1
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2190      	movs	r1, #144	; 0x90
 800463a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	2202      	movs	r2, #2
 8004640:	4013      	ands	r3, r2
 8004642:	d00f      	beq.n	8004664 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004646:	2201      	movs	r2, #1
 8004648:	4013      	ands	r3, r2
 800464a:	d00b      	beq.n	8004664 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2202      	movs	r2, #2
 8004652:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2290      	movs	r2, #144	; 0x90
 8004658:	589b      	ldr	r3, [r3, r2]
 800465a:	2204      	movs	r2, #4
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2190      	movs	r1, #144	; 0x90
 8004662:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	2204      	movs	r2, #4
 8004668:	4013      	ands	r3, r2
 800466a:	d00f      	beq.n	800468c <UART_RxISR_8BIT_FIFOEN+0x110>
 800466c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800466e:	2201      	movs	r2, #1
 8004670:	4013      	ands	r3, r2
 8004672:	d00b      	beq.n	800468c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2204      	movs	r2, #4
 800467a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2290      	movs	r2, #144	; 0x90
 8004680:	589b      	ldr	r3, [r3, r2]
 8004682:	2202      	movs	r2, #2
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2190      	movs	r1, #144	; 0x90
 800468a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2290      	movs	r2, #144	; 0x90
 8004690:	589b      	ldr	r3, [r3, r2]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f7fe ff91 	bl	80035c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2290      	movs	r2, #144	; 0x90
 80046a2:	2100      	movs	r1, #0
 80046a4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	225e      	movs	r2, #94	; 0x5e
 80046aa:	5a9b      	ldrh	r3, [r3, r2]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d173      	bne.n	800479a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b2:	f3ef 8310 	mrs	r3, PRIMASK
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80046b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80046bc:	2301      	movs	r3, #1
 80046be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4961      	ldr	r1, [pc, #388]	; (8004858 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80046d4:	400a      	ands	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	f383 8810 	msr	PRIMASK, r3
}
 80046e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8310 	mrs	r3, PRIMASK
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046ec:	657b      	str	r3, [r7, #84]	; 0x54
 80046ee:	2301      	movs	r3, #1
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4955      	ldr	r1, [pc, #340]	; (800485c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004706:	400a      	ands	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	228c      	movs	r2, #140	; 0x8c
 800471a:	2120      	movs	r1, #32
 800471c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d12f      	bne.n	8004792 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004738:	f3ef 8310 	mrs	r3, PRIMASK
 800473c:	623b      	str	r3, [r7, #32]
  return(result);
 800473e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
 8004742:	2301      	movs	r3, #1
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f383 8810 	msr	PRIMASK, r3
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2110      	movs	r1, #16
 800475a:	438a      	bics	r2, r1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	2210      	movs	r2, #16
 8004772:	4013      	ands	r3, r2
 8004774:	2b10      	cmp	r3, #16
 8004776:	d103      	bne.n	8004780 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2210      	movs	r2, #16
 800477e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	225c      	movs	r2, #92	; 0x5c
 8004784:	5a9a      	ldrh	r2, [r3, r2]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0011      	movs	r1, r2
 800478a:	0018      	movs	r0, r3
 800478c:	f7fe ff20 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
 8004790:	e003      	b.n	800479a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f7fc f993 	bl	8000ac0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800479a:	235e      	movs	r3, #94	; 0x5e
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <UART_RxISR_8BIT_FIFOEN+0x232>
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	2220      	movs	r2, #32
 80047a8:	4013      	ands	r3, r2
 80047aa:	d000      	beq.n	80047ae <UART_RxISR_8BIT_FIFOEN+0x232>
 80047ac:	e709      	b.n	80045c2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80047ae:	204e      	movs	r0, #78	; 0x4e
 80047b0:	183b      	adds	r3, r7, r0
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	215e      	movs	r1, #94	; 0x5e
 80047b6:	5a52      	ldrh	r2, [r2, r1]
 80047b8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80047ba:	0001      	movs	r1, r0
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d044      	beq.n	800484e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2268      	movs	r2, #104	; 0x68
 80047c8:	5a9b      	ldrh	r3, [r3, r2]
 80047ca:	187a      	adds	r2, r7, r1
 80047cc:	8812      	ldrh	r2, [r2, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d23d      	bcs.n	800484e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d2:	f3ef 8310 	mrs	r3, PRIMASK
 80047d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80047d8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047da:	64bb      	str	r3, [r7, #72]	; 0x48
 80047dc:	2301      	movs	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f383 8810 	msr	PRIMASK, r3
}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	491b      	ldr	r1, [pc, #108]	; (8004860 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f383 8810 	msr	PRIMASK, r3
}
 8004802:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a17      	ldr	r2, [pc, #92]	; (8004864 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8004808:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	617b      	str	r3, [r7, #20]
  return(result);
 8004810:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
 8004814:	2301      	movs	r3, #1
 8004816:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2120      	movs	r1, #32
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800483c:	e007      	b.n	800484e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2108      	movs	r1, #8
 800484a:	430a      	orrs	r2, r1
 800484c:	619a      	str	r2, [r3, #24]
}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	46bd      	mov	sp, r7
 8004852:	b01c      	add	sp, #112	; 0x70
 8004854:	bd80      	pop	{r7, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	fffffeff 	.word	0xfffffeff
 800485c:	effffffe 	.word	0xeffffffe
 8004860:	efffffff 	.word	0xefffffff
 8004864:	08004295 	.word	0x08004295

08004868 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b09e      	sub	sp, #120	; 0x78
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004870:	2372      	movs	r3, #114	; 0x72
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	2160      	movs	r1, #96	; 0x60
 8004878:	5a52      	ldrh	r2, [r2, r1]
 800487a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	228c      	movs	r2, #140	; 0x8c
 8004898:	589b      	ldr	r3, [r3, r2]
 800489a:	2b22      	cmp	r3, #34	; 0x22
 800489c:	d000      	beq.n	80048a0 <UART_RxISR_16BIT_FIFOEN+0x38>
 800489e:	e144      	b.n	8004b2a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80048a0:	2366      	movs	r3, #102	; 0x66
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	2168      	movs	r1, #104	; 0x68
 80048a8:	5a52      	ldrh	r2, [r2, r1]
 80048aa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048ac:	e0eb      	b.n	8004a86 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b4:	2164      	movs	r1, #100	; 0x64
 80048b6:	187b      	adds	r3, r7, r1
 80048b8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048be:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	2272      	movs	r2, #114	; 0x72
 80048c4:	18ba      	adds	r2, r7, r2
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	8812      	ldrh	r2, [r2, #0]
 80048ca:	4013      	ands	r3, r2
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	1c9a      	adds	r2, r3, #2
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	225e      	movs	r2, #94	; 0x5e
 80048e0:	5a9b      	ldrh	r3, [r3, r2]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b299      	uxth	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	225e      	movs	r2, #94	; 0x5e
 80048ec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80048f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f8:	2207      	movs	r2, #7
 80048fa:	4013      	ands	r3, r2
 80048fc:	d049      	beq.n	8004992 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004900:	2201      	movs	r2, #1
 8004902:	4013      	ands	r3, r2
 8004904:	d010      	beq.n	8004928 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8004906:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d00b      	beq.n	8004928 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2290      	movs	r2, #144	; 0x90
 800491c:	589b      	ldr	r3, [r3, r2]
 800491e:	2201      	movs	r2, #1
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2190      	movs	r1, #144	; 0x90
 8004926:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492a:	2202      	movs	r2, #2
 800492c:	4013      	ands	r3, r2
 800492e:	d00f      	beq.n	8004950 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004932:	2201      	movs	r2, #1
 8004934:	4013      	ands	r3, r2
 8004936:	d00b      	beq.n	8004950 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2290      	movs	r2, #144	; 0x90
 8004944:	589b      	ldr	r3, [r3, r2]
 8004946:	2204      	movs	r2, #4
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2190      	movs	r1, #144	; 0x90
 800494e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004952:	2204      	movs	r2, #4
 8004954:	4013      	ands	r3, r2
 8004956:	d00f      	beq.n	8004978 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800495a:	2201      	movs	r2, #1
 800495c:	4013      	ands	r3, r2
 800495e:	d00b      	beq.n	8004978 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2290      	movs	r2, #144	; 0x90
 800496c:	589b      	ldr	r3, [r3, r2]
 800496e:	2202      	movs	r2, #2
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2190      	movs	r1, #144	; 0x90
 8004976:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2290      	movs	r2, #144	; 0x90
 800497c:	589b      	ldr	r3, [r3, r2]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fe fe1b 	bl	80035c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2290      	movs	r2, #144	; 0x90
 800498e:	2100      	movs	r1, #0
 8004990:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	225e      	movs	r2, #94	; 0x5e
 8004996:	5a9b      	ldrh	r3, [r3, r2]
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d173      	bne.n	8004a86 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499e:	f3ef 8310 	mrs	r3, PRIMASK
 80049a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a8:	2301      	movs	r3, #1
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4961      	ldr	r1, [pc, #388]	; (8004b44 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80049c0:	400a      	ands	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d0:	f3ef 8310 	mrs	r3, PRIMASK
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049da:	2301      	movs	r3, #1
 80049dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	f383 8810 	msr	PRIMASK, r3
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4955      	ldr	r1, [pc, #340]	; (8004b48 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80049f2:	400a      	ands	r2, r1
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	228c      	movs	r2, #140	; 0x8c
 8004a06:	2120      	movs	r1, #32
 8004a08:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d12f      	bne.n	8004a7e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a2e:	2301      	movs	r3, #1
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2110      	movs	r1, #16
 8004a46:	438a      	bics	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d103      	bne.n	8004a6c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2210      	movs	r2, #16
 8004a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	225c      	movs	r2, #92	; 0x5c
 8004a70:	5a9a      	ldrh	r2, [r3, r2]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7fe fdaa 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
 8004a7c:	e003      	b.n	8004a86 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7fc f81d 	bl	8000ac0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a86:	2366      	movs	r3, #102	; 0x66
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d004      	beq.n	8004a9a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a92:	2220      	movs	r2, #32
 8004a94:	4013      	ands	r3, r2
 8004a96:	d000      	beq.n	8004a9a <UART_RxISR_16BIT_FIFOEN+0x232>
 8004a98:	e709      	b.n	80048ae <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004a9a:	2052      	movs	r0, #82	; 0x52
 8004a9c:	183b      	adds	r3, r7, r0
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	215e      	movs	r1, #94	; 0x5e
 8004aa2:	5a52      	ldrh	r2, [r2, r1]
 8004aa4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004aa6:	0001      	movs	r1, r0
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d044      	beq.n	8004b3a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2268      	movs	r2, #104	; 0x68
 8004ab4:	5a9b      	ldrh	r3, [r3, r2]
 8004ab6:	187a      	adds	r2, r7, r1
 8004ab8:	8812      	ldrh	r2, [r2, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d23d      	bcs.n	8004b3a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004abe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ac2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	2301      	movs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	491b      	ldr	r1, [pc, #108]	; (8004b4c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f383 8810 	msr	PRIMASK, r3
}
 8004aee:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8004af4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af6:	f3ef 8310 	mrs	r3, PRIMASK
 8004afa:	61bb      	str	r3, [r7, #24]
  return(result);
 8004afc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	2301      	movs	r3, #1
 8004b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f383 8810 	msr	PRIMASK, r3
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2120      	movs	r1, #32
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b28:	e007      	b.n	8004b3a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2108      	movs	r1, #8
 8004b36:	430a      	orrs	r2, r1
 8004b38:	619a      	str	r2, [r3, #24]
}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b01e      	add	sp, #120	; 0x78
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	fffffeff 	.word	0xfffffeff
 8004b48:	effffffe 	.word	0xeffffffe
 8004b4c:	efffffff 	.word	0xefffffff
 8004b50:	08004409 	.word	0x08004409

08004b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2284      	movs	r2, #132	; 0x84
 8004b90:	5c9b      	ldrb	r3, [r3, r2]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_UARTEx_DisableFifoMode+0x16>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e027      	b.n	8004bea <HAL_UARTEx_DisableFifoMode+0x66>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2284      	movs	r2, #132	; 0x84
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2288      	movs	r2, #136	; 0x88
 8004ba6:	2124      	movs	r1, #36	; 0x24
 8004ba8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	; (8004bf4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2288      	movs	r2, #136	; 0x88
 8004bdc:	2120      	movs	r1, #32
 8004bde:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2284      	movs	r2, #132	; 0x84
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	dfffffff 	.word	0xdfffffff

08004bf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2284      	movs	r2, #132	; 0x84
 8004c06:	5c9b      	ldrb	r3, [r3, r2]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e02e      	b.n	8004c6e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2284      	movs	r2, #132	; 0x84
 8004c14:	2101      	movs	r1, #1
 8004c16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2288      	movs	r2, #136	; 0x88
 8004c1c:	2124      	movs	r1, #36	; 0x24
 8004c1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	438a      	bics	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	08d9      	lsrs	r1, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 f854 	bl	8004cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2288      	movs	r2, #136	; 0x88
 8004c60:	2120      	movs	r1, #32
 8004c62:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2284      	movs	r2, #132	; 0x84
 8004c68:	2100      	movs	r1, #0
 8004c6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2284      	movs	r2, #132	; 0x84
 8004c86:	5c9b      	ldrb	r3, [r3, r2]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e02f      	b.n	8004cf0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2284      	movs	r2, #132	; 0x84
 8004c94:	2101      	movs	r1, #1
 8004c96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2288      	movs	r2, #136	; 0x88
 8004c9c:	2124      	movs	r1, #36	; 0x24
 8004c9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	; (8004cf8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 f813 	bl	8004cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2288      	movs	r2, #136	; 0x88
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2284      	movs	r2, #132	; 0x84
 8004cea:	2100      	movs	r1, #0
 8004cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b004      	add	sp, #16
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	f1ffffff 	.word	0xf1ffffff

08004cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d108      	bne.n	8004d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	226a      	movs	r2, #106	; 0x6a
 8004d10:	2101      	movs	r1, #1
 8004d12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2268      	movs	r2, #104	; 0x68
 8004d18:	2101      	movs	r1, #1
 8004d1a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d1c:	e043      	b.n	8004da6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d1e:	260f      	movs	r6, #15
 8004d20:	19bb      	adds	r3, r7, r6
 8004d22:	2208      	movs	r2, #8
 8004d24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d26:	200e      	movs	r0, #14
 8004d28:	183b      	adds	r3, r7, r0
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	0e5b      	lsrs	r3, r3, #25
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	240d      	movs	r4, #13
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	2107      	movs	r1, #7
 8004d3e:	400a      	ands	r2, r1
 8004d40:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0f5b      	lsrs	r3, r3, #29
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	250c      	movs	r5, #12
 8004d4e:	197b      	adds	r3, r7, r5
 8004d50:	2107      	movs	r1, #7
 8004d52:	400a      	ands	r2, r1
 8004d54:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	197a      	adds	r2, r7, r5
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	4914      	ldr	r1, [pc, #80]	; (8004db0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d60:	5c8a      	ldrb	r2, [r1, r2]
 8004d62:	435a      	muls	r2, r3
 8004d64:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d66:	197b      	adds	r3, r7, r5
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d6e:	0019      	movs	r1, r3
 8004d70:	f7fb fa54 	bl	800021c <__divsi3>
 8004d74:	0003      	movs	r3, r0
 8004d76:	b299      	uxth	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	226a      	movs	r2, #106	; 0x6a
 8004d7c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d7e:	19bb      	adds	r3, r7, r6
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	193a      	adds	r2, r7, r4
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	490a      	ldr	r1, [pc, #40]	; (8004db0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d88:	5c8a      	ldrb	r2, [r1, r2]
 8004d8a:	435a      	muls	r2, r3
 8004d8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d8e:	193b      	adds	r3, r7, r4
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004d94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d96:	0019      	movs	r1, r3
 8004d98:	f7fb fa40 	bl	800021c <__divsi3>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	b299      	uxth	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2268      	movs	r2, #104	; 0x68
 8004da4:	5299      	strh	r1, [r3, r2]
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b005      	add	sp, #20
 8004dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	08007c40 	.word	0x08007c40
 8004db4:	08007c48 	.word	0x08007c48

08004db8 <__NVIC_SetPriority>:
{
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	1dfb      	adds	r3, r7, #7
 8004dc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dc6:	1dfb      	adds	r3, r7, #7
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b7f      	cmp	r3, #127	; 0x7f
 8004dcc:	d828      	bhi.n	8004e20 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dce:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <__NVIC_SetPriority+0xd4>)
 8004dd0:	1dfb      	adds	r3, r7, #7
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b25b      	sxtb	r3, r3
 8004dd6:	089b      	lsrs	r3, r3, #2
 8004dd8:	33c0      	adds	r3, #192	; 0xc0
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	589b      	ldr	r3, [r3, r2]
 8004dde:	1dfa      	adds	r2, r7, #7
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	0011      	movs	r1, r2
 8004de4:	2203      	movs	r2, #3
 8004de6:	400a      	ands	r2, r1
 8004de8:	00d2      	lsls	r2, r2, #3
 8004dea:	21ff      	movs	r1, #255	; 0xff
 8004dec:	4091      	lsls	r1, r2
 8004dee:	000a      	movs	r2, r1
 8004df0:	43d2      	mvns	r2, r2
 8004df2:	401a      	ands	r2, r3
 8004df4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	019b      	lsls	r3, r3, #6
 8004dfa:	22ff      	movs	r2, #255	; 0xff
 8004dfc:	401a      	ands	r2, r3
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	0018      	movs	r0, r3
 8004e04:	2303      	movs	r3, #3
 8004e06:	4003      	ands	r3, r0
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e0c:	481f      	ldr	r0, [pc, #124]	; (8004e8c <__NVIC_SetPriority+0xd4>)
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	089b      	lsrs	r3, r3, #2
 8004e16:	430a      	orrs	r2, r1
 8004e18:	33c0      	adds	r3, #192	; 0xc0
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	501a      	str	r2, [r3, r0]
}
 8004e1e:	e031      	b.n	8004e84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <__NVIC_SetPriority+0xd8>)
 8004e22:	1dfb      	adds	r3, r7, #7
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	0019      	movs	r1, r3
 8004e28:	230f      	movs	r3, #15
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	3b08      	subs	r3, #8
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	3306      	adds	r3, #6
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	18d3      	adds	r3, r2, r3
 8004e36:	3304      	adds	r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	1dfa      	adds	r2, r7, #7
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	0011      	movs	r1, r2
 8004e40:	2203      	movs	r2, #3
 8004e42:	400a      	ands	r2, r1
 8004e44:	00d2      	lsls	r2, r2, #3
 8004e46:	21ff      	movs	r1, #255	; 0xff
 8004e48:	4091      	lsls	r1, r2
 8004e4a:	000a      	movs	r2, r1
 8004e4c:	43d2      	mvns	r2, r2
 8004e4e:	401a      	ands	r2, r3
 8004e50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	22ff      	movs	r2, #255	; 0xff
 8004e58:	401a      	ands	r2, r3
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	2303      	movs	r3, #3
 8004e62:	4003      	ands	r3, r0
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e68:	4809      	ldr	r0, [pc, #36]	; (8004e90 <__NVIC_SetPriority+0xd8>)
 8004e6a:	1dfb      	adds	r3, r7, #7
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	001c      	movs	r4, r3
 8004e70:	230f      	movs	r3, #15
 8004e72:	4023      	ands	r3, r4
 8004e74:	3b08      	subs	r3, #8
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	3306      	adds	r3, #6
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	18c3      	adds	r3, r0, r3
 8004e80:	3304      	adds	r3, #4
 8004e82:	601a      	str	r2, [r3, #0]
}
 8004e84:	46c0      	nop			; (mov r8, r8)
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b003      	add	sp, #12
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	e000e100 	.word	0xe000e100
 8004e90:	e000ed00 	.word	0xe000ed00

08004e94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <SysTick_Handler+0x1c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e9c:	f001 fc88 	bl	80067b0 <xTaskGetSchedulerState>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d001      	beq.n	8004eaa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ea6:	f002 fb07 	bl	80074b8 <xPortSysTickHandler>
  }
}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	e000e010 	.word	0xe000e010

08004eb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004eb8:	2305      	movs	r3, #5
 8004eba:	425b      	negs	r3, r3
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f7ff ff7a 	bl	8004db8 <__NVIC_SetPriority>
#endif
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed2:	f3ef 8305 	mrs	r3, IPSR
 8004ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ede:	2306      	movs	r3, #6
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	e00c      	b.n	8004f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <osKernelInitialize+0x40>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <osKernelInitialize+0x40>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	607b      	str	r3, [r7, #4]
 8004ef8:	e002      	b.n	8004f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004efa:	2301      	movs	r3, #1
 8004efc:	425b      	negs	r3, r3
 8004efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b002      	add	sp, #8
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	200001f0 	.word	0x200001f0

08004f10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f16:	f3ef 8305 	mrs	r3, IPSR
 8004f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f22:	2306      	movs	r3, #6
 8004f24:	425b      	negs	r3, r3
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	e010      	b.n	8004f4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <osKernelStart+0x48>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d109      	bne.n	8004f46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f32:	f7ff ffbf 	bl	8004eb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f36:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <osKernelStart+0x48>)
 8004f38:	2202      	movs	r2, #2
 8004f3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f3c:	f001 f84e 	bl	8005fdc <vTaskStartScheduler>
      stat = osOK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	e002      	b.n	8004f4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f46:	2301      	movs	r3, #1
 8004f48:	425b      	negs	r3, r3
 8004f4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f4c:	687b      	ldr	r3, [r7, #4]
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	200001f0 	.word	0x200001f0

08004f5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f5c:	b5b0      	push	{r4, r5, r7, lr}
 8004f5e:	b08e      	sub	sp, #56	; 0x38
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6c:	f3ef 8305 	mrs	r3, IPSR
 8004f70:	617b      	str	r3, [r7, #20]
  return(result);
 8004f72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d000      	beq.n	8004f7a <osThreadNew+0x1e>
 8004f78:	e081      	b.n	800507e <osThreadNew+0x122>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d100      	bne.n	8004f82 <osThreadNew+0x26>
 8004f80:	e07d      	b.n	800507e <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f86:	2318      	movs	r3, #24
 8004f88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	425b      	negs	r3, r3
 8004f92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d044      	beq.n	8005024 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <osThreadNew+0x4c>
        name = attr->name;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <osThreadNew+0x70>
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b38      	cmp	r3, #56	; 0x38
 8004fc0:	d804      	bhi.n	8004fcc <osThreadNew+0x70>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d001      	beq.n	8004fd0 <osThreadNew+0x74>
        return (NULL);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e057      	b.n	8005080 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	089b      	lsrs	r3, r3, #2
 8004fde:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00e      	beq.n	8005006 <osThreadNew+0xaa>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2bbb      	cmp	r3, #187	; 0xbb
 8004fee:	d90a      	bls.n	8005006 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d006      	beq.n	8005006 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <osThreadNew+0xaa>
        mem = 1;
 8005000:	2301      	movs	r3, #1
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e010      	b.n	8005028 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <osThreadNew+0xcc>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <osThreadNew+0xcc>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <osThreadNew+0xcc>
          mem = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e001      	b.n	8005028 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d112      	bne.n	8005054 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005036:	68bd      	ldr	r5, [r7, #8]
 8005038:	6a3c      	ldr	r4, [r7, #32]
 800503a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	9302      	str	r3, [sp, #8]
 8005040:	9201      	str	r2, [sp, #4]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	002b      	movs	r3, r5
 8005048:	0022      	movs	r2, r4
 800504a:	f000 fe08 	bl	8005c5e <xTaskCreateStatic>
 800504e:	0003      	movs	r3, r0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e014      	b.n	800507e <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d111      	bne.n	800507e <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	b29a      	uxth	r2, r3
 800505e:	68bc      	ldr	r4, [r7, #8]
 8005060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	2310      	movs	r3, #16
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	0023      	movs	r3, r4
 8005070:	f000 fe39 	bl	8005ce6 <xTaskCreate>
 8005074:	0003      	movs	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	d001      	beq.n	800507e <osThreadNew+0x122>
            hTask = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800507e:	693b      	ldr	r3, [r7, #16]
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b00a      	add	sp, #40	; 0x28
 8005086:	bdb0      	pop	{r4, r5, r7, pc}

08005088 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <osThreadFlagsSet+0x1a>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	da03      	bge.n	80050aa <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80050a2:	2304      	movs	r3, #4
 80050a4:	425b      	negs	r3, r3
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e031      	b.n	800510e <osThreadFlagsSet+0x86>
  }
  else {
    rflags = (uint32_t)osError;
 80050aa:	2301      	movs	r3, #1
 80050ac:	425b      	negs	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050b0:	f3ef 8305 	mrs	r3, IPSR
 80050b4:	613b      	str	r3, [r7, #16]
  return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01b      	beq.n	80050f4 <osThreadFlagsSet+0x6c>
      yield = pdFALSE;
 80050bc:	2300      	movs	r3, #0
 80050be:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80050c0:	6839      	ldr	r1, [r7, #0]
 80050c2:	6978      	ldr	r0, [r7, #20]
 80050c4:	2308      	movs	r3, #8
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	2201      	movs	r2, #1
 80050ce:	f001 fcdb 	bl	8006a88 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80050d2:	230c      	movs	r3, #12
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	6978      	ldr	r0, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	9200      	str	r2, [sp, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	2100      	movs	r1, #0
 80050e0:	f001 fcd2 	bl	8006a88 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <osThreadFlagsSet+0x86>
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <osThreadFlagsSet+0x90>)
 80050ec:	2280      	movs	r2, #128	; 0x80
 80050ee:	0552      	lsls	r2, r2, #21
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e00c      	b.n	800510e <osThreadFlagsSet+0x86>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	2300      	movs	r3, #0
 80050fa:	2201      	movs	r2, #1
 80050fc:	f001 fc28 	bl	8006950 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005100:	230c      	movs	r3, #12
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	2100      	movs	r1, #0
 800510a:	f001 fc21 	bl	8006950 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800510e:	68fb      	ldr	r3, [r7, #12]
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	b006      	add	sp, #24
 8005116:	bd80      	pop	{r7, pc}
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b08c      	sub	sp, #48	; 0x30
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005128:	f3ef 8305 	mrs	r3, IPSR
 800512c:	617b      	str	r3, [r7, #20]
  return(result);
 800512e:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005134:	2306      	movs	r3, #6
 8005136:	425b      	negs	r3, r3
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513a:	e06a      	b.n	8005212 <osThreadFlagsWait+0xf6>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	da03      	bge.n	800514a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005142:	2304      	movs	r3, #4
 8005144:	425b      	negs	r3, r3
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	e063      	b.n	8005212 <osThreadFlagsWait+0xf6>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2202      	movs	r2, #2
 800514e:	4013      	ands	r3, r2
 8005150:	d002      	beq.n	8005158 <osThreadFlagsWait+0x3c>
      clear = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
 8005156:	e001      	b.n	800515c <osThreadFlagsWait+0x40>
    } else {
      clear = flags;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8005164:	f001 f830 	bl	80061c8 <xTaskGetTickCount>
 8005168:	0003      	movs	r3, r0
 800516a:	623b      	str	r3, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	2210      	movs	r2, #16
 8005170:	18ba      	adds	r2, r7, r2
 8005172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005174:	2000      	movs	r0, #0
 8005176:	f001 fb93 	bl	80068a0 <xTaskNotifyWait>
 800517a:	0003      	movs	r3, r0
 800517c:	61fb      	str	r3, [r7, #28]

      if (rval == pdPASS) {
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d135      	bne.n	80051f0 <osThreadFlagsWait+0xd4>
        rflags &= flags;
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005190:	4313      	orrs	r3, r2
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2201      	movs	r2, #1
 8005198:	4013      	ands	r3, r2
 800519a:	d00c      	beq.n	80051b6 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a0:	4013      	ands	r3, r2
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d031      	beq.n	800520c <osThreadFlagsWait+0xf0>
            break;
          } else {
            if (timeout == 0U) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10e      	bne.n	80051cc <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80051ae:	2303      	movs	r3, #3
 80051b0:	425b      	negs	r3, r3
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80051b4:	e02d      	b.n	8005212 <osThreadFlagsWait+0xf6>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ba:	4013      	ands	r3, r2
 80051bc:	d128      	bne.n	8005210 <osThreadFlagsWait+0xf4>
            break;
          } else {
            if (timeout == 0U) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d103      	bne.n	80051cc <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80051c4:	2303      	movs	r3, #3
 80051c6:	425b      	negs	r3, r3
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80051ca:	e022      	b.n	8005212 <osThreadFlagsWait+0xf6>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80051cc:	f000 fffc 	bl	80061c8 <xTaskGetTickCount>
 80051d0:	0002      	movs	r2, r0
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	429a      	cmp	r2, r3
 80051de:	d902      	bls.n	80051e6 <osThreadFlagsWait+0xca>
          tout  = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	e00e      	b.n	8005204 <osThreadFlagsWait+0xe8>
        } else {
          tout -= td;
 80051e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
 80051ee:	e009      	b.n	8005204 <osThreadFlagsWait+0xe8>
        }
      }
      else {
        if (timeout == 0) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <osThreadFlagsWait+0xe2>
          rflags = (uint32_t)osErrorResource;
 80051f6:	2303      	movs	r3, #3
 80051f8:	425b      	negs	r3, r3
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fc:	e002      	b.n	8005204 <osThreadFlagsWait+0xe8>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80051fe:	2302      	movs	r3, #2
 8005200:	425b      	negs	r3, r3
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1b0      	bne.n	800516c <osThreadFlagsWait+0x50>
 800520a:	e002      	b.n	8005212 <osThreadFlagsWait+0xf6>
            break;
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	e000      	b.n	8005212 <osThreadFlagsWait+0xf6>
            break;
 8005210:	46c0      	nop			; (mov r8, r8)
  }

  /* Return flags before clearing */
  return (rflags);
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b00c      	add	sp, #48	; 0x30
 800521a:	bd80      	pop	{r7, pc}

0800521c <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005224:	f3ef 8305 	mrs	r3, IPSR
 8005228:	60bb      	str	r3, [r7, #8]
  return(result);
 800522a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <osDelay+0x1c>
    stat = osErrorISR;
 8005230:	2306      	movs	r3, #6
 8005232:	425b      	negs	r3, r3
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e008      	b.n	800524a <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <osDelay+0x2e>
      vTaskDelay(ticks);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	0018      	movs	r0, r3
 8005246:	f000 fea3 	bl	8005f90 <vTaskDelay>
    }
  }

  return (stat);
 800524a:	68fb      	ldr	r3, [r7, #12]
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b004      	add	sp, #16
 8005252:	bd80      	pop	{r7, pc}

08005254 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a06      	ldr	r2, [pc, #24]	; (800527c <vApplicationGetIdleTaskMemory+0x28>)
 8005264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4a05      	ldr	r2, [pc, #20]	; (8005280 <vApplicationGetIdleTaskMemory+0x2c>)
 800526a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2280      	movs	r2, #128	; 0x80
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	b004      	add	sp, #16
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	200001f4 	.word	0x200001f4
 8005280:	200002b0 	.word	0x200002b0

08005284 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a06      	ldr	r2, [pc, #24]	; (80052ac <vApplicationGetTimerTaskMemory+0x28>)
 8005294:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4a05      	ldr	r2, [pc, #20]	; (80052b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800529a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	0052      	lsls	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b004      	add	sp, #16
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	200004b0 	.word	0x200004b0
 80052b0:	2000056c 	.word	0x2000056c

080052b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3308      	adds	r3, #8
 80052c0:	001a      	movs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	4252      	negs	r2, r2
 80052cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3308      	adds	r3, #8
 80052d2:	001a      	movs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3308      	adds	r3, #8
 80052dc:	001a      	movs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}

08005306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}

0800534a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	3301      	adds	r3, #1
 800535e:	d103      	bne.n	8005368 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e00c      	b.n	8005382 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3308      	adds	r3, #8
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e002      	b.n	8005376 <vListInsert+0x2c>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d2f6      	bcs.n	8005370 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6892      	ldr	r2, [r2, #8]
 80053cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6852      	ldr	r2, [r2, #4]
 80053d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d103      	bne.n	80053ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	1e5a      	subs	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b004      	add	sp, #16
 8005404:	bd80      	pop	{r7, pc}

08005406 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueGenericReset+0x18>
 800541a:	b672      	cpsid	i
 800541c:	e7fe      	b.n	800541c <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800541e:	f001 ffef 	bl	8007400 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	434b      	muls	r3, r1
 8005430:	18d2      	adds	r2, r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	1e59      	subs	r1, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	434b      	muls	r3, r1
 8005454:	18d2      	adds	r2, r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2244      	movs	r2, #68	; 0x44
 800545e:	21ff      	movs	r1, #255	; 0xff
 8005460:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2245      	movs	r2, #69	; 0x45
 8005466:	21ff      	movs	r1, #255	; 0xff
 8005468:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10d      	bne.n	800548c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3310      	adds	r3, #16
 800547c:	0018      	movs	r0, r3
 800547e:	f000 ffff 	bl	8006480 <xTaskRemoveFromEventList>
 8005482:	1e03      	subs	r3, r0, #0
 8005484:	d00c      	beq.n	80054a0 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005486:	f001 ffab 	bl	80073e0 <vPortYield>
 800548a:	e009      	b.n	80054a0 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3310      	adds	r3, #16
 8005490:	0018      	movs	r0, r3
 8005492:	f7ff ff0f 	bl	80052b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3324      	adds	r3, #36	; 0x24
 800549a:	0018      	movs	r0, r3
 800549c:	f7ff ff0a 	bl	80052b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054a0:	f001 ffc0 	bl	8007424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054a4:	2301      	movs	r3, #1
}
 80054a6:	0018      	movs	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b004      	add	sp, #16
 80054ac:	bd80      	pop	{r7, pc}

080054ae <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054ae:	b590      	push	{r4, r7, lr}
 80054b0:	b089      	sub	sp, #36	; 0x24
 80054b2:	af02      	add	r7, sp, #8
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <xQueueGenericCreateStatic+0x18>
 80054c2:	b672      	cpsid	i
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <xQueueGenericCreateStatic+0x22>
 80054cc:	b672      	cpsid	i
 80054ce:	e7fe      	b.n	80054ce <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <xQueueGenericCreateStatic+0x2e>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <xQueueGenericCreateStatic+0x32>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <xQueueGenericCreateStatic+0x34>
 80054e0:	2300      	movs	r3, #0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericCreateStatic+0x3c>
 80054e6:	b672      	cpsid	i
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d102      	bne.n	80054f6 <xQueueGenericCreateStatic+0x48>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <xQueueGenericCreateStatic+0x4c>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <xQueueGenericCreateStatic+0x4e>
 80054fa:	2300      	movs	r3, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <xQueueGenericCreateStatic+0x56>
 8005500:	b672      	cpsid	i
 8005502:	e7fe      	b.n	8005502 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005504:	2350      	movs	r3, #80	; 0x50
 8005506:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b50      	cmp	r3, #80	; 0x50
 800550c:	d001      	beq.n	8005512 <xQueueGenericCreateStatic+0x64>
 800550e:	b672      	cpsid	i
 8005510:	e7fe      	b.n	8005510 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005512:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2246      	movs	r2, #70	; 0x46
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005526:	2328      	movs	r3, #40	; 0x28
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	781c      	ldrb	r4, [r3, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	0023      	movs	r3, r4
 8005538:	f000 f805 	bl	8005546 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800553c:	697b      	ldr	r3, [r7, #20]
	}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b007      	add	sp, #28
 8005544:	bd90      	pop	{r4, r7, pc}

08005546 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
 8005552:	001a      	movs	r2, r3
 8005554:	1cfb      	adds	r3, r7, #3
 8005556:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e002      	b.n	800556c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	2101      	movs	r1, #1
 800557c:	0018      	movs	r0, r3
 800557e:	f7ff ff42 	bl	8005406 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	1cfa      	adds	r2, r7, #3
 8005586:	214c      	movs	r1, #76	; 0x4c
 8005588:	7812      	ldrb	r2, [r2, #0]
 800558a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}

08005594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <xQueueGenericSend+0x20>
 80055b0:	b672      	cpsid	i
 80055b2:	e7fe      	b.n	80055b2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSend+0x2e>
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSend+0x32>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSend+0x34>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xQueueGenericSend+0x3c>
 80055cc:	b672      	cpsid	i
 80055ce:	e7fe      	b.n	80055ce <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d103      	bne.n	80055de <xQueueGenericSend+0x4a>
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <xQueueGenericSend+0x4e>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGenericSend+0x50>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <xQueueGenericSend+0x58>
 80055e8:	b672      	cpsid	i
 80055ea:	e7fe      	b.n	80055ea <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ec:	f001 f8e0 	bl	80067b0 <xTaskGetSchedulerState>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d102      	bne.n	80055fa <xQueueGenericSend+0x66>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <xQueueGenericSend+0x6a>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <xQueueGenericSend+0x6c>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <xQueueGenericSend+0x74>
 8005604:	b672      	cpsid	i
 8005606:	e7fe      	b.n	8005606 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005608:	f001 fefa 	bl	8007400 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <xQueueGenericSend+0x8a>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d11e      	bne.n	800565c <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	0018      	movs	r0, r3
 8005626:	f000 f9a2 	bl	800596e <prvCopyDataToQueue>
 800562a:	0003      	movs	r3, r0
 800562c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	3324      	adds	r3, #36	; 0x24
 800563a:	0018      	movs	r0, r3
 800563c:	f000 ff20 	bl	8006480 <xTaskRemoveFromEventList>
 8005640:	1e03      	subs	r3, r0, #0
 8005642:	d007      	beq.n	8005654 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005644:	f001 fecc 	bl	80073e0 <vPortYield>
 8005648:	e004      	b.n	8005654 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005650:	f001 fec6 	bl	80073e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005654:	f001 fee6 	bl	8007424 <vPortExitCritical>
				return pdPASS;
 8005658:	2301      	movs	r3, #1
 800565a:	e05b      	b.n	8005714 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005662:	f001 fedf 	bl	8007424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005666:	2300      	movs	r3, #0
 8005668:	e054      	b.n	8005714 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005670:	2314      	movs	r3, #20
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	0018      	movs	r0, r3
 8005676:	f000 ff5f 	bl	8006538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800567e:	f001 fed1 	bl	8007424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005682:	f000 fd09 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005686:	f001 febb 	bl	8007400 <vPortEnterCritical>
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	2244      	movs	r2, #68	; 0x44
 800568e:	5c9b      	ldrb	r3, [r3, r2]
 8005690:	b25b      	sxtb	r3, r3
 8005692:	3301      	adds	r3, #1
 8005694:	d103      	bne.n	800569e <xQueueGenericSend+0x10a>
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2244      	movs	r2, #68	; 0x44
 800569a:	2100      	movs	r1, #0
 800569c:	5499      	strb	r1, [r3, r2]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2245      	movs	r2, #69	; 0x45
 80056a2:	5c9b      	ldrb	r3, [r3, r2]
 80056a4:	b25b      	sxtb	r3, r3
 80056a6:	3301      	adds	r3, #1
 80056a8:	d103      	bne.n	80056b2 <xQueueGenericSend+0x11e>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	2245      	movs	r2, #69	; 0x45
 80056ae:	2100      	movs	r1, #0
 80056b0:	5499      	strb	r1, [r3, r2]
 80056b2:	f001 feb7 	bl	8007424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b6:	1d3a      	adds	r2, r7, #4
 80056b8:	2314      	movs	r3, #20
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	0011      	movs	r1, r2
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 ff4e 	bl	8006560 <xTaskCheckForTimeOut>
 80056c4:	1e03      	subs	r3, r0, #0
 80056c6:	d11e      	bne.n	8005706 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	0018      	movs	r0, r3
 80056cc:	f000 fa54 	bl	8005b78 <prvIsQueueFull>
 80056d0:	1e03      	subs	r3, r0, #0
 80056d2:	d011      	beq.n	80056f8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	3310      	adds	r3, #16
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	0011      	movs	r1, r2
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 fe8b 	bl	80063f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f9d3 	bl	8005a90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056ea:	f000 fce1 	bl	80060b0 <xTaskResumeAll>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d18a      	bne.n	8005608 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80056f2:	f001 fe75 	bl	80073e0 <vPortYield>
 80056f6:	e787      	b.n	8005608 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	0018      	movs	r0, r3
 80056fc:	f000 f9c8 	bl	8005a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005700:	f000 fcd6 	bl	80060b0 <xTaskResumeAll>
 8005704:	e780      	b.n	8005608 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 f9c1 	bl	8005a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800570e:	f000 fccf 	bl	80060b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005712:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b00a      	add	sp, #40	; 0x28
 800571a:	bd80      	pop	{r7, pc}

0800571c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b08b      	sub	sp, #44	; 0x2c
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <xQueueGenericSendFromISR+0x1c>
 8005734:	b672      	cpsid	i
 8005736:	e7fe      	b.n	8005736 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueGenericSendFromISR+0x2a>
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueGenericSendFromISR+0x2e>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueGenericSendFromISR+0x30>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <xQueueGenericSendFromISR+0x38>
 8005750:	b672      	cpsid	i
 8005752:	e7fe      	b.n	8005752 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d103      	bne.n	8005762 <xQueueGenericSendFromISR+0x46>
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <xQueueGenericSendFromISR+0x4a>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericSendFromISR+0x4c>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueGenericSendFromISR+0x54>
 800576c:	b672      	cpsid	i
 800576e:	e7fe      	b.n	800576e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005770:	f001 fe70 	bl	8007454 <ulSetInterruptMaskFromISR>
 8005774:	0003      	movs	r3, r0
 8005776:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <xQueueGenericSendFromISR+0x6e>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d131      	bne.n	80057ee <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800578a:	241b      	movs	r4, #27
 800578c:	193b      	adds	r3, r7, r4
 800578e:	6a3a      	ldr	r2, [r7, #32]
 8005790:	2145      	movs	r1, #69	; 0x45
 8005792:	5c52      	ldrb	r2, [r2, r1]
 8005794:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 f8e3 	bl	800596e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057a8:	193b      	adds	r3, r7, r4
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	b25b      	sxtb	r3, r3
 80057ae:	3301      	adds	r3, #1
 80057b0:	d111      	bne.n	80057d6 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d016      	beq.n	80057e8 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	3324      	adds	r3, #36	; 0x24
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 fe5e 	bl	8006480 <xTaskRemoveFromEventList>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d00f      	beq.n	80057e8 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e008      	b.n	80057e8 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057d6:	231b      	movs	r3, #27
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	b259      	sxtb	r1, r3
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	2245      	movs	r2, #69	; 0x45
 80057e6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80057e8:	2301      	movs	r3, #1
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80057ec:	e001      	b.n	80057f2 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f001 fe33 	bl	8007460 <vClearInterruptMaskFromISR>

	return xReturn;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b00b      	add	sp, #44	; 0x2c
 8005802:	bd90      	pop	{r4, r7, pc}

08005804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <xQueueReceive+0x1e>
 800581e:	b672      	cpsid	i
 8005820:	e7fe      	b.n	8005820 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <xQueueReceive+0x2c>
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <xQueueReceive+0x30>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <xQueueReceive+0x32>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <xQueueReceive+0x3a>
 800583a:	b672      	cpsid	i
 800583c:	e7fe      	b.n	800583c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800583e:	f000 ffb7 	bl	80067b0 <xTaskGetSchedulerState>
 8005842:	1e03      	subs	r3, r0, #0
 8005844:	d102      	bne.n	800584c <xQueueReceive+0x48>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <xQueueReceive+0x4c>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <xQueueReceive+0x4e>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <xQueueReceive+0x56>
 8005856:	b672      	cpsid	i
 8005858:	e7fe      	b.n	8005858 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800585a:	f001 fdd1 	bl	8007400 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01a      	beq.n	80058a0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	0011      	movs	r1, r2
 8005870:	0018      	movs	r0, r3
 8005872:	f000 f8e7 	bl	8005a44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	3310      	adds	r3, #16
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fdf8 	bl	8006480 <xTaskRemoveFromEventList>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d001      	beq.n	8005898 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005894:	f001 fda4 	bl	80073e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005898:	f001 fdc4 	bl	8007424 <vPortExitCritical>
				return pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	e062      	b.n	8005966 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058a6:	f001 fdbd 	bl	8007424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e05b      	b.n	8005966 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058b4:	2314      	movs	r3, #20
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	0018      	movs	r0, r3
 80058ba:	f000 fe3d 	bl	8006538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058be:	2301      	movs	r3, #1
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058c2:	f001 fdaf 	bl	8007424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058c6:	f000 fbe7 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058ca:	f001 fd99 	bl	8007400 <vPortEnterCritical>
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	2244      	movs	r2, #68	; 0x44
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	b25b      	sxtb	r3, r3
 80058d6:	3301      	adds	r3, #1
 80058d8:	d103      	bne.n	80058e2 <xQueueReceive+0xde>
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2244      	movs	r2, #68	; 0x44
 80058de:	2100      	movs	r1, #0
 80058e0:	5499      	strb	r1, [r3, r2]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2245      	movs	r2, #69	; 0x45
 80058e6:	5c9b      	ldrb	r3, [r3, r2]
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	3301      	adds	r3, #1
 80058ec:	d103      	bne.n	80058f6 <xQueueReceive+0xf2>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	2245      	movs	r2, #69	; 0x45
 80058f2:	2100      	movs	r1, #0
 80058f4:	5499      	strb	r1, [r3, r2]
 80058f6:	f001 fd95 	bl	8007424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058fa:	1d3a      	adds	r2, r7, #4
 80058fc:	2314      	movs	r3, #20
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	0011      	movs	r1, r2
 8005902:	0018      	movs	r0, r3
 8005904:	f000 fe2c 	bl	8006560 <xTaskCheckForTimeOut>
 8005908:	1e03      	subs	r3, r0, #0
 800590a:	d11e      	bne.n	800594a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f91c 	bl	8005b4c <prvIsQueueEmpty>
 8005914:	1e03      	subs	r3, r0, #0
 8005916:	d011      	beq.n	800593c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	3324      	adds	r3, #36	; 0x24
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	0011      	movs	r1, r2
 8005920:	0018      	movs	r0, r3
 8005922:	f000 fd69 	bl	80063f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	0018      	movs	r0, r3
 800592a:	f000 f8b1 	bl	8005a90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800592e:	f000 fbbf 	bl	80060b0 <xTaskResumeAll>
 8005932:	1e03      	subs	r3, r0, #0
 8005934:	d191      	bne.n	800585a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005936:	f001 fd53 	bl	80073e0 <vPortYield>
 800593a:	e78e      	b.n	800585a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	0018      	movs	r0, r3
 8005940:	f000 f8a6 	bl	8005a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005944:	f000 fbb4 	bl	80060b0 <xTaskResumeAll>
 8005948:	e787      	b.n	800585a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	0018      	movs	r0, r3
 800594e:	f000 f89f 	bl	8005a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005952:	f000 fbad 	bl	80060b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	0018      	movs	r0, r3
 800595a:	f000 f8f7 	bl	8005b4c <prvIsQueueEmpty>
 800595e:	1e03      	subs	r3, r0, #0
 8005960:	d100      	bne.n	8005964 <xQueueReceive+0x160>
 8005962:	e77a      	b.n	800585a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005964:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005966:	0018      	movs	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	b00a      	add	sp, #40	; 0x28
 800596c:	bd80      	pop	{r7, pc}

0800596e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b086      	sub	sp, #24
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10e      	bne.n	80059aa <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d14e      	bne.n	8005a32 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 ff25 	bl	80067e8 <xTaskPriorityDisinherit>
 800599e:	0003      	movs	r3, r0
 80059a0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	e043      	b.n	8005a32 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d119      	bne.n	80059e4 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6858      	ldr	r0, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	0019      	movs	r1, r3
 80059bc:	f001 ff90 	bl	80078e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	18d2      	adds	r2, r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d32b      	bcc.n	8005a32 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	e026      	b.n	8005a32 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68d8      	ldr	r0, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	0019      	movs	r1, r3
 80059f0:	f001 ff76 	bl	80078e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	425b      	negs	r3, r3
 80059fe:	18d2      	adds	r2, r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d207      	bcs.n	8005a20 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	425b      	negs	r3, r3
 8005a1a:	18d2      	adds	r2, r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d105      	bne.n	8005a32 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a3a:	697b      	ldr	r3, [r7, #20]
}
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	b006      	add	sp, #24
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d018      	beq.n	8005a88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	18d2      	adds	r2, r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d303      	bcc.n	8005a78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68d9      	ldr	r1, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f001 ff2c 	bl	80078e0 <memcpy>
	}
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b002      	add	sp, #8
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a98:	f001 fcb2 	bl	8007400 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a9c:	230f      	movs	r3, #15
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	2145      	movs	r1, #69	; 0x45
 8005aa4:	5c52      	ldrb	r2, [r2, r1]
 8005aa6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005aa8:	e013      	b.n	8005ad2 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3324      	adds	r3, #36	; 0x24
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f000 fce2 	bl	8006480 <xTaskRemoveFromEventList>
 8005abc:	1e03      	subs	r3, r0, #0
 8005abe:	d001      	beq.n	8005ac4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ac0:	f000 fd9e 	bl	8006600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ac4:	210f      	movs	r1, #15
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ad2:	230f      	movs	r3, #15
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	b25b      	sxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dce5      	bgt.n	8005aaa <prvUnlockQueue+0x1a>
 8005ade:	e000      	b.n	8005ae2 <prvUnlockQueue+0x52>
					break;
 8005ae0:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2245      	movs	r2, #69	; 0x45
 8005ae6:	21ff      	movs	r1, #255	; 0xff
 8005ae8:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005aea:	f001 fc9b 	bl	8007424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aee:	f001 fc87 	bl	8007400 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005af2:	230e      	movs	r3, #14
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	2144      	movs	r1, #68	; 0x44
 8005afa:	5c52      	ldrb	r2, [r2, r1]
 8005afc:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005afe:	e013      	b.n	8005b28 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d016      	beq.n	8005b36 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f000 fcb7 	bl	8006480 <xTaskRemoveFromEventList>
 8005b12:	1e03      	subs	r3, r0, #0
 8005b14:	d001      	beq.n	8005b1a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005b16:	f000 fd73 	bl	8006600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b1a:	210e      	movs	r1, #14
 8005b1c:	187b      	adds	r3, r7, r1
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b28:	230e      	movs	r3, #14
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dce5      	bgt.n	8005b00 <prvUnlockQueue+0x70>
 8005b34:	e000      	b.n	8005b38 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005b36:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2244      	movs	r2, #68	; 0x44
 8005b3c:	21ff      	movs	r1, #255	; 0xff
 8005b3e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005b40:	f001 fc70 	bl	8007424 <vPortExitCritical>
}
 8005b44:	46c0      	nop			; (mov r8, r8)
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b004      	add	sp, #16
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b54:	f001 fc54 	bl	8007400 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e001      	b.n	8005b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f001 fc5b 	bl	8007424 <vPortExitCritical>

	return xReturn;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b004      	add	sp, #16
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b80:	f001 fc3e 	bl	8007400 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d102      	bne.n	8005b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e001      	b.n	8005b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fc43 	bl	8007424 <vPortExitCritical>

	return xReturn;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b004      	add	sp, #16
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e015      	b.n	8005be4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bb8:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <vQueueAddToRegistry+0x4c>)
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	00d2      	lsls	r2, r2, #3
 8005bbe:	58d3      	ldr	r3, [r2, r3]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10c      	bne.n	8005bde <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <vQueueAddToRegistry+0x4c>)
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	00d2      	lsls	r2, r2, #3
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <vQueueAddToRegistry+0x4c>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	18d3      	adds	r3, r2, r3
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bdc:	e006      	b.n	8005bec <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	d9e6      	bls.n	8005bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b004      	add	sp, #16
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	2000096c 	.word	0x2000096c

08005bf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c08:	f001 fbfa 	bl	8007400 <vPortEnterCritical>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2244      	movs	r2, #68	; 0x44
 8005c10:	5c9b      	ldrb	r3, [r3, r2]
 8005c12:	b25b      	sxtb	r3, r3
 8005c14:	3301      	adds	r3, #1
 8005c16:	d103      	bne.n	8005c20 <vQueueWaitForMessageRestricted+0x28>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2244      	movs	r2, #68	; 0x44
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2245      	movs	r2, #69	; 0x45
 8005c24:	5c9b      	ldrb	r3, [r3, r2]
 8005c26:	b25b      	sxtb	r3, r3
 8005c28:	3301      	adds	r3, #1
 8005c2a:	d103      	bne.n	8005c34 <vQueueWaitForMessageRestricted+0x3c>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2245      	movs	r2, #69	; 0x45
 8005c30:	2100      	movs	r1, #0
 8005c32:	5499      	strb	r1, [r3, r2]
 8005c34:	f001 fbf6 	bl	8007424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 fbf3 	bl	8006434 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7ff ff1d 	bl	8005a90 <prvUnlockQueue>
	}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	b006      	add	sp, #24
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c5e:	b590      	push	{r4, r7, lr}
 8005c60:	b08d      	sub	sp, #52	; 0x34
 8005c62:	af04      	add	r7, sp, #16
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <xTaskCreateStatic+0x18>
 8005c72:	b672      	cpsid	i
 8005c74:	e7fe      	b.n	8005c74 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xTaskCreateStatic+0x22>
 8005c7c:	b672      	cpsid	i
 8005c7e:	e7fe      	b.n	8005c7e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c80:	23bc      	movs	r3, #188	; 0xbc
 8005c82:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2bbc      	cmp	r3, #188	; 0xbc
 8005c88:	d001      	beq.n	8005c8e <xTaskCreateStatic+0x30>
 8005c8a:	b672      	cpsid	i
 8005c8c:	e7fe      	b.n	8005c8c <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c8e:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d020      	beq.n	8005cd8 <xTaskCreateStatic+0x7a>
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01d      	beq.n	8005cd8 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	22b9      	movs	r2, #185	; 0xb9
 8005caa:	2102      	movs	r1, #2
 8005cac:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cae:	683c      	ldr	r4, [r7, #0]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9303      	str	r3, [sp, #12]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	2318      	movs	r3, #24
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	0023      	movs	r3, r4
 8005cca:	f000 f859 	bl	8005d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f8f5 	bl	8005ec0 <prvAddNewTaskToReadyList>
 8005cd6:	e001      	b.n	8005cdc <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
	}
 8005cde:	0018      	movs	r0, r3
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	b009      	add	sp, #36	; 0x24
 8005ce4:	bd90      	pop	{r4, r7, pc}

08005ce6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ce6:	b590      	push	{r4, r7, lr}
 8005ce8:	b08d      	sub	sp, #52	; 0x34
 8005cea:	af04      	add	r7, sp, #16
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	1dbb      	adds	r3, r7, #6
 8005cf4:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cf6:	1dbb      	adds	r3, r7, #6
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f001 fc17 	bl	8007530 <pvPortMalloc>
 8005d02:	0003      	movs	r3, r0
 8005d04:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d010      	beq.n	8005d2e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d0c:	20bc      	movs	r0, #188	; 0xbc
 8005d0e:	f001 fc0f 	bl	8007530 <pvPortMalloc>
 8005d12:	0003      	movs	r3, r0
 8005d14:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	631a      	str	r2, [r3, #48]	; 0x30
 8005d22:	e006      	b.n	8005d32 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f001 fcae 	bl	8007688 <vPortFree>
 8005d2c:	e001      	b.n	8005d32 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01a      	beq.n	8005d6e <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	22b9      	movs	r2, #185	; 0xb9
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d40:	1dbb      	adds	r3, r7, #6
 8005d42:	881a      	ldrh	r2, [r3, #0]
 8005d44:	683c      	ldr	r4, [r7, #0]
 8005d46:	68b9      	ldr	r1, [r7, #8]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	9303      	str	r3, [sp, #12]
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	9302      	str	r3, [sp, #8]
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	0023      	movs	r3, r4
 8005d5c:	f000 f810 	bl	8005d80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 f8ac 	bl	8005ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e002      	b.n	8005d74 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	425b      	negs	r3, r3
 8005d72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d74:	69bb      	ldr	r3, [r7, #24]
	}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b009      	add	sp, #36	; 0x24
 8005d7c:	bd90      	pop	{r4, r7, pc}
	...

08005d80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	001a      	movs	r2, r3
 8005d98:	21a5      	movs	r1, #165	; 0xa5
 8005d9a:	f001 fdaa 	bl	80078f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4942      	ldr	r1, [pc, #264]	; (8005eb0 <prvInitialiseNewTask+0x130>)
 8005da6:	468c      	mov	ip, r1
 8005da8:	4463      	add	r3, ip
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	18d3      	adds	r3, r2, r3
 8005dae:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2207      	movs	r2, #7
 8005db4:	4393      	bics	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2207      	movs	r2, #7
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d001      	beq.n	8005dc4 <prvInitialiseNewTask+0x44>
 8005dc0:	b672      	cpsid	i
 8005dc2:	e7fe      	b.n	8005dc2 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d020      	beq.n	8005e0c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e013      	b.n	8005df8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	18d3      	adds	r3, r2, r3
 8005dd6:	7818      	ldrb	r0, [r3, #0]
 8005dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dda:	2134      	movs	r1, #52	; 0x34
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	185b      	adds	r3, r3, r1
 8005de2:	1c02      	adds	r2, r0, #0
 8005de4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d006      	beq.n	8005e00 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	3301      	adds	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d9e8      	bls.n	8005dd0 <prvInitialiseNewTask+0x50>
 8005dfe:	e000      	b.n	8005e02 <prvInitialiseNewTask+0x82>
			{
				break;
 8005e00:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	2243      	movs	r2, #67	; 0x43
 8005e06:	2100      	movs	r1, #0
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	e003      	b.n	8005e14 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	2234      	movs	r2, #52	; 0x34
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b37      	cmp	r3, #55	; 0x37
 8005e18:	d901      	bls.n	8005e1e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e1a:	2337      	movs	r3, #55	; 0x37
 8005e1c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	3304      	adds	r3, #4
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7ff fa5b 	bl	80052f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	3318      	adds	r3, #24
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f7ff fa56 	bl	80052f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2238      	movs	r2, #56	; 0x38
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	22b4      	movs	r2, #180	; 0xb4
 8005e5e:	2100      	movs	r1, #0
 8005e60:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	22b8      	movs	r2, #184	; 0xb8
 8005e66:	2100      	movs	r1, #0
 8005e68:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	3354      	adds	r3, #84	; 0x54
 8005e6e:	2260      	movs	r2, #96	; 0x60
 8005e70:	2100      	movs	r1, #0
 8005e72:	0018      	movs	r0, r3
 8005e74:	f001 fd3d 	bl	80078f2 <memset>
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <prvInitialiseNewTask+0x134>)
 8005e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	4a0d      	ldr	r2, [pc, #52]	; (8005eb8 <prvInitialiseNewTask+0x138>)
 8005e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	4a0d      	ldr	r2, [pc, #52]	; (8005ebc <prvInitialiseNewTask+0x13c>)
 8005e88:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f001 fa19 	bl	80072c8 <pxPortInitialiseStack>
 8005e96:	0002      	movs	r2, r0
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ea8:	46c0      	nop			; (mov r8, r8)
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	b006      	add	sp, #24
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	3fffffff 	.word	0x3fffffff
 8005eb4:	08007cc0 	.word	0x08007cc0
 8005eb8:	08007ce0 	.word	0x08007ce0
 8005ebc:	08007ca0 	.word	0x08007ca0

08005ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ec8:	f001 fa9a 	bl	8007400 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ecc:	4b2a      	ldr	r3, [pc, #168]	; (8005f78 <prvAddNewTaskToReadyList+0xb8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <prvAddNewTaskToReadyList+0xb8>)
 8005ed4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005ed6:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ee4:	4b24      	ldr	r3, [pc, #144]	; (8005f78 <prvAddNewTaskToReadyList+0xb8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d110      	bne.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005eec:	f000 fba2 	bl	8006634 <prvInitialiseTaskLists>
 8005ef0:	e00d      	b.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ef2:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <prvAddNewTaskToReadyList+0xc0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005efa:	4b20      	ldr	r3, [pc, #128]	; (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d802      	bhi.n	8005f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f08:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f0e:	4b1d      	ldr	r3, [pc, #116]	; (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005f16:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <prvAddNewTaskToReadyList+0xc4>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d903      	bls.n	8005f34 <prvAddNewTaskToReadyList+0x74>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <prvAddNewTaskToReadyList+0xc8>)
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	0013      	movs	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	189b      	adds	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <prvAddNewTaskToReadyList+0xcc>)
 8005f42:	189a      	adds	r2, r3, r2
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	0019      	movs	r1, r3
 8005f4a:	0010      	movs	r0, r2
 8005f4c:	f7ff f9db 	bl	8005306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f50:	f001 fa68 	bl	8007424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <prvAddNewTaskToReadyList+0xc0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <prvAddNewTaskToReadyList+0xbc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d201      	bcs.n	8005f6e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f6a:	f001 fa39 	bl	80073e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b002      	add	sp, #8
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	20000e80 	.word	0x20000e80
 8005f7c:	200009ac 	.word	0x200009ac
 8005f80:	20000e8c 	.word	0x20000e8c
 8005f84:	20000e9c 	.word	0x20000e9c
 8005f88:	20000e88 	.word	0x20000e88
 8005f8c:	200009b0 	.word	0x200009b0

08005f90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <vTaskDelay+0x48>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <vTaskDelay+0x1e>
 8005faa:	b672      	cpsid	i
 8005fac:	e7fe      	b.n	8005fac <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005fae:	f000 f873 	bl	8006098 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f000 fe20 	bl	8006bfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fbc:	f000 f878 	bl	80060b0 <xTaskResumeAll>
 8005fc0:	0003      	movs	r3, r0
 8005fc2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005fca:	f001 fa09 	bl	80073e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b004      	add	sp, #16
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	20000ea8 	.word	0x20000ea8

08005fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b089      	sub	sp, #36	; 0x24
 8005fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fea:	003a      	movs	r2, r7
 8005fec:	1d39      	adds	r1, r7, #4
 8005fee:	2308      	movs	r3, #8
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f7ff f92e 	bl	8005254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ff8:	683c      	ldr	r4, [r7, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	491e      	ldr	r1, [pc, #120]	; (8006078 <vTaskStartScheduler+0x9c>)
 8006000:	481e      	ldr	r0, [pc, #120]	; (800607c <vTaskStartScheduler+0xa0>)
 8006002:	9202      	str	r2, [sp, #8]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	2300      	movs	r3, #0
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	0022      	movs	r2, r4
 800600e:	f7ff fe26 	bl	8005c5e <xTaskCreateStatic>
 8006012:	0002      	movs	r2, r0
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <vTaskStartScheduler+0xa4>)
 8006016:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006018:	4b19      	ldr	r3, [pc, #100]	; (8006080 <vTaskStartScheduler+0xa4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e001      	b.n	800602a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d103      	bne.n	8006038 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006030:	f000 fe38 	bl	8006ca4 <xTimerCreateTimerTask>
 8006034:	0003      	movs	r3, r0
 8006036:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d113      	bne.n	8006066 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800603e:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <vTaskStartScheduler+0xa8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3354      	adds	r3, #84	; 0x54
 8006046:	001a      	movs	r2, r3
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <vTaskStartScheduler+0xac>)
 800604a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800604c:	4b0f      	ldr	r3, [pc, #60]	; (800608c <vTaskStartScheduler+0xb0>)
 800604e:	2201      	movs	r2, #1
 8006050:	4252      	negs	r2, r2
 8006052:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <vTaskStartScheduler+0xb4>)
 8006056:	2201      	movs	r2, #1
 8006058:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800605a:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <vTaskStartScheduler+0xb8>)
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006060:	f001 f99a 	bl	8007398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006064:	e004      	b.n	8006070 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	d101      	bne.n	8006070 <vTaskStartScheduler+0x94>
 800606c:	b672      	cpsid	i
 800606e:	e7fe      	b.n	800606e <vTaskStartScheduler+0x92>
}
 8006070:	46c0      	nop			; (mov r8, r8)
 8006072:	46bd      	mov	sp, r7
 8006074:	b005      	add	sp, #20
 8006076:	bd90      	pop	{r4, r7, pc}
 8006078:	08007aec 	.word	0x08007aec
 800607c:	08006615 	.word	0x08006615
 8006080:	20000ea4 	.word	0x20000ea4
 8006084:	200009ac 	.word	0x200009ac
 8006088:	20000014 	.word	0x20000014
 800608c:	20000ea0 	.word	0x20000ea0
 8006090:	20000e8c 	.word	0x20000e8c
 8006094:	20000e84 	.word	0x20000e84

08006098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800609c:	4b03      	ldr	r3, [pc, #12]	; (80060ac <vTaskSuspendAll+0x14>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	4b02      	ldr	r3, [pc, #8]	; (80060ac <vTaskSuspendAll+0x14>)
 80060a4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000ea8 	.word	0x20000ea8

080060b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060be:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <xTaskResumeAll+0xf8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <xTaskResumeAll+0x1a>
 80060c6:	b672      	cpsid	i
 80060c8:	e7fe      	b.n	80060c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060ca:	f001 f999 	bl	8007400 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <xTaskResumeAll+0xf8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	1e5a      	subs	r2, r3, #1
 80060d4:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <xTaskResumeAll+0xf8>)
 80060d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d8:	4b33      	ldr	r3, [pc, #204]	; (80061a8 <xTaskResumeAll+0xf8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d15b      	bne.n	8006198 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060e0:	4b32      	ldr	r3, [pc, #200]	; (80061ac <xTaskResumeAll+0xfc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d057      	beq.n	8006198 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e8:	e02f      	b.n	800614a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <xTaskResumeAll+0x100>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3318      	adds	r3, #24
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7ff f95d 	bl	80053b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3304      	adds	r3, #4
 8006100:	0018      	movs	r0, r3
 8006102:	f7ff f958 	bl	80053b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <xTaskResumeAll+0x104>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d903      	bls.n	800611a <xTaskResumeAll+0x6a>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <xTaskResumeAll+0x104>)
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611e:	0013      	movs	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	189b      	adds	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a24      	ldr	r2, [pc, #144]	; (80061b8 <xTaskResumeAll+0x108>)
 8006128:	189a      	adds	r2, r3, r2
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3304      	adds	r3, #4
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f7ff f8e8 	bl	8005306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <xTaskResumeAll+0x10c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006144:	4b1e      	ldr	r3, [pc, #120]	; (80061c0 <xTaskResumeAll+0x110>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800614a:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <xTaskResumeAll+0x100>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1cb      	bne.n	80060ea <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006158:	f000 fb0c 	bl	8006774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800615c:	4b19      	ldr	r3, [pc, #100]	; (80061c4 <xTaskResumeAll+0x114>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00f      	beq.n	8006188 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006168:	f000 f83c 	bl	80061e4 <xTaskIncrementTick>
 800616c:	1e03      	subs	r3, r0, #0
 800616e:	d002      	beq.n	8006176 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <xTaskResumeAll+0x110>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f2      	bne.n	8006168 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <xTaskResumeAll+0x114>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <xTaskResumeAll+0x110>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006194:	f001 f924 	bl	80073e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006198:	f001 f944 	bl	8007424 <vPortExitCritical>

	return xAlreadyYielded;
 800619c:	68bb      	ldr	r3, [r7, #8]
}
 800619e:	0018      	movs	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	b004      	add	sp, #16
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	20000ea8 	.word	0x20000ea8
 80061ac:	20000e80 	.word	0x20000e80
 80061b0:	20000e40 	.word	0x20000e40
 80061b4:	20000e88 	.word	0x20000e88
 80061b8:	200009b0 	.word	0x200009b0
 80061bc:	200009ac 	.word	0x200009ac
 80061c0:	20000e94 	.word	0x20000e94
 80061c4:	20000e90 	.word	0x20000e90

080061c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061ce:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <xTaskGetTickCount+0x18>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061d4:	687b      	ldr	r3, [r7, #4]
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b002      	add	sp, #8
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	20000e84 	.word	0x20000e84

080061e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ee:	4b4a      	ldr	r3, [pc, #296]	; (8006318 <xTaskIncrementTick+0x134>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d000      	beq.n	80061f8 <xTaskIncrementTick+0x14>
 80061f6:	e084      	b.n	8006302 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061f8:	4b48      	ldr	r3, [pc, #288]	; (800631c <xTaskIncrementTick+0x138>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006200:	4b46      	ldr	r3, [pc, #280]	; (800631c <xTaskIncrementTick+0x138>)
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d117      	bne.n	800623c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800620c:	4b44      	ldr	r3, [pc, #272]	; (8006320 <xTaskIncrementTick+0x13c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <xTaskIncrementTick+0x36>
 8006216:	b672      	cpsid	i
 8006218:	e7fe      	b.n	8006218 <xTaskIncrementTick+0x34>
 800621a:	4b41      	ldr	r3, [pc, #260]	; (8006320 <xTaskIncrementTick+0x13c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	4b40      	ldr	r3, [pc, #256]	; (8006324 <xTaskIncrementTick+0x140>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4b3e      	ldr	r3, [pc, #248]	; (8006320 <xTaskIncrementTick+0x13c>)
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <xTaskIncrementTick+0x140>)
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	4b3e      	ldr	r3, [pc, #248]	; (8006328 <xTaskIncrementTick+0x144>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	4b3c      	ldr	r3, [pc, #240]	; (8006328 <xTaskIncrementTick+0x144>)
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f000 fa9c 	bl	8006774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <xTaskIncrementTick+0x148>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d349      	bcc.n	80062da <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006246:	4b36      	ldr	r3, [pc, #216]	; (8006320 <xTaskIncrementTick+0x13c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006250:	4b36      	ldr	r3, [pc, #216]	; (800632c <xTaskIncrementTick+0x148>)
 8006252:	2201      	movs	r2, #1
 8006254:	4252      	negs	r2, r2
 8006256:	601a      	str	r2, [r3, #0]
					break;
 8006258:	e03f      	b.n	80062da <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625a:	4b31      	ldr	r3, [pc, #196]	; (8006320 <xTaskIncrementTick+0x13c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d203      	bcs.n	800627a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <xTaskIncrementTick+0x148>)
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006278:	e02f      	b.n	80062da <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	3304      	adds	r3, #4
 800627e:	0018      	movs	r0, r3
 8006280:	f7ff f899 	bl	80053b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	3318      	adds	r3, #24
 8006290:	0018      	movs	r0, r3
 8006292:	f7ff f890 	bl	80053b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	4b25      	ldr	r3, [pc, #148]	; (8006330 <xTaskIncrementTick+0x14c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d903      	bls.n	80062aa <xTaskIncrementTick+0xc6>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a6:	4b22      	ldr	r3, [pc, #136]	; (8006330 <xTaskIncrementTick+0x14c>)
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ae:	0013      	movs	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <xTaskIncrementTick+0x150>)
 80062b8:	189a      	adds	r2, r3, r2
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3304      	adds	r3, #4
 80062be:	0019      	movs	r1, r3
 80062c0:	0010      	movs	r0, r2
 80062c2:	f7ff f820 	bl	8005306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ca:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <xTaskIncrementTick+0x154>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d3b8      	bcc.n	8006246 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80062d4:	2301      	movs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d8:	e7b5      	b.n	8006246 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062da:	4b17      	ldr	r3, [pc, #92]	; (8006338 <xTaskIncrementTick+0x154>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4914      	ldr	r1, [pc, #80]	; (8006334 <xTaskIncrementTick+0x150>)
 80062e2:	0013      	movs	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	189b      	adds	r3, r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	585b      	ldr	r3, [r3, r1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d901      	bls.n	80062f4 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80062f0:	2301      	movs	r3, #1
 80062f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062f4:	4b11      	ldr	r3, [pc, #68]	; (800633c <xTaskIncrementTick+0x158>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	e004      	b.n	800630c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <xTaskIncrementTick+0x15c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <xTaskIncrementTick+0x15c>)
 800630a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800630c:	697b      	ldr	r3, [r7, #20]
}
 800630e:	0018      	movs	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	b006      	add	sp, #24
 8006314:	bd80      	pop	{r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	20000ea8 	.word	0x20000ea8
 800631c:	20000e84 	.word	0x20000e84
 8006320:	20000e38 	.word	0x20000e38
 8006324:	20000e3c 	.word	0x20000e3c
 8006328:	20000e98 	.word	0x20000e98
 800632c:	20000ea0 	.word	0x20000ea0
 8006330:	20000e88 	.word	0x20000e88
 8006334:	200009b0 	.word	0x200009b0
 8006338:	200009ac 	.word	0x200009ac
 800633c:	20000e94 	.word	0x20000e94
 8006340:	20000e90 	.word	0x20000e90

08006344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800634a:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <vTaskSwitchContext+0x9c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <vTaskSwitchContext+0xa0>)
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006358:	e03d      	b.n	80063d6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800635a:	4b22      	ldr	r3, [pc, #136]	; (80063e4 <vTaskSwitchContext+0xa0>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <vTaskSwitchContext+0xa4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	e007      	b.n	8006378 <vTaskSwitchContext+0x34>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <vTaskSwitchContext+0x2e>
 800636e:	b672      	cpsid	i
 8006370:	e7fe      	b.n	8006370 <vTaskSwitchContext+0x2c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3b01      	subs	r3, #1
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	491c      	ldr	r1, [pc, #112]	; (80063ec <vTaskSwitchContext+0xa8>)
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	0013      	movs	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	189b      	adds	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	585b      	ldr	r3, [r3, r1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0ee      	beq.n	8006368 <vTaskSwitchContext+0x24>
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	0013      	movs	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	189b      	adds	r3, r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4a15      	ldr	r2, [pc, #84]	; (80063ec <vTaskSwitchContext+0xa8>)
 8006396:	189b      	adds	r3, r3, r2
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	605a      	str	r2, [r3, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d104      	bne.n	80063ba <vTaskSwitchContext+0x76>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <vTaskSwitchContext+0xac>)
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <vTaskSwitchContext+0xa4>)
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <vTaskSwitchContext+0xac>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3354      	adds	r3, #84	; 0x54
 80063d0:	001a      	movs	r2, r3
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <vTaskSwitchContext+0xb0>)
 80063d4:	601a      	str	r2, [r3, #0]
}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	46bd      	mov	sp, r7
 80063da:	b002      	add	sp, #8
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	20000ea8 	.word	0x20000ea8
 80063e4:	20000e94 	.word	0x20000e94
 80063e8:	20000e88 	.word	0x20000e88
 80063ec:	200009b0 	.word	0x200009b0
 80063f0:	200009ac 	.word	0x200009ac
 80063f4:	20000014 	.word	0x20000014

080063f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <vTaskPlaceOnEventList+0x14>
 8006408:	b672      	cpsid	i
 800640a:	e7fe      	b.n	800640a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800640c:	4b08      	ldr	r3, [pc, #32]	; (8006430 <vTaskPlaceOnEventList+0x38>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3318      	adds	r3, #24
 8006412:	001a      	movs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	0011      	movs	r1, r2
 8006418:	0018      	movs	r0, r3
 800641a:	f7fe ff96 	bl	800534a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	0018      	movs	r0, r3
 8006424:	f000 fbea 	bl	8006bfc <prvAddCurrentTaskToDelayedList>
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	b002      	add	sp, #8
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200009ac 	.word	0x200009ac

08006434 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <vTaskPlaceOnEventListRestricted+0x16>
 8006446:	b672      	cpsid	i
 8006448:	e7fe      	b.n	8006448 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <vTaskPlaceOnEventListRestricted+0x48>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3318      	adds	r3, #24
 8006450:	001a      	movs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0011      	movs	r1, r2
 8006456:	0018      	movs	r0, r3
 8006458:	f7fe ff55 	bl	8005306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006462:	2301      	movs	r3, #1
 8006464:	425b      	negs	r3, r3
 8006466:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fbc4 	bl	8006bfc <prvAddCurrentTaskToDelayedList>
	}
 8006474:	46c0      	nop			; (mov r8, r8)
 8006476:	46bd      	mov	sp, r7
 8006478:	b004      	add	sp, #16
 800647a:	bd80      	pop	{r7, pc}
 800647c:	200009ac 	.word	0x200009ac

08006480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xTaskRemoveFromEventList+0x1a>
 8006496:	b672      	cpsid	i
 8006498:	e7fe      	b.n	8006498 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3318      	adds	r3, #24
 800649e:	0018      	movs	r0, r3
 80064a0:	f7fe ff89 	bl	80053b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a4:	4b1e      	ldr	r3, [pc, #120]	; (8006520 <xTaskRemoveFromEventList+0xa0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11d      	bne.n	80064e8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3304      	adds	r3, #4
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fe ff80 	bl	80053b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <xTaskRemoveFromEventList+0xa4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d903      	bls.n	80064ca <xTaskRemoveFromEventList+0x4a>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <xTaskRemoveFromEventList+0xa4>)
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	0013      	movs	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	189b      	adds	r3, r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a14      	ldr	r2, [pc, #80]	; (8006528 <xTaskRemoveFromEventList+0xa8>)
 80064d8:	189a      	adds	r2, r3, r2
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	3304      	adds	r3, #4
 80064de:	0019      	movs	r1, r3
 80064e0:	0010      	movs	r0, r2
 80064e2:	f7fe ff10 	bl	8005306 <vListInsertEnd>
 80064e6:	e007      	b.n	80064f8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3318      	adds	r3, #24
 80064ec:	001a      	movs	r2, r3
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <xTaskRemoveFromEventList+0xac>)
 80064f0:	0011      	movs	r1, r2
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7fe ff07 	bl	8005306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <xTaskRemoveFromEventList+0xb0>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	429a      	cmp	r2, r3
 8006504:	d905      	bls.n	8006512 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006506:	2301      	movs	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <xTaskRemoveFromEventList+0xb4>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	e001      	b.n	8006516 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006516:	68fb      	ldr	r3, [r7, #12]
}
 8006518:	0018      	movs	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	b004      	add	sp, #16
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000ea8 	.word	0x20000ea8
 8006524:	20000e88 	.word	0x20000e88
 8006528:	200009b0 	.word	0x200009b0
 800652c:	20000e40 	.word	0x20000e40
 8006530:	200009ac 	.word	0x200009ac
 8006534:	20000e94 	.word	0x20000e94

08006538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <vTaskInternalSetTimeOutState+0x20>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <vTaskInternalSetTimeOutState+0x24>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000e98 	.word	0x20000e98
 800655c:	20000e84 	.word	0x20000e84

08006560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <xTaskCheckForTimeOut+0x14>
 8006570:	b672      	cpsid	i
 8006572:	e7fe      	b.n	8006572 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xTaskCheckForTimeOut+0x1e>
 800657a:	b672      	cpsid	i
 800657c:	e7fe      	b.n	800657c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800657e:	f000 ff3f 	bl	8007400 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006582:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <xTaskCheckForTimeOut+0x98>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	d102      	bne.n	80065a0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e024      	b.n	80065ea <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b15      	ldr	r3, [pc, #84]	; (80065fc <xTaskCheckForTimeOut+0x9c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d007      	beq.n	80065bc <xTaskCheckForTimeOut+0x5c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d302      	bcc.n	80065bc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065b6:	2301      	movs	r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e016      	b.n	80065ea <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d20c      	bcs.n	80065e0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1ad2      	subs	r2, r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff ffaf 	bl	8006538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e004      	b.n	80065ea <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80065ea:	f000 ff1b 	bl	8007424 <vPortExitCritical>

	return xReturn;
 80065ee:	697b      	ldr	r3, [r7, #20]
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b006      	add	sp, #24
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000e84 	.word	0x20000e84
 80065fc:	20000e98 	.word	0x20000e98

08006600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <vTaskMissedYield+0x10>)
 8006606:	2201      	movs	r2, #1
 8006608:	601a      	str	r2, [r3, #0]
}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000e94 	.word	0x20000e94

08006614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800661c:	f000 f84e 	bl	80066bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006620:	4b03      	ldr	r3, [pc, #12]	; (8006630 <prvIdleTask+0x1c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d9f9      	bls.n	800661c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006628:	f000 feda 	bl	80073e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800662c:	e7f6      	b.n	800661c <prvIdleTask+0x8>
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	200009b0 	.word	0x200009b0

08006634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	e00c      	b.n	800665a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	0013      	movs	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	189b      	adds	r3, r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4a14      	ldr	r2, [pc, #80]	; (800669c <prvInitialiseTaskLists+0x68>)
 800664c:	189b      	adds	r3, r3, r2
 800664e:	0018      	movs	r0, r3
 8006650:	f7fe fe30 	bl	80052b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3301      	adds	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b37      	cmp	r3, #55	; 0x37
 800665e:	d9ef      	bls.n	8006640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <prvInitialiseTaskLists+0x6c>)
 8006662:	0018      	movs	r0, r3
 8006664:	f7fe fe26 	bl	80052b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <prvInitialiseTaskLists+0x70>)
 800666a:	0018      	movs	r0, r3
 800666c:	f7fe fe22 	bl	80052b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006670:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <prvInitialiseTaskLists+0x74>)
 8006672:	0018      	movs	r0, r3
 8006674:	f7fe fe1e 	bl	80052b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006678:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <prvInitialiseTaskLists+0x78>)
 800667a:	0018      	movs	r0, r3
 800667c:	f7fe fe1a 	bl	80052b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006680:	4b0b      	ldr	r3, [pc, #44]	; (80066b0 <prvInitialiseTaskLists+0x7c>)
 8006682:	0018      	movs	r0, r3
 8006684:	f7fe fe16 	bl	80052b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006688:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <prvInitialiseTaskLists+0x80>)
 800668a:	4a05      	ldr	r2, [pc, #20]	; (80066a0 <prvInitialiseTaskLists+0x6c>)
 800668c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <prvInitialiseTaskLists+0x84>)
 8006690:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <prvInitialiseTaskLists+0x70>)
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200009b0 	.word	0x200009b0
 80066a0:	20000e10 	.word	0x20000e10
 80066a4:	20000e24 	.word	0x20000e24
 80066a8:	20000e40 	.word	0x20000e40
 80066ac:	20000e54 	.word	0x20000e54
 80066b0:	20000e6c 	.word	0x20000e6c
 80066b4:	20000e38 	.word	0x20000e38
 80066b8:	20000e3c 	.word	0x20000e3c

080066bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c2:	e01a      	b.n	80066fa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80066c4:	f000 fe9c 	bl	8007400 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066c8:	4b10      	ldr	r3, [pc, #64]	; (800670c <prvCheckTasksWaitingTermination+0x50>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	0018      	movs	r0, r3
 80066d6:	f7fe fe6e 	bl	80053b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	1e5a      	subs	r2, r3, #1
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066e2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066ec:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80066ee:	f000 fe99 	bl	8007424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 f80f 	bl	8006718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e0      	bne.n	80066c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	46c0      	nop			; (mov r8, r8)
 8006706:	46bd      	mov	sp, r7
 8006708:	b002      	add	sp, #8
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000e54 	.word	0x20000e54
 8006710:	20000e80 	.word	0x20000e80
 8006714:	20000e68 	.word	0x20000e68

08006718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3354      	adds	r3, #84	; 0x54
 8006724:	0018      	movs	r0, r3
 8006726:	f001 f8f9 	bl	800791c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	22b9      	movs	r2, #185	; 0xb9
 800672e:	5c9b      	ldrb	r3, [r3, r2]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	0018      	movs	r0, r3
 800673a:	f000 ffa5 	bl	8007688 <vPortFree>
				vPortFree( pxTCB );
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	0018      	movs	r0, r3
 8006742:	f000 ffa1 	bl	8007688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006746:	e010      	b.n	800676a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	22b9      	movs	r2, #185	; 0xb9
 800674c:	5c9b      	ldrb	r3, [r3, r2]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d104      	bne.n	800675c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f000 ff97 	bl	8007688 <vPortFree>
	}
 800675a:	e006      	b.n	800676a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	22b9      	movs	r2, #185	; 0xb9
 8006760:	5c9b      	ldrb	r3, [r3, r2]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d001      	beq.n	800676a <prvDeleteTCB+0x52>
 8006766:	b672      	cpsid	i
 8006768:	e7fe      	b.n	8006768 <prvDeleteTCB+0x50>
	}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	46bd      	mov	sp, r7
 800676e:	b002      	add	sp, #8
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677a:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <prvResetNextTaskUnblockTime+0x34>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <prvResetNextTaskUnblockTime+0x38>)
 8006786:	2201      	movs	r2, #1
 8006788:	4252      	negs	r2, r2
 800678a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800678c:	e008      	b.n	80067a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678e:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <prvResetNextTaskUnblockTime+0x34>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <prvResetNextTaskUnblockTime+0x38>)
 800679e:	601a      	str	r2, [r3, #0]
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b002      	add	sp, #8
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000e38 	.word	0x20000e38
 80067ac:	20000ea0 	.word	0x20000ea0

080067b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067b6:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <xTaskGetSchedulerState+0x30>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067be:	2301      	movs	r3, #1
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	e008      	b.n	80067d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <xTaskGetSchedulerState+0x34>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d102      	bne.n	80067d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067cc:	2302      	movs	r3, #2
 80067ce:	607b      	str	r3, [r7, #4]
 80067d0:	e001      	b.n	80067d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067d6:	687b      	ldr	r3, [r7, #4]
	}
 80067d8:	0018      	movs	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	b002      	add	sp, #8
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000e8c 	.word	0x20000e8c
 80067e4:	20000ea8 	.word	0x20000ea8

080067e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d044      	beq.n	8006888 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067fe:	4b25      	ldr	r3, [pc, #148]	; (8006894 <xTaskPriorityDisinherit+0xac>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d001      	beq.n	800680c <xTaskPriorityDisinherit+0x24>
 8006808:	b672      	cpsid	i
 800680a:	e7fe      	b.n	800680a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <xTaskPriorityDisinherit+0x30>
 8006814:	b672      	cpsid	i
 8006816:	e7fe      	b.n	8006816 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	1e5a      	subs	r2, r3, #1
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	429a      	cmp	r2, r3
 800682c:	d02c      	beq.n	8006888 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006832:	2b00      	cmp	r3, #0
 8006834:	d128      	bne.n	8006888 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3304      	adds	r3, #4
 800683a:	0018      	movs	r0, r3
 800683c:	f7fe fdbb 	bl	80053b6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	2238      	movs	r2, #56	; 0x38
 800684e:	1ad2      	subs	r2, r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <xTaskPriorityDisinherit+0xb0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d903      	bls.n	8006868 <xTaskPriorityDisinherit+0x80>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <xTaskPriorityDisinherit+0xb0>)
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	0013      	movs	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	189b      	adds	r3, r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4a09      	ldr	r2, [pc, #36]	; (800689c <xTaskPriorityDisinherit+0xb4>)
 8006876:	189a      	adds	r2, r3, r2
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	3304      	adds	r3, #4
 800687c:	0019      	movs	r1, r3
 800687e:	0010      	movs	r0, r2
 8006880:	f7fe fd41 	bl	8005306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006888:	68fb      	ldr	r3, [r7, #12]
	}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b004      	add	sp, #16
 8006890:	bd80      	pop	{r7, pc}
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	200009ac 	.word	0x200009ac
 8006898:	20000e88 	.word	0x20000e88
 800689c:	200009b0 	.word	0x200009b0

080068a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80068ae:	f000 fda7 	bl	8007400 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80068b2:	4b26      	ldr	r3, [pc, #152]	; (800694c <xTaskNotifyWait+0xac>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	22b8      	movs	r2, #184	; 0xb8
 80068b8:	5c9b      	ldrb	r3, [r3, r2]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d017      	beq.n	80068f0 <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80068c0:	4b22      	ldr	r3, [pc, #136]	; (800694c <xTaskNotifyWait+0xac>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	22b4      	movs	r2, #180	; 0xb4
 80068c6:	589a      	ldr	r2, [r3, r2]
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	43c9      	mvns	r1, r1
 80068cc:	400a      	ands	r2, r1
 80068ce:	21b4      	movs	r1, #180	; 0xb4
 80068d0:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80068d2:	4b1e      	ldr	r3, [pc, #120]	; (800694c <xTaskNotifyWait+0xac>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	22b8      	movs	r2, #184	; 0xb8
 80068d8:	2101      	movs	r1, #1
 80068da:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d006      	beq.n	80068f0 <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2101      	movs	r1, #1
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 f988 	bl	8006bfc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80068ec:	f000 fd78 	bl	80073e0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80068f0:	f000 fd98 	bl	8007424 <vPortExitCritical>

		taskENTER_CRITICAL();
 80068f4:	f000 fd84 	bl	8007400 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <xTaskNotifyWait+0xac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	22b4      	movs	r2, #180	; 0xb4
 8006904:	589a      	ldr	r2, [r3, r2]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800690a:	4b10      	ldr	r3, [pc, #64]	; (800694c <xTaskNotifyWait+0xac>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	22b8      	movs	r2, #184	; 0xb8
 8006910:	5c9b      	ldrb	r3, [r3, r2]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d002      	beq.n	800691e <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e00a      	b.n	8006934 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800691e:	4b0b      	ldr	r3, [pc, #44]	; (800694c <xTaskNotifyWait+0xac>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	22b4      	movs	r2, #180	; 0xb4
 8006924:	589a      	ldr	r2, [r3, r2]
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	43c9      	mvns	r1, r1
 800692a:	400a      	ands	r2, r1
 800692c:	21b4      	movs	r1, #180	; 0xb4
 800692e:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <xTaskNotifyWait+0xac>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	22b8      	movs	r2, #184	; 0xb8
 800693a:	2100      	movs	r1, #0
 800693c:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 800693e:	f000 fd71 	bl	8007424 <vPortExitCritical>

		return xReturn;
 8006942:	697b      	ldr	r3, [r7, #20]
	}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b006      	add	sp, #24
 800694a:	bd80      	pop	{r7, pc}
 800694c:	200009ac 	.word	0x200009ac

08006950 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	1dfb      	adds	r3, r7, #7
 800695e:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006960:	2301      	movs	r3, #1
 8006962:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <xTaskGenericNotify+0x1e>
 800696a:	b672      	cpsid	i
 800696c:	e7fe      	b.n	800696c <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8006972:	f000 fd45 	bl	8007400 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d004      	beq.n	8006986 <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	22b4      	movs	r2, #180	; 0xb4
 8006980:	589a      	ldr	r2, [r3, r2]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006986:	2317      	movs	r3, #23
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	21b8      	movs	r1, #184	; 0xb8
 800698e:	5c52      	ldrb	r2, [r2, r1]
 8006990:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	22b8      	movs	r2, #184	; 0xb8
 8006996:	2102      	movs	r1, #2
 8006998:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800699a:	1dfb      	adds	r3, r7, #7
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d827      	bhi.n	80069f2 <xTaskGenericNotify+0xa2>
 80069a2:	009a      	lsls	r2, r3, #2
 80069a4:	4b34      	ldr	r3, [pc, #208]	; (8006a78 <xTaskGenericNotify+0x128>)
 80069a6:	18d3      	adds	r3, r2, r3
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	22b4      	movs	r2, #180	; 0xb4
 80069b0:	589a      	ldr	r2, [r3, r2]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	431a      	orrs	r2, r3
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	21b4      	movs	r1, #180	; 0xb4
 80069ba:	505a      	str	r2, [r3, r1]
					break;
 80069bc:	e023      	b.n	8006a06 <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	22b4      	movs	r2, #180	; 0xb4
 80069c2:	589b      	ldr	r3, [r3, r2]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	21b4      	movs	r1, #180	; 0xb4
 80069ca:	505a      	str	r2, [r3, r1]
					break;
 80069cc:	e01b      	b.n	8006a06 <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	21b4      	movs	r1, #180	; 0xb4
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	505a      	str	r2, [r3, r1]
					break;
 80069d6:	e016      	b.n	8006a06 <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069d8:	2317      	movs	r3, #23
 80069da:	18fb      	adds	r3, r7, r3
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d004      	beq.n	80069ec <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	21b4      	movs	r1, #180	; 0xb4
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80069ea:	e00c      	b.n	8006a06 <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
					break;
 80069f0:	e009      	b.n	8006a06 <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	22b4      	movs	r2, #180	; 0xb4
 80069f6:	589b      	ldr	r3, [r3, r2]
 80069f8:	3301      	adds	r3, #1
 80069fa:	d003      	beq.n	8006a04 <xTaskGenericNotify+0xb4>
 80069fc:	b672      	cpsid	i
 80069fe:	e7fe      	b.n	80069fe <xTaskGenericNotify+0xae>
					break;
 8006a00:	46c0      	nop			; (mov r8, r8)
 8006a02:	e000      	b.n	8006a06 <xTaskGenericNotify+0xb6>

					break;
 8006a04:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a06:	2317      	movs	r3, #23
 8006a08:	18fb      	adds	r3, r7, r3
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d12b      	bne.n	8006a68 <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	3304      	adds	r3, #4
 8006a14:	0018      	movs	r0, r3
 8006a16:	f7fe fcce 	bl	80053b6 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <xTaskGenericNotify+0x12c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d903      	bls.n	8006a2e <xTaskGenericNotify+0xde>
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <xTaskGenericNotify+0x12c>)
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	0013      	movs	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	189b      	adds	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4a11      	ldr	r2, [pc, #68]	; (8006a80 <xTaskGenericNotify+0x130>)
 8006a3c:	189a      	adds	r2, r3, r2
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	3304      	adds	r3, #4
 8006a42:	0019      	movs	r1, r3
 8006a44:	0010      	movs	r0, r2
 8006a46:	f7fe fc5e 	bl	8005306 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <xTaskGenericNotify+0x106>
 8006a52:	b672      	cpsid	i
 8006a54:	e7fe      	b.n	8006a54 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <xTaskGenericNotify+0x134>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d901      	bls.n	8006a68 <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006a64:	f000 fcbc 	bl	80073e0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006a68:	f000 fcdc 	bl	8007424 <vPortExitCritical>

		return xReturn;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
	}
 8006a6e:	0018      	movs	r0, r3
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b008      	add	sp, #32
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	08007c50 	.word	0x08007c50
 8006a7c:	20000e88 	.word	0x20000e88
 8006a80:	200009b0 	.word	0x200009b0
 8006a84:	200009ac 	.word	0x200009ac

08006a88 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	1dfb      	adds	r3, r7, #7
 8006a96:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <xTaskGenericNotifyFromISR+0x1e>
 8006aa2:	b672      	cpsid	i
 8006aa4:	e7fe      	b.n	8006aa4 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aaa:	f000 fcd3 	bl	8007454 <ulSetInterruptMaskFromISR>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	22b4      	movs	r2, #180	; 0xb4
 8006abc:	589a      	ldr	r2, [r3, r2]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006ac2:	2313      	movs	r3, #19
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	21b8      	movs	r1, #184	; 0xb8
 8006aca:	5c52      	ldrb	r2, [r2, r1]
 8006acc:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	22b8      	movs	r2, #184	; 0xb8
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8006ad6:	1dfb      	adds	r3, r7, #7
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d827      	bhi.n	8006b2e <xTaskGenericNotifyFromISR+0xa6>
 8006ade:	009a      	lsls	r2, r3, #2
 8006ae0:	4b3f      	ldr	r3, [pc, #252]	; (8006be0 <xTaskGenericNotifyFromISR+0x158>)
 8006ae2:	18d3      	adds	r3, r2, r3
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	22b4      	movs	r2, #180	; 0xb4
 8006aec:	589a      	ldr	r2, [r3, r2]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	21b4      	movs	r1, #180	; 0xb4
 8006af6:	505a      	str	r2, [r3, r1]
					break;
 8006af8:	e023      	b.n	8006b42 <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	22b4      	movs	r2, #180	; 0xb4
 8006afe:	589b      	ldr	r3, [r3, r2]
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	21b4      	movs	r1, #180	; 0xb4
 8006b06:	505a      	str	r2, [r3, r1]
					break;
 8006b08:	e01b      	b.n	8006b42 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	21b4      	movs	r1, #180	; 0xb4
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	505a      	str	r2, [r3, r1]
					break;
 8006b12:	e016      	b.n	8006b42 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b14:	2313      	movs	r3, #19
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d004      	beq.n	8006b28 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	21b4      	movs	r1, #180	; 0xb4
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006b26:	e00c      	b.n	8006b42 <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61fb      	str	r3, [r7, #28]
					break;
 8006b2c:	e009      	b.n	8006b42 <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	22b4      	movs	r2, #180	; 0xb4
 8006b32:	589b      	ldr	r3, [r3, r2]
 8006b34:	3301      	adds	r3, #1
 8006b36:	d003      	beq.n	8006b40 <xTaskGenericNotifyFromISR+0xb8>
 8006b38:	b672      	cpsid	i
 8006b3a:	e7fe      	b.n	8006b3a <xTaskGenericNotifyFromISR+0xb2>
					break;
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	e000      	b.n	8006b42 <xTaskGenericNotifyFromISR+0xba>
					break;
 8006b40:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b42:	2313      	movs	r3, #19
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d13f      	bne.n	8006bcc <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <xTaskGenericNotifyFromISR+0xd0>
 8006b54:	b672      	cpsid	i
 8006b56:	e7fe      	b.n	8006b56 <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b58:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <xTaskGenericNotifyFromISR+0x15c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11d      	bne.n	8006b9c <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	3304      	adds	r3, #4
 8006b64:	0018      	movs	r0, r3
 8006b66:	f7fe fc26 	bl	80053b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <xTaskGenericNotifyFromISR+0x160>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d903      	bls.n	8006b7e <xTaskGenericNotifyFromISR+0xf6>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <xTaskGenericNotifyFromISR+0x160>)
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b82:	0013      	movs	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	189b      	adds	r3, r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4a18      	ldr	r2, [pc, #96]	; (8006bec <xTaskGenericNotifyFromISR+0x164>)
 8006b8c:	189a      	adds	r2, r3, r2
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	3304      	adds	r3, #4
 8006b92:	0019      	movs	r1, r3
 8006b94:	0010      	movs	r0, r2
 8006b96:	f7fe fbb6 	bl	8005306 <vListInsertEnd>
 8006b9a:	e007      	b.n	8006bac <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	001a      	movs	r2, r3
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <xTaskGenericNotifyFromISR+0x168>)
 8006ba4:	0011      	movs	r1, r2
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7fe fbad 	bl	8005306 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <xTaskGenericNotifyFromISR+0x16c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d908      	bls.n	8006bcc <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <xTaskGenericNotifyFromISR+0x170>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fc46 	bl	8007460 <vClearInterruptMaskFromISR>

		return xReturn;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
	}
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b008      	add	sp, #32
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	08007c64 	.word	0x08007c64
 8006be4:	20000ea8 	.word	0x20000ea8
 8006be8:	20000e88 	.word	0x20000e88
 8006bec:	200009b0 	.word	0x200009b0
 8006bf0:	20000e40 	.word	0x20000e40
 8006bf4:	200009ac 	.word	0x200009ac
 8006bf8:	20000e94 	.word	0x20000e94

08006bfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c06:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x90>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c0c:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3304      	adds	r3, #4
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7fe fbcf 	bl	80053b6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	d10b      	bne.n	8006c36 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c24:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c2c:	0011      	movs	r1, r2
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7fe fb69 	bl	8005306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c34:	e026      	b.n	8006c84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	18d3      	adds	r3, r2, r3
 8006c3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d209      	bcs.n	8006c62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b0f      	ldr	r3, [pc, #60]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	0019      	movs	r1, r3
 8006c5a:	0010      	movs	r0, r2
 8006c5c:	f7fe fb75 	bl	800534a <vListInsert>
}
 8006c60:	e010      	b.n	8006c84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c62:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	0019      	movs	r1, r3
 8006c6e:	0010      	movs	r0, r2
 8006c70:	f7fe fb6b 	bl	800534a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d202      	bcs.n	8006c84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c7e:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	46c0      	nop			; (mov r8, r8)
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b004      	add	sp, #16
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000e84 	.word	0x20000e84
 8006c90:	200009ac 	.word	0x200009ac
 8006c94:	20000e6c 	.word	0x20000e6c
 8006c98:	20000e3c 	.word	0x20000e3c
 8006c9c:	20000e38 	.word	0x20000e38
 8006ca0:	20000ea0 	.word	0x20000ea0

08006ca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ca4:	b590      	push	{r4, r7, lr}
 8006ca6:	b089      	sub	sp, #36	; 0x24
 8006ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cae:	f000 fac9 	bl	8007244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cb2:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <xTimerCreateTimerTask+0x6c>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cc2:	003a      	movs	r2, r7
 8006cc4:	1d39      	adds	r1, r7, #4
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f7fe fada 	bl	8005284 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cd0:	683c      	ldr	r4, [r7, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	490f      	ldr	r1, [pc, #60]	; (8006d14 <xTimerCreateTimerTask+0x70>)
 8006cd8:	480f      	ldr	r0, [pc, #60]	; (8006d18 <xTimerCreateTimerTask+0x74>)
 8006cda:	9202      	str	r2, [sp, #8]
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	2302      	movs	r3, #2
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	0022      	movs	r2, r4
 8006ce6:	f7fe ffba 	bl	8005c5e <xTaskCreateStatic>
 8006cea:	0002      	movs	r2, r0
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <xTimerCreateTimerTask+0x78>)
 8006cee:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <xTimerCreateTimerTask+0x78>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <xTimerCreateTimerTask+0x62>
 8006d02:	b672      	cpsid	i
 8006d04:	e7fe      	b.n	8006d04 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006d06:	68fb      	ldr	r3, [r7, #12]
}
 8006d08:	0018      	movs	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b005      	add	sp, #20
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	20000edc 	.word	0x20000edc
 8006d14:	08007af4 	.word	0x08007af4
 8006d18:	08006e3d 	.word	0x08006e3d
 8006d1c:	20000ee0 	.word	0x20000ee0

08006d20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d20:	b590      	push	{r4, r7, lr}
 8006d22:	b08b      	sub	sp, #44	; 0x2c
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <xTimerGenericCommand+0x1c>
 8006d38:	b672      	cpsid	i
 8006d3a:	e7fe      	b.n	8006d3a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <xTimerGenericCommand+0x90>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d030      	beq.n	8006da6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d44:	2414      	movs	r4, #20
 8006d46:	193b      	adds	r3, r7, r4
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d4c:	193b      	adds	r3, r7, r4
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d52:	193b      	adds	r3, r7, r4
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	dc19      	bgt.n	8006d92 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d5e:	f7ff fd27 	bl	80067b0 <xTaskGetSchedulerState>
 8006d62:	0003      	movs	r3, r0
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d109      	bne.n	8006d7c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <xTimerGenericCommand+0x90>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d6e:	1939      	adds	r1, r7, r4
 8006d70:	2300      	movs	r3, #0
 8006d72:	f7fe fc0f 	bl	8005594 <xQueueGenericSend>
 8006d76:	0003      	movs	r3, r0
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7a:	e014      	b.n	8006da6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <xTimerGenericCommand+0x90>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	2314      	movs	r3, #20
 8006d82:	18f9      	adds	r1, r7, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	2200      	movs	r2, #0
 8006d88:	f7fe fc04 	bl	8005594 <xQueueGenericSend>
 8006d8c:	0003      	movs	r3, r0
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e009      	b.n	8006da6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d92:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <xTimerGenericCommand+0x90>)
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	2314      	movs	r3, #20
 8006d9a:	18f9      	adds	r1, r7, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f7fe fcbd 	bl	800571c <xQueueGenericSendFromISR>
 8006da2:	0003      	movs	r3, r0
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006da8:	0018      	movs	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b00b      	add	sp, #44	; 0x2c
 8006dae:	bd90      	pop	{r4, r7, pc}
 8006db0:	20000edc 	.word	0x20000edc

08006db4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbe:	4b1e      	ldr	r3, [pc, #120]	; (8006e38 <prvProcessExpiredTimer+0x84>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f7fe faf2 	bl	80053b6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2228      	movs	r2, #40	; 0x28
 8006dd6:	5c9b      	ldrb	r3, [r3, r2]
 8006dd8:	001a      	movs	r2, r3
 8006dda:	2304      	movs	r3, #4
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d019      	beq.n	8006e14 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	18d1      	adds	r1, r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f8c3 	bl	8006f78 <prvInsertTimerInActiveList>
 8006df2:	1e03      	subs	r3, r0, #0
 8006df4:	d017      	beq.n	8006e26 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	f7ff ff8d 	bl	8006d20 <xTimerGenericCommand>
 8006e06:	0003      	movs	r3, r0
 8006e08:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <prvProcessExpiredTimer+0x72>
 8006e10:	b672      	cpsid	i
 8006e12:	e7fe      	b.n	8006e12 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2228      	movs	r2, #40	; 0x28
 8006e18:	5c9b      	ldrb	r3, [r3, r2]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	4393      	bics	r3, r2
 8006e1e:	b2d9      	uxtb	r1, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2228      	movs	r2, #40	; 0x28
 8006e24:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	0010      	movs	r0, r2
 8006e2e:	4798      	blx	r3
}
 8006e30:	46c0      	nop			; (mov r8, r8)
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000ed4 	.word	0x20000ed4

08006e3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e44:	2308      	movs	r3, #8
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f000 f853 	bl	8006ef4 <prvGetNextExpireTime>
 8006e4e:	0003      	movs	r3, r0
 8006e50:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 f803 	bl	8006e64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e5e:	f000 f8cd 	bl	8006ffc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e62:	e7ef      	b.n	8006e44 <prvTimerTask+0x8>

08006e64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e6e:	f7ff f913 	bl	8006098 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e72:	2308      	movs	r3, #8
 8006e74:	18fb      	adds	r3, r7, r3
 8006e76:	0018      	movs	r0, r3
 8006e78:	f000 f85e 	bl	8006f38 <prvSampleTimeNow>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d12b      	bne.n	8006ede <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10c      	bne.n	8006ea6 <prvProcessTimerOrBlockTask+0x42>
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d808      	bhi.n	8006ea6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006e94:	f7ff f90c 	bl	80060b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0011      	movs	r1, r2
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	f7ff ff88 	bl	8006db4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ea4:	e01d      	b.n	8006ee2 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <prvProcessTimerOrBlockTask+0x88>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <prvProcessTimerOrBlockTask+0x56>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <prvProcessTimerOrBlockTask+0x58>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <prvProcessTimerOrBlockTask+0x8c>)
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	0019      	movs	r1, r3
 8006ecc:	f7fe fe94 	bl	8005bf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ed0:	f7ff f8ee 	bl	80060b0 <xTaskResumeAll>
 8006ed4:	1e03      	subs	r3, r0, #0
 8006ed6:	d104      	bne.n	8006ee2 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8006ed8:	f000 fa82 	bl	80073e0 <vPortYield>
}
 8006edc:	e001      	b.n	8006ee2 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8006ede:	f7ff f8e7 	bl	80060b0 <xTaskResumeAll>
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	b004      	add	sp, #16
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	20000ed8 	.word	0x20000ed8
 8006ef0:	20000edc 	.word	0x20000edc

08006ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <prvGetNextExpireTime+0x40>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <prvGetNextExpireTime+0x16>
 8006f06:	2201      	movs	r2, #1
 8006f08:	e000      	b.n	8006f0c <prvGetNextExpireTime+0x18>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <prvGetNextExpireTime+0x40>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e001      	b.n	8006f28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b004      	add	sp, #16
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	46c0      	nop			; (mov r8, r8)
 8006f34:	20000ed4 	.word	0x20000ed4

08006f38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f40:	f7ff f942 	bl	80061c8 <xTaskGetTickCount>
 8006f44:	0003      	movs	r3, r0
 8006f46:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <prvSampleTimeNow+0x3c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d205      	bcs.n	8006f5e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006f52:	f000 f919 	bl	8007188 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	e002      	b.n	8006f64 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f64:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <prvSampleTimeNow+0x3c>)
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
}
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b004      	add	sp, #16
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000ee4 	.word	0x20000ee4

08006f78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d812      	bhi.n	8006fc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d302      	bcc.n	8006fb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	e01b      	b.n	8006fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fb2:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <prvInsertTimerInActiveList+0x7c>)
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	0019      	movs	r1, r3
 8006fbc:	0010      	movs	r0, r2
 8006fbe:	f7fe f9c4 	bl	800534a <vListInsert>
 8006fc2:	e012      	b.n	8006fea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d206      	bcs.n	8006fda <prvInsertTimerInActiveList+0x62>
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d302      	bcc.n	8006fda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e007      	b.n	8006fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <prvInsertTimerInActiveList+0x80>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	0019      	movs	r1, r3
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	f7fe f9b0 	bl	800534a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fea:	697b      	ldr	r3, [r7, #20]
}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b006      	add	sp, #24
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000ed8 	.word	0x20000ed8
 8006ff8:	20000ed4 	.word	0x20000ed4

08006ffc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ffc:	b590      	push	{r4, r7, lr}
 8006ffe:	b08d      	sub	sp, #52	; 0x34
 8007000:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007002:	e0ac      	b.n	800715e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007004:	2208      	movs	r2, #8
 8007006:	18bb      	adds	r3, r7, r2
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	da0f      	bge.n	800702e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800700e:	18bb      	adds	r3, r7, r2
 8007010:	3304      	adds	r3, #4
 8007012:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <prvProcessReceivedCommands+0x22>
 800701a:	b672      	cpsid	i
 800701c:	e7fe      	b.n	800701c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	6858      	ldr	r0, [r3, #4]
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	0019      	movs	r1, r3
 800702c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800702e:	2208      	movs	r2, #8
 8007030:	18bb      	adds	r3, r7, r2
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	da00      	bge.n	800703a <prvProcessReceivedCommands+0x3e>
 8007038:	e090      	b.n	800715c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800703a:	18bb      	adds	r3, r7, r2
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	3304      	adds	r3, #4
 800704c:	0018      	movs	r0, r3
 800704e:	f7fe f9b2 	bl	80053b6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	0018      	movs	r0, r3
 8007056:	f7ff ff6f 	bl	8006f38 <prvSampleTimeNow>
 800705a:	0003      	movs	r3, r0
 800705c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800705e:	2308      	movs	r3, #8
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b09      	cmp	r3, #9
 8007066:	d900      	bls.n	800706a <prvProcessReceivedCommands+0x6e>
 8007068:	e079      	b.n	800715e <prvProcessReceivedCommands+0x162>
 800706a:	009a      	lsls	r2, r3, #2
 800706c:	4b44      	ldr	r3, [pc, #272]	; (8007180 <prvProcessReceivedCommands+0x184>)
 800706e:	18d3      	adds	r3, r2, r3
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	2228      	movs	r2, #40	; 0x28
 8007078:	5c9b      	ldrb	r3, [r3, r2]
 800707a:	2201      	movs	r2, #1
 800707c:	4313      	orrs	r3, r2
 800707e:	b2d9      	uxtb	r1, r3
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	2228      	movs	r2, #40	; 0x28
 8007084:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007086:	2408      	movs	r4, #8
 8007088:	193b      	adds	r3, r7, r4
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	18d1      	adds	r1, r2, r3
 8007092:	193b      	adds	r3, r7, r4
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	6a38      	ldr	r0, [r7, #32]
 800709a:	f7ff ff6d 	bl	8006f78 <prvInsertTimerInActiveList>
 800709e:	1e03      	subs	r3, r0, #0
 80070a0:	d05d      	beq.n	800715e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	6a3a      	ldr	r2, [r7, #32]
 80070a8:	0010      	movs	r0, r2
 80070aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2228      	movs	r2, #40	; 0x28
 80070b0:	5c9b      	ldrb	r3, [r3, r2]
 80070b2:	001a      	movs	r2, r3
 80070b4:	2304      	movs	r3, #4
 80070b6:	4013      	ands	r3, r2
 80070b8:	d051      	beq.n	800715e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070ba:	193b      	adds	r3, r7, r4
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	18d2      	adds	r2, r2, r3
 80070c4:	6a38      	ldr	r0, [r7, #32]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	2100      	movs	r1, #0
 80070ce:	f7ff fe27 	bl	8006d20 <xTimerGenericCommand>
 80070d2:	0003      	movs	r3, r0
 80070d4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d140      	bne.n	800715e <prvProcessReceivedCommands+0x162>
 80070dc:	b672      	cpsid	i
 80070de:	e7fe      	b.n	80070de <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2228      	movs	r2, #40	; 0x28
 80070e4:	5c9b      	ldrb	r3, [r3, r2]
 80070e6:	2201      	movs	r2, #1
 80070e8:	4393      	bics	r3, r2
 80070ea:	b2d9      	uxtb	r1, r3
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	2228      	movs	r2, #40	; 0x28
 80070f0:	5499      	strb	r1, [r3, r2]
					break;
 80070f2:	e034      	b.n	800715e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	2228      	movs	r2, #40	; 0x28
 80070f8:	5c9b      	ldrb	r3, [r3, r2]
 80070fa:	2201      	movs	r2, #1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	b2d9      	uxtb	r1, r3
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	2228      	movs	r2, #40	; 0x28
 8007104:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007106:	2308      	movs	r3, #8
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <prvProcessReceivedCommands+0x120>
 8007118:	b672      	cpsid	i
 800711a:	e7fe      	b.n	800711a <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	18d1      	adds	r1, r2, r3
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	6a38      	ldr	r0, [r7, #32]
 800712a:	f7ff ff25 	bl	8006f78 <prvInsertTimerInActiveList>
					break;
 800712e:	e016      	b.n	800715e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2228      	movs	r2, #40	; 0x28
 8007134:	5c9b      	ldrb	r3, [r3, r2]
 8007136:	001a      	movs	r2, r3
 8007138:	2302      	movs	r3, #2
 800713a:	4013      	ands	r3, r2
 800713c:	d104      	bne.n	8007148 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	0018      	movs	r0, r3
 8007142:	f000 faa1 	bl	8007688 <vPortFree>
 8007146:	e00a      	b.n	800715e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	2228      	movs	r2, #40	; 0x28
 800714c:	5c9b      	ldrb	r3, [r3, r2]
 800714e:	2201      	movs	r2, #1
 8007150:	4393      	bics	r3, r2
 8007152:	b2d9      	uxtb	r1, r3
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2228      	movs	r2, #40	; 0x28
 8007158:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800715a:	e000      	b.n	800715e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800715c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <prvProcessReceivedCommands+0x188>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2208      	movs	r2, #8
 8007164:	18b9      	adds	r1, r7, r2
 8007166:	2200      	movs	r2, #0
 8007168:	0018      	movs	r0, r3
 800716a:	f7fe fb4b 	bl	8005804 <xQueueReceive>
 800716e:	1e03      	subs	r3, r0, #0
 8007170:	d000      	beq.n	8007174 <prvProcessReceivedCommands+0x178>
 8007172:	e747      	b.n	8007004 <prvProcessReceivedCommands+0x8>
	}
}
 8007174:	46c0      	nop			; (mov r8, r8)
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	46bd      	mov	sp, r7
 800717a:	b00b      	add	sp, #44	; 0x2c
 800717c:	bd90      	pop	{r4, r7, pc}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	08007c78 	.word	0x08007c78
 8007184:	20000edc 	.word	0x20000edc

08007188 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800718e:	e041      	b.n	8007214 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007190:	4b2a      	ldr	r3, [pc, #168]	; (800723c <prvSwitchTimerLists+0xb4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719a:	4b28      	ldr	r3, [pc, #160]	; (800723c <prvSwitchTimerLists+0xb4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3304      	adds	r3, #4
 80071a8:	0018      	movs	r0, r3
 80071aa:	f7fe f904 	bl	80053b6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	0010      	movs	r0, r2
 80071b6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2228      	movs	r2, #40	; 0x28
 80071bc:	5c9b      	ldrb	r3, [r3, r2]
 80071be:	001a      	movs	r2, r3
 80071c0:	2304      	movs	r3, #4
 80071c2:	4013      	ands	r3, r2
 80071c4:	d026      	beq.n	8007214 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	18d3      	adds	r3, r2, r3
 80071ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d90e      	bls.n	80071f6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071e4:	4b15      	ldr	r3, [pc, #84]	; (800723c <prvSwitchTimerLists+0xb4>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3304      	adds	r3, #4
 80071ec:	0019      	movs	r1, r3
 80071ee:	0010      	movs	r0, r2
 80071f0:	f7fe f8ab 	bl	800534a <vListInsert>
 80071f4:	e00e      	b.n	8007214 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	2300      	movs	r3, #0
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	2100      	movs	r1, #0
 8007202:	f7ff fd8d 	bl	8006d20 <xTimerGenericCommand>
 8007206:	0003      	movs	r3, r0
 8007208:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <prvSwitchTimerLists+0x8c>
 8007210:	b672      	cpsid	i
 8007212:	e7fe      	b.n	8007212 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007214:	4b09      	ldr	r3, [pc, #36]	; (800723c <prvSwitchTimerLists+0xb4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1b8      	bne.n	8007190 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800721e:	4b07      	ldr	r3, [pc, #28]	; (800723c <prvSwitchTimerLists+0xb4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007224:	4b06      	ldr	r3, [pc, #24]	; (8007240 <prvSwitchTimerLists+0xb8>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b04      	ldr	r3, [pc, #16]	; (800723c <prvSwitchTimerLists+0xb4>)
 800722a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800722c:	4b04      	ldr	r3, [pc, #16]	; (8007240 <prvSwitchTimerLists+0xb8>)
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	601a      	str	r2, [r3, #0]
}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	46bd      	mov	sp, r7
 8007236:	b006      	add	sp, #24
 8007238:	bd80      	pop	{r7, pc}
 800723a:	46c0      	nop			; (mov r8, r8)
 800723c:	20000ed4 	.word	0x20000ed4
 8007240:	20000ed8 	.word	0x20000ed8

08007244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800724a:	f000 f8d9 	bl	8007400 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <prvCheckForValidListAndQueue+0x64>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d123      	bne.n	800729e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <prvCheckForValidListAndQueue+0x68>)
 8007258:	0018      	movs	r0, r3
 800725a:	f7fe f82b 	bl	80052b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <prvCheckForValidListAndQueue+0x6c>)
 8007260:	0018      	movs	r0, r3
 8007262:	f7fe f827 	bl	80052b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <prvCheckForValidListAndQueue+0x70>)
 8007268:	4a10      	ldr	r2, [pc, #64]	; (80072ac <prvCheckForValidListAndQueue+0x68>)
 800726a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800726c:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <prvCheckForValidListAndQueue+0x74>)
 800726e:	4a10      	ldr	r2, [pc, #64]	; (80072b0 <prvCheckForValidListAndQueue+0x6c>)
 8007270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007272:	4b12      	ldr	r3, [pc, #72]	; (80072bc <prvCheckForValidListAndQueue+0x78>)
 8007274:	4a12      	ldr	r2, [pc, #72]	; (80072c0 <prvCheckForValidListAndQueue+0x7c>)
 8007276:	2100      	movs	r1, #0
 8007278:	9100      	str	r1, [sp, #0]
 800727a:	2110      	movs	r1, #16
 800727c:	200a      	movs	r0, #10
 800727e:	f7fe f916 	bl	80054ae <xQueueGenericCreateStatic>
 8007282:	0002      	movs	r2, r0
 8007284:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <prvCheckForValidListAndQueue+0x64>)
 8007286:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007288:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <prvCheckForValidListAndQueue+0x64>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <prvCheckForValidListAndQueue+0x64>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <prvCheckForValidListAndQueue+0x80>)
 8007296:	0011      	movs	r1, r2
 8007298:	0018      	movs	r0, r3
 800729a:	f7fe fc85 	bl	8005ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800729e:	f000 f8c1 	bl	8007424 <vPortExitCritical>
}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000edc 	.word	0x20000edc
 80072ac:	20000eac 	.word	0x20000eac
 80072b0:	20000ec0 	.word	0x20000ec0
 80072b4:	20000ed4 	.word	0x20000ed4
 80072b8:	20000ed8 	.word	0x20000ed8
 80072bc:	20000f88 	.word	0x20000f88
 80072c0:	20000ee8 	.word	0x20000ee8
 80072c4:	08007afc 	.word	0x08007afc

080072c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3b04      	subs	r3, #4
 80072d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2280      	movs	r2, #128	; 0x80
 80072de:	0452      	lsls	r2, r2, #17
 80072e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3b04      	subs	r3, #4
 80072f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072f4:	4a08      	ldr	r2, [pc, #32]	; (8007318 <pxPortInitialiseStack+0x50>)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3b14      	subs	r3, #20
 80072fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3b20      	subs	r3, #32
 800730a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	b004      	add	sp, #16
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	0800731d 	.word	0x0800731d

0800731c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <prvTaskExitError+0x2c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3301      	adds	r3, #1
 800732c:	d001      	beq.n	8007332 <prvTaskExitError+0x16>
 800732e:	b672      	cpsid	i
 8007330:	e7fe      	b.n	8007330 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007332:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007334:	46c0      	nop			; (mov r8, r8)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0fc      	beq.n	8007336 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800733c:	46c0      	nop			; (mov r8, r8)
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	46bd      	mov	sp, r7
 8007342:	b002      	add	sp, #8
 8007344:	bd80      	pop	{r7, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	20000010 	.word	0x20000010

0800734c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007360 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007360:	4a0b      	ldr	r2, [pc, #44]	; (8007390 <pxCurrentTCBConst2>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	3020      	adds	r0, #32
 8007368:	f380 8809 	msr	PSP, r0
 800736c:	2002      	movs	r0, #2
 800736e:	f380 8814 	msr	CONTROL, r0
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007378:	46ae      	mov	lr, r5
 800737a:	bc08      	pop	{r3}
 800737c:	bc04      	pop	{r2}
 800737e:	b662      	cpsie	i
 8007380:	4718      	bx	r3
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	46c0      	nop			; (mov r8, r8)
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	46c0      	nop			; (mov r8, r8)
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	46c0      	nop			; (mov r8, r8)
 800738e:	46c0      	nop			; (mov r8, r8)

08007390 <pxCurrentTCBConst2>:
 8007390:	200009ac 	.word	0x200009ac
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	46c0      	nop			; (mov r8, r8)

08007398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <xPortStartScheduler+0x40>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <xPortStartScheduler+0x40>)
 80073a2:	21ff      	movs	r1, #255	; 0xff
 80073a4:	0409      	lsls	r1, r1, #16
 80073a6:	430a      	orrs	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073aa:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <xPortStartScheduler+0x40>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <xPortStartScheduler+0x40>)
 80073b0:	21ff      	movs	r1, #255	; 0xff
 80073b2:	0609      	lsls	r1, r1, #24
 80073b4:	430a      	orrs	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b8:	f000 f898 	bl	80074ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <xPortStartScheduler+0x44>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80073c2:	f7ff ffcd 	bl	8007360 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073c6:	f7fe ffbd 	bl	8006344 <vTaskSwitchContext>
	prvTaskExitError();
 80073ca:	f7ff ffa7 	bl	800731c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	0018      	movs	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	e000ed20 	.word	0xe000ed20
 80073dc:	20000010 	.word	0x20000010

080073e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <vPortYield+0x1c>)
 80073e6:	2280      	movs	r2, #128	; 0x80
 80073e8:	0552      	lsls	r2, r2, #21
 80073ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80073ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80073f0:	f3bf 8f6f 	isb	sy
}
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007404:	b672      	cpsid	i
	uxCriticalNesting++;
 8007406:	4b06      	ldr	r3, [pc, #24]	; (8007420 <vPortEnterCritical+0x20>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vPortEnterCritical+0x20>)
 800740e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007410:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007414:	f3bf 8f6f 	isb	sy
}
 8007418:	46c0      	nop			; (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	20000010 	.word	0x20000010

08007424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007428:	4b09      	ldr	r3, [pc, #36]	; (8007450 <vPortExitCritical+0x2c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <vPortExitCritical+0x10>
 8007430:	b672      	cpsid	i
 8007432:	e7fe      	b.n	8007432 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007434:	4b06      	ldr	r3, [pc, #24]	; (8007450 <vPortExitCritical+0x2c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	1e5a      	subs	r2, r3, #1
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <vPortExitCritical+0x2c>)
 800743c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <vPortExitCritical+0x2c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d100      	bne.n	8007448 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007446:	b662      	cpsie	i
	}
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	20000010 	.word	0x20000010

08007454 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007454:	f3ef 8010 	mrs	r0, PRIMASK
 8007458:	b672      	cpsid	i
 800745a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	0018      	movs	r0, r3

08007460 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007460:	f380 8810 	msr	PRIMASK, r0
 8007464:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007466:	46c0      	nop			; (mov r8, r8)
	...

08007470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007470:	f3ef 8009 	mrs	r0, PSP
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <pxCurrentTCBConst>)
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	3820      	subs	r0, #32
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800747e:	4644      	mov	r4, r8
 8007480:	464d      	mov	r5, r9
 8007482:	4656      	mov	r6, sl
 8007484:	465f      	mov	r7, fp
 8007486:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007488:	b508      	push	{r3, lr}
 800748a:	b672      	cpsid	i
 800748c:	f7fe ff5a 	bl	8006344 <vTaskSwitchContext>
 8007490:	b662      	cpsie	i
 8007492:	bc0c      	pop	{r2, r3}
 8007494:	6811      	ldr	r1, [r2, #0]
 8007496:	6808      	ldr	r0, [r1, #0]
 8007498:	3010      	adds	r0, #16
 800749a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800749c:	46a0      	mov	r8, r4
 800749e:	46a9      	mov	r9, r5
 80074a0:	46b2      	mov	sl, r6
 80074a2:	46bb      	mov	fp, r7
 80074a4:	f380 8809 	msr	PSP, r0
 80074a8:	3820      	subs	r0, #32
 80074aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80074ac:	4718      	bx	r3
 80074ae:	46c0      	nop			; (mov r8, r8)

080074b0 <pxCurrentTCBConst>:
 80074b0:	200009ac 	.word	0x200009ac
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80074b4:	46c0      	nop			; (mov r8, r8)
 80074b6:	46c0      	nop			; (mov r8, r8)

080074b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80074be:	f7ff ffc9 	bl	8007454 <ulSetInterruptMaskFromISR>
 80074c2:	0003      	movs	r3, r0
 80074c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074c6:	f7fe fe8d 	bl	80061e4 <xTaskIncrementTick>
 80074ca:	1e03      	subs	r3, r0, #0
 80074cc:	d003      	beq.n	80074d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <xPortSysTickHandler+0x30>)
 80074d0:	2280      	movs	r2, #128	; 0x80
 80074d2:	0552      	lsls	r2, r2, #21
 80074d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	0018      	movs	r0, r3
 80074da:	f7ff ffc1 	bl	8007460 <vClearInterruptMaskFromISR>
}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b002      	add	sp, #8
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074f6:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <vPortSetupTimerInterrupt+0x38>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <vPortSetupTimerInterrupt+0x3c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	22fa      	movs	r2, #250	; 0xfa
 8007502:	0091      	lsls	r1, r2, #2
 8007504:	0018      	movs	r0, r3
 8007506:	f7f8 fdff 	bl	8000108 <__udivsi3>
 800750a:	0003      	movs	r3, r0
 800750c:	001a      	movs	r2, r3
 800750e:	4b07      	ldr	r3, [pc, #28]	; (800752c <vPortSetupTimerInterrupt+0x40>)
 8007510:	3a01      	subs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <vPortSetupTimerInterrupt+0x34>)
 8007516:	2207      	movs	r2, #7
 8007518:	601a      	str	r2, [r3, #0]
}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	e000e010 	.word	0xe000e010
 8007524:	e000e018 	.word	0xe000e018
 8007528:	20000004 	.word	0x20000004
 800752c:	e000e014 	.word	0xe000e014

08007530 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800753c:	f7fe fdac 	bl	8006098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007540:	4b4b      	ldr	r3, [pc, #300]	; (8007670 <pvPortMalloc+0x140>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007548:	f000 f8ec 	bl	8007724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800754c:	4b49      	ldr	r3, [pc, #292]	; (8007674 <pvPortMalloc+0x144>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	4013      	ands	r3, r2
 8007554:	d000      	beq.n	8007558 <pvPortMalloc+0x28>
 8007556:	e07e      	b.n	8007656 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d012      	beq.n	8007584 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800755e:	2208      	movs	r2, #8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	189b      	adds	r3, r3, r2
 8007564:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2207      	movs	r2, #7
 800756a:	4013      	ands	r3, r2
 800756c:	d00a      	beq.n	8007584 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2207      	movs	r2, #7
 8007572:	4393      	bics	r3, r2
 8007574:	3308      	adds	r3, #8
 8007576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2207      	movs	r2, #7
 800757c:	4013      	ands	r3, r2
 800757e:	d001      	beq.n	8007584 <pvPortMalloc+0x54>
 8007580:	b672      	cpsid	i
 8007582:	e7fe      	b.n	8007582 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d065      	beq.n	8007656 <pvPortMalloc+0x126>
 800758a:	4b3b      	ldr	r3, [pc, #236]	; (8007678 <pvPortMalloc+0x148>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d860      	bhi.n	8007656 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007594:	4b39      	ldr	r3, [pc, #228]	; (800767c <pvPortMalloc+0x14c>)
 8007596:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007598:	4b38      	ldr	r3, [pc, #224]	; (800767c <pvPortMalloc+0x14c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800759e:	e004      	b.n	80075aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d903      	bls.n	80075bc <pvPortMalloc+0x8c>
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1f1      	bne.n	80075a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075bc:	4b2c      	ldr	r3, [pc, #176]	; (8007670 <pvPortMalloc+0x140>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d047      	beq.n	8007656 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2208      	movs	r2, #8
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	1ad2      	subs	r2, r2, r3
 80075e0:	2308      	movs	r3, #8
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d916      	bls.n	8007616 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	18d3      	adds	r3, r2, r3
 80075ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2207      	movs	r2, #7
 80075f4:	4013      	ands	r3, r2
 80075f6:	d001      	beq.n	80075fc <pvPortMalloc+0xcc>
 80075f8:	b672      	cpsid	i
 80075fa:	e7fe      	b.n	80075fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	0018      	movs	r0, r3
 8007612:	f000 f8e7 	bl	80077e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007616:	4b18      	ldr	r3, [pc, #96]	; (8007678 <pvPortMalloc+0x148>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	4b15      	ldr	r3, [pc, #84]	; (8007678 <pvPortMalloc+0x148>)
 8007622:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007624:	4b14      	ldr	r3, [pc, #80]	; (8007678 <pvPortMalloc+0x148>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	4b15      	ldr	r3, [pc, #84]	; (8007680 <pvPortMalloc+0x150>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d203      	bcs.n	8007638 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007630:	4b11      	ldr	r3, [pc, #68]	; (8007678 <pvPortMalloc+0x148>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	4b12      	ldr	r3, [pc, #72]	; (8007680 <pvPortMalloc+0x150>)
 8007636:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <pvPortMalloc+0x144>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	431a      	orrs	r2, r3
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <pvPortMalloc+0x154>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <pvPortMalloc+0x154>)
 8007654:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007656:	f7fe fd2b 	bl	80060b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2207      	movs	r2, #7
 800765e:	4013      	ands	r3, r2
 8007660:	d001      	beq.n	8007666 <pvPortMalloc+0x136>
 8007662:	b672      	cpsid	i
 8007664:	e7fe      	b.n	8007664 <pvPortMalloc+0x134>
	return pvReturn;
 8007666:	68fb      	ldr	r3, [r7, #12]
}
 8007668:	0018      	movs	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	b006      	add	sp, #24
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20001be0 	.word	0x20001be0
 8007674:	20001bf4 	.word	0x20001bf4
 8007678:	20001be4 	.word	0x20001be4
 800767c:	20001bd8 	.word	0x20001bd8
 8007680:	20001be8 	.word	0x20001be8
 8007684:	20001bec 	.word	0x20001bec

08007688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d03a      	beq.n	8007710 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800769a:	2308      	movs	r3, #8
 800769c:	425b      	negs	r3, r3
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	18d3      	adds	r3, r2, r3
 80076a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <vPortFree+0x90>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4013      	ands	r3, r2
 80076b2:	d101      	bne.n	80076b8 <vPortFree+0x30>
 80076b4:	b672      	cpsid	i
 80076b6:	e7fe      	b.n	80076b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <vPortFree+0x3c>
 80076c0:	b672      	cpsid	i
 80076c2:	e7fe      	b.n	80076c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	4b13      	ldr	r3, [pc, #76]	; (8007718 <vPortFree+0x90>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4013      	ands	r3, r2
 80076ce:	d01f      	beq.n	8007710 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11b      	bne.n	8007710 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <vPortFree+0x90>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e8:	f7fe fcd6 	bl	8006098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <vPortFree+0x94>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	18d2      	adds	r2, r2, r3
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <vPortFree+0x94>)
 80076f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f000 f871 	bl	80077e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007702:	4b07      	ldr	r3, [pc, #28]	; (8007720 <vPortFree+0x98>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <vPortFree+0x98>)
 800770a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800770c:	f7fe fcd0 	bl	80060b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007710:	46c0      	nop			; (mov r8, r8)
 8007712:	46bd      	mov	sp, r7
 8007714:	b004      	add	sp, #16
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20001bf4 	.word	0x20001bf4
 800771c:	20001be4 	.word	0x20001be4
 8007720:	20001bf0 	.word	0x20001bf0

08007724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800772a:	23c0      	movs	r3, #192	; 0xc0
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007730:	4b26      	ldr	r3, [pc, #152]	; (80077cc <prvHeapInit+0xa8>)
 8007732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2207      	movs	r2, #7
 8007738:	4013      	ands	r3, r2
 800773a:	d00c      	beq.n	8007756 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	3307      	adds	r3, #7
 8007740:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2207      	movs	r2, #7
 8007746:	4393      	bics	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <prvHeapInit+0xa8>)
 8007752:	18d3      	adds	r3, r2, r3
 8007754:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800775a:	4b1d      	ldr	r3, [pc, #116]	; (80077d0 <prvHeapInit+0xac>)
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007760:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <prvHeapInit+0xac>)
 8007762:	2200      	movs	r2, #0
 8007764:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	18d3      	adds	r3, r2, r3
 800776c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800776e:	2208      	movs	r2, #8
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2207      	movs	r2, #7
 800777a:	4393      	bics	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <prvHeapInit+0xb0>)
 8007782:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007784:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <prvHeapInit+0xb0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2200      	movs	r2, #0
 800778a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800778c:	4b11      	ldr	r3, [pc, #68]	; (80077d4 <prvHeapInit+0xb0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	1ad2      	subs	r2, r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077a2:	4b0c      	ldr	r3, [pc, #48]	; (80077d4 <prvHeapInit+0xb0>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <prvHeapInit+0xb4>)
 80077b0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	4b09      	ldr	r3, [pc, #36]	; (80077dc <prvHeapInit+0xb8>)
 80077b8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <prvHeapInit+0xbc>)
 80077bc:	2280      	movs	r2, #128	; 0x80
 80077be:	0612      	lsls	r2, r2, #24
 80077c0:	601a      	str	r2, [r3, #0]
}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b004      	add	sp, #16
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	20000fd8 	.word	0x20000fd8
 80077d0:	20001bd8 	.word	0x20001bd8
 80077d4:	20001be0 	.word	0x20001be0
 80077d8:	20001be8 	.word	0x20001be8
 80077dc:	20001be4 	.word	0x20001be4
 80077e0:	20001bf4 	.word	0x20001bf4

080077e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077ec:	4b27      	ldr	r3, [pc, #156]	; (800788c <prvInsertBlockIntoFreeList+0xa8>)
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e002      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x14>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d8f7      	bhi.n	80077f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	18d3      	adds	r3, r2, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d108      	bne.n	8007826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	18d2      	adds	r2, r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	18d2      	adds	r2, r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d118      	bne.n	800786c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <prvInsertBlockIntoFreeList+0xac>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d00d      	beq.n	8007862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	18d2      	adds	r2, r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e008      	b.n	8007874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007862:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <prvInsertBlockIntoFreeList+0xac>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e003      	b.n	8007874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d002      	beq.n	8007882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	46bd      	mov	sp, r7
 8007886:	b004      	add	sp, #16
 8007888:	bd80      	pop	{r7, pc}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	20001bd8 	.word	0x20001bd8
 8007890:	20001be0 	.word	0x20001be0

08007894 <__libc_init_array>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	2600      	movs	r6, #0
 8007898:	4d0c      	ldr	r5, [pc, #48]	; (80078cc <__libc_init_array+0x38>)
 800789a:	4c0d      	ldr	r4, [pc, #52]	; (80078d0 <__libc_init_array+0x3c>)
 800789c:	1b64      	subs	r4, r4, r5
 800789e:	10a4      	asrs	r4, r4, #2
 80078a0:	42a6      	cmp	r6, r4
 80078a2:	d109      	bne.n	80078b8 <__libc_init_array+0x24>
 80078a4:	2600      	movs	r6, #0
 80078a6:	f000 f8f9 	bl	8007a9c <_init>
 80078aa:	4d0a      	ldr	r5, [pc, #40]	; (80078d4 <__libc_init_array+0x40>)
 80078ac:	4c0a      	ldr	r4, [pc, #40]	; (80078d8 <__libc_init_array+0x44>)
 80078ae:	1b64      	subs	r4, r4, r5
 80078b0:	10a4      	asrs	r4, r4, #2
 80078b2:	42a6      	cmp	r6, r4
 80078b4:	d105      	bne.n	80078c2 <__libc_init_array+0x2e>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	00b3      	lsls	r3, r6, #2
 80078ba:	58eb      	ldr	r3, [r5, r3]
 80078bc:	4798      	blx	r3
 80078be:	3601      	adds	r6, #1
 80078c0:	e7ee      	b.n	80078a0 <__libc_init_array+0xc>
 80078c2:	00b3      	lsls	r3, r6, #2
 80078c4:	58eb      	ldr	r3, [r5, r3]
 80078c6:	4798      	blx	r3
 80078c8:	3601      	adds	r6, #1
 80078ca:	e7f2      	b.n	80078b2 <__libc_init_array+0x1e>
 80078cc:	08007d08 	.word	0x08007d08
 80078d0:	08007d08 	.word	0x08007d08
 80078d4:	08007d08 	.word	0x08007d08
 80078d8:	08007d0c 	.word	0x08007d0c

080078dc <__retarget_lock_acquire_recursive>:
 80078dc:	4770      	bx	lr

080078de <__retarget_lock_release_recursive>:
 80078de:	4770      	bx	lr

080078e0 <memcpy>:
 80078e0:	2300      	movs	r3, #0
 80078e2:	b510      	push	{r4, lr}
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d100      	bne.n	80078ea <memcpy+0xa>
 80078e8:	bd10      	pop	{r4, pc}
 80078ea:	5ccc      	ldrb	r4, [r1, r3]
 80078ec:	54c4      	strb	r4, [r0, r3]
 80078ee:	3301      	adds	r3, #1
 80078f0:	e7f8      	b.n	80078e4 <memcpy+0x4>

080078f2 <memset>:
 80078f2:	0003      	movs	r3, r0
 80078f4:	1882      	adds	r2, r0, r2
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d100      	bne.n	80078fc <memset+0xa>
 80078fa:	4770      	bx	lr
 80078fc:	7019      	strb	r1, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	e7f9      	b.n	80078f6 <memset+0x4>

08007902 <cleanup_glue>:
 8007902:	b570      	push	{r4, r5, r6, lr}
 8007904:	000d      	movs	r5, r1
 8007906:	6809      	ldr	r1, [r1, #0]
 8007908:	0004      	movs	r4, r0
 800790a:	2900      	cmp	r1, #0
 800790c:	d001      	beq.n	8007912 <cleanup_glue+0x10>
 800790e:	f7ff fff8 	bl	8007902 <cleanup_glue>
 8007912:	0029      	movs	r1, r5
 8007914:	0020      	movs	r0, r4
 8007916:	f000 f877 	bl	8007a08 <_free_r>
 800791a:	bd70      	pop	{r4, r5, r6, pc}

0800791c <_reclaim_reent>:
 800791c:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <_reclaim_reent+0xc8>)
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	0004      	movs	r4, r0
 8007924:	4283      	cmp	r3, r0
 8007926:	d049      	beq.n	80079bc <_reclaim_reent+0xa0>
 8007928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <_reclaim_reent+0x28>
 800792e:	2500      	movs	r5, #0
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	42ab      	cmp	r3, r5
 8007934:	d147      	bne.n	80079c6 <_reclaim_reent+0xaa>
 8007936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	2900      	cmp	r1, #0
 800793c:	d002      	beq.n	8007944 <_reclaim_reent+0x28>
 800793e:	0020      	movs	r0, r4
 8007940:	f000 f862 	bl	8007a08 <_free_r>
 8007944:	6961      	ldr	r1, [r4, #20]
 8007946:	2900      	cmp	r1, #0
 8007948:	d002      	beq.n	8007950 <_reclaim_reent+0x34>
 800794a:	0020      	movs	r0, r4
 800794c:	f000 f85c 	bl	8007a08 <_free_r>
 8007950:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007952:	2900      	cmp	r1, #0
 8007954:	d002      	beq.n	800795c <_reclaim_reent+0x40>
 8007956:	0020      	movs	r0, r4
 8007958:	f000 f856 	bl	8007a08 <_free_r>
 800795c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800795e:	2900      	cmp	r1, #0
 8007960:	d002      	beq.n	8007968 <_reclaim_reent+0x4c>
 8007962:	0020      	movs	r0, r4
 8007964:	f000 f850 	bl	8007a08 <_free_r>
 8007968:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800796a:	2900      	cmp	r1, #0
 800796c:	d002      	beq.n	8007974 <_reclaim_reent+0x58>
 800796e:	0020      	movs	r0, r4
 8007970:	f000 f84a 	bl	8007a08 <_free_r>
 8007974:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007976:	2900      	cmp	r1, #0
 8007978:	d002      	beq.n	8007980 <_reclaim_reent+0x64>
 800797a:	0020      	movs	r0, r4
 800797c:	f000 f844 	bl	8007a08 <_free_r>
 8007980:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007982:	2900      	cmp	r1, #0
 8007984:	d002      	beq.n	800798c <_reclaim_reent+0x70>
 8007986:	0020      	movs	r0, r4
 8007988:	f000 f83e 	bl	8007a08 <_free_r>
 800798c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800798e:	2900      	cmp	r1, #0
 8007990:	d002      	beq.n	8007998 <_reclaim_reent+0x7c>
 8007992:	0020      	movs	r0, r4
 8007994:	f000 f838 	bl	8007a08 <_free_r>
 8007998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799a:	2900      	cmp	r1, #0
 800799c:	d002      	beq.n	80079a4 <_reclaim_reent+0x88>
 800799e:	0020      	movs	r0, r4
 80079a0:	f000 f832 	bl	8007a08 <_free_r>
 80079a4:	69a3      	ldr	r3, [r4, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <_reclaim_reent+0xa0>
 80079aa:	0020      	movs	r0, r4
 80079ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079ae:	4798      	blx	r3
 80079b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079b2:	2900      	cmp	r1, #0
 80079b4:	d002      	beq.n	80079bc <_reclaim_reent+0xa0>
 80079b6:	0020      	movs	r0, r4
 80079b8:	f7ff ffa3 	bl	8007902 <cleanup_glue>
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
 80079be:	5949      	ldr	r1, [r1, r5]
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d108      	bne.n	80079d6 <_reclaim_reent+0xba>
 80079c4:	3504      	adds	r5, #4
 80079c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079c8:	68d9      	ldr	r1, [r3, #12]
 80079ca:	2d80      	cmp	r5, #128	; 0x80
 80079cc:	d1f7      	bne.n	80079be <_reclaim_reent+0xa2>
 80079ce:	0020      	movs	r0, r4
 80079d0:	f000 f81a 	bl	8007a08 <_free_r>
 80079d4:	e7af      	b.n	8007936 <_reclaim_reent+0x1a>
 80079d6:	680e      	ldr	r6, [r1, #0]
 80079d8:	0020      	movs	r0, r4
 80079da:	f000 f815 	bl	8007a08 <_free_r>
 80079de:	0031      	movs	r1, r6
 80079e0:	e7ee      	b.n	80079c0 <_reclaim_reent+0xa4>
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	20000014 	.word	0x20000014

080079e8 <__malloc_lock>:
 80079e8:	b510      	push	{r4, lr}
 80079ea:	4802      	ldr	r0, [pc, #8]	; (80079f4 <__malloc_lock+0xc>)
 80079ec:	f7ff ff76 	bl	80078dc <__retarget_lock_acquire_recursive>
 80079f0:	bd10      	pop	{r4, pc}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	20001bf8 	.word	0x20001bf8

080079f8 <__malloc_unlock>:
 80079f8:	b510      	push	{r4, lr}
 80079fa:	4802      	ldr	r0, [pc, #8]	; (8007a04 <__malloc_unlock+0xc>)
 80079fc:	f7ff ff6f 	bl	80078de <__retarget_lock_release_recursive>
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	20001bf8 	.word	0x20001bf8

08007a08 <_free_r>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	0005      	movs	r5, r0
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	d010      	beq.n	8007a32 <_free_r+0x2a>
 8007a10:	1f0c      	subs	r4, r1, #4
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	da00      	bge.n	8007a1a <_free_r+0x12>
 8007a18:	18e4      	adds	r4, r4, r3
 8007a1a:	0028      	movs	r0, r5
 8007a1c:	f7ff ffe4 	bl	80079e8 <__malloc_lock>
 8007a20:	4a1d      	ldr	r2, [pc, #116]	; (8007a98 <_free_r+0x90>)
 8007a22:	6813      	ldr	r3, [r2, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d105      	bne.n	8007a34 <_free_r+0x2c>
 8007a28:	6063      	str	r3, [r4, #4]
 8007a2a:	6014      	str	r4, [r2, #0]
 8007a2c:	0028      	movs	r0, r5
 8007a2e:	f7ff ffe3 	bl	80079f8 <__malloc_unlock>
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d908      	bls.n	8007a4a <_free_r+0x42>
 8007a38:	6821      	ldr	r1, [r4, #0]
 8007a3a:	1860      	adds	r0, r4, r1
 8007a3c:	4283      	cmp	r3, r0
 8007a3e:	d1f3      	bne.n	8007a28 <_free_r+0x20>
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	1841      	adds	r1, r0, r1
 8007a46:	6021      	str	r1, [r4, #0]
 8007a48:	e7ee      	b.n	8007a28 <_free_r+0x20>
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <_free_r+0x4e>
 8007a52:	42a3      	cmp	r3, r4
 8007a54:	d9f9      	bls.n	8007a4a <_free_r+0x42>
 8007a56:	6811      	ldr	r1, [r2, #0]
 8007a58:	1850      	adds	r0, r2, r1
 8007a5a:	42a0      	cmp	r0, r4
 8007a5c:	d10b      	bne.n	8007a76 <_free_r+0x6e>
 8007a5e:	6820      	ldr	r0, [r4, #0]
 8007a60:	1809      	adds	r1, r1, r0
 8007a62:	1850      	adds	r0, r2, r1
 8007a64:	6011      	str	r1, [r2, #0]
 8007a66:	4283      	cmp	r3, r0
 8007a68:	d1e0      	bne.n	8007a2c <_free_r+0x24>
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	1841      	adds	r1, r0, r1
 8007a70:	6011      	str	r1, [r2, #0]
 8007a72:	6053      	str	r3, [r2, #4]
 8007a74:	e7da      	b.n	8007a2c <_free_r+0x24>
 8007a76:	42a0      	cmp	r0, r4
 8007a78:	d902      	bls.n	8007a80 <_free_r+0x78>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	602b      	str	r3, [r5, #0]
 8007a7e:	e7d5      	b.n	8007a2c <_free_r+0x24>
 8007a80:	6821      	ldr	r1, [r4, #0]
 8007a82:	1860      	adds	r0, r4, r1
 8007a84:	4283      	cmp	r3, r0
 8007a86:	d103      	bne.n	8007a90 <_free_r+0x88>
 8007a88:	6818      	ldr	r0, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	1841      	adds	r1, r0, r1
 8007a8e:	6021      	str	r1, [r4, #0]
 8007a90:	6063      	str	r3, [r4, #4]
 8007a92:	6054      	str	r4, [r2, #4]
 8007a94:	e7ca      	b.n	8007a2c <_free_r+0x24>
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	20001bfc 	.word	0x20001bfc

08007a9c <_init>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr

08007aa8 <_fini>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aae:	bc08      	pop	{r3}
 8007ab0:	469e      	mov	lr, r3
 8007ab2:	4770      	bx	lr
