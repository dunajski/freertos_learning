
FreeRTOS_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f98  08005f98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa0  08005fa0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000078  08006020  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b94  08006020  00021b94  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b36f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e2  00000000  00000000  0003b40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  00040000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000347c  00000000  00000000  000414d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181d1  00000000  00000000  0004494c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa538  00000000  00000000  0005cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005364  00000000  00000000  001070a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d9c 	.word	0x08005d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005d9c 	.word	0x08005d9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fb02 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f836 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8ca 	bl	80007c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f87a 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000634:	f002 fdce 	bl	80031d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <main+0x54>)
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <main+0x58>)
 800063c:	2100      	movs	r1, #0
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fe10 	bl	8003264 <osThreadNew>
 8000644:	0002      	movs	r2, r0
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <main+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  blinkingRatioThreadHandle = osThreadNew(ChangeBlinkingRatioThread, NULL, &blinkingRatioTask_attributes);
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <main+0x60>)
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <main+0x64>)
 800064e:	2100      	movs	r1, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f002 fe07 	bl	8003264 <osThreadNew>
 8000656:	0002      	movs	r2, r0
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <main+0x68>)
 800065a:	601a      	str	r2, [r3, #0]
  toggleLEDThreadHandle = osThreadNew(ToggleLEDThread, NULL, &toggleLEDTask_attributes);
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <main+0x6c>)
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x70>)
 8000660:	2100      	movs	r1, #0
 8000662:	0018      	movs	r0, r3
 8000664:	f002 fdfe 	bl	8003264 <osThreadNew>
 8000668:	0002      	movs	r2, r0
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <main+0x74>)
 800066c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800066e:	f002 fdd3 	bl	8003218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000672:	e7fe      	b.n	8000672 <main+0x52>
 8000674:	08005df4 	.word	0x08005df4
 8000678:	08000935 	.word	0x08000935
 800067c:	20000128 	.word	0x20000128
 8000680:	08005e18 	.word	0x08005e18
 8000684:	08000919 	.word	0x08000919
 8000688:	2000012c 	.word	0x2000012c
 800068c:	08005e3c 	.word	0x08005e3c
 8000690:	080008cd 	.word	0x080008cd
 8000694:	20000130 	.word	0x20000130

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b093      	sub	sp, #76	; 0x4c
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2410      	movs	r4, #16
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2338      	movs	r3, #56	; 0x38
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f005 faa2 	bl	8005bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f005 fa9b 	bl	8005bf2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fd6d 	bl	80011a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fda5 	bl	8001238 <HAL_RCC_OscConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f2:	f000 f93b 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	003b      	movs	r3, r7
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	003b      	movs	r3, r7
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 f8aa 	bl	800186c <HAL_RCC_ClockConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071c:	f000 f926 	bl	800096c <Error_Handler>
  }
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b013      	add	sp, #76	; 0x4c
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800072e:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <MX_USART2_UART_Init+0x98>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000734:	22e1      	movs	r2, #225	; 0xe1
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART2_UART_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000772:	0018      	movs	r0, r3
 8000774:	f001 feac 	bl	80024d0 <HAL_UART_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f8f6 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f002 fbbb 	bl	8002f00 <HAL_UARTEx_SetTxFifoThreshold>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800078e:	f000 f8ed 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_USART2_UART_Init+0x94>)
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f002 fbf2 	bl	8002f80 <HAL_UARTEx_SetRxFifoThreshold>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007a0:	f000 f8e4 	bl	800096c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_USART2_UART_Init+0x94>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fb70 	bl	8002e8c <HAL_UARTEx_DisableFifoMode>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f8dc 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000094 	.word	0x20000094
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	240c      	movs	r4, #12
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	0018      	movs	r0, r3
 80007d0:	2314      	movs	r3, #20
 80007d2:	001a      	movs	r2, r3
 80007d4:	2100      	movs	r1, #0
 80007d6:	f005 fa0c 	bl	8005bf2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007e0:	2104      	movs	r1, #4
 80007e2:	430a      	orrs	r2, r1
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ea:	2204      	movs	r2, #4
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <MX_GPIO_Init+0xd0>)
 80007f8:	2120      	movs	r1, #32
 80007fa:	430a      	orrs	r2, r1
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	2220      	movs	r2, #32
 8000804:	4013      	ands	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <MX_GPIO_Init+0xd0>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000810:	2101      	movs	r1, #1
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <MX_GPIO_Init+0xd0>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2201      	movs	r2, #1
 800081c:	4013      	ands	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000822:	23a0      	movs	r3, #160	; 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fc4c 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0192      	lsls	r2, r2, #6
 8000836:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	193b      	adds	r3, r7, r4
 800083a:	2284      	movs	r2, #132	; 0x84
 800083c:	0392      	lsls	r2, r2, #14
 800083e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000846:	193b      	adds	r3, r7, r4
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_GPIO_Init+0xd4>)
 800084a:	0019      	movs	r1, r3
 800084c:	0010      	movs	r0, r2
 800084e:	f000 fad7 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000852:	0021      	movs	r1, r4
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2220      	movs	r2, #32
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2202      	movs	r2, #2
 800086a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800086c:	187a      	adds	r2, r7, r1
 800086e:	23a0      	movs	r3, #160	; 0xa0
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fac3 	bl	8000e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2103      	movs	r1, #3
 800087e:	2007      	movs	r0, #7
 8000880:	f000 fa98 	bl	8000db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000884:	2007      	movs	r0, #7
 8000886:	f000 faaa 	bl	8000dde <HAL_NVIC_EnableIRQ>

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b009      	add	sp, #36	; 0x24
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	50000800 	.word	0x50000800

0800089c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	0002      	movs	r2, r0
 80008a4:	1dbb      	adds	r3, r7, #6
 80008a6:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	019b      	lsls	r3, r3, #6
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d105      	bne.n	80008c0 <HAL_GPIO_EXTI_Falling_Callback+0x24>
  {
    osThreadFlagsSet(blinkingRatioThreadHandle, BIT_1);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <HAL_GPIO_EXTI_Falling_Callback+0x2c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2102      	movs	r1, #2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f002 fd68 	bl	8003390 <osThreadFlagsSet>
  }
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000012c 	.word	0x2000012c

080008cc <ToggleLEDThread>:

void ToggleLEDThread(void * argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    osDelay(blinking_ratio);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <ToggleLEDThread+0x20>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 fe23 	bl	8003524 <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80008de:	23a0      	movs	r3, #160	; 0xa0
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2120      	movs	r1, #32
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fc0c 	bl	8001102 <HAL_GPIO_TogglePin>
    osDelay(blinking_ratio);
 80008ea:	e7f3      	b.n	80008d4 <ToggleLEDThread+0x8>
 80008ec:	20000000 	.word	0x20000000

080008f0 <ChangeBlinkingRatio>:
  }
}

void ChangeBlinkingRatio(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  if (blinking_ratio == 250)
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <ChangeBlinkingRatio+0x24>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2bfa      	cmp	r3, #250	; 0xfa
 80008fa:	d104      	bne.n	8000906 <ChangeBlinkingRatio+0x16>
    blinking_ratio = 1000;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <ChangeBlinkingRatio+0x24>)
 80008fe:	22fa      	movs	r2, #250	; 0xfa
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	601a      	str	r2, [r3, #0]
  else
    blinking_ratio = 250;
}
 8000904:	e002      	b.n	800090c <ChangeBlinkingRatio+0x1c>
    blinking_ratio = 250;
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <ChangeBlinkingRatio+0x24>)
 8000908:	22fa      	movs	r2, #250	; 0xfa
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000000 	.word	0x20000000

08000918 <ChangeBlinkingRatioThread>:

void ChangeBlinkingRatioThread(void * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  (void) argument;
  for(;;)
  {
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8000920:	2301      	movs	r3, #1
 8000922:	425b      	negs	r3, r3
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	2002      	movs	r0, #2
 800092a:	f002 fd7b 	bl	8003424 <osThreadFlagsWait>

    ChangeBlinkingRatio();
 800092e:	f7ff ffdf 	bl	80008f0 <ChangeBlinkingRatio>
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8000932:	e7f5      	b.n	8000920 <ChangeBlinkingRatioThread+0x8>

08000934 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800093c:	23fa      	movs	r3, #250	; 0xfa
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	0018      	movs	r0, r3
 8000942:	f002 fdef 	bl	8003524 <osDelay>
 8000946:	e7f9      	b.n	800093c <StartDefaultTask+0x8>

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 f987 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	40001000 	.word	0x40001000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_MspInit+0x50>)
 8000980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_MspInit+0x50>)
 8000984:	2101      	movs	r1, #1
 8000986:	430a      	orrs	r2, r1
 8000988:	641a      	str	r2, [r3, #64]	; 0x40
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <HAL_MspInit+0x50>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	2201      	movs	r2, #1
 8000990:	4013      	ands	r3, r2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_MspInit+0x50>)
 8000998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x50>)
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	0549      	lsls	r1, r1, #21
 80009a0:	430a      	orrs	r2, r1
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <HAL_MspInit+0x50>)
 80009a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	055b      	lsls	r3, r3, #21
 80009ac:	4013      	ands	r3, r2
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009b2:	2302      	movs	r3, #2
 80009b4:	425b      	negs	r3, r3
 80009b6:	2200      	movs	r2, #0
 80009b8:	2103      	movs	r1, #3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f9fa 	bl	8000db4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b097      	sub	sp, #92	; 0x5c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	2344      	movs	r3, #68	; 0x44
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	0018      	movs	r0, r3
 80009da:	2314      	movs	r3, #20
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f005 f907 	bl	8005bf2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	2410      	movs	r4, #16
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2334      	movs	r3, #52	; 0x34
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f005 f8ff 	bl	8005bf2 <memset>
  if(huart->Instance==USART2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_UART_MspInit+0xb8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d13e      	bne.n	8000a7c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2202      	movs	r2, #2
 8000a02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 f901 	bl	8001c14 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a16:	f7ff ffa9 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0289      	lsls	r1, r1, #10
 8000a24:	430a      	orrs	r2, r1
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	029b      	lsls	r3, r3, #10
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0xbc>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a4e:	2144      	movs	r1, #68	; 0x44
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2202      	movs	r2, #2
 8000a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2201      	movs	r2, #1
 8000a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	187a      	adds	r2, r7, r1
 8000a70:	23a0      	movs	r3, #160	; 0xa0
 8000a72:	05db      	lsls	r3, r3, #23
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f000 f9c2 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b017      	add	sp, #92	; 0x5c
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b5b0      	push	{r4, r5, r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a94:	232b      	movs	r3, #43	; 0x2b
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <HAL_InitTick+0xf0>)
 8000a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa0:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <HAL_InitTick+0xf0>)
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <HAL_InitTick+0xf0>)
 8000aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aac:	2210      	movs	r2, #16
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab4:	230c      	movs	r3, #12
 8000ab6:	18fa      	adds	r2, r7, r3
 8000ab8:	2410      	movs	r4, #16
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	0011      	movs	r1, r2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 f87e 	bl	8001bc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad0:	f001 f860 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000ad4:	0003      	movs	r3, r0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ad8:	e004      	b.n	8000ae4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ada:	f001 f85b 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae6:	4926      	ldr	r1, [pc, #152]	; (8000b80 <HAL_InitTick+0xf4>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fb0d 	bl	8000108 <__udivsi3>
 8000aee:	0003      	movs	r3, r0
 8000af0:	3b01      	subs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000af4:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_InitTick+0xf8>)
 8000af6:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <HAL_InitTick+0xfc>)
 8000af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <HAL_InitTick+0xf8>)
 8000afc:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <HAL_InitTick+0x100>)
 8000afe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b00:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_InitTick+0xf8>)
 8000b02:	6a3a      	ldr	r2, [r7, #32]
 8000b04:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xf8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_InitTick+0xf8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xf8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b18:	252b      	movs	r5, #43	; 0x2b
 8000b1a:	197c      	adds	r4, r7, r5
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_InitTick+0xf8>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 fa30 	bl	8001f84 <HAL_TIM_Base_Init>
 8000b24:	0003      	movs	r3, r0
 8000b26:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000b28:	197b      	adds	r3, r7, r5
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d11e      	bne.n	8000b6e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b30:	197c      	adds	r4, r7, r5
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0xf8>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 fa85 	bl	8002044 <HAL_TIM_Base_Start_IT>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d113      	bne.n	8000b6e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000b46:	2011      	movs	r0, #17
 8000b48:	f000 f949 	bl	8000dde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d809      	bhi.n	8000b66 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	0019      	movs	r1, r3
 8000b58:	2011      	movs	r0, #17
 8000b5a:	f000 f92b 	bl	8000db4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_InitTick+0x104>)
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	e003      	b.n	8000b6e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000b66:	232b      	movs	r3, #43	; 0x2b
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000b6e:	232b      	movs	r3, #43	; 0x2b
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	781b      	ldrb	r3, [r3, #0]
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b00c      	add	sp, #48	; 0x30
 8000b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	000f4240 	.word	0x000f4240
 8000b84:	20000134 	.word	0x20000134
 8000b88:	40001000 	.word	0x40001000
 8000b8c:	000003e7 	.word	0x000003e7
 8000b90:	20000008 	.word	0x20000008

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	019b      	lsls	r3, r3, #6
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 fac5 	bl	8001138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fa9e 	bl	80020fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	20000134 	.word	0x20000134

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff fff6 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	; (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	; (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c06:	f004 ffc5 	bl	8005b94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c0a:	f7ff fd09 	bl	8000620 <main>

08000c0e <LoopForever>:

LoopForever:
  b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   r0, =_estack
 8000c10:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c1c:	08005fa8 	.word	0x08005fa8
  ldr r2, =_sbss
 8000c20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c24:	20001b94 	.word	0x20001b94

08000c28 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_COMP_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x3c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Init+0x3c>)
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	0049      	lsls	r1, r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c46:	2003      	movs	r0, #3
 8000c48:	f7ff ff20 	bl	8000a8c <HAL_InitTick>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d003      	beq.n	8000c58 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e001      	b.n	8000c5c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fe8e 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781b      	ldrb	r3, [r3, #0]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000180 	.word	0x20000180

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000180 	.word	0x20000180

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb6:	d809      	bhi.n	8000ccc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	231f      	movs	r3, #31
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_EnableIRQ+0x30>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b7f      	cmp	r3, #127	; 0x7f
 8000cec:	d828      	bhi.n	8000d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <__NVIC_SetPriority+0xd4>)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	33c0      	adds	r3, #192	; 0xc0
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	589b      	ldr	r3, [r3, r2]
 8000cfe:	1dfa      	adds	r2, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	0011      	movs	r1, r2
 8000d04:	2203      	movs	r2, #3
 8000d06:	400a      	ands	r2, r1
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	21ff      	movs	r1, #255	; 0xff
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	401a      	ands	r2, r3
 8000d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	22ff      	movs	r2, #255	; 0xff
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	2303      	movs	r3, #3
 8000d26:	4003      	ands	r3, r0
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	481f      	ldr	r0, [pc, #124]	; (8000dac <__NVIC_SetPriority+0xd4>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3e:	e031      	b.n	8000da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0019      	movs	r1, r3
 8000d48:	230f      	movs	r3, #15
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3306      	adds	r3, #6
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001c      	movs	r4, r3
 8000d90:	230f      	movs	r3, #15
 8000d92:	4023      	ands	r3, r4
 8000d94:	3b08      	subs	r3, #8
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18c3      	adds	r3, r0, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	1c02      	adds	r2, r0, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	0011      	movs	r1, r2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ff81 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b004      	add	sp, #16
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	0002      	movs	r2, r0
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b25b      	sxtb	r3, r3
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff ff57 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0e:	e147      	b.n	80010a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2101      	movs	r1, #1
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <HAL_GPIO_Init+0x28>
 8000e26:	e138      	b.n	800109a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d005      	beq.n	8000e40 <HAL_GPIO_Init+0x40>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d017      	beq.n	8000ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d123      	bne.n	8000f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	58d3      	ldr	r3, [r2, r3]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2207      	movs	r2, #7
 8000efc:	4013      	ands	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2107      	movs	r1, #7
 8000f16:	400b      	ands	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	08da      	lsrs	r2, r3, #3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3208      	adds	r2, #8
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	6939      	ldr	r1, [r7, #16]
 8000f30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	401a      	ands	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	029b      	lsls	r3, r3, #10
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d100      	bne.n	8000f74 <HAL_GPIO_Init+0x174>
 8000f72:	e092      	b.n	800109a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f74:	4a50      	ldr	r2, [pc, #320]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	589b      	ldr	r3, [r3, r2]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2203      	movs	r2, #3
 8000f86:	4013      	ands	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	23a0      	movs	r3, #160	; 0xa0
 8000f9c:	05db      	lsls	r3, r3, #23
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1ca>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a45      	ldr	r2, [pc, #276]	; (80010bc <HAL_GPIO_Init+0x2bc>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1c6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a44      	ldr	r2, [pc, #272]	; (80010c0 <HAL_GPIO_Init+0x2c0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1c2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_GPIO_Init+0x2c4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1be>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x1cc>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x1cc>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x1cc>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x1cc>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	2103      	movs	r1, #3
 8000fd0:	400a      	ands	r2, r1
 8000fd2:	00d2      	lsls	r2, r2, #3
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fdc:	4936      	ldr	r1, [pc, #216]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3318      	adds	r3, #24
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	035b      	lsls	r3, r3, #13
 8001002:	4013      	ands	r3, r2
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	4013      	ands	r3, r2
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800103e:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8001040:	2384      	movs	r3, #132	; 0x84
 8001042:	58d3      	ldr	r3, [r2, r3]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001064:	4914      	ldr	r1, [pc, #80]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8001066:	2284      	movs	r2, #132	; 0x84
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	4013      	ands	r3, r2
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001092:	4909      	ldr	r1, [pc, #36]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	1e13      	subs	r3, r2, #0
 80010aa:	d000      	beq.n	80010ae <HAL_GPIO_Init+0x2ae>
 80010ac:	e6b0      	b.n	8000e10 <HAL_GPIO_Init+0x10>
  }
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b006      	add	sp, #24
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021800 	.word	0x40021800
 80010bc:	50000400 	.word	0x50000400
 80010c0:	50000800 	.word	0x50000800
 80010c4:	50000c00 	.word	0x50000c00

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	0008      	movs	r0, r1
 80010d2:	0011      	movs	r1, r2
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	1c02      	adds	r2, r0, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	1c7b      	adds	r3, r7, #1
 80010dc:	1c0a      	adds	r2, r1, #0
 80010de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e0:	1c7b      	adds	r3, r7, #1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	881a      	ldrh	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f2:	1cbb      	adds	r3, r7, #2
 80010f4:	881a      	ldrh	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	000a      	movs	r2, r1
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001116:	1cbb      	adds	r3, r7, #2
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	041a      	lsls	r2, r3, #16
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	1cb9      	adds	r1, r7, #2
 8001126:	8809      	ldrh	r1, [r1, #0]
 8001128:	400b      	ands	r3, r1
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	0002      	movs	r2, r0
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	1dba      	adds	r2, r7, #6
 800114a:	8812      	ldrh	r2, [r2, #0]
 800114c:	4013      	ands	r3, r2
 800114e:	d008      	beq.n	8001162 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001152:	1dba      	adds	r2, r7, #6
 8001154:	8812      	ldrh	r2, [r2, #0]
 8001156:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001158:	1dbb      	adds	r3, r7, #6
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	0018      	movs	r0, r3
 800115e:	f000 f815 	bl	800118c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	1dba      	adds	r2, r7, #6
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	4013      	ands	r3, r2
 800116c:	d008      	beq.n	8001180 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001170:	1dba      	adds	r2, r7, #6
 8001172:	8812      	ldrh	r2, [r2, #0]
 8001174:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	0018      	movs	r0, r3
 800117c:	f7ff fb8e 	bl	800089c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b002      	add	sp, #8
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021800 	.word	0x40021800

0800118c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d11f      	bne.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	0013      	movs	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	189b      	adds	r3, r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4912      	ldr	r1, [pc, #72]	; (800121c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7fe ff98 	bl	8000108 <__udivsi3>
 80011d8:	0003      	movs	r3, r0
 80011da:	3301      	adds	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011de:	e008      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e001      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e009      	b.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	401a      	ands	r2, r3
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	429a      	cmp	r2, r3
 8001202:	d0ed      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b004      	add	sp, #16
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40007000 	.word	0x40007000
 8001214:	fffff9ff 	.word	0xfffff9ff
 8001218:	20000004 	.word	0x20000004
 800121c:	000f4240 	.word	0x000f4240

08001220 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	23e0      	movs	r3, #224	; 0xe0
 800122a:	01db      	lsls	r3, r3, #7
 800122c:	4013      	ands	r3, r2
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e2fe      	b.n	8001848 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2201      	movs	r2, #1
 8001250:	4013      	ands	r3, r2
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x1e>
 8001254:	e07c      	b.n	8001350 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4bc3      	ldr	r3, [pc, #780]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	2238      	movs	r2, #56	; 0x38
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4bc0      	ldr	r3, [pc, #768]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2203      	movs	r2, #3
 8001266:	4013      	ands	r3, r2
 8001268:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d102      	bne.n	8001276 <HAL_RCC_OscConfig+0x3e>
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d002      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4bb9      	ldr	r3, [pc, #740]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d062      	beq.n	800134e <HAL_RCC_OscConfig+0x116>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d15e      	bne.n	800134e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e2d9      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	429a      	cmp	r2, r3
 800129e:	d107      	bne.n	80012b0 <HAL_RCC_OscConfig+0x78>
 80012a0:	4bb0      	ldr	r3, [pc, #704]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4baf      	ldr	r3, [pc, #700]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0249      	lsls	r1, r1, #9
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e020      	b.n	80012f2 <HAL_RCC_OscConfig+0xba>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	02db      	lsls	r3, r3, #11
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10e      	bne.n	80012da <HAL_RCC_OscConfig+0xa2>
 80012bc:	4ba9      	ldr	r3, [pc, #676]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4ba8      	ldr	r3, [pc, #672]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	02c9      	lsls	r1, r1, #11
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4ba6      	ldr	r3, [pc, #664]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4ba5      	ldr	r3, [pc, #660]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	0249      	lsls	r1, r1, #9
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e00b      	b.n	80012f2 <HAL_RCC_OscConfig+0xba>
 80012da:	4ba2      	ldr	r3, [pc, #648]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba1      	ldr	r3, [pc, #644]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	49a1      	ldr	r1, [pc, #644]	; (8001568 <HAL_RCC_OscConfig+0x330>)
 80012e2:	400a      	ands	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4b9f      	ldr	r3, [pc, #636]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b9e      	ldr	r3, [pc, #632]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	499f      	ldr	r1, [pc, #636]	; (800156c <HAL_RCC_OscConfig+0x334>)
 80012ee:	400a      	ands	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d014      	beq.n	8001324 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fcc9 	bl	8000c90 <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fcc4 	bl	8000c90 <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e298      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001316:	4b93      	ldr	r3, [pc, #588]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	029b      	lsls	r3, r3, #10
 800131e:	4013      	ands	r3, r2
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xcc>
 8001322:	e015      	b.n	8001350 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fcb4 	bl	8000c90 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132e:	f7ff fcaf 	bl	8000c90 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e283      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001340:	4b88      	ldr	r3, [pc, #544]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	029b      	lsls	r3, r3, #10
 8001348:	4013      	ands	r3, r2
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0xf6>
 800134c:	e000      	b.n	8001350 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2202      	movs	r2, #2
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_RCC_OscConfig+0x124>
 800135a:	e099      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2238      	movs	r2, #56	; 0x38
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2203      	movs	r2, #3
 800136c:	4013      	ands	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d102      	bne.n	800137c <HAL_RCC_OscConfig+0x144>
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d002      	beq.n	8001382 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d135      	bne.n	80013ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001382:	4b78      	ldr	r3, [pc, #480]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4013      	ands	r3, r2
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x162>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e256      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b72      	ldr	r3, [pc, #456]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a74      	ldr	r2, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x338>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	021a      	lsls	r2, r3, #8
 80013aa:	4b6e      	ldr	r3, [pc, #440]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a6e      	ldr	r2, [pc, #440]	; (8001574 <HAL_RCC_OscConfig+0x33c>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	4b67      	ldr	r3, [pc, #412]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013ca:	4b66      	ldr	r3, [pc, #408]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0adb      	lsrs	r3, r3, #11
 80013d0:	2207      	movs	r2, #7
 80013d2:	4013      	ands	r3, r2
 80013d4:	4a68      	ldr	r2, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x340>)
 80013d6:	40da      	lsrs	r2, r3
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x344>)
 80013da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_OscConfig+0x348>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff fb53 	bl	8000a8c <HAL_InitTick>
 80013e6:	1e03      	subs	r3, r0, #0
 80013e8:	d051      	beq.n	800148e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e22c      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d030      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013f6:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5e      	ldr	r2, [pc, #376]	; (8001574 <HAL_RCC_OscConfig+0x33c>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	0049      	lsls	r1, r1, #1
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fc3a 	bl	8000c90 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc35 	bl	8000c90 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e209      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4013      	ands	r3, r2
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x338>)
 8001446:	4013      	ands	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	021a      	lsls	r2, r3, #8
 8001450:	4b44      	ldr	r3, [pc, #272]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001452:	430a      	orrs	r2, r1
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800145e:	4949      	ldr	r1, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x34c>)
 8001460:	400a      	ands	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc14 	bl	8000c90 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fc0f 	bl	8000c90 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1e3      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001480:	4b38      	ldr	r3, [pc, #224]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4013      	ands	r3, r2
 800148a:	d1f0      	bne.n	800146e <HAL_RCC_OscConfig+0x236>
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2208      	movs	r2, #8
 8001496:	4013      	ands	r3, r2
 8001498:	d047      	beq.n	800152a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800149a:	4b32      	ldr	r3, [pc, #200]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2238      	movs	r2, #56	; 0x38
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b18      	cmp	r3, #24
 80014a4:	d10a      	bne.n	80014bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	2202      	movs	r2, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	d03c      	beq.n	800152a <HAL_RCC_OscConfig+0x2f2>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d138      	bne.n	800152a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e1c5      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d019      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	430a      	orrs	r2, r1
 80014ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fbde 	bl	8000c90 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fbd9 	bl	8000c90 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1ad      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d0f1      	beq.n	80014da <HAL_RCC_OscConfig+0x2a2>
 80014f6:	e018      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	2101      	movs	r1, #1
 8001500:	438a      	bics	r2, r1
 8001502:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fbc4 	bl	8000c90 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fbbf 	bl	8000c90 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e193      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f1      	bne.n	800150e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2204      	movs	r2, #4
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCC_OscConfig+0x2fe>
 8001534:	e0c6      	b.n	80016c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	231f      	movs	r3, #31
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2238      	movs	r2, #56	; 0x38
 8001544:	4013      	ands	r3, r2
 8001546:	2b20      	cmp	r3, #32
 8001548:	d11e      	bne.n	8001588 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_RCC_OscConfig+0x32c>)
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d100      	bne.n	8001556 <HAL_RCC_OscConfig+0x31e>
 8001554:	e0b6      	b.n	80016c4 <HAL_RCC_OscConfig+0x48c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d000      	beq.n	8001560 <HAL_RCC_OscConfig+0x328>
 800155e:	e0b1      	b.n	80016c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e171      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
 8001564:	40021000 	.word	0x40021000
 8001568:	fffeffff 	.word	0xfffeffff
 800156c:	fffbffff 	.word	0xfffbffff
 8001570:	ffff80ff 	.word	0xffff80ff
 8001574:	ffffc7ff 	.word	0xffffc7ff
 8001578:	00f42400 	.word	0x00f42400
 800157c:	20000004 	.word	0x20000004
 8001580:	20000008 	.word	0x20000008
 8001584:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001588:	4bb1      	ldr	r3, [pc, #708]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800158a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	055b      	lsls	r3, r3, #21
 8001590:	4013      	ands	r3, r2
 8001592:	d101      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x362>
 8001598:	2300      	movs	r3, #0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d011      	beq.n	80015c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4bac      	ldr	r3, [pc, #688]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80015a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a2:	4bab      	ldr	r3, [pc, #684]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	0549      	lsls	r1, r1, #21
 80015a8:	430a      	orrs	r2, r1
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ac:	4ba8      	ldr	r3, [pc, #672]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80015ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	055b      	lsls	r3, r3, #21
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015ba:	231f      	movs	r3, #31
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c2:	4ba4      	ldr	r3, [pc, #656]	; (8001854 <HAL_RCC_OscConfig+0x61c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d11a      	bne.n	8001604 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ce:	4ba1      	ldr	r3, [pc, #644]	; (8001854 <HAL_RCC_OscConfig+0x61c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4ba0      	ldr	r3, [pc, #640]	; (8001854 <HAL_RCC_OscConfig+0x61c>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0049      	lsls	r1, r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb58 	bl	8000c90 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fb53 	bl	8000c90 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e127      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f8:	4b96      	ldr	r3, [pc, #600]	; (8001854 <HAL_RCC_OscConfig+0x61c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x3e2>
 800160c:	4b90      	ldr	r3, [pc, #576]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800160e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c
 8001618:	e01c      	b.n	8001654 <HAL_RCC_OscConfig+0x41c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x404>
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001624:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001626:	4b8a      	ldr	r3, [pc, #552]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001628:	2104      	movs	r1, #4
 800162a:	430a      	orrs	r2, r1
 800162c:	65da      	str	r2, [r3, #92]	; 0x5c
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001632:	4b87      	ldr	r3, [pc, #540]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	65da      	str	r2, [r3, #92]	; 0x5c
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0x41c>
 800163c:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800163e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001640:	4b83      	ldr	r3, [pc, #524]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001642:	2101      	movs	r1, #1
 8001644:	438a      	bics	r2, r1
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800164a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800164c:	4b80      	ldr	r3, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800164e:	2104      	movs	r1, #4
 8001650:	438a      	bics	r2, r1
 8001652:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d014      	beq.n	8001686 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb18 	bl	8000c90 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001664:	e009      	b.n	800167a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fb13 	bl	8000c90 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a79      	ldr	r2, [pc, #484]	; (8001858 <HAL_RCC_OscConfig+0x620>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0e6      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800167a:	4b75      	ldr	r3, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x42e>
 8001684:	e013      	b.n	80016ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fb03 	bl	8000c90 <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800168e:	e009      	b.n	80016a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fafe 	bl	8000c90 <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	4a6f      	ldr	r2, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x620>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e0d1      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a4:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ae:	231f      	movs	r3, #31
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d105      	bne.n	80016c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016b8:	4b65      	ldr	r3, [pc, #404]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80016ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80016be:	4967      	ldr	r1, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x624>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x496>
 80016cc:	e0bb      	b.n	8001846 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2238      	movs	r2, #56	; 0x38
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x4a4>
 80016da:	e07b      	b.n	80017d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d156      	bne.n	8001792 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80016ea:	495d      	ldr	r1, [pc, #372]	; (8001860 <HAL_RCC_OscConfig+0x628>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff face 	bl	8000c90 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fac9 	bl	8000c90 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e09d      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	049b      	lsls	r3, r3, #18
 8001714:	4013      	ands	r3, r2
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <HAL_RCC_OscConfig+0x62c>)
 800171e:	4013      	ands	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1a      	ldr	r2, [r3, #32]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	431a      	orrs	r2, r3
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0449      	lsls	r1, r1, #17
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	0549      	lsls	r1, r1, #21
 8001764:	430a      	orrs	r2, r1
 8001766:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fa92 	bl	8000c90 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fa8d 	bl	8000c90 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e061      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001784:	4b32      	ldr	r3, [pc, #200]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	049b      	lsls	r3, r3, #18
 800178c:	4013      	ands	r3, r2
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x53a>
 8001790:	e059      	b.n	8001846 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 8001798:	4931      	ldr	r1, [pc, #196]	; (8001860 <HAL_RCC_OscConfig+0x628>)
 800179a:	400a      	ands	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa77 	bl	8000c90 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fa72 	bl	8000c90 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e046      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	049b      	lsls	r3, r3, #18
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80017cc:	4926      	ldr	r1, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x630>)
 80017ce:	400a      	ands	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e038      	b.n	8001846 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e033      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x618>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2203      	movs	r2, #3
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d126      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2270      	movs	r2, #112	; 0x70
 80017f8:	401a      	ands	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d11f      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	23fe      	movs	r3, #254	; 0xfe
 8001806:	01db      	lsls	r3, r3, #7
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d116      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	23f8      	movs	r3, #248	; 0xf8
 8001818:	039b      	lsls	r3, r3, #14
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d10e      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	23e0      	movs	r3, #224	; 0xe0
 8001828:	051b      	lsls	r3, r3, #20
 800182a:	401a      	ands	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	0f5b      	lsrs	r3, r3, #29
 8001838:	075a      	lsls	r2, r3, #29
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b008      	add	sp, #32
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40007000 	.word	0x40007000
 8001858:	00001388 	.word	0x00001388
 800185c:	efffffff 	.word	0xefffffff
 8001860:	feffffff 	.word	0xfeffffff
 8001864:	11c1808c 	.word	0x11c1808c
 8001868:	eefefffc 	.word	0xeefefffc

0800186c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0e9      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2207      	movs	r2, #7
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d91e      	bls.n	80018cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2207      	movs	r2, #7
 8001894:	4393      	bics	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a0:	f7ff f9f6 	bl	8000c90 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a8:	e009      	b.n	80018be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f7ff f9f1 	bl	8000c90 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a6a      	ldr	r2, [pc, #424]	; (8001a60 <HAL_RCC_ClockConfig+0x1f4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0ca      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2207      	movs	r2, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2202      	movs	r2, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d006      	beq.n	80018ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018e0:	4b60      	ldr	r3, [pc, #384]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 80018e6:	21e0      	movs	r1, #224	; 0xe0
 80018e8:	01c9      	lsls	r1, r1, #7
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_RCC_ClockConfig+0x1fc>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	0019      	movs	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	d057      	beq.n	80019bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d107      	bne.n	8001924 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	029b      	lsls	r3, r3, #10
 800191c:	4013      	ands	r3, r2
 800191e:	d12b      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e097      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d107      	bne.n	800193c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192c:	4b4d      	ldr	r3, [pc, #308]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	049b      	lsls	r3, r3, #18
 8001934:	4013      	ands	r3, r2
 8001936:	d11f      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e08b      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4013      	ands	r3, r2
 800194e:	d113      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e07f      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d106      	bne.n	800196a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d108      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e074      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e06d      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2207      	movs	r2, #7
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198c:	f7ff f980 	bl	8000c90 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001994:	e009      	b.n	80019aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001996:	f7ff f97b 	bl	8000c90 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_RCC_ClockConfig+0x1f4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e054      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2238      	movs	r2, #56	; 0x38
 80019b0:	401a      	ands	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1ec      	bne.n	8001996 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2207      	movs	r2, #7
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d21e      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2207      	movs	r2, #7
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019dc:	f7ff f958 	bl	8000c90 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e6:	f7ff f953 	bl	8000c90 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <HAL_RCC_ClockConfig+0x1f4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e02c      	b.n	8001a54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2207      	movs	r2, #7
 8001a00:	4013      	ands	r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_RCC_ClockConfig+0x200>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a26:	f000 f829 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001a2a:	0001      	movs	r1, r0
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	220f      	movs	r2, #15
 8001a34:	401a      	ands	r2, r3
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_RCC_ClockConfig+0x204>)
 8001a38:	0092      	lsls	r2, r2, #2
 8001a3a:	58d3      	ldr	r3, [r2, r3]
 8001a3c:	221f      	movs	r2, #31
 8001a3e:	4013      	ands	r3, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	40da      	lsrs	r2, r3
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_ClockConfig+0x208>)
 8001a46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x20c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff f81d 	bl	8000a8c <HAL_InitTick>
 8001a52:	0003      	movs	r3, r0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b004      	add	sp, #16
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	00001388 	.word	0x00001388
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fffff0ff 	.word	0xfffff0ff
 8001a6c:	ffff8fff 	.word	0xffff8fff
 8001a70:	08005e60 	.word	0x08005e60
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d10f      	bne.n	8001aac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0adb      	lsrs	r3, r3, #11
 8001a92:	2207      	movs	r2, #7
 8001a94:	4013      	ands	r3, r2
 8001a96:	2201      	movs	r2, #1
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	0013      	movs	r3, r2
 8001a9c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	4835      	ldr	r0, [pc, #212]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001aa2:	f7fe fb31 	bl	8000108 <__udivsi3>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e05d      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2238      	movs	r2, #56	; 0x38
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ab8:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	e054      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2238      	movs	r2, #56	; 0x38
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d138      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	2207      	movs	r2, #7
 8001adc:	4013      	ands	r3, r2
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d10d      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	4824      	ldr	r0, [pc, #144]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x100>)
 8001aec:	f7fe fb0c 	bl	8000108 <__udivsi3>
 8001af0:	0003      	movs	r3, r0
 8001af2:	0019      	movs	r1, r3
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	227f      	movs	r2, #127	; 0x7f
 8001afc:	4013      	ands	r3, r2
 8001afe:	434b      	muls	r3, r1
 8001b00:	617b      	str	r3, [r7, #20]
        break;
 8001b02:	e00d      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	481c      	ldr	r0, [pc, #112]	; (8001b78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b08:	f7fe fafe 	bl	8000108 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	0019      	movs	r1, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	227f      	movs	r2, #127	; 0x7f
 8001b18:	4013      	ands	r3, r2
 8001b1a:	434b      	muls	r3, r1
 8001b1c:	617b      	str	r3, [r7, #20]
        break;
 8001b1e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0f5b      	lsrs	r3, r3, #29
 8001b26:	2207      	movs	r2, #7
 8001b28:	4013      	ands	r3, r2
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f7fe fae9 	bl	8000108 <__udivsi3>
 8001b36:	0003      	movs	r3, r0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e015      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2238      	movs	r2, #56	; 0x38
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d103      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2238      	movs	r2, #56	; 0x38
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b18      	cmp	r3, #24
 8001b5a:	d103      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b5c:	23fa      	movs	r3, #250	; 0xfa
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	e001      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b68:	693b      	ldr	r3, [r7, #16]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b006      	add	sp, #24
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	40021000 	.word	0x40021000
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001b98:	f7ff fff2 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001b9c:	0004      	movs	r4, r0
 8001b9e:	f7ff fb3f 	bl	8001220 <LL_RCC_GetAPB1Prescaler>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	0b1a      	lsrs	r2, r3, #12
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	58d3      	ldr	r3, [r2, r3]
 8001bac:	221f      	movs	r2, #31
 8001bae:	4013      	ands	r3, r2
 8001bb0:	40dc      	lsrs	r4, r3
 8001bb2:	0023      	movs	r3, r4
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	08005ea0 	.word	0x08005ea0

08001bc0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_RCC_GetClockConfig+0x4c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_GetClockConfig+0x4c>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	23f0      	movs	r3, #240	; 0xf0
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_RCC_GetClockConfig+0x4c>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	23e0      	movs	r3, #224	; 0xe0
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetClockConfig+0x50>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	401a      	ands	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c1c:	2313      	movs	r3, #19
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c24:	2312      	movs	r3, #18
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	d100      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c38:	e0a3      	b.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2011      	movs	r0, #17
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4bc3      	ldr	r3, [pc, #780]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	055b      	lsls	r3, r3, #21
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d110      	bne.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4bc0      	ldr	r3, [pc, #768]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c52:	4bbf      	ldr	r3, [pc, #764]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0549      	lsls	r1, r1, #21
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c5c:	4bbc      	ldr	r3, [pc, #752]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c70:	4bb8      	ldr	r3, [pc, #736]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4bb7      	ldr	r3, [pc, #732]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	0049      	lsls	r1, r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c7e:	f7ff f807 	bl	8000c90 <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7ff f802 	bl	8000c90 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d904      	bls.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001c96:	2313      	movs	r3, #19
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	701a      	strb	r2, [r3, #0]
        break;
 8001c9e:	e005      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ca0:	4bac      	ldr	r3, [pc, #688]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d0ed      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cac:	2313      	movs	r3, #19
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d154      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cb6:	4ba6      	ldr	r3, [pc, #664]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d019      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d014      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cd2:	4b9f      	ldr	r3, [pc, #636]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	4aa0      	ldr	r2, [pc, #640]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cdc:	4b9c      	ldr	r3, [pc, #624]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ce0:	4b9b      	ldr	r3, [pc, #620]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0249      	lsls	r1, r1, #9
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cea:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cee:	4b98      	ldr	r3, [pc, #608]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf0:	499a      	ldr	r1, [pc, #616]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cf6:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d016      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7fe ffc4 	bl	8000c90 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0c:	e00c      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7fe ffbf 	bl	8000c90 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a91      	ldr	r2, [pc, #580]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d904      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d1e:	2313      	movs	r3, #19
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	2203      	movs	r2, #3
 8001d24:	701a      	strb	r2, [r3, #0]
            break;
 8001d26:	e004      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d28:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d0ed      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d32:	2313      	movs	r3, #19
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10a      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d3c:	4b84      	ldr	r3, [pc, #528]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	4a85      	ldr	r2, [pc, #532]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4a:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d50:	e00c      	b.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d52:	2312      	movs	r3, #18
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2213      	movs	r2, #19
 8001d58:	18ba      	adds	r2, r7, r2
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	e005      	b.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d60:	2312      	movs	r3, #18
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2213      	movs	r2, #19
 8001d66:	18ba      	adds	r2, r7, r2
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6c:	2311      	movs	r3, #17
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d7a:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7c:	4979      	ldr	r1, [pc, #484]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d8c:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	2203      	movs	r2, #3
 8001d92:	4393      	bics	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001daa:	4b69      	ldr	r3, [pc, #420]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	220c      	movs	r2, #12
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b65      	ldr	r3, [pc, #404]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dc8:	4b61      	ldr	r3, [pc, #388]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	4a5f      	ldr	r2, [pc, #380]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4013      	ands	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2220      	movs	r2, #32
 8001e22:	4013      	ands	r3, r2
 8001e24:	d009      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	4013      	ands	r3, r2
 8001e44:	d015      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	0899      	lsrs	r1, r3, #2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1a      	ldr	r2, [r3, #32]
 8001e52:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	05db      	lsls	r3, r3, #23
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0249      	lsls	r1, r1, #9
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	031b      	lsls	r3, r3, #12
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	4393      	bics	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	039b      	lsls	r3, r3, #14
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d016      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea2:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	03db      	lsls	r3, r3, #15
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d106      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0449      	lsls	r1, r1, #17
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	03db      	lsls	r3, r3, #15
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d016      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	045b      	lsls	r3, r3, #17
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0449      	lsls	r1, r1, #17
 8001f02:	430a      	orrs	r2, r1
 8001f04:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d016      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	01db      	lsls	r3, r3, #7
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d106      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0249      	lsls	r1, r1, #9
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f40:	2312      	movs	r3, #18
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	781b      	ldrb	r3, [r3, #0]
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b006      	add	sp, #24
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40007000 	.word	0x40007000
 8001f58:	fffffcff 	.word	0xfffffcff
 8001f5c:	fffeffff 	.word	0xfffeffff
 8001f60:	00001388 	.word	0x00001388
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	fffff3ff 	.word	0xfffff3ff
 8001f6c:	fff3ffff 	.word	0xfff3ffff
 8001f70:	ffcfffff 	.word	0xffcfffff
 8001f74:	ffffcfff 	.word	0xffffcfff
 8001f78:	ffbfffff 	.word	0xffbfffff
 8001f7c:	feffffff 	.word	0xfeffffff
 8001f80:	ffff3fff 	.word	0xffff3fff

08001f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e04a      	b.n	800202c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	223d      	movs	r2, #61	; 0x3d
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	223c      	movs	r2, #60	; 0x3c
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 f841 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	223d      	movs	r2, #61	; 0x3d
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	f000 f9eb 	bl	80023a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2248      	movs	r2, #72	; 0x48
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	223e      	movs	r2, #62	; 0x3e
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	223f      	movs	r2, #63	; 0x3f
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2241      	movs	r2, #65	; 0x41
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2242      	movs	r2, #66	; 0x42
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2243      	movs	r2, #67	; 0x43
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2244      	movs	r2, #68	; 0x44
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2245      	movs	r2, #69	; 0x45
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2246      	movs	r2, #70	; 0x46
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2247      	movs	r2, #71	; 0x47
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	223d      	movs	r2, #61	; 0x3d
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	223d      	movs	r2, #61	; 0x3d
 8002050:	5c9b      	ldrb	r3, [r3, r2]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d001      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e042      	b.n	80020e2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	223d      	movs	r2, #61	; 0x3d
 8002060:	2102      	movs	r1, #2
 8002062:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_TIM_Base_Start_IT+0xa8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00f      	beq.n	800209e <HAL_TIM_Base_Start_IT+0x5a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	05db      	lsls	r3, r3, #23
 8002086:	429a      	cmp	r2, r3
 8002088:	d009      	beq.n	800209e <HAL_TIM_Base_Start_IT+0x5a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_Base_Start_IT+0xac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d004      	beq.n	800209e <HAL_TIM_Base_Start_IT+0x5a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d116      	bne.n	80020cc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <HAL_TIM_Base_Start_IT+0xb4>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d016      	beq.n	80020de <HAL_TIM_Base_Start_IT+0x9a>
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d011      	beq.n	80020de <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ca:	e008      	b.n	80020de <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e000      	b.n	80020e0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b004      	add	sp, #16
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40014000 	.word	0x40014000
 80020f8:	00010007 	.word	0x00010007

080020fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d124      	bne.n	800215c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d11d      	bne.n	800215c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2203      	movs	r2, #3
 8002126:	4252      	negs	r2, r2
 8002128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2203      	movs	r2, #3
 8002138:	4013      	ands	r3, r2
 800213a:	d004      	beq.n	8002146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f916 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 8002144:	e007      	b.n	8002156 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 f909 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0018      	movs	r0, r3
 8002152:	f000 f915 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2204      	movs	r2, #4
 8002164:	4013      	ands	r3, r2
 8002166:	2b04      	cmp	r3, #4
 8002168:	d125      	bne.n	80021b6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	2b04      	cmp	r3, #4
 8002176:	d11e      	bne.n	80021b6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2205      	movs	r2, #5
 800217e:	4252      	negs	r2, r2
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0018      	movs	r0, r3
 800219a:	f000 f8e9 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 800219e:	e007      	b.n	80021b0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f8dc 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 f8e8 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2208      	movs	r2, #8
 80021be:	4013      	ands	r3, r2
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d124      	bne.n	800220e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2208      	movs	r2, #8
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11d      	bne.n	800220e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2209      	movs	r2, #9
 80021d8:	4252      	negs	r2, r2
 80021da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2203      	movs	r2, #3
 80021ea:	4013      	ands	r3, r2
 80021ec:	d004      	beq.n	80021f8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f8bd 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 80021f6:	e007      	b.n	8002208 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 f8b0 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	0018      	movs	r0, r3
 8002204:	f000 f8bc 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2210      	movs	r2, #16
 8002216:	4013      	ands	r3, r2
 8002218:	2b10      	cmp	r3, #16
 800221a:	d125      	bne.n	8002268 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2210      	movs	r2, #16
 8002224:	4013      	ands	r3, r2
 8002226:	2b10      	cmp	r3, #16
 8002228:	d11e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2211      	movs	r2, #17
 8002230:	4252      	negs	r2, r2
 8002232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2208      	movs	r2, #8
 8002238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	23c0      	movs	r3, #192	; 0xc0
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d004      	beq.n	8002252 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f890 	bl	8002370 <HAL_TIM_IC_CaptureCallback>
 8002250:	e007      	b.n	8002262 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f883 	bl	8002360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f88f 	bl	8002380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2201      	movs	r2, #1
 8002270:	4013      	ands	r3, r2
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10f      	bne.n	8002296 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2202      	movs	r2, #2
 800228a:	4252      	negs	r2, r2
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f7fe fb59 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	4013      	ands	r3, r2
 80022a0:	2b80      	cmp	r3, #128	; 0x80
 80022a2:	d10f      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d108      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2281      	movs	r2, #129	; 0x81
 80022b8:	4252      	negs	r2, r2
 80022ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f8f6 	bl	80024b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	401a      	ands	r2, r3
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10e      	bne.n	80022f6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b80      	cmp	r3, #128	; 0x80
 80022e4:	d107      	bne.n	80022f6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_TIM_IRQHandler+0x260>)
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 f8e5 	bl	80024c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2240      	movs	r2, #64	; 0x40
 80022fe:	4013      	ands	r3, r2
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d10f      	bne.n	8002324 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	4013      	ands	r3, r2
 800230e:	2b40      	cmp	r3, #64	; 0x40
 8002310:	d108      	bne.n	8002324 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2241      	movs	r2, #65	; 0x41
 8002318:	4252      	negs	r2, r2
 800231a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 f836 	bl	8002390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2220      	movs	r2, #32
 800232c:	4013      	ands	r3, r2
 800232e:	2b20      	cmp	r3, #32
 8002330:	d10f      	bne.n	8002352 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	4013      	ands	r3, r2
 800233c:	2b20      	cmp	r3, #32
 800233e:	d108      	bne.n	8002352 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	4252      	negs	r2, r2
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f8a7 	bl	80024a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	fffffeff 	.word	0xfffffeff

08002360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <TIM_Base_SetConfig+0xe4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d008      	beq.n	80023ca <TIM_Base_SetConfig+0x2a>
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	429a      	cmp	r2, r3
 80023c0:	d003      	beq.n	80023ca <TIM_Base_SetConfig+0x2a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a30      	ldr	r2, [pc, #192]	; (8002488 <TIM_Base_SetConfig+0xe8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d108      	bne.n	80023dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2270      	movs	r2, #112	; 0x70
 80023ce:	4393      	bics	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <TIM_Base_SetConfig+0xe4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <TIM_Base_SetConfig+0x76>
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	05db      	lsls	r3, r3, #23
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d013      	beq.n	8002416 <TIM_Base_SetConfig+0x76>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a25      	ldr	r2, [pc, #148]	; (8002488 <TIM_Base_SetConfig+0xe8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00f      	beq.n	8002416 <TIM_Base_SetConfig+0x76>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <TIM_Base_SetConfig+0xec>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00b      	beq.n	8002416 <TIM_Base_SetConfig+0x76>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <TIM_Base_SetConfig+0xf0>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <TIM_Base_SetConfig+0x76>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a22      	ldr	r2, [pc, #136]	; (8002494 <TIM_Base_SetConfig+0xf4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d003      	beq.n	8002416 <TIM_Base_SetConfig+0x76>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a21      	ldr	r2, [pc, #132]	; (8002498 <TIM_Base_SetConfig+0xf8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d108      	bne.n	8002428 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <TIM_Base_SetConfig+0xfc>)
 800241a:	4013      	ands	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	4393      	bics	r3, r2
 800242e:	001a      	movs	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0c      	ldr	r2, [pc, #48]	; (8002484 <TIM_Base_SetConfig+0xe4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00b      	beq.n	800246e <TIM_Base_SetConfig+0xce>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <TIM_Base_SetConfig+0xf0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d007      	beq.n	800246e <TIM_Base_SetConfig+0xce>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <TIM_Base_SetConfig+0xf4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d003      	beq.n	800246e <TIM_Base_SetConfig+0xce>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <TIM_Base_SetConfig+0xf8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d103      	bne.n	8002476 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	615a      	str	r2, [r3, #20]
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400
 800248c:	40002000 	.word	0x40002000
 8002490:	40014000 	.word	0x40014000
 8002494:	40014400 	.word	0x40014400
 8002498:	40014800 	.word	0x40014800
 800249c:	fffffcff 	.word	0xfffffcff

080024a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024b8:	46c0      	nop			; (mov r8, r8)
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b002      	add	sp, #8
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e046      	b.n	8002570 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2288      	movs	r2, #136	; 0x88
 80024e6:	589b      	ldr	r3, [r3, r2]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2284      	movs	r2, #132	; 0x84
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7fe fa68 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2288      	movs	r2, #136	; 0x88
 8002500:	2124      	movs	r1, #36	; 0x24
 8002502:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	438a      	bics	r2, r1
 8002512:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f830 	bl	800257c <UART_SetConfig>
 800251c:	0003      	movs	r3, r0
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e024      	b.n	8002570 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fae1 	bl	8002af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	490d      	ldr	r1, [pc, #52]	; (8002578 <HAL_UART_Init+0xa8>)
 8002542:	400a      	ands	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	212a      	movs	r1, #42	; 0x2a
 8002552:	438a      	bics	r2, r1
 8002554:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 fb79 	bl	8002c60 <UART_CheckIdleState>
 800256e:	0003      	movs	r3, r0
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	ffffb7ff 	.word	0xffffb7ff

0800257c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b090      	sub	sp, #64	; 0x40
 8002580:	af00      	add	r7, sp, #0
 8002582:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002584:	231a      	movs	r3, #26
 8002586:	2220      	movs	r2, #32
 8002588:	189b      	adds	r3, r3, r2
 800258a:	19db      	adds	r3, r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	431a      	orrs	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	431a      	orrs	r2, r3
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4aaf      	ldr	r2, [pc, #700]	; (800286c <UART_SetConfig+0x2f0>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ba:	430b      	orrs	r3, r1
 80025bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4aaa      	ldr	r2, [pc, #680]	; (8002870 <UART_SetConfig+0x2f4>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	0003      	movs	r3, r0
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4aa4      	ldr	r2, [pc, #656]	; (8002874 <UART_SetConfig+0x2f8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ee:	4313      	orrs	r3, r2
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a9f      	ldr	r2, [pc, #636]	; (8002878 <UART_SetConfig+0x2fc>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	220f      	movs	r2, #15
 8002610:	4393      	bics	r3, r2
 8002612:	0018      	movs	r0, r3
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	0003      	movs	r3, r0
 800261e:	430b      	orrs	r3, r1
 8002620:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a95      	ldr	r2, [pc, #596]	; (800287c <UART_SetConfig+0x300>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d131      	bne.n	8002690 <UART_SetConfig+0x114>
 800262c:	4b94      	ldr	r3, [pc, #592]	; (8002880 <UART_SetConfig+0x304>)
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	2203      	movs	r2, #3
 8002632:	4013      	ands	r3, r2
 8002634:	2b03      	cmp	r3, #3
 8002636:	d01d      	beq.n	8002674 <UART_SetConfig+0xf8>
 8002638:	d823      	bhi.n	8002682 <UART_SetConfig+0x106>
 800263a:	2b02      	cmp	r3, #2
 800263c:	d00c      	beq.n	8002658 <UART_SetConfig+0xdc>
 800263e:	d820      	bhi.n	8002682 <UART_SetConfig+0x106>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <UART_SetConfig+0xce>
 8002644:	2b01      	cmp	r3, #1
 8002646:	d00e      	beq.n	8002666 <UART_SetConfig+0xea>
 8002648:	e01b      	b.n	8002682 <UART_SetConfig+0x106>
 800264a:	231b      	movs	r3, #27
 800264c:	2220      	movs	r2, #32
 800264e:	189b      	adds	r3, r3, r2
 8002650:	19db      	adds	r3, r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e0b4      	b.n	80027c2 <UART_SetConfig+0x246>
 8002658:	231b      	movs	r3, #27
 800265a:	2220      	movs	r2, #32
 800265c:	189b      	adds	r3, r3, r2
 800265e:	19db      	adds	r3, r3, r7
 8002660:	2202      	movs	r2, #2
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e0ad      	b.n	80027c2 <UART_SetConfig+0x246>
 8002666:	231b      	movs	r3, #27
 8002668:	2220      	movs	r2, #32
 800266a:	189b      	adds	r3, r3, r2
 800266c:	19db      	adds	r3, r3, r7
 800266e:	2204      	movs	r2, #4
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e0a6      	b.n	80027c2 <UART_SetConfig+0x246>
 8002674:	231b      	movs	r3, #27
 8002676:	2220      	movs	r2, #32
 8002678:	189b      	adds	r3, r3, r2
 800267a:	19db      	adds	r3, r3, r7
 800267c:	2208      	movs	r2, #8
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e09f      	b.n	80027c2 <UART_SetConfig+0x246>
 8002682:	231b      	movs	r3, #27
 8002684:	2220      	movs	r2, #32
 8002686:	189b      	adds	r3, r3, r2
 8002688:	19db      	adds	r3, r3, r7
 800268a:	2210      	movs	r2, #16
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e098      	b.n	80027c2 <UART_SetConfig+0x246>
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a7b      	ldr	r2, [pc, #492]	; (8002884 <UART_SetConfig+0x308>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d131      	bne.n	80026fe <UART_SetConfig+0x182>
 800269a:	4b79      	ldr	r3, [pc, #484]	; (8002880 <UART_SetConfig+0x304>)
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	220c      	movs	r2, #12
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d01d      	beq.n	80026e2 <UART_SetConfig+0x166>
 80026a6:	d823      	bhi.n	80026f0 <UART_SetConfig+0x174>
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d00c      	beq.n	80026c6 <UART_SetConfig+0x14a>
 80026ac:	d820      	bhi.n	80026f0 <UART_SetConfig+0x174>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <UART_SetConfig+0x13c>
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00e      	beq.n	80026d4 <UART_SetConfig+0x158>
 80026b6:	e01b      	b.n	80026f0 <UART_SetConfig+0x174>
 80026b8:	231b      	movs	r3, #27
 80026ba:	2220      	movs	r2, #32
 80026bc:	189b      	adds	r3, r3, r2
 80026be:	19db      	adds	r3, r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e07d      	b.n	80027c2 <UART_SetConfig+0x246>
 80026c6:	231b      	movs	r3, #27
 80026c8:	2220      	movs	r2, #32
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	19db      	adds	r3, r3, r7
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e076      	b.n	80027c2 <UART_SetConfig+0x246>
 80026d4:	231b      	movs	r3, #27
 80026d6:	2220      	movs	r2, #32
 80026d8:	189b      	adds	r3, r3, r2
 80026da:	19db      	adds	r3, r3, r7
 80026dc:	2204      	movs	r2, #4
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e06f      	b.n	80027c2 <UART_SetConfig+0x246>
 80026e2:	231b      	movs	r3, #27
 80026e4:	2220      	movs	r2, #32
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	19db      	adds	r3, r3, r7
 80026ea:	2208      	movs	r2, #8
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e068      	b.n	80027c2 <UART_SetConfig+0x246>
 80026f0:	231b      	movs	r3, #27
 80026f2:	2220      	movs	r2, #32
 80026f4:	189b      	adds	r3, r3, r2
 80026f6:	19db      	adds	r3, r3, r7
 80026f8:	2210      	movs	r2, #16
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e061      	b.n	80027c2 <UART_SetConfig+0x246>
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a61      	ldr	r2, [pc, #388]	; (8002888 <UART_SetConfig+0x30c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d106      	bne.n	8002716 <UART_SetConfig+0x19a>
 8002708:	231b      	movs	r3, #27
 800270a:	2220      	movs	r2, #32
 800270c:	189b      	adds	r3, r3, r2
 800270e:	19db      	adds	r3, r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e055      	b.n	80027c2 <UART_SetConfig+0x246>
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5c      	ldr	r2, [pc, #368]	; (800288c <UART_SetConfig+0x310>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d106      	bne.n	800272e <UART_SetConfig+0x1b2>
 8002720:	231b      	movs	r3, #27
 8002722:	2220      	movs	r2, #32
 8002724:	189b      	adds	r3, r3, r2
 8002726:	19db      	adds	r3, r3, r7
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e049      	b.n	80027c2 <UART_SetConfig+0x246>
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a50      	ldr	r2, [pc, #320]	; (8002874 <UART_SetConfig+0x2f8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d13e      	bne.n	80027b6 <UART_SetConfig+0x23a>
 8002738:	4b51      	ldr	r3, [pc, #324]	; (8002880 <UART_SetConfig+0x304>)
 800273a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	4013      	ands	r3, r2
 8002742:	22c0      	movs	r2, #192	; 0xc0
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	4293      	cmp	r3, r2
 8002748:	d027      	beq.n	800279a <UART_SetConfig+0x21e>
 800274a:	22c0      	movs	r2, #192	; 0xc0
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	4293      	cmp	r3, r2
 8002750:	d82a      	bhi.n	80027a8 <UART_SetConfig+0x22c>
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	4293      	cmp	r3, r2
 8002758:	d011      	beq.n	800277e <UART_SetConfig+0x202>
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	4293      	cmp	r3, r2
 8002760:	d822      	bhi.n	80027a8 <UART_SetConfig+0x22c>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <UART_SetConfig+0x1f4>
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	00d2      	lsls	r2, r2, #3
 800276a:	4293      	cmp	r3, r2
 800276c:	d00e      	beq.n	800278c <UART_SetConfig+0x210>
 800276e:	e01b      	b.n	80027a8 <UART_SetConfig+0x22c>
 8002770:	231b      	movs	r3, #27
 8002772:	2220      	movs	r2, #32
 8002774:	189b      	adds	r3, r3, r2
 8002776:	19db      	adds	r3, r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e021      	b.n	80027c2 <UART_SetConfig+0x246>
 800277e:	231b      	movs	r3, #27
 8002780:	2220      	movs	r2, #32
 8002782:	189b      	adds	r3, r3, r2
 8002784:	19db      	adds	r3, r3, r7
 8002786:	2202      	movs	r2, #2
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e01a      	b.n	80027c2 <UART_SetConfig+0x246>
 800278c:	231b      	movs	r3, #27
 800278e:	2220      	movs	r2, #32
 8002790:	189b      	adds	r3, r3, r2
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2204      	movs	r2, #4
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e013      	b.n	80027c2 <UART_SetConfig+0x246>
 800279a:	231b      	movs	r3, #27
 800279c:	2220      	movs	r2, #32
 800279e:	189b      	adds	r3, r3, r2
 80027a0:	19db      	adds	r3, r3, r7
 80027a2:	2208      	movs	r2, #8
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e00c      	b.n	80027c2 <UART_SetConfig+0x246>
 80027a8:	231b      	movs	r3, #27
 80027aa:	2220      	movs	r2, #32
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	19db      	adds	r3, r3, r7
 80027b0:	2210      	movs	r2, #16
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e005      	b.n	80027c2 <UART_SetConfig+0x246>
 80027b6:	231b      	movs	r3, #27
 80027b8:	2220      	movs	r2, #32
 80027ba:	189b      	adds	r3, r3, r2
 80027bc:	19db      	adds	r3, r3, r7
 80027be:	2210      	movs	r2, #16
 80027c0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <UART_SetConfig+0x2f8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d000      	beq.n	80027ce <UART_SetConfig+0x252>
 80027cc:	e0a9      	b.n	8002922 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027ce:	231b      	movs	r3, #27
 80027d0:	2220      	movs	r2, #32
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d015      	beq.n	8002808 <UART_SetConfig+0x28c>
 80027dc:	dc18      	bgt.n	8002810 <UART_SetConfig+0x294>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00d      	beq.n	80027fe <UART_SetConfig+0x282>
 80027e2:	dc15      	bgt.n	8002810 <UART_SetConfig+0x294>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <UART_SetConfig+0x272>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d005      	beq.n	80027f8 <UART_SetConfig+0x27c>
 80027ec:	e010      	b.n	8002810 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ee:	f7ff f9d1 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 80027f2:	0003      	movs	r3, r0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027f6:	e014      	b.n	8002822 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <UART_SetConfig+0x314>)
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027fc:	e011      	b.n	8002822 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027fe:	f7ff f93d 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8002802:	0003      	movs	r3, r0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002806:	e00c      	b.n	8002822 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800280e:	e008      	b.n	8002822 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002814:	231a      	movs	r3, #26
 8002816:	2220      	movs	r2, #32
 8002818:	189b      	adds	r3, r3, r2
 800281a:	19db      	adds	r3, r3, r7
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
        break;
 8002820:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	2b00      	cmp	r3, #0
 8002826:	d100      	bne.n	800282a <UART_SetConfig+0x2ae>
 8002828:	e14b      	b.n	8002ac2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <UART_SetConfig+0x318>)
 8002830:	0052      	lsls	r2, r2, #1
 8002832:	5ad3      	ldrh	r3, [r2, r3]
 8002834:	0019      	movs	r1, r3
 8002836:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002838:	f7fd fc66 	bl	8000108 <__udivsi3>
 800283c:	0003      	movs	r3, r0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	0013      	movs	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	189b      	adds	r3, r3, r2
 800284a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284c:	429a      	cmp	r2, r3
 800284e:	d305      	bcc.n	800285c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002858:	429a      	cmp	r2, r3
 800285a:	d91d      	bls.n	8002898 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800285c:	231a      	movs	r3, #26
 800285e:	2220      	movs	r2, #32
 8002860:	189b      	adds	r3, r3, r2
 8002862:	19db      	adds	r3, r3, r7
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e12b      	b.n	8002ac2 <UART_SetConfig+0x546>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	cfff69f3 	.word	0xcfff69f3
 8002870:	ffffcfff 	.word	0xffffcfff
 8002874:	40008000 	.word	0x40008000
 8002878:	11fff4ff 	.word	0x11fff4ff
 800287c:	40013800 	.word	0x40013800
 8002880:	40021000 	.word	0x40021000
 8002884:	40004400 	.word	0x40004400
 8002888:	40004800 	.word	0x40004800
 800288c:	40004c00 	.word	0x40004c00
 8002890:	00f42400 	.word	0x00f42400
 8002894:	08005ec0 	.word	0x08005ec0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a4:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <UART_SetConfig+0x574>)
 80028a6:	0052      	lsls	r2, r2, #1
 80028a8:	5ad3      	ldrh	r3, [r2, r3]
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	69b8      	ldr	r0, [r7, #24]
 80028b6:	69f9      	ldr	r1, [r7, #28]
 80028b8:	f7fd fd9c 	bl	80003f4 <__aeabi_uldivmod>
 80028bc:	0002      	movs	r2, r0
 80028be:	000b      	movs	r3, r1
 80028c0:	0e11      	lsrs	r1, r2, #24
 80028c2:	021d      	lsls	r5, r3, #8
 80028c4:	430d      	orrs	r5, r1
 80028c6:	0214      	lsls	r4, r2, #8
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68b8      	ldr	r0, [r7, #8]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	1900      	adds	r0, r0, r4
 80028da:	4169      	adcs	r1, r5
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f7fd fd83 	bl	80003f4 <__aeabi_uldivmod>
 80028ee:	0002      	movs	r2, r0
 80028f0:	000b      	movs	r3, r1
 80028f2:	0013      	movs	r3, r2
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028f8:	23c0      	movs	r3, #192	; 0xc0
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d309      	bcc.n	8002914 <UART_SetConfig+0x398>
 8002900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	035b      	lsls	r3, r3, #13
 8002906:	429a      	cmp	r2, r3
 8002908:	d204      	bcs.n	8002914 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	e0d6      	b.n	8002ac2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002914:	231a      	movs	r3, #26
 8002916:	2220      	movs	r2, #32
 8002918:	189b      	adds	r3, r3, r2
 800291a:	19db      	adds	r3, r3, r7
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e0cf      	b.n	8002ac2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	429a      	cmp	r2, r3
 800292c:	d000      	beq.n	8002930 <UART_SetConfig+0x3b4>
 800292e:	e070      	b.n	8002a12 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002930:	231b      	movs	r3, #27
 8002932:	2220      	movs	r2, #32
 8002934:	189b      	adds	r3, r3, r2
 8002936:	19db      	adds	r3, r3, r7
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d015      	beq.n	800296a <UART_SetConfig+0x3ee>
 800293e:	dc18      	bgt.n	8002972 <UART_SetConfig+0x3f6>
 8002940:	2b04      	cmp	r3, #4
 8002942:	d00d      	beq.n	8002960 <UART_SetConfig+0x3e4>
 8002944:	dc15      	bgt.n	8002972 <UART_SetConfig+0x3f6>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <UART_SetConfig+0x3d4>
 800294a:	2b02      	cmp	r3, #2
 800294c:	d005      	beq.n	800295a <UART_SetConfig+0x3de>
 800294e:	e010      	b.n	8002972 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002950:	f7ff f920 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8002954:	0003      	movs	r3, r0
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002958:	e014      	b.n	8002984 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800295a:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <UART_SetConfig+0x578>)
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800295e:	e011      	b.n	8002984 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002960:	f7ff f88c 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8002964:	0003      	movs	r3, r0
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002968:	e00c      	b.n	8002984 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002970:	e008      	b.n	8002984 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002976:	231a      	movs	r3, #26
 8002978:	2220      	movs	r2, #32
 800297a:	189b      	adds	r3, r3, r2
 800297c:	19db      	adds	r3, r3, r7
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
        break;
 8002982:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	2b00      	cmp	r3, #0
 8002988:	d100      	bne.n	800298c <UART_SetConfig+0x410>
 800298a:	e09a      	b.n	8002ac2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002990:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <UART_SetConfig+0x574>)
 8002992:	0052      	lsls	r2, r2, #1
 8002994:	5ad3      	ldrh	r3, [r2, r3]
 8002996:	0019      	movs	r1, r3
 8002998:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800299a:	f7fd fbb5 	bl	8000108 <__udivsi3>
 800299e:	0003      	movs	r3, r0
 80029a0:	005a      	lsls	r2, r3, #1
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	18d2      	adds	r2, r2, r3
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f7fd fba9 	bl	8000108 <__udivsi3>
 80029b6:	0003      	movs	r3, r0
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d921      	bls.n	8002a04 <UART_SetConfig+0x488>
 80029c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d21c      	bcs.n	8002a04 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	200e      	movs	r0, #14
 80029d0:	2420      	movs	r4, #32
 80029d2:	1903      	adds	r3, r0, r4
 80029d4:	19db      	adds	r3, r3, r7
 80029d6:	210f      	movs	r1, #15
 80029d8:	438a      	bics	r2, r1
 80029da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2207      	movs	r2, #7
 80029e4:	4013      	ands	r3, r2
 80029e6:	b299      	uxth	r1, r3
 80029e8:	1903      	adds	r3, r0, r4
 80029ea:	19db      	adds	r3, r3, r7
 80029ec:	1902      	adds	r2, r0, r4
 80029ee:	19d2      	adds	r2, r2, r7
 80029f0:	8812      	ldrh	r2, [r2, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1902      	adds	r2, r0, r4
 80029fc:	19d2      	adds	r2, r2, r7
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	e05e      	b.n	8002ac2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002a04:	231a      	movs	r3, #26
 8002a06:	2220      	movs	r2, #32
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	19db      	adds	r3, r3, r7
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e057      	b.n	8002ac2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a12:	231b      	movs	r3, #27
 8002a14:	2220      	movs	r2, #32
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	19db      	adds	r3, r3, r7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d015      	beq.n	8002a4c <UART_SetConfig+0x4d0>
 8002a20:	dc18      	bgt.n	8002a54 <UART_SetConfig+0x4d8>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00d      	beq.n	8002a42 <UART_SetConfig+0x4c6>
 8002a26:	dc15      	bgt.n	8002a54 <UART_SetConfig+0x4d8>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <UART_SetConfig+0x4b6>
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d005      	beq.n	8002a3c <UART_SetConfig+0x4c0>
 8002a30:	e010      	b.n	8002a54 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a32:	f7ff f8af 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 8002a36:	0003      	movs	r3, r0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a3a:	e014      	b.n	8002a66 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <UART_SetConfig+0x578>)
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a40:	e011      	b.n	8002a66 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a42:	f7ff f81b 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8002a46:	0003      	movs	r3, r0
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a4a:	e00c      	b.n	8002a66 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a52:	e008      	b.n	8002a66 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002a58:	231a      	movs	r3, #26
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	19db      	adds	r3, r3, r7
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
        break;
 8002a64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d02a      	beq.n	8002ac2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <UART_SetConfig+0x574>)
 8002a72:	0052      	lsls	r2, r2, #1
 8002a74:	5ad3      	ldrh	r3, [r2, r3]
 8002a76:	0019      	movs	r1, r3
 8002a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a7a:	f7fd fb45 	bl	8000108 <__udivsi3>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	001a      	movs	r2, r3
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	18d2      	adds	r2, r2, r3
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f7fd fb39 	bl	8000108 <__udivsi3>
 8002a96:	0003      	movs	r3, r0
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	2b0f      	cmp	r3, #15
 8002a9e:	d90a      	bls.n	8002ab6 <UART_SetConfig+0x53a>
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	025b      	lsls	r3, r3, #9
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d205      	bcs.n	8002ab6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e005      	b.n	8002ac2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab6:	231a      	movs	r3, #26
 8002ab8:	2220      	movs	r2, #32
 8002aba:	189b      	adds	r3, r3, r2
 8002abc:	19db      	adds	r3, r3, r7
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	226a      	movs	r2, #106	; 0x6a
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	2268      	movs	r2, #104	; 0x68
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	2200      	movs	r2, #0
 8002adc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002ade:	231a      	movs	r3, #26
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	781b      	ldrb	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b010      	add	sp, #64	; 0x40
 8002aee:	bdb0      	pop	{r4, r5, r7, pc}
 8002af0:	08005ec0 	.word	0x08005ec0
 8002af4:	00f42400 	.word	0x00f42400

08002af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	2201      	movs	r2, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <UART_AdvFeatureConfig+0x144>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	0019      	movs	r1, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	2202      	movs	r2, #2
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d00b      	beq.n	8002b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <UART_AdvFeatureConfig+0x148>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d00b      	beq.n	8002b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <UART_AdvFeatureConfig+0x14c>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <UART_AdvFeatureConfig+0x150>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d00b      	beq.n	8002baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <UART_AdvFeatureConfig+0x154>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	2220      	movs	r2, #32
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <UART_AdvFeatureConfig+0x158>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d01d      	beq.n	8002c12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <UART_AdvFeatureConfig+0x15c>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	035b      	lsls	r3, r3, #13
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10b      	bne.n	8002c12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <UART_AdvFeatureConfig+0x160>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <UART_AdvFeatureConfig+0x164>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffdffff 	.word	0xfffdffff
 8002c40:	fffeffff 	.word	0xfffeffff
 8002c44:	fffbffff 	.word	0xfffbffff
 8002c48:	ffff7fff 	.word	0xffff7fff
 8002c4c:	ffffefff 	.word	0xffffefff
 8002c50:	ffffdfff 	.word	0xffffdfff
 8002c54:	ffefffff 	.word	0xffefffff
 8002c58:	ff9fffff 	.word	0xff9fffff
 8002c5c:	fff7ffff 	.word	0xfff7ffff

08002c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2290      	movs	r2, #144	; 0x90
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c70:	f7fe f80e 	bl	8000c90 <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2208      	movs	r2, #8
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d10c      	bne.n	8002ca0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2280      	movs	r2, #128	; 0x80
 8002c8a:	0391      	lsls	r1, r2, #14
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <UART_CheckIdleState+0x98>)
 8002c90:	9200      	str	r2, [sp, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f000 f832 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d001      	beq.n	8002ca0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e026      	b.n	8002cee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d10c      	bne.n	8002cc8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	03d1      	lsls	r1, r2, #15
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <UART_CheckIdleState+0x98>)
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f000 f81e 	bl	8002cfc <UART_WaitOnFlagUntilTimeout>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e012      	b.n	8002cee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2288      	movs	r2, #136	; 0x88
 8002ccc:	2120      	movs	r1, #32
 8002cce:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	228c      	movs	r2, #140	; 0x8c
 8002cd4:	2120      	movs	r1, #32
 8002cd6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2284      	movs	r2, #132	; 0x84
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b004      	add	sp, #16
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	01ffffff 	.word	0x01ffffff

08002cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b094      	sub	sp, #80	; 0x50
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0c:	e0a7      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d10:	3301      	adds	r3, #1
 8002d12:	d100      	bne.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002d14:	e0a3      	b.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d16:	f7fd ffbb 	bl	8000c90 <HAL_GetTick>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d13f      	bne.n	8002dac <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	2301      	movs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	494e      	ldr	r1, [pc, #312]	; (8002e88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002d4e:	400a      	ands	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
 8002d68:	2301      	movs	r3, #1
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	438a      	bics	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2288      	movs	r2, #136	; 0x88
 8002d94:	2120      	movs	r1, #32
 8002d96:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	228c      	movs	r2, #140	; 0x8c
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2284      	movs	r2, #132	; 0x84
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e069      	b.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2204      	movs	r2, #4
 8002db4:	4013      	ands	r3, r2
 8002db6:	d052      	beq.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d148      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dda:	613b      	str	r3, [r7, #16]
  return(result);
 8002ddc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	2301      	movs	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f383 8810 	msr	PRIMASK, r3
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4924      	ldr	r1, [pc, #144]	; (8002e88 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f383 8810 	msr	PRIMASK, r3
}
 8002e06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e12:	2301      	movs	r3, #1
 8002e14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
 8002e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f383 8810 	msr	PRIMASK, r3
}
 8002e38:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2288      	movs	r2, #136	; 0x88
 8002e3e:	2120      	movs	r1, #32
 8002e40:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	228c      	movs	r2, #140	; 0x8c
 8002e46:	2120      	movs	r1, #32
 8002e48:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2290      	movs	r2, #144	; 0x90
 8002e4e:	2120      	movs	r1, #32
 8002e50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2284      	movs	r2, #132	; 0x84
 8002e56:	2100      	movs	r1, #0
 8002e58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e010      	b.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	4013      	ands	r3, r2
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	425a      	negs	r2, r3
 8002e6e:	4153      	adcs	r3, r2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	001a      	movs	r2, r3
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d100      	bne.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x182>
 8002e7c:	e747      	b.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b014      	add	sp, #80	; 0x50
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	fffffe5f 	.word	0xfffffe5f

08002e8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2284      	movs	r2, #132	; 0x84
 8002e98:	5c9b      	ldrb	r3, [r3, r2]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e027      	b.n	8002ef2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2284      	movs	r2, #132	; 0x84
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2288      	movs	r2, #136	; 0x88
 8002eae:	2124      	movs	r1, #36	; 0x24
 8002eb0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	438a      	bics	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2288      	movs	r2, #136	; 0x88
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2284      	movs	r2, #132	; 0x84
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b004      	add	sp, #16
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	dfffffff 	.word	0xdfffffff

08002f00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2284      	movs	r2, #132	; 0x84
 8002f0e:	5c9b      	ldrb	r3, [r3, r2]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e02e      	b.n	8002f76 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2284      	movs	r2, #132	; 0x84
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2288      	movs	r2, #136	; 0x88
 8002f24:	2124      	movs	r1, #36	; 0x24
 8002f26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	08d9      	lsrs	r1, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f854 	bl	8003004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2288      	movs	r2, #136	; 0x88
 8002f68:	2120      	movs	r1, #32
 8002f6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2284      	movs	r2, #132	; 0x84
 8002f70:	2100      	movs	r1, #0
 8002f72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2284      	movs	r2, #132	; 0x84
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e02f      	b.n	8002ff8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2284      	movs	r2, #132	; 0x84
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2288      	movs	r2, #136	; 0x88
 8002fa4:	2124      	movs	r1, #36	; 0x24
 8002fa6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f813 	bl	8003004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2288      	movs	r2, #136	; 0x88
 8002fea:	2120      	movs	r1, #32
 8002fec:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2284      	movs	r2, #132	; 0x84
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	f1ffffff 	.word	0xf1ffffff

08003004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003010:	2b00      	cmp	r3, #0
 8003012:	d108      	bne.n	8003026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	226a      	movs	r2, #106	; 0x6a
 8003018:	2101      	movs	r1, #1
 800301a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2268      	movs	r2, #104	; 0x68
 8003020:	2101      	movs	r1, #1
 8003022:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003024:	e043      	b.n	80030ae <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003026:	260f      	movs	r6, #15
 8003028:	19bb      	adds	r3, r7, r6
 800302a:	2208      	movs	r2, #8
 800302c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800302e:	200e      	movs	r0, #14
 8003030:	183b      	adds	r3, r7, r0
 8003032:	2208      	movs	r2, #8
 8003034:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	0e5b      	lsrs	r3, r3, #25
 800303e:	b2da      	uxtb	r2, r3
 8003040:	240d      	movs	r4, #13
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2107      	movs	r1, #7
 8003046:	400a      	ands	r2, r1
 8003048:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	0f5b      	lsrs	r3, r3, #29
 8003052:	b2da      	uxtb	r2, r3
 8003054:	250c      	movs	r5, #12
 8003056:	197b      	adds	r3, r7, r5
 8003058:	2107      	movs	r1, #7
 800305a:	400a      	ands	r2, r1
 800305c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800305e:	183b      	adds	r3, r7, r0
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	197a      	adds	r2, r7, r5
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	4914      	ldr	r1, [pc, #80]	; (80030b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003068:	5c8a      	ldrb	r2, [r1, r2]
 800306a:	435a      	muls	r2, r3
 800306c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800306e:	197b      	adds	r3, r7, r5
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <UARTEx_SetNbDataToProcess+0xb8>)
 8003074:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003076:	0019      	movs	r1, r3
 8003078:	f7fd f8d0 	bl	800021c <__divsi3>
 800307c:	0003      	movs	r3, r0
 800307e:	b299      	uxth	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	226a      	movs	r2, #106	; 0x6a
 8003084:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003086:	19bb      	adds	r3, r7, r6
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	193a      	adds	r2, r7, r4
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	490a      	ldr	r1, [pc, #40]	; (80030b8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003090:	5c8a      	ldrb	r2, [r1, r2]
 8003092:	435a      	muls	r2, r3
 8003094:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003096:	193b      	adds	r3, r7, r4
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <UARTEx_SetNbDataToProcess+0xb8>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800309e:	0019      	movs	r1, r3
 80030a0:	f7fd f8bc 	bl	800021c <__divsi3>
 80030a4:	0003      	movs	r3, r0
 80030a6:	b299      	uxth	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2268      	movs	r2, #104	; 0x68
 80030ac:	5299      	strh	r1, [r3, r2]
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b005      	add	sp, #20
 80030b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	08005ed8 	.word	0x08005ed8
 80030bc:	08005ee0 	.word	0x08005ee0

080030c0 <__NVIC_SetPriority>:
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	0002      	movs	r2, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b7f      	cmp	r3, #127	; 0x7f
 80030d4:	d828      	bhi.n	8003128 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030d6:	4a2f      	ldr	r2, [pc, #188]	; (8003194 <__NVIC_SetPriority+0xd4>)
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b25b      	sxtb	r3, r3
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	33c0      	adds	r3, #192	; 0xc0
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	589b      	ldr	r3, [r3, r2]
 80030e6:	1dfa      	adds	r2, r7, #7
 80030e8:	7812      	ldrb	r2, [r2, #0]
 80030ea:	0011      	movs	r1, r2
 80030ec:	2203      	movs	r2, #3
 80030ee:	400a      	ands	r2, r1
 80030f0:	00d2      	lsls	r2, r2, #3
 80030f2:	21ff      	movs	r1, #255	; 0xff
 80030f4:	4091      	lsls	r1, r2
 80030f6:	000a      	movs	r2, r1
 80030f8:	43d2      	mvns	r2, r2
 80030fa:	401a      	ands	r2, r3
 80030fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	019b      	lsls	r3, r3, #6
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	401a      	ands	r2, r3
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	0018      	movs	r0, r3
 800310c:	2303      	movs	r3, #3
 800310e:	4003      	ands	r3, r0
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003114:	481f      	ldr	r0, [pc, #124]	; (8003194 <__NVIC_SetPriority+0xd4>)
 8003116:	1dfb      	adds	r3, r7, #7
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b25b      	sxtb	r3, r3
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	430a      	orrs	r2, r1
 8003120:	33c0      	adds	r3, #192	; 0xc0
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	501a      	str	r2, [r3, r0]
}
 8003126:	e031      	b.n	800318c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003128:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <__NVIC_SetPriority+0xd8>)
 800312a:	1dfb      	adds	r3, r7, #7
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	0019      	movs	r1, r3
 8003130:	230f      	movs	r3, #15
 8003132:	400b      	ands	r3, r1
 8003134:	3b08      	subs	r3, #8
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3306      	adds	r3, #6
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	18d3      	adds	r3, r2, r3
 800313e:	3304      	adds	r3, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1dfa      	adds	r2, r7, #7
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	0011      	movs	r1, r2
 8003148:	2203      	movs	r2, #3
 800314a:	400a      	ands	r2, r1
 800314c:	00d2      	lsls	r2, r2, #3
 800314e:	21ff      	movs	r1, #255	; 0xff
 8003150:	4091      	lsls	r1, r2
 8003152:	000a      	movs	r2, r1
 8003154:	43d2      	mvns	r2, r2
 8003156:	401a      	ands	r2, r3
 8003158:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	22ff      	movs	r2, #255	; 0xff
 8003160:	401a      	ands	r2, r3
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	2303      	movs	r3, #3
 800316a:	4003      	ands	r3, r0
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003170:	4809      	ldr	r0, [pc, #36]	; (8003198 <__NVIC_SetPriority+0xd8>)
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	001c      	movs	r4, r3
 8003178:	230f      	movs	r3, #15
 800317a:	4023      	ands	r3, r4
 800317c:	3b08      	subs	r3, #8
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	430a      	orrs	r2, r1
 8003182:	3306      	adds	r3, #6
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	18c3      	adds	r3, r0, r3
 8003188:	3304      	adds	r3, #4
 800318a:	601a      	str	r2, [r3, #0]
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b003      	add	sp, #12
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	e000e100 	.word	0xe000e100
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SysTick_Handler+0x1c>)
 80031a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031a4:	f001 fc88 	bl	8004ab8 <xTaskGetSchedulerState>
 80031a8:	0003      	movs	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d001      	beq.n	80031b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031ae:	f002 fb03 	bl	80057b8 <xPortSysTickHandler>
  }
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000e010 	.word	0xe000e010

080031bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80031c0:	2305      	movs	r3, #5
 80031c2:	425b      	negs	r3, r3
 80031c4:	2100      	movs	r1, #0
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7ff ff7a 	bl	80030c0 <__NVIC_SetPriority>
#endif
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031da:	f3ef 8305 	mrs	r3, IPSR
 80031de:	603b      	str	r3, [r7, #0]
  return(result);
 80031e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80031e6:	2306      	movs	r3, #6
 80031e8:	425b      	negs	r3, r3
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	e00c      	b.n	8003208 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <osKernelInitialize+0x40>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <osKernelInitialize+0x40>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	e002      	b.n	8003208 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003202:	2301      	movs	r3, #1
 8003204:	425b      	negs	r3, r3
 8003206:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003208:	687b      	ldr	r3, [r7, #4]
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	20000184 	.word	0x20000184

08003218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321e:	f3ef 8305 	mrs	r3, IPSR
 8003222:	603b      	str	r3, [r7, #0]
  return(result);
 8003224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <osKernelStart+0x1a>
    stat = osErrorISR;
 800322a:	2306      	movs	r3, #6
 800322c:	425b      	negs	r3, r3
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	e010      	b.n	8003254 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <osKernelStart+0x48>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d109      	bne.n	800324e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800323a:	f7ff ffbf 	bl	80031bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <osKernelStart+0x48>)
 8003240:	2202      	movs	r2, #2
 8003242:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003244:	f001 f84e 	bl	80042e4 <vTaskStartScheduler>
      stat = osOK;
 8003248:	2300      	movs	r3, #0
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	e002      	b.n	8003254 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800324e:	2301      	movs	r3, #1
 8003250:	425b      	negs	r3, r3
 8003252:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003254:	687b      	ldr	r3, [r7, #4]
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	20000184 	.word	0x20000184

08003264 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003264:	b5b0      	push	{r4, r5, r7, lr}
 8003266:	b08e      	sub	sp, #56	; 0x38
 8003268:	af04      	add	r7, sp, #16
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003274:	f3ef 8305 	mrs	r3, IPSR
 8003278:	617b      	str	r3, [r7, #20]
  return(result);
 800327a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800327c:	2b00      	cmp	r3, #0
 800327e:	d000      	beq.n	8003282 <osThreadNew+0x1e>
 8003280:	e081      	b.n	8003386 <osThreadNew+0x122>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d100      	bne.n	800328a <osThreadNew+0x26>
 8003288:	e07d      	b.n	8003386 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800328e:	2318      	movs	r3, #24
 8003290:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003296:	2301      	movs	r3, #1
 8003298:	425b      	negs	r3, r3
 800329a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d044      	beq.n	800332c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <osThreadNew+0x4c>
        name = attr->name;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <osThreadNew+0x70>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b38      	cmp	r3, #56	; 0x38
 80032c8:	d804      	bhi.n	80032d4 <osThreadNew+0x70>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	4013      	ands	r3, r2
 80032d2:	d001      	beq.n	80032d8 <osThreadNew+0x74>
        return (NULL);
 80032d4:	2300      	movs	r3, #0
 80032d6:	e057      	b.n	8003388 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <osThreadNew+0xaa>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2bbb      	cmp	r3, #187	; 0xbb
 80032f6:	d90a      	bls.n	800330e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <osThreadNew+0xaa>
        mem = 1;
 8003308:	2301      	movs	r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e010      	b.n	8003330 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <osThreadNew+0xcc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <osThreadNew+0xcc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <osThreadNew+0xcc>
          mem = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e001      	b.n	8003330 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d112      	bne.n	800335c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800333e:	68bd      	ldr	r5, [r7, #8]
 8003340:	6a3c      	ldr	r4, [r7, #32]
 8003342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	9302      	str	r3, [sp, #8]
 8003348:	9201      	str	r2, [sp, #4]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	002b      	movs	r3, r5
 8003350:	0022      	movs	r2, r4
 8003352:	f000 fe08 	bl	8003f66 <xTaskCreateStatic>
 8003356:	0003      	movs	r3, r0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	e014      	b.n	8003386 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d111      	bne.n	8003386 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	b29a      	uxth	r2, r3
 8003366:	68bc      	ldr	r4, [r7, #8]
 8003368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	2310      	movs	r3, #16
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0023      	movs	r3, r4
 8003378:	f000 fe39 	bl	8003fee <xTaskCreate>
 800337c:	0003      	movs	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <osThreadNew+0x122>
            hTask = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003386:	693b      	ldr	r3, [r7, #16]
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b00a      	add	sp, #40	; 0x28
 800338e:	bdb0      	pop	{r4, r5, r7, pc}

08003390 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <osThreadFlagsSet+0x1a>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da03      	bge.n	80033b2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80033aa:	2304      	movs	r3, #4
 80033ac:	425b      	negs	r3, r3
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e031      	b.n	8003416 <osThreadFlagsSet+0x86>
  }
  else {
    rflags = (uint32_t)osError;
 80033b2:	2301      	movs	r3, #1
 80033b4:	425b      	negs	r3, r3
 80033b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b8:	f3ef 8305 	mrs	r3, IPSR
 80033bc:	613b      	str	r3, [r7, #16]
  return(result);
 80033be:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <osThreadFlagsSet+0x6c>
      yield = pdFALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80033c8:	6839      	ldr	r1, [r7, #0]
 80033ca:	6978      	ldr	r0, [r7, #20]
 80033cc:	2308      	movs	r3, #8
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2300      	movs	r3, #0
 80033d4:	2201      	movs	r2, #1
 80033d6:	f001 fcdb 	bl	8004d90 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80033da:	230c      	movs	r3, #12
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	f001 fcd2 	bl	8004d90 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <osThreadFlagsSet+0x86>
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <osThreadFlagsSet+0x90>)
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	0552      	lsls	r2, r2, #21
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e00c      	b.n	8003416 <osThreadFlagsSet+0x86>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	2300      	movs	r3, #0
 8003402:	2201      	movs	r2, #1
 8003404:	f001 fc28 	bl	8004c58 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8003408:	230c      	movs	r3, #12
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	6978      	ldr	r0, [r7, #20]
 800340e:	2200      	movs	r2, #0
 8003410:	2100      	movs	r1, #0
 8003412:	f001 fc21 	bl	8004c58 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b006      	add	sp, #24
 800341e:	bd80      	pop	{r7, pc}
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003430:	f3ef 8305 	mrs	r3, IPSR
 8003434:	617b      	str	r3, [r7, #20]
  return(result);
 8003436:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800343c:	2306      	movs	r3, #6
 800343e:	425b      	negs	r3, r3
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003442:	e06a      	b.n	800351a <osThreadFlagsWait+0xf6>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	da03      	bge.n	8003452 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800344a:	2304      	movs	r3, #4
 800344c:	425b      	negs	r3, r3
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003450:	e063      	b.n	800351a <osThreadFlagsWait+0xf6>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2202      	movs	r2, #2
 8003456:	4013      	ands	r3, r2
 8003458:	d002      	beq.n	8003460 <osThreadFlagsWait+0x3c>
      clear = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
 800345e:	e001      	b.n	8003464 <osThreadFlagsWait+0x40>
    } else {
      clear = flags;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800346c:	f001 f830 	bl	80044d0 <xTaskGetTickCount>
 8003470:	0003      	movs	r3, r0
 8003472:	623b      	str	r3, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	2210      	movs	r2, #16
 8003478:	18ba      	adds	r2, r7, r2
 800347a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347c:	2000      	movs	r0, #0
 800347e:	f001 fb93 	bl	8004ba8 <xTaskNotifyWait>
 8003482:	0003      	movs	r3, r0
 8003484:	61fb      	str	r3, [r7, #28]

      if (rval == pdPASS) {
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d135      	bne.n	80034f8 <osThreadFlagsWait+0xd4>
        rflags &= flags;
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003498:	4313      	orrs	r3, r2
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d00c      	beq.n	80034be <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034a8:	4013      	ands	r3, r2
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d031      	beq.n	8003514 <osThreadFlagsWait+0xf0>
            break;
          } else {
            if (timeout == 0U) {
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80034b6:	2303      	movs	r3, #3
 80034b8:	425b      	negs	r3, r3
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80034bc:	e02d      	b.n	800351a <osThreadFlagsWait+0xf6>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c2:	4013      	ands	r3, r2
 80034c4:	d128      	bne.n	8003518 <osThreadFlagsWait+0xf4>
            break;
          } else {
            if (timeout == 0U) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80034cc:	2303      	movs	r3, #3
 80034ce:	425b      	negs	r3, r3
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80034d2:	e022      	b.n	800351a <osThreadFlagsWait+0xf6>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80034d4:	f000 fffc 	bl	80044d0 <xTaskGetTickCount>
 80034d8:	0002      	movs	r2, r0
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d902      	bls.n	80034ee <osThreadFlagsWait+0xca>
          tout  = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	e00e      	b.n	800350c <osThreadFlagsWait+0xe8>
        } else {
          tout -= td;
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
 80034f6:	e009      	b.n	800350c <osThreadFlagsWait+0xe8>
        }
      }
      else {
        if (timeout == 0) {
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <osThreadFlagsWait+0xe2>
          rflags = (uint32_t)osErrorResource;
 80034fe:	2303      	movs	r3, #3
 8003500:	425b      	negs	r3, r3
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003504:	e002      	b.n	800350c <osThreadFlagsWait+0xe8>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003506:	2302      	movs	r3, #2
 8003508:	425b      	negs	r3, r3
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1b0      	bne.n	8003474 <osThreadFlagsWait+0x50>
 8003512:	e002      	b.n	800351a <osThreadFlagsWait+0xf6>
            break;
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	e000      	b.n	800351a <osThreadFlagsWait+0xf6>
            break;
 8003518:	46c0      	nop			; (mov r8, r8)
  }

  /* Return flags before clearing */
  return (rflags);
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b00c      	add	sp, #48	; 0x30
 8003522:	bd80      	pop	{r7, pc}

08003524 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800352c:	f3ef 8305 	mrs	r3, IPSR
 8003530:	60bb      	str	r3, [r7, #8]
  return(result);
 8003532:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <osDelay+0x1c>
    stat = osErrorISR;
 8003538:	2306      	movs	r3, #6
 800353a:	425b      	negs	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e008      	b.n	8003552 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <osDelay+0x2e>
      vTaskDelay(ticks);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0018      	movs	r0, r3
 800354e:	f000 fea3 	bl	8004298 <vTaskDelay>
    }
  }

  return (stat);
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b004      	add	sp, #16
 800355a:	bd80      	pop	{r7, pc}

0800355c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a06      	ldr	r2, [pc, #24]	; (8003584 <vApplicationGetIdleTaskMemory+0x28>)
 800356c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4a05      	ldr	r2, [pc, #20]	; (8003588 <vApplicationGetIdleTaskMemory+0x2c>)
 8003572:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2280      	movs	r2, #128	; 0x80
 8003578:	601a      	str	r2, [r3, #0]
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46bd      	mov	sp, r7
 800357e:	b004      	add	sp, #16
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000188 	.word	0x20000188
 8003588:	20000244 	.word	0x20000244

0800358c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a06      	ldr	r2, [pc, #24]	; (80035b4 <vApplicationGetTimerTaskMemory+0x28>)
 800359c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4a05      	ldr	r2, [pc, #20]	; (80035b8 <vApplicationGetTimerTaskMemory+0x2c>)
 80035a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2280      	movs	r2, #128	; 0x80
 80035a8:	0052      	lsls	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000444 	.word	0x20000444
 80035b8:	20000500 	.word	0x20000500

080035bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3308      	adds	r3, #8
 80035c8:	001a      	movs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	4252      	negs	r2, r2
 80035d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3308      	adds	r3, #8
 80035da:	001a      	movs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3308      	adds	r3, #8
 80035e4:	001a      	movs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}

0800360e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b004      	add	sp, #16
 8003650:	bd80      	pop	{r7, pc}

08003652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3301      	adds	r3, #1
 8003666:	d103      	bne.n	8003670 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	e00c      	b.n	800368a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3308      	adds	r3, #8
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e002      	b.n	800367e <vListInsert+0x2c>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d2f6      	bcs.n	8003678 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b004      	add	sp, #16
 80036bc:	bd80      	pop	{r7, pc}

080036be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6852      	ldr	r2, [r2, #4]
 80036de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d103      	bne.n	80036f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b004      	add	sp, #16
 800370c:	bd80      	pop	{r7, pc}

0800370e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <xQueueGenericReset+0x18>
 8003722:	b672      	cpsid	i
 8003724:	e7fe      	b.n	8003724 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003726:	f001 ffeb 	bl	8005700 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	434b      	muls	r3, r1
 8003738:	18d2      	adds	r2, r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	1e59      	subs	r1, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	434b      	muls	r3, r1
 800375c:	18d2      	adds	r2, r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2244      	movs	r2, #68	; 0x44
 8003766:	21ff      	movs	r1, #255	; 0xff
 8003768:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2245      	movs	r2, #69	; 0x45
 800376e:	21ff      	movs	r1, #255	; 0xff
 8003770:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10d      	bne.n	8003794 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d013      	beq.n	80037a8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3310      	adds	r3, #16
 8003784:	0018      	movs	r0, r3
 8003786:	f000 ffff 	bl	8004788 <xTaskRemoveFromEventList>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d00c      	beq.n	80037a8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800378e:	f001 ffa7 	bl	80056e0 <vPortYield>
 8003792:	e009      	b.n	80037a8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3310      	adds	r3, #16
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff ff0f 	bl	80035bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3324      	adds	r3, #36	; 0x24
 80037a2:	0018      	movs	r0, r3
 80037a4:	f7ff ff0a 	bl	80035bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037a8:	f001 ffbc 	bl	8005724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037b6:	b590      	push	{r4, r7, lr}
 80037b8:	b089      	sub	sp, #36	; 0x24
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <xQueueGenericCreateStatic+0x18>
 80037ca:	b672      	cpsid	i
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <xQueueGenericCreateStatic+0x22>
 80037d4:	b672      	cpsid	i
 80037d6:	e7fe      	b.n	80037d6 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <xQueueGenericCreateStatic+0x2e>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <xQueueGenericCreateStatic+0x32>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <xQueueGenericCreateStatic+0x34>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <xQueueGenericCreateStatic+0x3c>
 80037ee:	b672      	cpsid	i
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <xQueueGenericCreateStatic+0x48>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <xQueueGenericCreateStatic+0x4c>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericCreateStatic+0x4e>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <xQueueGenericCreateStatic+0x56>
 8003808:	b672      	cpsid	i
 800380a:	e7fe      	b.n	800380a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800380c:	2350      	movs	r3, #80	; 0x50
 800380e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b50      	cmp	r3, #80	; 0x50
 8003814:	d001      	beq.n	800381a <xQueueGenericCreateStatic+0x64>
 8003816:	b672      	cpsid	i
 8003818:	e7fe      	b.n	8003818 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800381a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00e      	beq.n	8003844 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2246      	movs	r2, #70	; 0x46
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800382e:	2328      	movs	r3, #40	; 0x28
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	781c      	ldrb	r4, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	0023      	movs	r3, r4
 8003840:	f000 f805 	bl	800384e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003844:	697b      	ldr	r3, [r7, #20]
	}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b007      	add	sp, #28
 800384c:	bd90      	pop	{r4, r7, pc}

0800384e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	001a      	movs	r2, r3
 800385c:	1cfb      	adds	r3, r7, #3
 800385e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e002      	b.n	8003874 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2101      	movs	r1, #1
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff ff42 	bl	800370e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	1cfa      	adds	r2, r7, #3
 800388e:	214c      	movs	r1, #76	; 0x4c
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b004      	add	sp, #16
 800389a:	bd80      	pop	{r7, pc}

0800389c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <xQueueGenericSend+0x20>
 80038b8:	b672      	cpsid	i
 80038ba:	e7fe      	b.n	80038ba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <xQueueGenericSend+0x2e>
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <xQueueGenericSend+0x32>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <xQueueGenericSend+0x34>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <xQueueGenericSend+0x3c>
 80038d4:	b672      	cpsid	i
 80038d6:	e7fe      	b.n	80038d6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d103      	bne.n	80038e6 <xQueueGenericSend+0x4a>
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <xQueueGenericSend+0x4e>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xQueueGenericSend+0x50>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <xQueueGenericSend+0x58>
 80038f0:	b672      	cpsid	i
 80038f2:	e7fe      	b.n	80038f2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038f4:	f001 f8e0 	bl	8004ab8 <xTaskGetSchedulerState>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d102      	bne.n	8003902 <xQueueGenericSend+0x66>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <xQueueGenericSend+0x6a>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <xQueueGenericSend+0x6c>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <xQueueGenericSend+0x74>
 800390c:	b672      	cpsid	i
 800390e:	e7fe      	b.n	800390e <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003910:	f001 fef6 	bl	8005700 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	429a      	cmp	r2, r3
 800391e:	d302      	bcc.n	8003926 <xQueueGenericSend+0x8a>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d11e      	bne.n	8003964 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f9a2 	bl	8003c76 <prvCopyDataToQueue>
 8003932:	0003      	movs	r3, r0
 8003934:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	0018      	movs	r0, r3
 8003944:	f000 ff20 	bl	8004788 <xTaskRemoveFromEventList>
 8003948:	1e03      	subs	r3, r0, #0
 800394a:	d007      	beq.n	800395c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800394c:	f001 fec8 	bl	80056e0 <vPortYield>
 8003950:	e004      	b.n	800395c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003958:	f001 fec2 	bl	80056e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800395c:	f001 fee2 	bl	8005724 <vPortExitCritical>
				return pdPASS;
 8003960:	2301      	movs	r3, #1
 8003962:	e05b      	b.n	8003a1c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800396a:	f001 fedb 	bl	8005724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800396e:	2300      	movs	r3, #0
 8003970:	e054      	b.n	8003a1c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003978:	2314      	movs	r3, #20
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	0018      	movs	r0, r3
 800397e:	f000 ff5f 	bl	8004840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003982:	2301      	movs	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003986:	f001 fecd 	bl	8005724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800398a:	f000 fd09 	bl	80043a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800398e:	f001 feb7 	bl	8005700 <vPortEnterCritical>
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	2244      	movs	r2, #68	; 0x44
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	b25b      	sxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	d103      	bne.n	80039a6 <xQueueGenericSend+0x10a>
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2244      	movs	r2, #68	; 0x44
 80039a2:	2100      	movs	r1, #0
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	2245      	movs	r2, #69	; 0x45
 80039aa:	5c9b      	ldrb	r3, [r3, r2]
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	d103      	bne.n	80039ba <xQueueGenericSend+0x11e>
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2245      	movs	r2, #69	; 0x45
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]
 80039ba:	f001 feb3 	bl	8005724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039be:	1d3a      	adds	r2, r7, #4
 80039c0:	2314      	movs	r3, #20
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	0011      	movs	r1, r2
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 ff4e 	bl	8004868 <xTaskCheckForTimeOut>
 80039cc:	1e03      	subs	r3, r0, #0
 80039ce:	d11e      	bne.n	8003a0e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 fa54 	bl	8003e80 <prvIsQueueFull>
 80039d8:	1e03      	subs	r3, r0, #0
 80039da:	d011      	beq.n	8003a00 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	3310      	adds	r3, #16
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	0011      	movs	r1, r2
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 fe8b 	bl	8004700 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 f9d3 	bl	8003d98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039f2:	f000 fce1 	bl	80043b8 <xTaskResumeAll>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d18a      	bne.n	8003910 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80039fa:	f001 fe71 	bl	80056e0 <vPortYield>
 80039fe:	e787      	b.n	8003910 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 f9c8 	bl	8003d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a08:	f000 fcd6 	bl	80043b8 <xTaskResumeAll>
 8003a0c:	e780      	b.n	8003910 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	0018      	movs	r0, r3
 8003a12:	f000 f9c1 	bl	8003d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a16:	f000 fccf 	bl	80043b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b00a      	add	sp, #40	; 0x28
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b08b      	sub	sp, #44	; 0x2c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <xQueueGenericSendFromISR+0x1c>
 8003a3c:	b672      	cpsid	i
 8003a3e:	e7fe      	b.n	8003a3e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <xQueueGenericSendFromISR+0x2a>
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <xQueueGenericSendFromISR+0x2e>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <xQueueGenericSendFromISR+0x30>
 8003a52:	2300      	movs	r3, #0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <xQueueGenericSendFromISR+0x38>
 8003a58:	b672      	cpsid	i
 8003a5a:	e7fe      	b.n	8003a5a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSendFromISR+0x46>
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <xQueueGenericSendFromISR+0x4a>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <xQueueGenericSendFromISR+0x4c>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <xQueueGenericSendFromISR+0x54>
 8003a74:	b672      	cpsid	i
 8003a76:	e7fe      	b.n	8003a76 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a78:	f001 fe6c 	bl	8005754 <ulSetInterruptMaskFromISR>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <xQueueGenericSendFromISR+0x6e>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d131      	bne.n	8003af6 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a92:	241b      	movs	r4, #27
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	6a3a      	ldr	r2, [r7, #32]
 8003a98:	2145      	movs	r1, #69	; 0x45
 8003a9a:	5c52      	ldrb	r2, [r2, r1]
 8003a9c:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 f8e3 	bl	8003c76 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	d111      	bne.n	8003ade <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	3324      	adds	r3, #36	; 0x24
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 fe5e 	bl	8004788 <xTaskRemoveFromEventList>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d00f      	beq.n	8003af0 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e008      	b.n	8003af0 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ade:	231b      	movs	r3, #27
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	b259      	sxtb	r1, r3
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2245      	movs	r2, #69	; 0x45
 8003aee:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003af0:	2301      	movs	r3, #1
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8003af4:	e001      	b.n	8003afa <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f001 fe2f 	bl	8005760 <vClearInterruptMaskFromISR>

	return xReturn;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b00b      	add	sp, #44	; 0x2c
 8003b0a:	bd90      	pop	{r4, r7, pc}

08003b0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueReceive+0x1e>
 8003b26:	b672      	cpsid	i
 8003b28:	e7fe      	b.n	8003b28 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <xQueueReceive+0x2c>
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <xQueueReceive+0x30>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <xQueueReceive+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <xQueueReceive+0x3a>
 8003b42:	b672      	cpsid	i
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b46:	f000 ffb7 	bl	8004ab8 <xTaskGetSchedulerState>
 8003b4a:	1e03      	subs	r3, r0, #0
 8003b4c:	d102      	bne.n	8003b54 <xQueueReceive+0x48>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <xQueueReceive+0x4c>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <xQueueReceive+0x4e>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <xQueueReceive+0x56>
 8003b5e:	b672      	cpsid	i
 8003b60:	e7fe      	b.n	8003b60 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b62:	f001 fdcd 	bl	8005700 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01a      	beq.n	8003ba8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	0011      	movs	r1, r2
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 f8e7 	bl	8003d4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	1e5a      	subs	r2, r3, #1
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	3310      	adds	r3, #16
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 fdf8 	bl	8004788 <xTaskRemoveFromEventList>
 8003b98:	1e03      	subs	r3, r0, #0
 8003b9a:	d001      	beq.n	8003ba0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b9c:	f001 fda0 	bl	80056e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba0:	f001 fdc0 	bl	8005724 <vPortExitCritical>
				return pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e062      	b.n	8003c6e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bae:	f001 fdb9 	bl	8005724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e05b      	b.n	8003c6e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d106      	bne.n	8003bca <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bbc:	2314      	movs	r3, #20
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 fe3d 	bl	8004840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bca:	f001 fdab 	bl	8005724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bce:	f000 fbe7 	bl	80043a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd2:	f001 fd95 	bl	8005700 <vPortEnterCritical>
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2244      	movs	r2, #68	; 0x44
 8003bda:	5c9b      	ldrb	r3, [r3, r2]
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0xde>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	2244      	movs	r2, #68	; 0x44
 8003be6:	2100      	movs	r1, #0
 8003be8:	5499      	strb	r1, [r3, r2]
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2245      	movs	r2, #69	; 0x45
 8003bee:	5c9b      	ldrb	r3, [r3, r2]
 8003bf0:	b25b      	sxtb	r3, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	d103      	bne.n	8003bfe <xQueueReceive+0xf2>
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2245      	movs	r2, #69	; 0x45
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]
 8003bfe:	f001 fd91 	bl	8005724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c02:	1d3a      	adds	r2, r7, #4
 8003c04:	2314      	movs	r3, #20
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	0011      	movs	r1, r2
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f000 fe2c 	bl	8004868 <xTaskCheckForTimeOut>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d11e      	bne.n	8003c52 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 f91c 	bl	8003e54 <prvIsQueueEmpty>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d011      	beq.n	8003c44 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	3324      	adds	r3, #36	; 0x24
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f000 fd69 	bl	8004700 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f8b1 	bl	8003d98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c36:	f000 fbbf 	bl	80043b8 <xTaskResumeAll>
 8003c3a:	1e03      	subs	r3, r0, #0
 8003c3c:	d191      	bne.n	8003b62 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003c3e:	f001 fd4f 	bl	80056e0 <vPortYield>
 8003c42:	e78e      	b.n	8003b62 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f8a6 	bl	8003d98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c4c:	f000 fbb4 	bl	80043b8 <xTaskResumeAll>
 8003c50:	e787      	b.n	8003b62 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f89f 	bl	8003d98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c5a:	f000 fbad 	bl	80043b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f8f7 	bl	8003e54 <prvIsQueueEmpty>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d100      	bne.n	8003c6c <xQueueReceive+0x160>
 8003c6a:	e77a      	b.n	8003b62 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b00a      	add	sp, #40	; 0x28
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10e      	bne.n	8003cb2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d14e      	bne.n	8003d3a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 ff25 	bl	8004af0 <xTaskPriorityDisinherit>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	e043      	b.n	8003d3a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d119      	bne.n	8003cec <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6858      	ldr	r0, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	f001 ff8c 	bl	8005be0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	18d2      	adds	r2, r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d32b      	bcc.n	8003d3a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e026      	b.n	8003d3a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68d8      	ldr	r0, [r3, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	f001 ff72 	bl	8005be0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	425b      	negs	r3, r3
 8003d06:	18d2      	adds	r2, r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d207      	bcs.n	8003d28 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	425b      	negs	r3, r3
 8003d22:	18d2      	adds	r2, r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d105      	bne.n	8003d3a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d42:	697b      	ldr	r3, [r7, #20]
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	18d2      	adds	r2, r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d303      	bcc.n	8003d80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68d9      	ldr	r1, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f001 ff28 	bl	8005be0 <memcpy>
	}
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003da0:	f001 fcae 	bl	8005700 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003da4:	230f      	movs	r3, #15
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	2145      	movs	r1, #69	; 0x45
 8003dac:	5c52      	ldrb	r2, [r2, r1]
 8003dae:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003db0:	e013      	b.n	8003dda <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3324      	adds	r3, #36	; 0x24
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 fce2 	bl	8004788 <xTaskRemoveFromEventList>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d001      	beq.n	8003dcc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003dc8:	f000 fd9e 	bl	8004908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dcc:	210f      	movs	r1, #15
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	187b      	adds	r3, r7, r1
 8003dd8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b25b      	sxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	dce5      	bgt.n	8003db2 <prvUnlockQueue+0x1a>
 8003de6:	e000      	b.n	8003dea <prvUnlockQueue+0x52>
					break;
 8003de8:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2245      	movs	r2, #69	; 0x45
 8003dee:	21ff      	movs	r1, #255	; 0xff
 8003df0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003df2:	f001 fc97 	bl	8005724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003df6:	f001 fc83 	bl	8005700 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dfa:	230e      	movs	r3, #14
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	2144      	movs	r1, #68	; 0x44
 8003e02:	5c52      	ldrb	r2, [r2, r1]
 8003e04:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e06:	e013      	b.n	8003e30 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d016      	beq.n	8003e3e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3310      	adds	r3, #16
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fcb7 	bl	8004788 <xTaskRemoveFromEventList>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d001      	beq.n	8003e22 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003e1e:	f000 fd73 	bl	8004908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e22:	210e      	movs	r1, #14
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e30:	230e      	movs	r3, #14
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b25b      	sxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dce5      	bgt.n	8003e08 <prvUnlockQueue+0x70>
 8003e3c:	e000      	b.n	8003e40 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003e3e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2244      	movs	r2, #68	; 0x44
 8003e44:	21ff      	movs	r1, #255	; 0xff
 8003e46:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003e48:	f001 fc6c 	bl	8005724 <vPortExitCritical>
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b004      	add	sp, #16
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e5c:	f001 fc50 	bl	8005700 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	e001      	b.n	8003e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e72:	f001 fc57 	bl	8005724 <vPortExitCritical>

	return xReturn;
 8003e76:	68fb      	ldr	r3, [r7, #12]
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e88:	f001 fc3a 	bl	8005700 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d102      	bne.n	8003e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e001      	b.n	8003ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ea2:	f001 fc3f 	bl	8005724 <vPortExitCritical>

	return xReturn;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e015      	b.n	8003eec <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <vQueueAddToRegistry+0x4c>)
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	00d2      	lsls	r2, r2, #3
 8003ec6:	58d3      	ldr	r3, [r2, r3]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10c      	bne.n	8003ee6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <vQueueAddToRegistry+0x4c>)
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	00d2      	lsls	r2, r2, #3
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <vQueueAddToRegistry+0x4c>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	3304      	adds	r3, #4
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ee4:	e006      	b.n	8003ef4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d9e6      	bls.n	8003ec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000900 	.word	0x20000900

08003f00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f10:	f001 fbf6 	bl	8005700 <vPortEnterCritical>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2244      	movs	r2, #68	; 0x44
 8003f18:	5c9b      	ldrb	r3, [r3, r2]
 8003f1a:	b25b      	sxtb	r3, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	d103      	bne.n	8003f28 <vQueueWaitForMessageRestricted+0x28>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2244      	movs	r2, #68	; 0x44
 8003f24:	2100      	movs	r1, #0
 8003f26:	5499      	strb	r1, [r3, r2]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2245      	movs	r2, #69	; 0x45
 8003f2c:	5c9b      	ldrb	r3, [r3, r2]
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	d103      	bne.n	8003f3c <vQueueWaitForMessageRestricted+0x3c>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2245      	movs	r2, #69	; 0x45
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5499      	strb	r1, [r3, r2]
 8003f3c:	f001 fbf2 	bl	8005724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 fbf3 	bl	800473c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff ff1d 	bl	8003d98 <prvUnlockQueue>
	}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b006      	add	sp, #24
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f66:	b590      	push	{r4, r7, lr}
 8003f68:	b08d      	sub	sp, #52	; 0x34
 8003f6a:	af04      	add	r7, sp, #16
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <xTaskCreateStatic+0x18>
 8003f7a:	b672      	cpsid	i
 8003f7c:	e7fe      	b.n	8003f7c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <xTaskCreateStatic+0x22>
 8003f84:	b672      	cpsid	i
 8003f86:	e7fe      	b.n	8003f86 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f88:	23bc      	movs	r3, #188	; 0xbc
 8003f8a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2bbc      	cmp	r3, #188	; 0xbc
 8003f90:	d001      	beq.n	8003f96 <xTaskCreateStatic+0x30>
 8003f92:	b672      	cpsid	i
 8003f94:	e7fe      	b.n	8003f94 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f96:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <xTaskCreateStatic+0x7a>
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01d      	beq.n	8003fe0 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	22b9      	movs	r2, #185	; 0xb9
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fb6:	683c      	ldr	r4, [r7, #0]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9303      	str	r3, [sp, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	2318      	movs	r3, #24
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	0023      	movs	r3, r4
 8003fd2:	f000 f859 	bl	8004088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 f8f5 	bl	80041c8 <prvAddNewTaskToReadyList>
 8003fde:	e001      	b.n	8003fe4 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b009      	add	sp, #36	; 0x24
 8003fec:	bd90      	pop	{r4, r7, pc}

08003fee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fee:	b590      	push	{r4, r7, lr}
 8003ff0:	b08d      	sub	sp, #52	; 0x34
 8003ff2:	af04      	add	r7, sp, #16
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	1dbb      	adds	r3, r7, #6
 8003ffc:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ffe:	1dbb      	adds	r3, r7, #6
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	0018      	movs	r0, r3
 8004006:	f001 fc13 	bl	8005830 <pvPortMalloc>
 800400a:	0003      	movs	r3, r0
 800400c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d010      	beq.n	8004036 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004014:	20bc      	movs	r0, #188	; 0xbc
 8004016:	f001 fc0b 	bl	8005830 <pvPortMalloc>
 800401a:	0003      	movs	r3, r0
 800401c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
 800402a:	e006      	b.n	800403a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	0018      	movs	r0, r3
 8004030:	f001 fcaa 	bl	8005988 <vPortFree>
 8004034:	e001      	b.n	800403a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01a      	beq.n	8004076 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	22b9      	movs	r2, #185	; 0xb9
 8004044:	2100      	movs	r1, #0
 8004046:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004048:	1dbb      	adds	r3, r7, #6
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	683c      	ldr	r4, [r7, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	2300      	movs	r3, #0
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	9302      	str	r3, [sp, #8]
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	0023      	movs	r3, r4
 8004064:	f000 f810 	bl	8004088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f8ac 	bl	80041c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004070:	2301      	movs	r3, #1
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e002      	b.n	800407c <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004076:	2301      	movs	r3, #1
 8004078:	425b      	negs	r3, r3
 800407a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800407c:	69bb      	ldr	r3, [r7, #24]
	}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b009      	add	sp, #36	; 0x24
 8004084:	bd90      	pop	{r4, r7, pc}
	...

08004088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	001a      	movs	r2, r3
 80040a0:	21a5      	movs	r1, #165	; 0xa5
 80040a2:	f001 fda6 	bl	8005bf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4942      	ldr	r1, [pc, #264]	; (80041b8 <prvInitialiseNewTask+0x130>)
 80040ae:	468c      	mov	ip, r1
 80040b0:	4463      	add	r3, ip
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2207      	movs	r2, #7
 80040bc:	4393      	bics	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2207      	movs	r2, #7
 80040c4:	4013      	ands	r3, r2
 80040c6:	d001      	beq.n	80040cc <prvInitialiseNewTask+0x44>
 80040c8:	b672      	cpsid	i
 80040ca:	e7fe      	b.n	80040ca <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e013      	b.n	8004100 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	18d3      	adds	r3, r2, r3
 80040de:	7818      	ldrb	r0, [r3, #0]
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	2134      	movs	r1, #52	; 0x34
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	185b      	adds	r3, r3, r1
 80040ea:	1c02      	adds	r2, r0, #0
 80040ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	18d3      	adds	r3, r2, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	d9e8      	bls.n	80040d8 <prvInitialiseNewTask+0x50>
 8004106:	e000      	b.n	800410a <prvInitialiseNewTask+0x82>
			{
				break;
 8004108:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410c:	2243      	movs	r2, #67	; 0x43
 800410e:	2100      	movs	r1, #0
 8004110:	5499      	strb	r1, [r3, r2]
 8004112:	e003      	b.n	800411c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	2234      	movs	r2, #52	; 0x34
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	2b37      	cmp	r3, #55	; 0x37
 8004120:	d901      	bls.n	8004126 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004122:	2337      	movs	r3, #55	; 0x37
 8004124:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	6a3a      	ldr	r2, [r7, #32]
 8004130:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	2200      	movs	r2, #0
 8004136:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	3304      	adds	r3, #4
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff fa5b 	bl	80035f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	3318      	adds	r3, #24
 8004146:	0018      	movs	r0, r3
 8004148:	f7ff fa56 	bl	80035f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004150:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2238      	movs	r2, #56	; 0x38
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	22b4      	movs	r2, #180	; 0xb4
 8004166:	2100      	movs	r1, #0
 8004168:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	22b8      	movs	r2, #184	; 0xb8
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	3354      	adds	r3, #84	; 0x54
 8004176:	2260      	movs	r2, #96	; 0x60
 8004178:	2100      	movs	r1, #0
 800417a:	0018      	movs	r0, r3
 800417c:	f001 fd39 	bl	8005bf2 <memset>
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <prvInitialiseNewTask+0x134>)
 8004184:	659a      	str	r2, [r3, #88]	; 0x58
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <prvInitialiseNewTask+0x138>)
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <prvInitialiseNewTask+0x13c>)
 8004190:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68f9      	ldr	r1, [r7, #12]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	0018      	movs	r0, r3
 800419a:	f001 fa19 	bl	80055d0 <pxPortInitialiseStack>
 800419e:	0002      	movs	r2, r0
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b006      	add	sp, #24
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	3fffffff 	.word	0x3fffffff
 80041bc:	08005f58 	.word	0x08005f58
 80041c0:	08005f78 	.word	0x08005f78
 80041c4:	08005f38 	.word	0x08005f38

080041c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041d0:	f001 fa96 	bl	8005700 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <prvAddNewTaskToReadyList+0xb8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	4b29      	ldr	r3, [pc, #164]	; (8004280 <prvAddNewTaskToReadyList+0xb8>)
 80041dc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80041de:	4b29      	ldr	r3, [pc, #164]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041e6:	4b27      	ldr	r3, [pc, #156]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <prvAddNewTaskToReadyList+0xb8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d110      	bne.n	8004216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041f4:	f000 fba2 	bl	800493c <prvInitialiseTaskLists>
 80041f8:	e00d      	b.n	8004216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <prvAddNewTaskToReadyList+0xc0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	429a      	cmp	r2, r3
 800420e:	d802      	bhi.n	8004216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <prvAddNewTaskToReadyList+0xc4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <prvAddNewTaskToReadyList+0xc4>)
 800421e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <prvAddNewTaskToReadyList+0xc4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <prvAddNewTaskToReadyList+0xc8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d903      	bls.n	800423c <prvAddNewTaskToReadyList+0x74>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <prvAddNewTaskToReadyList+0xc8>)
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004240:	0013      	movs	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	189b      	adds	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4a12      	ldr	r2, [pc, #72]	; (8004294 <prvAddNewTaskToReadyList+0xcc>)
 800424a:	189a      	adds	r2, r3, r2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	0019      	movs	r1, r3
 8004252:	0010      	movs	r0, r2
 8004254:	f7ff f9db 	bl	800360e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004258:	f001 fa64 	bl	8005724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800425c:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <prvAddNewTaskToReadyList+0xc0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <prvAddNewTaskToReadyList+0xbc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	429a      	cmp	r2, r3
 8004270:	d201      	bcs.n	8004276 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004272:	f001 fa35 	bl	80056e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	b002      	add	sp, #8
 800427c:	bd80      	pop	{r7, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	20000e14 	.word	0x20000e14
 8004284:	20000940 	.word	0x20000940
 8004288:	20000e20 	.word	0x20000e20
 800428c:	20000e30 	.word	0x20000e30
 8004290:	20000e1c 	.word	0x20000e1c
 8004294:	20000944 	.word	0x20000944

08004298 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <vTaskDelay+0x48>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <vTaskDelay+0x1e>
 80042b2:	b672      	cpsid	i
 80042b4:	e7fe      	b.n	80042b4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80042b6:	f000 f873 	bl	80043a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2100      	movs	r1, #0
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 fe20 	bl	8004f04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042c4:	f000 f878 	bl	80043b8 <xTaskResumeAll>
 80042c8:	0003      	movs	r3, r0
 80042ca:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80042d2:	f001 fa05 	bl	80056e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	46bd      	mov	sp, r7
 80042da:	b004      	add	sp, #16
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	20000e3c 	.word	0x20000e3c

080042e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042f2:	003a      	movs	r2, r7
 80042f4:	1d39      	adds	r1, r7, #4
 80042f6:	2308      	movs	r3, #8
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff f92e 	bl	800355c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004300:	683c      	ldr	r4, [r7, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	491e      	ldr	r1, [pc, #120]	; (8004380 <vTaskStartScheduler+0x9c>)
 8004308:	481e      	ldr	r0, [pc, #120]	; (8004384 <vTaskStartScheduler+0xa0>)
 800430a:	9202      	str	r2, [sp, #8]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	0022      	movs	r2, r4
 8004316:	f7ff fe26 	bl	8003f66 <xTaskCreateStatic>
 800431a:	0002      	movs	r2, r0
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <vTaskStartScheduler+0xa4>)
 800431e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <vTaskStartScheduler+0xa4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004328:	2301      	movs	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e001      	b.n	8004332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d103      	bne.n	8004340 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004338:	f000 fe38 	bl	8004fac <xTimerCreateTimerTask>
 800433c:	0003      	movs	r3, r0
 800433e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d113      	bne.n	800436e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004346:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <vTaskStartScheduler+0xa8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3354      	adds	r3, #84	; 0x54
 800434e:	001a      	movs	r2, r3
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <vTaskStartScheduler+0xac>)
 8004352:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <vTaskStartScheduler+0xb0>)
 8004356:	2201      	movs	r2, #1
 8004358:	4252      	negs	r2, r2
 800435a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <vTaskStartScheduler+0xb4>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <vTaskStartScheduler+0xb8>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004368:	f001 f996 	bl	8005698 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800436c:	e004      	b.n	8004378 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3301      	adds	r3, #1
 8004372:	d101      	bne.n	8004378 <vTaskStartScheduler+0x94>
 8004374:	b672      	cpsid	i
 8004376:	e7fe      	b.n	8004376 <vTaskStartScheduler+0x92>
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b005      	add	sp, #20
 800437e:	bd90      	pop	{r4, r7, pc}
 8004380:	08005ddc 	.word	0x08005ddc
 8004384:	0800491d 	.word	0x0800491d
 8004388:	20000e38 	.word	0x20000e38
 800438c:	20000940 	.word	0x20000940
 8004390:	20000014 	.word	0x20000014
 8004394:	20000e34 	.word	0x20000e34
 8004398:	20000e20 	.word	0x20000e20
 800439c:	20000e18 	.word	0x20000e18

080043a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <vTaskSuspendAll+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4b02      	ldr	r3, [pc, #8]	; (80043b4 <vTaskSuspendAll+0x14>)
 80043ac:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000e3c 	.word	0x20000e3c

080043b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043c6:	4b3a      	ldr	r3, [pc, #232]	; (80044b0 <xTaskResumeAll+0xf8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <xTaskResumeAll+0x1a>
 80043ce:	b672      	cpsid	i
 80043d0:	e7fe      	b.n	80043d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043d2:	f001 f995 	bl	8005700 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <xTaskResumeAll+0xf8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	4b34      	ldr	r3, [pc, #208]	; (80044b0 <xTaskResumeAll+0xf8>)
 80043de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e0:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <xTaskResumeAll+0xf8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d15b      	bne.n	80044a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043e8:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <xTaskResumeAll+0xfc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d057      	beq.n	80044a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f0:	e02f      	b.n	8004452 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <xTaskResumeAll+0x100>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3318      	adds	r3, #24
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff f95d 	bl	80036be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3304      	adds	r3, #4
 8004408:	0018      	movs	r0, r3
 800440a:	f7ff f958 	bl	80036be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <xTaskResumeAll+0x104>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d903      	bls.n	8004422 <xTaskResumeAll+0x6a>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <xTaskResumeAll+0x104>)
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	0013      	movs	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	189b      	adds	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <xTaskResumeAll+0x108>)
 8004430:	189a      	adds	r2, r3, r2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3304      	adds	r3, #4
 8004436:	0019      	movs	r1, r3
 8004438:	0010      	movs	r0, r2
 800443a:	f7ff f8e8 	bl	800360e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <xTaskResumeAll+0x10c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <xTaskResumeAll+0x110>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <xTaskResumeAll+0x100>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cb      	bne.n	80043f2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004460:	f000 fb0c 	bl	8004a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004464:	4b19      	ldr	r3, [pc, #100]	; (80044cc <xTaskResumeAll+0x114>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004470:	f000 f83c 	bl	80044ec <xTaskIncrementTick>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d002      	beq.n	800447e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <xTaskResumeAll+0x110>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3b01      	subs	r3, #1
 8004482:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f2      	bne.n	8004470 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <xTaskResumeAll+0x114>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <xTaskResumeAll+0x110>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004498:	2301      	movs	r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800449c:	f001 f920 	bl	80056e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044a0:	f001 f940 	bl	8005724 <vPortExitCritical>

	return xAlreadyYielded;
 80044a4:	68bb      	ldr	r3, [r7, #8]
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b004      	add	sp, #16
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	20000e3c 	.word	0x20000e3c
 80044b4:	20000e14 	.word	0x20000e14
 80044b8:	20000dd4 	.word	0x20000dd4
 80044bc:	20000e1c 	.word	0x20000e1c
 80044c0:	20000944 	.word	0x20000944
 80044c4:	20000940 	.word	0x20000940
 80044c8:	20000e28 	.word	0x20000e28
 80044cc:	20000e24 	.word	0x20000e24

080044d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <xTaskGetTickCount+0x18>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044dc:	687b      	ldr	r3, [r7, #4]
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20000e18 	.word	0x20000e18

080044ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044f6:	4b4a      	ldr	r3, [pc, #296]	; (8004620 <xTaskIncrementTick+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d000      	beq.n	8004500 <xTaskIncrementTick+0x14>
 80044fe:	e084      	b.n	800460a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004500:	4b48      	ldr	r3, [pc, #288]	; (8004624 <xTaskIncrementTick+0x138>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004508:	4b46      	ldr	r3, [pc, #280]	; (8004624 <xTaskIncrementTick+0x138>)
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d117      	bne.n	8004544 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004514:	4b44      	ldr	r3, [pc, #272]	; (8004628 <xTaskIncrementTick+0x13c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <xTaskIncrementTick+0x36>
 800451e:	b672      	cpsid	i
 8004520:	e7fe      	b.n	8004520 <xTaskIncrementTick+0x34>
 8004522:	4b41      	ldr	r3, [pc, #260]	; (8004628 <xTaskIncrementTick+0x13c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	4b40      	ldr	r3, [pc, #256]	; (800462c <xTaskIncrementTick+0x140>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <xTaskIncrementTick+0x13c>)
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	4b3e      	ldr	r3, [pc, #248]	; (800462c <xTaskIncrementTick+0x140>)
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <xTaskIncrementTick+0x144>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	4b3c      	ldr	r3, [pc, #240]	; (8004630 <xTaskIncrementTick+0x144>)
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f000 fa9c 	bl	8004a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004544:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <xTaskIncrementTick+0x148>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	429a      	cmp	r2, r3
 800454c:	d349      	bcc.n	80045e2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <xTaskIncrementTick+0x13c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004558:	4b36      	ldr	r3, [pc, #216]	; (8004634 <xTaskIncrementTick+0x148>)
 800455a:	2201      	movs	r2, #1
 800455c:	4252      	negs	r2, r2
 800455e:	601a      	str	r2, [r3, #0]
					break;
 8004560:	e03f      	b.n	80045e2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004562:	4b31      	ldr	r3, [pc, #196]	; (8004628 <xTaskIncrementTick+0x13c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d203      	bcs.n	8004582 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800457a:	4b2e      	ldr	r3, [pc, #184]	; (8004634 <xTaskIncrementTick+0x148>)
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004580:	e02f      	b.n	80045e2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3304      	adds	r3, #4
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff f899 	bl	80036be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	3318      	adds	r3, #24
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff f890 	bl	80036be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	4b25      	ldr	r3, [pc, #148]	; (8004638 <xTaskIncrementTick+0x14c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d903      	bls.n	80045b2 <xTaskIncrementTick+0xc6>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <xTaskIncrementTick+0x14c>)
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	0013      	movs	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a1f      	ldr	r2, [pc, #124]	; (800463c <xTaskIncrementTick+0x150>)
 80045c0:	189a      	adds	r2, r3, r2
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3304      	adds	r3, #4
 80045c6:	0019      	movs	r1, r3
 80045c8:	0010      	movs	r0, r2
 80045ca:	f7ff f820 	bl	800360e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <xTaskIncrementTick+0x154>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d3b8      	bcc.n	800454e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e0:	e7b5      	b.n	800454e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <xTaskIncrementTick+0x154>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4914      	ldr	r1, [pc, #80]	; (800463c <xTaskIncrementTick+0x150>)
 80045ea:	0013      	movs	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	585b      	ldr	r3, [r3, r1]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d901      	bls.n	80045fc <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <xTaskIncrementTick+0x158>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e004      	b.n	8004614 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <xTaskIncrementTick+0x15c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <xTaskIncrementTick+0x15c>)
 8004612:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004614:	697b      	ldr	r3, [r7, #20]
}
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b006      	add	sp, #24
 800461c:	bd80      	pop	{r7, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	20000e3c 	.word	0x20000e3c
 8004624:	20000e18 	.word	0x20000e18
 8004628:	20000dcc 	.word	0x20000dcc
 800462c:	20000dd0 	.word	0x20000dd0
 8004630:	20000e2c 	.word	0x20000e2c
 8004634:	20000e34 	.word	0x20000e34
 8004638:	20000e1c 	.word	0x20000e1c
 800463c:	20000944 	.word	0x20000944
 8004640:	20000940 	.word	0x20000940
 8004644:	20000e28 	.word	0x20000e28
 8004648:	20000e24 	.word	0x20000e24

0800464c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <vTaskSwitchContext+0x9c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <vTaskSwitchContext+0xa0>)
 800465c:	2201      	movs	r2, #1
 800465e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004660:	e03d      	b.n	80046de <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <vTaskSwitchContext+0xa0>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004668:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <vTaskSwitchContext+0xa4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e007      	b.n	8004680 <vTaskSwitchContext+0x34>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <vTaskSwitchContext+0x2e>
 8004676:	b672      	cpsid	i
 8004678:	e7fe      	b.n	8004678 <vTaskSwitchContext+0x2c>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3b01      	subs	r3, #1
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	491c      	ldr	r1, [pc, #112]	; (80046f4 <vTaskSwitchContext+0xa8>)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	0013      	movs	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	189b      	adds	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	585b      	ldr	r3, [r3, r1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <vTaskSwitchContext+0x24>
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	0013      	movs	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	189b      	adds	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <vTaskSwitchContext+0xa8>)
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d104      	bne.n	80046c2 <vTaskSwitchContext+0x76>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <vTaskSwitchContext+0xac>)
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <vTaskSwitchContext+0xa4>)
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <vTaskSwitchContext+0xac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3354      	adds	r3, #84	; 0x54
 80046d8:	001a      	movs	r2, r3
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <vTaskSwitchContext+0xb0>)
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	20000e3c 	.word	0x20000e3c
 80046ec:	20000e28 	.word	0x20000e28
 80046f0:	20000e1c 	.word	0x20000e1c
 80046f4:	20000944 	.word	0x20000944
 80046f8:	20000940 	.word	0x20000940
 80046fc:	20000014 	.word	0x20000014

08004700 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <vTaskPlaceOnEventList+0x14>
 8004710:	b672      	cpsid	i
 8004712:	e7fe      	b.n	8004712 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <vTaskPlaceOnEventList+0x38>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3318      	adds	r3, #24
 800471a:	001a      	movs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0011      	movs	r1, r2
 8004720:	0018      	movs	r0, r3
 8004722:	f7fe ff96 	bl	8003652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fbea 	bl	8004f04 <prvAddCurrentTaskToDelayedList>
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	46bd      	mov	sp, r7
 8004734:	b002      	add	sp, #8
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000940 	.word	0x20000940

0800473c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <vTaskPlaceOnEventListRestricted+0x16>
 800474e:	b672      	cpsid	i
 8004750:	e7fe      	b.n	8004750 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <vTaskPlaceOnEventListRestricted+0x48>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3318      	adds	r3, #24
 8004758:	001a      	movs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	0011      	movs	r1, r2
 800475e:	0018      	movs	r0, r3
 8004760:	f7fe ff55 	bl	800360e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800476a:	2301      	movs	r3, #1
 800476c:	425b      	negs	r3, r3
 800476e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	0011      	movs	r1, r2
 8004776:	0018      	movs	r0, r3
 8004778:	f000 fbc4 	bl	8004f04 <prvAddCurrentTaskToDelayedList>
	}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b004      	add	sp, #16
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000940 	.word	0x20000940

08004788 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <xTaskRemoveFromEventList+0x1a>
 800479e:	b672      	cpsid	i
 80047a0:	e7fe      	b.n	80047a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3318      	adds	r3, #24
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7fe ff89 	bl	80036be <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <xTaskRemoveFromEventList+0xa0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d11d      	bne.n	80047f0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	3304      	adds	r3, #4
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fe ff80 	bl	80036be <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <xTaskRemoveFromEventList+0xa4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d903      	bls.n	80047d2 <xTaskRemoveFromEventList+0x4a>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <xTaskRemoveFromEventList+0xa4>)
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	0013      	movs	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4a14      	ldr	r2, [pc, #80]	; (8004830 <xTaskRemoveFromEventList+0xa8>)
 80047e0:	189a      	adds	r2, r3, r2
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	3304      	adds	r3, #4
 80047e6:	0019      	movs	r1, r3
 80047e8:	0010      	movs	r0, r2
 80047ea:	f7fe ff10 	bl	800360e <vListInsertEnd>
 80047ee:	e007      	b.n	8004800 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3318      	adds	r3, #24
 80047f4:	001a      	movs	r2, r3
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <xTaskRemoveFromEventList+0xac>)
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7fe ff07 	bl	800360e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <xTaskRemoveFromEventList+0xb0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	429a      	cmp	r2, r3
 800480c:	d905      	bls.n	800481a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800480e:	2301      	movs	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <xTaskRemoveFromEventList+0xb4>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e001      	b.n	800481e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800481e:	68fb      	ldr	r3, [r7, #12]
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000e3c 	.word	0x20000e3c
 800482c:	20000e1c 	.word	0x20000e1c
 8004830:	20000944 	.word	0x20000944
 8004834:	20000dd4 	.word	0x20000dd4
 8004838:	20000940 	.word	0x20000940
 800483c:	20000e28 	.word	0x20000e28

08004840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <vTaskInternalSetTimeOutState+0x20>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <vTaskInternalSetTimeOutState+0x24>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000e2c 	.word	0x20000e2c
 8004864:	20000e18 	.word	0x20000e18

08004868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <xTaskCheckForTimeOut+0x14>
 8004878:	b672      	cpsid	i
 800487a:	e7fe      	b.n	800487a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <xTaskCheckForTimeOut+0x1e>
 8004882:	b672      	cpsid	i
 8004884:	e7fe      	b.n	8004884 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004886:	f000 ff3b 	bl	8005700 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <xTaskCheckForTimeOut+0x98>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3301      	adds	r3, #1
 80048a0:	d102      	bne.n	80048a8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e024      	b.n	80048f2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b15      	ldr	r3, [pc, #84]	; (8004904 <xTaskCheckForTimeOut+0x9c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d007      	beq.n	80048c4 <xTaskCheckForTimeOut+0x5c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e016      	b.n	80048f2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d20c      	bcs.n	80048e8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad2      	subs	r2, r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0018      	movs	r0, r3
 80048de:	f7ff ffaf 	bl	8004840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e004      	b.n	80048f2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80048f2:	f000 ff17 	bl	8005724 <vPortExitCritical>

	return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000e18 	.word	0x20000e18
 8004904:	20000e2c 	.word	0x20000e2c

08004908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800490c:	4b02      	ldr	r3, [pc, #8]	; (8004918 <vTaskMissedYield+0x10>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000e28 	.word	0x20000e28

0800491c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004924:	f000 f84e 	bl	80049c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004928:	4b03      	ldr	r3, [pc, #12]	; (8004938 <prvIdleTask+0x1c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d9f9      	bls.n	8004924 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004930:	f000 fed6 	bl	80056e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004934:	e7f6      	b.n	8004924 <prvIdleTask+0x8>
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	20000944 	.word	0x20000944

0800493c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	e00c      	b.n	8004962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	0013      	movs	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	189b      	adds	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <prvInitialiseTaskLists+0x68>)
 8004954:	189b      	adds	r3, r3, r2
 8004956:	0018      	movs	r0, r3
 8004958:	f7fe fe30 	bl	80035bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3301      	adds	r3, #1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b37      	cmp	r3, #55	; 0x37
 8004966:	d9ef      	bls.n	8004948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <prvInitialiseTaskLists+0x6c>)
 800496a:	0018      	movs	r0, r3
 800496c:	f7fe fe26 	bl	80035bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <prvInitialiseTaskLists+0x70>)
 8004972:	0018      	movs	r0, r3
 8004974:	f7fe fe22 	bl	80035bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <prvInitialiseTaskLists+0x74>)
 800497a:	0018      	movs	r0, r3
 800497c:	f7fe fe1e 	bl	80035bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <prvInitialiseTaskLists+0x78>)
 8004982:	0018      	movs	r0, r3
 8004984:	f7fe fe1a 	bl	80035bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <prvInitialiseTaskLists+0x7c>)
 800498a:	0018      	movs	r0, r3
 800498c:	f7fe fe16 	bl	80035bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <prvInitialiseTaskLists+0x80>)
 8004992:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <prvInitialiseTaskLists+0x6c>)
 8004994:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <prvInitialiseTaskLists+0x84>)
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <prvInitialiseTaskLists+0x70>)
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000944 	.word	0x20000944
 80049a8:	20000da4 	.word	0x20000da4
 80049ac:	20000db8 	.word	0x20000db8
 80049b0:	20000dd4 	.word	0x20000dd4
 80049b4:	20000de8 	.word	0x20000de8
 80049b8:	20000e00 	.word	0x20000e00
 80049bc:	20000dcc 	.word	0x20000dcc
 80049c0:	20000dd0 	.word	0x20000dd0

080049c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ca:	e01a      	b.n	8004a02 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80049cc:	f000 fe98 	bl	8005700 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <prvCheckTasksWaitingTermination+0x50>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	0018      	movs	r0, r3
 80049de:	f7fe fe6e 	bl	80036be <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <prvCheckTasksWaitingTermination+0x54>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <prvCheckTasksWaitingTermination+0x54>)
 80049ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 80049f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80049f6:	f000 fe95 	bl	8005724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f80f 	bl	8004a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e0      	bne.n	80049cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000de8 	.word	0x20000de8
 8004a18:	20000e14 	.word	0x20000e14
 8004a1c:	20000dfc 	.word	0x20000dfc

08004a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3354      	adds	r3, #84	; 0x54
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f001 f8f5 	bl	8005c1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	22b9      	movs	r2, #185	; 0xb9
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	0018      	movs	r0, r3
 8004a42:	f000 ffa1 	bl	8005988 <vPortFree>
				vPortFree( pxTCB );
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 ff9d 	bl	8005988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a4e:	e010      	b.n	8004a72 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	22b9      	movs	r2, #185	; 0xb9
 8004a54:	5c9b      	ldrb	r3, [r3, r2]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d104      	bne.n	8004a64 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 ff93 	bl	8005988 <vPortFree>
	}
 8004a62:	e006      	b.n	8004a72 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	22b9      	movs	r2, #185	; 0xb9
 8004a68:	5c9b      	ldrb	r3, [r3, r2]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d001      	beq.n	8004a72 <prvDeleteTCB+0x52>
 8004a6e:	b672      	cpsid	i
 8004a70:	e7fe      	b.n	8004a70 <prvDeleteTCB+0x50>
	}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b002      	add	sp, #8
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <prvResetNextTaskUnblockTime+0x34>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <prvResetNextTaskUnblockTime+0x38>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4252      	negs	r2, r2
 8004a92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a94:	e008      	b.n	8004aa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a96:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <prvResetNextTaskUnblockTime+0x34>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <prvResetNextTaskUnblockTime+0x38>)
 8004aa6:	601a      	str	r2, [r3, #0]
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b002      	add	sp, #8
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000dcc 	.word	0x20000dcc
 8004ab4:	20000e34 	.word	0x20000e34

08004ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <xTaskGetSchedulerState+0x30>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	e008      	b.n	8004ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <xTaskGetSchedulerState+0x34>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	e001      	b.n	8004ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ade:	687b      	ldr	r3, [r7, #4]
	}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000e20 	.word	0x20000e20
 8004aec:	20000e3c 	.word	0x20000e3c

08004af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d044      	beq.n	8004b90 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b06:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <xTaskPriorityDisinherit+0xac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <xTaskPriorityDisinherit+0x24>
 8004b10:	b672      	cpsid	i
 8004b12:	e7fe      	b.n	8004b12 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <xTaskPriorityDisinherit+0x30>
 8004b1c:	b672      	cpsid	i
 8004b1e:	e7fe      	b.n	8004b1e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	1e5a      	subs	r2, r3, #1
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d02c      	beq.n	8004b90 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d128      	bne.n	8004b90 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	3304      	adds	r3, #4
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fe fdbb 	bl	80036be <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2238      	movs	r2, #56	; 0x38
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <xTaskPriorityDisinherit+0xb0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d903      	bls.n	8004b70 <xTaskPriorityDisinherit+0x80>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <xTaskPriorityDisinherit+0xb0>)
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	0013      	movs	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	189b      	adds	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <xTaskPriorityDisinherit+0xb4>)
 8004b7e:	189a      	adds	r2, r3, r2
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	3304      	adds	r3, #4
 8004b84:	0019      	movs	r1, r3
 8004b86:	0010      	movs	r0, r2
 8004b88:	f7fe fd41 	bl	800360e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b90:	68fb      	ldr	r3, [r7, #12]
	}
 8004b92:	0018      	movs	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b004      	add	sp, #16
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	20000940 	.word	0x20000940
 8004ba0:	20000e1c 	.word	0x20000e1c
 8004ba4:	20000944 	.word	0x20000944

08004ba8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
 8004bb4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004bb6:	f000 fda3 	bl	8005700 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004bba:	4b26      	ldr	r3, [pc, #152]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	22b8      	movs	r2, #184	; 0xb8
 8004bc0:	5c9b      	ldrb	r3, [r3, r2]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d017      	beq.n	8004bf8 <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004bc8:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	22b4      	movs	r2, #180	; 0xb4
 8004bce:	589a      	ldr	r2, [r3, r2]
 8004bd0:	68f9      	ldr	r1, [r7, #12]
 8004bd2:	43c9      	mvns	r1, r1
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	21b4      	movs	r1, #180	; 0xb4
 8004bd8:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	22b8      	movs	r2, #184	; 0xb8
 8004be0:	2101      	movs	r1, #1
 8004be2:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d006      	beq.n	8004bf8 <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 f988 	bl	8004f04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004bf4:	f000 fd74 	bl	80056e0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004bf8:	f000 fd94 	bl	8005724 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004bfc:	f000 fd80 	bl	8005700 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	22b4      	movs	r2, #180	; 0xb4
 8004c0c:	589a      	ldr	r2, [r3, r2]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	22b8      	movs	r2, #184	; 0xb8
 8004c18:	5c9b      	ldrb	r3, [r3, r2]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d002      	beq.n	8004c26 <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e00a      	b.n	8004c3c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	22b4      	movs	r2, #180	; 0xb4
 8004c2c:	589a      	ldr	r2, [r3, r2]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	43c9      	mvns	r1, r1
 8004c32:	400a      	ands	r2, r1
 8004c34:	21b4      	movs	r1, #180	; 0xb4
 8004c36:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <xTaskNotifyWait+0xac>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	22b8      	movs	r2, #184	; 0xb8
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8004c46:	f000 fd6d 	bl	8005724 <vPortExitCritical>

		return xReturn;
 8004c4a:	697b      	ldr	r3, [r7, #20]
	}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000940 	.word	0x20000940

08004c58 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	1dfb      	adds	r3, r7, #7
 8004c66:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <xTaskGenericNotify+0x1e>
 8004c72:	b672      	cpsid	i
 8004c74:	e7fe      	b.n	8004c74 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8004c7a:	f000 fd41 	bl	8005700 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	22b4      	movs	r2, #180	; 0xb4
 8004c88:	589a      	ldr	r2, [r3, r2]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004c8e:	2317      	movs	r3, #23
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	21b8      	movs	r1, #184	; 0xb8
 8004c96:	5c52      	ldrb	r2, [r2, r1]
 8004c98:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	22b8      	movs	r2, #184	; 0xb8
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d827      	bhi.n	8004cfa <xTaskGenericNotify+0xa2>
 8004caa:	009a      	lsls	r2, r3, #2
 8004cac:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <xTaskGenericNotify+0x128>)
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	22b4      	movs	r2, #180	; 0xb4
 8004cb8:	589a      	ldr	r2, [r3, r2]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	21b4      	movs	r1, #180	; 0xb4
 8004cc2:	505a      	str	r2, [r3, r1]
					break;
 8004cc4:	e023      	b.n	8004d0e <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	22b4      	movs	r2, #180	; 0xb4
 8004cca:	589b      	ldr	r3, [r3, r2]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	21b4      	movs	r1, #180	; 0xb4
 8004cd2:	505a      	str	r2, [r3, r1]
					break;
 8004cd4:	e01b      	b.n	8004d0e <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	21b4      	movs	r1, #180	; 0xb4
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	505a      	str	r2, [r3, r1]
					break;
 8004cde:	e016      	b.n	8004d0e <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004ce0:	2317      	movs	r3, #23
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d004      	beq.n	8004cf4 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	21b4      	movs	r1, #180	; 0xb4
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004cf2:	e00c      	b.n	8004d0e <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
					break;
 8004cf8:	e009      	b.n	8004d0e <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	22b4      	movs	r2, #180	; 0xb4
 8004cfe:	589b      	ldr	r3, [r3, r2]
 8004d00:	3301      	adds	r3, #1
 8004d02:	d003      	beq.n	8004d0c <xTaskGenericNotify+0xb4>
 8004d04:	b672      	cpsid	i
 8004d06:	e7fe      	b.n	8004d06 <xTaskGenericNotify+0xae>
					break;
 8004d08:	46c0      	nop			; (mov r8, r8)
 8004d0a:	e000      	b.n	8004d0e <xTaskGenericNotify+0xb6>

					break;
 8004d0c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d0e:	2317      	movs	r3, #23
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d12b      	bne.n	8004d70 <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7fe fcce 	bl	80036be <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	4b17      	ldr	r3, [pc, #92]	; (8004d84 <xTaskGenericNotify+0x12c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d903      	bls.n	8004d36 <xTaskGenericNotify+0xde>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <xTaskGenericNotify+0x12c>)
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	0013      	movs	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <xTaskGenericNotify+0x130>)
 8004d44:	189a      	adds	r2, r3, r2
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	0010      	movs	r0, r2
 8004d4e:	f7fe fc5e 	bl	800360e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <xTaskGenericNotify+0x106>
 8004d5a:	b672      	cpsid	i
 8004d5c:	e7fe      	b.n	8004d5c <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <xTaskGenericNotify+0x134>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d901      	bls.n	8004d70 <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004d6c:	f000 fcb8 	bl	80056e0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004d70:	f000 fcd8 	bl	8005724 <vPortExitCritical>

		return xReturn;
 8004d74:	69fb      	ldr	r3, [r7, #28]
	}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b008      	add	sp, #32
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	08005ee8 	.word	0x08005ee8
 8004d84:	20000e1c 	.word	0x20000e1c
 8004d88:	20000944 	.word	0x20000944
 8004d8c:	20000940 	.word	0x20000940

08004d90 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	603b      	str	r3, [r7, #0]
 8004d9c:	1dfb      	adds	r3, r7, #7
 8004d9e:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004da0:	2301      	movs	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <xTaskGenericNotifyFromISR+0x1e>
 8004daa:	b672      	cpsid	i
 8004dac:	e7fe      	b.n	8004dac <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004db2:	f000 fccf 	bl	8005754 <ulSetInterruptMaskFromISR>
 8004db6:	0003      	movs	r3, r0
 8004db8:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	22b4      	movs	r2, #180	; 0xb4
 8004dc4:	589a      	ldr	r2, [r3, r2]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004dca:	2313      	movs	r3, #19
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	21b8      	movs	r1, #184	; 0xb8
 8004dd2:	5c52      	ldrb	r2, [r2, r1]
 8004dd4:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	22b8      	movs	r2, #184	; 0xb8
 8004dda:	2102      	movs	r1, #2
 8004ddc:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8004dde:	1dfb      	adds	r3, r7, #7
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d827      	bhi.n	8004e36 <xTaskGenericNotifyFromISR+0xa6>
 8004de6:	009a      	lsls	r2, r3, #2
 8004de8:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <xTaskGenericNotifyFromISR+0x158>)
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	22b4      	movs	r2, #180	; 0xb4
 8004df4:	589a      	ldr	r2, [r3, r2]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	21b4      	movs	r1, #180	; 0xb4
 8004dfe:	505a      	str	r2, [r3, r1]
					break;
 8004e00:	e023      	b.n	8004e4a <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	22b4      	movs	r2, #180	; 0xb4
 8004e06:	589b      	ldr	r3, [r3, r2]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	21b4      	movs	r1, #180	; 0xb4
 8004e0e:	505a      	str	r2, [r3, r1]
					break;
 8004e10:	e01b      	b.n	8004e4a <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	21b4      	movs	r1, #180	; 0xb4
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	505a      	str	r2, [r3, r1]
					break;
 8004e1a:	e016      	b.n	8004e4a <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004e1c:	2313      	movs	r3, #19
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d004      	beq.n	8004e30 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	21b4      	movs	r1, #180	; 0xb4
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004e2e:	e00c      	b.n	8004e4a <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
					break;
 8004e34:	e009      	b.n	8004e4a <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	22b4      	movs	r2, #180	; 0xb4
 8004e3a:	589b      	ldr	r3, [r3, r2]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	d003      	beq.n	8004e48 <xTaskGenericNotifyFromISR+0xb8>
 8004e40:	b672      	cpsid	i
 8004e42:	e7fe      	b.n	8004e42 <xTaskGenericNotifyFromISR+0xb2>
					break;
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	e000      	b.n	8004e4a <xTaskGenericNotifyFromISR+0xba>
					break;
 8004e48:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e4a:	2313      	movs	r3, #19
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d13f      	bne.n	8004ed4 <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <xTaskGenericNotifyFromISR+0xd0>
 8004e5c:	b672      	cpsid	i
 8004e5e:	e7fe      	b.n	8004e5e <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e60:	4b22      	ldr	r3, [pc, #136]	; (8004eec <xTaskGenericNotifyFromISR+0x15c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11d      	bne.n	8004ea4 <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fe fc26 	bl	80036be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <xTaskGenericNotifyFromISR+0x160>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d903      	bls.n	8004e86 <xTaskGenericNotifyFromISR+0xf6>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <xTaskGenericNotifyFromISR+0x160>)
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8a:	0013      	movs	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <xTaskGenericNotifyFromISR+0x164>)
 8004e94:	189a      	adds	r2, r3, r2
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	0010      	movs	r0, r2
 8004e9e:	f7fe fbb6 	bl	800360e <vListInsertEnd>
 8004ea2:	e007      	b.n	8004eb4 <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3318      	adds	r3, #24
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <xTaskGenericNotifyFromISR+0x168>)
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7fe fbad 	bl	800360e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	4b10      	ldr	r3, [pc, #64]	; (8004efc <xTaskGenericNotifyFromISR+0x16c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d908      	bls.n	8004ed4 <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <xTaskGenericNotifyFromISR+0x170>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 fc42 	bl	8005760 <vClearInterruptMaskFromISR>

		return xReturn;
 8004edc:	69fb      	ldr	r3, [r7, #28]
	}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b008      	add	sp, #32
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	08005efc 	.word	0x08005efc
 8004eec:	20000e3c 	.word	0x20000e3c
 8004ef0:	20000e1c 	.word	0x20000e1c
 8004ef4:	20000944 	.word	0x20000944
 8004ef8:	20000dd4 	.word	0x20000dd4
 8004efc:	20000940 	.word	0x20000940
 8004f00:	20000e28 	.word	0x20000e28

08004f04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f0e:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7fe fbcf 	bl	80036be <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3301      	adds	r3, #1
 8004f24:	d10b      	bne.n	8004f3e <prvAddCurrentTaskToDelayedList+0x3a>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	1d1a      	adds	r2, r3, #4
 8004f32:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <prvAddCurrentTaskToDelayedList+0x98>)
 8004f34:	0011      	movs	r1, r2
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7fe fb69 	bl	800360e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f3c:	e026      	b.n	8004f8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	18d3      	adds	r3, r2, r3
 8004f44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d209      	bcs.n	8004f6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	0019      	movs	r1, r3
 8004f62:	0010      	movs	r0, r2
 8004f64:	f7fe fb75 	bl	8003652 <vListInsert>
}
 8004f68:	e010      	b.n	8004f8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3304      	adds	r3, #4
 8004f74:	0019      	movs	r1, r3
 8004f76:	0010      	movs	r0, r2
 8004f78:	f7fe fb6b 	bl	8003652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d202      	bcs.n	8004f8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	601a      	str	r2, [r3, #0]
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	b004      	add	sp, #16
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000e18 	.word	0x20000e18
 8004f98:	20000940 	.word	0x20000940
 8004f9c:	20000e00 	.word	0x20000e00
 8004fa0:	20000dd0 	.word	0x20000dd0
 8004fa4:	20000dcc 	.word	0x20000dcc
 8004fa8:	20000e34 	.word	0x20000e34

08004fac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fb6:	f000 fac9 	bl	800554c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <xTimerCreateTimerTask+0x6c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d020      	beq.n	8005004 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004fca:	003a      	movs	r2, r7
 8004fcc:	1d39      	adds	r1, r7, #4
 8004fce:	2308      	movs	r3, #8
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f7fe fada 	bl	800358c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004fd8:	683c      	ldr	r4, [r7, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	490f      	ldr	r1, [pc, #60]	; (800501c <xTimerCreateTimerTask+0x70>)
 8004fe0:	480f      	ldr	r0, [pc, #60]	; (8005020 <xTimerCreateTimerTask+0x74>)
 8004fe2:	9202      	str	r2, [sp, #8]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	2300      	movs	r3, #0
 8004fec:	0022      	movs	r2, r4
 8004fee:	f7fe ffba 	bl	8003f66 <xTaskCreateStatic>
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <xTimerCreateTimerTask+0x78>)
 8004ff6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <xTimerCreateTimerTask+0x78>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xTimerCreateTimerTask+0x62>
 800500a:	b672      	cpsid	i
 800500c:	e7fe      	b.n	800500c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	0018      	movs	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	b005      	add	sp, #20
 8005016:	bd90      	pop	{r4, r7, pc}
 8005018:	20000e70 	.word	0x20000e70
 800501c:	08005de4 	.word	0x08005de4
 8005020:	08005145 	.word	0x08005145
 8005024:	20000e74 	.word	0x20000e74

08005028 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b08b      	sub	sp, #44	; 0x2c
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <xTimerGenericCommand+0x1c>
 8005040:	b672      	cpsid	i
 8005042:	e7fe      	b.n	8005042 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005044:	4b1c      	ldr	r3, [pc, #112]	; (80050b8 <xTimerGenericCommand+0x90>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d030      	beq.n	80050ae <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800504c:	2414      	movs	r4, #20
 800504e:	193b      	adds	r3, r7, r4
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005054:	193b      	adds	r3, r7, r4
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800505a:	193b      	adds	r3, r7, r4
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b05      	cmp	r3, #5
 8005064:	dc19      	bgt.n	800509a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005066:	f7ff fd27 	bl	8004ab8 <xTaskGetSchedulerState>
 800506a:	0003      	movs	r3, r0
 800506c:	2b02      	cmp	r3, #2
 800506e:	d109      	bne.n	8005084 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <xTimerGenericCommand+0x90>)
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005076:	1939      	adds	r1, r7, r4
 8005078:	2300      	movs	r3, #0
 800507a:	f7fe fc0f 	bl	800389c <xQueueGenericSend>
 800507e:	0003      	movs	r3, r0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	e014      	b.n	80050ae <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <xTimerGenericCommand+0x90>)
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	2314      	movs	r3, #20
 800508a:	18f9      	adds	r1, r7, r3
 800508c:	2300      	movs	r3, #0
 800508e:	2200      	movs	r2, #0
 8005090:	f7fe fc04 	bl	800389c <xQueueGenericSend>
 8005094:	0003      	movs	r3, r0
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	e009      	b.n	80050ae <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <xTimerGenericCommand+0x90>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	2314      	movs	r3, #20
 80050a2:	18f9      	adds	r1, r7, r3
 80050a4:	2300      	movs	r3, #0
 80050a6:	f7fe fcbd 	bl	8003a24 <xQueueGenericSendFromISR>
 80050aa:	0003      	movs	r3, r0
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050b0:	0018      	movs	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b00b      	add	sp, #44	; 0x2c
 80050b6:	bd90      	pop	{r4, r7, pc}
 80050b8:	20000e70 	.word	0x20000e70

080050bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050c6:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <prvProcessExpiredTimer+0x84>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3304      	adds	r3, #4
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7fe faf2 	bl	80036be <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2228      	movs	r2, #40	; 0x28
 80050de:	5c9b      	ldrb	r3, [r3, r2]
 80050e0:	001a      	movs	r2, r3
 80050e2:	2304      	movs	r3, #4
 80050e4:	4013      	ands	r3, r2
 80050e6:	d019      	beq.n	800511c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	18d1      	adds	r1, r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f8c3 	bl	8005280 <prvInsertTimerInActiveList>
 80050fa:	1e03      	subs	r3, r0, #0
 80050fc:	d017      	beq.n	800512e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	2300      	movs	r3, #0
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	2100      	movs	r1, #0
 800510a:	f7ff ff8d 	bl	8005028 <xTimerGenericCommand>
 800510e:	0003      	movs	r3, r0
 8005110:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <prvProcessExpiredTimer+0x72>
 8005118:	b672      	cpsid	i
 800511a:	e7fe      	b.n	800511a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2228      	movs	r2, #40	; 0x28
 8005120:	5c9b      	ldrb	r3, [r3, r2]
 8005122:	2201      	movs	r2, #1
 8005124:	4393      	bics	r3, r2
 8005126:	b2d9      	uxtb	r1, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2228      	movs	r2, #40	; 0x28
 800512c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	0010      	movs	r0, r2
 8005136:	4798      	blx	r3
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b004      	add	sp, #16
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000e68 	.word	0x20000e68

08005144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800514c:	2308      	movs	r3, #8
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	0018      	movs	r0, r3
 8005152:	f000 f853 	bl	80051fc <prvGetNextExpireTime>
 8005156:	0003      	movs	r3, r0
 8005158:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	0011      	movs	r1, r2
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f803 	bl	800516c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005166:	f000 f8cd 	bl	8005304 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800516a:	e7ef      	b.n	800514c <prvTimerTask+0x8>

0800516c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005176:	f7ff f913 	bl	80043a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800517a:	2308      	movs	r3, #8
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	0018      	movs	r0, r3
 8005180:	f000 f85e 	bl	8005240 <prvSampleTimeNow>
 8005184:	0003      	movs	r3, r0
 8005186:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d12b      	bne.n	80051e6 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10c      	bne.n	80051ae <prvProcessTimerOrBlockTask+0x42>
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d808      	bhi.n	80051ae <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800519c:	f7ff f90c 	bl	80043b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	0011      	movs	r1, r2
 80051a6:	0018      	movs	r0, r3
 80051a8:	f7ff ff88 	bl	80050bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051ac:	e01d      	b.n	80051ea <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051b4:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <prvProcessTimerOrBlockTask+0x88>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <prvProcessTimerOrBlockTask+0x56>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <prvProcessTimerOrBlockTask+0x58>
 80051c2:	2300      	movs	r3, #0
 80051c4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <prvProcessTimerOrBlockTask+0x8c>)
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	0019      	movs	r1, r3
 80051d4:	f7fe fe94 	bl	8003f00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80051d8:	f7ff f8ee 	bl	80043b8 <xTaskResumeAll>
 80051dc:	1e03      	subs	r3, r0, #0
 80051de:	d104      	bne.n	80051ea <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 80051e0:	f000 fa7e 	bl	80056e0 <vPortYield>
}
 80051e4:	e001      	b.n	80051ea <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 80051e6:	f7ff f8e7 	bl	80043b8 <xTaskResumeAll>
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b004      	add	sp, #16
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	20000e6c 	.word	0x20000e6c
 80051f8:	20000e70 	.word	0x20000e70

080051fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005204:	4b0d      	ldr	r3, [pc, #52]	; (800523c <prvGetNextExpireTime+0x40>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <prvGetNextExpireTime+0x16>
 800520e:	2201      	movs	r2, #1
 8005210:	e000      	b.n	8005214 <prvGetNextExpireTime+0x18>
 8005212:	2200      	movs	r2, #0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <prvGetNextExpireTime+0x40>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e001      	b.n	8005230 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005230:	68fb      	ldr	r3, [r7, #12]
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b004      	add	sp, #16
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	20000e68 	.word	0x20000e68

08005240 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005248:	f7ff f942 	bl	80044d0 <xTaskGetTickCount>
 800524c:	0003      	movs	r3, r0
 800524e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <prvSampleTimeNow+0x3c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	429a      	cmp	r2, r3
 8005258:	d205      	bcs.n	8005266 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800525a:	f000 f919 	bl	8005490 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e002      	b.n	800526c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <prvSampleTimeNow+0x3c>)
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	0018      	movs	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	b004      	add	sp, #16
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000e78 	.word	0x20000e78

08005280 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d812      	bhi.n	80052cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e01b      	b.n	80052f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80052ba:	4b10      	ldr	r3, [pc, #64]	; (80052fc <prvInsertTimerInActiveList+0x7c>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3304      	adds	r3, #4
 80052c2:	0019      	movs	r1, r3
 80052c4:	0010      	movs	r0, r2
 80052c6:	f7fe f9c4 	bl	8003652 <vListInsert>
 80052ca:	e012      	b.n	80052f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d206      	bcs.n	80052e2 <prvInsertTimerInActiveList+0x62>
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d302      	bcc.n	80052e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e007      	b.n	80052f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <prvInsertTimerInActiveList+0x80>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3304      	adds	r3, #4
 80052ea:	0019      	movs	r1, r3
 80052ec:	0010      	movs	r0, r2
 80052ee:	f7fe f9b0 	bl	8003652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052f2:	697b      	ldr	r3, [r7, #20]
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b006      	add	sp, #24
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000e6c 	.word	0x20000e6c
 8005300:	20000e68 	.word	0x20000e68

08005304 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b08d      	sub	sp, #52	; 0x34
 8005308:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800530a:	e0ac      	b.n	8005466 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800530c:	2208      	movs	r2, #8
 800530e:	18bb      	adds	r3, r7, r2
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	da0f      	bge.n	8005336 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005316:	18bb      	adds	r3, r7, r2
 8005318:	3304      	adds	r3, #4
 800531a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <prvProcessReceivedCommands+0x22>
 8005322:	b672      	cpsid	i
 8005324:	e7fe      	b.n	8005324 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	6858      	ldr	r0, [r3, #4]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0019      	movs	r1, r3
 8005334:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005336:	2208      	movs	r2, #8
 8005338:	18bb      	adds	r3, r7, r2
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	da00      	bge.n	8005342 <prvProcessReceivedCommands+0x3e>
 8005340:	e090      	b.n	8005464 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005342:	18bb      	adds	r3, r7, r2
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	3304      	adds	r3, #4
 8005354:	0018      	movs	r0, r3
 8005356:	f7fe f9b2 	bl	80036be <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800535a:	1d3b      	adds	r3, r7, #4
 800535c:	0018      	movs	r0, r3
 800535e:	f7ff ff6f 	bl	8005240 <prvSampleTimeNow>
 8005362:	0003      	movs	r3, r0
 8005364:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005366:	2308      	movs	r3, #8
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b09      	cmp	r3, #9
 800536e:	d900      	bls.n	8005372 <prvProcessReceivedCommands+0x6e>
 8005370:	e079      	b.n	8005466 <prvProcessReceivedCommands+0x162>
 8005372:	009a      	lsls	r2, r3, #2
 8005374:	4b44      	ldr	r3, [pc, #272]	; (8005488 <prvProcessReceivedCommands+0x184>)
 8005376:	18d3      	adds	r3, r2, r3
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2228      	movs	r2, #40	; 0x28
 8005380:	5c9b      	ldrb	r3, [r3, r2]
 8005382:	2201      	movs	r2, #1
 8005384:	4313      	orrs	r3, r2
 8005386:	b2d9      	uxtb	r1, r3
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2228      	movs	r2, #40	; 0x28
 800538c:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800538e:	2408      	movs	r4, #8
 8005390:	193b      	adds	r3, r7, r4
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	18d1      	adds	r1, r2, r3
 800539a:	193b      	adds	r3, r7, r4
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	6a38      	ldr	r0, [r7, #32]
 80053a2:	f7ff ff6d 	bl	8005280 <prvInsertTimerInActiveList>
 80053a6:	1e03      	subs	r3, r0, #0
 80053a8:	d05d      	beq.n	8005466 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	6a3a      	ldr	r2, [r7, #32]
 80053b0:	0010      	movs	r0, r2
 80053b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2228      	movs	r2, #40	; 0x28
 80053b8:	5c9b      	ldrb	r3, [r3, r2]
 80053ba:	001a      	movs	r2, r3
 80053bc:	2304      	movs	r3, #4
 80053be:	4013      	ands	r3, r2
 80053c0:	d051      	beq.n	8005466 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053c2:	193b      	adds	r3, r7, r4
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	18d2      	adds	r2, r2, r3
 80053cc:	6a38      	ldr	r0, [r7, #32]
 80053ce:	2300      	movs	r3, #0
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	2100      	movs	r1, #0
 80053d6:	f7ff fe27 	bl	8005028 <xTimerGenericCommand>
 80053da:	0003      	movs	r3, r0
 80053dc:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d140      	bne.n	8005466 <prvProcessReceivedCommands+0x162>
 80053e4:	b672      	cpsid	i
 80053e6:	e7fe      	b.n	80053e6 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	2228      	movs	r2, #40	; 0x28
 80053ec:	5c9b      	ldrb	r3, [r3, r2]
 80053ee:	2201      	movs	r2, #1
 80053f0:	4393      	bics	r3, r2
 80053f2:	b2d9      	uxtb	r1, r3
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	2228      	movs	r2, #40	; 0x28
 80053f8:	5499      	strb	r1, [r3, r2]
					break;
 80053fa:	e034      	b.n	8005466 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2228      	movs	r2, #40	; 0x28
 8005400:	5c9b      	ldrb	r3, [r3, r2]
 8005402:	2201      	movs	r2, #1
 8005404:	4313      	orrs	r3, r2
 8005406:	b2d9      	uxtb	r1, r3
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2228      	movs	r2, #40	; 0x28
 800540c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800540e:	2308      	movs	r3, #8
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <prvProcessReceivedCommands+0x120>
 8005420:	b672      	cpsid	i
 8005422:	e7fe      	b.n	8005422 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	699a      	ldr	r2, [r3, #24]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	18d1      	adds	r1, r2, r3
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	6a38      	ldr	r0, [r7, #32]
 8005432:	f7ff ff25 	bl	8005280 <prvInsertTimerInActiveList>
					break;
 8005436:	e016      	b.n	8005466 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	2228      	movs	r2, #40	; 0x28
 800543c:	5c9b      	ldrb	r3, [r3, r2]
 800543e:	001a      	movs	r2, r3
 8005440:	2302      	movs	r3, #2
 8005442:	4013      	ands	r3, r2
 8005444:	d104      	bne.n	8005450 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	0018      	movs	r0, r3
 800544a:	f000 fa9d 	bl	8005988 <vPortFree>
 800544e:	e00a      	b.n	8005466 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2228      	movs	r2, #40	; 0x28
 8005454:	5c9b      	ldrb	r3, [r3, r2]
 8005456:	2201      	movs	r2, #1
 8005458:	4393      	bics	r3, r2
 800545a:	b2d9      	uxtb	r1, r3
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	2228      	movs	r2, #40	; 0x28
 8005460:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005462:	e000      	b.n	8005466 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005464:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005466:	4b09      	ldr	r3, [pc, #36]	; (800548c <prvProcessReceivedCommands+0x188>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2208      	movs	r2, #8
 800546c:	18b9      	adds	r1, r7, r2
 800546e:	2200      	movs	r2, #0
 8005470:	0018      	movs	r0, r3
 8005472:	f7fe fb4b 	bl	8003b0c <xQueueReceive>
 8005476:	1e03      	subs	r3, r0, #0
 8005478:	d000      	beq.n	800547c <prvProcessReceivedCommands+0x178>
 800547a:	e747      	b.n	800530c <prvProcessReceivedCommands+0x8>
	}
}
 800547c:	46c0      	nop			; (mov r8, r8)
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	46bd      	mov	sp, r7
 8005482:	b00b      	add	sp, #44	; 0x2c
 8005484:	bd90      	pop	{r4, r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	08005f10 	.word	0x08005f10
 800548c:	20000e70 	.word	0x20000e70

08005490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005496:	e041      	b.n	800551c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <prvSwitchTimerLists+0xb4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a2:	4b28      	ldr	r3, [pc, #160]	; (8005544 <prvSwitchTimerLists+0xb4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3304      	adds	r3, #4
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7fe f904 	bl	80036be <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	0010      	movs	r0, r2
 80054be:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2228      	movs	r2, #40	; 0x28
 80054c4:	5c9b      	ldrb	r3, [r3, r2]
 80054c6:	001a      	movs	r2, r3
 80054c8:	2304      	movs	r3, #4
 80054ca:	4013      	ands	r3, r2
 80054cc:	d026      	beq.n	800551c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	18d3      	adds	r3, r2, r3
 80054d6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d90e      	bls.n	80054fe <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <prvSwitchTimerLists+0xb4>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3304      	adds	r3, #4
 80054f4:	0019      	movs	r1, r3
 80054f6:	0010      	movs	r0, r2
 80054f8:	f7fe f8ab 	bl	8003652 <vListInsert>
 80054fc:	e00e      	b.n	800551c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	2300      	movs	r3, #0
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	2100      	movs	r1, #0
 800550a:	f7ff fd8d 	bl	8005028 <xTimerGenericCommand>
 800550e:	0003      	movs	r3, r0
 8005510:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <prvSwitchTimerLists+0x8c>
 8005518:	b672      	cpsid	i
 800551a:	e7fe      	b.n	800551a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <prvSwitchTimerLists+0xb4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1b8      	bne.n	8005498 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <prvSwitchTimerLists+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <prvSwitchTimerLists+0xb8>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <prvSwitchTimerLists+0xb4>)
 8005532:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <prvSwitchTimerLists+0xb8>)
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	601a      	str	r2, [r3, #0]
}
 800553a:	46c0      	nop			; (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	b006      	add	sp, #24
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	20000e68 	.word	0x20000e68
 8005548:	20000e6c 	.word	0x20000e6c

0800554c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005552:	f000 f8d5 	bl	8005700 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005556:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <prvCheckForValidListAndQueue+0x64>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d123      	bne.n	80055a6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800555e:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <prvCheckForValidListAndQueue+0x68>)
 8005560:	0018      	movs	r0, r3
 8005562:	f7fe f82b 	bl	80035bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <prvCheckForValidListAndQueue+0x6c>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7fe f827 	bl	80035bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <prvCheckForValidListAndQueue+0x70>)
 8005570:	4a10      	ldr	r2, [pc, #64]	; (80055b4 <prvCheckForValidListAndQueue+0x68>)
 8005572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005574:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <prvCheckForValidListAndQueue+0x74>)
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <prvCheckForValidListAndQueue+0x6c>)
 8005578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800557a:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <prvCheckForValidListAndQueue+0x78>)
 800557c:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <prvCheckForValidListAndQueue+0x7c>)
 800557e:	2100      	movs	r1, #0
 8005580:	9100      	str	r1, [sp, #0]
 8005582:	2110      	movs	r1, #16
 8005584:	200a      	movs	r0, #10
 8005586:	f7fe f916 	bl	80037b6 <xQueueGenericCreateStatic>
 800558a:	0002      	movs	r2, r0
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <prvCheckForValidListAndQueue+0x64>)
 800558e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <prvCheckForValidListAndQueue+0x64>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d006      	beq.n	80055a6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <prvCheckForValidListAndQueue+0x64>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <prvCheckForValidListAndQueue+0x80>)
 800559e:	0011      	movs	r1, r2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fe fc85 	bl	8003eb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055a6:	f000 f8bd 	bl	8005724 <vPortExitCritical>
}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000e70 	.word	0x20000e70
 80055b4:	20000e40 	.word	0x20000e40
 80055b8:	20000e54 	.word	0x20000e54
 80055bc:	20000e68 	.word	0x20000e68
 80055c0:	20000e6c 	.word	0x20000e6c
 80055c4:	20000f1c 	.word	0x20000f1c
 80055c8:	20000e7c 	.word	0x20000e7c
 80055cc:	08005dec 	.word	0x08005dec

080055d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3b04      	subs	r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2280      	movs	r2, #128	; 0x80
 80055e6:	0452      	lsls	r2, r2, #17
 80055e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055fc:	4a08      	ldr	r2, [pc, #32]	; (8005620 <pxPortInitialiseStack+0x50>)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b14      	subs	r3, #20
 8005606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b20      	subs	r3, #32
 8005612:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b004      	add	sp, #16
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	08005625 	.word	0x08005625

08005624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <prvTaskExitError+0x2c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3301      	adds	r3, #1
 8005634:	d001      	beq.n	800563a <prvTaskExitError+0x16>
 8005636:	b672      	cpsid	i
 8005638:	e7fe      	b.n	8005638 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800563a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800563c:	46c0      	nop			; (mov r8, r8)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0fc      	beq.n	800563e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	b002      	add	sp, #8
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	20000010 	.word	0x20000010

08005654 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005660:	4a0b      	ldr	r2, [pc, #44]	; (8005690 <pxCurrentTCBConst2>)
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	3020      	adds	r0, #32
 8005668:	f380 8809 	msr	PSP, r0
 800566c:	2002      	movs	r0, #2
 800566e:	f380 8814 	msr	CONTROL, r0
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005678:	46ae      	mov	lr, r5
 800567a:	bc08      	pop	{r3}
 800567c:	bc04      	pop	{r2}
 800567e:	b662      	cpsie	i
 8005680:	4718      	bx	r3
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	46c0      	nop			; (mov r8, r8)

08005690 <pxCurrentTCBConst2>:
 8005690:	20000940 	.word	0x20000940
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46c0      	nop			; (mov r8, r8)

08005698 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <xPortStartScheduler+0x40>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <xPortStartScheduler+0x40>)
 80056a2:	21ff      	movs	r1, #255	; 0xff
 80056a4:	0409      	lsls	r1, r1, #16
 80056a6:	430a      	orrs	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056aa:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <xPortStartScheduler+0x40>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <xPortStartScheduler+0x40>)
 80056b0:	21ff      	movs	r1, #255	; 0xff
 80056b2:	0609      	lsls	r1, r1, #24
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056b8:	f000 f898 	bl	80057ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <xPortStartScheduler+0x44>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80056c2:	f7ff ffcd 	bl	8005660 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80056c6:	f7fe ffc1 	bl	800464c <vTaskSwitchContext>
	prvTaskExitError();
 80056ca:	f7ff ffab 	bl	8005624 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	e000ed20 	.word	0xe000ed20
 80056dc:	20000010 	.word	0x20000010

080056e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <vPortYield+0x1c>)
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	0552      	lsls	r2, r2, #21
 80056ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80056ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80056f0:	f3bf 8f6f 	isb	sy
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005704:	b672      	cpsid	i
	uxCriticalNesting++;
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <vPortEnterCritical+0x20>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <vPortEnterCritical+0x20>)
 800570e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005710:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005714:	f3bf 8f6f 	isb	sy
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	20000010 	.word	0x20000010

08005724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005728:	4b09      	ldr	r3, [pc, #36]	; (8005750 <vPortExitCritical+0x2c>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <vPortExitCritical+0x10>
 8005730:	b672      	cpsid	i
 8005732:	e7fe      	b.n	8005732 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <vPortExitCritical+0x2c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1e5a      	subs	r2, r3, #1
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <vPortExitCritical+0x2c>)
 800573c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <vPortExitCritical+0x2c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d100      	bne.n	8005748 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8005746:	b662      	cpsie	i
	}
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	20000010 	.word	0x20000010

08005754 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005754:	f3ef 8010 	mrs	r0, PRIMASK
 8005758:	b672      	cpsid	i
 800575a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	0018      	movs	r0, r3

08005760 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005760:	f380 8810 	msr	PRIMASK, r0
 8005764:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005766:	46c0      	nop			; (mov r8, r8)
	...

08005770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005770:	f3ef 8009 	mrs	r0, PSP
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <pxCurrentTCBConst>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	3820      	subs	r0, #32
 800577a:	6010      	str	r0, [r2, #0]
 800577c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800577e:	4644      	mov	r4, r8
 8005780:	464d      	mov	r5, r9
 8005782:	4656      	mov	r6, sl
 8005784:	465f      	mov	r7, fp
 8005786:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005788:	b508      	push	{r3, lr}
 800578a:	b672      	cpsid	i
 800578c:	f7fe ff5e 	bl	800464c <vTaskSwitchContext>
 8005790:	b662      	cpsie	i
 8005792:	bc0c      	pop	{r2, r3}
 8005794:	6811      	ldr	r1, [r2, #0]
 8005796:	6808      	ldr	r0, [r1, #0]
 8005798:	3010      	adds	r0, #16
 800579a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800579c:	46a0      	mov	r8, r4
 800579e:	46a9      	mov	r9, r5
 80057a0:	46b2      	mov	sl, r6
 80057a2:	46bb      	mov	fp, r7
 80057a4:	f380 8809 	msr	PSP, r0
 80057a8:	3820      	subs	r0, #32
 80057aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80057ac:	4718      	bx	r3
 80057ae:	46c0      	nop			; (mov r8, r8)

080057b0 <pxCurrentTCBConst>:
 80057b0:	20000940 	.word	0x20000940
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46c0      	nop			; (mov r8, r8)

080057b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80057be:	f7ff ffc9 	bl	8005754 <ulSetInterruptMaskFromISR>
 80057c2:	0003      	movs	r3, r0
 80057c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057c6:	f7fe fe91 	bl	80044ec <xTaskIncrementTick>
 80057ca:	1e03      	subs	r3, r0, #0
 80057cc:	d003      	beq.n	80057d6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <xPortSysTickHandler+0x30>)
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	0552      	lsls	r2, r2, #21
 80057d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	0018      	movs	r0, r3
 80057da:	f7ff ffc1 	bl	8005760 <vClearInterruptMaskFromISR>
}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b002      	add	sp, #8
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <vPortSetupTimerInterrupt+0x34>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <vPortSetupTimerInterrupt+0x38>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <vPortSetupTimerInterrupt+0x3c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	22fa      	movs	r2, #250	; 0xfa
 8005802:	0091      	lsls	r1, r2, #2
 8005804:	0018      	movs	r0, r3
 8005806:	f7fa fc7f 	bl	8000108 <__udivsi3>
 800580a:	0003      	movs	r3, r0
 800580c:	001a      	movs	r2, r3
 800580e:	4b07      	ldr	r3, [pc, #28]	; (800582c <vPortSetupTimerInterrupt+0x40>)
 8005810:	3a01      	subs	r2, #1
 8005812:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <vPortSetupTimerInterrupt+0x34>)
 8005816:	2207      	movs	r2, #7
 8005818:	601a      	str	r2, [r3, #0]
}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	e000e010 	.word	0xe000e010
 8005824:	e000e018 	.word	0xe000e018
 8005828:	20000004 	.word	0x20000004
 800582c:	e000e014 	.word	0xe000e014

08005830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800583c:	f7fe fdb0 	bl	80043a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005840:	4b4b      	ldr	r3, [pc, #300]	; (8005970 <pvPortMalloc+0x140>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005848:	f000 f8ec 	bl	8005a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800584c:	4b49      	ldr	r3, [pc, #292]	; (8005974 <pvPortMalloc+0x144>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4013      	ands	r3, r2
 8005854:	d000      	beq.n	8005858 <pvPortMalloc+0x28>
 8005856:	e07e      	b.n	8005956 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d012      	beq.n	8005884 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800585e:	2208      	movs	r2, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	189b      	adds	r3, r3, r2
 8005864:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2207      	movs	r2, #7
 800586a:	4013      	ands	r3, r2
 800586c:	d00a      	beq.n	8005884 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2207      	movs	r2, #7
 8005872:	4393      	bics	r3, r2
 8005874:	3308      	adds	r3, #8
 8005876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2207      	movs	r2, #7
 800587c:	4013      	ands	r3, r2
 800587e:	d001      	beq.n	8005884 <pvPortMalloc+0x54>
 8005880:	b672      	cpsid	i
 8005882:	e7fe      	b.n	8005882 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d065      	beq.n	8005956 <pvPortMalloc+0x126>
 800588a:	4b3b      	ldr	r3, [pc, #236]	; (8005978 <pvPortMalloc+0x148>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d860      	bhi.n	8005956 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005894:	4b39      	ldr	r3, [pc, #228]	; (800597c <pvPortMalloc+0x14c>)
 8005896:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005898:	4b38      	ldr	r3, [pc, #224]	; (800597c <pvPortMalloc+0x14c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800589e:	e004      	b.n	80058aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d903      	bls.n	80058bc <pvPortMalloc+0x8c>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f1      	bne.n	80058a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058bc:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <pvPortMalloc+0x140>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d047      	beq.n	8005956 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2208      	movs	r2, #8
 80058cc:	189b      	adds	r3, r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	1ad2      	subs	r2, r2, r3
 80058e0:	2308      	movs	r3, #8
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d916      	bls.n	8005916 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2207      	movs	r2, #7
 80058f4:	4013      	ands	r3, r2
 80058f6:	d001      	beq.n	80058fc <pvPortMalloc+0xcc>
 80058f8:	b672      	cpsid	i
 80058fa:	e7fe      	b.n	80058fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0018      	movs	r0, r3
 8005912:	f000 f8e7 	bl	8005ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005916:	4b18      	ldr	r3, [pc, #96]	; (8005978 <pvPortMalloc+0x148>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <pvPortMalloc+0x148>)
 8005922:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <pvPortMalloc+0x148>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pvPortMalloc+0x150>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d203      	bcs.n	8005938 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005930:	4b11      	ldr	r3, [pc, #68]	; (8005978 <pvPortMalloc+0x148>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b12      	ldr	r3, [pc, #72]	; (8005980 <pvPortMalloc+0x150>)
 8005936:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <pvPortMalloc+0x144>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	431a      	orrs	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <pvPortMalloc+0x154>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <pvPortMalloc+0x154>)
 8005954:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005956:	f7fe fd2f 	bl	80043b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2207      	movs	r2, #7
 800595e:	4013      	ands	r3, r2
 8005960:	d001      	beq.n	8005966 <pvPortMalloc+0x136>
 8005962:	b672      	cpsid	i
 8005964:	e7fe      	b.n	8005964 <pvPortMalloc+0x134>
	return pvReturn;
 8005966:	68fb      	ldr	r3, [r7, #12]
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b006      	add	sp, #24
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20001b74 	.word	0x20001b74
 8005974:	20001b88 	.word	0x20001b88
 8005978:	20001b78 	.word	0x20001b78
 800597c:	20001b6c 	.word	0x20001b6c
 8005980:	20001b7c 	.word	0x20001b7c
 8005984:	20001b80 	.word	0x20001b80

08005988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d03a      	beq.n	8005a10 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800599a:	2308      	movs	r3, #8
 800599c:	425b      	negs	r3, r3
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <vPortFree+0x90>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4013      	ands	r3, r2
 80059b2:	d101      	bne.n	80059b8 <vPortFree+0x30>
 80059b4:	b672      	cpsid	i
 80059b6:	e7fe      	b.n	80059b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <vPortFree+0x3c>
 80059c0:	b672      	cpsid	i
 80059c2:	e7fe      	b.n	80059c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <vPortFree+0x90>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4013      	ands	r3, r2
 80059ce:	d01f      	beq.n	8005a10 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11b      	bne.n	8005a10 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <vPortFree+0x90>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	43db      	mvns	r3, r3
 80059e2:	401a      	ands	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059e8:	f7fe fcda 	bl	80043a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <vPortFree+0x94>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	18d2      	adds	r2, r2, r3
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <vPortFree+0x94>)
 80059f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	0018      	movs	r0, r3
 80059fe:	f000 f871 	bl	8005ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <vPortFree+0x98>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <vPortFree+0x98>)
 8005a0a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8005a0c:	f7fe fcd4 	bl	80043b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b004      	add	sp, #16
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20001b88 	.word	0x20001b88
 8005a1c:	20001b78 	.word	0x20001b78
 8005a20:	20001b84 	.word	0x20001b84

08005a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a2a:	23c0      	movs	r3, #192	; 0xc0
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a30:	4b26      	ldr	r3, [pc, #152]	; (8005acc <prvHeapInit+0xa8>)
 8005a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2207      	movs	r2, #7
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d00c      	beq.n	8005a56 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3307      	adds	r3, #7
 8005a40:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2207      	movs	r2, #7
 8005a46:	4393      	bics	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <prvHeapInit+0xa8>)
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <prvHeapInit+0xac>)
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <prvHeapInit+0xac>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	18d3      	adds	r3, r2, r3
 8005a6c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a6e:	2208      	movs	r2, #8
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2207      	movs	r2, #7
 8005a7a:	4393      	bics	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <prvHeapInit+0xb0>)
 8005a82:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <prvHeapInit+0xb0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a8c:	4b11      	ldr	r3, [pc, #68]	; (8005ad4 <prvHeapInit+0xb0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <prvHeapInit+0xb0>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <prvHeapInit+0xb4>)
 8005ab0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <prvHeapInit+0xb8>)
 8005ab8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <prvHeapInit+0xbc>)
 8005abc:	2280      	movs	r2, #128	; 0x80
 8005abe:	0612      	lsls	r2, r2, #24
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	b004      	add	sp, #16
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	20000f6c 	.word	0x20000f6c
 8005ad0:	20001b6c 	.word	0x20001b6c
 8005ad4:	20001b74 	.word	0x20001b74
 8005ad8:	20001b7c 	.word	0x20001b7c
 8005adc:	20001b78 	.word	0x20001b78
 8005ae0:	20001b88 	.word	0x20001b88

08005ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <prvInsertBlockIntoFreeList+0xa8>)
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e002      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x14>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d8f7      	bhi.n	8005af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d108      	bne.n	8005b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	18d2      	adds	r2, r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	18d2      	adds	r2, r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d118      	bne.n	8005b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <prvInsertBlockIntoFreeList+0xac>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d00d      	beq.n	8005b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	18d2      	adds	r2, r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e008      	b.n	8005b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b62:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <prvInsertBlockIntoFreeList+0xac>)
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e003      	b.n	8005b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d002      	beq.n	8005b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b004      	add	sp, #16
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	20001b6c 	.word	0x20001b6c
 8005b90:	20001b74 	.word	0x20001b74

08005b94 <__libc_init_array>:
 8005b94:	b570      	push	{r4, r5, r6, lr}
 8005b96:	2600      	movs	r6, #0
 8005b98:	4d0c      	ldr	r5, [pc, #48]	; (8005bcc <__libc_init_array+0x38>)
 8005b9a:	4c0d      	ldr	r4, [pc, #52]	; (8005bd0 <__libc_init_array+0x3c>)
 8005b9c:	1b64      	subs	r4, r4, r5
 8005b9e:	10a4      	asrs	r4, r4, #2
 8005ba0:	42a6      	cmp	r6, r4
 8005ba2:	d109      	bne.n	8005bb8 <__libc_init_array+0x24>
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	f000 f8f9 	bl	8005d9c <_init>
 8005baa:	4d0a      	ldr	r5, [pc, #40]	; (8005bd4 <__libc_init_array+0x40>)
 8005bac:	4c0a      	ldr	r4, [pc, #40]	; (8005bd8 <__libc_init_array+0x44>)
 8005bae:	1b64      	subs	r4, r4, r5
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	42a6      	cmp	r6, r4
 8005bb4:	d105      	bne.n	8005bc2 <__libc_init_array+0x2e>
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
 8005bb8:	00b3      	lsls	r3, r6, #2
 8005bba:	58eb      	ldr	r3, [r5, r3]
 8005bbc:	4798      	blx	r3
 8005bbe:	3601      	adds	r6, #1
 8005bc0:	e7ee      	b.n	8005ba0 <__libc_init_array+0xc>
 8005bc2:	00b3      	lsls	r3, r6, #2
 8005bc4:	58eb      	ldr	r3, [r5, r3]
 8005bc6:	4798      	blx	r3
 8005bc8:	3601      	adds	r6, #1
 8005bca:	e7f2      	b.n	8005bb2 <__libc_init_array+0x1e>
 8005bcc:	08005fa0 	.word	0x08005fa0
 8005bd0:	08005fa0 	.word	0x08005fa0
 8005bd4:	08005fa0 	.word	0x08005fa0
 8005bd8:	08005fa4 	.word	0x08005fa4

08005bdc <__retarget_lock_acquire_recursive>:
 8005bdc:	4770      	bx	lr

08005bde <__retarget_lock_release_recursive>:
 8005bde:	4770      	bx	lr

08005be0 <memcpy>:
 8005be0:	2300      	movs	r3, #0
 8005be2:	b510      	push	{r4, lr}
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d100      	bne.n	8005bea <memcpy+0xa>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	5ccc      	ldrb	r4, [r1, r3]
 8005bec:	54c4      	strb	r4, [r0, r3]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	e7f8      	b.n	8005be4 <memcpy+0x4>

08005bf2 <memset>:
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	1882      	adds	r2, r0, r2
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d100      	bne.n	8005bfc <memset+0xa>
 8005bfa:	4770      	bx	lr
 8005bfc:	7019      	strb	r1, [r3, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	e7f9      	b.n	8005bf6 <memset+0x4>

08005c02 <cleanup_glue>:
 8005c02:	b570      	push	{r4, r5, r6, lr}
 8005c04:	000d      	movs	r5, r1
 8005c06:	6809      	ldr	r1, [r1, #0]
 8005c08:	0004      	movs	r4, r0
 8005c0a:	2900      	cmp	r1, #0
 8005c0c:	d001      	beq.n	8005c12 <cleanup_glue+0x10>
 8005c0e:	f7ff fff8 	bl	8005c02 <cleanup_glue>
 8005c12:	0029      	movs	r1, r5
 8005c14:	0020      	movs	r0, r4
 8005c16:	f000 f877 	bl	8005d08 <_free_r>
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}

08005c1c <_reclaim_reent>:
 8005c1c:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <_reclaim_reent+0xc8>)
 8005c1e:	b570      	push	{r4, r5, r6, lr}
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	0004      	movs	r4, r0
 8005c24:	4283      	cmp	r3, r0
 8005c26:	d049      	beq.n	8005cbc <_reclaim_reent+0xa0>
 8005c28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <_reclaim_reent+0x28>
 8005c2e:	2500      	movs	r5, #0
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	42ab      	cmp	r3, r5
 8005c34:	d147      	bne.n	8005cc6 <_reclaim_reent+0xaa>
 8005c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	2900      	cmp	r1, #0
 8005c3c:	d002      	beq.n	8005c44 <_reclaim_reent+0x28>
 8005c3e:	0020      	movs	r0, r4
 8005c40:	f000 f862 	bl	8005d08 <_free_r>
 8005c44:	6961      	ldr	r1, [r4, #20]
 8005c46:	2900      	cmp	r1, #0
 8005c48:	d002      	beq.n	8005c50 <_reclaim_reent+0x34>
 8005c4a:	0020      	movs	r0, r4
 8005c4c:	f000 f85c 	bl	8005d08 <_free_r>
 8005c50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c52:	2900      	cmp	r1, #0
 8005c54:	d002      	beq.n	8005c5c <_reclaim_reent+0x40>
 8005c56:	0020      	movs	r0, r4
 8005c58:	f000 f856 	bl	8005d08 <_free_r>
 8005c5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	d002      	beq.n	8005c68 <_reclaim_reent+0x4c>
 8005c62:	0020      	movs	r0, r4
 8005c64:	f000 f850 	bl	8005d08 <_free_r>
 8005c68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	d002      	beq.n	8005c74 <_reclaim_reent+0x58>
 8005c6e:	0020      	movs	r0, r4
 8005c70:	f000 f84a 	bl	8005d08 <_free_r>
 8005c74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005c76:	2900      	cmp	r1, #0
 8005c78:	d002      	beq.n	8005c80 <_reclaim_reent+0x64>
 8005c7a:	0020      	movs	r0, r4
 8005c7c:	f000 f844 	bl	8005d08 <_free_r>
 8005c80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005c82:	2900      	cmp	r1, #0
 8005c84:	d002      	beq.n	8005c8c <_reclaim_reent+0x70>
 8005c86:	0020      	movs	r0, r4
 8005c88:	f000 f83e 	bl	8005d08 <_free_r>
 8005c8c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d002      	beq.n	8005c98 <_reclaim_reent+0x7c>
 8005c92:	0020      	movs	r0, r4
 8005c94:	f000 f838 	bl	8005d08 <_free_r>
 8005c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d002      	beq.n	8005ca4 <_reclaim_reent+0x88>
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f000 f832 	bl	8005d08 <_free_r>
 8005ca4:	69a3      	ldr	r3, [r4, #24]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <_reclaim_reent+0xa0>
 8005caa:	0020      	movs	r0, r4
 8005cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cae:	4798      	blx	r3
 8005cb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005cb2:	2900      	cmp	r1, #0
 8005cb4:	d002      	beq.n	8005cbc <_reclaim_reent+0xa0>
 8005cb6:	0020      	movs	r0, r4
 8005cb8:	f7ff ffa3 	bl	8005c02 <cleanup_glue>
 8005cbc:	bd70      	pop	{r4, r5, r6, pc}
 8005cbe:	5949      	ldr	r1, [r1, r5]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d108      	bne.n	8005cd6 <_reclaim_reent+0xba>
 8005cc4:	3504      	adds	r5, #4
 8005cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	2d80      	cmp	r5, #128	; 0x80
 8005ccc:	d1f7      	bne.n	8005cbe <_reclaim_reent+0xa2>
 8005cce:	0020      	movs	r0, r4
 8005cd0:	f000 f81a 	bl	8005d08 <_free_r>
 8005cd4:	e7af      	b.n	8005c36 <_reclaim_reent+0x1a>
 8005cd6:	680e      	ldr	r6, [r1, #0]
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f000 f815 	bl	8005d08 <_free_r>
 8005cde:	0031      	movs	r1, r6
 8005ce0:	e7ee      	b.n	8005cc0 <_reclaim_reent+0xa4>
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	20000014 	.word	0x20000014

08005ce8 <__malloc_lock>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4802      	ldr	r0, [pc, #8]	; (8005cf4 <__malloc_lock+0xc>)
 8005cec:	f7ff ff76 	bl	8005bdc <__retarget_lock_acquire_recursive>
 8005cf0:	bd10      	pop	{r4, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20001b8c 	.word	0x20001b8c

08005cf8 <__malloc_unlock>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4802      	ldr	r0, [pc, #8]	; (8005d04 <__malloc_unlock+0xc>)
 8005cfc:	f7ff ff6f 	bl	8005bde <__retarget_lock_release_recursive>
 8005d00:	bd10      	pop	{r4, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	20001b8c 	.word	0x20001b8c

08005d08 <_free_r>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	0005      	movs	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d010      	beq.n	8005d32 <_free_r+0x2a>
 8005d10:	1f0c      	subs	r4, r1, #4
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da00      	bge.n	8005d1a <_free_r+0x12>
 8005d18:	18e4      	adds	r4, r4, r3
 8005d1a:	0028      	movs	r0, r5
 8005d1c:	f7ff ffe4 	bl	8005ce8 <__malloc_lock>
 8005d20:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <_free_r+0x90>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <_free_r+0x2c>
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6014      	str	r4, [r2, #0]
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	f7ff ffe3 	bl	8005cf8 <__malloc_unlock>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x42>
 8005d38:	6821      	ldr	r1, [r4, #0]
 8005d3a:	1860      	adds	r0, r4, r1
 8005d3c:	4283      	cmp	r3, r0
 8005d3e:	d1f3      	bne.n	8005d28 <_free_r+0x20>
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	1841      	adds	r1, r0, r1
 8005d46:	6021      	str	r1, [r4, #0]
 8005d48:	e7ee      	b.n	8005d28 <_free_r+0x20>
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <_free_r+0x4e>
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	d9f9      	bls.n	8005d4a <_free_r+0x42>
 8005d56:	6811      	ldr	r1, [r2, #0]
 8005d58:	1850      	adds	r0, r2, r1
 8005d5a:	42a0      	cmp	r0, r4
 8005d5c:	d10b      	bne.n	8005d76 <_free_r+0x6e>
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	1809      	adds	r1, r1, r0
 8005d62:	1850      	adds	r0, r2, r1
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	4283      	cmp	r3, r0
 8005d68:	d1e0      	bne.n	8005d2c <_free_r+0x24>
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	1841      	adds	r1, r0, r1
 8005d70:	6011      	str	r1, [r2, #0]
 8005d72:	6053      	str	r3, [r2, #4]
 8005d74:	e7da      	b.n	8005d2c <_free_r+0x24>
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d902      	bls.n	8005d80 <_free_r+0x78>
 8005d7a:	230c      	movs	r3, #12
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	e7d5      	b.n	8005d2c <_free_r+0x24>
 8005d80:	6821      	ldr	r1, [r4, #0]
 8005d82:	1860      	adds	r0, r4, r1
 8005d84:	4283      	cmp	r3, r0
 8005d86:	d103      	bne.n	8005d90 <_free_r+0x88>
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	1841      	adds	r1, r0, r1
 8005d8e:	6021      	str	r1, [r4, #0]
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6054      	str	r4, [r2, #4]
 8005d94:	e7ca      	b.n	8005d2c <_free_r+0x24>
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	20001b90 	.word	0x20001b90

08005d9c <_init>:
 8005d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da2:	bc08      	pop	{r3}
 8005da4:	469e      	mov	lr, r3
 8005da6:	4770      	bx	lr

08005da8 <_fini>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr
