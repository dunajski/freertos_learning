
FreeRTOS_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de8c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800df50  0800df50  0001df50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e69c  0800e69c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e69c  0800e69c  0001e69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6a4  0800e6a4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6a4  0800e6a4  0001e6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6a8  0800e6a8  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bac  200001e4  0800e890  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d90  0800e890  00022d90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002426a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ce  00000000  00000000  00044476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00048c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf8  00000000  00000000  0004aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7ac  00000000  00000000  0004c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000201fd  00000000  00000000  00069dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b14f1  00000000  00000000  00089fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b4aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e1c  00000000  00000000  0013b4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800df34 	.word	0x0800df34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800df34 	.word	0x0800df34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f95f 	bl	8001700 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8af 	bl	80015b0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f951 	bl	8001700 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f947 	bl	8001700 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f8d7 	bl	8001634 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f8cd 	bl	8001634 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f86c 	bl	80025e4 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f867 	bl	80025e4 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_fdiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0245      	lsls	r5, r0, #9
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0047      	lsls	r7, r0, #1
 800068e:	1c0c      	adds	r4, r1, #0
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	0e3f      	lsrs	r7, r7, #24
 8000694:	0fc6      	lsrs	r6, r0, #31
 8000696:	2f00      	cmp	r7, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fdiv+0x1c>
 800069a:	e070      	b.n	800077e <__aeabi_fdiv+0xfe>
 800069c:	2fff      	cmp	r7, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fdiv+0x22>
 80006a0:	e075      	b.n	800078e <__aeabi_fdiv+0x10e>
 80006a2:	00eb      	lsls	r3, r5, #3
 80006a4:	2580      	movs	r5, #128	; 0x80
 80006a6:	04ed      	lsls	r5, r5, #19
 80006a8:	431d      	orrs	r5, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	4699      	mov	r9, r3
 80006ae:	469a      	mov	sl, r3
 80006b0:	3f7f      	subs	r7, #127	; 0x7f
 80006b2:	0260      	lsls	r0, r4, #9
 80006b4:	0a43      	lsrs	r3, r0, #9
 80006b6:	4698      	mov	r8, r3
 80006b8:	0063      	lsls	r3, r4, #1
 80006ba:	0e1b      	lsrs	r3, r3, #24
 80006bc:	0fe4      	lsrs	r4, r4, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d04e      	beq.n	8000760 <__aeabi_fdiv+0xe0>
 80006c2:	2bff      	cmp	r3, #255	; 0xff
 80006c4:	d046      	beq.n	8000754 <__aeabi_fdiv+0xd4>
 80006c6:	4642      	mov	r2, r8
 80006c8:	00d0      	lsls	r0, r2, #3
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	04d2      	lsls	r2, r2, #19
 80006ce:	4302      	orrs	r2, r0
 80006d0:	4690      	mov	r8, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	3b7f      	subs	r3, #127	; 0x7f
 80006d6:	0031      	movs	r1, r6
 80006d8:	1aff      	subs	r7, r7, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	4061      	eors	r1, r4
 80006de:	b2c9      	uxtb	r1, r1
 80006e0:	4313      	orrs	r3, r2
 80006e2:	2b0f      	cmp	r3, #15
 80006e4:	d900      	bls.n	80006e8 <__aeabi_fdiv+0x68>
 80006e6:	e0b5      	b.n	8000854 <__aeabi_fdiv+0x1d4>
 80006e8:	486e      	ldr	r0, [pc, #440]	; (80008a4 <__aeabi_fdiv+0x224>)
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	58c3      	ldr	r3, [r0, r3]
 80006ee:	469f      	mov	pc, r3
 80006f0:	2300      	movs	r3, #0
 80006f2:	4698      	mov	r8, r3
 80006f4:	0026      	movs	r6, r4
 80006f6:	4645      	mov	r5, r8
 80006f8:	4692      	mov	sl, r2
 80006fa:	4653      	mov	r3, sl
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d100      	bne.n	8000702 <__aeabi_fdiv+0x82>
 8000700:	e089      	b.n	8000816 <__aeabi_fdiv+0x196>
 8000702:	2b03      	cmp	r3, #3
 8000704:	d100      	bne.n	8000708 <__aeabi_fdiv+0x88>
 8000706:	e09e      	b.n	8000846 <__aeabi_fdiv+0x1c6>
 8000708:	2b01      	cmp	r3, #1
 800070a:	d018      	beq.n	800073e <__aeabi_fdiv+0xbe>
 800070c:	003b      	movs	r3, r7
 800070e:	337f      	adds	r3, #127	; 0x7f
 8000710:	2b00      	cmp	r3, #0
 8000712:	dd69      	ble.n	80007e8 <__aeabi_fdiv+0x168>
 8000714:	076a      	lsls	r2, r5, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_fdiv+0xa2>
 8000718:	220f      	movs	r2, #15
 800071a:	402a      	ands	r2, r5
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_fdiv+0xa2>
 8000720:	3504      	adds	r5, #4
 8000722:	012a      	lsls	r2, r5, #4
 8000724:	d503      	bpl.n	800072e <__aeabi_fdiv+0xae>
 8000726:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <__aeabi_fdiv+0x228>)
 8000728:	401d      	ands	r5, r3
 800072a:	003b      	movs	r3, r7
 800072c:	3380      	adds	r3, #128	; 0x80
 800072e:	2bfe      	cmp	r3, #254	; 0xfe
 8000730:	dd00      	ble.n	8000734 <__aeabi_fdiv+0xb4>
 8000732:	e070      	b.n	8000816 <__aeabi_fdiv+0x196>
 8000734:	01ad      	lsls	r5, r5, #6
 8000736:	0a6d      	lsrs	r5, r5, #9
 8000738:	b2d8      	uxtb	r0, r3
 800073a:	e002      	b.n	8000742 <__aeabi_fdiv+0xc2>
 800073c:	000e      	movs	r6, r1
 800073e:	2000      	movs	r0, #0
 8000740:	2500      	movs	r5, #0
 8000742:	05c0      	lsls	r0, r0, #23
 8000744:	4328      	orrs	r0, r5
 8000746:	07f6      	lsls	r6, r6, #31
 8000748:	4330      	orrs	r0, r6
 800074a:	bce0      	pop	{r5, r6, r7}
 800074c:	46ba      	mov	sl, r7
 800074e:	46b1      	mov	r9, r6
 8000750:	46a8      	mov	r8, r5
 8000752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000754:	4643      	mov	r3, r8
 8000756:	2b00      	cmp	r3, #0
 8000758:	d13f      	bne.n	80007da <__aeabi_fdiv+0x15a>
 800075a:	2202      	movs	r2, #2
 800075c:	3fff      	subs	r7, #255	; 0xff
 800075e:	e003      	b.n	8000768 <__aeabi_fdiv+0xe8>
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d12d      	bne.n	80007c2 <__aeabi_fdiv+0x142>
 8000766:	2201      	movs	r2, #1
 8000768:	0031      	movs	r1, r6
 800076a:	464b      	mov	r3, r9
 800076c:	4061      	eors	r1, r4
 800076e:	b2c9      	uxtb	r1, r1
 8000770:	4313      	orrs	r3, r2
 8000772:	2b0f      	cmp	r3, #15
 8000774:	d834      	bhi.n	80007e0 <__aeabi_fdiv+0x160>
 8000776:	484d      	ldr	r0, [pc, #308]	; (80008ac <__aeabi_fdiv+0x22c>)
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	58c3      	ldr	r3, [r0, r3]
 800077c:	469f      	mov	pc, r3
 800077e:	2d00      	cmp	r5, #0
 8000780:	d113      	bne.n	80007aa <__aeabi_fdiv+0x12a>
 8000782:	2304      	movs	r3, #4
 8000784:	4699      	mov	r9, r3
 8000786:	3b03      	subs	r3, #3
 8000788:	2700      	movs	r7, #0
 800078a:	469a      	mov	sl, r3
 800078c:	e791      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d105      	bne.n	800079e <__aeabi_fdiv+0x11e>
 8000792:	2308      	movs	r3, #8
 8000794:	4699      	mov	r9, r3
 8000796:	3b06      	subs	r3, #6
 8000798:	27ff      	movs	r7, #255	; 0xff
 800079a:	469a      	mov	sl, r3
 800079c:	e789      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800079e:	230c      	movs	r3, #12
 80007a0:	4699      	mov	r9, r3
 80007a2:	3b09      	subs	r3, #9
 80007a4:	27ff      	movs	r7, #255	; 0xff
 80007a6:	469a      	mov	sl, r3
 80007a8:	e783      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007aa:	0028      	movs	r0, r5
 80007ac:	f001 fefc 	bl	80025a8 <__clzsi2>
 80007b0:	2776      	movs	r7, #118	; 0x76
 80007b2:	1f43      	subs	r3, r0, #5
 80007b4:	409d      	lsls	r5, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	427f      	negs	r7, r7
 80007ba:	4699      	mov	r9, r3
 80007bc:	469a      	mov	sl, r3
 80007be:	1a3f      	subs	r7, r7, r0
 80007c0:	e777      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007c2:	4640      	mov	r0, r8
 80007c4:	f001 fef0 	bl	80025a8 <__clzsi2>
 80007c8:	4642      	mov	r2, r8
 80007ca:	1f43      	subs	r3, r0, #5
 80007cc:	409a      	lsls	r2, r3
 80007ce:	2376      	movs	r3, #118	; 0x76
 80007d0:	425b      	negs	r3, r3
 80007d2:	4690      	mov	r8, r2
 80007d4:	1a1b      	subs	r3, r3, r0
 80007d6:	2200      	movs	r2, #0
 80007d8:	e77d      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007da:	23ff      	movs	r3, #255	; 0xff
 80007dc:	2203      	movs	r2, #3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007e0:	000e      	movs	r6, r1
 80007e2:	20ff      	movs	r0, #255	; 0xff
 80007e4:	2500      	movs	r5, #0
 80007e6:	e7ac      	b.n	8000742 <__aeabi_fdiv+0xc2>
 80007e8:	2001      	movs	r0, #1
 80007ea:	1ac0      	subs	r0, r0, r3
 80007ec:	281b      	cmp	r0, #27
 80007ee:	dca6      	bgt.n	800073e <__aeabi_fdiv+0xbe>
 80007f0:	379e      	adds	r7, #158	; 0x9e
 80007f2:	002a      	movs	r2, r5
 80007f4:	40bd      	lsls	r5, r7
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e6b      	subs	r3, r5, #1
 80007fa:	419d      	sbcs	r5, r3
 80007fc:	4315      	orrs	r5, r2
 80007fe:	076b      	lsls	r3, r5, #29
 8000800:	d004      	beq.n	800080c <__aeabi_fdiv+0x18c>
 8000802:	230f      	movs	r3, #15
 8000804:	402b      	ands	r3, r5
 8000806:	2b04      	cmp	r3, #4
 8000808:	d000      	beq.n	800080c <__aeabi_fdiv+0x18c>
 800080a:	3504      	adds	r5, #4
 800080c:	016b      	lsls	r3, r5, #5
 800080e:	d544      	bpl.n	800089a <__aeabi_fdiv+0x21a>
 8000810:	2001      	movs	r0, #1
 8000812:	2500      	movs	r5, #0
 8000814:	e795      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000816:	20ff      	movs	r0, #255	; 0xff
 8000818:	2500      	movs	r5, #0
 800081a:	e792      	b.n	8000742 <__aeabi_fdiv+0xc2>
 800081c:	2580      	movs	r5, #128	; 0x80
 800081e:	2600      	movs	r6, #0
 8000820:	20ff      	movs	r0, #255	; 0xff
 8000822:	03ed      	lsls	r5, r5, #15
 8000824:	e78d      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000826:	2300      	movs	r3, #0
 8000828:	4698      	mov	r8, r3
 800082a:	2080      	movs	r0, #128	; 0x80
 800082c:	03c0      	lsls	r0, r0, #15
 800082e:	4205      	tst	r5, r0
 8000830:	d009      	beq.n	8000846 <__aeabi_fdiv+0x1c6>
 8000832:	4643      	mov	r3, r8
 8000834:	4203      	tst	r3, r0
 8000836:	d106      	bne.n	8000846 <__aeabi_fdiv+0x1c6>
 8000838:	4645      	mov	r5, r8
 800083a:	4305      	orrs	r5, r0
 800083c:	026d      	lsls	r5, r5, #9
 800083e:	0026      	movs	r6, r4
 8000840:	20ff      	movs	r0, #255	; 0xff
 8000842:	0a6d      	lsrs	r5, r5, #9
 8000844:	e77d      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	03c0      	lsls	r0, r0, #15
 800084a:	4305      	orrs	r5, r0
 800084c:	026d      	lsls	r5, r5, #9
 800084e:	20ff      	movs	r0, #255	; 0xff
 8000850:	0a6d      	lsrs	r5, r5, #9
 8000852:	e776      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000854:	4642      	mov	r2, r8
 8000856:	016b      	lsls	r3, r5, #5
 8000858:	0150      	lsls	r0, r2, #5
 800085a:	4283      	cmp	r3, r0
 800085c:	d219      	bcs.n	8000892 <__aeabi_fdiv+0x212>
 800085e:	221b      	movs	r2, #27
 8000860:	2500      	movs	r5, #0
 8000862:	3f01      	subs	r7, #1
 8000864:	2601      	movs	r6, #1
 8000866:	001c      	movs	r4, r3
 8000868:	006d      	lsls	r5, r5, #1
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2c00      	cmp	r4, #0
 800086e:	db01      	blt.n	8000874 <__aeabi_fdiv+0x1f4>
 8000870:	4298      	cmp	r0, r3
 8000872:	d801      	bhi.n	8000878 <__aeabi_fdiv+0x1f8>
 8000874:	1a1b      	subs	r3, r3, r0
 8000876:	4335      	orrs	r5, r6
 8000878:	3a01      	subs	r2, #1
 800087a:	2a00      	cmp	r2, #0
 800087c:	d1f3      	bne.n	8000866 <__aeabi_fdiv+0x1e6>
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	431d      	orrs	r5, r3
 8000884:	003b      	movs	r3, r7
 8000886:	337f      	adds	r3, #127	; 0x7f
 8000888:	000e      	movs	r6, r1
 800088a:	2b00      	cmp	r3, #0
 800088c:	dd00      	ble.n	8000890 <__aeabi_fdiv+0x210>
 800088e:	e741      	b.n	8000714 <__aeabi_fdiv+0x94>
 8000890:	e7aa      	b.n	80007e8 <__aeabi_fdiv+0x168>
 8000892:	221a      	movs	r2, #26
 8000894:	2501      	movs	r5, #1
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	e7e4      	b.n	8000864 <__aeabi_fdiv+0x1e4>
 800089a:	01ad      	lsls	r5, r5, #6
 800089c:	2000      	movs	r0, #0
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	e74f      	b.n	8000742 <__aeabi_fdiv+0xc2>
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	0800e004 	.word	0x0800e004
 80008a8:	f7ffffff 	.word	0xf7ffffff
 80008ac:	0800e044 	.word	0x0800e044

080008b0 <__aeabi_i2f>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d013      	beq.n	80008de <__aeabi_i2f+0x2e>
 80008b6:	17c3      	asrs	r3, r0, #31
 80008b8:	18c6      	adds	r6, r0, r3
 80008ba:	405e      	eors	r6, r3
 80008bc:	0fc4      	lsrs	r4, r0, #31
 80008be:	0030      	movs	r0, r6
 80008c0:	f001 fe72 	bl	80025a8 <__clzsi2>
 80008c4:	239e      	movs	r3, #158	; 0x9e
 80008c6:	0005      	movs	r5, r0
 80008c8:	1a1b      	subs	r3, r3, r0
 80008ca:	2b96      	cmp	r3, #150	; 0x96
 80008cc:	dc0f      	bgt.n	80008ee <__aeabi_i2f+0x3e>
 80008ce:	2808      	cmp	r0, #8
 80008d0:	dd01      	ble.n	80008d6 <__aeabi_i2f+0x26>
 80008d2:	3d08      	subs	r5, #8
 80008d4:	40ae      	lsls	r6, r5
 80008d6:	0276      	lsls	r6, r6, #9
 80008d8:	0a76      	lsrs	r6, r6, #9
 80008da:	b2d8      	uxtb	r0, r3
 80008dc:	e002      	b.n	80008e4 <__aeabi_i2f+0x34>
 80008de:	2400      	movs	r4, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	2600      	movs	r6, #0
 80008e4:	05c0      	lsls	r0, r0, #23
 80008e6:	4330      	orrs	r0, r6
 80008e8:	07e4      	lsls	r4, r4, #31
 80008ea:	4320      	orrs	r0, r4
 80008ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ee:	2b99      	cmp	r3, #153	; 0x99
 80008f0:	dd0c      	ble.n	800090c <__aeabi_i2f+0x5c>
 80008f2:	2205      	movs	r2, #5
 80008f4:	0031      	movs	r1, r6
 80008f6:	1a12      	subs	r2, r2, r0
 80008f8:	40d1      	lsrs	r1, r2
 80008fa:	000a      	movs	r2, r1
 80008fc:	0001      	movs	r1, r0
 80008fe:	0030      	movs	r0, r6
 8000900:	311b      	adds	r1, #27
 8000902:	4088      	lsls	r0, r1
 8000904:	1e41      	subs	r1, r0, #1
 8000906:	4188      	sbcs	r0, r1
 8000908:	4302      	orrs	r2, r0
 800090a:	0016      	movs	r6, r2
 800090c:	2d05      	cmp	r5, #5
 800090e:	dc12      	bgt.n	8000936 <__aeabi_i2f+0x86>
 8000910:	0031      	movs	r1, r6
 8000912:	4f0d      	ldr	r7, [pc, #52]	; (8000948 <__aeabi_i2f+0x98>)
 8000914:	4039      	ands	r1, r7
 8000916:	0772      	lsls	r2, r6, #29
 8000918:	d009      	beq.n	800092e <__aeabi_i2f+0x7e>
 800091a:	200f      	movs	r0, #15
 800091c:	4030      	ands	r0, r6
 800091e:	2804      	cmp	r0, #4
 8000920:	d005      	beq.n	800092e <__aeabi_i2f+0x7e>
 8000922:	3104      	adds	r1, #4
 8000924:	014a      	lsls	r2, r1, #5
 8000926:	d502      	bpl.n	800092e <__aeabi_i2f+0x7e>
 8000928:	239f      	movs	r3, #159	; 0x9f
 800092a:	4039      	ands	r1, r7
 800092c:	1b5b      	subs	r3, r3, r5
 800092e:	0189      	lsls	r1, r1, #6
 8000930:	0a4e      	lsrs	r6, r1, #9
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	e7d6      	b.n	80008e4 <__aeabi_i2f+0x34>
 8000936:	1f6a      	subs	r2, r5, #5
 8000938:	4096      	lsls	r6, r2
 800093a:	0031      	movs	r1, r6
 800093c:	4f02      	ldr	r7, [pc, #8]	; (8000948 <__aeabi_i2f+0x98>)
 800093e:	4039      	ands	r1, r7
 8000940:	0772      	lsls	r2, r6, #29
 8000942:	d0f4      	beq.n	800092e <__aeabi_i2f+0x7e>
 8000944:	e7e9      	b.n	800091a <__aeabi_i2f+0x6a>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	fbffffff 	.word	0xfbffffff

0800094c <__aeabi_dadd>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	464f      	mov	r7, r9
 8000950:	4646      	mov	r6, r8
 8000952:	46d6      	mov	lr, sl
 8000954:	000d      	movs	r5, r1
 8000956:	0004      	movs	r4, r0
 8000958:	b5c0      	push	{r6, r7, lr}
 800095a:	001f      	movs	r7, r3
 800095c:	0011      	movs	r1, r2
 800095e:	0328      	lsls	r0, r5, #12
 8000960:	0f62      	lsrs	r2, r4, #29
 8000962:	0a40      	lsrs	r0, r0, #9
 8000964:	4310      	orrs	r0, r2
 8000966:	007a      	lsls	r2, r7, #1
 8000968:	0d52      	lsrs	r2, r2, #21
 800096a:	00e3      	lsls	r3, r4, #3
 800096c:	033c      	lsls	r4, r7, #12
 800096e:	4691      	mov	r9, r2
 8000970:	0a64      	lsrs	r4, r4, #9
 8000972:	0ffa      	lsrs	r2, r7, #31
 8000974:	0f4f      	lsrs	r7, r1, #29
 8000976:	006e      	lsls	r6, r5, #1
 8000978:	4327      	orrs	r7, r4
 800097a:	4692      	mov	sl, r2
 800097c:	46b8      	mov	r8, r7
 800097e:	0d76      	lsrs	r6, r6, #21
 8000980:	0fed      	lsrs	r5, r5, #31
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	4295      	cmp	r5, r2
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x3e>
 8000988:	e099      	b.n	8000abe <__aeabi_dadd+0x172>
 800098a:	464c      	mov	r4, r9
 800098c:	1b34      	subs	r4, r6, r4
 800098e:	46a4      	mov	ip, r4
 8000990:	2c00      	cmp	r4, #0
 8000992:	dc00      	bgt.n	8000996 <__aeabi_dadd+0x4a>
 8000994:	e07c      	b.n	8000a90 <__aeabi_dadd+0x144>
 8000996:	464a      	mov	r2, r9
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_dadd+0x52>
 800099c:	e0b8      	b.n	8000b10 <__aeabi_dadd+0x1c4>
 800099e:	4ac5      	ldr	r2, [pc, #788]	; (8000cb4 <__aeabi_dadd+0x368>)
 80009a0:	4296      	cmp	r6, r2
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x5a>
 80009a4:	e11c      	b.n	8000be0 <__aeabi_dadd+0x294>
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	003c      	movs	r4, r7
 80009aa:	0412      	lsls	r2, r2, #16
 80009ac:	4314      	orrs	r4, r2
 80009ae:	46a0      	mov	r8, r4
 80009b0:	4662      	mov	r2, ip
 80009b2:	2a38      	cmp	r2, #56	; 0x38
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_dadd+0x6c>
 80009b6:	e161      	b.n	8000c7c <__aeabi_dadd+0x330>
 80009b8:	2a1f      	cmp	r2, #31
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x72>
 80009bc:	e1cc      	b.n	8000d58 <__aeabi_dadd+0x40c>
 80009be:	4664      	mov	r4, ip
 80009c0:	2220      	movs	r2, #32
 80009c2:	1b12      	subs	r2, r2, r4
 80009c4:	4644      	mov	r4, r8
 80009c6:	4094      	lsls	r4, r2
 80009c8:	000f      	movs	r7, r1
 80009ca:	46a1      	mov	r9, r4
 80009cc:	4664      	mov	r4, ip
 80009ce:	4091      	lsls	r1, r2
 80009d0:	40e7      	lsrs	r7, r4
 80009d2:	464c      	mov	r4, r9
 80009d4:	1e4a      	subs	r2, r1, #1
 80009d6:	4191      	sbcs	r1, r2
 80009d8:	433c      	orrs	r4, r7
 80009da:	4642      	mov	r2, r8
 80009dc:	4321      	orrs	r1, r4
 80009de:	4664      	mov	r4, ip
 80009e0:	40e2      	lsrs	r2, r4
 80009e2:	1a80      	subs	r0, r0, r2
 80009e4:	1a5c      	subs	r4, r3, r1
 80009e6:	42a3      	cmp	r3, r4
 80009e8:	419b      	sbcs	r3, r3
 80009ea:	425f      	negs	r7, r3
 80009ec:	1bc7      	subs	r7, r0, r7
 80009ee:	023b      	lsls	r3, r7, #8
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_dadd+0xa8>
 80009f2:	e0d0      	b.n	8000b96 <__aeabi_dadd+0x24a>
 80009f4:	027f      	lsls	r7, r7, #9
 80009f6:	0a7f      	lsrs	r7, r7, #9
 80009f8:	2f00      	cmp	r7, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0xb2>
 80009fc:	e0ff      	b.n	8000bfe <__aeabi_dadd+0x2b2>
 80009fe:	0038      	movs	r0, r7
 8000a00:	f001 fdd2 	bl	80025a8 <__clzsi2>
 8000a04:	0001      	movs	r1, r0
 8000a06:	3908      	subs	r1, #8
 8000a08:	2320      	movs	r3, #32
 8000a0a:	0022      	movs	r2, r4
 8000a0c:	1a5b      	subs	r3, r3, r1
 8000a0e:	408f      	lsls	r7, r1
 8000a10:	40da      	lsrs	r2, r3
 8000a12:	408c      	lsls	r4, r1
 8000a14:	4317      	orrs	r7, r2
 8000a16:	42b1      	cmp	r1, r6
 8000a18:	da00      	bge.n	8000a1c <__aeabi_dadd+0xd0>
 8000a1a:	e0ff      	b.n	8000c1c <__aeabi_dadd+0x2d0>
 8000a1c:	1b89      	subs	r1, r1, r6
 8000a1e:	1c4b      	adds	r3, r1, #1
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dd00      	ble.n	8000a26 <__aeabi_dadd+0xda>
 8000a24:	e0a8      	b.n	8000b78 <__aeabi_dadd+0x22c>
 8000a26:	2220      	movs	r2, #32
 8000a28:	0039      	movs	r1, r7
 8000a2a:	1ad2      	subs	r2, r2, r3
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	4094      	lsls	r4, r2
 8000a30:	4091      	lsls	r1, r2
 8000a32:	40d8      	lsrs	r0, r3
 8000a34:	1e62      	subs	r2, r4, #1
 8000a36:	4194      	sbcs	r4, r2
 8000a38:	40df      	lsrs	r7, r3
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	430c      	orrs	r4, r1
 8000a40:	0763      	lsls	r3, r4, #29
 8000a42:	d009      	beq.n	8000a58 <__aeabi_dadd+0x10c>
 8000a44:	230f      	movs	r3, #15
 8000a46:	4023      	ands	r3, r4
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d005      	beq.n	8000a58 <__aeabi_dadd+0x10c>
 8000a4c:	1d23      	adds	r3, r4, #4
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	41a4      	sbcs	r4, r4
 8000a52:	4264      	negs	r4, r4
 8000a54:	193f      	adds	r7, r7, r4
 8000a56:	001c      	movs	r4, r3
 8000a58:	023b      	lsls	r3, r7, #8
 8000a5a:	d400      	bmi.n	8000a5e <__aeabi_dadd+0x112>
 8000a5c:	e09e      	b.n	8000b9c <__aeabi_dadd+0x250>
 8000a5e:	4b95      	ldr	r3, [pc, #596]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000a60:	3601      	adds	r6, #1
 8000a62:	429e      	cmp	r6, r3
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x11c>
 8000a66:	e0b7      	b.n	8000bd8 <__aeabi_dadd+0x28c>
 8000a68:	4a93      	ldr	r2, [pc, #588]	; (8000cb8 <__aeabi_dadd+0x36c>)
 8000a6a:	08e4      	lsrs	r4, r4, #3
 8000a6c:	4017      	ands	r7, r2
 8000a6e:	077b      	lsls	r3, r7, #29
 8000a70:	0571      	lsls	r1, r6, #21
 8000a72:	027f      	lsls	r7, r7, #9
 8000a74:	4323      	orrs	r3, r4
 8000a76:	0b3f      	lsrs	r7, r7, #12
 8000a78:	0d4a      	lsrs	r2, r1, #21
 8000a7a:	0512      	lsls	r2, r2, #20
 8000a7c:	433a      	orrs	r2, r7
 8000a7e:	07ed      	lsls	r5, r5, #31
 8000a80:	432a      	orrs	r2, r5
 8000a82:	0018      	movs	r0, r3
 8000a84:	0011      	movs	r1, r2
 8000a86:	bce0      	pop	{r5, r6, r7}
 8000a88:	46ba      	mov	sl, r7
 8000a8a:	46b1      	mov	r9, r6
 8000a8c:	46a8      	mov	r8, r5
 8000a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d04b      	beq.n	8000b2c <__aeabi_dadd+0x1e0>
 8000a94:	464c      	mov	r4, r9
 8000a96:	1ba4      	subs	r4, r4, r6
 8000a98:	46a4      	mov	ip, r4
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d000      	beq.n	8000aa0 <__aeabi_dadd+0x154>
 8000a9e:	e123      	b.n	8000ce8 <__aeabi_dadd+0x39c>
 8000aa0:	0004      	movs	r4, r0
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x15c>
 8000aa6:	e1af      	b.n	8000e08 <__aeabi_dadd+0x4bc>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	1e54      	subs	r4, r2, #1
 8000aac:	2a01      	cmp	r2, #1
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x166>
 8000ab0:	e215      	b.n	8000ede <__aeabi_dadd+0x592>
 8000ab2:	4d80      	ldr	r5, [pc, #512]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000ab4:	45ac      	cmp	ip, r5
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x16e>
 8000ab8:	e1c8      	b.n	8000e4c <__aeabi_dadd+0x500>
 8000aba:	46a4      	mov	ip, r4
 8000abc:	e11b      	b.n	8000cf6 <__aeabi_dadd+0x3aa>
 8000abe:	464a      	mov	r2, r9
 8000ac0:	1ab2      	subs	r2, r6, r2
 8000ac2:	4694      	mov	ip, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	dc00      	bgt.n	8000aca <__aeabi_dadd+0x17e>
 8000ac8:	e0ac      	b.n	8000c24 <__aeabi_dadd+0x2d8>
 8000aca:	464a      	mov	r2, r9
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d043      	beq.n	8000b58 <__aeabi_dadd+0x20c>
 8000ad0:	4a78      	ldr	r2, [pc, #480]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000ad2:	4296      	cmp	r6, r2
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x18c>
 8000ad6:	e1af      	b.n	8000e38 <__aeabi_dadd+0x4ec>
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	003c      	movs	r4, r7
 8000adc:	0412      	lsls	r2, r2, #16
 8000ade:	4314      	orrs	r4, r2
 8000ae0:	46a0      	mov	r8, r4
 8000ae2:	4662      	mov	r2, ip
 8000ae4:	2a38      	cmp	r2, #56	; 0x38
 8000ae6:	dc67      	bgt.n	8000bb8 <__aeabi_dadd+0x26c>
 8000ae8:	2a1f      	cmp	r2, #31
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_dadd+0x1a2>
 8000aec:	e15f      	b.n	8000dae <__aeabi_dadd+0x462>
 8000aee:	4647      	mov	r7, r8
 8000af0:	3a20      	subs	r2, #32
 8000af2:	40d7      	lsrs	r7, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	2a20      	cmp	r2, #32
 8000af8:	d005      	beq.n	8000b06 <__aeabi_dadd+0x1ba>
 8000afa:	4664      	mov	r4, ip
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	1b12      	subs	r2, r2, r4
 8000b00:	4644      	mov	r4, r8
 8000b02:	4094      	lsls	r4, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	1e4a      	subs	r2, r1, #1
 8000b08:	4191      	sbcs	r1, r2
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	433c      	orrs	r4, r7
 8000b0e:	e057      	b.n	8000bc0 <__aeabi_dadd+0x274>
 8000b10:	003a      	movs	r2, r7
 8000b12:	430a      	orrs	r2, r1
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x1cc>
 8000b16:	e105      	b.n	8000d24 <__aeabi_dadd+0x3d8>
 8000b18:	0022      	movs	r2, r4
 8000b1a:	3a01      	subs	r2, #1
 8000b1c:	2c01      	cmp	r4, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x1d6>
 8000b20:	e182      	b.n	8000e28 <__aeabi_dadd+0x4dc>
 8000b22:	4c64      	ldr	r4, [pc, #400]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000b24:	45a4      	cmp	ip, r4
 8000b26:	d05b      	beq.n	8000be0 <__aeabi_dadd+0x294>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	e741      	b.n	80009b0 <__aeabi_dadd+0x64>
 8000b2c:	4c63      	ldr	r4, [pc, #396]	; (8000cbc <__aeabi_dadd+0x370>)
 8000b2e:	1c77      	adds	r7, r6, #1
 8000b30:	4227      	tst	r7, r4
 8000b32:	d000      	beq.n	8000b36 <__aeabi_dadd+0x1ea>
 8000b34:	e0c4      	b.n	8000cc0 <__aeabi_dadd+0x374>
 8000b36:	0004      	movs	r4, r0
 8000b38:	431c      	orrs	r4, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dadd+0x1f4>
 8000b3e:	e169      	b.n	8000e14 <__aeabi_dadd+0x4c8>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x1fa>
 8000b44:	e1bf      	b.n	8000ec6 <__aeabi_dadd+0x57a>
 8000b46:	4644      	mov	r4, r8
 8000b48:	430c      	orrs	r4, r1
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x202>
 8000b4c:	e1d0      	b.n	8000ef0 <__aeabi_dadd+0x5a4>
 8000b4e:	0742      	lsls	r2, r0, #29
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	08c0      	lsrs	r0, r0, #3
 8000b56:	e029      	b.n	8000bac <__aeabi_dadd+0x260>
 8000b58:	003a      	movs	r2, r7
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dadd+0x214>
 8000b5e:	e170      	b.n	8000e42 <__aeabi_dadd+0x4f6>
 8000b60:	4662      	mov	r2, ip
 8000b62:	4664      	mov	r4, ip
 8000b64:	3a01      	subs	r2, #1
 8000b66:	2c01      	cmp	r4, #1
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x220>
 8000b6a:	e0e0      	b.n	8000d2e <__aeabi_dadd+0x3e2>
 8000b6c:	4c51      	ldr	r4, [pc, #324]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x228>
 8000b72:	e161      	b.n	8000e38 <__aeabi_dadd+0x4ec>
 8000b74:	4694      	mov	ip, r2
 8000b76:	e7b4      	b.n	8000ae2 <__aeabi_dadd+0x196>
 8000b78:	003a      	movs	r2, r7
 8000b7a:	391f      	subs	r1, #31
 8000b7c:	40ca      	lsrs	r2, r1
 8000b7e:	0011      	movs	r1, r2
 8000b80:	2b20      	cmp	r3, #32
 8000b82:	d003      	beq.n	8000b8c <__aeabi_dadd+0x240>
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	409f      	lsls	r7, r3
 8000b8a:	433c      	orrs	r4, r7
 8000b8c:	1e63      	subs	r3, r4, #1
 8000b8e:	419c      	sbcs	r4, r3
 8000b90:	2700      	movs	r7, #0
 8000b92:	2600      	movs	r6, #0
 8000b94:	430c      	orrs	r4, r1
 8000b96:	0763      	lsls	r3, r4, #29
 8000b98:	d000      	beq.n	8000b9c <__aeabi_dadd+0x250>
 8000b9a:	e753      	b.n	8000a44 <__aeabi_dadd+0xf8>
 8000b9c:	46b4      	mov	ip, r6
 8000b9e:	08e4      	lsrs	r4, r4, #3
 8000ba0:	077b      	lsls	r3, r7, #29
 8000ba2:	4323      	orrs	r3, r4
 8000ba4:	08f8      	lsrs	r0, r7, #3
 8000ba6:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000ba8:	4594      	cmp	ip, r2
 8000baa:	d01d      	beq.n	8000be8 <__aeabi_dadd+0x29c>
 8000bac:	4662      	mov	r2, ip
 8000bae:	0307      	lsls	r7, r0, #12
 8000bb0:	0552      	lsls	r2, r2, #21
 8000bb2:	0b3f      	lsrs	r7, r7, #12
 8000bb4:	0d52      	lsrs	r2, r2, #21
 8000bb6:	e760      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000bb8:	4644      	mov	r4, r8
 8000bba:	430c      	orrs	r4, r1
 8000bbc:	1e62      	subs	r2, r4, #1
 8000bbe:	4194      	sbcs	r4, r2
 8000bc0:	18e4      	adds	r4, r4, r3
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	419b      	sbcs	r3, r3
 8000bc6:	425f      	negs	r7, r3
 8000bc8:	183f      	adds	r7, r7, r0
 8000bca:	023b      	lsls	r3, r7, #8
 8000bcc:	d5e3      	bpl.n	8000b96 <__aeabi_dadd+0x24a>
 8000bce:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000bd0:	3601      	adds	r6, #1
 8000bd2:	429e      	cmp	r6, r3
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dadd+0x28c>
 8000bd6:	e0b5      	b.n	8000d44 <__aeabi_dadd+0x3f8>
 8000bd8:	0032      	movs	r2, r6
 8000bda:	2700      	movs	r7, #0
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e74c      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000be0:	0742      	lsls	r2, r0, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	001a      	movs	r2, r3
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x2a4>
 8000bee:	e1e1      	b.n	8000fb4 <__aeabi_dadd+0x668>
 8000bf0:	2780      	movs	r7, #128	; 0x80
 8000bf2:	033f      	lsls	r7, r7, #12
 8000bf4:	4307      	orrs	r7, r0
 8000bf6:	033f      	lsls	r7, r7, #12
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000bfa:	0b3f      	lsrs	r7, r7, #12
 8000bfc:	e73d      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f001 fcd2 	bl	80025a8 <__clzsi2>
 8000c04:	0001      	movs	r1, r0
 8000c06:	3118      	adds	r1, #24
 8000c08:	291f      	cmp	r1, #31
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_dadd+0x2c2>
 8000c0c:	e6fc      	b.n	8000a08 <__aeabi_dadd+0xbc>
 8000c0e:	3808      	subs	r0, #8
 8000c10:	4084      	lsls	r4, r0
 8000c12:	0027      	movs	r7, r4
 8000c14:	2400      	movs	r4, #0
 8000c16:	42b1      	cmp	r1, r6
 8000c18:	db00      	blt.n	8000c1c <__aeabi_dadd+0x2d0>
 8000c1a:	e6ff      	b.n	8000a1c <__aeabi_dadd+0xd0>
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <__aeabi_dadd+0x36c>)
 8000c1e:	1a76      	subs	r6, r6, r1
 8000c20:	4017      	ands	r7, r2
 8000c22:	e70d      	b.n	8000a40 <__aeabi_dadd+0xf4>
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d02f      	beq.n	8000c88 <__aeabi_dadd+0x33c>
 8000c28:	464a      	mov	r2, r9
 8000c2a:	1b92      	subs	r2, r2, r6
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dadd+0x2e8>
 8000c32:	e0ad      	b.n	8000d90 <__aeabi_dadd+0x444>
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000c36:	4591      	cmp	r9, r2
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dadd+0x2f0>
 8000c3a:	e10f      	b.n	8000e5c <__aeabi_dadd+0x510>
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0412      	lsls	r2, r2, #16
 8000c40:	4310      	orrs	r0, r2
 8000c42:	4662      	mov	r2, ip
 8000c44:	2a38      	cmp	r2, #56	; 0x38
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dadd+0x2fe>
 8000c48:	e10f      	b.n	8000e6a <__aeabi_dadd+0x51e>
 8000c4a:	2a1f      	cmp	r2, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0x304>
 8000c4e:	e180      	b.n	8000f52 <__aeabi_dadd+0x606>
 8000c50:	4664      	mov	r4, ip
 8000c52:	2220      	movs	r2, #32
 8000c54:	001e      	movs	r6, r3
 8000c56:	1b12      	subs	r2, r2, r4
 8000c58:	4667      	mov	r7, ip
 8000c5a:	0004      	movs	r4, r0
 8000c5c:	4093      	lsls	r3, r2
 8000c5e:	4094      	lsls	r4, r2
 8000c60:	40fe      	lsrs	r6, r7
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	4193      	sbcs	r3, r2
 8000c66:	40f8      	lsrs	r0, r7
 8000c68:	4334      	orrs	r4, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	4480      	add	r8, r0
 8000c6e:	1864      	adds	r4, r4, r1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	41bf      	sbcs	r7, r7
 8000c74:	427f      	negs	r7, r7
 8000c76:	464e      	mov	r6, r9
 8000c78:	4447      	add	r7, r8
 8000c7a:	e7a6      	b.n	8000bca <__aeabi_dadd+0x27e>
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	0011      	movs	r1, r2
 8000c82:	1e4a      	subs	r2, r1, #1
 8000c84:	4191      	sbcs	r1, r2
 8000c86:	e6ad      	b.n	80009e4 <__aeabi_dadd+0x98>
 8000c88:	4c0c      	ldr	r4, [pc, #48]	; (8000cbc <__aeabi_dadd+0x370>)
 8000c8a:	1c72      	adds	r2, r6, #1
 8000c8c:	4222      	tst	r2, r4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_dadd+0x346>
 8000c90:	e0a1      	b.n	8000dd6 <__aeabi_dadd+0x48a>
 8000c92:	0002      	movs	r2, r0
 8000c94:	431a      	orrs	r2, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x350>
 8000c9a:	e0fa      	b.n	8000e92 <__aeabi_dadd+0x546>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x356>
 8000ca0:	e145      	b.n	8000f2e <__aeabi_dadd+0x5e2>
 8000ca2:	003a      	movs	r2, r7
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dadd+0x35e>
 8000ca8:	e146      	b.n	8000f38 <__aeabi_dadd+0x5ec>
 8000caa:	0742      	lsls	r2, r0, #29
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	08c0      	lsrs	r0, r0, #3
 8000cb2:	e77b      	b.n	8000bac <__aeabi_dadd+0x260>
 8000cb4:	000007ff 	.word	0x000007ff
 8000cb8:	ff7fffff 	.word	0xff7fffff
 8000cbc:	000007fe 	.word	0x000007fe
 8000cc0:	4647      	mov	r7, r8
 8000cc2:	1a5c      	subs	r4, r3, r1
 8000cc4:	1bc2      	subs	r2, r0, r7
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	41bf      	sbcs	r7, r7
 8000cca:	427f      	negs	r7, r7
 8000ccc:	46b9      	mov	r9, r7
 8000cce:	0017      	movs	r7, r2
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1abf      	subs	r7, r7, r2
 8000cd4:	023a      	lsls	r2, r7, #8
 8000cd6:	d500      	bpl.n	8000cda <__aeabi_dadd+0x38e>
 8000cd8:	e08d      	b.n	8000df6 <__aeabi_dadd+0x4aa>
 8000cda:	0023      	movs	r3, r4
 8000cdc:	433b      	orrs	r3, r7
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x396>
 8000ce0:	e68a      	b.n	80009f8 <__aeabi_dadd+0xac>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	e761      	b.n	8000bac <__aeabi_dadd+0x260>
 8000ce8:	4cb4      	ldr	r4, [pc, #720]	; (8000fbc <__aeabi_dadd+0x670>)
 8000cea:	45a1      	cmp	r9, r4
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dadd+0x3a4>
 8000cee:	e0ad      	b.n	8000e4c <__aeabi_dadd+0x500>
 8000cf0:	2480      	movs	r4, #128	; 0x80
 8000cf2:	0424      	lsls	r4, r4, #16
 8000cf4:	4320      	orrs	r0, r4
 8000cf6:	4664      	mov	r4, ip
 8000cf8:	2c38      	cmp	r4, #56	; 0x38
 8000cfa:	dc3d      	bgt.n	8000d78 <__aeabi_dadd+0x42c>
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	2c1f      	cmp	r4, #31
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_dadd+0x3b8>
 8000d02:	e0b7      	b.n	8000e74 <__aeabi_dadd+0x528>
 8000d04:	2520      	movs	r5, #32
 8000d06:	001e      	movs	r6, r3
 8000d08:	1b2d      	subs	r5, r5, r4
 8000d0a:	0004      	movs	r4, r0
 8000d0c:	40ab      	lsls	r3, r5
 8000d0e:	40ac      	lsls	r4, r5
 8000d10:	40d6      	lsrs	r6, r2
 8000d12:	40d0      	lsrs	r0, r2
 8000d14:	4642      	mov	r2, r8
 8000d16:	1e5d      	subs	r5, r3, #1
 8000d18:	41ab      	sbcs	r3, r5
 8000d1a:	4334      	orrs	r4, r6
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	4690      	mov	r8, r2
 8000d20:	4323      	orrs	r3, r4
 8000d22:	e02c      	b.n	8000d7e <__aeabi_dadd+0x432>
 8000d24:	0742      	lsls	r2, r0, #29
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	08c0      	lsrs	r0, r0, #3
 8000d2c:	e73b      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000d2e:	185c      	adds	r4, r3, r1
 8000d30:	429c      	cmp	r4, r3
 8000d32:	419b      	sbcs	r3, r3
 8000d34:	4440      	add	r0, r8
 8000d36:	425b      	negs	r3, r3
 8000d38:	18c7      	adds	r7, r0, r3
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	023b      	lsls	r3, r7, #8
 8000d3e:	d400      	bmi.n	8000d42 <__aeabi_dadd+0x3f6>
 8000d40:	e729      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000d42:	2602      	movs	r6, #2
 8000d44:	4a9e      	ldr	r2, [pc, #632]	; (8000fc0 <__aeabi_dadd+0x674>)
 8000d46:	0863      	lsrs	r3, r4, #1
 8000d48:	4017      	ands	r7, r2
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4014      	ands	r4, r2
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	07fb      	lsls	r3, r7, #31
 8000d52:	431c      	orrs	r4, r3
 8000d54:	087f      	lsrs	r7, r7, #1
 8000d56:	e673      	b.n	8000a40 <__aeabi_dadd+0xf4>
 8000d58:	4644      	mov	r4, r8
 8000d5a:	3a20      	subs	r2, #32
 8000d5c:	40d4      	lsrs	r4, r2
 8000d5e:	4662      	mov	r2, ip
 8000d60:	2a20      	cmp	r2, #32
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x424>
 8000d64:	4667      	mov	r7, ip
 8000d66:	2240      	movs	r2, #64	; 0x40
 8000d68:	1bd2      	subs	r2, r2, r7
 8000d6a:	4647      	mov	r7, r8
 8000d6c:	4097      	lsls	r7, r2
 8000d6e:	4339      	orrs	r1, r7
 8000d70:	1e4a      	subs	r2, r1, #1
 8000d72:	4191      	sbcs	r1, r2
 8000d74:	4321      	orrs	r1, r4
 8000d76:	e635      	b.n	80009e4 <__aeabi_dadd+0x98>
 8000d78:	4303      	orrs	r3, r0
 8000d7a:	1e58      	subs	r0, r3, #1
 8000d7c:	4183      	sbcs	r3, r0
 8000d7e:	1acc      	subs	r4, r1, r3
 8000d80:	42a1      	cmp	r1, r4
 8000d82:	41bf      	sbcs	r7, r7
 8000d84:	4643      	mov	r3, r8
 8000d86:	427f      	negs	r7, r7
 8000d88:	4655      	mov	r5, sl
 8000d8a:	464e      	mov	r6, r9
 8000d8c:	1bdf      	subs	r7, r3, r7
 8000d8e:	e62e      	b.n	80009ee <__aeabi_dadd+0xa2>
 8000d90:	0002      	movs	r2, r0
 8000d92:	431a      	orrs	r2, r3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0x44c>
 8000d96:	e0bd      	b.n	8000f14 <__aeabi_dadd+0x5c8>
 8000d98:	4662      	mov	r2, ip
 8000d9a:	4664      	mov	r4, ip
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	2c01      	cmp	r4, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x458>
 8000da2:	e0e5      	b.n	8000f70 <__aeabi_dadd+0x624>
 8000da4:	4c85      	ldr	r4, [pc, #532]	; (8000fbc <__aeabi_dadd+0x670>)
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d058      	beq.n	8000e5c <__aeabi_dadd+0x510>
 8000daa:	4694      	mov	ip, r2
 8000dac:	e749      	b.n	8000c42 <__aeabi_dadd+0x2f6>
 8000dae:	4664      	mov	r4, ip
 8000db0:	2220      	movs	r2, #32
 8000db2:	1b12      	subs	r2, r2, r4
 8000db4:	4644      	mov	r4, r8
 8000db6:	4094      	lsls	r4, r2
 8000db8:	000f      	movs	r7, r1
 8000dba:	46a1      	mov	r9, r4
 8000dbc:	4664      	mov	r4, ip
 8000dbe:	4091      	lsls	r1, r2
 8000dc0:	40e7      	lsrs	r7, r4
 8000dc2:	464c      	mov	r4, r9
 8000dc4:	1e4a      	subs	r2, r1, #1
 8000dc6:	4191      	sbcs	r1, r2
 8000dc8:	433c      	orrs	r4, r7
 8000dca:	4642      	mov	r2, r8
 8000dcc:	430c      	orrs	r4, r1
 8000dce:	4661      	mov	r1, ip
 8000dd0:	40ca      	lsrs	r2, r1
 8000dd2:	1880      	adds	r0, r0, r2
 8000dd4:	e6f4      	b.n	8000bc0 <__aeabi_dadd+0x274>
 8000dd6:	4c79      	ldr	r4, [pc, #484]	; (8000fbc <__aeabi_dadd+0x670>)
 8000dd8:	42a2      	cmp	r2, r4
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x492>
 8000ddc:	e6fd      	b.n	8000bda <__aeabi_dadd+0x28e>
 8000dde:	1859      	adds	r1, r3, r1
 8000de0:	4299      	cmp	r1, r3
 8000de2:	419b      	sbcs	r3, r3
 8000de4:	4440      	add	r0, r8
 8000de6:	425f      	negs	r7, r3
 8000de8:	19c7      	adds	r7, r0, r7
 8000dea:	07fc      	lsls	r4, r7, #31
 8000dec:	0849      	lsrs	r1, r1, #1
 8000dee:	0016      	movs	r6, r2
 8000df0:	430c      	orrs	r4, r1
 8000df2:	087f      	lsrs	r7, r7, #1
 8000df4:	e6cf      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000df6:	1acc      	subs	r4, r1, r3
 8000df8:	42a1      	cmp	r1, r4
 8000dfa:	41bf      	sbcs	r7, r7
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	427f      	negs	r7, r7
 8000e00:	1a18      	subs	r0, r3, r0
 8000e02:	4655      	mov	r5, sl
 8000e04:	1bc7      	subs	r7, r0, r7
 8000e06:	e5f7      	b.n	80009f8 <__aeabi_dadd+0xac>
 8000e08:	08c9      	lsrs	r1, r1, #3
 8000e0a:	077b      	lsls	r3, r7, #29
 8000e0c:	4655      	mov	r5, sl
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	08f8      	lsrs	r0, r7, #3
 8000e12:	e6c8      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d000      	beq.n	8000e1a <__aeabi_dadd+0x4ce>
 8000e18:	e081      	b.n	8000f1e <__aeabi_dadd+0x5d2>
 8000e1a:	4643      	mov	r3, r8
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	d115      	bne.n	8000e4c <__aeabi_dadd+0x500>
 8000e20:	2080      	movs	r0, #128	; 0x80
 8000e22:	2500      	movs	r5, #0
 8000e24:	0300      	lsls	r0, r0, #12
 8000e26:	e6e3      	b.n	8000bf0 <__aeabi_dadd+0x2a4>
 8000e28:	1a5c      	subs	r4, r3, r1
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	419b      	sbcs	r3, r3
 8000e2e:	1bc7      	subs	r7, r0, r7
 8000e30:	425b      	negs	r3, r3
 8000e32:	2601      	movs	r6, #1
 8000e34:	1aff      	subs	r7, r7, r3
 8000e36:	e5da      	b.n	80009ee <__aeabi_dadd+0xa2>
 8000e38:	0742      	lsls	r2, r0, #29
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	08c0      	lsrs	r0, r0, #3
 8000e40:	e6d2      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000e42:	0742      	lsls	r2, r0, #29
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	e6ac      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4642      	mov	r2, r8
 8000e50:	08c9      	lsrs	r1, r1, #3
 8000e52:	075b      	lsls	r3, r3, #29
 8000e54:	4655      	mov	r5, sl
 8000e56:	430b      	orrs	r3, r1
 8000e58:	08d0      	lsrs	r0, r2, #3
 8000e5a:	e6c5      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	4642      	mov	r2, r8
 8000e60:	075b      	lsls	r3, r3, #29
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	430b      	orrs	r3, r1
 8000e66:	08d0      	lsrs	r0, r2, #3
 8000e68:	e6be      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	001c      	movs	r4, r3
 8000e6e:	1e63      	subs	r3, r4, #1
 8000e70:	419c      	sbcs	r4, r3
 8000e72:	e6fc      	b.n	8000c6e <__aeabi_dadd+0x322>
 8000e74:	0002      	movs	r2, r0
 8000e76:	3c20      	subs	r4, #32
 8000e78:	40e2      	lsrs	r2, r4
 8000e7a:	0014      	movs	r4, r2
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	2a20      	cmp	r2, #32
 8000e80:	d003      	beq.n	8000e8a <__aeabi_dadd+0x53e>
 8000e82:	2540      	movs	r5, #64	; 0x40
 8000e84:	1aad      	subs	r5, r5, r2
 8000e86:	40a8      	lsls	r0, r5
 8000e88:	4303      	orrs	r3, r0
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	4183      	sbcs	r3, r0
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	e775      	b.n	8000d7e <__aeabi_dadd+0x432>
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d0e2      	beq.n	8000e5c <__aeabi_dadd+0x510>
 8000e96:	003a      	movs	r2, r7
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	d0cd      	beq.n	8000e38 <__aeabi_dadd+0x4ec>
 8000e9c:	0742      	lsls	r2, r0, #29
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	08c0      	lsrs	r0, r0, #3
 8000ea6:	0312      	lsls	r2, r2, #12
 8000ea8:	4210      	tst	r0, r2
 8000eaa:	d006      	beq.n	8000eba <__aeabi_dadd+0x56e>
 8000eac:	08fc      	lsrs	r4, r7, #3
 8000eae:	4214      	tst	r4, r2
 8000eb0:	d103      	bne.n	8000eba <__aeabi_dadd+0x56e>
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	08cb      	lsrs	r3, r1, #3
 8000eb6:	077a      	lsls	r2, r7, #29
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	0f5a      	lsrs	r2, r3, #29
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	0752      	lsls	r2, r2, #29
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	e690      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x582>
 8000ecc:	e709      	b.n	8000ce2 <__aeabi_dadd+0x396>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	08c9      	lsrs	r1, r1, #3
 8000ed4:	075b      	lsls	r3, r3, #29
 8000ed6:	4655      	mov	r5, sl
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	08d0      	lsrs	r0, r2, #3
 8000edc:	e666      	b.n	8000bac <__aeabi_dadd+0x260>
 8000ede:	1acc      	subs	r4, r1, r3
 8000ee0:	42a1      	cmp	r1, r4
 8000ee2:	4189      	sbcs	r1, r1
 8000ee4:	1a3f      	subs	r7, r7, r0
 8000ee6:	4249      	negs	r1, r1
 8000ee8:	4655      	mov	r5, sl
 8000eea:	2601      	movs	r6, #1
 8000eec:	1a7f      	subs	r7, r7, r1
 8000eee:	e57e      	b.n	80009ee <__aeabi_dadd+0xa2>
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	1a5c      	subs	r4, r3, r1
 8000ef4:	1a87      	subs	r7, r0, r2
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	4192      	sbcs	r2, r2
 8000efa:	4252      	negs	r2, r2
 8000efc:	1abf      	subs	r7, r7, r2
 8000efe:	023a      	lsls	r2, r7, #8
 8000f00:	d53d      	bpl.n	8000f7e <__aeabi_dadd+0x632>
 8000f02:	1acc      	subs	r4, r1, r3
 8000f04:	42a1      	cmp	r1, r4
 8000f06:	4189      	sbcs	r1, r1
 8000f08:	4643      	mov	r3, r8
 8000f0a:	4249      	negs	r1, r1
 8000f0c:	1a1f      	subs	r7, r3, r0
 8000f0e:	4655      	mov	r5, sl
 8000f10:	1a7f      	subs	r7, r7, r1
 8000f12:	e595      	b.n	8000a40 <__aeabi_dadd+0xf4>
 8000f14:	077b      	lsls	r3, r7, #29
 8000f16:	08c9      	lsrs	r1, r1, #3
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	08f8      	lsrs	r0, r7, #3
 8000f1c:	e643      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000f1e:	4644      	mov	r4, r8
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	430c      	orrs	r4, r1
 8000f24:	d130      	bne.n	8000f88 <__aeabi_dadd+0x63c>
 8000f26:	0742      	lsls	r2, r0, #29
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	08c0      	lsrs	r0, r0, #3
 8000f2c:	e65c      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000f2e:	077b      	lsls	r3, r7, #29
 8000f30:	08c9      	lsrs	r1, r1, #3
 8000f32:	430b      	orrs	r3, r1
 8000f34:	08f8      	lsrs	r0, r7, #3
 8000f36:	e639      	b.n	8000bac <__aeabi_dadd+0x260>
 8000f38:	185c      	adds	r4, r3, r1
 8000f3a:	429c      	cmp	r4, r3
 8000f3c:	419b      	sbcs	r3, r3
 8000f3e:	4440      	add	r0, r8
 8000f40:	425b      	negs	r3, r3
 8000f42:	18c7      	adds	r7, r0, r3
 8000f44:	023b      	lsls	r3, r7, #8
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dadd+0x5fe>
 8000f48:	e625      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <__aeabi_dadd+0x674>)
 8000f4c:	2601      	movs	r6, #1
 8000f4e:	401f      	ands	r7, r3
 8000f50:	e621      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000f52:	0004      	movs	r4, r0
 8000f54:	3a20      	subs	r2, #32
 8000f56:	40d4      	lsrs	r4, r2
 8000f58:	4662      	mov	r2, ip
 8000f5a:	2a20      	cmp	r2, #32
 8000f5c:	d004      	beq.n	8000f68 <__aeabi_dadd+0x61c>
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	4666      	mov	r6, ip
 8000f62:	1b92      	subs	r2, r2, r6
 8000f64:	4090      	lsls	r0, r2
 8000f66:	4303      	orrs	r3, r0
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	4193      	sbcs	r3, r2
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	e67e      	b.n	8000c6e <__aeabi_dadd+0x322>
 8000f70:	185c      	adds	r4, r3, r1
 8000f72:	428c      	cmp	r4, r1
 8000f74:	4189      	sbcs	r1, r1
 8000f76:	4440      	add	r0, r8
 8000f78:	4249      	negs	r1, r1
 8000f7a:	1847      	adds	r7, r0, r1
 8000f7c:	e6dd      	b.n	8000d3a <__aeabi_dadd+0x3ee>
 8000f7e:	0023      	movs	r3, r4
 8000f80:	433b      	orrs	r3, r7
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0x63a>
 8000f84:	e6ad      	b.n	8000ce2 <__aeabi_dadd+0x396>
 8000f86:	e606      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000f88:	0744      	lsls	r4, r0, #29
 8000f8a:	4323      	orrs	r3, r4
 8000f8c:	2480      	movs	r4, #128	; 0x80
 8000f8e:	08c0      	lsrs	r0, r0, #3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	4220      	tst	r0, r4
 8000f94:	d008      	beq.n	8000fa8 <__aeabi_dadd+0x65c>
 8000f96:	4642      	mov	r2, r8
 8000f98:	08d6      	lsrs	r6, r2, #3
 8000f9a:	4226      	tst	r6, r4
 8000f9c:	d104      	bne.n	8000fa8 <__aeabi_dadd+0x65c>
 8000f9e:	4655      	mov	r5, sl
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	08cb      	lsrs	r3, r1, #3
 8000fa4:	0751      	lsls	r1, r2, #29
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	0f5a      	lsrs	r2, r3, #29
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	0752      	lsls	r2, r2, #29
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	e619      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4a01      	ldr	r2, [pc, #4]	; (8000fbc <__aeabi_dadd+0x670>)
 8000fb8:	001f      	movs	r7, r3
 8000fba:	e55e      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000fbc:	000007ff 	.word	0x000007ff
 8000fc0:	ff7fffff 	.word	0xff7fffff

08000fc4 <__aeabi_ddiv>:
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc6:	4657      	mov	r7, sl
 8000fc8:	464e      	mov	r6, r9
 8000fca:	4645      	mov	r5, r8
 8000fcc:	46de      	mov	lr, fp
 8000fce:	b5e0      	push	{r5, r6, r7, lr}
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	0005      	movs	r5, r0
 8000fd4:	030c      	lsls	r4, r1, #12
 8000fd6:	0048      	lsls	r0, r1, #1
 8000fd8:	4692      	mov	sl, r2
 8000fda:	001f      	movs	r7, r3
 8000fdc:	b085      	sub	sp, #20
 8000fde:	0b24      	lsrs	r4, r4, #12
 8000fe0:	0d40      	lsrs	r0, r0, #21
 8000fe2:	0fce      	lsrs	r6, r1, #31
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_ddiv+0x26>
 8000fe8:	e156      	b.n	8001298 <__aeabi_ddiv+0x2d4>
 8000fea:	4bd4      	ldr	r3, [pc, #848]	; (800133c <__aeabi_ddiv+0x378>)
 8000fec:	4298      	cmp	r0, r3
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_ddiv+0x2e>
 8000ff0:	e172      	b.n	80012d8 <__aeabi_ddiv+0x314>
 8000ff2:	0f6b      	lsrs	r3, r5, #29
 8000ff4:	00e4      	lsls	r4, r4, #3
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	4323      	orrs	r3, r4
 8000ffe:	4698      	mov	r8, r3
 8001000:	4bcf      	ldr	r3, [pc, #828]	; (8001340 <__aeabi_ddiv+0x37c>)
 8001002:	00ed      	lsls	r5, r5, #3
 8001004:	469b      	mov	fp, r3
 8001006:	2300      	movs	r3, #0
 8001008:	4699      	mov	r9, r3
 800100a:	4483      	add	fp, r0
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	033c      	lsls	r4, r7, #12
 8001010:	007b      	lsls	r3, r7, #1
 8001012:	4650      	mov	r0, sl
 8001014:	0b24      	lsrs	r4, r4, #12
 8001016:	0d5b      	lsrs	r3, r3, #21
 8001018:	0fff      	lsrs	r7, r7, #31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0x5c>
 800101e:	e11f      	b.n	8001260 <__aeabi_ddiv+0x29c>
 8001020:	4ac6      	ldr	r2, [pc, #792]	; (800133c <__aeabi_ddiv+0x378>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d100      	bne.n	8001028 <__aeabi_ddiv+0x64>
 8001026:	e162      	b.n	80012ee <__aeabi_ddiv+0x32a>
 8001028:	49c5      	ldr	r1, [pc, #788]	; (8001340 <__aeabi_ddiv+0x37c>)
 800102a:	0f42      	lsrs	r2, r0, #29
 800102c:	468c      	mov	ip, r1
 800102e:	00e4      	lsls	r4, r4, #3
 8001030:	4659      	mov	r1, fp
 8001032:	4314      	orrs	r4, r2
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	4463      	add	r3, ip
 8001038:	0412      	lsls	r2, r2, #16
 800103a:	1acb      	subs	r3, r1, r3
 800103c:	4314      	orrs	r4, r2
 800103e:	469b      	mov	fp, r3
 8001040:	00c2      	lsls	r2, r0, #3
 8001042:	2000      	movs	r0, #0
 8001044:	0033      	movs	r3, r6
 8001046:	407b      	eors	r3, r7
 8001048:	469a      	mov	sl, r3
 800104a:	464b      	mov	r3, r9
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d827      	bhi.n	80010a0 <__aeabi_ddiv+0xdc>
 8001050:	49bc      	ldr	r1, [pc, #752]	; (8001344 <__aeabi_ddiv+0x380>)
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	58cb      	ldr	r3, [r1, r3]
 8001056:	469f      	mov	pc, r3
 8001058:	46b2      	mov	sl, r6
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d016      	beq.n	800108e <__aeabi_ddiv+0xca>
 8001060:	2b03      	cmp	r3, #3
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0xa2>
 8001064:	e28e      	b.n	8001584 <__aeabi_ddiv+0x5c0>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0xa8>
 800106a:	e0d9      	b.n	8001220 <__aeabi_ddiv+0x25c>
 800106c:	2300      	movs	r3, #0
 800106e:	2400      	movs	r4, #0
 8001070:	2500      	movs	r5, #0
 8001072:	4652      	mov	r2, sl
 8001074:	051b      	lsls	r3, r3, #20
 8001076:	4323      	orrs	r3, r4
 8001078:	07d2      	lsls	r2, r2, #31
 800107a:	4313      	orrs	r3, r2
 800107c:	0028      	movs	r0, r5
 800107e:	0019      	movs	r1, r3
 8001080:	b005      	add	sp, #20
 8001082:	bcf0      	pop	{r4, r5, r6, r7}
 8001084:	46bb      	mov	fp, r7
 8001086:	46b2      	mov	sl, r6
 8001088:	46a9      	mov	r9, r5
 800108a:	46a0      	mov	r8, r4
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108e:	2400      	movs	r4, #0
 8001090:	2500      	movs	r5, #0
 8001092:	4baa      	ldr	r3, [pc, #680]	; (800133c <__aeabi_ddiv+0x378>)
 8001094:	e7ed      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001096:	46ba      	mov	sl, r7
 8001098:	46a0      	mov	r8, r4
 800109a:	0015      	movs	r5, r2
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	e7dc      	b.n	800105a <__aeabi_ddiv+0x96>
 80010a0:	4544      	cmp	r4, r8
 80010a2:	d200      	bcs.n	80010a6 <__aeabi_ddiv+0xe2>
 80010a4:	e1c7      	b.n	8001436 <__aeabi_ddiv+0x472>
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0xe6>
 80010a8:	e1c2      	b.n	8001430 <__aeabi_ddiv+0x46c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	425b      	negs	r3, r3
 80010ae:	469c      	mov	ip, r3
 80010b0:	002e      	movs	r6, r5
 80010b2:	4640      	mov	r0, r8
 80010b4:	2500      	movs	r5, #0
 80010b6:	44e3      	add	fp, ip
 80010b8:	0223      	lsls	r3, r4, #8
 80010ba:	0e14      	lsrs	r4, r2, #24
 80010bc:	431c      	orrs	r4, r3
 80010be:	0c1b      	lsrs	r3, r3, #16
 80010c0:	4699      	mov	r9, r3
 80010c2:	0423      	lsls	r3, r4, #16
 80010c4:	0c1f      	lsrs	r7, r3, #16
 80010c6:	0212      	lsls	r2, r2, #8
 80010c8:	4649      	mov	r1, r9
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	9701      	str	r7, [sp, #4]
 80010ce:	f7ff f8bd 	bl	800024c <__aeabi_uidivmod>
 80010d2:	0002      	movs	r2, r0
 80010d4:	437a      	muls	r2, r7
 80010d6:	040b      	lsls	r3, r1, #16
 80010d8:	0c31      	lsrs	r1, r6, #16
 80010da:	4680      	mov	r8, r0
 80010dc:	4319      	orrs	r1, r3
 80010de:	428a      	cmp	r2, r1
 80010e0:	d907      	bls.n	80010f2 <__aeabi_ddiv+0x12e>
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	469c      	mov	ip, r3
 80010e8:	1909      	adds	r1, r1, r4
 80010ea:	44e0      	add	r8, ip
 80010ec:	428c      	cmp	r4, r1
 80010ee:	d800      	bhi.n	80010f2 <__aeabi_ddiv+0x12e>
 80010f0:	e207      	b.n	8001502 <__aeabi_ddiv+0x53e>
 80010f2:	1a88      	subs	r0, r1, r2
 80010f4:	4649      	mov	r1, r9
 80010f6:	f7ff f8a9 	bl	800024c <__aeabi_uidivmod>
 80010fa:	0409      	lsls	r1, r1, #16
 80010fc:	468c      	mov	ip, r1
 80010fe:	0431      	lsls	r1, r6, #16
 8001100:	4666      	mov	r6, ip
 8001102:	9a01      	ldr	r2, [sp, #4]
 8001104:	0c09      	lsrs	r1, r1, #16
 8001106:	4342      	muls	r2, r0
 8001108:	0003      	movs	r3, r0
 800110a:	4331      	orrs	r1, r6
 800110c:	428a      	cmp	r2, r1
 800110e:	d904      	bls.n	800111a <__aeabi_ddiv+0x156>
 8001110:	1909      	adds	r1, r1, r4
 8001112:	3b01      	subs	r3, #1
 8001114:	428c      	cmp	r4, r1
 8001116:	d800      	bhi.n	800111a <__aeabi_ddiv+0x156>
 8001118:	e1ed      	b.n	80014f6 <__aeabi_ddiv+0x532>
 800111a:	1a88      	subs	r0, r1, r2
 800111c:	4642      	mov	r2, r8
 800111e:	0412      	lsls	r2, r2, #16
 8001120:	431a      	orrs	r2, r3
 8001122:	4690      	mov	r8, r2
 8001124:	4641      	mov	r1, r8
 8001126:	9b00      	ldr	r3, [sp, #0]
 8001128:	040e      	lsls	r6, r1, #16
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	001f      	movs	r7, r3
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	9b00      	ldr	r3, [sp, #0]
 8001132:	0c36      	lsrs	r6, r6, #16
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	0c19      	lsrs	r1, r3, #16
 8001138:	000b      	movs	r3, r1
 800113a:	4373      	muls	r3, r6
 800113c:	0c12      	lsrs	r2, r2, #16
 800113e:	437e      	muls	r6, r7
 8001140:	9103      	str	r1, [sp, #12]
 8001142:	4351      	muls	r1, r2
 8001144:	437a      	muls	r2, r7
 8001146:	0c1f      	lsrs	r7, r3, #16
 8001148:	46bc      	mov	ip, r7
 800114a:	1876      	adds	r6, r6, r1
 800114c:	4466      	add	r6, ip
 800114e:	42b1      	cmp	r1, r6
 8001150:	d903      	bls.n	800115a <__aeabi_ddiv+0x196>
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	468c      	mov	ip, r1
 8001158:	4462      	add	r2, ip
 800115a:	0c31      	lsrs	r1, r6, #16
 800115c:	188a      	adds	r2, r1, r2
 800115e:	0431      	lsls	r1, r6, #16
 8001160:	041e      	lsls	r6, r3, #16
 8001162:	0c36      	lsrs	r6, r6, #16
 8001164:	198e      	adds	r6, r1, r6
 8001166:	4290      	cmp	r0, r2
 8001168:	d302      	bcc.n	8001170 <__aeabi_ddiv+0x1ac>
 800116a:	d112      	bne.n	8001192 <__aeabi_ddiv+0x1ce>
 800116c:	42b5      	cmp	r5, r6
 800116e:	d210      	bcs.n	8001192 <__aeabi_ddiv+0x1ce>
 8001170:	4643      	mov	r3, r8
 8001172:	1e59      	subs	r1, r3, #1
 8001174:	9b00      	ldr	r3, [sp, #0]
 8001176:	469c      	mov	ip, r3
 8001178:	4465      	add	r5, ip
 800117a:	001f      	movs	r7, r3
 800117c:	429d      	cmp	r5, r3
 800117e:	419b      	sbcs	r3, r3
 8001180:	425b      	negs	r3, r3
 8001182:	191b      	adds	r3, r3, r4
 8001184:	18c0      	adds	r0, r0, r3
 8001186:	4284      	cmp	r4, r0
 8001188:	d200      	bcs.n	800118c <__aeabi_ddiv+0x1c8>
 800118a:	e1a0      	b.n	80014ce <__aeabi_ddiv+0x50a>
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x1cc>
 800118e:	e19b      	b.n	80014c8 <__aeabi_ddiv+0x504>
 8001190:	4688      	mov	r8, r1
 8001192:	1bae      	subs	r6, r5, r6
 8001194:	42b5      	cmp	r5, r6
 8001196:	41ad      	sbcs	r5, r5
 8001198:	1a80      	subs	r0, r0, r2
 800119a:	426d      	negs	r5, r5
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	4284      	cmp	r4, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x1e0>
 80011a2:	e1d5      	b.n	8001550 <__aeabi_ddiv+0x58c>
 80011a4:	4649      	mov	r1, r9
 80011a6:	f7ff f851 	bl	800024c <__aeabi_uidivmod>
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	040b      	lsls	r3, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0c31      	lsrs	r1, r6, #16
 80011b2:	0005      	movs	r5, r0
 80011b4:	4319      	orrs	r1, r3
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x1f8>
 80011ba:	e16c      	b.n	8001496 <__aeabi_ddiv+0x4d2>
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	4649      	mov	r1, r9
 80011c0:	f7ff f844 	bl	800024c <__aeabi_uidivmod>
 80011c4:	9a01      	ldr	r2, [sp, #4]
 80011c6:	0436      	lsls	r6, r6, #16
 80011c8:	4342      	muls	r2, r0
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	0c36      	lsrs	r6, r6, #16
 80011ce:	0003      	movs	r3, r0
 80011d0:	430e      	orrs	r6, r1
 80011d2:	42b2      	cmp	r2, r6
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x214>
 80011d6:	e153      	b.n	8001480 <__aeabi_ddiv+0x4bc>
 80011d8:	9803      	ldr	r0, [sp, #12]
 80011da:	1ab6      	subs	r6, r6, r2
 80011dc:	0002      	movs	r2, r0
 80011de:	042d      	lsls	r5, r5, #16
 80011e0:	431d      	orrs	r5, r3
 80011e2:	9f02      	ldr	r7, [sp, #8]
 80011e4:	042b      	lsls	r3, r5, #16
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	435a      	muls	r2, r3
 80011ea:	437b      	muls	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	0c29      	lsrs	r1, r5, #16
 80011f0:	4348      	muls	r0, r1
 80011f2:	0c13      	lsrs	r3, r2, #16
 80011f4:	4484      	add	ip, r0
 80011f6:	4463      	add	r3, ip
 80011f8:	4379      	muls	r1, r7
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d903      	bls.n	8001206 <__aeabi_ddiv+0x242>
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	0240      	lsls	r0, r0, #9
 8001202:	4684      	mov	ip, r0
 8001204:	4461      	add	r1, ip
 8001206:	0c18      	lsrs	r0, r3, #16
 8001208:	0412      	lsls	r2, r2, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c12      	lsrs	r2, r2, #16
 800120e:	1841      	adds	r1, r0, r1
 8001210:	189b      	adds	r3, r3, r2
 8001212:	428e      	cmp	r6, r1
 8001214:	d200      	bcs.n	8001218 <__aeabi_ddiv+0x254>
 8001216:	e0ff      	b.n	8001418 <__aeabi_ddiv+0x454>
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x258>
 800121a:	e0fa      	b.n	8001412 <__aeabi_ddiv+0x44e>
 800121c:	2301      	movs	r3, #1
 800121e:	431d      	orrs	r5, r3
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <__aeabi_ddiv+0x384>)
 8001222:	445a      	add	r2, fp
 8001224:	2a00      	cmp	r2, #0
 8001226:	dc00      	bgt.n	800122a <__aeabi_ddiv+0x266>
 8001228:	e0aa      	b.n	8001380 <__aeabi_ddiv+0x3bc>
 800122a:	076b      	lsls	r3, r5, #29
 800122c:	d000      	beq.n	8001230 <__aeabi_ddiv+0x26c>
 800122e:	e13d      	b.n	80014ac <__aeabi_ddiv+0x4e8>
 8001230:	08ed      	lsrs	r5, r5, #3
 8001232:	4643      	mov	r3, r8
 8001234:	01db      	lsls	r3, r3, #7
 8001236:	d506      	bpl.n	8001246 <__aeabi_ddiv+0x282>
 8001238:	4642      	mov	r2, r8
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <__aeabi_ddiv+0x388>)
 800123c:	401a      	ands	r2, r3
 800123e:	4690      	mov	r8, r2
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	00d2      	lsls	r2, r2, #3
 8001244:	445a      	add	r2, fp
 8001246:	4b42      	ldr	r3, [pc, #264]	; (8001350 <__aeabi_ddiv+0x38c>)
 8001248:	429a      	cmp	r2, r3
 800124a:	dd00      	ble.n	800124e <__aeabi_ddiv+0x28a>
 800124c:	e71f      	b.n	800108e <__aeabi_ddiv+0xca>
 800124e:	4643      	mov	r3, r8
 8001250:	075b      	lsls	r3, r3, #29
 8001252:	431d      	orrs	r5, r3
 8001254:	4643      	mov	r3, r8
 8001256:	0552      	lsls	r2, r2, #21
 8001258:	025c      	lsls	r4, r3, #9
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	0d53      	lsrs	r3, r2, #21
 800125e:	e708      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001260:	4652      	mov	r2, sl
 8001262:	4322      	orrs	r2, r4
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x2a4>
 8001266:	e07b      	b.n	8001360 <__aeabi_ddiv+0x39c>
 8001268:	2c00      	cmp	r4, #0
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x2aa>
 800126c:	e0fa      	b.n	8001464 <__aeabi_ddiv+0x4a0>
 800126e:	0020      	movs	r0, r4
 8001270:	f001 f99a 	bl	80025a8 <__clzsi2>
 8001274:	0002      	movs	r2, r0
 8001276:	3a0b      	subs	r2, #11
 8001278:	231d      	movs	r3, #29
 800127a:	0001      	movs	r1, r0
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	4652      	mov	r2, sl
 8001280:	3908      	subs	r1, #8
 8001282:	40da      	lsrs	r2, r3
 8001284:	408c      	lsls	r4, r1
 8001286:	4314      	orrs	r4, r2
 8001288:	4652      	mov	r2, sl
 800128a:	408a      	lsls	r2, r1
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <__aeabi_ddiv+0x390>)
 800128e:	4458      	add	r0, fp
 8001290:	469b      	mov	fp, r3
 8001292:	4483      	add	fp, r0
 8001294:	2000      	movs	r0, #0
 8001296:	e6d5      	b.n	8001044 <__aeabi_ddiv+0x80>
 8001298:	464b      	mov	r3, r9
 800129a:	4323      	orrs	r3, r4
 800129c:	4698      	mov	r8, r3
 800129e:	d044      	beq.n	800132a <__aeabi_ddiv+0x366>
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_ddiv+0x2e2>
 80012a4:	e0ce      	b.n	8001444 <__aeabi_ddiv+0x480>
 80012a6:	0020      	movs	r0, r4
 80012a8:	f001 f97e 	bl	80025a8 <__clzsi2>
 80012ac:	0001      	movs	r1, r0
 80012ae:	0002      	movs	r2, r0
 80012b0:	390b      	subs	r1, #11
 80012b2:	231d      	movs	r3, #29
 80012b4:	1a5b      	subs	r3, r3, r1
 80012b6:	4649      	mov	r1, r9
 80012b8:	0010      	movs	r0, r2
 80012ba:	40d9      	lsrs	r1, r3
 80012bc:	3808      	subs	r0, #8
 80012be:	4084      	lsls	r4, r0
 80012c0:	000b      	movs	r3, r1
 80012c2:	464d      	mov	r5, r9
 80012c4:	4323      	orrs	r3, r4
 80012c6:	4698      	mov	r8, r3
 80012c8:	4085      	lsls	r5, r0
 80012ca:	4823      	ldr	r0, [pc, #140]	; (8001358 <__aeabi_ddiv+0x394>)
 80012cc:	1a83      	subs	r3, r0, r2
 80012ce:	469b      	mov	fp, r3
 80012d0:	2300      	movs	r3, #0
 80012d2:	4699      	mov	r9, r3
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	e69a      	b.n	800100e <__aeabi_ddiv+0x4a>
 80012d8:	464b      	mov	r3, r9
 80012da:	4323      	orrs	r3, r4
 80012dc:	4698      	mov	r8, r3
 80012de:	d11d      	bne.n	800131c <__aeabi_ddiv+0x358>
 80012e0:	2308      	movs	r3, #8
 80012e2:	4699      	mov	r9, r3
 80012e4:	3b06      	subs	r3, #6
 80012e6:	2500      	movs	r5, #0
 80012e8:	4683      	mov	fp, r0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	e68f      	b.n	800100e <__aeabi_ddiv+0x4a>
 80012ee:	4652      	mov	r2, sl
 80012f0:	4322      	orrs	r2, r4
 80012f2:	d109      	bne.n	8001308 <__aeabi_ddiv+0x344>
 80012f4:	2302      	movs	r3, #2
 80012f6:	4649      	mov	r1, r9
 80012f8:	4319      	orrs	r1, r3
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <__aeabi_ddiv+0x398>)
 80012fc:	4689      	mov	r9, r1
 80012fe:	469c      	mov	ip, r3
 8001300:	2400      	movs	r4, #0
 8001302:	2002      	movs	r0, #2
 8001304:	44e3      	add	fp, ip
 8001306:	e69d      	b.n	8001044 <__aeabi_ddiv+0x80>
 8001308:	2303      	movs	r3, #3
 800130a:	464a      	mov	r2, r9
 800130c:	431a      	orrs	r2, r3
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <__aeabi_ddiv+0x398>)
 8001310:	4691      	mov	r9, r2
 8001312:	469c      	mov	ip, r3
 8001314:	4652      	mov	r2, sl
 8001316:	2003      	movs	r0, #3
 8001318:	44e3      	add	fp, ip
 800131a:	e693      	b.n	8001044 <__aeabi_ddiv+0x80>
 800131c:	230c      	movs	r3, #12
 800131e:	4699      	mov	r9, r3
 8001320:	3b09      	subs	r3, #9
 8001322:	46a0      	mov	r8, r4
 8001324:	4683      	mov	fp, r0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	e671      	b.n	800100e <__aeabi_ddiv+0x4a>
 800132a:	2304      	movs	r3, #4
 800132c:	4699      	mov	r9, r3
 800132e:	2300      	movs	r3, #0
 8001330:	469b      	mov	fp, r3
 8001332:	3301      	adds	r3, #1
 8001334:	2500      	movs	r5, #0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	e669      	b.n	800100e <__aeabi_ddiv+0x4a>
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff
 8001340:	fffffc01 	.word	0xfffffc01
 8001344:	0800e084 	.word	0x0800e084
 8001348:	000003ff 	.word	0x000003ff
 800134c:	feffffff 	.word	0xfeffffff
 8001350:	000007fe 	.word	0x000007fe
 8001354:	000003f3 	.word	0x000003f3
 8001358:	fffffc0d 	.word	0xfffffc0d
 800135c:	fffff801 	.word	0xfffff801
 8001360:	4649      	mov	r1, r9
 8001362:	2301      	movs	r3, #1
 8001364:	4319      	orrs	r1, r3
 8001366:	4689      	mov	r9, r1
 8001368:	2400      	movs	r4, #0
 800136a:	2001      	movs	r0, #1
 800136c:	e66a      	b.n	8001044 <__aeabi_ddiv+0x80>
 800136e:	2300      	movs	r3, #0
 8001370:	2480      	movs	r4, #128	; 0x80
 8001372:	469a      	mov	sl, r3
 8001374:	2500      	movs	r5, #0
 8001376:	4b8a      	ldr	r3, [pc, #552]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	e67a      	b.n	8001072 <__aeabi_ddiv+0xae>
 800137c:	2501      	movs	r5, #1
 800137e:	426d      	negs	r5, r5
 8001380:	2301      	movs	r3, #1
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	2b38      	cmp	r3, #56	; 0x38
 8001386:	dd00      	ble.n	800138a <__aeabi_ddiv+0x3c6>
 8001388:	e670      	b.n	800106c <__aeabi_ddiv+0xa8>
 800138a:	2b1f      	cmp	r3, #31
 800138c:	dc00      	bgt.n	8001390 <__aeabi_ddiv+0x3cc>
 800138e:	e0bf      	b.n	8001510 <__aeabi_ddiv+0x54c>
 8001390:	211f      	movs	r1, #31
 8001392:	4249      	negs	r1, r1
 8001394:	1a8a      	subs	r2, r1, r2
 8001396:	4641      	mov	r1, r8
 8001398:	40d1      	lsrs	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	2b20      	cmp	r3, #32
 800139e:	d004      	beq.n	80013aa <__aeabi_ddiv+0x3e6>
 80013a0:	4641      	mov	r1, r8
 80013a2:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <__aeabi_ddiv+0x5e0>)
 80013a4:	445b      	add	r3, fp
 80013a6:	4099      	lsls	r1, r3
 80013a8:	430d      	orrs	r5, r1
 80013aa:	1e6b      	subs	r3, r5, #1
 80013ac:	419d      	sbcs	r5, r3
 80013ae:	2307      	movs	r3, #7
 80013b0:	432a      	orrs	r2, r5
 80013b2:	001d      	movs	r5, r3
 80013b4:	2400      	movs	r4, #0
 80013b6:	4015      	ands	r5, r2
 80013b8:	4213      	tst	r3, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x3fa>
 80013bc:	e0d4      	b.n	8001568 <__aeabi_ddiv+0x5a4>
 80013be:	210f      	movs	r1, #15
 80013c0:	2300      	movs	r3, #0
 80013c2:	4011      	ands	r1, r2
 80013c4:	2904      	cmp	r1, #4
 80013c6:	d100      	bne.n	80013ca <__aeabi_ddiv+0x406>
 80013c8:	e0cb      	b.n	8001562 <__aeabi_ddiv+0x59e>
 80013ca:	1d11      	adds	r1, r2, #4
 80013cc:	4291      	cmp	r1, r2
 80013ce:	4192      	sbcs	r2, r2
 80013d0:	4252      	negs	r2, r2
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	000a      	movs	r2, r1
 80013d6:	0219      	lsls	r1, r3, #8
 80013d8:	d400      	bmi.n	80013dc <__aeabi_ddiv+0x418>
 80013da:	e0c2      	b.n	8001562 <__aeabi_ddiv+0x59e>
 80013dc:	2301      	movs	r3, #1
 80013de:	2400      	movs	r4, #0
 80013e0:	2500      	movs	r5, #0
 80013e2:	e646      	b.n	8001072 <__aeabi_ddiv+0xae>
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	4641      	mov	r1, r8
 80013e8:	031b      	lsls	r3, r3, #12
 80013ea:	4219      	tst	r1, r3
 80013ec:	d008      	beq.n	8001400 <__aeabi_ddiv+0x43c>
 80013ee:	421c      	tst	r4, r3
 80013f0:	d106      	bne.n	8001400 <__aeabi_ddiv+0x43c>
 80013f2:	431c      	orrs	r4, r3
 80013f4:	0324      	lsls	r4, r4, #12
 80013f6:	46ba      	mov	sl, r7
 80013f8:	0015      	movs	r5, r2
 80013fa:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 80013fc:	0b24      	lsrs	r4, r4, #12
 80013fe:	e638      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001400:	2480      	movs	r4, #128	; 0x80
 8001402:	4643      	mov	r3, r8
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	431c      	orrs	r4, r3
 8001408:	0324      	lsls	r4, r4, #12
 800140a:	46b2      	mov	sl, r6
 800140c:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 800140e:	0b24      	lsrs	r4, r4, #12
 8001410:	e62f      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_ddiv+0x454>
 8001416:	e703      	b.n	8001220 <__aeabi_ddiv+0x25c>
 8001418:	19a6      	adds	r6, r4, r6
 800141a:	1e68      	subs	r0, r5, #1
 800141c:	42a6      	cmp	r6, r4
 800141e:	d200      	bcs.n	8001422 <__aeabi_ddiv+0x45e>
 8001420:	e08d      	b.n	800153e <__aeabi_ddiv+0x57a>
 8001422:	428e      	cmp	r6, r1
 8001424:	d200      	bcs.n	8001428 <__aeabi_ddiv+0x464>
 8001426:	e0a3      	b.n	8001570 <__aeabi_ddiv+0x5ac>
 8001428:	d100      	bne.n	800142c <__aeabi_ddiv+0x468>
 800142a:	e0b3      	b.n	8001594 <__aeabi_ddiv+0x5d0>
 800142c:	0005      	movs	r5, r0
 800142e:	e6f5      	b.n	800121c <__aeabi_ddiv+0x258>
 8001430:	42aa      	cmp	r2, r5
 8001432:	d900      	bls.n	8001436 <__aeabi_ddiv+0x472>
 8001434:	e639      	b.n	80010aa <__aeabi_ddiv+0xe6>
 8001436:	4643      	mov	r3, r8
 8001438:	07de      	lsls	r6, r3, #31
 800143a:	0858      	lsrs	r0, r3, #1
 800143c:	086b      	lsrs	r3, r5, #1
 800143e:	431e      	orrs	r6, r3
 8001440:	07ed      	lsls	r5, r5, #31
 8001442:	e639      	b.n	80010b8 <__aeabi_ddiv+0xf4>
 8001444:	4648      	mov	r0, r9
 8001446:	f001 f8af 	bl	80025a8 <__clzsi2>
 800144a:	0001      	movs	r1, r0
 800144c:	0002      	movs	r2, r0
 800144e:	3115      	adds	r1, #21
 8001450:	3220      	adds	r2, #32
 8001452:	291c      	cmp	r1, #28
 8001454:	dc00      	bgt.n	8001458 <__aeabi_ddiv+0x494>
 8001456:	e72c      	b.n	80012b2 <__aeabi_ddiv+0x2ee>
 8001458:	464b      	mov	r3, r9
 800145a:	3808      	subs	r0, #8
 800145c:	4083      	lsls	r3, r0
 800145e:	2500      	movs	r5, #0
 8001460:	4698      	mov	r8, r3
 8001462:	e732      	b.n	80012ca <__aeabi_ddiv+0x306>
 8001464:	f001 f8a0 	bl	80025a8 <__clzsi2>
 8001468:	0003      	movs	r3, r0
 800146a:	001a      	movs	r2, r3
 800146c:	3215      	adds	r2, #21
 800146e:	3020      	adds	r0, #32
 8001470:	2a1c      	cmp	r2, #28
 8001472:	dc00      	bgt.n	8001476 <__aeabi_ddiv+0x4b2>
 8001474:	e700      	b.n	8001278 <__aeabi_ddiv+0x2b4>
 8001476:	4654      	mov	r4, sl
 8001478:	3b08      	subs	r3, #8
 800147a:	2200      	movs	r2, #0
 800147c:	409c      	lsls	r4, r3
 800147e:	e705      	b.n	800128c <__aeabi_ddiv+0x2c8>
 8001480:	1936      	adds	r6, r6, r4
 8001482:	3b01      	subs	r3, #1
 8001484:	42b4      	cmp	r4, r6
 8001486:	d900      	bls.n	800148a <__aeabi_ddiv+0x4c6>
 8001488:	e6a6      	b.n	80011d8 <__aeabi_ddiv+0x214>
 800148a:	42b2      	cmp	r2, r6
 800148c:	d800      	bhi.n	8001490 <__aeabi_ddiv+0x4cc>
 800148e:	e6a3      	b.n	80011d8 <__aeabi_ddiv+0x214>
 8001490:	1e83      	subs	r3, r0, #2
 8001492:	1936      	adds	r6, r6, r4
 8001494:	e6a0      	b.n	80011d8 <__aeabi_ddiv+0x214>
 8001496:	1909      	adds	r1, r1, r4
 8001498:	3d01      	subs	r5, #1
 800149a:	428c      	cmp	r4, r1
 800149c:	d900      	bls.n	80014a0 <__aeabi_ddiv+0x4dc>
 800149e:	e68d      	b.n	80011bc <__aeabi_ddiv+0x1f8>
 80014a0:	428a      	cmp	r2, r1
 80014a2:	d800      	bhi.n	80014a6 <__aeabi_ddiv+0x4e2>
 80014a4:	e68a      	b.n	80011bc <__aeabi_ddiv+0x1f8>
 80014a6:	1e85      	subs	r5, r0, #2
 80014a8:	1909      	adds	r1, r1, r4
 80014aa:	e687      	b.n	80011bc <__aeabi_ddiv+0x1f8>
 80014ac:	230f      	movs	r3, #15
 80014ae:	402b      	ands	r3, r5
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d100      	bne.n	80014b6 <__aeabi_ddiv+0x4f2>
 80014b4:	e6bc      	b.n	8001230 <__aeabi_ddiv+0x26c>
 80014b6:	2305      	movs	r3, #5
 80014b8:	425b      	negs	r3, r3
 80014ba:	42ab      	cmp	r3, r5
 80014bc:	419b      	sbcs	r3, r3
 80014be:	3504      	adds	r5, #4
 80014c0:	425b      	negs	r3, r3
 80014c2:	08ed      	lsrs	r5, r5, #3
 80014c4:	4498      	add	r8, r3
 80014c6:	e6b4      	b.n	8001232 <__aeabi_ddiv+0x26e>
 80014c8:	42af      	cmp	r7, r5
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x50a>
 80014cc:	e660      	b.n	8001190 <__aeabi_ddiv+0x1cc>
 80014ce:	4282      	cmp	r2, r0
 80014d0:	d804      	bhi.n	80014dc <__aeabi_ddiv+0x518>
 80014d2:	d000      	beq.n	80014d6 <__aeabi_ddiv+0x512>
 80014d4:	e65c      	b.n	8001190 <__aeabi_ddiv+0x1cc>
 80014d6:	42ae      	cmp	r6, r5
 80014d8:	d800      	bhi.n	80014dc <__aeabi_ddiv+0x518>
 80014da:	e659      	b.n	8001190 <__aeabi_ddiv+0x1cc>
 80014dc:	2302      	movs	r3, #2
 80014de:	425b      	negs	r3, r3
 80014e0:	469c      	mov	ip, r3
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	44e0      	add	r8, ip
 80014e6:	469c      	mov	ip, r3
 80014e8:	4465      	add	r5, ip
 80014ea:	429d      	cmp	r5, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	425b      	negs	r3, r3
 80014f0:	191b      	adds	r3, r3, r4
 80014f2:	18c0      	adds	r0, r0, r3
 80014f4:	e64d      	b.n	8001192 <__aeabi_ddiv+0x1ce>
 80014f6:	428a      	cmp	r2, r1
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x538>
 80014fa:	e60e      	b.n	800111a <__aeabi_ddiv+0x156>
 80014fc:	1e83      	subs	r3, r0, #2
 80014fe:	1909      	adds	r1, r1, r4
 8001500:	e60b      	b.n	800111a <__aeabi_ddiv+0x156>
 8001502:	428a      	cmp	r2, r1
 8001504:	d800      	bhi.n	8001508 <__aeabi_ddiv+0x544>
 8001506:	e5f4      	b.n	80010f2 <__aeabi_ddiv+0x12e>
 8001508:	1e83      	subs	r3, r0, #2
 800150a:	4698      	mov	r8, r3
 800150c:	1909      	adds	r1, r1, r4
 800150e:	e5f0      	b.n	80010f2 <__aeabi_ddiv+0x12e>
 8001510:	4925      	ldr	r1, [pc, #148]	; (80015a8 <__aeabi_ddiv+0x5e4>)
 8001512:	0028      	movs	r0, r5
 8001514:	4459      	add	r1, fp
 8001516:	408d      	lsls	r5, r1
 8001518:	4642      	mov	r2, r8
 800151a:	408a      	lsls	r2, r1
 800151c:	1e69      	subs	r1, r5, #1
 800151e:	418d      	sbcs	r5, r1
 8001520:	4641      	mov	r1, r8
 8001522:	40d8      	lsrs	r0, r3
 8001524:	40d9      	lsrs	r1, r3
 8001526:	4302      	orrs	r2, r0
 8001528:	432a      	orrs	r2, r5
 800152a:	000b      	movs	r3, r1
 800152c:	0751      	lsls	r1, r2, #29
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x56e>
 8001530:	e751      	b.n	80013d6 <__aeabi_ddiv+0x412>
 8001532:	210f      	movs	r1, #15
 8001534:	4011      	ands	r1, r2
 8001536:	2904      	cmp	r1, #4
 8001538:	d000      	beq.n	800153c <__aeabi_ddiv+0x578>
 800153a:	e746      	b.n	80013ca <__aeabi_ddiv+0x406>
 800153c:	e74b      	b.n	80013d6 <__aeabi_ddiv+0x412>
 800153e:	0005      	movs	r5, r0
 8001540:	428e      	cmp	r6, r1
 8001542:	d000      	beq.n	8001546 <__aeabi_ddiv+0x582>
 8001544:	e66a      	b.n	800121c <__aeabi_ddiv+0x258>
 8001546:	9a00      	ldr	r2, [sp, #0]
 8001548:	4293      	cmp	r3, r2
 800154a:	d000      	beq.n	800154e <__aeabi_ddiv+0x58a>
 800154c:	e666      	b.n	800121c <__aeabi_ddiv+0x258>
 800154e:	e667      	b.n	8001220 <__aeabi_ddiv+0x25c>
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <__aeabi_ddiv+0x5e8>)
 8001552:	445a      	add	r2, fp
 8001554:	2a00      	cmp	r2, #0
 8001556:	dc00      	bgt.n	800155a <__aeabi_ddiv+0x596>
 8001558:	e710      	b.n	800137c <__aeabi_ddiv+0x3b8>
 800155a:	2301      	movs	r3, #1
 800155c:	2500      	movs	r5, #0
 800155e:	4498      	add	r8, r3
 8001560:	e667      	b.n	8001232 <__aeabi_ddiv+0x26e>
 8001562:	075d      	lsls	r5, r3, #29
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	0b1c      	lsrs	r4, r3, #12
 8001568:	08d2      	lsrs	r2, r2, #3
 800156a:	2300      	movs	r3, #0
 800156c:	4315      	orrs	r5, r2
 800156e:	e580      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001570:	9800      	ldr	r0, [sp, #0]
 8001572:	3d02      	subs	r5, #2
 8001574:	0042      	lsls	r2, r0, #1
 8001576:	4282      	cmp	r2, r0
 8001578:	41bf      	sbcs	r7, r7
 800157a:	427f      	negs	r7, r7
 800157c:	193c      	adds	r4, r7, r4
 800157e:	1936      	adds	r6, r6, r4
 8001580:	9200      	str	r2, [sp, #0]
 8001582:	e7dd      	b.n	8001540 <__aeabi_ddiv+0x57c>
 8001584:	2480      	movs	r4, #128	; 0x80
 8001586:	4643      	mov	r3, r8
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	431c      	orrs	r4, r3
 800158c:	0324      	lsls	r4, r4, #12
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 8001590:	0b24      	lsrs	r4, r4, #12
 8001592:	e56e      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001594:	9a00      	ldr	r2, [sp, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d3ea      	bcc.n	8001570 <__aeabi_ddiv+0x5ac>
 800159a:	0005      	movs	r5, r0
 800159c:	e7d3      	b.n	8001546 <__aeabi_ddiv+0x582>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	0000043e 	.word	0x0000043e
 80015a8:	0000041e 	.word	0x0000041e
 80015ac:	000003ff 	.word	0x000003ff

080015b0 <__eqdf2>:
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	464e      	mov	r6, r9
 80015b4:	4645      	mov	r5, r8
 80015b6:	46de      	mov	lr, fp
 80015b8:	4657      	mov	r7, sl
 80015ba:	4690      	mov	r8, r2
 80015bc:	b5e0      	push	{r5, r6, r7, lr}
 80015be:	0017      	movs	r7, r2
 80015c0:	031a      	lsls	r2, r3, #12
 80015c2:	0b12      	lsrs	r2, r2, #12
 80015c4:	0005      	movs	r5, r0
 80015c6:	4684      	mov	ip, r0
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <__eqdf2+0x80>)
 80015ca:	030e      	lsls	r6, r1, #12
 80015cc:	004c      	lsls	r4, r1, #1
 80015ce:	4691      	mov	r9, r2
 80015d0:	005a      	lsls	r2, r3, #1
 80015d2:	0fdb      	lsrs	r3, r3, #31
 80015d4:	469b      	mov	fp, r3
 80015d6:	0b36      	lsrs	r6, r6, #12
 80015d8:	0d64      	lsrs	r4, r4, #21
 80015da:	0fc9      	lsrs	r1, r1, #31
 80015dc:	0d52      	lsrs	r2, r2, #21
 80015de:	4284      	cmp	r4, r0
 80015e0:	d019      	beq.n	8001616 <__eqdf2+0x66>
 80015e2:	4282      	cmp	r2, r0
 80015e4:	d010      	beq.n	8001608 <__eqdf2+0x58>
 80015e6:	2001      	movs	r0, #1
 80015e8:	4294      	cmp	r4, r2
 80015ea:	d10e      	bne.n	800160a <__eqdf2+0x5a>
 80015ec:	454e      	cmp	r6, r9
 80015ee:	d10c      	bne.n	800160a <__eqdf2+0x5a>
 80015f0:	2001      	movs	r0, #1
 80015f2:	45c4      	cmp	ip, r8
 80015f4:	d109      	bne.n	800160a <__eqdf2+0x5a>
 80015f6:	4559      	cmp	r1, fp
 80015f8:	d017      	beq.n	800162a <__eqdf2+0x7a>
 80015fa:	2c00      	cmp	r4, #0
 80015fc:	d105      	bne.n	800160a <__eqdf2+0x5a>
 80015fe:	0030      	movs	r0, r6
 8001600:	4328      	orrs	r0, r5
 8001602:	1e43      	subs	r3, r0, #1
 8001604:	4198      	sbcs	r0, r3
 8001606:	e000      	b.n	800160a <__eqdf2+0x5a>
 8001608:	2001      	movs	r0, #1
 800160a:	bcf0      	pop	{r4, r5, r6, r7}
 800160c:	46bb      	mov	fp, r7
 800160e:	46b2      	mov	sl, r6
 8001610:	46a9      	mov	r9, r5
 8001612:	46a0      	mov	r8, r4
 8001614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001616:	0033      	movs	r3, r6
 8001618:	2001      	movs	r0, #1
 800161a:	432b      	orrs	r3, r5
 800161c:	d1f5      	bne.n	800160a <__eqdf2+0x5a>
 800161e:	42a2      	cmp	r2, r4
 8001620:	d1f3      	bne.n	800160a <__eqdf2+0x5a>
 8001622:	464b      	mov	r3, r9
 8001624:	433b      	orrs	r3, r7
 8001626:	d1f0      	bne.n	800160a <__eqdf2+0x5a>
 8001628:	e7e2      	b.n	80015f0 <__eqdf2+0x40>
 800162a:	2000      	movs	r0, #0
 800162c:	e7ed      	b.n	800160a <__eqdf2+0x5a>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	000007ff 	.word	0x000007ff

08001634 <__gedf2>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	4647      	mov	r7, r8
 8001638:	46ce      	mov	lr, r9
 800163a:	0004      	movs	r4, r0
 800163c:	0018      	movs	r0, r3
 800163e:	0016      	movs	r6, r2
 8001640:	031b      	lsls	r3, r3, #12
 8001642:	0b1b      	lsrs	r3, r3, #12
 8001644:	4d2d      	ldr	r5, [pc, #180]	; (80016fc <__gedf2+0xc8>)
 8001646:	004a      	lsls	r2, r1, #1
 8001648:	4699      	mov	r9, r3
 800164a:	b580      	push	{r7, lr}
 800164c:	0043      	lsls	r3, r0, #1
 800164e:	030f      	lsls	r7, r1, #12
 8001650:	46a4      	mov	ip, r4
 8001652:	46b0      	mov	r8, r6
 8001654:	0b3f      	lsrs	r7, r7, #12
 8001656:	0d52      	lsrs	r2, r2, #21
 8001658:	0fc9      	lsrs	r1, r1, #31
 800165a:	0d5b      	lsrs	r3, r3, #21
 800165c:	0fc0      	lsrs	r0, r0, #31
 800165e:	42aa      	cmp	r2, r5
 8001660:	d021      	beq.n	80016a6 <__gedf2+0x72>
 8001662:	42ab      	cmp	r3, r5
 8001664:	d013      	beq.n	800168e <__gedf2+0x5a>
 8001666:	2a00      	cmp	r2, #0
 8001668:	d122      	bne.n	80016b0 <__gedf2+0x7c>
 800166a:	433c      	orrs	r4, r7
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <__gedf2+0x42>
 8001670:	464d      	mov	r5, r9
 8001672:	432e      	orrs	r6, r5
 8001674:	d022      	beq.n	80016bc <__gedf2+0x88>
 8001676:	2c00      	cmp	r4, #0
 8001678:	d010      	beq.n	800169c <__gedf2+0x68>
 800167a:	4281      	cmp	r1, r0
 800167c:	d022      	beq.n	80016c4 <__gedf2+0x90>
 800167e:	2002      	movs	r0, #2
 8001680:	3901      	subs	r1, #1
 8001682:	4008      	ands	r0, r1
 8001684:	3801      	subs	r0, #1
 8001686:	bcc0      	pop	{r6, r7}
 8001688:	46b9      	mov	r9, r7
 800168a:	46b0      	mov	r8, r6
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168e:	464d      	mov	r5, r9
 8001690:	432e      	orrs	r6, r5
 8001692:	d129      	bne.n	80016e8 <__gedf2+0xb4>
 8001694:	2a00      	cmp	r2, #0
 8001696:	d1f0      	bne.n	800167a <__gedf2+0x46>
 8001698:	433c      	orrs	r4, r7
 800169a:	d1ee      	bne.n	800167a <__gedf2+0x46>
 800169c:	2800      	cmp	r0, #0
 800169e:	d1f2      	bne.n	8001686 <__gedf2+0x52>
 80016a0:	2001      	movs	r0, #1
 80016a2:	4240      	negs	r0, r0
 80016a4:	e7ef      	b.n	8001686 <__gedf2+0x52>
 80016a6:	003d      	movs	r5, r7
 80016a8:	4325      	orrs	r5, r4
 80016aa:	d11d      	bne.n	80016e8 <__gedf2+0xb4>
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d0ee      	beq.n	800168e <__gedf2+0x5a>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e2      	bne.n	800167a <__gedf2+0x46>
 80016b4:	464c      	mov	r4, r9
 80016b6:	4326      	orrs	r6, r4
 80016b8:	d1df      	bne.n	800167a <__gedf2+0x46>
 80016ba:	e7e0      	b.n	800167e <__gedf2+0x4a>
 80016bc:	2000      	movs	r0, #0
 80016be:	2c00      	cmp	r4, #0
 80016c0:	d0e1      	beq.n	8001686 <__gedf2+0x52>
 80016c2:	e7dc      	b.n	800167e <__gedf2+0x4a>
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dc0a      	bgt.n	80016de <__gedf2+0xaa>
 80016c8:	dbe8      	blt.n	800169c <__gedf2+0x68>
 80016ca:	454f      	cmp	r7, r9
 80016cc:	d8d7      	bhi.n	800167e <__gedf2+0x4a>
 80016ce:	d00e      	beq.n	80016ee <__gedf2+0xba>
 80016d0:	2000      	movs	r0, #0
 80016d2:	454f      	cmp	r7, r9
 80016d4:	d2d7      	bcs.n	8001686 <__gedf2+0x52>
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d0e2      	beq.n	80016a0 <__gedf2+0x6c>
 80016da:	0008      	movs	r0, r1
 80016dc:	e7d3      	b.n	8001686 <__gedf2+0x52>
 80016de:	4243      	negs	r3, r0
 80016e0:	4158      	adcs	r0, r3
 80016e2:	0040      	lsls	r0, r0, #1
 80016e4:	3801      	subs	r0, #1
 80016e6:	e7ce      	b.n	8001686 <__gedf2+0x52>
 80016e8:	2002      	movs	r0, #2
 80016ea:	4240      	negs	r0, r0
 80016ec:	e7cb      	b.n	8001686 <__gedf2+0x52>
 80016ee:	45c4      	cmp	ip, r8
 80016f0:	d8c5      	bhi.n	800167e <__gedf2+0x4a>
 80016f2:	2000      	movs	r0, #0
 80016f4:	45c4      	cmp	ip, r8
 80016f6:	d2c6      	bcs.n	8001686 <__gedf2+0x52>
 80016f8:	e7ed      	b.n	80016d6 <__gedf2+0xa2>
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	000007ff 	.word	0x000007ff

08001700 <__ledf2>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	4647      	mov	r7, r8
 8001704:	46ce      	mov	lr, r9
 8001706:	0004      	movs	r4, r0
 8001708:	0018      	movs	r0, r3
 800170a:	0016      	movs	r6, r2
 800170c:	031b      	lsls	r3, r3, #12
 800170e:	0b1b      	lsrs	r3, r3, #12
 8001710:	4d2c      	ldr	r5, [pc, #176]	; (80017c4 <__ledf2+0xc4>)
 8001712:	004a      	lsls	r2, r1, #1
 8001714:	4699      	mov	r9, r3
 8001716:	b580      	push	{r7, lr}
 8001718:	0043      	lsls	r3, r0, #1
 800171a:	030f      	lsls	r7, r1, #12
 800171c:	46a4      	mov	ip, r4
 800171e:	46b0      	mov	r8, r6
 8001720:	0b3f      	lsrs	r7, r7, #12
 8001722:	0d52      	lsrs	r2, r2, #21
 8001724:	0fc9      	lsrs	r1, r1, #31
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	0fc0      	lsrs	r0, r0, #31
 800172a:	42aa      	cmp	r2, r5
 800172c:	d00d      	beq.n	800174a <__ledf2+0x4a>
 800172e:	42ab      	cmp	r3, r5
 8001730:	d010      	beq.n	8001754 <__ledf2+0x54>
 8001732:	2a00      	cmp	r2, #0
 8001734:	d127      	bne.n	8001786 <__ledf2+0x86>
 8001736:	433c      	orrs	r4, r7
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <__ledf2+0x60>
 800173c:	464d      	mov	r5, r9
 800173e:	432e      	orrs	r6, r5
 8001740:	d10e      	bne.n	8001760 <__ledf2+0x60>
 8001742:	2000      	movs	r0, #0
 8001744:	2c00      	cmp	r4, #0
 8001746:	d015      	beq.n	8001774 <__ledf2+0x74>
 8001748:	e00e      	b.n	8001768 <__ledf2+0x68>
 800174a:	003d      	movs	r5, r7
 800174c:	4325      	orrs	r5, r4
 800174e:	d110      	bne.n	8001772 <__ledf2+0x72>
 8001750:	4293      	cmp	r3, r2
 8001752:	d118      	bne.n	8001786 <__ledf2+0x86>
 8001754:	464d      	mov	r5, r9
 8001756:	432e      	orrs	r6, r5
 8001758:	d10b      	bne.n	8001772 <__ledf2+0x72>
 800175a:	2a00      	cmp	r2, #0
 800175c:	d102      	bne.n	8001764 <__ledf2+0x64>
 800175e:	433c      	orrs	r4, r7
 8001760:	2c00      	cmp	r4, #0
 8001762:	d00b      	beq.n	800177c <__ledf2+0x7c>
 8001764:	4281      	cmp	r1, r0
 8001766:	d014      	beq.n	8001792 <__ledf2+0x92>
 8001768:	2002      	movs	r0, #2
 800176a:	3901      	subs	r1, #1
 800176c:	4008      	ands	r0, r1
 800176e:	3801      	subs	r0, #1
 8001770:	e000      	b.n	8001774 <__ledf2+0x74>
 8001772:	2002      	movs	r0, #2
 8001774:	bcc0      	pop	{r6, r7}
 8001776:	46b9      	mov	r9, r7
 8001778:	46b0      	mov	r8, r6
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	2800      	cmp	r0, #0
 800177e:	d1f9      	bne.n	8001774 <__ledf2+0x74>
 8001780:	2001      	movs	r0, #1
 8001782:	4240      	negs	r0, r0
 8001784:	e7f6      	b.n	8001774 <__ledf2+0x74>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ec      	bne.n	8001764 <__ledf2+0x64>
 800178a:	464c      	mov	r4, r9
 800178c:	4326      	orrs	r6, r4
 800178e:	d1e9      	bne.n	8001764 <__ledf2+0x64>
 8001790:	e7ea      	b.n	8001768 <__ledf2+0x68>
 8001792:	429a      	cmp	r2, r3
 8001794:	dd04      	ble.n	80017a0 <__ledf2+0xa0>
 8001796:	4243      	negs	r3, r0
 8001798:	4158      	adcs	r0, r3
 800179a:	0040      	lsls	r0, r0, #1
 800179c:	3801      	subs	r0, #1
 800179e:	e7e9      	b.n	8001774 <__ledf2+0x74>
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbeb      	blt.n	800177c <__ledf2+0x7c>
 80017a4:	454f      	cmp	r7, r9
 80017a6:	d8df      	bhi.n	8001768 <__ledf2+0x68>
 80017a8:	d006      	beq.n	80017b8 <__ledf2+0xb8>
 80017aa:	2000      	movs	r0, #0
 80017ac:	454f      	cmp	r7, r9
 80017ae:	d2e1      	bcs.n	8001774 <__ledf2+0x74>
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d0e5      	beq.n	8001780 <__ledf2+0x80>
 80017b4:	0008      	movs	r0, r1
 80017b6:	e7dd      	b.n	8001774 <__ledf2+0x74>
 80017b8:	45c4      	cmp	ip, r8
 80017ba:	d8d5      	bhi.n	8001768 <__ledf2+0x68>
 80017bc:	2000      	movs	r0, #0
 80017be:	45c4      	cmp	ip, r8
 80017c0:	d2d8      	bcs.n	8001774 <__ledf2+0x74>
 80017c2:	e7f5      	b.n	80017b0 <__ledf2+0xb0>
 80017c4:	000007ff 	.word	0x000007ff

080017c8 <__aeabi_dmul>:
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	4657      	mov	r7, sl
 80017cc:	464e      	mov	r6, r9
 80017ce:	4645      	mov	r5, r8
 80017d0:	46de      	mov	lr, fp
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	4698      	mov	r8, r3
 80017d6:	030c      	lsls	r4, r1, #12
 80017d8:	004b      	lsls	r3, r1, #1
 80017da:	0006      	movs	r6, r0
 80017dc:	4692      	mov	sl, r2
 80017de:	b087      	sub	sp, #28
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	0d5b      	lsrs	r3, r3, #21
 80017e4:	0fcf      	lsrs	r7, r1, #31
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d100      	bne.n	80017ec <__aeabi_dmul+0x24>
 80017ea:	e15c      	b.n	8001aa6 <__aeabi_dmul+0x2de>
 80017ec:	4ad9      	ldr	r2, [pc, #868]	; (8001b54 <__aeabi_dmul+0x38c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dmul+0x2c>
 80017f2:	e175      	b.n	8001ae0 <__aeabi_dmul+0x318>
 80017f4:	0f42      	lsrs	r2, r0, #29
 80017f6:	00e4      	lsls	r4, r4, #3
 80017f8:	4314      	orrs	r4, r2
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0412      	lsls	r2, r2, #16
 80017fe:	4314      	orrs	r4, r2
 8001800:	4ad5      	ldr	r2, [pc, #852]	; (8001b58 <__aeabi_dmul+0x390>)
 8001802:	00c5      	lsls	r5, r0, #3
 8001804:	4694      	mov	ip, r2
 8001806:	4463      	add	r3, ip
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	4699      	mov	r9, r3
 800180e:	469b      	mov	fp, r3
 8001810:	4643      	mov	r3, r8
 8001812:	4642      	mov	r2, r8
 8001814:	031e      	lsls	r6, r3, #12
 8001816:	0fd2      	lsrs	r2, r2, #31
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4650      	mov	r0, sl
 800181c:	4690      	mov	r8, r2
 800181e:	0b36      	lsrs	r6, r6, #12
 8001820:	0d5b      	lsrs	r3, r3, #21
 8001822:	d100      	bne.n	8001826 <__aeabi_dmul+0x5e>
 8001824:	e120      	b.n	8001a68 <__aeabi_dmul+0x2a0>
 8001826:	4acb      	ldr	r2, [pc, #812]	; (8001b54 <__aeabi_dmul+0x38c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d100      	bne.n	800182e <__aeabi_dmul+0x66>
 800182c:	e162      	b.n	8001af4 <__aeabi_dmul+0x32c>
 800182e:	49ca      	ldr	r1, [pc, #808]	; (8001b58 <__aeabi_dmul+0x390>)
 8001830:	0f42      	lsrs	r2, r0, #29
 8001832:	468c      	mov	ip, r1
 8001834:	9900      	ldr	r1, [sp, #0]
 8001836:	4463      	add	r3, ip
 8001838:	00f6      	lsls	r6, r6, #3
 800183a:	468c      	mov	ip, r1
 800183c:	4316      	orrs	r6, r2
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	449c      	add	ip, r3
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	4663      	mov	r3, ip
 8001846:	4316      	orrs	r6, r2
 8001848:	00c2      	lsls	r2, r0, #3
 800184a:	2000      	movs	r0, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	9900      	ldr	r1, [sp, #0]
 8001850:	4643      	mov	r3, r8
 8001852:	3101      	adds	r1, #1
 8001854:	468c      	mov	ip, r1
 8001856:	4649      	mov	r1, r9
 8001858:	407b      	eors	r3, r7
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	290f      	cmp	r1, #15
 800185e:	d826      	bhi.n	80018ae <__aeabi_dmul+0xe6>
 8001860:	4bbe      	ldr	r3, [pc, #760]	; (8001b5c <__aeabi_dmul+0x394>)
 8001862:	0089      	lsls	r1, r1, #2
 8001864:	5859      	ldr	r1, [r3, r1]
 8001866:	468f      	mov	pc, r1
 8001868:	4643      	mov	r3, r8
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	0034      	movs	r4, r6
 800186e:	0015      	movs	r5, r2
 8001870:	4683      	mov	fp, r0
 8001872:	465b      	mov	r3, fp
 8001874:	2b02      	cmp	r3, #2
 8001876:	d016      	beq.n	80018a6 <__aeabi_dmul+0xde>
 8001878:	2b03      	cmp	r3, #3
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0xb6>
 800187c:	e203      	b.n	8001c86 <__aeabi_dmul+0x4be>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d000      	beq.n	8001884 <__aeabi_dmul+0xbc>
 8001882:	e0cd      	b.n	8001a20 <__aeabi_dmul+0x258>
 8001884:	2200      	movs	r2, #0
 8001886:	2400      	movs	r4, #0
 8001888:	2500      	movs	r5, #0
 800188a:	9b01      	ldr	r3, [sp, #4]
 800188c:	0512      	lsls	r2, r2, #20
 800188e:	4322      	orrs	r2, r4
 8001890:	07db      	lsls	r3, r3, #31
 8001892:	431a      	orrs	r2, r3
 8001894:	0028      	movs	r0, r5
 8001896:	0011      	movs	r1, r2
 8001898:	b007      	add	sp, #28
 800189a:	bcf0      	pop	{r4, r5, r6, r7}
 800189c:	46bb      	mov	fp, r7
 800189e:	46b2      	mov	sl, r6
 80018a0:	46a9      	mov	r9, r5
 80018a2:	46a0      	mov	r8, r4
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	2400      	movs	r4, #0
 80018a8:	2500      	movs	r5, #0
 80018aa:	4aaa      	ldr	r2, [pc, #680]	; (8001b54 <__aeabi_dmul+0x38c>)
 80018ac:	e7ed      	b.n	800188a <__aeabi_dmul+0xc2>
 80018ae:	0c28      	lsrs	r0, r5, #16
 80018b0:	042d      	lsls	r5, r5, #16
 80018b2:	0c2d      	lsrs	r5, r5, #16
 80018b4:	002b      	movs	r3, r5
 80018b6:	0c11      	lsrs	r1, r2, #16
 80018b8:	0412      	lsls	r2, r2, #16
 80018ba:	0c12      	lsrs	r2, r2, #16
 80018bc:	4353      	muls	r3, r2
 80018be:	4698      	mov	r8, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	002f      	movs	r7, r5
 80018c4:	4343      	muls	r3, r0
 80018c6:	4699      	mov	r9, r3
 80018c8:	434f      	muls	r7, r1
 80018ca:	444f      	add	r7, r9
 80018cc:	46bb      	mov	fp, r7
 80018ce:	4647      	mov	r7, r8
 80018d0:	000b      	movs	r3, r1
 80018d2:	0c3f      	lsrs	r7, r7, #16
 80018d4:	46ba      	mov	sl, r7
 80018d6:	4343      	muls	r3, r0
 80018d8:	44da      	add	sl, fp
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	45d1      	cmp	r9, sl
 80018de:	d904      	bls.n	80018ea <__aeabi_dmul+0x122>
 80018e0:	2780      	movs	r7, #128	; 0x80
 80018e2:	027f      	lsls	r7, r7, #9
 80018e4:	46b9      	mov	r9, r7
 80018e6:	444b      	add	r3, r9
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	4653      	mov	r3, sl
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	469b      	mov	fp, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	041f      	lsls	r7, r3, #16
 80018f4:	4643      	mov	r3, r8
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	4698      	mov	r8, r3
 80018fc:	003b      	movs	r3, r7
 80018fe:	4443      	add	r3, r8
 8001900:	9304      	str	r3, [sp, #16]
 8001902:	0c33      	lsrs	r3, r6, #16
 8001904:	0436      	lsls	r6, r6, #16
 8001906:	0c36      	lsrs	r6, r6, #16
 8001908:	4698      	mov	r8, r3
 800190a:	0033      	movs	r3, r6
 800190c:	4343      	muls	r3, r0
 800190e:	4699      	mov	r9, r3
 8001910:	4643      	mov	r3, r8
 8001912:	4343      	muls	r3, r0
 8001914:	002f      	movs	r7, r5
 8001916:	469a      	mov	sl, r3
 8001918:	4643      	mov	r3, r8
 800191a:	4377      	muls	r7, r6
 800191c:	435d      	muls	r5, r3
 800191e:	0c38      	lsrs	r0, r7, #16
 8001920:	444d      	add	r5, r9
 8001922:	1945      	adds	r5, r0, r5
 8001924:	45a9      	cmp	r9, r5
 8001926:	d903      	bls.n	8001930 <__aeabi_dmul+0x168>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	4699      	mov	r9, r3
 800192e:	44ca      	add	sl, r9
 8001930:	043f      	lsls	r7, r7, #16
 8001932:	0c28      	lsrs	r0, r5, #16
 8001934:	0c3f      	lsrs	r7, r7, #16
 8001936:	042d      	lsls	r5, r5, #16
 8001938:	19ed      	adds	r5, r5, r7
 800193a:	0c27      	lsrs	r7, r4, #16
 800193c:	0424      	lsls	r4, r4, #16
 800193e:	0c24      	lsrs	r4, r4, #16
 8001940:	0003      	movs	r3, r0
 8001942:	0020      	movs	r0, r4
 8001944:	4350      	muls	r0, r2
 8001946:	437a      	muls	r2, r7
 8001948:	4691      	mov	r9, r2
 800194a:	003a      	movs	r2, r7
 800194c:	4453      	add	r3, sl
 800194e:	9305      	str	r3, [sp, #20]
 8001950:	0c03      	lsrs	r3, r0, #16
 8001952:	469a      	mov	sl, r3
 8001954:	434a      	muls	r2, r1
 8001956:	4361      	muls	r1, r4
 8001958:	4449      	add	r1, r9
 800195a:	4451      	add	r1, sl
 800195c:	44ab      	add	fp, r5
 800195e:	4589      	cmp	r9, r1
 8001960:	d903      	bls.n	800196a <__aeabi_dmul+0x1a2>
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	4699      	mov	r9, r3
 8001968:	444a      	add	r2, r9
 800196a:	0400      	lsls	r0, r0, #16
 800196c:	0c0b      	lsrs	r3, r1, #16
 800196e:	0c00      	lsrs	r0, r0, #16
 8001970:	0409      	lsls	r1, r1, #16
 8001972:	1809      	adds	r1, r1, r0
 8001974:	0020      	movs	r0, r4
 8001976:	4699      	mov	r9, r3
 8001978:	4643      	mov	r3, r8
 800197a:	4370      	muls	r0, r6
 800197c:	435c      	muls	r4, r3
 800197e:	437e      	muls	r6, r7
 8001980:	435f      	muls	r7, r3
 8001982:	0c03      	lsrs	r3, r0, #16
 8001984:	4698      	mov	r8, r3
 8001986:	19a4      	adds	r4, r4, r6
 8001988:	4444      	add	r4, r8
 800198a:	444a      	add	r2, r9
 800198c:	9703      	str	r7, [sp, #12]
 800198e:	42a6      	cmp	r6, r4
 8001990:	d904      	bls.n	800199c <__aeabi_dmul+0x1d4>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	4698      	mov	r8, r3
 8001998:	4447      	add	r7, r8
 800199a:	9703      	str	r7, [sp, #12]
 800199c:	0423      	lsls	r3, r4, #16
 800199e:	9e02      	ldr	r6, [sp, #8]
 80019a0:	469a      	mov	sl, r3
 80019a2:	9b05      	ldr	r3, [sp, #20]
 80019a4:	445e      	add	r6, fp
 80019a6:	4698      	mov	r8, r3
 80019a8:	42ae      	cmp	r6, r5
 80019aa:	41ad      	sbcs	r5, r5
 80019ac:	1876      	adds	r6, r6, r1
 80019ae:	428e      	cmp	r6, r1
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	0400      	lsls	r0, r0, #16
 80019b4:	0c00      	lsrs	r0, r0, #16
 80019b6:	4450      	add	r0, sl
 80019b8:	4440      	add	r0, r8
 80019ba:	426d      	negs	r5, r5
 80019bc:	1947      	adds	r7, r0, r5
 80019be:	46b8      	mov	r8, r7
 80019c0:	4693      	mov	fp, r2
 80019c2:	4249      	negs	r1, r1
 80019c4:	4689      	mov	r9, r1
 80019c6:	44c3      	add	fp, r8
 80019c8:	44d9      	add	r9, fp
 80019ca:	4298      	cmp	r0, r3
 80019cc:	4180      	sbcs	r0, r0
 80019ce:	45a8      	cmp	r8, r5
 80019d0:	41ad      	sbcs	r5, r5
 80019d2:	4593      	cmp	fp, r2
 80019d4:	4192      	sbcs	r2, r2
 80019d6:	4589      	cmp	r9, r1
 80019d8:	4189      	sbcs	r1, r1
 80019da:	426d      	negs	r5, r5
 80019dc:	4240      	negs	r0, r0
 80019de:	4328      	orrs	r0, r5
 80019e0:	0c24      	lsrs	r4, r4, #16
 80019e2:	4252      	negs	r2, r2
 80019e4:	4249      	negs	r1, r1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	9b03      	ldr	r3, [sp, #12]
 80019ea:	1900      	adds	r0, r0, r4
 80019ec:	1880      	adds	r0, r0, r2
 80019ee:	18c7      	adds	r7, r0, r3
 80019f0:	464b      	mov	r3, r9
 80019f2:	0ddc      	lsrs	r4, r3, #23
 80019f4:	9b04      	ldr	r3, [sp, #16]
 80019f6:	0275      	lsls	r5, r6, #9
 80019f8:	431d      	orrs	r5, r3
 80019fa:	1e6a      	subs	r2, r5, #1
 80019fc:	4195      	sbcs	r5, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	0df6      	lsrs	r6, r6, #23
 8001a02:	027f      	lsls	r7, r7, #9
 8001a04:	4335      	orrs	r5, r6
 8001a06:	025a      	lsls	r2, r3, #9
 8001a08:	433c      	orrs	r4, r7
 8001a0a:	4315      	orrs	r5, r2
 8001a0c:	01fb      	lsls	r3, r7, #7
 8001a0e:	d400      	bmi.n	8001a12 <__aeabi_dmul+0x24a>
 8001a10:	e11c      	b.n	8001c4c <__aeabi_dmul+0x484>
 8001a12:	2101      	movs	r1, #1
 8001a14:	086a      	lsrs	r2, r5, #1
 8001a16:	400d      	ands	r5, r1
 8001a18:	4315      	orrs	r5, r2
 8001a1a:	07e2      	lsls	r2, r4, #31
 8001a1c:	4315      	orrs	r5, r2
 8001a1e:	0864      	lsrs	r4, r4, #1
 8001a20:	494f      	ldr	r1, [pc, #316]	; (8001b60 <__aeabi_dmul+0x398>)
 8001a22:	4461      	add	r1, ip
 8001a24:	2900      	cmp	r1, #0
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_dmul+0x262>
 8001a28:	e0b0      	b.n	8001b8c <__aeabi_dmul+0x3c4>
 8001a2a:	076b      	lsls	r3, r5, #29
 8001a2c:	d009      	beq.n	8001a42 <__aeabi_dmul+0x27a>
 8001a2e:	220f      	movs	r2, #15
 8001a30:	402a      	ands	r2, r5
 8001a32:	2a04      	cmp	r2, #4
 8001a34:	d005      	beq.n	8001a42 <__aeabi_dmul+0x27a>
 8001a36:	1d2a      	adds	r2, r5, #4
 8001a38:	42aa      	cmp	r2, r5
 8001a3a:	41ad      	sbcs	r5, r5
 8001a3c:	426d      	negs	r5, r5
 8001a3e:	1964      	adds	r4, r4, r5
 8001a40:	0015      	movs	r5, r2
 8001a42:	01e3      	lsls	r3, r4, #7
 8001a44:	d504      	bpl.n	8001a50 <__aeabi_dmul+0x288>
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <__aeabi_dmul+0x39c>)
 8001a4a:	00c9      	lsls	r1, r1, #3
 8001a4c:	4014      	ands	r4, r2
 8001a4e:	4461      	add	r1, ip
 8001a50:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <__aeabi_dmul+0x3a0>)
 8001a52:	4291      	cmp	r1, r2
 8001a54:	dd00      	ble.n	8001a58 <__aeabi_dmul+0x290>
 8001a56:	e726      	b.n	80018a6 <__aeabi_dmul+0xde>
 8001a58:	0762      	lsls	r2, r4, #29
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	0264      	lsls	r4, r4, #9
 8001a5e:	0549      	lsls	r1, r1, #21
 8001a60:	4315      	orrs	r5, r2
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	0d4a      	lsrs	r2, r1, #21
 8001a66:	e710      	b.n	800188a <__aeabi_dmul+0xc2>
 8001a68:	4652      	mov	r2, sl
 8001a6a:	4332      	orrs	r2, r6
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dmul+0x2a8>
 8001a6e:	e07f      	b.n	8001b70 <__aeabi_dmul+0x3a8>
 8001a70:	2e00      	cmp	r6, #0
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dmul+0x2ae>
 8001a74:	e0dc      	b.n	8001c30 <__aeabi_dmul+0x468>
 8001a76:	0030      	movs	r0, r6
 8001a78:	f000 fd96 	bl	80025a8 <__clzsi2>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	3a0b      	subs	r2, #11
 8001a80:	231d      	movs	r3, #29
 8001a82:	0001      	movs	r1, r0
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	4652      	mov	r2, sl
 8001a88:	3908      	subs	r1, #8
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	408e      	lsls	r6, r1
 8001a8e:	4316      	orrs	r6, r2
 8001a90:	4652      	mov	r2, sl
 8001a92:	408a      	lsls	r2, r1
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	4935      	ldr	r1, [pc, #212]	; (8001b6c <__aeabi_dmul+0x3a4>)
 8001a98:	1a18      	subs	r0, r3, r0
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	468c      	mov	ip, r1
 8001a9e:	4463      	add	r3, ip
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	e6d3      	b.n	800184e <__aeabi_dmul+0x86>
 8001aa6:	0025      	movs	r5, r4
 8001aa8:	4305      	orrs	r5, r0
 8001aaa:	d04a      	beq.n	8001b42 <__aeabi_dmul+0x37a>
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dmul+0x2ea>
 8001ab0:	e0b0      	b.n	8001c14 <__aeabi_dmul+0x44c>
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	f000 fd78 	bl	80025a8 <__clzsi2>
 8001ab8:	0001      	movs	r1, r0
 8001aba:	0002      	movs	r2, r0
 8001abc:	390b      	subs	r1, #11
 8001abe:	231d      	movs	r3, #29
 8001ac0:	0010      	movs	r0, r2
 8001ac2:	1a5b      	subs	r3, r3, r1
 8001ac4:	0031      	movs	r1, r6
 8001ac6:	0035      	movs	r5, r6
 8001ac8:	3808      	subs	r0, #8
 8001aca:	4084      	lsls	r4, r0
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	4085      	lsls	r5, r0
 8001ad0:	430c      	orrs	r4, r1
 8001ad2:	4826      	ldr	r0, [pc, #152]	; (8001b6c <__aeabi_dmul+0x3a4>)
 8001ad4:	1a83      	subs	r3, r0, r2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4699      	mov	r9, r3
 8001adc:	469b      	mov	fp, r3
 8001ade:	e697      	b.n	8001810 <__aeabi_dmul+0x48>
 8001ae0:	0005      	movs	r5, r0
 8001ae2:	4325      	orrs	r5, r4
 8001ae4:	d126      	bne.n	8001b34 <__aeabi_dmul+0x36c>
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2302      	movs	r3, #2
 8001aec:	2400      	movs	r4, #0
 8001aee:	4691      	mov	r9, r2
 8001af0:	469b      	mov	fp, r3
 8001af2:	e68d      	b.n	8001810 <__aeabi_dmul+0x48>
 8001af4:	4652      	mov	r2, sl
 8001af6:	9b00      	ldr	r3, [sp, #0]
 8001af8:	4332      	orrs	r2, r6
 8001afa:	d110      	bne.n	8001b1e <__aeabi_dmul+0x356>
 8001afc:	4915      	ldr	r1, [pc, #84]	; (8001b54 <__aeabi_dmul+0x38c>)
 8001afe:	2600      	movs	r6, #0
 8001b00:	468c      	mov	ip, r1
 8001b02:	4463      	add	r3, ip
 8001b04:	4649      	mov	r1, r9
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	4689      	mov	r9, r1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	e69d      	b.n	800184e <__aeabi_dmul+0x86>
 8001b12:	465b      	mov	r3, fp
 8001b14:	9701      	str	r7, [sp, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d000      	beq.n	8001b1c <__aeabi_dmul+0x354>
 8001b1a:	e6ad      	b.n	8001878 <__aeabi_dmul+0xb0>
 8001b1c:	e6c3      	b.n	80018a6 <__aeabi_dmul+0xde>
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <__aeabi_dmul+0x38c>)
 8001b20:	2003      	movs	r0, #3
 8001b22:	4694      	mov	ip, r2
 8001b24:	4463      	add	r3, ip
 8001b26:	464a      	mov	r2, r9
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	4691      	mov	r9, r2
 8001b30:	4652      	mov	r2, sl
 8001b32:	e68c      	b.n	800184e <__aeabi_dmul+0x86>
 8001b34:	220c      	movs	r2, #12
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2303      	movs	r3, #3
 8001b3a:	0005      	movs	r5, r0
 8001b3c:	4691      	mov	r9, r2
 8001b3e:	469b      	mov	fp, r3
 8001b40:	e666      	b.n	8001810 <__aeabi_dmul+0x48>
 8001b42:	2304      	movs	r3, #4
 8001b44:	4699      	mov	r9, r3
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	469b      	mov	fp, r3
 8001b50:	e65e      	b.n	8001810 <__aeabi_dmul+0x48>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	fffffc01 	.word	0xfffffc01
 8001b5c:	0800e0c4 	.word	0x0800e0c4
 8001b60:	000003ff 	.word	0x000003ff
 8001b64:	feffffff 	.word	0xfeffffff
 8001b68:	000007fe 	.word	0x000007fe
 8001b6c:	fffffc0d 	.word	0xfffffc0d
 8001b70:	4649      	mov	r1, r9
 8001b72:	2301      	movs	r3, #1
 8001b74:	4319      	orrs	r1, r3
 8001b76:	4689      	mov	r9, r1
 8001b78:	2600      	movs	r6, #0
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e667      	b.n	800184e <__aeabi_dmul+0x86>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2480      	movs	r4, #128	; 0x80
 8001b82:	2500      	movs	r5, #0
 8001b84:	4a43      	ldr	r2, [pc, #268]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	0324      	lsls	r4, r4, #12
 8001b8a:	e67e      	b.n	800188a <__aeabi_dmul+0xc2>
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	1a40      	subs	r0, r0, r1
 8001b90:	2838      	cmp	r0, #56	; 0x38
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dmul+0x3ce>
 8001b94:	e676      	b.n	8001884 <__aeabi_dmul+0xbc>
 8001b96:	281f      	cmp	r0, #31
 8001b98:	dd5b      	ble.n	8001c52 <__aeabi_dmul+0x48a>
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	0023      	movs	r3, r4
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	1a51      	subs	r1, r2, r1
 8001ba2:	40cb      	lsrs	r3, r1
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	2820      	cmp	r0, #32
 8001ba8:	d003      	beq.n	8001bb2 <__aeabi_dmul+0x3ea>
 8001baa:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <__aeabi_dmul+0x4d0>)
 8001bac:	4462      	add	r2, ip
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4325      	orrs	r5, r4
 8001bb2:	1e6a      	subs	r2, r5, #1
 8001bb4:	4195      	sbcs	r5, r2
 8001bb6:	002a      	movs	r2, r5
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	2107      	movs	r1, #7
 8001bbc:	000d      	movs	r5, r1
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	4015      	ands	r5, r2
 8001bc2:	4211      	tst	r1, r2
 8001bc4:	d05b      	beq.n	8001c7e <__aeabi_dmul+0x4b6>
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4011      	ands	r1, r2
 8001bcc:	2904      	cmp	r1, #4
 8001bce:	d053      	beq.n	8001c78 <__aeabi_dmul+0x4b0>
 8001bd0:	1d11      	adds	r1, r2, #4
 8001bd2:	4291      	cmp	r1, r2
 8001bd4:	4192      	sbcs	r2, r2
 8001bd6:	4252      	negs	r2, r2
 8001bd8:	18a4      	adds	r4, r4, r2
 8001bda:	000a      	movs	r2, r1
 8001bdc:	0223      	lsls	r3, r4, #8
 8001bde:	d54b      	bpl.n	8001c78 <__aeabi_dmul+0x4b0>
 8001be0:	2201      	movs	r2, #1
 8001be2:	2400      	movs	r4, #0
 8001be4:	2500      	movs	r5, #0
 8001be6:	e650      	b.n	800188a <__aeabi_dmul+0xc2>
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	421c      	tst	r4, r3
 8001bee:	d009      	beq.n	8001c04 <__aeabi_dmul+0x43c>
 8001bf0:	421e      	tst	r6, r3
 8001bf2:	d107      	bne.n	8001c04 <__aeabi_dmul+0x43c>
 8001bf4:	4333      	orrs	r3, r6
 8001bf6:	031c      	lsls	r4, r3, #12
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	0015      	movs	r5, r2
 8001bfc:	0b24      	lsrs	r4, r4, #12
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	e642      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4314      	orrs	r4, r2
 8001c0a:	0324      	lsls	r4, r4, #12
 8001c0c:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001c0e:	0b24      	lsrs	r4, r4, #12
 8001c10:	9701      	str	r7, [sp, #4]
 8001c12:	e63a      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c14:	f000 fcc8 	bl	80025a8 <__clzsi2>
 8001c18:	0001      	movs	r1, r0
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	3115      	adds	r1, #21
 8001c1e:	3220      	adds	r2, #32
 8001c20:	291c      	cmp	r1, #28
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dmul+0x45e>
 8001c24:	e74b      	b.n	8001abe <__aeabi_dmul+0x2f6>
 8001c26:	0034      	movs	r4, r6
 8001c28:	3808      	subs	r0, #8
 8001c2a:	2500      	movs	r5, #0
 8001c2c:	4084      	lsls	r4, r0
 8001c2e:	e750      	b.n	8001ad2 <__aeabi_dmul+0x30a>
 8001c30:	f000 fcba 	bl	80025a8 <__clzsi2>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	3215      	adds	r2, #21
 8001c3a:	3020      	adds	r0, #32
 8001c3c:	2a1c      	cmp	r2, #28
 8001c3e:	dc00      	bgt.n	8001c42 <__aeabi_dmul+0x47a>
 8001c40:	e71e      	b.n	8001a80 <__aeabi_dmul+0x2b8>
 8001c42:	4656      	mov	r6, sl
 8001c44:	3b08      	subs	r3, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	409e      	lsls	r6, r3
 8001c4a:	e723      	b.n	8001a94 <__aeabi_dmul+0x2cc>
 8001c4c:	9b00      	ldr	r3, [sp, #0]
 8001c4e:	469c      	mov	ip, r3
 8001c50:	e6e6      	b.n	8001a20 <__aeabi_dmul+0x258>
 8001c52:	4912      	ldr	r1, [pc, #72]	; (8001c9c <__aeabi_dmul+0x4d4>)
 8001c54:	0022      	movs	r2, r4
 8001c56:	4461      	add	r1, ip
 8001c58:	002e      	movs	r6, r5
 8001c5a:	408d      	lsls	r5, r1
 8001c5c:	408a      	lsls	r2, r1
 8001c5e:	40c6      	lsrs	r6, r0
 8001c60:	1e69      	subs	r1, r5, #1
 8001c62:	418d      	sbcs	r5, r1
 8001c64:	4332      	orrs	r2, r6
 8001c66:	432a      	orrs	r2, r5
 8001c68:	40c4      	lsrs	r4, r0
 8001c6a:	0753      	lsls	r3, r2, #29
 8001c6c:	d0b6      	beq.n	8001bdc <__aeabi_dmul+0x414>
 8001c6e:	210f      	movs	r1, #15
 8001c70:	4011      	ands	r1, r2
 8001c72:	2904      	cmp	r1, #4
 8001c74:	d1ac      	bne.n	8001bd0 <__aeabi_dmul+0x408>
 8001c76:	e7b1      	b.n	8001bdc <__aeabi_dmul+0x414>
 8001c78:	0765      	lsls	r5, r4, #29
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	08d2      	lsrs	r2, r2, #3
 8001c80:	4315      	orrs	r5, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	e601      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	0312      	lsls	r2, r2, #12
 8001c8a:	4314      	orrs	r4, r2
 8001c8c:	0324      	lsls	r4, r4, #12
 8001c8e:	4a01      	ldr	r2, [pc, #4]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001c90:	0b24      	lsrs	r4, r4, #12
 8001c92:	e5fa      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c94:	000007ff 	.word	0x000007ff
 8001c98:	0000043e 	.word	0x0000043e
 8001c9c:	0000041e 	.word	0x0000041e

08001ca0 <__aeabi_dsub>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	4657      	mov	r7, sl
 8001ca4:	464e      	mov	r6, r9
 8001ca6:	4645      	mov	r5, r8
 8001ca8:	46de      	mov	lr, fp
 8001caa:	b5e0      	push	{r5, r6, r7, lr}
 8001cac:	001e      	movs	r6, r3
 8001cae:	0017      	movs	r7, r2
 8001cb0:	004a      	lsls	r2, r1, #1
 8001cb2:	030b      	lsls	r3, r1, #12
 8001cb4:	0d52      	lsrs	r2, r2, #21
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	4690      	mov	r8, r2
 8001cba:	0f42      	lsrs	r2, r0, #29
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	0fcd      	lsrs	r5, r1, #31
 8001cc0:	4ccd      	ldr	r4, [pc, #820]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001cc2:	0331      	lsls	r1, r6, #12
 8001cc4:	00c3      	lsls	r3, r0, #3
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	0070      	lsls	r0, r6, #1
 8001cca:	0f7a      	lsrs	r2, r7, #29
 8001ccc:	0a49      	lsrs	r1, r1, #9
 8001cce:	00ff      	lsls	r7, r7, #3
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	46b9      	mov	r9, r7
 8001cd4:	0d40      	lsrs	r0, r0, #21
 8001cd6:	0ff6      	lsrs	r6, r6, #31
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	42a0      	cmp	r0, r4
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x40>
 8001cde:	e0b1      	b.n	8001e44 <__aeabi_dsub+0x1a4>
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4056      	eors	r6, r2
 8001ce4:	46b3      	mov	fp, r6
 8001ce6:	42b5      	cmp	r5, r6
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x4c>
 8001cea:	e088      	b.n	8001dfe <__aeabi_dsub+0x15e>
 8001cec:	4642      	mov	r2, r8
 8001cee:	1a12      	subs	r2, r2, r0
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	dc00      	bgt.n	8001cf6 <__aeabi_dsub+0x56>
 8001cf4:	e0ae      	b.n	8001e54 <__aeabi_dsub+0x1b4>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x5c>
 8001cfa:	e0c1      	b.n	8001e80 <__aeabi_dsub+0x1e0>
 8001cfc:	48be      	ldr	r0, [pc, #760]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001cfe:	4580      	cmp	r8, r0
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dsub+0x64>
 8001d02:	e151      	b.n	8001fa8 <__aeabi_dsub+0x308>
 8001d04:	2080      	movs	r0, #128	; 0x80
 8001d06:	0400      	lsls	r0, r0, #16
 8001d08:	4301      	orrs	r1, r0
 8001d0a:	2a38      	cmp	r2, #56	; 0x38
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x70>
 8001d0e:	e17b      	b.n	8002008 <__aeabi_dsub+0x368>
 8001d10:	2a1f      	cmp	r2, #31
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dsub+0x76>
 8001d14:	e1ee      	b.n	80020f4 <__aeabi_dsub+0x454>
 8001d16:	2020      	movs	r0, #32
 8001d18:	003e      	movs	r6, r7
 8001d1a:	1a80      	subs	r0, r0, r2
 8001d1c:	000c      	movs	r4, r1
 8001d1e:	40d6      	lsrs	r6, r2
 8001d20:	40d1      	lsrs	r1, r2
 8001d22:	4087      	lsls	r7, r0
 8001d24:	4662      	mov	r2, ip
 8001d26:	4084      	lsls	r4, r0
 8001d28:	1a52      	subs	r2, r2, r1
 8001d2a:	1e78      	subs	r0, r7, #1
 8001d2c:	4187      	sbcs	r7, r0
 8001d2e:	4694      	mov	ip, r2
 8001d30:	4334      	orrs	r4, r6
 8001d32:	4327      	orrs	r7, r4
 8001d34:	1bdc      	subs	r4, r3, r7
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	419b      	sbcs	r3, r3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4699      	mov	r9, r3
 8001d42:	464b      	mov	r3, r9
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	d400      	bmi.n	8001d4a <__aeabi_dsub+0xaa>
 8001d48:	e118      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	0258      	lsls	r0, r3, #9
 8001d4e:	0a43      	lsrs	r3, r0, #9
 8001d50:	4699      	mov	r9, r3
 8001d52:	464b      	mov	r3, r9
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0xba>
 8001d58:	e137      	b.n	8001fca <__aeabi_dsub+0x32a>
 8001d5a:	4648      	mov	r0, r9
 8001d5c:	f000 fc24 	bl	80025a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3908      	subs	r1, #8
 8001d64:	2320      	movs	r3, #32
 8001d66:	0022      	movs	r2, r4
 8001d68:	4648      	mov	r0, r9
 8001d6a:	1a5b      	subs	r3, r3, r1
 8001d6c:	40da      	lsrs	r2, r3
 8001d6e:	4088      	lsls	r0, r1
 8001d70:	408c      	lsls	r4, r1
 8001d72:	4643      	mov	r3, r8
 8001d74:	4310      	orrs	r0, r2
 8001d76:	4588      	cmp	r8, r1
 8001d78:	dd00      	ble.n	8001d7c <__aeabi_dsub+0xdc>
 8001d7a:	e136      	b.n	8001fea <__aeabi_dsub+0x34a>
 8001d7c:	1ac9      	subs	r1, r1, r3
 8001d7e:	1c4b      	adds	r3, r1, #1
 8001d80:	2b1f      	cmp	r3, #31
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0xe6>
 8001d84:	e0ea      	b.n	8001f5c <__aeabi_dsub+0x2bc>
 8001d86:	2220      	movs	r2, #32
 8001d88:	0026      	movs	r6, r4
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	0001      	movs	r1, r0
 8001d8e:	4094      	lsls	r4, r2
 8001d90:	40de      	lsrs	r6, r3
 8001d92:	40d8      	lsrs	r0, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	4091      	lsls	r1, r2
 8001d98:	1e62      	subs	r2, r4, #1
 8001d9a:	4194      	sbcs	r4, r2
 8001d9c:	4681      	mov	r9, r0
 8001d9e:	4698      	mov	r8, r3
 8001da0:	4331      	orrs	r1, r6
 8001da2:	430c      	orrs	r4, r1
 8001da4:	0763      	lsls	r3, r4, #29
 8001da6:	d009      	beq.n	8001dbc <__aeabi_dsub+0x11c>
 8001da8:	230f      	movs	r3, #15
 8001daa:	4023      	ands	r3, r4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d005      	beq.n	8001dbc <__aeabi_dsub+0x11c>
 8001db0:	1d23      	adds	r3, r4, #4
 8001db2:	42a3      	cmp	r3, r4
 8001db4:	41a4      	sbcs	r4, r4
 8001db6:	4264      	negs	r4, r4
 8001db8:	44a1      	add	r9, r4
 8001dba:	001c      	movs	r4, r3
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	d400      	bmi.n	8001dc4 <__aeabi_dsub+0x124>
 8001dc2:	e0de      	b.n	8001f82 <__aeabi_dsub+0x2e2>
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001dc8:	3101      	adds	r1, #1
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x130>
 8001dce:	e0e7      	b.n	8001fa0 <__aeabi_dsub+0x300>
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	488a      	ldr	r0, [pc, #552]	; (8001ffc <__aeabi_dsub+0x35c>)
 8001dd4:	08e4      	lsrs	r4, r4, #3
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	0018      	movs	r0, r3
 8001dda:	0549      	lsls	r1, r1, #21
 8001ddc:	075b      	lsls	r3, r3, #29
 8001dde:	0240      	lsls	r0, r0, #9
 8001de0:	4323      	orrs	r3, r4
 8001de2:	0d4a      	lsrs	r2, r1, #21
 8001de4:	0b04      	lsrs	r4, r0, #12
 8001de6:	0512      	lsls	r2, r2, #20
 8001de8:	07ed      	lsls	r5, r5, #31
 8001dea:	4322      	orrs	r2, r4
 8001dec:	432a      	orrs	r2, r5
 8001dee:	0018      	movs	r0, r3
 8001df0:	0011      	movs	r1, r2
 8001df2:	bcf0      	pop	{r4, r5, r6, r7}
 8001df4:	46bb      	mov	fp, r7
 8001df6:	46b2      	mov	sl, r6
 8001df8:	46a9      	mov	r9, r5
 8001dfa:	46a0      	mov	r8, r4
 8001dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfe:	4642      	mov	r2, r8
 8001e00:	1a12      	subs	r2, r2, r0
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	dd52      	ble.n	8001eac <__aeabi_dsub+0x20c>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x16c>
 8001e0a:	e09c      	b.n	8001f46 <__aeabi_dsub+0x2a6>
 8001e0c:	45a0      	cmp	r8, r4
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x172>
 8001e10:	e0ca      	b.n	8001fa8 <__aeabi_dsub+0x308>
 8001e12:	2080      	movs	r0, #128	; 0x80
 8001e14:	0400      	lsls	r0, r0, #16
 8001e16:	4301      	orrs	r1, r0
 8001e18:	2a38      	cmp	r2, #56	; 0x38
 8001e1a:	dd00      	ble.n	8001e1e <__aeabi_dsub+0x17e>
 8001e1c:	e149      	b.n	80020b2 <__aeabi_dsub+0x412>
 8001e1e:	2a1f      	cmp	r2, #31
 8001e20:	dc00      	bgt.n	8001e24 <__aeabi_dsub+0x184>
 8001e22:	e197      	b.n	8002154 <__aeabi_dsub+0x4b4>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x19a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	1e62      	subs	r2, r4, #1
 8001e3e:	4194      	sbcs	r4, r2
 8001e40:	4334      	orrs	r4, r6
 8001e42:	e13a      	b.n	80020ba <__aeabi_dsub+0x41a>
 8001e44:	000a      	movs	r2, r1
 8001e46:	433a      	orrs	r2, r7
 8001e48:	d028      	beq.n	8001e9c <__aeabi_dsub+0x1fc>
 8001e4a:	46b3      	mov	fp, r6
 8001e4c:	42b5      	cmp	r5, r6
 8001e4e:	d02b      	beq.n	8001ea8 <__aeabi_dsub+0x208>
 8001e50:	4a6b      	ldr	r2, [pc, #428]	; (8002000 <__aeabi_dsub+0x360>)
 8001e52:	4442      	add	r2, r8
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d05d      	beq.n	8001f14 <__aeabi_dsub+0x274>
 8001e58:	4642      	mov	r2, r8
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	1a82      	subs	r2, r0, r2
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x1c4>
 8001e62:	e0f5      	b.n	8002050 <__aeabi_dsub+0x3b0>
 8001e64:	4665      	mov	r5, ip
 8001e66:	431d      	orrs	r5, r3
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x1cc>
 8001e6a:	e19c      	b.n	80021a6 <__aeabi_dsub+0x506>
 8001e6c:	1e55      	subs	r5, r2, #1
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x1d4>
 8001e72:	e1fb      	b.n	800226c <__aeabi_dsub+0x5cc>
 8001e74:	4c60      	ldr	r4, [pc, #384]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x1dc>
 8001e7a:	e1bd      	b.n	80021f8 <__aeabi_dsub+0x558>
 8001e7c:	002a      	movs	r2, r5
 8001e7e:	e0f0      	b.n	8002062 <__aeabi_dsub+0x3c2>
 8001e80:	0008      	movs	r0, r1
 8001e82:	4338      	orrs	r0, r7
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x1e8>
 8001e86:	e0c3      	b.n	8002010 <__aeabi_dsub+0x370>
 8001e88:	1e50      	subs	r0, r2, #1
 8001e8a:	2a01      	cmp	r2, #1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x1f0>
 8001e8e:	e1a8      	b.n	80021e2 <__aeabi_dsub+0x542>
 8001e90:	4c59      	ldr	r4, [pc, #356]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x1f8>
 8001e96:	e087      	b.n	8001fa8 <__aeabi_dsub+0x308>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	e736      	b.n	8001d0a <__aeabi_dsub+0x6a>
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4056      	eors	r6, r2
 8001ea0:	46b3      	mov	fp, r6
 8001ea2:	42b5      	cmp	r5, r6
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dsub+0x208>
 8001ea6:	e721      	b.n	8001cec <__aeabi_dsub+0x4c>
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <__aeabi_dsub+0x360>)
 8001eaa:	4442      	add	r2, r8
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x212>
 8001eb0:	e0b5      	b.n	800201e <__aeabi_dsub+0x37e>
 8001eb2:	4642      	mov	r2, r8
 8001eb4:	4644      	mov	r4, r8
 8001eb6:	1a82      	subs	r2, r0, r2
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x21e>
 8001ebc:	e138      	b.n	8002130 <__aeabi_dsub+0x490>
 8001ebe:	4e4e      	ldr	r6, [pc, #312]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001ec0:	42b0      	cmp	r0, r6
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x226>
 8001ec4:	e1de      	b.n	8002284 <__aeabi_dsub+0x5e4>
 8001ec6:	2680      	movs	r6, #128	; 0x80
 8001ec8:	4664      	mov	r4, ip
 8001eca:	0436      	lsls	r6, r6, #16
 8001ecc:	4334      	orrs	r4, r6
 8001ece:	46a4      	mov	ip, r4
 8001ed0:	2a38      	cmp	r2, #56	; 0x38
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x236>
 8001ed4:	e196      	b.n	8002204 <__aeabi_dsub+0x564>
 8001ed6:	2a1f      	cmp	r2, #31
 8001ed8:	dd00      	ble.n	8001edc <__aeabi_dsub+0x23c>
 8001eda:	e224      	b.n	8002326 <__aeabi_dsub+0x686>
 8001edc:	2620      	movs	r6, #32
 8001ede:	1ab4      	subs	r4, r6, r2
 8001ee0:	46a2      	mov	sl, r4
 8001ee2:	4664      	mov	r4, ip
 8001ee4:	4656      	mov	r6, sl
 8001ee6:	40b4      	lsls	r4, r6
 8001ee8:	46a1      	mov	r9, r4
 8001eea:	001c      	movs	r4, r3
 8001eec:	464e      	mov	r6, r9
 8001eee:	40d4      	lsrs	r4, r2
 8001ef0:	4326      	orrs	r6, r4
 8001ef2:	0034      	movs	r4, r6
 8001ef4:	4656      	mov	r6, sl
 8001ef6:	40b3      	lsls	r3, r6
 8001ef8:	1e5e      	subs	r6, r3, #1
 8001efa:	41b3      	sbcs	r3, r6
 8001efc:	431c      	orrs	r4, r3
 8001efe:	4663      	mov	r3, ip
 8001f00:	40d3      	lsrs	r3, r2
 8001f02:	18c9      	adds	r1, r1, r3
 8001f04:	19e4      	adds	r4, r4, r7
 8001f06:	42bc      	cmp	r4, r7
 8001f08:	41bf      	sbcs	r7, r7
 8001f0a:	427f      	negs	r7, r7
 8001f0c:	46b9      	mov	r9, r7
 8001f0e:	4680      	mov	r8, r0
 8001f10:	4489      	add	r9, r1
 8001f12:	e0d8      	b.n	80020c6 <__aeabi_dsub+0x426>
 8001f14:	4640      	mov	r0, r8
 8001f16:	4c3b      	ldr	r4, [pc, #236]	; (8002004 <__aeabi_dsub+0x364>)
 8001f18:	3001      	adds	r0, #1
 8001f1a:	4220      	tst	r0, r4
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x280>
 8001f1e:	e0b4      	b.n	800208a <__aeabi_dsub+0x3ea>
 8001f20:	4640      	mov	r0, r8
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x288>
 8001f26:	e144      	b.n	80021b2 <__aeabi_dsub+0x512>
 8001f28:	4660      	mov	r0, ip
 8001f2a:	4318      	orrs	r0, r3
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x290>
 8001f2e:	e190      	b.n	8002252 <__aeabi_dsub+0x5b2>
 8001f30:	0008      	movs	r0, r1
 8001f32:	4338      	orrs	r0, r7
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x298>
 8001f36:	e1aa      	b.n	800228e <__aeabi_dsub+0x5ee>
 8001f38:	4661      	mov	r1, ip
 8001f3a:	08db      	lsrs	r3, r3, #3
 8001f3c:	0749      	lsls	r1, r1, #29
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	4661      	mov	r1, ip
 8001f42:	08cc      	lsrs	r4, r1, #3
 8001f44:	e027      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8001f46:	0008      	movs	r0, r1
 8001f48:	4338      	orrs	r0, r7
 8001f4a:	d061      	beq.n	8002010 <__aeabi_dsub+0x370>
 8001f4c:	1e50      	subs	r0, r2, #1
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x2b4>
 8001f52:	e139      	b.n	80021c8 <__aeabi_dsub+0x528>
 8001f54:	42a2      	cmp	r2, r4
 8001f56:	d027      	beq.n	8001fa8 <__aeabi_dsub+0x308>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	e75d      	b.n	8001e18 <__aeabi_dsub+0x178>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	391f      	subs	r1, #31
 8001f60:	40ca      	lsrs	r2, r1
 8001f62:	0011      	movs	r1, r2
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d003      	beq.n	8001f70 <__aeabi_dsub+0x2d0>
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4098      	lsls	r0, r3
 8001f6e:	4304      	orrs	r4, r0
 8001f70:	1e63      	subs	r3, r4, #1
 8001f72:	419c      	sbcs	r4, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	4699      	mov	r9, r3
 8001f78:	4698      	mov	r8, r3
 8001f7a:	430c      	orrs	r4, r1
 8001f7c:	0763      	lsls	r3, r4, #29
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x2e2>
 8001f80:	e712      	b.n	8001da8 <__aeabi_dsub+0x108>
 8001f82:	464b      	mov	r3, r9
 8001f84:	464a      	mov	r2, r9
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	075b      	lsls	r3, r3, #29
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	08d4      	lsrs	r4, r2, #3
 8001f8e:	4642      	mov	r2, r8
 8001f90:	4919      	ldr	r1, [pc, #100]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001f92:	428a      	cmp	r2, r1
 8001f94:	d00e      	beq.n	8001fb4 <__aeabi_dsub+0x314>
 8001f96:	0324      	lsls	r4, r4, #12
 8001f98:	0552      	lsls	r2, r2, #21
 8001f9a:	0b24      	lsrs	r4, r4, #12
 8001f9c:	0d52      	lsrs	r2, r2, #21
 8001f9e:	e722      	b.n	8001de6 <__aeabi_dsub+0x146>
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e71e      	b.n	8001de6 <__aeabi_dsub+0x146>
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	4662      	mov	r2, ip
 8001fac:	0752      	lsls	r2, r2, #29
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	4662      	mov	r2, ip
 8001fb2:	08d4      	lsrs	r4, r2, #3
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	4322      	orrs	r2, r4
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x31c>
 8001fba:	e1fc      	b.n	80023b6 <__aeabi_dsub+0x716>
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0312      	lsls	r2, r2, #12
 8001fc0:	4314      	orrs	r4, r2
 8001fc2:	0324      	lsls	r4, r4, #12
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001fc6:	0b24      	lsrs	r4, r4, #12
 8001fc8:	e70d      	b.n	8001de6 <__aeabi_dsub+0x146>
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f000 faec 	bl	80025a8 <__clzsi2>
 8001fd0:	0001      	movs	r1, r0
 8001fd2:	3118      	adds	r1, #24
 8001fd4:	291f      	cmp	r1, #31
 8001fd6:	dc00      	bgt.n	8001fda <__aeabi_dsub+0x33a>
 8001fd8:	e6c4      	b.n	8001d64 <__aeabi_dsub+0xc4>
 8001fda:	3808      	subs	r0, #8
 8001fdc:	4084      	lsls	r4, r0
 8001fde:	4643      	mov	r3, r8
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	2400      	movs	r4, #0
 8001fe4:	4588      	cmp	r8, r1
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x34a>
 8001fe8:	e6c8      	b.n	8001d7c <__aeabi_dsub+0xdc>
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__aeabi_dsub+0x35c>)
 8001fec:	1a5b      	subs	r3, r3, r1
 8001fee:	4010      	ands	r0, r2
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	4681      	mov	r9, r0
 8001ff4:	e6d6      	b.n	8001da4 <__aeabi_dsub+0x104>
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	000007ff 	.word	0x000007ff
 8001ffc:	ff7fffff 	.word	0xff7fffff
 8002000:	fffff801 	.word	0xfffff801
 8002004:	000007fe 	.word	0x000007fe
 8002008:	430f      	orrs	r7, r1
 800200a:	1e7a      	subs	r2, r7, #1
 800200c:	4197      	sbcs	r7, r2
 800200e:	e691      	b.n	8001d34 <__aeabi_dsub+0x94>
 8002010:	4661      	mov	r1, ip
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	0749      	lsls	r1, r1, #29
 8002016:	430b      	orrs	r3, r1
 8002018:	4661      	mov	r1, ip
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e7b8      	b.n	8001f90 <__aeabi_dsub+0x2f0>
 800201e:	4640      	mov	r0, r8
 8002020:	4cd3      	ldr	r4, [pc, #844]	; (8002370 <__aeabi_dsub+0x6d0>)
 8002022:	3001      	adds	r0, #1
 8002024:	4220      	tst	r0, r4
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x38a>
 8002028:	e0a2      	b.n	8002170 <__aeabi_dsub+0x4d0>
 800202a:	4640      	mov	r0, r8
 800202c:	2800      	cmp	r0, #0
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x392>
 8002030:	e101      	b.n	8002236 <__aeabi_dsub+0x596>
 8002032:	4660      	mov	r0, ip
 8002034:	4318      	orrs	r0, r3
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x39a>
 8002038:	e15e      	b.n	80022f8 <__aeabi_dsub+0x658>
 800203a:	0008      	movs	r0, r1
 800203c:	4338      	orrs	r0, r7
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x3a2>
 8002040:	e15f      	b.n	8002302 <__aeabi_dsub+0x662>
 8002042:	4661      	mov	r1, ip
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	0749      	lsls	r1, r1, #29
 8002048:	430b      	orrs	r3, r1
 800204a:	4661      	mov	r1, ip
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e7a2      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8002050:	4dc8      	ldr	r5, [pc, #800]	; (8002374 <__aeabi_dsub+0x6d4>)
 8002052:	42a8      	cmp	r0, r5
 8002054:	d100      	bne.n	8002058 <__aeabi_dsub+0x3b8>
 8002056:	e0cf      	b.n	80021f8 <__aeabi_dsub+0x558>
 8002058:	2580      	movs	r5, #128	; 0x80
 800205a:	4664      	mov	r4, ip
 800205c:	042d      	lsls	r5, r5, #16
 800205e:	432c      	orrs	r4, r5
 8002060:	46a4      	mov	ip, r4
 8002062:	2a38      	cmp	r2, #56	; 0x38
 8002064:	dc56      	bgt.n	8002114 <__aeabi_dsub+0x474>
 8002066:	2a1f      	cmp	r2, #31
 8002068:	dd00      	ble.n	800206c <__aeabi_dsub+0x3cc>
 800206a:	e0d1      	b.n	8002210 <__aeabi_dsub+0x570>
 800206c:	2520      	movs	r5, #32
 800206e:	001e      	movs	r6, r3
 8002070:	1aad      	subs	r5, r5, r2
 8002072:	4664      	mov	r4, ip
 8002074:	40ab      	lsls	r3, r5
 8002076:	40ac      	lsls	r4, r5
 8002078:	40d6      	lsrs	r6, r2
 800207a:	1e5d      	subs	r5, r3, #1
 800207c:	41ab      	sbcs	r3, r5
 800207e:	4334      	orrs	r4, r6
 8002080:	4323      	orrs	r3, r4
 8002082:	4664      	mov	r4, ip
 8002084:	40d4      	lsrs	r4, r2
 8002086:	1b09      	subs	r1, r1, r4
 8002088:	e049      	b.n	800211e <__aeabi_dsub+0x47e>
 800208a:	4660      	mov	r0, ip
 800208c:	1bdc      	subs	r4, r3, r7
 800208e:	1a46      	subs	r6, r0, r1
 8002090:	42a3      	cmp	r3, r4
 8002092:	4180      	sbcs	r0, r0
 8002094:	4240      	negs	r0, r0
 8002096:	4681      	mov	r9, r0
 8002098:	0030      	movs	r0, r6
 800209a:	464e      	mov	r6, r9
 800209c:	1b80      	subs	r0, r0, r6
 800209e:	4681      	mov	r9, r0
 80020a0:	0200      	lsls	r0, r0, #8
 80020a2:	d476      	bmi.n	8002192 <__aeabi_dsub+0x4f2>
 80020a4:	464b      	mov	r3, r9
 80020a6:	4323      	orrs	r3, r4
 80020a8:	d000      	beq.n	80020ac <__aeabi_dsub+0x40c>
 80020aa:	e652      	b.n	8001d52 <__aeabi_dsub+0xb2>
 80020ac:	2400      	movs	r4, #0
 80020ae:	2500      	movs	r5, #0
 80020b0:	e771      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 80020b2:	4339      	orrs	r1, r7
 80020b4:	000c      	movs	r4, r1
 80020b6:	1e62      	subs	r2, r4, #1
 80020b8:	4194      	sbcs	r4, r2
 80020ba:	18e4      	adds	r4, r4, r3
 80020bc:	429c      	cmp	r4, r3
 80020be:	419b      	sbcs	r3, r3
 80020c0:	425b      	negs	r3, r3
 80020c2:	4463      	add	r3, ip
 80020c4:	4699      	mov	r9, r3
 80020c6:	464b      	mov	r3, r9
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	d400      	bmi.n	80020ce <__aeabi_dsub+0x42e>
 80020cc:	e756      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 80020ce:	2301      	movs	r3, #1
 80020d0:	469c      	mov	ip, r3
 80020d2:	4ba8      	ldr	r3, [pc, #672]	; (8002374 <__aeabi_dsub+0x6d4>)
 80020d4:	44e0      	add	r8, ip
 80020d6:	4598      	cmp	r8, r3
 80020d8:	d038      	beq.n	800214c <__aeabi_dsub+0x4ac>
 80020da:	464b      	mov	r3, r9
 80020dc:	48a6      	ldr	r0, [pc, #664]	; (8002378 <__aeabi_dsub+0x6d8>)
 80020de:	2201      	movs	r2, #1
 80020e0:	4003      	ands	r3, r0
 80020e2:	0018      	movs	r0, r3
 80020e4:	0863      	lsrs	r3, r4, #1
 80020e6:	4014      	ands	r4, r2
 80020e8:	431c      	orrs	r4, r3
 80020ea:	07c3      	lsls	r3, r0, #31
 80020ec:	431c      	orrs	r4, r3
 80020ee:	0843      	lsrs	r3, r0, #1
 80020f0:	4699      	mov	r9, r3
 80020f2:	e657      	b.n	8001da4 <__aeabi_dsub+0x104>
 80020f4:	0010      	movs	r0, r2
 80020f6:	000e      	movs	r6, r1
 80020f8:	3820      	subs	r0, #32
 80020fa:	40c6      	lsrs	r6, r0
 80020fc:	2a20      	cmp	r2, #32
 80020fe:	d004      	beq.n	800210a <__aeabi_dsub+0x46a>
 8002100:	2040      	movs	r0, #64	; 0x40
 8002102:	1a82      	subs	r2, r0, r2
 8002104:	4091      	lsls	r1, r2
 8002106:	430f      	orrs	r7, r1
 8002108:	46b9      	mov	r9, r7
 800210a:	464f      	mov	r7, r9
 800210c:	1e7a      	subs	r2, r7, #1
 800210e:	4197      	sbcs	r7, r2
 8002110:	4337      	orrs	r7, r6
 8002112:	e60f      	b.n	8001d34 <__aeabi_dsub+0x94>
 8002114:	4662      	mov	r2, ip
 8002116:	431a      	orrs	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	4193      	sbcs	r3, r2
 800211e:	1afc      	subs	r4, r7, r3
 8002120:	42a7      	cmp	r7, r4
 8002122:	41bf      	sbcs	r7, r7
 8002124:	427f      	negs	r7, r7
 8002126:	1bcb      	subs	r3, r1, r7
 8002128:	4699      	mov	r9, r3
 800212a:	465d      	mov	r5, fp
 800212c:	4680      	mov	r8, r0
 800212e:	e608      	b.n	8001d42 <__aeabi_dsub+0xa2>
 8002130:	4666      	mov	r6, ip
 8002132:	431e      	orrs	r6, r3
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x498>
 8002136:	e0be      	b.n	80022b6 <__aeabi_dsub+0x616>
 8002138:	1e56      	subs	r6, r2, #1
 800213a:	2a01      	cmp	r2, #1
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x4a0>
 800213e:	e109      	b.n	8002354 <__aeabi_dsub+0x6b4>
 8002140:	4c8c      	ldr	r4, [pc, #560]	; (8002374 <__aeabi_dsub+0x6d4>)
 8002142:	42a2      	cmp	r2, r4
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x4a8>
 8002146:	e119      	b.n	800237c <__aeabi_dsub+0x6dc>
 8002148:	0032      	movs	r2, r6
 800214a:	e6c1      	b.n	8001ed0 <__aeabi_dsub+0x230>
 800214c:	4642      	mov	r2, r8
 800214e:	2400      	movs	r4, #0
 8002150:	2300      	movs	r3, #0
 8002152:	e648      	b.n	8001de6 <__aeabi_dsub+0x146>
 8002154:	2020      	movs	r0, #32
 8002156:	000c      	movs	r4, r1
 8002158:	1a80      	subs	r0, r0, r2
 800215a:	003e      	movs	r6, r7
 800215c:	4087      	lsls	r7, r0
 800215e:	4084      	lsls	r4, r0
 8002160:	40d6      	lsrs	r6, r2
 8002162:	1e78      	subs	r0, r7, #1
 8002164:	4187      	sbcs	r7, r0
 8002166:	40d1      	lsrs	r1, r2
 8002168:	4334      	orrs	r4, r6
 800216a:	433c      	orrs	r4, r7
 800216c:	448c      	add	ip, r1
 800216e:	e7a4      	b.n	80020ba <__aeabi_dsub+0x41a>
 8002170:	4a80      	ldr	r2, [pc, #512]	; (8002374 <__aeabi_dsub+0x6d4>)
 8002172:	4290      	cmp	r0, r2
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x4d8>
 8002176:	e0e9      	b.n	800234c <__aeabi_dsub+0x6ac>
 8002178:	19df      	adds	r7, r3, r7
 800217a:	429f      	cmp	r7, r3
 800217c:	419b      	sbcs	r3, r3
 800217e:	4461      	add	r1, ip
 8002180:	425b      	negs	r3, r3
 8002182:	18c9      	adds	r1, r1, r3
 8002184:	07cc      	lsls	r4, r1, #31
 8002186:	087f      	lsrs	r7, r7, #1
 8002188:	084b      	lsrs	r3, r1, #1
 800218a:	4699      	mov	r9, r3
 800218c:	4680      	mov	r8, r0
 800218e:	433c      	orrs	r4, r7
 8002190:	e6f4      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8002192:	1afc      	subs	r4, r7, r3
 8002194:	42a7      	cmp	r7, r4
 8002196:	41bf      	sbcs	r7, r7
 8002198:	4663      	mov	r3, ip
 800219a:	427f      	negs	r7, r7
 800219c:	1ac9      	subs	r1, r1, r3
 800219e:	1bcb      	subs	r3, r1, r7
 80021a0:	4699      	mov	r9, r3
 80021a2:	465d      	mov	r5, fp
 80021a4:	e5d5      	b.n	8001d52 <__aeabi_dsub+0xb2>
 80021a6:	08ff      	lsrs	r7, r7, #3
 80021a8:	074b      	lsls	r3, r1, #29
 80021aa:	465d      	mov	r5, fp
 80021ac:	433b      	orrs	r3, r7
 80021ae:	08cc      	lsrs	r4, r1, #3
 80021b0:	e6ee      	b.n	8001f90 <__aeabi_dsub+0x2f0>
 80021b2:	4662      	mov	r2, ip
 80021b4:	431a      	orrs	r2, r3
 80021b6:	d000      	beq.n	80021ba <__aeabi_dsub+0x51a>
 80021b8:	e082      	b.n	80022c0 <__aeabi_dsub+0x620>
 80021ba:	000b      	movs	r3, r1
 80021bc:	433b      	orrs	r3, r7
 80021be:	d11b      	bne.n	80021f8 <__aeabi_dsub+0x558>
 80021c0:	2480      	movs	r4, #128	; 0x80
 80021c2:	2500      	movs	r5, #0
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	e6f9      	b.n	8001fbc <__aeabi_dsub+0x31c>
 80021c8:	19dc      	adds	r4, r3, r7
 80021ca:	429c      	cmp	r4, r3
 80021cc:	419b      	sbcs	r3, r3
 80021ce:	4461      	add	r1, ip
 80021d0:	4689      	mov	r9, r1
 80021d2:	425b      	negs	r3, r3
 80021d4:	4499      	add	r9, r3
 80021d6:	464b      	mov	r3, r9
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	d444      	bmi.n	8002266 <__aeabi_dsub+0x5c6>
 80021dc:	2301      	movs	r3, #1
 80021de:	4698      	mov	r8, r3
 80021e0:	e6cc      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 80021e2:	1bdc      	subs	r4, r3, r7
 80021e4:	4662      	mov	r2, ip
 80021e6:	42a3      	cmp	r3, r4
 80021e8:	419b      	sbcs	r3, r3
 80021ea:	1a51      	subs	r1, r2, r1
 80021ec:	425b      	negs	r3, r3
 80021ee:	1acb      	subs	r3, r1, r3
 80021f0:	4699      	mov	r9, r3
 80021f2:	2301      	movs	r3, #1
 80021f4:	4698      	mov	r8, r3
 80021f6:	e5a4      	b.n	8001d42 <__aeabi_dsub+0xa2>
 80021f8:	08ff      	lsrs	r7, r7, #3
 80021fa:	074b      	lsls	r3, r1, #29
 80021fc:	465d      	mov	r5, fp
 80021fe:	433b      	orrs	r3, r7
 8002200:	08cc      	lsrs	r4, r1, #3
 8002202:	e6d7      	b.n	8001fb4 <__aeabi_dsub+0x314>
 8002204:	4662      	mov	r2, ip
 8002206:	431a      	orrs	r2, r3
 8002208:	0014      	movs	r4, r2
 800220a:	1e63      	subs	r3, r4, #1
 800220c:	419c      	sbcs	r4, r3
 800220e:	e679      	b.n	8001f04 <__aeabi_dsub+0x264>
 8002210:	0015      	movs	r5, r2
 8002212:	4664      	mov	r4, ip
 8002214:	3d20      	subs	r5, #32
 8002216:	40ec      	lsrs	r4, r5
 8002218:	46a0      	mov	r8, r4
 800221a:	2a20      	cmp	r2, #32
 800221c:	d005      	beq.n	800222a <__aeabi_dsub+0x58a>
 800221e:	2540      	movs	r5, #64	; 0x40
 8002220:	4664      	mov	r4, ip
 8002222:	1aaa      	subs	r2, r5, r2
 8002224:	4094      	lsls	r4, r2
 8002226:	4323      	orrs	r3, r4
 8002228:	469a      	mov	sl, r3
 800222a:	4654      	mov	r4, sl
 800222c:	1e63      	subs	r3, r4, #1
 800222e:	419c      	sbcs	r4, r3
 8002230:	4643      	mov	r3, r8
 8002232:	4323      	orrs	r3, r4
 8002234:	e773      	b.n	800211e <__aeabi_dsub+0x47e>
 8002236:	4662      	mov	r2, ip
 8002238:	431a      	orrs	r2, r3
 800223a:	d023      	beq.n	8002284 <__aeabi_dsub+0x5e4>
 800223c:	000a      	movs	r2, r1
 800223e:	433a      	orrs	r2, r7
 8002240:	d000      	beq.n	8002244 <__aeabi_dsub+0x5a4>
 8002242:	e0a0      	b.n	8002386 <__aeabi_dsub+0x6e6>
 8002244:	4662      	mov	r2, ip
 8002246:	08db      	lsrs	r3, r3, #3
 8002248:	0752      	lsls	r2, r2, #29
 800224a:	4313      	orrs	r3, r2
 800224c:	4662      	mov	r2, ip
 800224e:	08d4      	lsrs	r4, r2, #3
 8002250:	e6b0      	b.n	8001fb4 <__aeabi_dsub+0x314>
 8002252:	000b      	movs	r3, r1
 8002254:	433b      	orrs	r3, r7
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x5ba>
 8002258:	e728      	b.n	80020ac <__aeabi_dsub+0x40c>
 800225a:	08ff      	lsrs	r7, r7, #3
 800225c:	074b      	lsls	r3, r1, #29
 800225e:	465d      	mov	r5, fp
 8002260:	433b      	orrs	r3, r7
 8002262:	08cc      	lsrs	r4, r1, #3
 8002264:	e697      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8002266:	2302      	movs	r3, #2
 8002268:	4698      	mov	r8, r3
 800226a:	e736      	b.n	80020da <__aeabi_dsub+0x43a>
 800226c:	1afc      	subs	r4, r7, r3
 800226e:	42a7      	cmp	r7, r4
 8002270:	41bf      	sbcs	r7, r7
 8002272:	4663      	mov	r3, ip
 8002274:	427f      	negs	r7, r7
 8002276:	1ac9      	subs	r1, r1, r3
 8002278:	1bcb      	subs	r3, r1, r7
 800227a:	4699      	mov	r9, r3
 800227c:	2301      	movs	r3, #1
 800227e:	465d      	mov	r5, fp
 8002280:	4698      	mov	r8, r3
 8002282:	e55e      	b.n	8001d42 <__aeabi_dsub+0xa2>
 8002284:	074b      	lsls	r3, r1, #29
 8002286:	08ff      	lsrs	r7, r7, #3
 8002288:	433b      	orrs	r3, r7
 800228a:	08cc      	lsrs	r4, r1, #3
 800228c:	e692      	b.n	8001fb4 <__aeabi_dsub+0x314>
 800228e:	1bdc      	subs	r4, r3, r7
 8002290:	4660      	mov	r0, ip
 8002292:	42a3      	cmp	r3, r4
 8002294:	41b6      	sbcs	r6, r6
 8002296:	1a40      	subs	r0, r0, r1
 8002298:	4276      	negs	r6, r6
 800229a:	1b80      	subs	r0, r0, r6
 800229c:	4681      	mov	r9, r0
 800229e:	0200      	lsls	r0, r0, #8
 80022a0:	d560      	bpl.n	8002364 <__aeabi_dsub+0x6c4>
 80022a2:	1afc      	subs	r4, r7, r3
 80022a4:	42a7      	cmp	r7, r4
 80022a6:	41bf      	sbcs	r7, r7
 80022a8:	4663      	mov	r3, ip
 80022aa:	427f      	negs	r7, r7
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	1bcb      	subs	r3, r1, r7
 80022b0:	4699      	mov	r9, r3
 80022b2:	465d      	mov	r5, fp
 80022b4:	e576      	b.n	8001da4 <__aeabi_dsub+0x104>
 80022b6:	08ff      	lsrs	r7, r7, #3
 80022b8:	074b      	lsls	r3, r1, #29
 80022ba:	433b      	orrs	r3, r7
 80022bc:	08cc      	lsrs	r4, r1, #3
 80022be:	e667      	b.n	8001f90 <__aeabi_dsub+0x2f0>
 80022c0:	000a      	movs	r2, r1
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	433a      	orrs	r2, r7
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x62a>
 80022c8:	e66f      	b.n	8001faa <__aeabi_dsub+0x30a>
 80022ca:	4662      	mov	r2, ip
 80022cc:	0752      	lsls	r2, r2, #29
 80022ce:	4313      	orrs	r3, r2
 80022d0:	4662      	mov	r2, ip
 80022d2:	08d4      	lsrs	r4, r2, #3
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	0312      	lsls	r2, r2, #12
 80022d8:	4214      	tst	r4, r2
 80022da:	d007      	beq.n	80022ec <__aeabi_dsub+0x64c>
 80022dc:	08c8      	lsrs	r0, r1, #3
 80022de:	4210      	tst	r0, r2
 80022e0:	d104      	bne.n	80022ec <__aeabi_dsub+0x64c>
 80022e2:	465d      	mov	r5, fp
 80022e4:	0004      	movs	r4, r0
 80022e6:	08fb      	lsrs	r3, r7, #3
 80022e8:	0749      	lsls	r1, r1, #29
 80022ea:	430b      	orrs	r3, r1
 80022ec:	0f5a      	lsrs	r2, r3, #29
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	0752      	lsls	r2, r2, #29
 80022f4:	4313      	orrs	r3, r2
 80022f6:	e65d      	b.n	8001fb4 <__aeabi_dsub+0x314>
 80022f8:	074b      	lsls	r3, r1, #29
 80022fa:	08ff      	lsrs	r7, r7, #3
 80022fc:	433b      	orrs	r3, r7
 80022fe:	08cc      	lsrs	r4, r1, #3
 8002300:	e649      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8002302:	19dc      	adds	r4, r3, r7
 8002304:	429c      	cmp	r4, r3
 8002306:	419b      	sbcs	r3, r3
 8002308:	4461      	add	r1, ip
 800230a:	4689      	mov	r9, r1
 800230c:	425b      	negs	r3, r3
 800230e:	4499      	add	r9, r3
 8002310:	464b      	mov	r3, r9
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	d400      	bmi.n	8002318 <__aeabi_dsub+0x678>
 8002316:	e631      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8002318:	464a      	mov	r2, r9
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <__aeabi_dsub+0x6d8>)
 800231c:	401a      	ands	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	4691      	mov	r9, r2
 8002322:	4698      	mov	r8, r3
 8002324:	e62a      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8002326:	0016      	movs	r6, r2
 8002328:	4664      	mov	r4, ip
 800232a:	3e20      	subs	r6, #32
 800232c:	40f4      	lsrs	r4, r6
 800232e:	46a0      	mov	r8, r4
 8002330:	2a20      	cmp	r2, #32
 8002332:	d005      	beq.n	8002340 <__aeabi_dsub+0x6a0>
 8002334:	2640      	movs	r6, #64	; 0x40
 8002336:	4664      	mov	r4, ip
 8002338:	1ab2      	subs	r2, r6, r2
 800233a:	4094      	lsls	r4, r2
 800233c:	4323      	orrs	r3, r4
 800233e:	469a      	mov	sl, r3
 8002340:	4654      	mov	r4, sl
 8002342:	1e63      	subs	r3, r4, #1
 8002344:	419c      	sbcs	r4, r3
 8002346:	4643      	mov	r3, r8
 8002348:	431c      	orrs	r4, r3
 800234a:	e5db      	b.n	8001f04 <__aeabi_dsub+0x264>
 800234c:	0002      	movs	r2, r0
 800234e:	2400      	movs	r4, #0
 8002350:	2300      	movs	r3, #0
 8002352:	e548      	b.n	8001de6 <__aeabi_dsub+0x146>
 8002354:	19dc      	adds	r4, r3, r7
 8002356:	42bc      	cmp	r4, r7
 8002358:	41bf      	sbcs	r7, r7
 800235a:	4461      	add	r1, ip
 800235c:	4689      	mov	r9, r1
 800235e:	427f      	negs	r7, r7
 8002360:	44b9      	add	r9, r7
 8002362:	e738      	b.n	80021d6 <__aeabi_dsub+0x536>
 8002364:	464b      	mov	r3, r9
 8002366:	4323      	orrs	r3, r4
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x6cc>
 800236a:	e69f      	b.n	80020ac <__aeabi_dsub+0x40c>
 800236c:	e606      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	000007fe 	.word	0x000007fe
 8002374:	000007ff 	.word	0x000007ff
 8002378:	ff7fffff 	.word	0xff7fffff
 800237c:	08ff      	lsrs	r7, r7, #3
 800237e:	074b      	lsls	r3, r1, #29
 8002380:	433b      	orrs	r3, r7
 8002382:	08cc      	lsrs	r4, r1, #3
 8002384:	e616      	b.n	8001fb4 <__aeabi_dsub+0x314>
 8002386:	4662      	mov	r2, ip
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	0752      	lsls	r2, r2, #29
 800238c:	4313      	orrs	r3, r2
 800238e:	4662      	mov	r2, ip
 8002390:	08d4      	lsrs	r4, r2, #3
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	0312      	lsls	r2, r2, #12
 8002396:	4214      	tst	r4, r2
 8002398:	d007      	beq.n	80023aa <__aeabi_dsub+0x70a>
 800239a:	08c8      	lsrs	r0, r1, #3
 800239c:	4210      	tst	r0, r2
 800239e:	d104      	bne.n	80023aa <__aeabi_dsub+0x70a>
 80023a0:	465d      	mov	r5, fp
 80023a2:	0004      	movs	r4, r0
 80023a4:	08fb      	lsrs	r3, r7, #3
 80023a6:	0749      	lsls	r1, r1, #29
 80023a8:	430b      	orrs	r3, r1
 80023aa:	0f5a      	lsrs	r2, r3, #29
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	0752      	lsls	r2, r2, #29
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	e5fe      	b.n	8001fb4 <__aeabi_dsub+0x314>
 80023b6:	2300      	movs	r3, #0
 80023b8:	4a01      	ldr	r2, [pc, #4]	; (80023c0 <__aeabi_dsub+0x720>)
 80023ba:	001c      	movs	r4, r3
 80023bc:	e513      	b.n	8001de6 <__aeabi_dsub+0x146>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	000007ff 	.word	0x000007ff

080023c4 <__aeabi_dcmpun>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	0005      	movs	r5, r0
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <__aeabi_dcmpun+0x38>)
 80023ca:	031c      	lsls	r4, r3, #12
 80023cc:	0016      	movs	r6, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	030a      	lsls	r2, r1, #12
 80023d2:	0049      	lsls	r1, r1, #1
 80023d4:	0b12      	lsrs	r2, r2, #12
 80023d6:	0d49      	lsrs	r1, r1, #21
 80023d8:	0b24      	lsrs	r4, r4, #12
 80023da:	0d5b      	lsrs	r3, r3, #21
 80023dc:	4281      	cmp	r1, r0
 80023de:	d008      	beq.n	80023f2 <__aeabi_dcmpun+0x2e>
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <__aeabi_dcmpun+0x38>)
 80023e2:	2000      	movs	r0, #0
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d103      	bne.n	80023f0 <__aeabi_dcmpun+0x2c>
 80023e8:	0020      	movs	r0, r4
 80023ea:	4330      	orrs	r0, r6
 80023ec:	1e43      	subs	r3, r0, #1
 80023ee:	4198      	sbcs	r0, r3
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	2001      	movs	r0, #1
 80023f4:	432a      	orrs	r2, r5
 80023f6:	d1fb      	bne.n	80023f0 <__aeabi_dcmpun+0x2c>
 80023f8:	e7f2      	b.n	80023e0 <__aeabi_dcmpun+0x1c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	000007ff 	.word	0x000007ff

08002400 <__aeabi_d2iz>:
 8002400:	000a      	movs	r2, r1
 8002402:	b530      	push	{r4, r5, lr}
 8002404:	4c13      	ldr	r4, [pc, #76]	; (8002454 <__aeabi_d2iz+0x54>)
 8002406:	0053      	lsls	r3, r2, #1
 8002408:	0309      	lsls	r1, r1, #12
 800240a:	0005      	movs	r5, r0
 800240c:	0b09      	lsrs	r1, r1, #12
 800240e:	2000      	movs	r0, #0
 8002410:	0d5b      	lsrs	r3, r3, #21
 8002412:	0fd2      	lsrs	r2, r2, #31
 8002414:	42a3      	cmp	r3, r4
 8002416:	dd04      	ble.n	8002422 <__aeabi_d2iz+0x22>
 8002418:	480f      	ldr	r0, [pc, #60]	; (8002458 <__aeabi_d2iz+0x58>)
 800241a:	4283      	cmp	r3, r0
 800241c:	dd02      	ble.n	8002424 <__aeabi_d2iz+0x24>
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <__aeabi_d2iz+0x5c>)
 8002420:	18d0      	adds	r0, r2, r3
 8002422:	bd30      	pop	{r4, r5, pc}
 8002424:	2080      	movs	r0, #128	; 0x80
 8002426:	0340      	lsls	r0, r0, #13
 8002428:	4301      	orrs	r1, r0
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <__aeabi_d2iz+0x60>)
 800242c:	1ac0      	subs	r0, r0, r3
 800242e:	281f      	cmp	r0, #31
 8002430:	dd08      	ble.n	8002444 <__aeabi_d2iz+0x44>
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <__aeabi_d2iz+0x64>)
 8002434:	1ac3      	subs	r3, r0, r3
 8002436:	40d9      	lsrs	r1, r3
 8002438:	000b      	movs	r3, r1
 800243a:	4258      	negs	r0, r3
 800243c:	2a00      	cmp	r2, #0
 800243e:	d1f0      	bne.n	8002422 <__aeabi_d2iz+0x22>
 8002440:	0018      	movs	r0, r3
 8002442:	e7ee      	b.n	8002422 <__aeabi_d2iz+0x22>
 8002444:	4c08      	ldr	r4, [pc, #32]	; (8002468 <__aeabi_d2iz+0x68>)
 8002446:	40c5      	lsrs	r5, r0
 8002448:	46a4      	mov	ip, r4
 800244a:	4463      	add	r3, ip
 800244c:	4099      	lsls	r1, r3
 800244e:	000b      	movs	r3, r1
 8002450:	432b      	orrs	r3, r5
 8002452:	e7f2      	b.n	800243a <__aeabi_d2iz+0x3a>
 8002454:	000003fe 	.word	0x000003fe
 8002458:	0000041d 	.word	0x0000041d
 800245c:	7fffffff 	.word	0x7fffffff
 8002460:	00000433 	.word	0x00000433
 8002464:	00000413 	.word	0x00000413
 8002468:	fffffbed 	.word	0xfffffbed

0800246c <__aeabi_i2d>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	2800      	cmp	r0, #0
 8002470:	d016      	beq.n	80024a0 <__aeabi_i2d+0x34>
 8002472:	17c3      	asrs	r3, r0, #31
 8002474:	18c5      	adds	r5, r0, r3
 8002476:	405d      	eors	r5, r3
 8002478:	0fc4      	lsrs	r4, r0, #31
 800247a:	0028      	movs	r0, r5
 800247c:	f000 f894 	bl	80025a8 <__clzsi2>
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <__aeabi_i2d+0x5c>)
 8002482:	1a12      	subs	r2, r2, r0
 8002484:	280a      	cmp	r0, #10
 8002486:	dc16      	bgt.n	80024b6 <__aeabi_i2d+0x4a>
 8002488:	0003      	movs	r3, r0
 800248a:	002e      	movs	r6, r5
 800248c:	3315      	adds	r3, #21
 800248e:	409e      	lsls	r6, r3
 8002490:	230b      	movs	r3, #11
 8002492:	1a18      	subs	r0, r3, r0
 8002494:	40c5      	lsrs	r5, r0
 8002496:	0552      	lsls	r2, r2, #21
 8002498:	032d      	lsls	r5, r5, #12
 800249a:	0b2d      	lsrs	r5, r5, #12
 800249c:	0d53      	lsrs	r3, r2, #21
 800249e:	e003      	b.n	80024a8 <__aeabi_i2d+0x3c>
 80024a0:	2400      	movs	r4, #0
 80024a2:	2300      	movs	r3, #0
 80024a4:	2500      	movs	r5, #0
 80024a6:	2600      	movs	r6, #0
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	432b      	orrs	r3, r5
 80024ac:	07e4      	lsls	r4, r4, #31
 80024ae:	4323      	orrs	r3, r4
 80024b0:	0030      	movs	r0, r6
 80024b2:	0019      	movs	r1, r3
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
 80024b6:	380b      	subs	r0, #11
 80024b8:	4085      	lsls	r5, r0
 80024ba:	0552      	lsls	r2, r2, #21
 80024bc:	032d      	lsls	r5, r5, #12
 80024be:	2600      	movs	r6, #0
 80024c0:	0b2d      	lsrs	r5, r5, #12
 80024c2:	0d53      	lsrs	r3, r2, #21
 80024c4:	e7f0      	b.n	80024a8 <__aeabi_i2d+0x3c>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	0000041e 	.word	0x0000041e

080024cc <__aeabi_ui2d>:
 80024cc:	b510      	push	{r4, lr}
 80024ce:	1e04      	subs	r4, r0, #0
 80024d0:	d010      	beq.n	80024f4 <__aeabi_ui2d+0x28>
 80024d2:	f000 f869 	bl	80025a8 <__clzsi2>
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <__aeabi_ui2d+0x48>)
 80024d8:	1a1b      	subs	r3, r3, r0
 80024da:	280a      	cmp	r0, #10
 80024dc:	dc11      	bgt.n	8002502 <__aeabi_ui2d+0x36>
 80024de:	220b      	movs	r2, #11
 80024e0:	0021      	movs	r1, r4
 80024e2:	1a12      	subs	r2, r2, r0
 80024e4:	40d1      	lsrs	r1, r2
 80024e6:	3015      	adds	r0, #21
 80024e8:	030a      	lsls	r2, r1, #12
 80024ea:	055b      	lsls	r3, r3, #21
 80024ec:	4084      	lsls	r4, r0
 80024ee:	0b12      	lsrs	r2, r2, #12
 80024f0:	0d5b      	lsrs	r3, r3, #21
 80024f2:	e001      	b.n	80024f8 <__aeabi_ui2d+0x2c>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2200      	movs	r2, #0
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	4313      	orrs	r3, r2
 80024fc:	0020      	movs	r0, r4
 80024fe:	0019      	movs	r1, r3
 8002500:	bd10      	pop	{r4, pc}
 8002502:	0022      	movs	r2, r4
 8002504:	380b      	subs	r0, #11
 8002506:	4082      	lsls	r2, r0
 8002508:	055b      	lsls	r3, r3, #21
 800250a:	0312      	lsls	r2, r2, #12
 800250c:	2400      	movs	r4, #0
 800250e:	0b12      	lsrs	r2, r2, #12
 8002510:	0d5b      	lsrs	r3, r3, #21
 8002512:	e7f1      	b.n	80024f8 <__aeabi_ui2d+0x2c>
 8002514:	0000041e 	.word	0x0000041e

08002518 <__aeabi_f2d>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	0043      	lsls	r3, r0, #1
 800251c:	0246      	lsls	r6, r0, #9
 800251e:	0fc4      	lsrs	r4, r0, #31
 8002520:	20fe      	movs	r0, #254	; 0xfe
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	1c59      	adds	r1, r3, #1
 8002526:	0a75      	lsrs	r5, r6, #9
 8002528:	4208      	tst	r0, r1
 800252a:	d00c      	beq.n	8002546 <__aeabi_f2d+0x2e>
 800252c:	22e0      	movs	r2, #224	; 0xe0
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4694      	mov	ip, r2
 8002532:	076d      	lsls	r5, r5, #29
 8002534:	0b36      	lsrs	r6, r6, #12
 8002536:	4463      	add	r3, ip
 8002538:	051b      	lsls	r3, r3, #20
 800253a:	4333      	orrs	r3, r6
 800253c:	07e4      	lsls	r4, r4, #31
 800253e:	4323      	orrs	r3, r4
 8002540:	0028      	movs	r0, r5
 8002542:	0019      	movs	r1, r3
 8002544:	bd70      	pop	{r4, r5, r6, pc}
 8002546:	2b00      	cmp	r3, #0
 8002548:	d114      	bne.n	8002574 <__aeabi_f2d+0x5c>
 800254a:	2d00      	cmp	r5, #0
 800254c:	d01b      	beq.n	8002586 <__aeabi_f2d+0x6e>
 800254e:	0028      	movs	r0, r5
 8002550:	f000 f82a 	bl	80025a8 <__clzsi2>
 8002554:	280a      	cmp	r0, #10
 8002556:	dc1c      	bgt.n	8002592 <__aeabi_f2d+0x7a>
 8002558:	230b      	movs	r3, #11
 800255a:	002e      	movs	r6, r5
 800255c:	1a1b      	subs	r3, r3, r0
 800255e:	40de      	lsrs	r6, r3
 8002560:	0003      	movs	r3, r0
 8002562:	3315      	adds	r3, #21
 8002564:	409d      	lsls	r5, r3
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <__aeabi_f2d+0x88>)
 8002568:	0336      	lsls	r6, r6, #12
 800256a:	1a12      	subs	r2, r2, r0
 800256c:	0552      	lsls	r2, r2, #21
 800256e:	0b36      	lsrs	r6, r6, #12
 8002570:	0d53      	lsrs	r3, r2, #21
 8002572:	e7e1      	b.n	8002538 <__aeabi_f2d+0x20>
 8002574:	2d00      	cmp	r5, #0
 8002576:	d009      	beq.n	800258c <__aeabi_f2d+0x74>
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	0b36      	lsrs	r6, r6, #12
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <__aeabi_f2d+0x8c>)
 8002580:	076d      	lsls	r5, r5, #29
 8002582:	4316      	orrs	r6, r2
 8002584:	e7d8      	b.n	8002538 <__aeabi_f2d+0x20>
 8002586:	2300      	movs	r3, #0
 8002588:	2600      	movs	r6, #0
 800258a:	e7d5      	b.n	8002538 <__aeabi_f2d+0x20>
 800258c:	2600      	movs	r6, #0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <__aeabi_f2d+0x8c>)
 8002590:	e7d2      	b.n	8002538 <__aeabi_f2d+0x20>
 8002592:	0003      	movs	r3, r0
 8002594:	3b0b      	subs	r3, #11
 8002596:	409d      	lsls	r5, r3
 8002598:	002e      	movs	r6, r5
 800259a:	2500      	movs	r5, #0
 800259c:	e7e3      	b.n	8002566 <__aeabi_f2d+0x4e>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	00000389 	.word	0x00000389
 80025a4:	000007ff 	.word	0x000007ff

080025a8 <__clzsi2>:
 80025a8:	211c      	movs	r1, #28
 80025aa:	2301      	movs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	4298      	cmp	r0, r3
 80025b0:	d301      	bcc.n	80025b6 <__clzsi2+0xe>
 80025b2:	0c00      	lsrs	r0, r0, #16
 80025b4:	3910      	subs	r1, #16
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	4298      	cmp	r0, r3
 80025ba:	d301      	bcc.n	80025c0 <__clzsi2+0x18>
 80025bc:	0a00      	lsrs	r0, r0, #8
 80025be:	3908      	subs	r1, #8
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d301      	bcc.n	80025ca <__clzsi2+0x22>
 80025c6:	0900      	lsrs	r0, r0, #4
 80025c8:	3904      	subs	r1, #4
 80025ca:	a202      	add	r2, pc, #8	; (adr r2, 80025d4 <__clzsi2+0x2c>)
 80025cc:	5c10      	ldrb	r0, [r2, r0]
 80025ce:	1840      	adds	r0, r0, r1
 80025d0:	4770      	bx	lr
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	02020304 	.word	0x02020304
 80025d8:	01010101 	.word	0x01010101
	...

080025e4 <__clzdi2>:
 80025e4:	b510      	push	{r4, lr}
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d103      	bne.n	80025f2 <__clzdi2+0xe>
 80025ea:	f7ff ffdd 	bl	80025a8 <__clzsi2>
 80025ee:	3020      	adds	r0, #32
 80025f0:	e002      	b.n	80025f8 <__clzdi2+0x14>
 80025f2:	0008      	movs	r0, r1
 80025f4:	f7ff ffd8 	bl	80025a8 <__clzsi2>
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)

080025fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8002600:	491a      	ldr	r1, [pc, #104]	; (800266c <MX_FREERTOS_Init+0x70>)
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <MX_FREERTOS_Init+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	0018      	movs	r0, r3
 8002608:	f003 ff5c 	bl	80064c4 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <MX_FREERTOS_Init+0x78>)
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_FREERTOS_Init+0x7c>)
 8002610:	2100      	movs	r1, #0
 8002612:	0018      	movs	r0, r3
 8002614:	f005 ffb0 	bl	8008578 <osThreadNew>
 8002618:	0002      	movs	r2, r0
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <MX_FREERTOS_Init+0x80>)
 800261c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  blinkingRatioThreadHandle = osThreadNew(ChangeBlinkingRatioThread, NULL, &blinkingRatioTask_attributes);
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <MX_FREERTOS_Init+0x84>)
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_FREERTOS_Init+0x88>)
 8002622:	2100      	movs	r1, #0
 8002624:	0018      	movs	r0, r3
 8002626:	f005 ffa7 	bl	8008578 <osThreadNew>
 800262a:	0002      	movs	r2, r0
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <MX_FREERTOS_Init+0x8c>)
 800262e:	601a      	str	r2, [r3, #0]
  toggleLEDThreadHandle = osThreadNew(ToggleLEDThread, NULL, &toggleLEDTask_attributes);
 8002630:	4a16      	ldr	r2, [pc, #88]	; (800268c <MX_FREERTOS_Init+0x90>)
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_FREERTOS_Init+0x94>)
 8002634:	2100      	movs	r1, #0
 8002636:	0018      	movs	r0, r3
 8002638:	f005 ff9e 	bl	8008578 <osThreadNew>
 800263c:	0002      	movs	r2, r0
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_FREERTOS_Init+0x98>)
 8002640:	601a      	str	r2, [r3, #0]
  sendByteOverUartHandle = osThreadNew(SendBytOverUartThread, NULL, &sendByteOverUartTask_attributes);
 8002642:	4a15      	ldr	r2, [pc, #84]	; (8002698 <MX_FREERTOS_Init+0x9c>)
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_FREERTOS_Init+0xa0>)
 8002646:	2100      	movs	r1, #0
 8002648:	0018      	movs	r0, r3
 800264a:	f005 ff95 	bl	8008578 <osThreadNew>
 800264e:	0002      	movs	r2, r0
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <MX_FREERTOS_Init+0xa4>)
 8002652:	601a      	str	r2, [r3, #0]
  accelServiceHandle = osThreadNew(AccelServiceThread, NULL, &accelServiceTask_attributes);
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <MX_FREERTOS_Init+0xa8>)
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_FREERTOS_Init+0xac>)
 8002658:	2100      	movs	r1, #0
 800265a:	0018      	movs	r0, r3
 800265c:	f005 ff8c 	bl	8008578 <osThreadNew>
 8002660:	0002      	movs	r2, r0
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <MX_FREERTOS_Init+0xb0>)
 8002664:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000020c 	.word	0x2000020c
 8002670:	200006e0 	.word	0x200006e0
 8002674:	0800e194 	.word	0x0800e194
 8002678:	080026b1 	.word	0x080026b1
 800267c:	20000218 	.word	0x20000218
 8002680:	0800e104 	.word	0x0800e104
 8002684:	0800274d 	.word	0x0800274d
 8002688:	20000200 	.word	0x20000200
 800268c:	0800e128 	.word	0x0800e128
 8002690:	08002701 	.word	0x08002701
 8002694:	20000204 	.word	0x20000204
 8002698:	0800e14c 	.word	0x0800e14c
 800269c:	08002769 	.word	0x08002769
 80026a0:	20000208 	.word	0x20000208
 80026a4:	0800e170 	.word	0x0800e170
 80026a8:	08002859 	.word	0x08002859
 80026ac:	20000210 	.word	0x20000210

080026b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80026b8:	2064      	movs	r0, #100	; 0x64
 80026ba:	f006 f8bd 	bl	8008838 <osDelay>
 80026be:	e7fb      	b.n	80026b8 <StartDefaultTask+0x8>

080026c0 <HAL_GPIO_EXTI_Falling_Callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	0002      	movs	r2, r0
 80026c8:	1dbb      	adds	r3, r7, #6
 80026ca:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 80026cc:	1dbb      	adds	r3, r7, #6
 80026ce:	881a      	ldrh	r2, [r3, #0]
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	019b      	lsls	r3, r3, #6
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d10b      	bne.n	80026f0 <HAL_GPIO_EXTI_Falling_Callback+0x30>
  {
    osThreadFlagsSet(blinkingRatioThreadHandle, BIT_1);
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2102      	movs	r1, #2
 80026de:	0018      	movs	r0, r3
 80026e0:	f005 ffe0 	bl	80086a4 <osThreadFlagsSet>
    osThreadFlagsSet(sendByteOverUartHandle, BIT_1);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2102      	movs	r1, #2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f005 ffda 	bl	80086a4 <osThreadFlagsSet>

  }
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000200 	.word	0x20000200
 80026fc:	20000208 	.word	0x20000208

08002700 <ToggleLEDThread>:

static void ToggleLEDThread(void * argument)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    osDelay(blinking_ratio);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <ToggleLEDThread+0x20>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f006 f893 	bl	8008838 <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8002712:	23a0      	movs	r3, #160	; 0xa0
 8002714:	05db      	lsls	r3, r3, #23
 8002716:	2120      	movs	r1, #32
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fbdc 	bl	8003ed6 <HAL_GPIO_TogglePin>
    osDelay(blinking_ratio);
 800271e:	e7f3      	b.n	8002708 <ToggleLEDThread+0x8>
 8002720:	20000000 	.word	0x20000000

08002724 <ChangeBlinkingRatio>:
  }
}

static void ChangeBlinkingRatio(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  if (blinking_ratio == 250)
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <ChangeBlinkingRatio+0x24>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2bfa      	cmp	r3, #250	; 0xfa
 800272e:	d104      	bne.n	800273a <ChangeBlinkingRatio+0x16>
    blinking_ratio = 1000;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <ChangeBlinkingRatio+0x24>)
 8002732:	22fa      	movs	r2, #250	; 0xfa
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	601a      	str	r2, [r3, #0]
  else
    blinking_ratio = 250;
}
 8002738:	e002      	b.n	8002740 <ChangeBlinkingRatio+0x1c>
    blinking_ratio = 250;
 800273a:	4b03      	ldr	r3, [pc, #12]	; (8002748 <ChangeBlinkingRatio+0x24>)
 800273c:	22fa      	movs	r2, #250	; 0xfa
 800273e:	601a      	str	r2, [r3, #0]
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000000 	.word	0x20000000

0800274c <ChangeBlinkingRatioThread>:

static void ChangeBlinkingRatioThread(void * argument)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  (void) argument;
  for(;;)
  {
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8002754:	2301      	movs	r3, #1
 8002756:	425b      	negs	r3, r3
 8002758:	001a      	movs	r2, r3
 800275a:	2100      	movs	r1, #0
 800275c:	2002      	movs	r0, #2
 800275e:	f005 ffeb 	bl	8008738 <osThreadFlagsWait>

    ChangeBlinkingRatio();
 8002762:	f7ff ffdf 	bl	8002724 <ChangeBlinkingRatio>
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8002766:	e7f5      	b.n	8002754 <ChangeBlinkingRatioThread+0x8>

08002768 <SendBytOverUartThread>:
const uint8_t button_press_str[] = "Button pressed\r\n";
const uint8_t data_rec_str[] = "received sth\r\n";
const uint8_t data_rec_e_str[] = "received e\r\n";

static void SendBytOverUartThread(void *argument)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  (void) argument;
  uint32_t events = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8002774:	2301      	movs	r3, #1
 8002776:	425b      	negs	r3, r3
 8002778:	001a      	movs	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	2003      	movs	r0, #3
 800277e:	f005 ffdb 	bl	8008738 <osThreadFlagsWait>
 8002782:	0003      	movs	r3, r0
 8002784:	60fb      	str	r3, [r7, #12]

    switch (events)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d003      	beq.n	8002794 <SendBytOverUartThread+0x2c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d014      	beq.n	80027bc <SendBytOverUartThread+0x54>
        break;
      case BIT_1:
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
        break;
      default:
        break;
 8002792:	e01b      	b.n	80027cc <SendBytOverUartThread+0x64>
        if (rec_character == 'e')
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <SendBytOverUartThread+0x68>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b65      	cmp	r3, #101	; 0x65
 800279a:	d107      	bne.n	80027ac <SendBytOverUartThread+0x44>
          HAL_UART_Transmit(&huart2, data_rec_e_str, sizeof(data_rec_e_str), 500);
 800279c:	23fa      	movs	r3, #250	; 0xfa
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	490c      	ldr	r1, [pc, #48]	; (80027d4 <SendBytOverUartThread+0x6c>)
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <SendBytOverUartThread+0x70>)
 80027a4:	220d      	movs	r2, #13
 80027a6:	f003 fdf1 	bl	800638c <HAL_UART_Transmit>
        break;
 80027aa:	e00f      	b.n	80027cc <SendBytOverUartThread+0x64>
          HAL_UART_Transmit(&huart2, data_rec_str, sizeof(data_rec_str), 500);
 80027ac:	23fa      	movs	r3, #250	; 0xfa
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	490a      	ldr	r1, [pc, #40]	; (80027dc <SendBytOverUartThread+0x74>)
 80027b2:	4809      	ldr	r0, [pc, #36]	; (80027d8 <SendBytOverUartThread+0x70>)
 80027b4:	220f      	movs	r2, #15
 80027b6:	f003 fde9 	bl	800638c <HAL_UART_Transmit>
        break;
 80027ba:	e007      	b.n	80027cc <SendBytOverUartThread+0x64>
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
 80027bc:	23fa      	movs	r3, #250	; 0xfa
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <SendBytOverUartThread+0x78>)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <SendBytOverUartThread+0x70>)
 80027c4:	2211      	movs	r2, #17
 80027c6:	f003 fde1 	bl	800638c <HAL_UART_Transmit>
        break;
 80027ca:	46c0      	nop			; (mov r8, r8)
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 80027cc:	e7d2      	b.n	8002774 <SendBytOverUartThread+0xc>
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	2000020c 	.word	0x2000020c
 80027d4:	0800e1dc 	.word	0x0800e1dc
 80027d8:	200006e0 	.word	0x200006e0
 80027dc:	0800e1cc 	.word	0x0800e1cc
 80027e0:	0800e1b8 	.word	0x0800e1b8

080027e4 <HAL_UART_RxCpltCallback>:
    }
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_UART_RxCpltCallback+0x34>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10b      	bne.n	800280e <HAL_UART_RxCpltCallback+0x2a>
  {
    osThreadFlagsSet(sendByteOverUartHandle, BIT_0);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_UART_RxCpltCallback+0x38>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	0018      	movs	r0, r3
 80027fe:	f005 ff51 	bl	80086a4 <osThreadFlagsSet>
    HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8002802:	4907      	ldr	r1, [pc, #28]	; (8002820 <HAL_UART_RxCpltCallback+0x3c>)
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_UART_RxCpltCallback+0x40>)
 8002806:	2201      	movs	r2, #1
 8002808:	0018      	movs	r0, r3
 800280a:	f003 fe5b 	bl	80064c4 <HAL_UART_Receive_IT>
  }
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b002      	add	sp, #8
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	40004400 	.word	0x40004400
 800281c:	20000208 	.word	0x20000208
 8002820:	2000020c 	.word	0x2000020c
 8002824:	200006e0 	.word	0x200006e0

08002828 <AccelMachineState>:

static void AccelMachineState(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  switch (accel_state)
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <AccelMachineState+0x2c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10a      	bne.n	800284a <AccelMachineState+0x22>
  {
  case ACC_RUNNING:
    if (lis3dh_is_samples_ready())
 8002834:	f000 f912 	bl	8002a5c <lis3dh_is_samples_ready>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d002      	beq.n	8002842 <AccelMachineState+0x1a>
      lis3dh_read_fifo();
 800283c:	f000 f924 	bl	8002a88 <lis3dh_read_fifo>
    else
      osDelay(100);
  break;
 8002840:	e004      	b.n	800284c <AccelMachineState+0x24>
      osDelay(100);
 8002842:	2064      	movs	r0, #100	; 0x64
 8002844:	f005 fff8 	bl	8008838 <osDelay>
  break;
 8002848:	e000      	b.n	800284c <AccelMachineState+0x24>
  case ACC_INIT:
  case ACC_ERROR:
  default:
  break;
 800284a:	46c0      	nop			; (mov r8, r8)
  }
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	20000214 	.word	0x20000214

08002858 <AccelServiceThread>:

static void AccelServiceThread(void *argument)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  (void) argument;
  accel_state = lis3dh_init();
 8002860:	f000 f89c 	bl	800299c <lis3dh_init>
 8002864:	0003      	movs	r3, r0
 8002866:	001a      	movs	r2, r3
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <AccelServiceThread+0x1c>)
 800286a:	701a      	strb	r2, [r3, #0]
  for (;;)
  {
    AccelMachineState();
 800286c:	f7ff ffdc 	bl	8002828 <AccelMachineState>
 8002870:	e7fc      	b.n	800286c <AccelServiceThread+0x14>
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	20000214 	.word	0x20000214

08002878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b08b      	sub	sp, #44	; 0x2c
 800287c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287e:	2414      	movs	r4, #20
 8002880:	193b      	adds	r3, r7, r4
 8002882:	0018      	movs	r0, r3
 8002884:	2314      	movs	r3, #20
 8002886:	001a      	movs	r2, r3
 8002888:	2100      	movs	r1, #0
 800288a:	f008 fc4b 	bl	800b124 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288e:	4b40      	ldr	r3, [pc, #256]	; (8002990 <MX_GPIO_Init+0x118>)
 8002890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <MX_GPIO_Init+0x118>)
 8002894:	2104      	movs	r1, #4
 8002896:	430a      	orrs	r2, r1
 8002898:	635a      	str	r2, [r3, #52]	; 0x34
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <MX_GPIO_Init+0x118>)
 800289c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289e:	2204      	movs	r2, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028a6:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <MX_GPIO_Init+0x118>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028aa:	4b39      	ldr	r3, [pc, #228]	; (8002990 <MX_GPIO_Init+0x118>)
 80028ac:	2120      	movs	r1, #32
 80028ae:	430a      	orrs	r2, r1
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <MX_GPIO_Init+0x118>)
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	2220      	movs	r2, #32
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <MX_GPIO_Init+0x118>)
 80028c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <MX_GPIO_Init+0x118>)
 80028c4:	2101      	movs	r1, #1
 80028c6:	430a      	orrs	r2, r1
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <MX_GPIO_Init+0x118>)
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	2201      	movs	r2, #1
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <MX_GPIO_Init+0x118>)
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <MX_GPIO_Init+0x118>)
 80028dc:	2102      	movs	r1, #2
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <MX_GPIO_Init+0x118>)
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80028ee:	23a0      	movs	r3, #160	; 0xa0
 80028f0:	05db      	lsls	r3, r3, #23
 80028f2:	2200      	movs	r2, #0
 80028f4:	2120      	movs	r1, #32
 80028f6:	0018      	movs	r0, r3
 80028f8:	f001 fad0 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <MX_GPIO_Init+0x11c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	0018      	movs	r0, r3
 8002904:	f001 faca 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002908:	193b      	adds	r3, r7, r4
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	0192      	lsls	r2, r2, #6
 800290e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002910:	193b      	adds	r3, r7, r4
 8002912:	2284      	movs	r2, #132	; 0x84
 8002914:	0392      	lsls	r2, r2, #14
 8002916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	193b      	adds	r3, r7, r4
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800291e:	193b      	adds	r3, r7, r4
 8002920:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <MX_GPIO_Init+0x120>)
 8002922:	0019      	movs	r1, r3
 8002924:	0010      	movs	r0, r2
 8002926:	f001 f955 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800292a:	193b      	adds	r3, r7, r4
 800292c:	2220      	movs	r2, #32
 800292e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002930:	193b      	adds	r3, r7, r4
 8002932:	2201      	movs	r2, #1
 8002934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293c:	193b      	adds	r3, r7, r4
 800293e:	2202      	movs	r2, #2
 8002940:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002942:	193a      	adds	r2, r7, r4
 8002944:	23a0      	movs	r3, #160	; 0xa0
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	0011      	movs	r1, r2
 800294a:	0018      	movs	r0, r3
 800294c:	f001 f942 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002950:	0021      	movs	r1, r4
 8002952:	187b      	adds	r3, r7, r1
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002958:	187b      	adds	r3, r7, r1
 800295a:	2201      	movs	r2, #1
 800295c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	187b      	adds	r3, r7, r1
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800296a:	187b      	adds	r3, r7, r1
 800296c:	4a09      	ldr	r2, [pc, #36]	; (8002994 <MX_GPIO_Init+0x11c>)
 800296e:	0019      	movs	r1, r3
 8002970:	0010      	movs	r0, r2
 8002972:	f001 f92f 	bl	8003bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2103      	movs	r1, #3
 800297a:	2007      	movs	r0, #7
 800297c:	f001 f838 	bl	80039f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002980:	2007      	movs	r0, #7
 8002982:	f001 f84a 	bl	8003a1a <HAL_NVIC_EnableIRQ>

}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b00b      	add	sp, #44	; 0x2c
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	40021000 	.word	0x40021000
 8002994:	50000400 	.word	0x50000400
 8002998:	50000800 	.word	0x50000800

0800299c <lis3dh_init>:
/* Main Example --------------------------------------------------------------*/

static stmdev_ctx_t dev_ctx;

accel_state_t lis3dh_init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <lis3dh_init+0xa4>)
 80029a2:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <lis3dh_init+0xa8>)
 80029a4:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <lis3dh_init+0xa4>)
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <lis3dh_init+0xac>)
 80029aa:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <lis3dh_init+0xa4>)
 80029ae:	4a27      	ldr	r2, [pc, #156]	; (8002a4c <lis3dh_init+0xb0>)
 80029b0:	60da      	str	r2, [r3, #12]
  /* Check device ID */
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 80029b2:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <lis3dh_init+0xb4>)
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <lis3dh_init+0xa4>)
 80029b6:	0011      	movs	r1, r2
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 faf6 	bl	8002faa <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID)
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <lis3dh_init+0xb4>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b33      	cmp	r3, #51	; 0x33
 80029c4:	d014      	beq.n	80029f0 <lis3dh_init+0x54>
  {
    sprintf((char *)tx_buffer, "ERROR! Accelerometer not found %d\n", whoamI);
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <lis3dh_init+0xb4>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	001a      	movs	r2, r3
 80029cc:	4921      	ldr	r1, [pc, #132]	; (8002a54 <lis3dh_init+0xb8>)
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <lis3dh_init+0xbc>)
 80029d0:	0018      	movs	r0, r3
 80029d2:	f009 f93b 	bl	800bc4c <siprintf>
    tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <lis3dh_init+0xbc>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fd fb95 	bl	8000108 <strlen>
 80029de:	0003      	movs	r3, r0
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <lis3dh_init+0xbc>)
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 f928 	bl	8002c3c <tx_com>
    while (1)
    {
      return ACC_ERROR;
 80029ec:	2302      	movs	r3, #2
 80029ee:	e023      	b.n	8002a38 <lis3dh_init+0x9c>
    }
  }

  /*  Enable Block Data Update */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <lis3dh_init+0xa4>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 fa57 	bl	8002ea8 <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 10 hz */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_10Hz);
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <lis3dh_init+0xa4>)
 80029fc:	2102      	movs	r1, #2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f9f4 	bl	8002dec <lis3dh_data_rate_set>
  /* Set full scale to 2 g */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <lis3dh_init+0xa4>)
 8002a06:	2100      	movs	r1, #0
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fa1d 	bl	8002e48 <lis3dh_full_scale_set>
  /* Set operating mode to high resolution */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <lis3dh_init+0xa4>)
 8002a10:	2100      	movs	r1, #0
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f981 	bl	8002d1a <lis3dh_operating_mode_set>
  /* Set FIFO watermark to 25 samples */
  lis3dh_fifo_watermark_set(&dev_ctx, 25);
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <lis3dh_init+0xa4>)
 8002a1a:	2119      	movs	r1, #25
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 fb06 	bl	800302e <lis3dh_fifo_watermark_set>
  /* Set FIFO mode to Stream mode: Accumulate samples and
   * override old data */
  lis3dh_fifo_mode_set(&dev_ctx, LIS3DH_DYNAMIC_STREAM_MODE);
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <lis3dh_init+0xa4>)
 8002a24:	2102      	movs	r1, #2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fb31 	bl	800308e <lis3dh_fifo_mode_set>
  /* Enable FIFO */
  lis3dh_fifo_set(&dev_ctx, PROPERTY_ENABLE);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <lis3dh_init+0xa4>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 facc 	bl	8002fce <lis3dh_fifo_set>

  return ACC_RUNNING;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	2000061c 	.word	0x2000061c
 8002a44:	08002b65 	.word	0x08002b65
 8002a48:	08002bc9 	.word	0x08002bc9
 8002a4c:	2000062c 	.word	0x2000062c
 8002a50:	20000230 	.word	0x20000230
 8002a54:	0800dfa0 	.word	0x0800dfa0
 8002a58:	20000234 	.word	0x20000234

08002a5c <lis3dh_is_samples_ready>:

bool lis3dh_is_samples_ready(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  uint8_t flags;
  /* Check if FIFO level over threshold */
  lis3dh_fifo_fth_flag_get(&dev_ctx, &flags);
 8002a62:	1dfa      	adds	r2, r7, #7
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <lis3dh_is_samples_ready+0x28>)
 8002a66:	0011      	movs	r1, r2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fb59 	bl	8003120 <lis3dh_fifo_fth_flag_get>

  if (flags) return true;
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <lis3dh_is_samples_ready+0x1e>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <lis3dh_is_samples_ready+0x20>
  else return false;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000061c 	.word	0x2000061c

08002a88 <lis3dh_read_fifo>:

void lis3dh_read_fifo(void)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af04      	add	r7, sp, #16
  uint8_t num;
  /* Read number of sample in FIFO */
  lis3dh_fifo_data_level_get(&dev_ctx, &num);
 8002a8e:	230f      	movs	r3, #15
 8002a90:	18fa      	adds	r2, r7, r3
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <lis3dh_read_fifo+0xc8>)
 8002a94:	0011      	movs	r1, r2
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fb27 	bl	80030ea <lis3dh_fifo_data_level_get>

  while (num-- > 0)
 8002a9c:	e04a      	b.n	8002b34 <lis3dh_read_fifo+0xac>
  {
  /* Read XL samples */
  lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8002a9e:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <lis3dh_read_fifo+0xcc>)
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <lis3dh_read_fifo+0xc8>)
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 fa2d 	bl	8002f04 <lis3dh_acceleration_raw_get>
  acceleration_mg[0] =
      lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <lis3dh_read_fifo+0xcc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	5e9b      	ldrsh	r3, [r3, r2]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f000 f91b 	bl	8002cec <lis3dh_from_fs2_hr_to_mg>
 8002ab6:	1c02      	adds	r2, r0, #0
  acceleration_mg[0] =
 8002ab8:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <lis3dh_read_fifo+0xd0>)
 8002aba:	601a      	str	r2, [r3, #0]
  acceleration_mg[1] =
      lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <lis3dh_read_fifo+0xcc>)
 8002abe:	2202      	movs	r2, #2
 8002ac0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f912 	bl	8002cec <lis3dh_from_fs2_hr_to_mg>
 8002ac8:	1c02      	adds	r2, r0, #0
  acceleration_mg[1] =
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <lis3dh_read_fifo+0xd0>)
 8002acc:	605a      	str	r2, [r3, #4]
  acceleration_mg[2] =
      lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <lis3dh_read_fifo+0xcc>)
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	5e9b      	ldrsh	r3, [r3, r2]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f909 	bl	8002cec <lis3dh_from_fs2_hr_to_mg>
 8002ada:	1c02      	adds	r2, r0, #0
  acceleration_mg[2] =
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <lis3dh_read_fifo+0xd0>)
 8002ade:	609a      	str	r2, [r3, #8]
  sprintf((char *)tx_buffer,
          "Acceleration [mg]:%5.0f\t%5.0f\t%5.0f\r\n",
          acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <lis3dh_read_fifo+0xd0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
  sprintf((char *)tx_buffer,
 8002ae4:	1c18      	adds	r0, r3, #0
 8002ae6:	f7ff fd17 	bl	8002518 <__aeabi_f2d>
 8002aea:	6038      	str	r0, [r7, #0]
 8002aec:	6079      	str	r1, [r7, #4]
          acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <lis3dh_read_fifo+0xd0>)
 8002af0:	685b      	ldr	r3, [r3, #4]
  sprintf((char *)tx_buffer,
 8002af2:	1c18      	adds	r0, r3, #0
 8002af4:	f7ff fd10 	bl	8002518 <__aeabi_f2d>
 8002af8:	0004      	movs	r4, r0
 8002afa:	000d      	movs	r5, r1
          acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002afc:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <lis3dh_read_fifo+0xd0>)
 8002afe:	689b      	ldr	r3, [r3, #8]
  sprintf((char *)tx_buffer,
 8002b00:	1c18      	adds	r0, r3, #0
 8002b02:	f7ff fd09 	bl	8002518 <__aeabi_f2d>
 8002b06:	0002      	movs	r2, r0
 8002b08:	000b      	movs	r3, r1
 8002b0a:	4914      	ldr	r1, [pc, #80]	; (8002b5c <lis3dh_read_fifo+0xd4>)
 8002b0c:	4814      	ldr	r0, [pc, #80]	; (8002b60 <lis3dh_read_fifo+0xd8>)
 8002b0e:	9202      	str	r2, [sp, #8]
 8002b10:	9303      	str	r3, [sp, #12]
 8002b12:	9400      	str	r4, [sp, #0]
 8002b14:	9501      	str	r5, [sp, #4]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f009 f897 	bl	800bc4c <siprintf>
  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <lis3dh_read_fifo+0xd8>)
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fd faf1 	bl	8000108 <strlen>
 8002b26:	0003      	movs	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <lis3dh_read_fifo+0xd8>)
 8002b2c:	0011      	movs	r1, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f884 	bl	8002c3c <tx_com>
  while (num-- > 0)
 8002b34:	200f      	movs	r0, #15
 8002b36:	183b      	adds	r3, r7, r0
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	b2d1      	uxtb	r1, r2
 8002b3e:	183a      	adds	r2, r7, r0
 8002b40:	7011      	strb	r1, [r2, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ab      	bne.n	8002a9e <lis3dh_read_fifo+0x16>
  }
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b50:	2000061c 	.word	0x2000061c
 8002b54:	2000021c 	.word	0x2000021c
 8002b58:	20000224 	.word	0x20000224
 8002b5c:	0800dfc4 	.word	0x0800dfc4
 8002b60:	20000234 	.word	0x20000234

08002b64 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	0008      	movs	r0, r1
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	0019      	movs	r1, r3
 8002b72:	240b      	movs	r4, #11
 8002b74:	193b      	adds	r3, r7, r4
 8002b76:	1c02      	adds	r2, r0, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	2508      	movs	r5, #8
 8002b7c:	197b      	adds	r3, r7, r5
 8002b7e:	1c0a      	adds	r2, r1, #0
 8002b80:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <platform_write+0x60>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	2101      	movs	r1, #1
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f001 f987 	bl	8003e9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002b8e:	23fa      	movs	r3, #250	; 0xfa
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	1939      	adds	r1, r7, r4
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f002 f996 	bl	8004ec8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, bufp, len, 1000);
 8002b9c:	23fa      	movs	r3, #250	; 0xfa
 8002b9e:	009c      	lsls	r4, r3, #2
 8002ba0:	197b      	adds	r3, r7, r5
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	0023      	movs	r3, r4
 8002baa:	f002 f98d 	bl	8004ec8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <platform_write+0x60>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f001 f971 	bl	8003e9c <HAL_GPIO_WritePin>

  return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b004      	add	sp, #16
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc4:	50000400 	.word	0x50000400

08002bc8 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	0008      	movs	r0, r1
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	240b      	movs	r4, #11
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	1c02      	adds	r2, r0, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	2508      	movs	r5, #8
 8002be0:	197b      	adds	r3, r7, r5
 8002be2:	1c0a      	adds	r2, r1, #0
 8002be4:	801a      	strh	r2, [r3, #0]
  reg |= 0xC0;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	4252      	negs	r2, r2
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <platform_read+0x70>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f001 f94d 	bl	8003e9c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002c02:	23fa      	movs	r3, #250	; 0xfa
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	1939      	adds	r1, r7, r4
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f002 f95c 	bl	8004ec8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8002c10:	23fa      	movs	r3, #250	; 0xfa
 8002c12:	009c      	lsls	r4, r3, #2
 8002c14:	197b      	adds	r3, r7, r5
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	0023      	movs	r3, r4
 8002c1e:	f002 faab 	bl	8005178 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <platform_read+0x70>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	2101      	movs	r1, #1
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 f937 	bl	8003e9c <HAL_GPIO_WritePin>
  return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b004      	add	sp, #16
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}
 8002c38:	50000400 	.word	0x50000400

08002c3c <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	000a      	movs	r2, r1
 8002c46:	1cbb      	adds	r3, r7, #2
 8002c48:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8002c4a:	23fa      	movs	r3, #250	; 0xfa
 8002c4c:	009c      	lsls	r4, r3, #2
 8002c4e:	1cbb      	adds	r3, r7, #2
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <tx_com+0x28>)
 8002c56:	0023      	movs	r3, r4
 8002c58:	f003 fb98 	bl	800638c <HAL_UART_Transmit>
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b003      	add	sp, #12
 8002c62:	bd90      	pop	{r4, r7, pc}
 8002c64:	200006e0 	.word	0x200006e0

08002c68 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8002c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	0008      	movs	r0, r1
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	0019      	movs	r1, r3
 8002c76:	260b      	movs	r6, #11
 8002c78:	19bb      	adds	r3, r7, r6
 8002c7a:	1c02      	adds	r2, r0, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	2508      	movs	r5, #8
 8002c80:	197b      	adds	r3, r7, r5
 8002c82:	1c0a      	adds	r2, r1, #0
 8002c84:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685c      	ldr	r4, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68d8      	ldr	r0, [r3, #12]
 8002c8e:	197b      	adds	r3, r7, r5
 8002c90:	881d      	ldrh	r5, [r3, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	19bb      	adds	r3, r7, r6
 8002c96:	7819      	ldrb	r1, [r3, #0]
 8002c98:	002b      	movs	r3, r5
 8002c9a:	47a0      	blx	r4
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	617b      	str	r3, [r7, #20]

  return ret;
 8002ca0:	697b      	ldr	r3, [r7, #20]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b007      	add	sp, #28
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002caa <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002caa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	0008      	movs	r0, r1
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	0019      	movs	r1, r3
 8002cb8:	260b      	movs	r6, #11
 8002cba:	19bb      	adds	r3, r7, r6
 8002cbc:	1c02      	adds	r2, r0, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	2508      	movs	r5, #8
 8002cc2:	197b      	adds	r3, r7, r5
 8002cc4:	1c0a      	adds	r2, r1, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681c      	ldr	r4, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68d8      	ldr	r0, [r3, #12]
 8002cd0:	197b      	adds	r3, r7, r5
 8002cd2:	881d      	ldrh	r5, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	19bb      	adds	r3, r7, r6
 8002cd8:	7819      	ldrb	r1, [r3, #0]
 8002cda:	002b      	movs	r3, r5
 8002cdc:	47a0      	blx	r4
 8002cde:	0003      	movs	r3, r0
 8002ce0:	617b      	str	r3, [r7, #20]

  return ret;
 8002ce2:	697b      	ldr	r3, [r7, #20]
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b007      	add	sp, #28
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cec <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	1dbb      	adds	r3, r7, #6
 8002cf6:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8002cf8:	1dbb      	adds	r3, r7, #6
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	5e9b      	ldrsh	r3, [r3, r2]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7fd fdd6 	bl	80008b0 <__aeabi_i2f>
 8002d04:	1c03      	adds	r3, r0, #0
 8002d06:	2183      	movs	r1, #131	; 0x83
 8002d08:	05c9      	lsls	r1, r1, #23
 8002d0a:	1c18      	adds	r0, r3, #0
 8002d0c:	f7fd fcb8 	bl	8000680 <__aeabi_fdiv>
 8002d10:	1c03      	adds	r3, r0, #0
}
 8002d12:	1c18      	adds	r0, r3, #0
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b002      	add	sp, #8
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	000a      	movs	r2, r1
 8002d24:	1cfb      	adds	r3, r7, #3
 8002d26:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8002d28:	2310      	movs	r3, #16
 8002d2a:	18fa      	adds	r2, r7, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	2301      	movs	r3, #1
 8002d30:	2120      	movs	r1, #32
 8002d32:	f7ff ff99 	bl	8002c68 <lis3dh_read_reg>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 8002d40:	230c      	movs	r3, #12
 8002d42:	18fa      	adds	r2, r7, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	2301      	movs	r3, #1
 8002d48:	2123      	movs	r1, #35	; 0x23
 8002d4a:	f7ff ff8d 	bl	8002c68 <lis3dh_read_reg>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d138      	bne.n	8002dca <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 8002d58:	1cfb      	adds	r3, r7, #3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 8002d60:	2310      	movs	r3, #16
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	2108      	movs	r1, #8
 8002d68:	438a      	bics	r2, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	2108      	movs	r1, #8
 8002d74:	430a      	orrs	r2, r1
 8002d76:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 8002d78:	1cfb      	adds	r3, r7, #3
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10b      	bne.n	8002d98 <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 8002d80:	2310      	movs	r3, #16
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	2108      	movs	r1, #8
 8002d88:	438a      	bics	r2, r1
 8002d8a:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	2108      	movs	r1, #8
 8002d94:	438a      	bics	r2, r1
 8002d96:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 8002d98:	1cfb      	adds	r3, r7, #3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d10b      	bne.n	8002db8 <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8002da0:	2310      	movs	r3, #16
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	2108      	movs	r1, #8
 8002da8:	430a      	orrs	r2, r1
 8002daa:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002dac:	230c      	movs	r3, #12
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	2108      	movs	r1, #8
 8002db4:	438a      	bics	r2, r1
 8002db6:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002db8:	2310      	movs	r3, #16
 8002dba:	18fa      	adds	r2, r7, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	f7ff ff72 	bl	8002caa <lis3dh_write_reg>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d108      	bne.n	8002de2 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	18fa      	adds	r2, r7, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	2123      	movs	r1, #35	; 0x23
 8002dda:	f7ff ff66 	bl	8002caa <lis3dh_write_reg>
 8002dde:	0003      	movs	r3, r0
 8002de0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002de2:	697b      	ldr	r3, [r7, #20]
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}

08002dec <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	000a      	movs	r2, r1
 8002df6:	1cfb      	adds	r3, r7, #3
 8002df8:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002dfa:	2408      	movs	r4, #8
 8002dfc:	193a      	adds	r2, r7, r4
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	2301      	movs	r3, #1
 8002e02:	2120      	movs	r1, #32
 8002e04:	f7ff ff30 	bl	8002c68 <lis3dh_read_reg>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8002e12:	1cfb      	adds	r3, r7, #3
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	220f      	movs	r2, #15
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	193b      	adds	r3, r7, r4
 8002e1e:	0110      	lsls	r0, r2, #4
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	210f      	movs	r1, #15
 8002e24:	400a      	ands	r2, r1
 8002e26:	1c11      	adds	r1, r2, #0
 8002e28:	1c02      	adds	r2, r0, #0
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002e2e:	193a      	adds	r2, r7, r4
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	2301      	movs	r3, #1
 8002e34:	2120      	movs	r1, #32
 8002e36:	f7ff ff38 	bl	8002caa <lis3dh_write_reg>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b005      	add	sp, #20
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	000a      	movs	r2, r1
 8002e52:	1cfb      	adds	r3, r7, #3
 8002e54:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002e56:	2408      	movs	r4, #8
 8002e58:	193a      	adds	r2, r7, r4
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	2123      	movs	r1, #35	; 0x23
 8002e60:	f7ff ff02 	bl	8002c68 <lis3dh_read_reg>
 8002e64:	0003      	movs	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d117      	bne.n	8002e9e <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8002e6e:	1cfb      	adds	r3, r7, #3
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2203      	movs	r2, #3
 8002e74:	4013      	ands	r3, r2
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	2103      	movs	r1, #3
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	0110      	lsls	r0, r2, #4
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	2130      	movs	r1, #48	; 0x30
 8002e84:	438a      	bics	r2, r1
 8002e86:	1c11      	adds	r1, r2, #0
 8002e88:	1c02      	adds	r2, r0, #0
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002e8e:	193a      	adds	r2, r7, r4
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	2301      	movs	r3, #1
 8002e94:	2123      	movs	r1, #35	; 0x23
 8002e96:	f7ff ff08 	bl	8002caa <lis3dh_write_reg>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b005      	add	sp, #20
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	000a      	movs	r2, r1
 8002eb2:	1cfb      	adds	r3, r7, #3
 8002eb4:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002eb6:	2408      	movs	r4, #8
 8002eb8:	193a      	adds	r2, r7, r4
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	2123      	movs	r1, #35	; 0x23
 8002ec0:	f7ff fed2 	bl	8002c68 <lis3dh_read_reg>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d115      	bne.n	8002efa <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 8002ece:	1cfb      	adds	r3, r7, #3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	01d0      	lsls	r0, r2, #7
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	217f      	movs	r1, #127	; 0x7f
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	1c11      	adds	r1, r2, #0
 8002ee4:	1c02      	adds	r2, r0, #0
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002eea:	193a      	adds	r2, r7, r4
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	2123      	movs	r1, #35	; 0x23
 8002ef2:	f7ff feda 	bl	8002caa <lis3dh_write_reg>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b005      	add	sp, #20
 8002f02:	bd90      	pop	{r4, r7, pc}

08002f04 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8002f0e:	240c      	movs	r4, #12
 8002f10:	193a      	adds	r2, r7, r4
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	2306      	movs	r3, #6
 8002f16:	2128      	movs	r1, #40	; 0x28
 8002f18:	f7ff fea6 	bl	8002c68 <lis3dh_read_reg>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002f20:	0021      	movs	r1, r4
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	785b      	ldrb	r3, [r3, #1]
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	5e9b      	ldrsh	r3, [r3, r2]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b21a      	sxth	r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002f48:	187b      	adds	r3, r7, r1
 8002f4a:	78da      	ldrb	r2, [r3, #3]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	3302      	adds	r3, #2
 8002f50:	b212      	sxth	r2, r2
 8002f52:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3302      	adds	r3, #2
 8002f58:	2200      	movs	r2, #0
 8002f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	18d3      	adds	r3, r2, r3
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3302      	adds	r3, #2
 8002f70:	b212      	sxth	r2, r2
 8002f72:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f74:	187b      	adds	r3, r7, r1
 8002f76:	795a      	ldrb	r2, [r3, #5]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	b212      	sxth	r2, r2
 8002f7e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	3304      	adds	r3, #4
 8002f84:	2200      	movs	r2, #0
 8002f86:	5e9b      	ldrsh	r3, [r3, r2]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	187b      	adds	r3, r7, r1
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	b212      	sxth	r2, r2
 8002f9e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002fa0:	697b      	ldr	r3, [r7, #20]
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b007      	add	sp, #28
 8002fa8:	bd90      	pop	{r4, r7, pc}

08002faa <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	210f      	movs	r1, #15
 8002fbc:	f7ff fe54 	bl	8002c68 <lis3dh_read_reg>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	60fb      	str	r3, [r7, #12]

  return ret;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <lis3dh_fifo_set>:
  * @param  val      change the values of fifo_en in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fce:	b590      	push	{r4, r7, lr}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	000a      	movs	r2, r1
 8002fd8:	1cfb      	adds	r3, r7, #3
 8002fda:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002fdc:	2408      	movs	r4, #8
 8002fde:	193a      	adds	r2, r7, r4
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2124      	movs	r1, #36	; 0x24
 8002fe6:	f7ff fe3f 	bl	8002c68 <lis3dh_read_reg>
 8002fea:	0003      	movs	r3, r0
 8002fec:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d117      	bne.n	8003024 <lis3dh_fifo_set+0x56>
  {
    ctrl_reg5.fifo_en = val;
 8002ff4:	1cfb      	adds	r3, r7, #3
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	193b      	adds	r3, r7, r4
 8003000:	2101      	movs	r1, #1
 8003002:	400a      	ands	r2, r1
 8003004:	0190      	lsls	r0, r2, #6
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	2140      	movs	r1, #64	; 0x40
 800300a:	438a      	bics	r2, r1
 800300c:	1c11      	adds	r1, r2, #0
 800300e:	1c02      	adds	r2, r0, #0
 8003010:	430a      	orrs	r2, r1
 8003012:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8003014:	193a      	adds	r2, r7, r4
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	2301      	movs	r3, #1
 800301a:	2124      	movs	r1, #36	; 0x24
 800301c:	f7ff fe45 	bl	8002caa <lis3dh_write_reg>
 8003020:	0003      	movs	r3, r0
 8003022:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b005      	add	sp, #20
 800302c:	bd90      	pop	{r4, r7, pc}

0800302e <lis3dh_fifo_watermark_set>:
  * @param  val      change the values of fth in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800302e:	b590      	push	{r4, r7, lr}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	000a      	movs	r2, r1
 8003038:	1cfb      	adds	r3, r7, #3
 800303a:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 800303c:	2408      	movs	r4, #8
 800303e:	193a      	adds	r2, r7, r4
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	2301      	movs	r3, #1
 8003044:	212e      	movs	r1, #46	; 0x2e
 8003046:	f7ff fe0f 	bl	8002c68 <lis3dh_read_reg>
 800304a:	0003      	movs	r3, r0
 800304c:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d117      	bne.n	8003084 <lis3dh_fifo_watermark_set+0x56>
  {
    fifo_ctrl_reg.fth = val;
 8003054:	1cfb      	adds	r3, r7, #3
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	221f      	movs	r2, #31
 800305a:	4013      	ands	r3, r2
 800305c:	b2da      	uxtb	r2, r3
 800305e:	193b      	adds	r3, r7, r4
 8003060:	211f      	movs	r1, #31
 8003062:	400a      	ands	r2, r1
 8003064:	0010      	movs	r0, r2
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	211f      	movs	r1, #31
 800306a:	438a      	bics	r2, r1
 800306c:	1c11      	adds	r1, r2, #0
 800306e:	1c02      	adds	r2, r0, #0
 8003070:	430a      	orrs	r2, r1
 8003072:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8003074:	193a      	adds	r2, r7, r4
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	2301      	movs	r3, #1
 800307a:	212e      	movs	r1, #46	; 0x2e
 800307c:	f7ff fe15 	bl	8002caa <lis3dh_write_reg>
 8003080:	0003      	movs	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8003084:	68fb      	ldr	r3, [r7, #12]
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b005      	add	sp, #20
 800308c:	bd90      	pop	{r4, r7, pc}

0800308e <lis3dh_fifo_mode_set>:
  * @param  val      change the values of fm in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_mode_set(stmdev_ctx_t *ctx, lis3dh_fm_t val)
{
 800308e:	b590      	push	{r4, r7, lr}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	000a      	movs	r2, r1
 8003098:	1cfb      	adds	r3, r7, #3
 800309a:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 800309c:	2408      	movs	r4, #8
 800309e:	193a      	adds	r2, r7, r4
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	2301      	movs	r3, #1
 80030a4:	212e      	movs	r1, #46	; 0x2e
 80030a6:	f7ff fddf 	bl	8002c68 <lis3dh_read_reg>
 80030aa:	0003      	movs	r3, r0
 80030ac:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d115      	bne.n	80030e0 <lis3dh_fifo_mode_set+0x52>
  {
    fifo_ctrl_reg.fm = (uint8_t)val;
 80030b4:	1cfb      	adds	r3, r7, #3
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	0190      	lsls	r0, r2, #6
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	213f      	movs	r1, #63	; 0x3f
 80030c6:	400a      	ands	r2, r1
 80030c8:	1c11      	adds	r1, r2, #0
 80030ca:	1c02      	adds	r2, r0, #0
 80030cc:	430a      	orrs	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 80030d0:	193a      	adds	r2, r7, r4
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	2301      	movs	r3, #1
 80030d6:	212e      	movs	r1, #46	; 0x2e
 80030d8:	f7ff fde7 	bl	8002caa <lis3dh_write_reg>
 80030dc:	0003      	movs	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 80030e0:	68fb      	ldr	r3, [r7, #12]
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b005      	add	sp, #20
 80030e8:	bd90      	pop	{r4, r7, pc}

080030ea <lis3dh_fifo_data_level_get>:
  * @param  val      change the values of fss in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80030ea:	b590      	push	{r4, r7, lr}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 80030f4:	2408      	movs	r4, #8
 80030f6:	193a      	adds	r2, r7, r4
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	2301      	movs	r3, #1
 80030fc:	212f      	movs	r1, #47	; 0x2f
 80030fe:	f7ff fdb3 	bl	8002c68 <lis3dh_read_reg>
 8003102:	0003      	movs	r3, r0
 8003104:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.fss;
 8003106:	193b      	adds	r3, r7, r4
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	06db      	lsls	r3, r3, #27
 800310c:	0edb      	lsrs	r3, r3, #27
 800310e:	b2db      	uxtb	r3, r3
 8003110:	001a      	movs	r2, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	701a      	strb	r2, [r3, #0]

  return ret;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b005      	add	sp, #20
 800311e:	bd90      	pop	{r4, r7, pc}

08003120 <lis3dh_fifo_fth_flag_get>:
  * @param  val      change the values of wtm in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_fth_flag_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 800312a:	2408      	movs	r4, #8
 800312c:	193a      	adds	r2, r7, r4
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	2301      	movs	r3, #1
 8003132:	212f      	movs	r1, #47	; 0x2f
 8003134:	f7ff fd98 	bl	8002c68 <lis3dh_read_reg>
 8003138:	0003      	movs	r3, r0
 800313a:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.wtm;
 800313c:	193b      	adds	r3, r7, r4
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	0fdb      	lsrs	r3, r3, #31
 8003144:	b2db      	uxtb	r3, r3
 8003146:	001a      	movs	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	701a      	strb	r2, [r3, #0]

  return ret;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b005      	add	sp, #20
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800315a:	f000 fb85 	bl	8003868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800315e:	f000 f80d 	bl	800317c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003162:	f7ff fb89 	bl	8002878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003166:	f000 fa9f 	bl	80036a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800316a:	f000 f867 	bl	800323c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800316e:	f005 f9bb 	bl	80084e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003172:	f7ff fa43 	bl	80025fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003176:	f005 f9d9 	bl	800852c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800317a:	e7fe      	b.n	800317a <main+0x24>

0800317c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b093      	sub	sp, #76	; 0x4c
 8003180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003182:	2410      	movs	r4, #16
 8003184:	193b      	adds	r3, r7, r4
 8003186:	0018      	movs	r0, r3
 8003188:	2338      	movs	r3, #56	; 0x38
 800318a:	001a      	movs	r2, r3
 800318c:	2100      	movs	r1, #0
 800318e:	f007 ffc9 	bl	800b124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003192:	003b      	movs	r3, r7
 8003194:	0018      	movs	r0, r3
 8003196:	2310      	movs	r3, #16
 8003198:	001a      	movs	r2, r3
 800319a:	2100      	movs	r1, #0
 800319c:	f007 ffc2 	bl	800b124 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 fee5 	bl	8003f74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	2202      	movs	r2, #2
 80031ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	0052      	lsls	r2, r2, #1
 80031b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	2200      	movs	r2, #0
 80031bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 ff1d 	bl	800400c <HAL_RCC_OscConfig>
 80031d2:	1e03      	subs	r3, r0, #0
 80031d4:	d001      	beq.n	80031da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80031d6:	f000 f82b 	bl	8003230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031da:	003b      	movs	r3, r7
 80031dc:	2207      	movs	r2, #7
 80031de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031e0:	003b      	movs	r3, r7
 80031e2:	2200      	movs	r2, #0
 80031e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e6:	003b      	movs	r3, r7
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031ec:	003b      	movs	r3, r7
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031f2:	003b      	movs	r3, r7
 80031f4:	2100      	movs	r1, #0
 80031f6:	0018      	movs	r0, r3
 80031f8:	f001 fa22 	bl	8004640 <HAL_RCC_ClockConfig>
 80031fc:	1e03      	subs	r3, r0, #0
 80031fe:	d001      	beq.n	8003204 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003200:	f000 f816 	bl	8003230 <Error_Handler>
  }
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b013      	add	sp, #76	; 0x4c
 800320a:	bd90      	pop	{r4, r7, pc}

0800320c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800321e:	f000 fb43 	bl	80038a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40001000 	.word	0x40001000

08003230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003234:	b672      	cpsid	i
}
 8003236:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003238:	e7fe      	b.n	8003238 <Error_Handler+0x8>
	...

0800323c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <MX_SPI1_Init+0x78>)
 8003244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003248:	2282      	movs	r2, #130	; 0x82
 800324a:	0052      	lsls	r2, r2, #1
 800324c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003256:	22e0      	movs	r2, #224	; 0xe0
 8003258:	00d2      	lsls	r2, r2, #3
 800325a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <MX_SPI1_Init+0x74>)
 800325e:	2202      	movs	r2, #2
 8003260:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003264:	2201      	movs	r2, #1
 8003266:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <MX_SPI1_Init+0x74>)
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	0092      	lsls	r2, r2, #2
 800326e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003270:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003276:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <MX_SPI1_Init+0x74>)
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003284:	2200      	movs	r2, #0
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <MX_SPI1_Init+0x74>)
 800328a:	2207      	movs	r2, #7
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <MX_SPI1_Init+0x74>)
 8003296:	2200      	movs	r2, #0
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <MX_SPI1_Init+0x74>)
 800329c:	0018      	movs	r0, r3
 800329e:	f001 fd5b 	bl	8004d58 <HAL_SPI_Init>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d001      	beq.n	80032aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80032a6:	f7ff ffc3 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000062c 	.word	0x2000062c
 80032b4:	40013000 	.word	0x40013000

080032b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b08b      	sub	sp, #44	; 0x2c
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	2414      	movs	r4, #20
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	0018      	movs	r0, r3
 80032c6:	2314      	movs	r3, #20
 80032c8:	001a      	movs	r2, r3
 80032ca:	2100      	movs	r1, #0
 80032cc:	f007 ff2a 	bl	800b124 <memset>
  if(spiHandle->Instance==SPI1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <HAL_SPI_MspInit+0x9c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d138      	bne.n	800334c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032da:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <HAL_SPI_MspInit+0xa0>)
 80032dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_SPI_MspInit+0xa0>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0149      	lsls	r1, r1, #5
 80032e4:	430a      	orrs	r2, r1
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_SPI_MspInit+0xa0>)
 80032ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_SPI_MspInit+0xa0>)
 80032f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_SPI_MspInit+0xa0>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	430a      	orrs	r2, r1
 8003300:	635a      	str	r2, [r3, #52]	; 0x34
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_SPI_MspInit+0xa0>)
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	2201      	movs	r2, #1
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800330e:	0021      	movs	r1, r4
 8003310:	187b      	adds	r3, r7, r1
 8003312:	22c2      	movs	r2, #194	; 0xc2
 8003314:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2202      	movs	r2, #2
 800331a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	187a      	adds	r2, r7, r1
 8003330:	23a0      	movs	r3, #160	; 0xa0
 8003332:	05db      	lsls	r3, r3, #23
 8003334:	0011      	movs	r1, r2
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fc4c 	bl	8003bd4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2103      	movs	r1, #3
 8003340:	2019      	movs	r0, #25
 8003342:	f000 fb55 	bl	80039f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003346:	2019      	movs	r0, #25
 8003348:	f000 fb67 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b00b      	add	sp, #44	; 0x2c
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	40013000 	.word	0x40013000
 8003358:	40021000 	.word	0x40021000

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <HAL_MspInit+0x50>)
 8003364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_MspInit+0x50>)
 8003368:	2101      	movs	r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <HAL_MspInit+0x50>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2201      	movs	r2, #1
 8003374:	4013      	ands	r3, r2
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_MspInit+0x50>)
 800337c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_MspInit+0x50>)
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	0549      	lsls	r1, r1, #21
 8003384:	430a      	orrs	r2, r1
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_MspInit+0x50>)
 800338a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	055b      	lsls	r3, r3, #21
 8003390:	4013      	ands	r3, r2
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003396:	2302      	movs	r3, #2
 8003398:	425b      	negs	r3, r3
 800339a:	2200      	movs	r2, #0
 800339c:	2103      	movs	r1, #3
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 fb26 	bl	80039f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b08c      	sub	sp, #48	; 0x30
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80033b8:	232b      	movs	r3, #43	; 0x2b
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033c0:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <HAL_InitTick+0xf0>)
 80033c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_InitTick+0xf0>)
 80033c6:	2110      	movs	r1, #16
 80033c8:	430a      	orrs	r2, r1
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_InitTick+0xf0>)
 80033ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d0:	2210      	movs	r2, #16
 80033d2:	4013      	ands	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033d8:	230c      	movs	r3, #12
 80033da:	18fa      	adds	r2, r7, r3
 80033dc:	2410      	movs	r4, #16
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	0011      	movs	r1, r2
 80033e2:	0018      	movs	r0, r3
 80033e4:	f001 fad6 	bl	8004994 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033f4:	f001 fab8 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80033f8:	0003      	movs	r3, r0
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fc:	e004      	b.n	8003408 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033fe:	f001 fab3 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8003402:	0003      	movs	r3, r0
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	4926      	ldr	r1, [pc, #152]	; (80034a4 <HAL_InitTick+0xf4>)
 800340c:	0018      	movs	r0, r3
 800340e:	f7fc fe97 	bl	8000140 <__udivsi3>
 8003412:	0003      	movs	r3, r0
 8003414:	3b01      	subs	r3, #1
 8003416:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003418:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_InitTick+0xf8>)
 800341a:	4a24      	ldr	r2, [pc, #144]	; (80034ac <HAL_InitTick+0xfc>)
 800341c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_InitTick+0xf8>)
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_InitTick+0x100>)
 8003422:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_InitTick+0xf8>)
 8003426:	6a3a      	ldr	r2, [r7, #32]
 8003428:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_InitTick+0xf8>)
 800342c:	2200      	movs	r2, #0
 800342e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_InitTick+0xf8>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_InitTick+0xf8>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800343c:	252b      	movs	r5, #43	; 0x2b
 800343e:	197c      	adds	r4, r7, r5
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_InitTick+0xf8>)
 8003442:	0018      	movs	r0, r3
 8003444:	f002 fca6 	bl	8005d94 <HAL_TIM_Base_Init>
 8003448:	0003      	movs	r3, r0
 800344a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800344c:	197b      	adds	r3, r7, r5
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11e      	bne.n	8003492 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003454:	197c      	adds	r4, r7, r5
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_InitTick+0xf8>)
 8003458:	0018      	movs	r0, r3
 800345a:	f002 fcfb 	bl	8005e54 <HAL_TIM_Base_Start_IT>
 800345e:	0003      	movs	r3, r0
 8003460:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8003462:	197b      	adds	r3, r7, r5
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d113      	bne.n	8003492 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800346a:	2011      	movs	r0, #17
 800346c:	f000 fad5 	bl	8003a1a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d809      	bhi.n	800348a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	0019      	movs	r1, r3
 800347c:	2011      	movs	r0, #17
 800347e:	f000 fab7 	bl	80039f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_InitTick+0x104>)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e003      	b.n	8003492 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800348a:	232b      	movs	r3, #43	; 0x2b
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8003492:	232b      	movs	r3, #43	; 0x2b
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	781b      	ldrb	r3, [r3, #0]
}
 8003498:	0018      	movs	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	b00c      	add	sp, #48	; 0x30
 800349e:	bdb0      	pop	{r4, r5, r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	000f4240 	.word	0x000f4240
 80034a8:	20000690 	.word	0x20000690
 80034ac:	40001000 	.word	0x40001000
 80034b0:	000003e7 	.word	0x000003e7
 80034b4:	20000008 	.word	0x20000008

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <NMI_Handler+0x4>

080034be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <HardFault_Handler+0x4>

080034c4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	019b      	lsls	r3, r3, #6
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fd1d 	bl	8003f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f002 fd14 	bl	8005f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	20000690 	.word	0x20000690

080034f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <SPI1_IRQHandler+0x14>)
 80034f6:	0018      	movs	r0, r3
 80034f8:	f002 f95c 	bl	80057b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	2000062c 	.word	0x2000062c

08003508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <USART2_IRQHandler+0x14>)
 800350e:	0018      	movs	r0, r3
 8003510:	f003 f836 	bl	8006580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	200006e0 	.word	0x200006e0

08003520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  return 1;
 8003524:	2301      	movs	r3, #1
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_kill>:

int _kill(int pid, int sig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003536:	f007 fcbd 	bl	800aeb4 <__errno>
 800353a:	0003      	movs	r3, r0
 800353c:	2216      	movs	r2, #22
 800353e:	601a      	str	r2, [r3, #0]
  return -1;
 8003540:	2301      	movs	r3, #1
 8003542:	425b      	negs	r3, r3
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <_exit>:

void _exit (int status)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003554:	2301      	movs	r3, #1
 8003556:	425a      	negs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ffe5 	bl	800352c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003562:	e7fe      	b.n	8003562 <_exit+0x16>

08003564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e00a      	b.n	800358c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003576:	e000      	b.n	800357a <_read+0x16>
 8003578:	bf00      	nop
 800357a:	0001      	movs	r1, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	60ba      	str	r2, [r7, #8]
 8003582:	b2ca      	uxtb	r2, r1
 8003584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	dbf0      	blt.n	8003576 <_read+0x12>
  }

  return len;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b006      	add	sp, #24
 800359c:	bd80      	pop	{r7, pc}

0800359e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e009      	b.n	80035c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	60ba      	str	r2, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	0018      	movs	r0, r3
 80035ba:	e000      	b.n	80035be <_write+0x20>
 80035bc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dbf1      	blt.n	80035b0 <_write+0x12>
  }
  return len;
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b006      	add	sp, #24
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_close>:

int _close(int file)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035de:	2301      	movs	r3, #1
 80035e0:	425b      	negs	r3, r3
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b002      	add	sp, #8
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0192      	lsls	r2, r2, #6
 80035fa:	605a      	str	r2, [r3, #4]
  return 0;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}

08003606 <_isatty>:

int _isatty(int file)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800360e:	2301      	movs	r3, #1
}
 8003610:	0018      	movs	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003624:	2300      	movs	r3, #0
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <_sbrk+0x5c>)
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <_sbrk+0x60>)
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <_sbrk+0x64>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800364c:	4b11      	ldr	r3, [pc, #68]	; (8003694 <_sbrk+0x64>)
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <_sbrk+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <_sbrk+0x64>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	18d3      	adds	r3, r2, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	429a      	cmp	r2, r3
 800365e:	d207      	bcs.n	8003670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003660:	f007 fc28 	bl	800aeb4 <__errno>
 8003664:	0003      	movs	r3, r0
 8003666:	220c      	movs	r2, #12
 8003668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800366a:	2301      	movs	r3, #1
 800366c:	425b      	negs	r3, r3
 800366e:	e009      	b.n	8003684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <_sbrk+0x64>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <_sbrk+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	18d2      	adds	r2, r2, r3
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <_sbrk+0x64>)
 8003680:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20009000 	.word	0x20009000
 8003690:	00000400 	.word	0x00000400
 8003694:	200006dc 	.word	0x200006dc
 8003698:	20002d90 	.word	0x20002d90

0800369c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <MX_USART2_UART_Init+0x98>)
 80036b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036b4:	22e1      	movs	r2, #225	; 0xe1
 80036b6:	0252      	lsls	r2, r2, #9
 80036b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036ce:	220c      	movs	r2, #12
 80036d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <MX_USART2_UART_Init+0x94>)
 80036f2:	0018      	movs	r0, r3
 80036f4:	f002 fdf4 	bl	80062e0 <HAL_UART_Init>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80036fc:	f7ff fd98 	bl	8003230 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <MX_USART2_UART_Init+0x94>)
 8003702:	2100      	movs	r1, #0
 8003704:	0018      	movs	r0, r3
 8003706:	f004 fd85 	bl	8008214 <HAL_UARTEx_SetTxFifoThreshold>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800370e:	f7ff fd8f 	bl	8003230 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <MX_USART2_UART_Init+0x94>)
 8003714:	2100      	movs	r1, #0
 8003716:	0018      	movs	r0, r3
 8003718:	f004 fdbc 	bl	8008294 <HAL_UARTEx_SetRxFifoThreshold>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d001      	beq.n	8003724 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003720:	f7ff fd86 	bl	8003230 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <MX_USART2_UART_Init+0x94>)
 8003726:	0018      	movs	r0, r3
 8003728:	f004 fd3a 	bl	80081a0 <HAL_UARTEx_DisableFifoMode>
 800372c:	1e03      	subs	r3, r0, #0
 800372e:	d001      	beq.n	8003734 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003730:	f7ff fd7e 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	200006e0 	.word	0x200006e0
 8003740:	40004400 	.word	0x40004400

08003744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b097      	sub	sp, #92	; 0x5c
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	2344      	movs	r3, #68	; 0x44
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	0018      	movs	r0, r3
 8003752:	2314      	movs	r3, #20
 8003754:	001a      	movs	r2, r3
 8003756:	2100      	movs	r1, #0
 8003758:	f007 fce4 	bl	800b124 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800375c:	2410      	movs	r4, #16
 800375e:	193b      	adds	r3, r7, r4
 8003760:	0018      	movs	r0, r3
 8003762:	2334      	movs	r3, #52	; 0x34
 8003764:	001a      	movs	r2, r3
 8003766:	2100      	movs	r1, #0
 8003768:	f007 fcdc 	bl	800b124 <memset>
  if(uartHandle->Instance==USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_UART_MspInit+0xc8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d146      	bne.n	8003804 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003776:	193b      	adds	r3, r7, r4
 8003778:	2202      	movs	r2, #2
 800377a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800377c:	193b      	adds	r3, r7, r4
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003782:	193b      	adds	r3, r7, r4
 8003784:	0018      	movs	r0, r3
 8003786:	f001 f92f 	bl	80049e8 <HAL_RCCEx_PeriphCLKConfig>
 800378a:	1e03      	subs	r3, r0, #0
 800378c:	d001      	beq.n	8003792 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800378e:	f7ff fd4f 	bl	8003230 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_UART_MspInit+0xcc>)
 8003794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_UART_MspInit+0xcc>)
 8003798:	2180      	movs	r1, #128	; 0x80
 800379a:	0289      	lsls	r1, r1, #10
 800379c:	430a      	orrs	r2, r1
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_UART_MspInit+0xcc>)
 80037a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	029b      	lsls	r3, r3, #10
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <HAL_UART_MspInit+0xcc>)
 80037b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b2:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_UART_MspInit+0xcc>)
 80037b4:	2101      	movs	r1, #1
 80037b6:	430a      	orrs	r2, r1
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <HAL_UART_MspInit+0xcc>)
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	2201      	movs	r2, #1
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80037c6:	2144      	movs	r1, #68	; 0x44
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	220c      	movs	r2, #12
 80037cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	2202      	movs	r2, #2
 80037d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	2201      	movs	r2, #1
 80037d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	187b      	adds	r3, r7, r1
 80037dc:	2200      	movs	r2, #0
 80037de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2201      	movs	r2, #1
 80037e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	187a      	adds	r2, r7, r1
 80037e8:	23a0      	movs	r3, #160	; 0xa0
 80037ea:	05db      	lsls	r3, r3, #23
 80037ec:	0011      	movs	r1, r2
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 f9f0 	bl	8003bd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80037f4:	2200      	movs	r2, #0
 80037f6:	2103      	movs	r1, #3
 80037f8:	201c      	movs	r0, #28
 80037fa:	f000 f8f9 	bl	80039f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037fe:	201c      	movs	r0, #28
 8003800:	f000 f90b 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b017      	add	sp, #92	; 0x5c
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	40004400 	.word	0x40004400
 8003810:	40021000 	.word	0x40021000

08003814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003816:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003818:	f7ff ff40 	bl	800369c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <LoopForever+0x6>)
  ldr r1, =_edata
 800381e:	490d      	ldr	r1, [pc, #52]	; (8003854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003820:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <LoopForever+0xe>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003824:	e002      	b.n	800382c <LoopCopyDataInit>

08003826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382a:	3304      	adds	r3, #4

0800382c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800382c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800382e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003830:	d3f9      	bcc.n	8003826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003834:	4c0a      	ldr	r4, [pc, #40]	; (8003860 <LoopForever+0x16>)
  movs r3, #0
 8003836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003838:	e001      	b.n	800383e <LoopFillZerobss>

0800383a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800383c:	3204      	adds	r2, #4

0800383e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800383e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003840:	d3fb      	bcc.n	800383a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003842:	f007 fc3f 	bl	800b0c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003846:	f7ff fc86 	bl	8003156 <main>

0800384a <LoopForever>:

LoopForever:
  b LoopForever
 800384a:	e7fe      	b.n	800384a <LoopForever>
  ldr   r0, =_estack
 800384c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003854:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003858:	0800e6ac 	.word	0x0800e6ac
  ldr r2, =_sbss
 800385c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003860:	20002d90 	.word	0x20002d90

08003864 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC1_COMP_IRQHandler>
	...

08003868 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_Init+0x3c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <HAL_Init+0x3c>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	0049      	lsls	r1, r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003882:	2003      	movs	r0, #3
 8003884:	f7ff fd94 	bl	80033b0 <HAL_InitTick>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d003      	beq.n	8003894 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e001      	b.n	8003898 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003894:	f7ff fd62 	bl	800335c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	781b      	ldrb	r3, [r3, #0]
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40022000 	.word	0x40022000

080038a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_IncTick+0x1c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	001a      	movs	r2, r3
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_IncTick+0x20>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	18d2      	adds	r2, r2, r3
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_IncTick+0x20>)
 80038ba:	601a      	str	r2, [r3, #0]
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	2000000c 	.word	0x2000000c
 80038c8:	20000774 	.word	0x20000774

080038cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  return uwTick;
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <HAL_GetTick+0x10>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20000774 	.word	0x20000774

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	0002      	movs	r2, r0
 80038e8:	1dfb      	adds	r3, r7, #7
 80038ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b7f      	cmp	r3, #127	; 0x7f
 80038f2:	d809      	bhi.n	8003908 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f4:	1dfb      	adds	r3, r7, #7
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	001a      	movs	r2, r3
 80038fa:	231f      	movs	r3, #31
 80038fc:	401a      	ands	r2, r3
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <__NVIC_EnableIRQ+0x30>)
 8003900:	2101      	movs	r1, #1
 8003902:	4091      	lsls	r1, r2
 8003904:	000a      	movs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}
 8003910:	e000e100 	.word	0xe000e100

08003914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003922:	1dfb      	adds	r3, r7, #7
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b7f      	cmp	r3, #127	; 0x7f
 8003928:	d828      	bhi.n	800397c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800392a:	4a2f      	ldr	r2, [pc, #188]	; (80039e8 <__NVIC_SetPriority+0xd4>)
 800392c:	1dfb      	adds	r3, r7, #7
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b25b      	sxtb	r3, r3
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	33c0      	adds	r3, #192	; 0xc0
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	589b      	ldr	r3, [r3, r2]
 800393a:	1dfa      	adds	r2, r7, #7
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	0011      	movs	r1, r2
 8003940:	2203      	movs	r2, #3
 8003942:	400a      	ands	r2, r1
 8003944:	00d2      	lsls	r2, r2, #3
 8003946:	21ff      	movs	r1, #255	; 0xff
 8003948:	4091      	lsls	r1, r2
 800394a:	000a      	movs	r2, r1
 800394c:	43d2      	mvns	r2, r2
 800394e:	401a      	ands	r2, r3
 8003950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	401a      	ands	r2, r3
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	2303      	movs	r3, #3
 8003962:	4003      	ands	r3, r0
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003968:	481f      	ldr	r0, [pc, #124]	; (80039e8 <__NVIC_SetPriority+0xd4>)
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b25b      	sxtb	r3, r3
 8003970:	089b      	lsrs	r3, r3, #2
 8003972:	430a      	orrs	r2, r1
 8003974:	33c0      	adds	r3, #192	; 0xc0
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800397a:	e031      	b.n	80039e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800397c:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <__NVIC_SetPriority+0xd8>)
 800397e:	1dfb      	adds	r3, r7, #7
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	0019      	movs	r1, r3
 8003984:	230f      	movs	r3, #15
 8003986:	400b      	ands	r3, r1
 8003988:	3b08      	subs	r3, #8
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3306      	adds	r3, #6
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	18d3      	adds	r3, r2, r3
 8003992:	3304      	adds	r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1dfa      	adds	r2, r7, #7
 8003998:	7812      	ldrb	r2, [r2, #0]
 800399a:	0011      	movs	r1, r2
 800399c:	2203      	movs	r2, #3
 800399e:	400a      	ands	r2, r1
 80039a0:	00d2      	lsls	r2, r2, #3
 80039a2:	21ff      	movs	r1, #255	; 0xff
 80039a4:	4091      	lsls	r1, r2
 80039a6:	000a      	movs	r2, r1
 80039a8:	43d2      	mvns	r2, r2
 80039aa:	401a      	ands	r2, r3
 80039ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	401a      	ands	r2, r3
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	2303      	movs	r3, #3
 80039be:	4003      	ands	r3, r0
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039c4:	4809      	ldr	r0, [pc, #36]	; (80039ec <__NVIC_SetPriority+0xd8>)
 80039c6:	1dfb      	adds	r3, r7, #7
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	001c      	movs	r4, r3
 80039cc:	230f      	movs	r3, #15
 80039ce:	4023      	ands	r3, r4
 80039d0:	3b08      	subs	r3, #8
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	430a      	orrs	r2, r1
 80039d6:	3306      	adds	r3, #6
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	18c3      	adds	r3, r0, r3
 80039dc:	3304      	adds	r3, #4
 80039de:	601a      	str	r2, [r3, #0]
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b003      	add	sp, #12
 80039e6:	bd90      	pop	{r4, r7, pc}
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	210f      	movs	r1, #15
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	1c02      	adds	r2, r0, #0
 8003a00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b25b      	sxtb	r3, r3
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff ff81 	bl	8003914 <__NVIC_SetPriority>
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b004      	add	sp, #16
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	0002      	movs	r2, r0
 8003a22:	1dfb      	adds	r3, r7, #7
 8003a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b25b      	sxtb	r3, r3
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff ff57 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e050      	b.n	8003af0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2225      	movs	r2, #37	; 0x25
 8003a52:	5c9b      	ldrb	r3, [r3, r2]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d008      	beq.n	8003a6c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	2100      	movs	r1, #0
 8003a66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e041      	b.n	8003af0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	210e      	movs	r1, #14
 8003a78:	438a      	bics	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	491c      	ldr	r1, [pc, #112]	; (8003af8 <HAL_DMA_Abort+0xbc>)
 8003a88:	400a      	ands	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	438a      	bics	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <HAL_DMA_Abort+0xc0>)
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	221c      	movs	r2, #28
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_DMA_Abort+0xc0>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00c      	beq.n	8003ade <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <HAL_DMA_Abort+0xbc>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003adc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2225      	movs	r2, #37	; 0x25
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2224      	movs	r2, #36	; 0x24
 8003aea:	2100      	movs	r1, #0
 8003aec:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	fffffeff 	.word	0xfffffeff
 8003afc:	40020000 	.word	0x40020000

08003b00 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b08:	210f      	movs	r1, #15
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2225      	movs	r2, #37	; 0x25
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d006      	beq.n	8003b2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e049      	b.n	8003bbe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	210e      	movs	r1, #14
 8003b36:	438a      	bics	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	438a      	bics	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b54:	491d      	ldr	r1, [pc, #116]	; (8003bcc <HAL_DMA_Abort_IT+0xcc>)
 8003b56:	400a      	ands	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_DMA_Abort_IT+0xd0>)
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	221c      	movs	r2, #28
 8003b64:	4013      	ands	r3, r2
 8003b66:	2201      	movs	r2, #1
 8003b68:	409a      	lsls	r2, r3
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <HAL_DMA_Abort_IT+0xd0>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b78:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	490f      	ldr	r1, [pc, #60]	; (8003bcc <HAL_DMA_Abort_IT+0xcc>)
 8003b8e:	400a      	ands	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b9a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2225      	movs	r2, #37	; 0x25
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	0010      	movs	r0, r2
 8003bbc:	4798      	blx	r3
    }
  }
  return status;
 8003bbe:	230f      	movs	r3, #15
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	781b      	ldrb	r3, [r3, #0]
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	fffffeff 	.word	0xfffffeff
 8003bd0:	40020000 	.word	0x40020000

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be2:	e147      	b.n	8003e74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4091      	lsls	r1, r2
 8003bee:	000a      	movs	r2, r1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_GPIO_Init+0x28>
 8003bfa:	e138      	b.n	8003e6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d005      	beq.n	8003c14 <HAL_GPIO_Init+0x40>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d130      	bne.n	8003c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	43da      	mvns	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	43da      	mvns	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	2201      	movs	r2, #1
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	43da      	mvns	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d123      	bne.n	8003d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	58d3      	ldr	r3, [r2, r3]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2207      	movs	r2, #7
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2107      	movs	r1, #7
 8003cea:	400b      	ands	r3, r1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	43da      	mvns	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	401a      	ands	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	23c0      	movs	r3, #192	; 0xc0
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d100      	bne.n	8003d48 <HAL_GPIO_Init+0x174>
 8003d46:	e092      	b.n	8003e6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d48:	4a50      	ldr	r2, [pc, #320]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3318      	adds	r3, #24
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	589b      	ldr	r3, [r3, r2]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2203      	movs	r2, #3
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	220f      	movs	r2, #15
 8003d60:	409a      	lsls	r2, r3
 8003d62:	0013      	movs	r3, r2
 8003d64:	43da      	mvns	r2, r3
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	23a0      	movs	r3, #160	; 0xa0
 8003d70:	05db      	lsls	r3, r3, #23
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d013      	beq.n	8003d9e <HAL_GPIO_Init+0x1ca>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <HAL_GPIO_Init+0x2bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00d      	beq.n	8003d9a <HAL_GPIO_Init+0x1c6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a44      	ldr	r2, [pc, #272]	; (8003e94 <HAL_GPIO_Init+0x2c0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <HAL_GPIO_Init+0x1c2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_GPIO_Init+0x2c4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_GPIO_Init+0x1be>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e006      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d92:	2305      	movs	r3, #5
 8003d94:	e004      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e002      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_GPIO_Init+0x1cc>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	2103      	movs	r1, #3
 8003da4:	400a      	ands	r2, r1
 8003da6:	00d2      	lsls	r2, r2, #3
 8003da8:	4093      	lsls	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003db0:	4936      	ldr	r1, [pc, #216]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	089b      	lsrs	r3, r3, #2
 8003db6:	3318      	adds	r3, #24
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dbe:	4b33      	ldr	r3, [pc, #204]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	035b      	lsls	r3, r3, #13
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003de2:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003de8:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	43da      	mvns	r2, r3
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	039b      	lsls	r3, r3, #14
 8003e00:	4013      	ands	r3, r2
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e14:	2384      	movs	r3, #132	; 0x84
 8003e16:	58d3      	ldr	r3, [r2, r3]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e38:	4914      	ldr	r1, [pc, #80]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e3a:	2284      	movs	r2, #132	; 0x84
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e40:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	58d3      	ldr	r3, [r2, r3]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	025b      	lsls	r3, r3, #9
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e66:	4909      	ldr	r1, [pc, #36]	; (8003e8c <HAL_GPIO_Init+0x2b8>)
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3301      	adds	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	40da      	lsrs	r2, r3
 8003e7c:	1e13      	subs	r3, r2, #0
 8003e7e:	d000      	beq.n	8003e82 <HAL_GPIO_Init+0x2ae>
 8003e80:	e6b0      	b.n	8003be4 <HAL_GPIO_Init+0x10>
  }
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b006      	add	sp, #24
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021800 	.word	0x40021800
 8003e90:	50000400 	.word	0x50000400
 8003e94:	50000800 	.word	0x50000800
 8003e98:	50000c00 	.word	0x50000c00

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	0008      	movs	r0, r1
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	1cbb      	adds	r3, r7, #2
 8003eaa:	1c02      	adds	r2, r0, #0
 8003eac:	801a      	strh	r2, [r3, #0]
 8003eae:	1c7b      	adds	r3, r7, #1
 8003eb0:	1c0a      	adds	r2, r1, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb4:	1c7b      	adds	r3, r7, #1
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d004      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebc:	1cbb      	adds	r3, r7, #2
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e003      	b.n	8003ece <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	881a      	ldrh	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	000a      	movs	r2, r1
 8003ee0:	1cbb      	adds	r3, r7, #2
 8003ee2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eea:	1cbb      	adds	r3, r7, #2
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	041a      	lsls	r2, r3, #16
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	1cb9      	adds	r1, r7, #2
 8003efa:	8809      	ldrh	r1, [r1, #0]
 8003efc:	400b      	ands	r3, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b004      	add	sp, #16
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	0002      	movs	r2, r0
 8003f14:	1dbb      	adds	r3, r7, #6
 8003f16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	1dba      	adds	r2, r7, #6
 8003f1e:	8812      	ldrh	r2, [r2, #0]
 8003f20:	4013      	ands	r3, r2
 8003f22:	d008      	beq.n	8003f36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003f24:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f26:	1dba      	adds	r2, r7, #6
 8003f28:	8812      	ldrh	r2, [r2, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003f2c:	1dbb      	adds	r3, r7, #6
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f815 	bl	8003f60 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	1dba      	adds	r2, r7, #6
 8003f3c:	8812      	ldrh	r2, [r2, #0]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d008      	beq.n	8003f54 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f44:	1dba      	adds	r2, r7, #6
 8003f46:	8812      	ldrh	r2, [r2, #0]
 8003f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003f4a:	1dbb      	adds	r3, r7, #6
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7fe fbb6 	bl	80026c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003f54:	46c0      	nop			; (mov r8, r8)
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b002      	add	sp, #8
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021800 	.word	0x40021800

08003f60 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	0002      	movs	r2, r0
 8003f68:	1dbb      	adds	r3, r7, #6
 8003f6a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d11f      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4912      	ldr	r1, [pc, #72]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7fc f8ca 	bl	8000140 <__udivsi3>
 8003fac:	0003      	movs	r3, r0
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb2:	e008      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e001      	b.n	8003fc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e009      	b.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	401a      	ands	r2, r3
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d0ed      	beq.n	8003fb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	fffff9ff 	.word	0xfffff9ff
 8003fec:	20000004 	.word	0x20000004
 8003ff0:	000f4240 	.word	0x000f4240

08003ff4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	23e0      	movs	r3, #224	; 0xe0
 8003ffe:	01db      	lsls	r3, r3, #7
 8004000:	4013      	ands	r3, r2
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000

0800400c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e2fe      	b.n	800461c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2201      	movs	r2, #1
 8004024:	4013      	ands	r3, r2
 8004026:	d100      	bne.n	800402a <HAL_RCC_OscConfig+0x1e>
 8004028:	e07c      	b.n	8004124 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800402a:	4bc3      	ldr	r3, [pc, #780]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2238      	movs	r2, #56	; 0x38
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004034:	4bc0      	ldr	r3, [pc, #768]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2203      	movs	r2, #3
 800403a:	4013      	ands	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b10      	cmp	r3, #16
 8004042:	d102      	bne.n	800404a <HAL_RCC_OscConfig+0x3e>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d002      	beq.n	8004050 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4bb9      	ldr	r3, [pc, #740]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	4013      	ands	r3, r2
 800405a:	d062      	beq.n	8004122 <HAL_RCC_OscConfig+0x116>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15e      	bne.n	8004122 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e2d9      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	025b      	lsls	r3, r3, #9
 8004070:	429a      	cmp	r2, r3
 8004072:	d107      	bne.n	8004084 <HAL_RCC_OscConfig+0x78>
 8004074:	4bb0      	ldr	r3, [pc, #704]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4baf      	ldr	r3, [pc, #700]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0249      	lsls	r1, r1, #9
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e020      	b.n	80040c6 <HAL_RCC_OscConfig+0xba>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	23a0      	movs	r3, #160	; 0xa0
 800408a:	02db      	lsls	r3, r3, #11
 800408c:	429a      	cmp	r2, r3
 800408e:	d10e      	bne.n	80040ae <HAL_RCC_OscConfig+0xa2>
 8004090:	4ba9      	ldr	r3, [pc, #676]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4ba8      	ldr	r3, [pc, #672]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	02c9      	lsls	r1, r1, #11
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	4ba6      	ldr	r3, [pc, #664]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4ba5      	ldr	r3, [pc, #660]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	0249      	lsls	r1, r1, #9
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0xba>
 80040ae:	4ba2      	ldr	r3, [pc, #648]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4ba1      	ldr	r3, [pc, #644]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040b4:	49a1      	ldr	r1, [pc, #644]	; (800433c <HAL_RCC_OscConfig+0x330>)
 80040b6:	400a      	ands	r2, r1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4b9f      	ldr	r3, [pc, #636]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b9e      	ldr	r3, [pc, #632]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040c0:	499f      	ldr	r1, [pc, #636]	; (8004340 <HAL_RCC_OscConfig+0x334>)
 80040c2:	400a      	ands	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d014      	beq.n	80040f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7ff fbfd 	bl	80038cc <HAL_GetTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7ff fbf8 	bl	80038cc <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e298      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ea:	4b93      	ldr	r3, [pc, #588]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	4013      	ands	r3, r2
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0xcc>
 80040f6:	e015      	b.n	8004124 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7ff fbe8 	bl	80038cc <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004102:	f7ff fbe3 	bl	80038cc <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e283      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	029b      	lsls	r3, r3, #10
 800411c:	4013      	ands	r3, r2
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0xf6>
 8004120:	e000      	b.n	8004124 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2202      	movs	r2, #2
 800412a:	4013      	ands	r3, r2
 800412c:	d100      	bne.n	8004130 <HAL_RCC_OscConfig+0x124>
 800412e:	e099      	b.n	8004264 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004130:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2238      	movs	r2, #56	; 0x38
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800413a:	4b7f      	ldr	r3, [pc, #508]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2203      	movs	r2, #3
 8004140:	4013      	ands	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b10      	cmp	r3, #16
 8004148:	d102      	bne.n	8004150 <HAL_RCC_OscConfig+0x144>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d002      	beq.n	8004156 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d135      	bne.n	80041c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004156:	4b78      	ldr	r3, [pc, #480]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4013      	ands	r3, r2
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x162>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e256      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b72      	ldr	r3, [pc, #456]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a74      	ldr	r2, [pc, #464]	; (8004344 <HAL_RCC_OscConfig+0x338>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	021a      	lsls	r2, r3, #8
 800417e:	4b6e      	ldr	r3, [pc, #440]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004180:	430a      	orrs	r2, r1
 8004182:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d112      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800418a:	4b6b      	ldr	r3, [pc, #428]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6e      	ldr	r2, [pc, #440]	; (8004348 <HAL_RCC_OscConfig+0x33c>)
 8004190:	4013      	ands	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	4b67      	ldr	r3, [pc, #412]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800419e:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0adb      	lsrs	r3, r3, #11
 80041a4:	2207      	movs	r2, #7
 80041a6:	4013      	ands	r3, r2
 80041a8:	4a68      	ldr	r2, [pc, #416]	; (800434c <HAL_RCC_OscConfig+0x340>)
 80041aa:	40da      	lsrs	r2, r3
 80041ac:	4b68      	ldr	r3, [pc, #416]	; (8004350 <HAL_RCC_OscConfig+0x344>)
 80041ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041b0:	4b68      	ldr	r3, [pc, #416]	; (8004354 <HAL_RCC_OscConfig+0x348>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff f8fb 	bl	80033b0 <HAL_InitTick>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d051      	beq.n	8004262 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e22c      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d030      	beq.n	800422c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041ca:	4b5b      	ldr	r3, [pc, #364]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a5e      	ldr	r2, [pc, #376]	; (8004348 <HAL_RCC_OscConfig+0x33c>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	0019      	movs	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	4b57      	ldr	r3, [pc, #348]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80041de:	4b56      	ldr	r3, [pc, #344]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b55      	ldr	r3, [pc, #340]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	0049      	lsls	r1, r1, #1
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7ff fb6e 	bl	80038cc <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f6:	f7ff fb69 	bl	80038cc <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e209      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4013      	ands	r3, r2
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004214:	4b48      	ldr	r3, [pc, #288]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <HAL_RCC_OscConfig+0x338>)
 800421a:	4013      	ands	r3, r2
 800421c:	0019      	movs	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	4b44      	ldr	r3, [pc, #272]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	e01b      	b.n	8004264 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800422c:	4b42      	ldr	r3, [pc, #264]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004232:	4949      	ldr	r1, [pc, #292]	; (8004358 <HAL_RCC_OscConfig+0x34c>)
 8004234:	400a      	ands	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7ff fb48 	bl	80038cc <HAL_GetTick>
 800423c:	0003      	movs	r3, r0
 800423e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004242:	f7ff fb43 	bl	80038cc <HAL_GetTick>
 8004246:	0002      	movs	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e1e3      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004254:	4b38      	ldr	r3, [pc, #224]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4013      	ands	r3, r2
 800425e:	d1f0      	bne.n	8004242 <HAL_RCC_OscConfig+0x236>
 8004260:	e000      	b.n	8004264 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004262:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2208      	movs	r2, #8
 800426a:	4013      	ands	r3, r2
 800426c:	d047      	beq.n	80042fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800426e:	4b32      	ldr	r3, [pc, #200]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2238      	movs	r2, #56	; 0x38
 8004274:	4013      	ands	r3, r2
 8004276:	2b18      	cmp	r3, #24
 8004278:	d10a      	bne.n	8004290 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800427a:	4b2f      	ldr	r3, [pc, #188]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	2202      	movs	r2, #2
 8004280:	4013      	ands	r3, r2
 8004282:	d03c      	beq.n	80042fe <HAL_RCC_OscConfig+0x2f2>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d138      	bne.n	80042fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e1c5      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d019      	beq.n	80042cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800429a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800429c:	4b26      	ldr	r3, [pc, #152]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 800429e:	2101      	movs	r1, #1
 80042a0:	430a      	orrs	r2, r1
 80042a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7ff fb12 	bl	80038cc <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ae:	f7ff fb0d 	bl	80038cc <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e1ad      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	2202      	movs	r2, #2
 80042c6:	4013      	ands	r3, r2
 80042c8:	d0f1      	beq.n	80042ae <HAL_RCC_OscConfig+0x2a2>
 80042ca:	e018      	b.n	80042fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80042ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042d0:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80042d2:	2101      	movs	r1, #1
 80042d4:	438a      	bics	r2, r1
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7ff faf8 	bl	80038cc <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e2:	f7ff faf3 	bl	80038cc <HAL_GetTick>
 80042e6:	0002      	movs	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e193      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 80042f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f8:	2202      	movs	r2, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d1f1      	bne.n	80042e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	d100      	bne.n	800430a <HAL_RCC_OscConfig+0x2fe>
 8004308:	e0c6      	b.n	8004498 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	231f      	movs	r3, #31
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2238      	movs	r2, #56	; 0x38
 8004318:	4013      	ands	r3, r2
 800431a:	2b20      	cmp	r3, #32
 800431c:	d11e      	bne.n	800435c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_OscConfig+0x32c>)
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2202      	movs	r2, #2
 8004324:	4013      	ands	r3, r2
 8004326:	d100      	bne.n	800432a <HAL_RCC_OscConfig+0x31e>
 8004328:	e0b6      	b.n	8004498 <HAL_RCC_OscConfig+0x48c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d000      	beq.n	8004334 <HAL_RCC_OscConfig+0x328>
 8004332:	e0b1      	b.n	8004498 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e171      	b.n	800461c <HAL_RCC_OscConfig+0x610>
 8004338:	40021000 	.word	0x40021000
 800433c:	fffeffff 	.word	0xfffeffff
 8004340:	fffbffff 	.word	0xfffbffff
 8004344:	ffff80ff 	.word	0xffff80ff
 8004348:	ffffc7ff 	.word	0xffffc7ff
 800434c:	00f42400 	.word	0x00f42400
 8004350:	20000004 	.word	0x20000004
 8004354:	20000008 	.word	0x20000008
 8004358:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800435c:	4bb1      	ldr	r3, [pc, #708]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800435e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	055b      	lsls	r3, r3, #21
 8004364:	4013      	ands	r3, r2
 8004366:	d101      	bne.n	800436c <HAL_RCC_OscConfig+0x360>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x362>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	4bac      	ldr	r3, [pc, #688]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004374:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004376:	4bab      	ldr	r3, [pc, #684]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	0549      	lsls	r1, r1, #21
 800437c:	430a      	orrs	r2, r1
 800437e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004380:	4ba8      	ldr	r3, [pc, #672]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	055b      	lsls	r3, r3, #21
 8004388:	4013      	ands	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800438e:	231f      	movs	r3, #31
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004396:	4ba4      	ldr	r3, [pc, #656]	; (8004628 <HAL_RCC_OscConfig+0x61c>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	d11a      	bne.n	80043d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a2:	4ba1      	ldr	r3, [pc, #644]	; (8004628 <HAL_RCC_OscConfig+0x61c>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4ba0      	ldr	r3, [pc, #640]	; (8004628 <HAL_RCC_OscConfig+0x61c>)
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	0049      	lsls	r1, r1, #1
 80043ac:	430a      	orrs	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043b0:	f7ff fa8c 	bl	80038cc <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ba:	f7ff fa87 	bl	80038cc <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e127      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043cc:	4b96      	ldr	r3, [pc, #600]	; (8004628 <HAL_RCC_OscConfig+0x61c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x3e2>
 80043e0:	4b90      	ldr	r3, [pc, #576]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80043e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043e4:	4b8f      	ldr	r3, [pc, #572]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80043e6:	2101      	movs	r1, #1
 80043e8:	430a      	orrs	r2, r1
 80043ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80043ec:	e01c      	b.n	8004428 <HAL_RCC_OscConfig+0x41c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x404>
 80043f6:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80043f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043fa:	4b8a      	ldr	r3, [pc, #552]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80043fc:	2104      	movs	r1, #4
 80043fe:	430a      	orrs	r2, r1
 8004400:	65da      	str	r2, [r3, #92]	; 0x5c
 8004402:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004406:	4b87      	ldr	r3, [pc, #540]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004408:	2101      	movs	r1, #1
 800440a:	430a      	orrs	r2, r1
 800440c:	65da      	str	r2, [r3, #92]	; 0x5c
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0x41c>
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004414:	4b83      	ldr	r3, [pc, #524]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004416:	2101      	movs	r1, #1
 8004418:	438a      	bics	r2, r1
 800441a:	65da      	str	r2, [r3, #92]	; 0x5c
 800441c:	4b81      	ldr	r3, [pc, #516]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800441e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004420:	4b80      	ldr	r3, [pc, #512]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004422:	2104      	movs	r1, #4
 8004424:	438a      	bics	r2, r1
 8004426:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d014      	beq.n	800445a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7ff fa4c 	bl	80038cc <HAL_GetTick>
 8004434:	0003      	movs	r3, r0
 8004436:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004438:	e009      	b.n	800444e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7ff fa47 	bl	80038cc <HAL_GetTick>
 800443e:	0002      	movs	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	4a79      	ldr	r2, [pc, #484]	; (800462c <HAL_RCC_OscConfig+0x620>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e0e6      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444e:	4b75      	ldr	r3, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	2202      	movs	r2, #2
 8004454:	4013      	ands	r3, r2
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x42e>
 8004458:	e013      	b.n	8004482 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7ff fa37 	bl	80038cc <HAL_GetTick>
 800445e:	0003      	movs	r3, r0
 8004460:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004462:	e009      	b.n	8004478 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7ff fa32 	bl	80038cc <HAL_GetTick>
 8004468:	0002      	movs	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	4a6f      	ldr	r2, [pc, #444]	; (800462c <HAL_RCC_OscConfig+0x620>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0d1      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004478:	4b6a      	ldr	r3, [pc, #424]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	2202      	movs	r2, #2
 800447e:	4013      	ands	r3, r2
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004482:	231f      	movs	r3, #31
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800448c:	4b65      	ldr	r3, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800448e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004490:	4b64      	ldr	r3, [pc, #400]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004492:	4967      	ldr	r1, [pc, #412]	; (8004630 <HAL_RCC_OscConfig+0x624>)
 8004494:	400a      	ands	r2, r1
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d100      	bne.n	80044a2 <HAL_RCC_OscConfig+0x496>
 80044a0:	e0bb      	b.n	800461a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a2:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2238      	movs	r2, #56	; 0x38
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d100      	bne.n	80044b0 <HAL_RCC_OscConfig+0x4a4>
 80044ae:	e07b      	b.n	80045a8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d156      	bne.n	8004566 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b8:	4b5a      	ldr	r3, [pc, #360]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b59      	ldr	r3, [pc, #356]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044be:	495d      	ldr	r1, [pc, #372]	; (8004634 <HAL_RCC_OscConfig+0x628>)
 80044c0:	400a      	ands	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7ff fa02 	bl	80038cc <HAL_GetTick>
 80044c8:	0003      	movs	r3, r0
 80044ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7ff f9fd 	bl	80038cc <HAL_GetTick>
 80044d2:	0002      	movs	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e09d      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e0:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	049b      	lsls	r3, r3, #18
 80044e8:	4013      	ands	r3, r2
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ec:	4b4d      	ldr	r3, [pc, #308]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a51      	ldr	r2, [pc, #324]	; (8004638 <HAL_RCC_OscConfig+0x62c>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004518:	431a      	orrs	r2, r3
 800451a:	4b42      	ldr	r3, [pc, #264]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800451c:	430a      	orrs	r2, r1
 800451e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b40      	ldr	r3, [pc, #256]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004526:	2180      	movs	r1, #128	; 0x80
 8004528:	0449      	lsls	r1, r1, #17
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	4b3c      	ldr	r3, [pc, #240]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	0549      	lsls	r1, r1, #21
 8004538:	430a      	orrs	r2, r1
 800453a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7ff f9c6 	bl	80038cc <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7ff f9c1 	bl	80038cc <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e061      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004558:	4b32      	ldr	r3, [pc, #200]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	049b      	lsls	r3, r3, #18
 8004560:	4013      	ands	r3, r2
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x53a>
 8004564:	e059      	b.n	800461a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004566:	4b2f      	ldr	r3, [pc, #188]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800456c:	4931      	ldr	r1, [pc, #196]	; (8004634 <HAL_RCC_OscConfig+0x628>)
 800456e:	400a      	ands	r2, r1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7ff f9ab 	bl	80038cc <HAL_GetTick>
 8004576:	0003      	movs	r3, r0
 8004578:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7ff f9a6 	bl	80038cc <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e046      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	049b      	lsls	r3, r3, #18
 8004596:	4013      	ands	r3, r2
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800459a:	4b22      	ldr	r3, [pc, #136]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	4b21      	ldr	r3, [pc, #132]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80045a0:	4926      	ldr	r1, [pc, #152]	; (800463c <HAL_RCC_OscConfig+0x630>)
 80045a2:	400a      	ands	r2, r1
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e038      	b.n	800461a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e033      	b.n	800461c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x618>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2203      	movs	r2, #3
 80045be:	401a      	ands	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d126      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2270      	movs	r2, #112	; 0x70
 80045cc:	401a      	ands	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d11f      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	23fe      	movs	r3, #254	; 0xfe
 80045da:	01db      	lsls	r3, r3, #7
 80045dc:	401a      	ands	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d116      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	23f8      	movs	r3, #248	; 0xf8
 80045ec:	039b      	lsls	r3, r3, #14
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d10e      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	23e0      	movs	r3, #224	; 0xe0
 80045fc:	051b      	lsls	r3, r3, #20
 80045fe:	401a      	ands	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	0f5b      	lsrs	r3, r3, #29
 800460c:	075a      	lsls	r2, r3, #29
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b008      	add	sp, #32
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	40007000 	.word	0x40007000
 800462c:	00001388 	.word	0x00001388
 8004630:	efffffff 	.word	0xefffffff
 8004634:	feffffff 	.word	0xfeffffff
 8004638:	11c1808c 	.word	0x11c1808c
 800463c:	eefefffc 	.word	0xeefefffc

08004640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0e9      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004654:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2207      	movs	r2, #7
 800465a:	4013      	ands	r3, r2
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d91e      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b73      	ldr	r3, [pc, #460]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2207      	movs	r2, #7
 8004668:	4393      	bics	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	4b70      	ldr	r3, [pc, #448]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004674:	f7ff f92a 	bl	80038cc <HAL_GetTick>
 8004678:	0003      	movs	r3, r0
 800467a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800467c:	e009      	b.n	8004692 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467e:	f7ff f925 	bl	80038cc <HAL_GetTick>
 8004682:	0002      	movs	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	4a6a      	ldr	r2, [pc, #424]	; (8004834 <HAL_RCC_ClockConfig+0x1f4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e0ca      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004692:	4b67      	ldr	r3, [pc, #412]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2207      	movs	r2, #7
 8004698:	4013      	ands	r3, r2
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d1ee      	bne.n	800467e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2202      	movs	r2, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d015      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2204      	movs	r2, #4
 80046b0:	4013      	ands	r3, r2
 80046b2:	d006      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046b4:	4b60      	ldr	r3, [pc, #384]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b5f      	ldr	r3, [pc, #380]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80046ba:	21e0      	movs	r1, #224	; 0xe0
 80046bc:	01c9      	lsls	r1, r1, #7
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a5d      	ldr	r2, [pc, #372]	; (800483c <HAL_RCC_ClockConfig+0x1fc>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d057      	beq.n	8004790 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	029b      	lsls	r3, r3, #10
 80046f0:	4013      	ands	r3, r2
 80046f2:	d12b      	bne.n	800474c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e097      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004700:	4b4d      	ldr	r3, [pc, #308]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	; 0x80
 8004706:	049b      	lsls	r3, r3, #18
 8004708:	4013      	ands	r3, r2
 800470a:	d11f      	bne.n	800474c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e08b      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004718:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4013      	ands	r3, r2
 8004722:	d113      	bne.n	800474c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e07f      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d106      	bne.n	800473e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004730:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	2202      	movs	r2, #2
 8004736:	4013      	ands	r3, r2
 8004738:	d108      	bne.n	800474c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e074      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 8004740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004742:	2202      	movs	r2, #2
 8004744:	4013      	ands	r3, r2
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e06d      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800474c:	4b3a      	ldr	r3, [pc, #232]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2207      	movs	r2, #7
 8004752:	4393      	bics	r3, r2
 8004754:	0019      	movs	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4b37      	ldr	r3, [pc, #220]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 800475c:	430a      	orrs	r2, r1
 800475e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004760:	f7ff f8b4 	bl	80038cc <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004768:	e009      	b.n	800477e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476a:	f7ff f8af 	bl	80038cc <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <HAL_RCC_ClockConfig+0x1f4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e054      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2238      	movs	r2, #56	; 0x38
 8004784:	401a      	ands	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	429a      	cmp	r2, r3
 800478e:	d1ec      	bne.n	800476a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2207      	movs	r2, #7
 8004796:	4013      	ands	r3, r2
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d21e      	bcs.n	80047dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2207      	movs	r2, #7
 80047a4:	4393      	bics	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047b0:	f7ff f88c 	bl	80038cc <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047b8:	e009      	b.n	80047ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ba:	f7ff f887 	bl	80038cc <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_RCC_ClockConfig+0x1f4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e02c      	b.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047ce:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_RCC_ClockConfig+0x1f0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2207      	movs	r2, #7
 80047d4:	4013      	ands	r3, r2
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2204      	movs	r2, #4
 80047e2:	4013      	ands	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_RCC_ClockConfig+0x200>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047fa:	f000 f829 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80047fe:	0001      	movs	r1, r0
 8004800:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <HAL_RCC_ClockConfig+0x1f8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	220f      	movs	r2, #15
 8004808:	401a      	ands	r2, r3
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_RCC_ClockConfig+0x204>)
 800480c:	0092      	lsls	r2, r2, #2
 800480e:	58d3      	ldr	r3, [r2, r3]
 8004810:	221f      	movs	r2, #31
 8004812:	4013      	ands	r3, r2
 8004814:	000a      	movs	r2, r1
 8004816:	40da      	lsrs	r2, r3
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_ClockConfig+0x208>)
 800481a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x20c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fe fdc5 	bl	80033b0 <HAL_InitTick>
 8004826:	0003      	movs	r3, r0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b004      	add	sp, #16
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40022000 	.word	0x40022000
 8004834:	00001388 	.word	0x00001388
 8004838:	40021000 	.word	0x40021000
 800483c:	fffff0ff 	.word	0xfffff0ff
 8004840:	ffff8fff 	.word	0xffff8fff
 8004844:	0800e1ec 	.word	0x0800e1ec
 8004848:	20000004 	.word	0x20000004
 800484c:	20000008 	.word	0x20000008

08004850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004856:	4b3c      	ldr	r3, [pc, #240]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2238      	movs	r2, #56	; 0x38
 800485c:	4013      	ands	r3, r2
 800485e:	d10f      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004860:	4b39      	ldr	r3, [pc, #228]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0adb      	lsrs	r3, r3, #11
 8004866:	2207      	movs	r2, #7
 8004868:	4013      	ands	r3, r2
 800486a:	2201      	movs	r2, #1
 800486c:	409a      	lsls	r2, r3
 800486e:	0013      	movs	r3, r2
 8004870:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	4835      	ldr	r0, [pc, #212]	; (800494c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004876:	f7fb fc63 	bl	8000140 <__udivsi3>
 800487a:	0003      	movs	r3, r0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	e05d      	b.n	800493c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2238      	movs	r2, #56	; 0x38
 8004886:	4013      	ands	r3, r2
 8004888:	2b08      	cmp	r3, #8
 800488a:	d102      	bne.n	8004892 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800488c:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_RCC_GetSysClockFreq+0x100>)
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e054      	b.n	800493c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004892:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2238      	movs	r2, #56	; 0x38
 8004898:	4013      	ands	r3, r2
 800489a:	2b10      	cmp	r3, #16
 800489c:	d138      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800489e:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2203      	movs	r2, #3
 80048a4:	4013      	ands	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	2207      	movs	r2, #7
 80048b0:	4013      	ands	r3, r2
 80048b2:	3301      	adds	r3, #1
 80048b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b03      	cmp	r3, #3
 80048ba:	d10d      	bne.n	80048d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4824      	ldr	r0, [pc, #144]	; (8004950 <HAL_RCC_GetSysClockFreq+0x100>)
 80048c0:	f7fb fc3e 	bl	8000140 <__udivsi3>
 80048c4:	0003      	movs	r3, r0
 80048c6:	0019      	movs	r1, r3
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	0a1b      	lsrs	r3, r3, #8
 80048ce:	227f      	movs	r2, #127	; 0x7f
 80048d0:	4013      	ands	r3, r2
 80048d2:	434b      	muls	r3, r1
 80048d4:	617b      	str	r3, [r7, #20]
        break;
 80048d6:	e00d      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	481c      	ldr	r0, [pc, #112]	; (800494c <HAL_RCC_GetSysClockFreq+0xfc>)
 80048dc:	f7fb fc30 	bl	8000140 <__udivsi3>
 80048e0:	0003      	movs	r3, r0
 80048e2:	0019      	movs	r1, r3
 80048e4:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	227f      	movs	r2, #127	; 0x7f
 80048ec:	4013      	ands	r3, r2
 80048ee:	434b      	muls	r3, r1
 80048f0:	617b      	str	r3, [r7, #20]
        break;
 80048f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0f5b      	lsrs	r3, r3, #29
 80048fa:	2207      	movs	r2, #7
 80048fc:	4013      	ands	r3, r2
 80048fe:	3301      	adds	r3, #1
 8004900:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f7fb fc1b 	bl	8000140 <__udivsi3>
 800490a:	0003      	movs	r3, r0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e015      	b.n	800493c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2238      	movs	r2, #56	; 0x38
 8004916:	4013      	ands	r3, r2
 8004918:	2b20      	cmp	r3, #32
 800491a:	d103      	bne.n	8004924 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e00b      	b.n	800493c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2238      	movs	r2, #56	; 0x38
 800492a:	4013      	ands	r3, r2
 800492c:	2b18      	cmp	r3, #24
 800492e:	d103      	bne.n	8004938 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004930:	23fa      	movs	r3, #250	; 0xfa
 8004932:	01db      	lsls	r3, r3, #7
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e001      	b.n	800493c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800493c:	693b      	ldr	r3, [r7, #16]
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b006      	add	sp, #24
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40021000 	.word	0x40021000
 800494c:	00f42400 	.word	0x00f42400
 8004950:	007a1200 	.word	0x007a1200

08004954 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <HAL_RCC_GetHCLKFreq+0x10>)
 800495a:	681b      	ldr	r3, [r3, #0]
}
 800495c:	0018      	movs	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	20000004 	.word	0x20000004

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b5b0      	push	{r4, r5, r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800496c:	f7ff fff2 	bl	8004954 <HAL_RCC_GetHCLKFreq>
 8004970:	0004      	movs	r4, r0
 8004972:	f7ff fb3f 	bl	8003ff4 <LL_RCC_GetAPB1Prescaler>
 8004976:	0003      	movs	r3, r0
 8004978:	0b1a      	lsrs	r2, r3, #12
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800497c:	0092      	lsls	r2, r2, #2
 800497e:	58d3      	ldr	r3, [r2, r3]
 8004980:	221f      	movs	r2, #31
 8004982:	4013      	ands	r3, r2
 8004984:	40dc      	lsrs	r4, r3
 8004986:	0023      	movs	r3, r4
}
 8004988:	0018      	movs	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	bdb0      	pop	{r4, r5, r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	0800e22c 	.word	0x0800e22c

08004994 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049a4:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <HAL_RCC_GetClockConfig+0x4c>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2207      	movs	r2, #7
 80049aa:	401a      	ands	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_GetClockConfig+0x4c>)
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	23f0      	movs	r3, #240	; 0xf0
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	401a      	ands	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <HAL_RCC_GetClockConfig+0x4c>)
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	23e0      	movs	r3, #224	; 0xe0
 80049c4:	01db      	lsls	r3, r3, #7
 80049c6:	401a      	ands	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetClockConfig+0x50>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2207      	movs	r2, #7
 80049d2:	401a      	ands	r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]
}
 80049d8:	46c0      	nop			; (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b002      	add	sp, #8
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40022000 	.word	0x40022000

080049e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80049f0:	2313      	movs	r3, #19
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f8:	2312      	movs	r3, #18
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	029b      	lsls	r3, r3, #10
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a0c:	e0a3      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	2011      	movs	r0, #17
 8004a10:	183b      	adds	r3, r7, r0
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a16:	4bc3      	ldr	r3, [pc, #780]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	055b      	lsls	r3, r3, #21
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d110      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a22:	4bc0      	ldr	r3, [pc, #768]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a26:	4bbf      	ldr	r3, [pc, #764]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	0549      	lsls	r1, r1, #21
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a30:	4bbc      	ldr	r3, [pc, #752]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	055b      	lsls	r3, r3, #21
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a44:	4bb8      	ldr	r3, [pc, #736]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4bb7      	ldr	r3, [pc, #732]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	0049      	lsls	r1, r1, #1
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a52:	f7fe ff3b 	bl	80038cc <HAL_GetTick>
 8004a56:	0003      	movs	r3, r0
 8004a58:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5c:	f7fe ff36 	bl	80038cc <HAL_GetTick>
 8004a60:	0002      	movs	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d904      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a6a:	2313      	movs	r3, #19
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	2203      	movs	r2, #3
 8004a70:	701a      	strb	r2, [r3, #0]
        break;
 8004a72:	e005      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a74:	4bac      	ldr	r3, [pc, #688]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d0ed      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a80:	2313      	movs	r3, #19
 8004a82:	18fb      	adds	r3, r7, r3
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d154      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a8a:	4ba6      	ldr	r3, [pc, #664]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a8e:	23c0      	movs	r3, #192	; 0xc0
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d014      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aa6:	4b9f      	ldr	r3, [pc, #636]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aaa:	4aa0      	ldr	r2, [pc, #640]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ab0:	4b9c      	ldr	r3, [pc, #624]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ab4:	4b9b      	ldr	r3, [pc, #620]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	0249      	lsls	r1, r1, #9
 8004aba:	430a      	orrs	r2, r1
 8004abc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004abe:	4b99      	ldr	r3, [pc, #612]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ac2:	4b98      	ldr	r3, [pc, #608]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac4:	499a      	ldr	r1, [pc, #616]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aca:	4b96      	ldr	r3, [pc, #600]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d016      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fef8 	bl	80038cc <HAL_GetTick>
 8004adc:	0003      	movs	r3, r0
 8004ade:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ae0:	e00c      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fe fef3 	bl	80038cc <HAL_GetTick>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	4a91      	ldr	r2, [pc, #580]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d904      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004af2:	2313      	movs	r3, #19
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	2203      	movs	r2, #3
 8004af8:	701a      	strb	r2, [r3, #0]
            break;
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afc:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	2202      	movs	r2, #2
 8004b02:	4013      	ands	r3, r2
 8004b04:	d0ed      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004b06:	2313      	movs	r3, #19
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b10:	4b84      	ldr	r3, [pc, #528]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b14:	4a85      	ldr	r2, [pc, #532]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1e:	4b81      	ldr	r3, [pc, #516]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b24:	e00c      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b26:	2312      	movs	r3, #18
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2213      	movs	r2, #19
 8004b2c:	18ba      	adds	r2, r7, r2
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e005      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b34:	2312      	movs	r3, #18
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	2213      	movs	r2, #19
 8004b3a:	18ba      	adds	r2, r7, r2
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b40:	2311      	movs	r3, #17
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d105      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4e:	4b75      	ldr	r3, [pc, #468]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b50:	4979      	ldr	r1, [pc, #484]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b60:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	2203      	movs	r2, #3
 8004b66:	4393      	bics	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b7e:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	220c      	movs	r2, #12
 8004b84:	4393      	bics	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b65      	ldr	r3, [pc, #404]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2210      	movs	r2, #16
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b9c:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	4a66      	ldr	r2, [pc, #408]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	4b5e      	ldr	r3, [pc, #376]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d009      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bbc:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	4a5f      	ldr	r2, [pc, #380]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	0019      	movs	r1, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699a      	ldr	r2, [r3, #24]
 8004bca:	4b56      	ldr	r3, [pc, #344]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bdc:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be0:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	4b4e      	ldr	r3, [pc, #312]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	4a52      	ldr	r2, [pc, #328]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	0019      	movs	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	01db      	lsls	r3, r3, #7
 8004c16:	4013      	ands	r3, r2
 8004c18:	d015      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c1a:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	0899      	lsrs	r1, r3, #2
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1a      	ldr	r2, [r3, #32]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	05db      	lsls	r3, r3, #23
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d106      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c38:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	0249      	lsls	r1, r1, #9
 8004c42:	430a      	orrs	r2, r1
 8004c44:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	4013      	ands	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c52:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	4393      	bics	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c60:	4b30      	ldr	r3, [pc, #192]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c62:	430a      	orrs	r2, r1
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	039b      	lsls	r3, r3, #14
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d016      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c72:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c76:	4a35      	ldr	r2, [pc, #212]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	0019      	movs	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c82:	430a      	orrs	r2, r1
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	03db      	lsls	r3, r3, #15
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c98:	2180      	movs	r1, #128	; 0x80
 8004c9a:	0449      	lsls	r1, r1, #17
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	03db      	lsls	r3, r3, #15
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d016      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb0:	4a27      	ldr	r2, [pc, #156]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	0019      	movs	r1, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	2380      	movs	r3, #128	; 0x80
 8004cc6:	045b      	lsls	r3, r3, #17
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d106      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	0449      	lsls	r1, r1, #17
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695a      	ldr	r2, [r3, #20]
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d106      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d0c:	2180      	movs	r1, #128	; 0x80
 8004d0e:	0249      	lsls	r1, r1, #9
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d14:	2312      	movs	r3, #18
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	781b      	ldrb	r3, [r3, #0]
}
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b006      	add	sp, #24
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	fffffcff 	.word	0xfffffcff
 8004d30:	fffeffff 	.word	0xfffeffff
 8004d34:	00001388 	.word	0x00001388
 8004d38:	efffffff 	.word	0xefffffff
 8004d3c:	fffff3ff 	.word	0xfffff3ff
 8004d40:	fff3ffff 	.word	0xfff3ffff
 8004d44:	ffcfffff 	.word	0xffcfffff
 8004d48:	ffffcfff 	.word	0xffffcfff
 8004d4c:	ffbfffff 	.word	0xffbfffff
 8004d50:	feffffff 	.word	0xfeffffff
 8004d54:	ffff3fff 	.word	0xffff3fff

08004d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0a8      	b.n	8004ebc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	2382      	movs	r3, #130	; 0x82
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d009      	beq.n	8004d92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	61da      	str	r2, [r3, #28]
 8004d84:	e005      	b.n	8004d92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	225d      	movs	r2, #93	; 0x5d
 8004d9c:	5c9b      	ldrb	r3, [r3, r2]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	225c      	movs	r2, #92	; 0x5c
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fe fa82 	bl	80032b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	225d      	movs	r2, #93	; 0x5d
 8004db8:	2102      	movs	r1, #2
 8004dba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2140      	movs	r1, #64	; 0x40
 8004dc8:	438a      	bics	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	23e0      	movs	r3, #224	; 0xe0
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d902      	bls.n	8004dde <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	e002      	b.n	8004de4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	015b      	lsls	r3, r3, #5
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	23f0      	movs	r3, #240	; 0xf0
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d008      	beq.n	8004e02 <HAL_SPI_Init+0xaa>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	23e0      	movs	r3, #224	; 0xe0
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d002      	beq.n	8004e02 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	2382      	movs	r3, #130	; 0x82
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6899      	ldr	r1, [r3, #8]
 8004e10:	2384      	movs	r3, #132	; 0x84
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	400b      	ands	r3, r1
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2102      	movs	r1, #2
 8004e1e:	400b      	ands	r3, r1
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	2101      	movs	r1, #1
 8004e28:	400b      	ands	r3, r1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6999      	ldr	r1, [r3, #24]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	400b      	ands	r3, r1
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2138      	movs	r1, #56	; 0x38
 8004e3e:	400b      	ands	r3, r1
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	400b      	ands	r3, r1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	2204      	movs	r2, #4
 8004e68:	401a      	ands	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	2110      	movs	r1, #16
 8004e70:	400b      	ands	r3, r1
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	2108      	movs	r1, #8
 8004e7a:	400b      	ands	r3, r1
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	23f0      	movs	r3, #240	; 0xf0
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	400b      	ands	r3, r1
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	2380      	movs	r3, #128	; 0x80
 8004e90:	015b      	lsls	r3, r3, #5
 8004e92:	401a      	ands	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4907      	ldr	r1, [pc, #28]	; (8004ec4 <HAL_SPI_Init+0x16c>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	225d      	movs	r2, #93	; 0x5d
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	fffff7ff 	.word	0xfffff7ff

08004ec8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	1dbb      	adds	r3, r7, #6
 8004ed6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ed8:	231f      	movs	r3, #31
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	225c      	movs	r2, #92	; 0x5c
 8004ee4:	5c9b      	ldrb	r3, [r3, r2]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_SPI_Transmit+0x26>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e140      	b.n	8005170 <HAL_SPI_Transmit+0x2a8>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	225c      	movs	r2, #92	; 0x5c
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef6:	f7fe fce9 	bl	80038cc <HAL_GetTick>
 8004efa:	0003      	movs	r3, r0
 8004efc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004efe:	2316      	movs	r3, #22
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	1dba      	adds	r2, r7, #6
 8004f04:	8812      	ldrh	r2, [r2, #0]
 8004f06:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	225d      	movs	r2, #93	; 0x5d
 8004f0c:	5c9b      	ldrb	r3, [r3, r2]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d004      	beq.n	8004f1e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004f14:	231f      	movs	r3, #31
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2202      	movs	r2, #2
 8004f1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f1c:	e11d      	b.n	800515a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <HAL_SPI_Transmit+0x64>
 8004f24:	1dbb      	adds	r3, r7, #6
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004f2c:	231f      	movs	r3, #31
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f34:	e111      	b.n	800515a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	225d      	movs	r2, #93	; 0x5d
 8004f3a:	2103      	movs	r1, #3
 8004f3c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1dba      	adds	r2, r7, #6
 8004f4e:	8812      	ldrh	r2, [r2, #0]
 8004f50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1dba      	adds	r2, r7, #6
 8004f56:	8812      	ldrh	r2, [r2, #0]
 8004f58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2244      	movs	r2, #68	; 0x44
 8004f64:	2100      	movs	r1, #0
 8004f66:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2246      	movs	r2, #70	; 0x46
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d110      	bne.n	8004faa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2140      	movs	r1, #64	; 0x40
 8004f94:	438a      	bics	r2, r1
 8004f96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	01c9      	lsls	r1, r1, #7
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2240      	movs	r2, #64	; 0x40
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d007      	beq.n	8004fc8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	23e0      	movs	r3, #224	; 0xe0
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d94e      	bls.n	8005072 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <HAL_SPI_Transmit+0x11e>
 8004fdc:	2316      	movs	r3, #22
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d13f      	bne.n	8005066 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	881a      	ldrh	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800500a:	e02c      	b.n	8005066 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2202      	movs	r2, #2
 8005014:	4013      	ands	r3, r2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d112      	bne.n	8005040 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	881a      	ldrh	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800503e:	e012      	b.n	8005066 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005040:	f7fe fc44 	bl	80038cc <HAL_GetTick>
 8005044:	0002      	movs	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d802      	bhi.n	8005056 <HAL_SPI_Transmit+0x18e>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	d102      	bne.n	800505c <HAL_SPI_Transmit+0x194>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800505c:	231f      	movs	r3, #31
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	2203      	movs	r2, #3
 8005062:	701a      	strb	r2, [r3, #0]
          goto error;
 8005064:	e079      	b.n	800515a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1cd      	bne.n	800500c <HAL_SPI_Transmit+0x144>
 8005070:	e04f      	b.n	8005112 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <HAL_SPI_Transmit+0x1bc>
 800507a:	2316      	movs	r3, #22
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d141      	bne.n	8005108 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80050aa:	e02d      	b.n	8005108 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2202      	movs	r2, #2
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d113      	bne.n	80050e2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	7812      	ldrb	r2, [r2, #0]
 80050c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050e0:	e012      	b.n	8005108 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e2:	f7fe fbf3 	bl	80038cc <HAL_GetTick>
 80050e6:	0002      	movs	r2, r0
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d802      	bhi.n	80050f8 <HAL_SPI_Transmit+0x230>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	d102      	bne.n	80050fe <HAL_SPI_Transmit+0x236>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d104      	bne.n	8005108 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80050fe:	231f      	movs	r3, #31
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	2203      	movs	r2, #3
 8005104:	701a      	strb	r2, [r3, #0]
          goto error;
 8005106:	e028      	b.n	800515a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1cc      	bne.n	80050ac <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	0018      	movs	r0, r3
 800511a:	f000 fdf5 	bl	8005d08 <SPI_EndRxTxTransaction>
 800511e:	1e03      	subs	r3, r0, #0
 8005120:	d002      	beq.n	8005128 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800514e:	231f      	movs	r3, #31
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e000      	b.n	800515a <HAL_SPI_Transmit+0x292>
  }

error:
 8005158:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	225d      	movs	r2, #93	; 0x5d
 800515e:	2101      	movs	r1, #1
 8005160:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	225c      	movs	r2, #92	; 0x5c
 8005166:	2100      	movs	r1, #0
 8005168:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800516a:	231f      	movs	r3, #31
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	781b      	ldrb	r3, [r3, #0]
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b008      	add	sp, #32
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	1dbb      	adds	r3, r7, #6
 8005186:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005188:	2317      	movs	r3, #23
 800518a:	18fb      	adds	r3, r7, r3
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	2382      	movs	r3, #130	; 0x82
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	429a      	cmp	r2, r3
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_Receive+0x4c>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	225d      	movs	r2, #93	; 0x5d
 80051a8:	2104      	movs	r1, #4
 80051aa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051ac:	1dbb      	adds	r3, r7, #6
 80051ae:	881c      	ldrh	r4, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	0023      	movs	r3, r4
 80051bc:	f000 f928 	bl	8005410 <HAL_SPI_TransmitReceive>
 80051c0:	0003      	movs	r3, r0
 80051c2:	e11c      	b.n	80053fe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	225c      	movs	r2, #92	; 0x5c
 80051c8:	5c9b      	ldrb	r3, [r3, r2]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_SPI_Receive+0x5a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e115      	b.n	80053fe <HAL_SPI_Receive+0x286>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	225c      	movs	r2, #92	; 0x5c
 80051d6:	2101      	movs	r1, #1
 80051d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051da:	f7fe fb77 	bl	80038cc <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	225d      	movs	r2, #93	; 0x5d
 80051e6:	5c9b      	ldrb	r3, [r3, r2]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d004      	beq.n	80051f8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80051ee:	2317      	movs	r3, #23
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	2202      	movs	r2, #2
 80051f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80051f6:	e0f7      	b.n	80053e8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_SPI_Receive+0x8e>
 80051fe:	1dbb      	adds	r3, r7, #6
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005206:	2317      	movs	r3, #23
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
    goto error;
 800520e:	e0eb      	b.n	80053e8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	225d      	movs	r2, #93	; 0x5d
 8005214:	2104      	movs	r1, #4
 8005216:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1dba      	adds	r2, r7, #6
 8005228:	2144      	movs	r1, #68	; 0x44
 800522a:	8812      	ldrh	r2, [r2, #0]
 800522c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1dba      	adds	r2, r7, #6
 8005232:	2146      	movs	r1, #70	; 0x46
 8005234:	8812      	ldrh	r2, [r2, #0]
 8005236:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	23e0      	movs	r3, #224	; 0xe0
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	429a      	cmp	r2, r3
 8005260:	d908      	bls.n	8005274 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4966      	ldr	r1, [pc, #408]	; (8005408 <HAL_SPI_Receive+0x290>)
 800526e:	400a      	ands	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
 8005272:	e008      	b.n	8005286 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	0149      	lsls	r1, r1, #5
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	429a      	cmp	r2, r3
 8005290:	d10f      	bne.n	80052b2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2140      	movs	r1, #64	; 0x40
 800529e:	438a      	bics	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4957      	ldr	r1, [pc, #348]	; (800540c <HAL_SPI_Receive+0x294>)
 80052ae:	400a      	ands	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2240      	movs	r2, #64	; 0x40
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d007      	beq.n	80052d0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	23e0      	movs	r3, #224	; 0xe0
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	429a      	cmp	r2, r3
 80052da:	d900      	bls.n	80052de <HAL_SPI_Receive+0x166>
 80052dc:	e069      	b.n	80053b2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052de:	e031      	b.n	8005344 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2201      	movs	r2, #1
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d117      	bne.n	800531e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	001a      	movs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	7812      	ldrb	r2, [r2, #0]
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2246      	movs	r2, #70	; 0x46
 800530e:	5a9b      	ldrh	r3, [r3, r2]
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b299      	uxth	r1, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2246      	movs	r2, #70	; 0x46
 800531a:	5299      	strh	r1, [r3, r2]
 800531c:	e012      	b.n	8005344 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800531e:	f7fe fad5 	bl	80038cc <HAL_GetTick>
 8005322:	0002      	movs	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d802      	bhi.n	8005334 <HAL_SPI_Receive+0x1bc>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	d102      	bne.n	800533a <HAL_SPI_Receive+0x1c2>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800533a:	2317      	movs	r3, #23
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2203      	movs	r2, #3
 8005340:	701a      	strb	r2, [r3, #0]
          goto error;
 8005342:	e051      	b.n	80053e8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2246      	movs	r2, #70	; 0x46
 8005348:	5a9b      	ldrh	r3, [r3, r2]
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1c7      	bne.n	80052e0 <HAL_SPI_Receive+0x168>
 8005350:	e035      	b.n	80053be <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2201      	movs	r2, #1
 800535a:	4013      	ands	r3, r2
 800535c:	2b01      	cmp	r3, #1
 800535e:	d115      	bne.n	800538c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	b292      	uxth	r2, r2
 800536c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	1c9a      	adds	r2, r3, #2
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2246      	movs	r2, #70	; 0x46
 800537c:	5a9b      	ldrh	r3, [r3, r2]
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b299      	uxth	r1, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2246      	movs	r2, #70	; 0x46
 8005388:	5299      	strh	r1, [r3, r2]
 800538a:	e012      	b.n	80053b2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538c:	f7fe fa9e 	bl	80038cc <HAL_GetTick>
 8005390:	0002      	movs	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d802      	bhi.n	80053a2 <HAL_SPI_Receive+0x22a>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	d102      	bne.n	80053a8 <HAL_SPI_Receive+0x230>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80053a8:	2317      	movs	r3, #23
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	2203      	movs	r2, #3
 80053ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80053b0:	e01a      	b.n	80053e8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2246      	movs	r2, #70	; 0x46
 80053b6:	5a9b      	ldrh	r3, [r3, r2]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1c9      	bne.n	8005352 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fc41 	bl	8005c4c <SPI_EndRxTransaction>
 80053ca:	1e03      	subs	r3, r0, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80053dc:	2317      	movs	r3, #23
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e000      	b.n	80053e8 <HAL_SPI_Receive+0x270>
  }

error :
 80053e6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	225d      	movs	r2, #93	; 0x5d
 80053ec:	2101      	movs	r1, #1
 80053ee:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	225c      	movs	r2, #92	; 0x5c
 80053f4:	2100      	movs	r1, #0
 80053f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80053f8:	2317      	movs	r3, #23
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	781b      	ldrb	r3, [r3, #0]
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b007      	add	sp, #28
 8005404:	bd90      	pop	{r4, r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	ffffefff 	.word	0xffffefff
 800540c:	ffffbfff 	.word	0xffffbfff

08005410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	; 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	001a      	movs	r2, r3
 800541e:	1cbb      	adds	r3, r7, #2
 8005420:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005422:	2301      	movs	r3, #1
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005426:	2323      	movs	r3, #35	; 0x23
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	225c      	movs	r2, #92	; 0x5c
 8005432:	5c9b      	ldrb	r3, [r3, r2]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_SPI_TransmitReceive+0x2c>
 8005438:	2302      	movs	r3, #2
 800543a:	e1b5      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x398>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	225c      	movs	r2, #92	; 0x5c
 8005440:	2101      	movs	r1, #1
 8005442:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005444:	f7fe fa42 	bl	80038cc <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800544c:	201b      	movs	r0, #27
 800544e:	183b      	adds	r3, r7, r0
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	215d      	movs	r1, #93	; 0x5d
 8005454:	5c52      	ldrb	r2, [r2, r1]
 8005456:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800545e:	2312      	movs	r3, #18
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	1cba      	adds	r2, r7, #2
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005468:	183b      	adds	r3, r7, r0
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d011      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x84>
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	2382      	movs	r3, #130	; 0x82
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	429a      	cmp	r2, r3
 8005478:	d107      	bne.n	800548a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <HAL_SPI_TransmitReceive+0x7a>
 8005482:	183b      	adds	r3, r7, r0
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b04      	cmp	r3, #4
 8005488:	d004      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800548a:	2323      	movs	r3, #35	; 0x23
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2202      	movs	r2, #2
 8005490:	701a      	strb	r2, [r3, #0]
    goto error;
 8005492:	e17e      	b.n	8005792 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <HAL_SPI_TransmitReceive+0x98>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_SPI_TransmitReceive+0x98>
 80054a0:	1cbb      	adds	r3, r7, #2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d104      	bne.n	80054b2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80054a8:	2323      	movs	r3, #35	; 0x23
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2201      	movs	r2, #1
 80054ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80054b0:	e16f      	b.n	8005792 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	225d      	movs	r2, #93	; 0x5d
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d003      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	225d      	movs	r2, #93	; 0x5d
 80054c2:	2105      	movs	r1, #5
 80054c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1cba      	adds	r2, r7, #2
 80054d6:	2146      	movs	r1, #70	; 0x46
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1cba      	adds	r2, r7, #2
 80054e0:	2144      	movs	r1, #68	; 0x44
 80054e2:	8812      	ldrh	r2, [r2, #0]
 80054e4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1cba      	adds	r2, r7, #2
 80054f0:	8812      	ldrh	r2, [r2, #0]
 80054f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1cba      	adds	r2, r7, #2
 80054f8:	8812      	ldrh	r2, [r2, #0]
 80054fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	23e0      	movs	r3, #224	; 0xe0
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	429a      	cmp	r2, r3
 8005512:	d908      	bls.n	8005526 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	49a4      	ldr	r1, [pc, #656]	; (80057b0 <HAL_SPI_TransmitReceive+0x3a0>)
 8005520:	400a      	ands	r2, r1
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e008      	b.n	8005538 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	0149      	lsls	r1, r1, #5
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2240      	movs	r2, #64	; 0x40
 8005540:	4013      	ands	r3, r2
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d007      	beq.n	8005556 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	430a      	orrs	r2, r1
 8005554:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	23e0      	movs	r3, #224	; 0xe0
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	429a      	cmp	r2, r3
 8005560:	d800      	bhi.n	8005564 <HAL_SPI_TransmitReceive+0x154>
 8005562:	e07f      	b.n	8005664 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x168>
 800556c:	2312      	movs	r3, #18
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d000      	beq.n	8005578 <HAL_SPI_TransmitReceive+0x168>
 8005576:	e069      	b.n	800564c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	881a      	ldrh	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	1c9a      	adds	r2, r3, #2
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800559c:	e056      	b.n	800564c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d11b      	bne.n	80055e4 <HAL_SPI_TransmitReceive+0x1d4>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <HAL_SPI_TransmitReceive+0x1d4>
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d113      	bne.n	80055e4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2201      	movs	r2, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d11c      	bne.n	800562c <HAL_SPI_TransmitReceive+0x21c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2246      	movs	r2, #70	; 0x46
 80055f6:	5a9b      	ldrh	r3, [r3, r2]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d016      	beq.n	800562c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	b292      	uxth	r2, r2
 800560a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2246      	movs	r2, #70	; 0x46
 800561a:	5a9b      	ldrh	r3, [r3, r2]
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b299      	uxth	r1, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2246      	movs	r2, #70	; 0x46
 8005626:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005628:	2301      	movs	r3, #1
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800562c:	f7fe f94e 	bl	80038cc <HAL_GetTick>
 8005630:	0002      	movs	r2, r0
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005638:	429a      	cmp	r2, r3
 800563a:	d807      	bhi.n	800564c <HAL_SPI_TransmitReceive+0x23c>
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3301      	adds	r3, #1
 8005640:	d004      	beq.n	800564c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005642:	2323      	movs	r3, #35	; 0x23
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2203      	movs	r2, #3
 8005648:	701a      	strb	r2, [r3, #0]
        goto error;
 800564a:	e0a2      	b.n	8005792 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1a3      	bne.n	800559e <HAL_SPI_TransmitReceive+0x18e>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2246      	movs	r2, #70	; 0x46
 800565a:	5a9b      	ldrh	r3, [r3, r2]
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d19d      	bne.n	800559e <HAL_SPI_TransmitReceive+0x18e>
 8005662:	e085      	b.n	8005770 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x268>
 800566c:	2312      	movs	r3, #18
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d000      	beq.n	8005678 <HAL_SPI_TransmitReceive+0x268>
 8005676:	e070      	b.n	800575a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800569e:	e05c      	b.n	800575a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	2202      	movs	r2, #2
 80056a8:	4013      	ands	r3, r2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d11c      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x2d8>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d017      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x2d8>
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d114      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2201      	movs	r2, #1
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d11e      	bne.n	8005734 <HAL_SPI_TransmitReceive+0x324>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2246      	movs	r2, #70	; 0x46
 80056fa:	5a9b      	ldrh	r3, [r3, r2]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d018      	beq.n	8005734 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	001a      	movs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	7812      	ldrb	r2, [r2, #0]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2246      	movs	r2, #70	; 0x46
 8005722:	5a9b      	ldrh	r3, [r3, r2]
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b299      	uxth	r1, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2246      	movs	r2, #70	; 0x46
 800572e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005730:	2301      	movs	r3, #1
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005734:	f7fe f8ca 	bl	80038cc <HAL_GetTick>
 8005738:	0002      	movs	r2, r0
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005740:	429a      	cmp	r2, r3
 8005742:	d802      	bhi.n	800574a <HAL_SPI_TransmitReceive+0x33a>
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	3301      	adds	r3, #1
 8005748:	d102      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x340>
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005750:	2323      	movs	r3, #35	; 0x23
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	2203      	movs	r2, #3
 8005756:	701a      	strb	r2, [r3, #0]
        goto error;
 8005758:	e01b      	b.n	8005792 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d19d      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x290>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2246      	movs	r2, #70	; 0x46
 8005768:	5a9b      	ldrh	r3, [r3, r2]
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d197      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	0018      	movs	r0, r3
 8005778:	f000 fac6 	bl	8005d08 <SPI_EndRxTxTransaction>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d007      	beq.n	8005790 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005780:	2323      	movs	r3, #35	; 0x23
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	2201      	movs	r2, #1
 8005786:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	661a      	str	r2, [r3, #96]	; 0x60
 800578e:	e000      	b.n	8005792 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005790:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	225d      	movs	r2, #93	; 0x5d
 8005796:	2101      	movs	r1, #1
 8005798:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	225c      	movs	r2, #92	; 0x5c
 800579e:	2100      	movs	r1, #0
 80057a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80057a2:	2323      	movs	r3, #35	; 0x23
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b00a      	add	sp, #40	; 0x28
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	ffffefff 	.word	0xffffefff

080057b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	001a      	movs	r2, r3
 80057d2:	2301      	movs	r3, #1
 80057d4:	4013      	ands	r3, r2
 80057d6:	d10f      	bne.n	80057f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057de:	d00b      	beq.n	80057f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	099b      	lsrs	r3, r3, #6
 80057e4:	001a      	movs	r2, r3
 80057e6:	2301      	movs	r3, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	d005      	beq.n	80057f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	0010      	movs	r0, r2
 80057f4:	4798      	blx	r3
    return;
 80057f6:	e0d5      	b.n	80059a4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	001a      	movs	r2, r3
 80057fe:	2301      	movs	r3, #1
 8005800:	4013      	ands	r3, r2
 8005802:	d00b      	beq.n	800581c <HAL_SPI_IRQHandler+0x68>
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	09db      	lsrs	r3, r3, #7
 8005808:	001a      	movs	r2, r3
 800580a:	2301      	movs	r3, #1
 800580c:	4013      	ands	r3, r2
 800580e:	d005      	beq.n	800581c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	0010      	movs	r0, r2
 8005818:	4798      	blx	r3
    return;
 800581a:	e0c3      	b.n	80059a4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	001a      	movs	r2, r3
 8005822:	2301      	movs	r3, #1
 8005824:	4013      	ands	r3, r2
 8005826:	d10c      	bne.n	8005842 <HAL_SPI_IRQHandler+0x8e>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	001a      	movs	r2, r3
 800582e:	2301      	movs	r3, #1
 8005830:	4013      	ands	r3, r2
 8005832:	d106      	bne.n	8005842 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	001a      	movs	r2, r3
 800583a:	2301      	movs	r3, #1
 800583c:	4013      	ands	r3, r2
 800583e:	d100      	bne.n	8005842 <HAL_SPI_IRQHandler+0x8e>
 8005840:	e0b0      	b.n	80059a4 <HAL_SPI_IRQHandler+0x1f0>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	001a      	movs	r2, r3
 8005848:	2301      	movs	r3, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d100      	bne.n	8005850 <HAL_SPI_IRQHandler+0x9c>
 800584e:	e0a9      	b.n	80059a4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	099b      	lsrs	r3, r3, #6
 8005854:	001a      	movs	r2, r3
 8005856:	2301      	movs	r3, #1
 8005858:	4013      	ands	r3, r2
 800585a:	d023      	beq.n	80058a4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	225d      	movs	r2, #93	; 0x5d
 8005860:	5c9b      	ldrb	r3, [r3, r2]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d011      	beq.n	800588c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586c:	2204      	movs	r2, #4
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	e00b      	b.n	80058a4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	693b      	ldr	r3, [r7, #16]
        return;
 80058a2:	e07f      	b.n	80059a4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	001a      	movs	r2, r3
 80058aa:	2301      	movs	r3, #1
 80058ac:	4013      	ands	r3, r2
 80058ae:	d014      	beq.n	80058da <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	2201      	movs	r2, #1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2140      	movs	r1, #64	; 0x40
 80058d4:	438a      	bics	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	001a      	movs	r2, r3
 80058e0:	2301      	movs	r3, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	d00c      	beq.n	8005900 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ea:	2208      	movs	r2, #8
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058f2:	2300      	movs	r3, #0
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005904:	2b00      	cmp	r3, #0
 8005906:	d04c      	beq.n	80059a2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	21e0      	movs	r1, #224	; 0xe0
 8005914:	438a      	bics	r2, r1
 8005916:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	225d      	movs	r2, #93	; 0x5d
 800591c:	2101      	movs	r1, #1
 800591e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2202      	movs	r2, #2
 8005924:	4013      	ands	r3, r2
 8005926:	d103      	bne.n	8005930 <HAL_SPI_IRQHandler+0x17c>
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2201      	movs	r2, #1
 800592c:	4013      	ands	r3, r2
 800592e:	d032      	beq.n	8005996 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2103      	movs	r1, #3
 800593c:	438a      	bics	r2, r1
 800593e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	2b00      	cmp	r3, #0
 8005946:	d010      	beq.n	800596a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <HAL_SPI_IRQHandler+0x1f8>)
 800594e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	0018      	movs	r0, r3
 8005956:	f7fe f8d3 	bl	8003b00 <HAL_DMA_Abort_IT>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d005      	beq.n	800596a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	2240      	movs	r2, #64	; 0x40
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <HAL_SPI_IRQHandler+0x1f8>)
 8005978:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	0018      	movs	r0, r3
 8005980:	f7fe f8be 	bl	8003b00 <HAL_DMA_Abort_IT>
 8005984:	1e03      	subs	r3, r0, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	2240      	movs	r2, #64	; 0x40
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005994:	e004      	b.n	80059a0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 f809 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800599e:	e000      	b.n	80059a2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80059a0:	46c0      	nop			; (mov r8, r8)
    return;
 80059a2:	46c0      	nop			; (mov r8, r8)
  }
}
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b008      	add	sp, #32
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	080059c1 	.word	0x080059c1

080059b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b002      	add	sp, #8
 80059be:	bd80      	pop	{r7, pc}

080059c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2246      	movs	r2, #70	; 0x46
 80059d2:	2100      	movs	r1, #0
 80059d4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	0018      	movs	r0, r3
 80059e0:	f7ff ffe6 	bl	80059b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b004      	add	sp, #16
 80059ea:	bd80      	pop	{r7, pc}

080059ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	1dfb      	adds	r3, r7, #7
 80059fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059fc:	f7fd ff66 	bl	80038cc <HAL_GetTick>
 8005a00:	0002      	movs	r2, r0
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	18d3      	adds	r3, r2, r3
 8005a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a0c:	f7fd ff5e 	bl	80038cc <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a14:	4b3a      	ldr	r3, [pc, #232]	; (8005b00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	015b      	lsls	r3, r3, #5
 8005a1a:	0d1b      	lsrs	r3, r3, #20
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	4353      	muls	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a22:	e058      	b.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	d055      	beq.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a2a:	f7fd ff4f 	bl	80038cc <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d902      	bls.n	8005a40 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d142      	bne.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	21e0      	movs	r1, #224	; 0xe0
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	2382      	movs	r3, #130	; 0x82
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d113      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d005      	beq.n	8005a74 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d107      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2140      	movs	r1, #64	; 0x40
 8005a80:	438a      	bics	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	019b      	lsls	r3, r3, #6
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d110      	bne.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	491a      	ldr	r1, [pc, #104]	; (8005b04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2180      	movs	r1, #128	; 0x80
 8005aac:	0189      	lsls	r1, r1, #6
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	225d      	movs	r2, #93	; 0x5d
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	225c      	movs	r2, #92	; 0x5c
 8005abe:	2100      	movs	r1, #0
 8005ac0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e017      	b.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	425a      	negs	r2, r3
 8005ae6:	4153      	adcs	r3, r2
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	001a      	movs	r2, r3
 8005aec:	1dfb      	adds	r3, r7, #7
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d197      	bne.n	8005a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b008      	add	sp, #32
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	20000004 	.word	0x20000004
 8005b04:	ffffdfff 	.word	0xffffdfff

08005b08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b16:	2317      	movs	r3, #23
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b1e:	f7fd fed5 	bl	80038cc <HAL_GetTick>
 8005b22:	0002      	movs	r2, r0
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	18d3      	adds	r3, r2, r3
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b2e:	f7fd fecd 	bl	80038cc <HAL_GetTick>
 8005b32:	0003      	movs	r3, r0
 8005b34:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b3e:	4b41      	ldr	r3, [pc, #260]	; (8005c44 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	0013      	movs	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	00da      	lsls	r2, r3, #3
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	0d1b      	lsrs	r3, r3, #20
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b50:	4353      	muls	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b54:	e068      	b.n	8005c28 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	23c0      	movs	r3, #192	; 0xc0
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d10a      	bne.n	8005b76 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	2117      	movs	r1, #23
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	d055      	beq.n	8005c28 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b7c:	f7fd fea6 	bl	80038cc <HAL_GetTick>
 8005b80:	0002      	movs	r2, r0
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d902      	bls.n	8005b92 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d142      	bne.n	8005c18 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	21e0      	movs	r1, #224	; 0xe0
 8005b9e:	438a      	bics	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	2382      	movs	r3, #130	; 0x82
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d113      	bne.n	8005bd6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	2380      	movs	r3, #128	; 0x80
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d005      	beq.n	8005bc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d107      	bne.n	8005bd6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	438a      	bics	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	019b      	lsls	r3, r3, #6
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d110      	bne.n	8005c04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4916      	ldr	r1, [pc, #88]	; (8005c48 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	0189      	lsls	r1, r1, #6
 8005c00:	430a      	orrs	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	225d      	movs	r2, #93	; 0x5d
 8005c08:	2101      	movs	r1, #1
 8005c0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	225c      	movs	r2, #92	; 0x5c
 8005c10:	2100      	movs	r1, #0
 8005c12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e010      	b.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d18e      	bne.n	8005b56 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b00a      	add	sp, #40	; 0x28
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	20000004 	.word	0x20000004
 8005c48:	ffffdfff 	.word	0xffffdfff

08005c4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	2382      	movs	r3, #130	; 0x82
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d113      	bne.n	8005c8c <SPI_EndRxTransaction+0x40>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d005      	beq.n	8005c7c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d107      	bne.n	8005c8c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2140      	movs	r1, #64	; 0x40
 8005c88:	438a      	bics	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	0013      	movs	r3, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	2180      	movs	r1, #128	; 0x80
 8005c9a:	f7ff fea7 	bl	80059ec <SPI_WaitFlagStateUntilTimeout>
 8005c9e:	1e03      	subs	r3, r0, #0
 8005ca0:	d007      	beq.n	8005cb2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e026      	b.n	8005d00 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	2382      	movs	r3, #130	; 0x82
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d11f      	bne.n	8005cfe <SPI_EndRxTransaction+0xb2>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	2380      	movs	r3, #128	; 0x80
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d005      	beq.n	8005cd6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d113      	bne.n	8005cfe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	23c0      	movs	r3, #192	; 0xc0
 8005cda:	00d9      	lsls	r1, r3, #3
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	0013      	movs	r3, r2
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f7ff ff0f 	bl	8005b08 <SPI_WaitFifoStateUntilTimeout>
 8005cea:	1e03      	subs	r3, r0, #0
 8005cec:	d007      	beq.n	8005cfe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e000      	b.n	8005d00 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b004      	add	sp, #16
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	23c0      	movs	r3, #192	; 0xc0
 8005d18:	0159      	lsls	r1, r3, #5
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	0013      	movs	r3, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	f7ff fef0 	bl	8005b08 <SPI_WaitFifoStateUntilTimeout>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d007      	beq.n	8005d3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d30:	2220      	movs	r2, #32
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e027      	b.n	8005d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	0013      	movs	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	f7ff fe4f 	bl	80059ec <SPI_WaitFlagStateUntilTimeout>
 8005d4e:	1e03      	subs	r3, r0, #0
 8005d50:	d007      	beq.n	8005d62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d56:	2220      	movs	r2, #32
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e014      	b.n	8005d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	23c0      	movs	r3, #192	; 0xc0
 8005d66:	00d9      	lsls	r1, r3, #3
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	0013      	movs	r3, r2
 8005d70:	2200      	movs	r2, #0
 8005d72:	f7ff fec9 	bl	8005b08 <SPI_WaitFifoStateUntilTimeout>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d007      	beq.n	8005d8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7e:	2220      	movs	r2, #32
 8005d80:	431a      	orrs	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e000      	b.n	8005d8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b004      	add	sp, #16
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e04a      	b.n	8005e3c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	223d      	movs	r2, #61	; 0x3d
 8005daa:	5c9b      	ldrb	r3, [r3, r2]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	223c      	movs	r2, #60	; 0x3c
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f000 f841 	bl	8005e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	223d      	movs	r2, #61	; 0x3d
 8005dc6:	2102      	movs	r1, #2
 8005dc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	0019      	movs	r1, r3
 8005dd4:	0010      	movs	r0, r2
 8005dd6:	f000 f9eb 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2248      	movs	r2, #72	; 0x48
 8005dde:	2101      	movs	r1, #1
 8005de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	223e      	movs	r2, #62	; 0x3e
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	223f      	movs	r2, #63	; 0x3f
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2240      	movs	r2, #64	; 0x40
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2241      	movs	r2, #65	; 0x41
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2242      	movs	r2, #66	; 0x42
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2243      	movs	r2, #67	; 0x43
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2244      	movs	r2, #68	; 0x44
 8005e16:	2101      	movs	r1, #1
 8005e18:	5499      	strb	r1, [r3, r2]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2245      	movs	r2, #69	; 0x45
 8005e1e:	2101      	movs	r1, #1
 8005e20:	5499      	strb	r1, [r3, r2]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2246      	movs	r2, #70	; 0x46
 8005e26:	2101      	movs	r1, #1
 8005e28:	5499      	strb	r1, [r3, r2]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2247      	movs	r2, #71	; 0x47
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	223d      	movs	r2, #61	; 0x3d
 8005e36:	2101      	movs	r1, #1
 8005e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b002      	add	sp, #8
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e4c:	46c0      	nop			; (mov r8, r8)
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b002      	add	sp, #8
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	223d      	movs	r2, #61	; 0x3d
 8005e60:	5c9b      	ldrb	r3, [r3, r2]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d001      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e042      	b.n	8005ef2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	223d      	movs	r2, #61	; 0x3d
 8005e70:	2102      	movs	r1, #2
 8005e72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	430a      	orrs	r2, r1
 8005e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_TIM_Base_Start_IT+0xa8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0x5a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	2380      	movs	r3, #128	; 0x80
 8005e94:	05db      	lsls	r3, r3, #23
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d009      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0x5a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <HAL_TIM_Base_Start_IT+0xac>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIM_Base_Start_IT+0x5a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <HAL_TIM_Base_Start_IT+0xb0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d116      	bne.n	8005edc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <HAL_TIM_Base_Start_IT+0xb4>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d016      	beq.n	8005eee <HAL_TIM_Base_Start_IT+0x9a>
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	025b      	lsls	r3, r3, #9
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d011      	beq.n	8005eee <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eda:	e008      	b.n	8005eee <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e000      	b.n	8005ef0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b004      	add	sp, #16
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	00010007 	.word	0x00010007

08005f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d124      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d11d      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2203      	movs	r2, #3
 8005f36:	4252      	negs	r2, r2
 8005f38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2203      	movs	r2, #3
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f000 f916 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e007      	b.n	8005f66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f909 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 f915 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2204      	movs	r2, #4
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d125      	bne.n	8005fc6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2204      	movs	r2, #4
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11e      	bne.n	8005fc6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	4252      	negs	r2, r2
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	23c0      	movs	r3, #192	; 0xc0
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d004      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 f8e9 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8005fae:	e007      	b.n	8005fc0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 f8dc 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f000 f8e8 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d124      	bne.n	800601e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	4013      	ands	r3, r2
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d11d      	bne.n	800601e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2209      	movs	r2, #9
 8005fe8:	4252      	negs	r2, r2
 8005fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 f8bd 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8006006:	e007      	b.n	8006018 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f8b0 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0018      	movs	r0, r3
 8006014:	f000 f8bc 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2210      	movs	r2, #16
 8006026:	4013      	ands	r3, r2
 8006028:	2b10      	cmp	r3, #16
 800602a:	d125      	bne.n	8006078 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2210      	movs	r2, #16
 8006034:	4013      	ands	r3, r2
 8006036:	2b10      	cmp	r3, #16
 8006038:	d11e      	bne.n	8006078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2211      	movs	r2, #17
 8006040:	4252      	negs	r2, r2
 8006042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2208      	movs	r2, #8
 8006048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	23c0      	movs	r3, #192	; 0xc0
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4013      	ands	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f890 	bl	8006180 <HAL_TIM_IC_CaptureCallback>
 8006060:	e007      	b.n	8006072 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f883 	bl	8006170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f88f 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2201      	movs	r2, #1
 8006080:	4013      	ands	r3, r2
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10f      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	4013      	ands	r3, r2
 8006090:	2b01      	cmp	r3, #1
 8006092:	d108      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2202      	movs	r2, #2
 800609a:	4252      	negs	r2, r2
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7fd f8b3 	bl	800320c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d10f      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	4013      	ands	r3, r2
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d108      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2281      	movs	r2, #129	; 0x81
 80060c8:	4252      	negs	r2, r2
 80060ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 f8f6 	bl	80062c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	2380      	movs	r3, #128	; 0x80
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	401a      	ands	r2, r3
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d10e      	bne.n	8006106 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d107      	bne.n	8006106 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_TIM_IRQHandler+0x260>)
 80060fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0018      	movs	r0, r3
 8006102:	f000 f8e5 	bl	80062d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	4013      	ands	r3, r2
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d10f      	bne.n	8006134 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	2240      	movs	r2, #64	; 0x40
 800611c:	4013      	ands	r3, r2
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d108      	bne.n	8006134 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2241      	movs	r2, #65	; 0x41
 8006128:	4252      	negs	r2, r2
 800612a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	0018      	movs	r0, r3
 8006130:	f000 f836 	bl	80061a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2220      	movs	r2, #32
 800613c:	4013      	ands	r3, r2
 800613e:	2b20      	cmp	r3, #32
 8006140:	d10f      	bne.n	8006162 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	4013      	ands	r3, r2
 800614c:	2b20      	cmp	r3, #32
 800614e:	d108      	bne.n	8006162 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2221      	movs	r2, #33	; 0x21
 8006156:	4252      	negs	r2, r2
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 f8a7 	bl	80062b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	b002      	add	sp, #8
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	fffffeff 	.word	0xfffffeff

08006170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006178:	46c0      	nop			; (mov r8, r8)
 800617a:	46bd      	mov	sp, r7
 800617c:	b002      	add	sp, #8
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006198:	46c0      	nop			; (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	b002      	add	sp, #8
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a8:	46c0      	nop			; (mov r8, r8)
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b002      	add	sp, #8
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a34      	ldr	r2, [pc, #208]	; (8006294 <TIM_Base_SetConfig+0xe4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d008      	beq.n	80061da <TIM_Base_SetConfig+0x2a>
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	05db      	lsls	r3, r3, #23
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d003      	beq.n	80061da <TIM_Base_SetConfig+0x2a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a30      	ldr	r2, [pc, #192]	; (8006298 <TIM_Base_SetConfig+0xe8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2270      	movs	r2, #112	; 0x70
 80061de:	4393      	bics	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a29      	ldr	r2, [pc, #164]	; (8006294 <TIM_Base_SetConfig+0xe4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <TIM_Base_SetConfig+0x76>
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	05db      	lsls	r3, r3, #23
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d013      	beq.n	8006226 <TIM_Base_SetConfig+0x76>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a25      	ldr	r2, [pc, #148]	; (8006298 <TIM_Base_SetConfig+0xe8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00f      	beq.n	8006226 <TIM_Base_SetConfig+0x76>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a24      	ldr	r2, [pc, #144]	; (800629c <TIM_Base_SetConfig+0xec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00b      	beq.n	8006226 <TIM_Base_SetConfig+0x76>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a23      	ldr	r2, [pc, #140]	; (80062a0 <TIM_Base_SetConfig+0xf0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d007      	beq.n	8006226 <TIM_Base_SetConfig+0x76>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <TIM_Base_SetConfig+0xf4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d003      	beq.n	8006226 <TIM_Base_SetConfig+0x76>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <TIM_Base_SetConfig+0xf8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d108      	bne.n	8006238 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a20      	ldr	r2, [pc, #128]	; (80062ac <TIM_Base_SetConfig+0xfc>)
 800622a:	4013      	ands	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2280      	movs	r2, #128	; 0x80
 800623c:	4393      	bics	r3, r2
 800623e:	001a      	movs	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a0c      	ldr	r2, [pc, #48]	; (8006294 <TIM_Base_SetConfig+0xe4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00b      	beq.n	800627e <TIM_Base_SetConfig+0xce>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a0d      	ldr	r2, [pc, #52]	; (80062a0 <TIM_Base_SetConfig+0xf0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d007      	beq.n	800627e <TIM_Base_SetConfig+0xce>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a0c      	ldr	r2, [pc, #48]	; (80062a4 <TIM_Base_SetConfig+0xf4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_Base_SetConfig+0xce>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a0b      	ldr	r2, [pc, #44]	; (80062a8 <TIM_Base_SetConfig+0xf8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d103      	bne.n	8006286 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	615a      	str	r2, [r3, #20]
}
 800628c:	46c0      	nop			; (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	b004      	add	sp, #16
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40000400 	.word	0x40000400
 800629c:	40002000 	.word	0x40002000
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800
 80062ac:	fffffcff 	.word	0xfffffcff

080062b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b002      	add	sp, #8
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d8:	46c0      	nop			; (mov r8, r8)
 80062da:	46bd      	mov	sp, r7
 80062dc:	b002      	add	sp, #8
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e046      	b.n	8006380 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2288      	movs	r2, #136	; 0x88
 80062f6:	589b      	ldr	r3, [r3, r2]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d107      	bne.n	800630c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2284      	movs	r2, #132	; 0x84
 8006300:	2100      	movs	r1, #0
 8006302:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	f7fd fa1c 	bl	8003744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2288      	movs	r2, #136	; 0x88
 8006310:	2124      	movs	r1, #36	; 0x24
 8006312:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2101      	movs	r1, #1
 8006320:	438a      	bics	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	0018      	movs	r0, r3
 8006328:	f000 fc6c 	bl	8006c04 <UART_SetConfig>
 800632c:	0003      	movs	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e024      	b.n	8006380 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f000 ff1d 	bl	8007180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	490d      	ldr	r1, [pc, #52]	; (8006388 <HAL_UART_Init+0xa8>)
 8006352:	400a      	ands	r2, r1
 8006354:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	212a      	movs	r1, #42	; 0x2a
 8006362:	438a      	bics	r2, r1
 8006364:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2101      	movs	r1, #1
 8006372:	430a      	orrs	r2, r1
 8006374:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f000 ffb5 	bl	80072e8 <UART_CheckIdleState>
 800637e:	0003      	movs	r3, r0
}
 8006380:	0018      	movs	r0, r3
 8006382:	46bd      	mov	sp, r7
 8006384:	b002      	add	sp, #8
 8006386:	bd80      	pop	{r7, pc}
 8006388:	ffffb7ff 	.word	0xffffb7ff

0800638c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	1dbb      	adds	r3, r7, #6
 800639a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2288      	movs	r2, #136	; 0x88
 80063a0:	589b      	ldr	r3, [r3, r2]
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d000      	beq.n	80063a8 <HAL_UART_Transmit+0x1c>
 80063a6:	e088      	b.n	80064ba <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_UART_Transmit+0x2a>
 80063ae:	1dbb      	adds	r3, r7, #6
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e080      	b.n	80064bc <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	2380      	movs	r3, #128	; 0x80
 80063c0:	015b      	lsls	r3, r3, #5
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d109      	bne.n	80063da <HAL_UART_Transmit+0x4e>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2201      	movs	r2, #1
 80063d2:	4013      	ands	r3, r2
 80063d4:	d001      	beq.n	80063da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e070      	b.n	80064bc <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2290      	movs	r2, #144	; 0x90
 80063de:	2100      	movs	r1, #0
 80063e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2288      	movs	r2, #136	; 0x88
 80063e6:	2121      	movs	r1, #33	; 0x21
 80063e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ea:	f7fd fa6f 	bl	80038cc <HAL_GetTick>
 80063ee:	0003      	movs	r3, r0
 80063f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1dba      	adds	r2, r7, #6
 80063f6:	2154      	movs	r1, #84	; 0x54
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1dba      	adds	r2, r7, #6
 8006400:	2156      	movs	r1, #86	; 0x56
 8006402:	8812      	ldrh	r2, [r2, #0]
 8006404:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	015b      	lsls	r3, r3, #5
 800640e:	429a      	cmp	r2, r3
 8006410:	d108      	bne.n	8006424 <HAL_UART_Transmit+0x98>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	e003      	b.n	800642c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006428:	2300      	movs	r3, #0
 800642a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800642c:	e02c      	b.n	8006488 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	0013      	movs	r3, r2
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	f000 ffa2 	bl	8007384 <UART_WaitOnFlagUntilTimeout>
 8006440:	1e03      	subs	r3, r0, #0
 8006442:	d001      	beq.n	8006448 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e039      	b.n	80064bc <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	001a      	movs	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	05d2      	lsls	r2, r2, #23
 800645a:	0dd2      	lsrs	r2, r2, #23
 800645c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	3302      	adds	r3, #2
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	e007      	b.n	8006476 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2256      	movs	r2, #86	; 0x56
 800647a:	5a9b      	ldrh	r3, [r3, r2]
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b299      	uxth	r1, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2256      	movs	r2, #86	; 0x56
 8006486:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2256      	movs	r2, #86	; 0x56
 800648c:	5a9b      	ldrh	r3, [r3, r2]
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1cc      	bne.n	800642e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	0013      	movs	r3, r2
 800649e:	2200      	movs	r2, #0
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	f000 ff6f 	bl	8007384 <UART_WaitOnFlagUntilTimeout>
 80064a6:	1e03      	subs	r3, r0, #0
 80064a8:	d001      	beq.n	80064ae <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e006      	b.n	80064bc <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2288      	movs	r2, #136	; 0x88
 80064b2:	2120      	movs	r1, #32
 80064b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	0018      	movs	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	b008      	add	sp, #32
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	1dbb      	adds	r3, r7, #6
 80064d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	228c      	movs	r2, #140	; 0x8c
 80064d6:	589b      	ldr	r3, [r3, r2]
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d14a      	bne.n	8006572 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_UART_Receive_IT+0x26>
 80064e2:	1dbb      	adds	r3, r7, #6
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e042      	b.n	8006574 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	2380      	movs	r3, #128	; 0x80
 80064f4:	015b      	lsls	r3, r3, #5
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d109      	bne.n	800650e <HAL_UART_Receive_IT+0x4a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2201      	movs	r2, #1
 8006506:	4013      	ands	r3, r2
 8006508:	d001      	beq.n	800650e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e032      	b.n	8006574 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a18      	ldr	r2, [pc, #96]	; (800657c <HAL_UART_Receive_IT+0xb8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d020      	beq.n	8006560 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	041b      	lsls	r3, r3, #16
 8006528:	4013      	ands	r3, r2
 800652a:	d019      	beq.n	8006560 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652c:	f3ef 8310 	mrs	r3, PRIMASK
 8006530:	613b      	str	r3, [r7, #16]
  return(result);
 8006532:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	2301      	movs	r3, #1
 8006538:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f383 8810 	msr	PRIMASK, r3
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	04c9      	lsls	r1, r1, #19
 8006550:	430a      	orrs	r2, r1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	0018      	movs	r0, r3
 800656a:	f000 ffd3 	bl	8007514 <UART_Start_Receive_IT>
 800656e:	0003      	movs	r3, r0
 8006570:	e000      	b.n	8006574 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	b008      	add	sp, #32
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40008000 	.word	0x40008000

08006580 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006580:	b5b0      	push	{r4, r5, r7, lr}
 8006582:	b0aa      	sub	sp, #168	; 0xa8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	22a4      	movs	r2, #164	; 0xa4
 8006590:	18b9      	adds	r1, r7, r2
 8006592:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	20a0      	movs	r0, #160	; 0xa0
 800659c:	1839      	adds	r1, r7, r0
 800659e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	249c      	movs	r4, #156	; 0x9c
 80065a8:	1939      	adds	r1, r7, r4
 80065aa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ac:	0011      	movs	r1, r2
 80065ae:	18bb      	adds	r3, r7, r2
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4aa2      	ldr	r2, [pc, #648]	; (800683c <HAL_UART_IRQHandler+0x2bc>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	2298      	movs	r2, #152	; 0x98
 80065b8:	18bd      	adds	r5, r7, r2
 80065ba:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80065bc:	18bb      	adds	r3, r7, r2
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11a      	bne.n	80065fa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065c4:	187b      	adds	r3, r7, r1
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2220      	movs	r2, #32
 80065ca:	4013      	ands	r3, r2
 80065cc:	d015      	beq.n	80065fa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065ce:	183b      	adds	r3, r7, r0
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2220      	movs	r2, #32
 80065d4:	4013      	ands	r3, r2
 80065d6:	d105      	bne.n	80065e4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065d8:	193b      	adds	r3, r7, r4
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	2380      	movs	r3, #128	; 0x80
 80065de:	055b      	lsls	r3, r3, #21
 80065e0:	4013      	ands	r3, r2
 80065e2:	d00a      	beq.n	80065fa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d100      	bne.n	80065ee <HAL_UART_IRQHandler+0x6e>
 80065ec:	e2dc      	b.n	8006ba8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	0010      	movs	r0, r2
 80065f6:	4798      	blx	r3
      }
      return;
 80065f8:	e2d6      	b.n	8006ba8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065fa:	2398      	movs	r3, #152	; 0x98
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d100      	bne.n	8006606 <HAL_UART_IRQHandler+0x86>
 8006604:	e122      	b.n	800684c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006606:	239c      	movs	r3, #156	; 0x9c
 8006608:	18fb      	adds	r3, r7, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a8c      	ldr	r2, [pc, #560]	; (8006840 <HAL_UART_IRQHandler+0x2c0>)
 800660e:	4013      	ands	r3, r2
 8006610:	d106      	bne.n	8006620 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006612:	23a0      	movs	r3, #160	; 0xa0
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a8a      	ldr	r2, [pc, #552]	; (8006844 <HAL_UART_IRQHandler+0x2c4>)
 800661a:	4013      	ands	r3, r2
 800661c:	d100      	bne.n	8006620 <HAL_UART_IRQHandler+0xa0>
 800661e:	e115      	b.n	800684c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006620:	23a4      	movs	r3, #164	; 0xa4
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	4013      	ands	r3, r2
 800662a:	d012      	beq.n	8006652 <HAL_UART_IRQHandler+0xd2>
 800662c:	23a0      	movs	r3, #160	; 0xa0
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	2380      	movs	r3, #128	; 0x80
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	4013      	ands	r3, r2
 8006638:	d00b      	beq.n	8006652 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2290      	movs	r2, #144	; 0x90
 8006646:	589b      	ldr	r3, [r3, r2]
 8006648:	2201      	movs	r2, #1
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2190      	movs	r1, #144	; 0x90
 8006650:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006652:	23a4      	movs	r3, #164	; 0xa4
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2202      	movs	r2, #2
 800665a:	4013      	ands	r3, r2
 800665c:	d011      	beq.n	8006682 <HAL_UART_IRQHandler+0x102>
 800665e:	239c      	movs	r3, #156	; 0x9c
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2201      	movs	r2, #1
 8006666:	4013      	ands	r3, r2
 8006668:	d00b      	beq.n	8006682 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2202      	movs	r2, #2
 8006670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2290      	movs	r2, #144	; 0x90
 8006676:	589b      	ldr	r3, [r3, r2]
 8006678:	2204      	movs	r2, #4
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2190      	movs	r1, #144	; 0x90
 8006680:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006682:	23a4      	movs	r3, #164	; 0xa4
 8006684:	18fb      	adds	r3, r7, r3
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2204      	movs	r2, #4
 800668a:	4013      	ands	r3, r2
 800668c:	d011      	beq.n	80066b2 <HAL_UART_IRQHandler+0x132>
 800668e:	239c      	movs	r3, #156	; 0x9c
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2201      	movs	r2, #1
 8006696:	4013      	ands	r3, r2
 8006698:	d00b      	beq.n	80066b2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2204      	movs	r2, #4
 80066a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2290      	movs	r2, #144	; 0x90
 80066a6:	589b      	ldr	r3, [r3, r2]
 80066a8:	2202      	movs	r2, #2
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2190      	movs	r1, #144	; 0x90
 80066b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066b2:	23a4      	movs	r3, #164	; 0xa4
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2208      	movs	r2, #8
 80066ba:	4013      	ands	r3, r2
 80066bc:	d017      	beq.n	80066ee <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066be:	23a0      	movs	r3, #160	; 0xa0
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2220      	movs	r2, #32
 80066c6:	4013      	ands	r3, r2
 80066c8:	d105      	bne.n	80066d6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066ca:	239c      	movs	r3, #156	; 0x9c
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a5b      	ldr	r2, [pc, #364]	; (8006840 <HAL_UART_IRQHandler+0x2c0>)
 80066d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066d4:	d00b      	beq.n	80066ee <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2208      	movs	r2, #8
 80066dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2290      	movs	r2, #144	; 0x90
 80066e2:	589b      	ldr	r3, [r3, r2]
 80066e4:	2208      	movs	r2, #8
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2190      	movs	r1, #144	; 0x90
 80066ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066ee:	23a4      	movs	r3, #164	; 0xa4
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	2380      	movs	r3, #128	; 0x80
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	4013      	ands	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_UART_IRQHandler+0x1a4>
 80066fc:	23a0      	movs	r3, #160	; 0xa0
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	2380      	movs	r3, #128	; 0x80
 8006704:	04db      	lsls	r3, r3, #19
 8006706:	4013      	ands	r3, r2
 8006708:	d00c      	beq.n	8006724 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2280      	movs	r2, #128	; 0x80
 8006710:	0112      	lsls	r2, r2, #4
 8006712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2290      	movs	r2, #144	; 0x90
 8006718:	589b      	ldr	r3, [r3, r2]
 800671a:	2220      	movs	r2, #32
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2190      	movs	r1, #144	; 0x90
 8006722:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2290      	movs	r2, #144	; 0x90
 8006728:	589b      	ldr	r3, [r3, r2]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d100      	bne.n	8006730 <HAL_UART_IRQHandler+0x1b0>
 800672e:	e23d      	b.n	8006bac <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006730:	23a4      	movs	r3, #164	; 0xa4
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2220      	movs	r2, #32
 8006738:	4013      	ands	r3, r2
 800673a:	d015      	beq.n	8006768 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800673c:	23a0      	movs	r3, #160	; 0xa0
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2220      	movs	r2, #32
 8006744:	4013      	ands	r3, r2
 8006746:	d106      	bne.n	8006756 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006748:	239c      	movs	r3, #156	; 0x9c
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	055b      	lsls	r3, r3, #21
 8006752:	4013      	ands	r3, r2
 8006754:	d008      	beq.n	8006768 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	0010      	movs	r0, r2
 8006766:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2290      	movs	r2, #144	; 0x90
 800676c:	589b      	ldr	r3, [r3, r2]
 800676e:	2194      	movs	r1, #148	; 0x94
 8006770:	187a      	adds	r2, r7, r1
 8006772:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2240      	movs	r2, #64	; 0x40
 800677c:	4013      	ands	r3, r2
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d004      	beq.n	800678c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006782:	187b      	adds	r3, r7, r1
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2228      	movs	r2, #40	; 0x28
 8006788:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800678a:	d04c      	beq.n	8006826 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0018      	movs	r0, r3
 8006790:	f000 ffe4 	bl	800775c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2240      	movs	r2, #64	; 0x40
 800679c:	4013      	ands	r3, r2
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d13c      	bne.n	800681c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067a2:	f3ef 8310 	mrs	r3, PRIMASK
 80067a6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80067a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067aa:	2090      	movs	r0, #144	; 0x90
 80067ac:	183a      	adds	r2, r7, r0
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	2301      	movs	r3, #1
 80067b2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b6:	f383 8810 	msr	PRIMASK, r3
}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2140      	movs	r1, #64	; 0x40
 80067c8:	438a      	bics	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]
 80067cc:	183b      	adds	r3, r7, r0
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067d4:	f383 8810 	msr	PRIMASK, r3
}
 80067d8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2280      	movs	r2, #128	; 0x80
 80067de:	589b      	ldr	r3, [r3, r2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d016      	beq.n	8006812 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2280      	movs	r2, #128	; 0x80
 80067e8:	589b      	ldr	r3, [r3, r2]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <HAL_UART_IRQHandler+0x2c8>)
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2280      	movs	r2, #128	; 0x80
 80067f2:	589b      	ldr	r3, [r3, r2]
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7fd f983 	bl	8003b00 <HAL_DMA_Abort_IT>
 80067fa:	1e03      	subs	r3, r0, #0
 80067fc:	d01c      	beq.n	8006838 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2280      	movs	r2, #128	; 0x80
 8006802:	589b      	ldr	r3, [r3, r2]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	5852      	ldr	r2, [r2, r1]
 800680c:	0010      	movs	r0, r2
 800680e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	e012      	b.n	8006838 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0018      	movs	r0, r3
 8006816:	f000 f9e1 	bl	8006bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681a:	e00d      	b.n	8006838 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	0018      	movs	r0, r3
 8006820:	f000 f9dc 	bl	8006bdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e008      	b.n	8006838 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f000 f9d7 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2290      	movs	r2, #144	; 0x90
 8006832:	2100      	movs	r1, #0
 8006834:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006836:	e1b9      	b.n	8006bac <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	46c0      	nop			; (mov r8, r8)
    return;
 800683a:	e1b7      	b.n	8006bac <HAL_UART_IRQHandler+0x62c>
 800683c:	0000080f 	.word	0x0000080f
 8006840:	10000001 	.word	0x10000001
 8006844:	04000120 	.word	0x04000120
 8006848:	08007829 	.word	0x08007829

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d000      	beq.n	8006856 <HAL_UART_IRQHandler+0x2d6>
 8006854:	e13e      	b.n	8006ad4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006856:	23a4      	movs	r3, #164	; 0xa4
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2210      	movs	r2, #16
 800685e:	4013      	ands	r3, r2
 8006860:	d100      	bne.n	8006864 <HAL_UART_IRQHandler+0x2e4>
 8006862:	e137      	b.n	8006ad4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006864:	23a0      	movs	r3, #160	; 0xa0
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2210      	movs	r2, #16
 800686c:	4013      	ands	r3, r2
 800686e:	d100      	bne.n	8006872 <HAL_UART_IRQHandler+0x2f2>
 8006870:	e130      	b.n	8006ad4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2240      	movs	r2, #64	; 0x40
 8006882:	4013      	ands	r3, r2
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d000      	beq.n	800688a <HAL_UART_IRQHandler+0x30a>
 8006888:	e0a4      	b.n	80069d4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2280      	movs	r2, #128	; 0x80
 800688e:	589b      	ldr	r3, [r3, r2]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	217e      	movs	r1, #126	; 0x7e
 8006896:	187b      	adds	r3, r7, r1
 8006898:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800689a:	187b      	adds	r3, r7, r1
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d100      	bne.n	80068a4 <HAL_UART_IRQHandler+0x324>
 80068a2:	e185      	b.n	8006bb0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	225c      	movs	r2, #92	; 0x5c
 80068a8:	5a9b      	ldrh	r3, [r3, r2]
 80068aa:	187a      	adds	r2, r7, r1
 80068ac:	8812      	ldrh	r2, [r2, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d300      	bcc.n	80068b4 <HAL_UART_IRQHandler+0x334>
 80068b2:	e17d      	b.n	8006bb0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	187a      	adds	r2, r7, r1
 80068b8:	215e      	movs	r1, #94	; 0x5e
 80068ba:	8812      	ldrh	r2, [r2, #0]
 80068bc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2280      	movs	r2, #128	; 0x80
 80068c2:	589b      	ldr	r3, [r3, r2]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2220      	movs	r2, #32
 80068ca:	4013      	ands	r3, r2
 80068cc:	d170      	bne.n	80069b0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ce:	f3ef 8310 	mrs	r3, PRIMASK
 80068d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80068d8:	2301      	movs	r3, #1
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068de:	f383 8810 	msr	PRIMASK, r3
}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	49b4      	ldr	r1, [pc, #720]	; (8006bc0 <HAL_UART_IRQHandler+0x640>)
 80068f0:	400a      	ands	r2, r1
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	f383 8810 	msr	PRIMASK, r3
}
 80068fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006908:	677b      	str	r3, [r7, #116]	; 0x74
 800690a:	2301      	movs	r3, #1
 800690c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	438a      	bics	r2, r1
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	f383 8810 	msr	PRIMASK, r3
}
 8006930:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006932:	f3ef 8310 	mrs	r3, PRIMASK
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006938:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693a:	673b      	str	r3, [r7, #112]	; 0x70
 800693c:	2301      	movs	r3, #1
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2140      	movs	r1, #64	; 0x40
 8006954:	438a      	bics	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
 8006958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695e:	f383 8810 	msr	PRIMASK, r3
}
 8006962:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	228c      	movs	r2, #140	; 0x8c
 8006968:	2120      	movs	r1, #32
 800696a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006972:	f3ef 8310 	mrs	r3, PRIMASK
 8006976:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006978:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800697c:	2301      	movs	r3, #1
 800697e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006982:	f383 8810 	msr	PRIMASK, r3
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2110      	movs	r1, #16
 8006994:	438a      	bics	r2, r1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699e:	f383 8810 	msr	PRIMASK, r3
}
 80069a2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	589b      	ldr	r3, [r3, r2]
 80069aa:	0018      	movs	r0, r3
 80069ac:	f7fd f846 	bl	8003a3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	225c      	movs	r2, #92	; 0x5c
 80069ba:	5a9a      	ldrh	r2, [r3, r2]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	215e      	movs	r1, #94	; 0x5e
 80069c0:	5a5b      	ldrh	r3, [r3, r1]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0011      	movs	r1, r2
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 f90d 	bl	8006bec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069d2:	e0ed      	b.n	8006bb0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	225c      	movs	r2, #92	; 0x5c
 80069d8:	5a99      	ldrh	r1, [r3, r2]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	225e      	movs	r2, #94	; 0x5e
 80069de:	5a9b      	ldrh	r3, [r3, r2]
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	208e      	movs	r0, #142	; 0x8e
 80069e4:	183b      	adds	r3, r7, r0
 80069e6:	1a8a      	subs	r2, r1, r2
 80069e8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	225e      	movs	r2, #94	; 0x5e
 80069ee:	5a9b      	ldrh	r3, [r3, r2]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d100      	bne.n	80069f8 <HAL_UART_IRQHandler+0x478>
 80069f6:	e0dd      	b.n	8006bb4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d100      	bne.n	8006a02 <HAL_UART_IRQHandler+0x482>
 8006a00:	e0d8      	b.n	8006bb4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a02:	f3ef 8310 	mrs	r3, PRIMASK
 8006a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a08:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a0a:	2488      	movs	r4, #136	; 0x88
 8006a0c:	193a      	adds	r2, r7, r4
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	2301      	movs	r3, #1
 8006a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f383 8810 	msr	PRIMASK, r3
}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4967      	ldr	r1, [pc, #412]	; (8006bc4 <HAL_UART_IRQHandler+0x644>)
 8006a28:	400a      	ands	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	193b      	adds	r3, r7, r4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f383 8810 	msr	PRIMASK, r3
}
 8006a38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a40:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a42:	2484      	movs	r4, #132	; 0x84
 8006a44:	193a      	adds	r2, r7, r4
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	2301      	movs	r3, #1
 8006a4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f383 8810 	msr	PRIMASK, r3
}
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	495a      	ldr	r1, [pc, #360]	; (8006bc8 <HAL_UART_IRQHandler+0x648>)
 8006a60:	400a      	ands	r2, r1
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	193b      	adds	r3, r7, r4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f383 8810 	msr	PRIMASK, r3
}
 8006a70:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	228c      	movs	r2, #140	; 0x8c
 8006a76:	2120      	movs	r1, #32
 8006a78:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a86:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8e:	2480      	movs	r4, #128	; 0x80
 8006a90:	193a      	adds	r2, r7, r4
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	2301      	movs	r3, #1
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2110      	movs	r1, #16
 8006aac:	438a      	bics	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	193b      	adds	r3, r7, r4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	f383 8810 	msr	PRIMASK, r3
}
 8006abc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ac4:	183b      	adds	r3, r7, r0
 8006ac6:	881a      	ldrh	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	0011      	movs	r1, r2
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 f88d 	bl	8006bec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ad2:	e06f      	b.n	8006bb4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ad4:	23a4      	movs	r3, #164	; 0xa4
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	2380      	movs	r3, #128	; 0x80
 8006adc:	035b      	lsls	r3, r3, #13
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d010      	beq.n	8006b04 <HAL_UART_IRQHandler+0x584>
 8006ae2:	239c      	movs	r3, #156	; 0x9c
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	2380      	movs	r3, #128	; 0x80
 8006aea:	03db      	lsls	r3, r3, #15
 8006aec:	4013      	ands	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	0352      	lsls	r2, r2, #13
 8006af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	f001 fb37 	bl	8008170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b02:	e05a      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b04:	23a4      	movs	r3, #164	; 0xa4
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2280      	movs	r2, #128	; 0x80
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	d016      	beq.n	8006b3e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b10:	23a0      	movs	r3, #160	; 0xa0
 8006b12:	18fb      	adds	r3, r7, r3
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2280      	movs	r2, #128	; 0x80
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d106      	bne.n	8006b2a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b1c:	239c      	movs	r3, #156	; 0x9c
 8006b1e:	18fb      	adds	r3, r7, r3
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	041b      	lsls	r3, r3, #16
 8006b26:	4013      	ands	r3, r2
 8006b28:	d009      	beq.n	8006b3e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d042      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	0010      	movs	r0, r2
 8006b3a:	4798      	blx	r3
    }
    return;
 8006b3c:	e03c      	b.n	8006bb8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b3e:	23a4      	movs	r3, #164	; 0xa4
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	4013      	ands	r3, r2
 8006b48:	d00a      	beq.n	8006b60 <HAL_UART_IRQHandler+0x5e0>
 8006b4a:	23a0      	movs	r3, #160	; 0xa0
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2240      	movs	r2, #64	; 0x40
 8006b52:	4013      	ands	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f000 fe7c 	bl	8007856 <UART_EndTransmit_IT>
    return;
 8006b5e:	e02c      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b60:	23a4      	movs	r3, #164	; 0xa4
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	041b      	lsls	r3, r3, #16
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d00b      	beq.n	8006b86 <HAL_UART_IRQHandler+0x606>
 8006b6e:	23a0      	movs	r3, #160	; 0xa0
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	05db      	lsls	r3, r3, #23
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f001 fb06 	bl	8008190 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b84:	e019      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b86:	23a4      	movs	r3, #164	; 0xa4
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	045b      	lsls	r3, r3, #17
 8006b90:	4013      	ands	r3, r2
 8006b92:	d012      	beq.n	8006bba <HAL_UART_IRQHandler+0x63a>
 8006b94:	23a0      	movs	r3, #160	; 0xa0
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da0d      	bge.n	8006bba <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f001 faed 	bl	8008180 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ba6:	e008      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
      return;
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	e006      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
    return;
 8006bac:	46c0      	nop			; (mov r8, r8)
 8006bae:	e004      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
      return;
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	e002      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
      return;
 8006bb4:	46c0      	nop			; (mov r8, r8)
 8006bb6:	e000      	b.n	8006bba <HAL_UART_IRQHandler+0x63a>
    return;
 8006bb8:	46c0      	nop			; (mov r8, r8)
  }
}
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b02a      	add	sp, #168	; 0xa8
 8006bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8006bc0:	fffffeff 	.word	0xfffffeff
 8006bc4:	fffffedf 	.word	0xfffffedf
 8006bc8:	effffffe 	.word	0xeffffffe

08006bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006be4:	46c0      	nop			; (mov r8, r8)
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b002      	add	sp, #8
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	000a      	movs	r2, r1
 8006bf6:	1cbb      	adds	r3, r7, #2
 8006bf8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c04:	b5b0      	push	{r4, r5, r7, lr}
 8006c06:	b090      	sub	sp, #64	; 0x40
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c0c:	231a      	movs	r3, #26
 8006c0e:	2220      	movs	r2, #32
 8006c10:	189b      	adds	r3, r3, r2
 8006c12:	19db      	adds	r3, r3, r7
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4aaf      	ldr	r2, [pc, #700]	; (8006ef4 <UART_SetConfig+0x2f0>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	4aaa      	ldr	r2, [pc, #680]	; (8006ef8 <UART_SetConfig+0x2f4>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	0018      	movs	r0, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	68d9      	ldr	r1, [r3, #12]
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	430b      	orrs	r3, r1
 8006c5e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4aa4      	ldr	r2, [pc, #656]	; (8006efc <UART_SetConfig+0x2f8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c76:	4313      	orrs	r3, r2
 8006c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4a9f      	ldr	r2, [pc, #636]	; (8006f00 <UART_SetConfig+0x2fc>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	0019      	movs	r1, r3
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	220f      	movs	r2, #15
 8006c98:	4393      	bics	r3, r2
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	0003      	movs	r3, r0
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a95      	ldr	r2, [pc, #596]	; (8006f04 <UART_SetConfig+0x300>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d131      	bne.n	8006d18 <UART_SetConfig+0x114>
 8006cb4:	4b94      	ldr	r3, [pc, #592]	; (8006f08 <UART_SetConfig+0x304>)
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	2203      	movs	r2, #3
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d01d      	beq.n	8006cfc <UART_SetConfig+0xf8>
 8006cc0:	d823      	bhi.n	8006d0a <UART_SetConfig+0x106>
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d00c      	beq.n	8006ce0 <UART_SetConfig+0xdc>
 8006cc6:	d820      	bhi.n	8006d0a <UART_SetConfig+0x106>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <UART_SetConfig+0xce>
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d00e      	beq.n	8006cee <UART_SetConfig+0xea>
 8006cd0:	e01b      	b.n	8006d0a <UART_SetConfig+0x106>
 8006cd2:	231b      	movs	r3, #27
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	189b      	adds	r3, r3, r2
 8006cd8:	19db      	adds	r3, r3, r7
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	e0b4      	b.n	8006e4a <UART_SetConfig+0x246>
 8006ce0:	231b      	movs	r3, #27
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	189b      	adds	r3, r3, r2
 8006ce6:	19db      	adds	r3, r3, r7
 8006ce8:	2202      	movs	r2, #2
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e0ad      	b.n	8006e4a <UART_SetConfig+0x246>
 8006cee:	231b      	movs	r3, #27
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	19db      	adds	r3, r3, r7
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e0a6      	b.n	8006e4a <UART_SetConfig+0x246>
 8006cfc:	231b      	movs	r3, #27
 8006cfe:	2220      	movs	r2, #32
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	19db      	adds	r3, r3, r7
 8006d04:	2208      	movs	r2, #8
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e09f      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d0a:	231b      	movs	r3, #27
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	189b      	adds	r3, r3, r2
 8006d10:	19db      	adds	r3, r3, r7
 8006d12:	2210      	movs	r2, #16
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e098      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a7b      	ldr	r2, [pc, #492]	; (8006f0c <UART_SetConfig+0x308>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d131      	bne.n	8006d86 <UART_SetConfig+0x182>
 8006d22:	4b79      	ldr	r3, [pc, #484]	; (8006f08 <UART_SetConfig+0x304>)
 8006d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d26:	220c      	movs	r2, #12
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b0c      	cmp	r3, #12
 8006d2c:	d01d      	beq.n	8006d6a <UART_SetConfig+0x166>
 8006d2e:	d823      	bhi.n	8006d78 <UART_SetConfig+0x174>
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d00c      	beq.n	8006d4e <UART_SetConfig+0x14a>
 8006d34:	d820      	bhi.n	8006d78 <UART_SetConfig+0x174>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <UART_SetConfig+0x13c>
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d00e      	beq.n	8006d5c <UART_SetConfig+0x158>
 8006d3e:	e01b      	b.n	8006d78 <UART_SetConfig+0x174>
 8006d40:	231b      	movs	r3, #27
 8006d42:	2220      	movs	r2, #32
 8006d44:	189b      	adds	r3, r3, r2
 8006d46:	19db      	adds	r3, r3, r7
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	e07d      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d4e:	231b      	movs	r3, #27
 8006d50:	2220      	movs	r2, #32
 8006d52:	189b      	adds	r3, r3, r2
 8006d54:	19db      	adds	r3, r3, r7
 8006d56:	2202      	movs	r2, #2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e076      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d5c:	231b      	movs	r3, #27
 8006d5e:	2220      	movs	r2, #32
 8006d60:	189b      	adds	r3, r3, r2
 8006d62:	19db      	adds	r3, r3, r7
 8006d64:	2204      	movs	r2, #4
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	e06f      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d6a:	231b      	movs	r3, #27
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	19db      	adds	r3, r3, r7
 8006d72:	2208      	movs	r2, #8
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e068      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d78:	231b      	movs	r3, #27
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	189b      	adds	r3, r3, r2
 8006d7e:	19db      	adds	r3, r3, r7
 8006d80:	2210      	movs	r2, #16
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	e061      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a61      	ldr	r2, [pc, #388]	; (8006f10 <UART_SetConfig+0x30c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d106      	bne.n	8006d9e <UART_SetConfig+0x19a>
 8006d90:	231b      	movs	r3, #27
 8006d92:	2220      	movs	r2, #32
 8006d94:	189b      	adds	r3, r3, r2
 8006d96:	19db      	adds	r3, r3, r7
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e055      	b.n	8006e4a <UART_SetConfig+0x246>
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a5c      	ldr	r2, [pc, #368]	; (8006f14 <UART_SetConfig+0x310>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d106      	bne.n	8006db6 <UART_SetConfig+0x1b2>
 8006da8:	231b      	movs	r3, #27
 8006daa:	2220      	movs	r2, #32
 8006dac:	189b      	adds	r3, r3, r2
 8006dae:	19db      	adds	r3, r3, r7
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e049      	b.n	8006e4a <UART_SetConfig+0x246>
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a50      	ldr	r2, [pc, #320]	; (8006efc <UART_SetConfig+0x2f8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d13e      	bne.n	8006e3e <UART_SetConfig+0x23a>
 8006dc0:	4b51      	ldr	r3, [pc, #324]	; (8006f08 <UART_SetConfig+0x304>)
 8006dc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc4:	23c0      	movs	r3, #192	; 0xc0
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	4013      	ands	r3, r2
 8006dca:	22c0      	movs	r2, #192	; 0xc0
 8006dcc:	0112      	lsls	r2, r2, #4
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <UART_SetConfig+0x21e>
 8006dd2:	22c0      	movs	r2, #192	; 0xc0
 8006dd4:	0112      	lsls	r2, r2, #4
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d82a      	bhi.n	8006e30 <UART_SetConfig+0x22c>
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	0112      	lsls	r2, r2, #4
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d011      	beq.n	8006e06 <UART_SetConfig+0x202>
 8006de2:	2280      	movs	r2, #128	; 0x80
 8006de4:	0112      	lsls	r2, r2, #4
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d822      	bhi.n	8006e30 <UART_SetConfig+0x22c>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <UART_SetConfig+0x1f4>
 8006dee:	2280      	movs	r2, #128	; 0x80
 8006df0:	00d2      	lsls	r2, r2, #3
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <UART_SetConfig+0x210>
 8006df6:	e01b      	b.n	8006e30 <UART_SetConfig+0x22c>
 8006df8:	231b      	movs	r3, #27
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	19db      	adds	r3, r3, r7
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
 8006e04:	e021      	b.n	8006e4a <UART_SetConfig+0x246>
 8006e06:	231b      	movs	r3, #27
 8006e08:	2220      	movs	r2, #32
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	19db      	adds	r3, r3, r7
 8006e0e:	2202      	movs	r2, #2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e01a      	b.n	8006e4a <UART_SetConfig+0x246>
 8006e14:	231b      	movs	r3, #27
 8006e16:	2220      	movs	r2, #32
 8006e18:	189b      	adds	r3, r3, r2
 8006e1a:	19db      	adds	r3, r3, r7
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e013      	b.n	8006e4a <UART_SetConfig+0x246>
 8006e22:	231b      	movs	r3, #27
 8006e24:	2220      	movs	r2, #32
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	19db      	adds	r3, r3, r7
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e00c      	b.n	8006e4a <UART_SetConfig+0x246>
 8006e30:	231b      	movs	r3, #27
 8006e32:	2220      	movs	r2, #32
 8006e34:	189b      	adds	r3, r3, r2
 8006e36:	19db      	adds	r3, r3, r7
 8006e38:	2210      	movs	r2, #16
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	e005      	b.n	8006e4a <UART_SetConfig+0x246>
 8006e3e:	231b      	movs	r3, #27
 8006e40:	2220      	movs	r2, #32
 8006e42:	189b      	adds	r3, r3, r2
 8006e44:	19db      	adds	r3, r3, r7
 8006e46:	2210      	movs	r2, #16
 8006e48:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <UART_SetConfig+0x2f8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d000      	beq.n	8006e56 <UART_SetConfig+0x252>
 8006e54:	e0a9      	b.n	8006faa <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e56:	231b      	movs	r3, #27
 8006e58:	2220      	movs	r2, #32
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	19db      	adds	r3, r3, r7
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d015      	beq.n	8006e90 <UART_SetConfig+0x28c>
 8006e64:	dc18      	bgt.n	8006e98 <UART_SetConfig+0x294>
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d00d      	beq.n	8006e86 <UART_SetConfig+0x282>
 8006e6a:	dc15      	bgt.n	8006e98 <UART_SetConfig+0x294>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <UART_SetConfig+0x272>
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d005      	beq.n	8006e80 <UART_SetConfig+0x27c>
 8006e74:	e010      	b.n	8006e98 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e76:	f7fd fd77 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e7e:	e014      	b.n	8006eaa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e80:	4b25      	ldr	r3, [pc, #148]	; (8006f18 <UART_SetConfig+0x314>)
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e84:	e011      	b.n	8006eaa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e86:	f7fd fce3 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e8e:	e00c      	b.n	8006eaa <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e96:	e008      	b.n	8006eaa <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e9c:	231a      	movs	r3, #26
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	189b      	adds	r3, r3, r2
 8006ea2:	19db      	adds	r3, r3, r7
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	701a      	strb	r2, [r3, #0]
        break;
 8006ea8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d100      	bne.n	8006eb2 <UART_SetConfig+0x2ae>
 8006eb0:	e14b      	b.n	800714a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eb6:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <UART_SetConfig+0x318>)
 8006eb8:	0052      	lsls	r2, r2, #1
 8006eba:	5ad3      	ldrh	r3, [r2, r3]
 8006ebc:	0019      	movs	r1, r3
 8006ebe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ec0:	f7f9 f93e 	bl	8000140 <__udivsi3>
 8006ec4:	0003      	movs	r3, r0
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	0013      	movs	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	189b      	adds	r3, r3, r2
 8006ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d305      	bcc.n	8006ee4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d91d      	bls.n	8006f20 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006ee4:	231a      	movs	r3, #26
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	2201      	movs	r2, #1
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e12b      	b.n	800714a <UART_SetConfig+0x546>
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	cfff69f3 	.word	0xcfff69f3
 8006ef8:	ffffcfff 	.word	0xffffcfff
 8006efc:	40008000 	.word	0x40008000
 8006f00:	11fff4ff 	.word	0x11fff4ff
 8006f04:	40013800 	.word	0x40013800
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	40004400 	.word	0x40004400
 8006f10:	40004800 	.word	0x40004800
 8006f14:	40004c00 	.word	0x40004c00
 8006f18:	00f42400 	.word	0x00f42400
 8006f1c:	0800e24c 	.word	0x0800e24c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2c:	4b92      	ldr	r3, [pc, #584]	; (8007178 <UART_SetConfig+0x574>)
 8006f2e:	0052      	lsls	r2, r2, #1
 8006f30:	5ad3      	ldrh	r3, [r2, r3]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	69b8      	ldr	r0, [r7, #24]
 8006f3e:	69f9      	ldr	r1, [r7, #28]
 8006f40:	f7f9 fab2 	bl	80004a8 <__aeabi_uldivmod>
 8006f44:	0002      	movs	r2, r0
 8006f46:	000b      	movs	r3, r1
 8006f48:	0e11      	lsrs	r1, r2, #24
 8006f4a:	021d      	lsls	r5, r3, #8
 8006f4c:	430d      	orrs	r5, r1
 8006f4e:	0214      	lsls	r4, r2, #8
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	60bb      	str	r3, [r7, #8]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68b8      	ldr	r0, [r7, #8]
 8006f5e:	68f9      	ldr	r1, [r7, #12]
 8006f60:	1900      	adds	r0, r0, r4
 8006f62:	4169      	adcs	r1, r5
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	603b      	str	r3, [r7, #0]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	607b      	str	r3, [r7, #4]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f7f9 fa99 	bl	80004a8 <__aeabi_uldivmod>
 8006f76:	0002      	movs	r2, r0
 8006f78:	000b      	movs	r3, r1
 8006f7a:	0013      	movs	r3, r2
 8006f7c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f80:	23c0      	movs	r3, #192	; 0xc0
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d309      	bcc.n	8006f9c <UART_SetConfig+0x398>
 8006f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8a:	2380      	movs	r3, #128	; 0x80
 8006f8c:	035b      	lsls	r3, r3, #13
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d204      	bcs.n	8006f9c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f98:	60da      	str	r2, [r3, #12]
 8006f9a:	e0d6      	b.n	800714a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006f9c:	231a      	movs	r3, #26
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	19db      	adds	r3, r3, r7
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e0cf      	b.n	800714a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	2380      	movs	r3, #128	; 0x80
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d000      	beq.n	8006fb8 <UART_SetConfig+0x3b4>
 8006fb6:	e070      	b.n	800709a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006fb8:	231b      	movs	r3, #27
 8006fba:	2220      	movs	r2, #32
 8006fbc:	189b      	adds	r3, r3, r2
 8006fbe:	19db      	adds	r3, r3, r7
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d015      	beq.n	8006ff2 <UART_SetConfig+0x3ee>
 8006fc6:	dc18      	bgt.n	8006ffa <UART_SetConfig+0x3f6>
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d00d      	beq.n	8006fe8 <UART_SetConfig+0x3e4>
 8006fcc:	dc15      	bgt.n	8006ffa <UART_SetConfig+0x3f6>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <UART_SetConfig+0x3d4>
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d005      	beq.n	8006fe2 <UART_SetConfig+0x3de>
 8006fd6:	e010      	b.n	8006ffa <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd8:	f7fd fcc6 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fe0:	e014      	b.n	800700c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fe2:	4b66      	ldr	r3, [pc, #408]	; (800717c <UART_SetConfig+0x578>)
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fe6:	e011      	b.n	800700c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe8:	f7fd fc32 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 8006fec:	0003      	movs	r3, r0
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff0:	e00c      	b.n	800700c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ff2:	2380      	movs	r3, #128	; 0x80
 8006ff4:	021b      	lsls	r3, r3, #8
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff8:	e008      	b.n	800700c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006ffe:	231a      	movs	r3, #26
 8007000:	2220      	movs	r2, #32
 8007002:	189b      	adds	r3, r3, r2
 8007004:	19db      	adds	r3, r3, r7
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
        break;
 800700a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800700c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700e:	2b00      	cmp	r3, #0
 8007010:	d100      	bne.n	8007014 <UART_SetConfig+0x410>
 8007012:	e09a      	b.n	800714a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007018:	4b57      	ldr	r3, [pc, #348]	; (8007178 <UART_SetConfig+0x574>)
 800701a:	0052      	lsls	r2, r2, #1
 800701c:	5ad3      	ldrh	r3, [r2, r3]
 800701e:	0019      	movs	r1, r3
 8007020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007022:	f7f9 f88d 	bl	8000140 <__udivsi3>
 8007026:	0003      	movs	r3, r0
 8007028:	005a      	lsls	r2, r3, #1
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	18d2      	adds	r2, r2, r3
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	0019      	movs	r1, r3
 8007038:	0010      	movs	r0, r2
 800703a:	f7f9 f881 	bl	8000140 <__udivsi3>
 800703e:	0003      	movs	r3, r0
 8007040:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	2b0f      	cmp	r3, #15
 8007046:	d921      	bls.n	800708c <UART_SetConfig+0x488>
 8007048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	025b      	lsls	r3, r3, #9
 800704e:	429a      	cmp	r2, r3
 8007050:	d21c      	bcs.n	800708c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	b29a      	uxth	r2, r3
 8007056:	200e      	movs	r0, #14
 8007058:	2420      	movs	r4, #32
 800705a:	1903      	adds	r3, r0, r4
 800705c:	19db      	adds	r3, r3, r7
 800705e:	210f      	movs	r1, #15
 8007060:	438a      	bics	r2, r1
 8007062:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	b29b      	uxth	r3, r3
 800706a:	2207      	movs	r2, #7
 800706c:	4013      	ands	r3, r2
 800706e:	b299      	uxth	r1, r3
 8007070:	1903      	adds	r3, r0, r4
 8007072:	19db      	adds	r3, r3, r7
 8007074:	1902      	adds	r2, r0, r4
 8007076:	19d2      	adds	r2, r2, r7
 8007078:	8812      	ldrh	r2, [r2, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	1902      	adds	r2, r0, r4
 8007084:	19d2      	adds	r2, r2, r7
 8007086:	8812      	ldrh	r2, [r2, #0]
 8007088:	60da      	str	r2, [r3, #12]
 800708a:	e05e      	b.n	800714a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800708c:	231a      	movs	r3, #26
 800708e:	2220      	movs	r2, #32
 8007090:	189b      	adds	r3, r3, r2
 8007092:	19db      	adds	r3, r3, r7
 8007094:	2201      	movs	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e057      	b.n	800714a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800709a:	231b      	movs	r3, #27
 800709c:	2220      	movs	r2, #32
 800709e:	189b      	adds	r3, r3, r2
 80070a0:	19db      	adds	r3, r3, r7
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d015      	beq.n	80070d4 <UART_SetConfig+0x4d0>
 80070a8:	dc18      	bgt.n	80070dc <UART_SetConfig+0x4d8>
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d00d      	beq.n	80070ca <UART_SetConfig+0x4c6>
 80070ae:	dc15      	bgt.n	80070dc <UART_SetConfig+0x4d8>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <UART_SetConfig+0x4b6>
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d005      	beq.n	80070c4 <UART_SetConfig+0x4c0>
 80070b8:	e010      	b.n	80070dc <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070ba:	f7fd fc55 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80070be:	0003      	movs	r3, r0
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070c2:	e014      	b.n	80070ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c4:	4b2d      	ldr	r3, [pc, #180]	; (800717c <UART_SetConfig+0x578>)
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070c8:	e011      	b.n	80070ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ca:	f7fd fbc1 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 80070ce:	0003      	movs	r3, r0
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070d2:	e00c      	b.n	80070ee <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d4:	2380      	movs	r3, #128	; 0x80
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070da:	e008      	b.n	80070ee <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80070e0:	231a      	movs	r3, #26
 80070e2:	2220      	movs	r2, #32
 80070e4:	189b      	adds	r3, r3, r2
 80070e6:	19db      	adds	r3, r3, r7
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
        break;
 80070ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02a      	beq.n	800714a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f8:	4b1f      	ldr	r3, [pc, #124]	; (8007178 <UART_SetConfig+0x574>)
 80070fa:	0052      	lsls	r2, r2, #1
 80070fc:	5ad3      	ldrh	r3, [r2, r3]
 80070fe:	0019      	movs	r1, r3
 8007100:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007102:	f7f9 f81d 	bl	8000140 <__udivsi3>
 8007106:	0003      	movs	r3, r0
 8007108:	001a      	movs	r2, r3
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	18d2      	adds	r2, r2, r3
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	0019      	movs	r1, r3
 8007118:	0010      	movs	r0, r2
 800711a:	f7f9 f811 	bl	8000140 <__udivsi3>
 800711e:	0003      	movs	r3, r0
 8007120:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	2b0f      	cmp	r3, #15
 8007126:	d90a      	bls.n	800713e <UART_SetConfig+0x53a>
 8007128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712a:	2380      	movs	r3, #128	; 0x80
 800712c:	025b      	lsls	r3, r3, #9
 800712e:	429a      	cmp	r2, r3
 8007130:	d205      	bcs.n	800713e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	b29a      	uxth	r2, r3
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	e005      	b.n	800714a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800713e:	231a      	movs	r3, #26
 8007140:	2220      	movs	r2, #32
 8007142:	189b      	adds	r3, r3, r2
 8007144:	19db      	adds	r3, r3, r7
 8007146:	2201      	movs	r2, #1
 8007148:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	226a      	movs	r2, #106	; 0x6a
 800714e:	2101      	movs	r1, #1
 8007150:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	2268      	movs	r2, #104	; 0x68
 8007156:	2101      	movs	r1, #1
 8007158:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	2200      	movs	r2, #0
 800715e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	2200      	movs	r2, #0
 8007164:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007166:	231a      	movs	r3, #26
 8007168:	2220      	movs	r2, #32
 800716a:	189b      	adds	r3, r3, r2
 800716c:	19db      	adds	r3, r3, r7
 800716e:	781b      	ldrb	r3, [r3, #0]
}
 8007170:	0018      	movs	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	b010      	add	sp, #64	; 0x40
 8007176:	bdb0      	pop	{r4, r5, r7, pc}
 8007178:	0800e24c 	.word	0x0800e24c
 800717c:	00f42400 	.word	0x00f42400

08007180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	2201      	movs	r2, #1
 800718e:	4013      	ands	r3, r2
 8007190:	d00b      	beq.n	80071aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4a4a      	ldr	r2, [pc, #296]	; (80072c4 <UART_AdvFeatureConfig+0x144>)
 800719a:	4013      	ands	r3, r2
 800719c:	0019      	movs	r1, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ae:	2202      	movs	r2, #2
 80071b0:	4013      	ands	r3, r2
 80071b2:	d00b      	beq.n	80071cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4a43      	ldr	r2, [pc, #268]	; (80072c8 <UART_AdvFeatureConfig+0x148>)
 80071bc:	4013      	ands	r3, r2
 80071be:	0019      	movs	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	2204      	movs	r2, #4
 80071d2:	4013      	ands	r3, r2
 80071d4:	d00b      	beq.n	80071ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	4a3b      	ldr	r2, [pc, #236]	; (80072cc <UART_AdvFeatureConfig+0x14c>)
 80071de:	4013      	ands	r3, r2
 80071e0:	0019      	movs	r1, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	2208      	movs	r2, #8
 80071f4:	4013      	ands	r3, r2
 80071f6:	d00b      	beq.n	8007210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	4a34      	ldr	r2, [pc, #208]	; (80072d0 <UART_AdvFeatureConfig+0x150>)
 8007200:	4013      	ands	r3, r2
 8007202:	0019      	movs	r1, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	2210      	movs	r2, #16
 8007216:	4013      	ands	r3, r2
 8007218:	d00b      	beq.n	8007232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	4a2c      	ldr	r2, [pc, #176]	; (80072d4 <UART_AdvFeatureConfig+0x154>)
 8007222:	4013      	ands	r3, r2
 8007224:	0019      	movs	r1, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	2220      	movs	r2, #32
 8007238:	4013      	ands	r3, r2
 800723a:	d00b      	beq.n	8007254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	4a25      	ldr	r2, [pc, #148]	; (80072d8 <UART_AdvFeatureConfig+0x158>)
 8007244:	4013      	ands	r3, r2
 8007246:	0019      	movs	r1, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	2240      	movs	r2, #64	; 0x40
 800725a:	4013      	ands	r3, r2
 800725c:	d01d      	beq.n	800729a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a1d      	ldr	r2, [pc, #116]	; (80072dc <UART_AdvFeatureConfig+0x15c>)
 8007266:	4013      	ands	r3, r2
 8007268:	0019      	movs	r1, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727a:	2380      	movs	r3, #128	; 0x80
 800727c:	035b      	lsls	r3, r3, #13
 800727e:	429a      	cmp	r2, r3
 8007280:	d10b      	bne.n	800729a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <UART_AdvFeatureConfig+0x160>)
 800728a:	4013      	ands	r3, r2
 800728c:	0019      	movs	r1, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729e:	2280      	movs	r2, #128	; 0x80
 80072a0:	4013      	ands	r3, r2
 80072a2:	d00b      	beq.n	80072bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4a0e      	ldr	r2, [pc, #56]	; (80072e4 <UART_AdvFeatureConfig+0x164>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	0019      	movs	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
  }
}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	fffdffff 	.word	0xfffdffff
 80072c8:	fffeffff 	.word	0xfffeffff
 80072cc:	fffbffff 	.word	0xfffbffff
 80072d0:	ffff7fff 	.word	0xffff7fff
 80072d4:	ffffefff 	.word	0xffffefff
 80072d8:	ffffdfff 	.word	0xffffdfff
 80072dc:	ffefffff 	.word	0xffefffff
 80072e0:	ff9fffff 	.word	0xff9fffff
 80072e4:	fff7ffff 	.word	0xfff7ffff

080072e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2290      	movs	r2, #144	; 0x90
 80072f4:	2100      	movs	r1, #0
 80072f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072f8:	f7fc fae8 	bl	80038cc <HAL_GetTick>
 80072fc:	0003      	movs	r3, r0
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2208      	movs	r2, #8
 8007308:	4013      	ands	r3, r2
 800730a:	2b08      	cmp	r3, #8
 800730c:	d10c      	bne.n	8007328 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2280      	movs	r2, #128	; 0x80
 8007312:	0391      	lsls	r1, r2, #14
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <UART_CheckIdleState+0x98>)
 8007318:	9200      	str	r2, [sp, #0]
 800731a:	2200      	movs	r2, #0
 800731c:	f000 f832 	bl	8007384 <UART_WaitOnFlagUntilTimeout>
 8007320:	1e03      	subs	r3, r0, #0
 8007322:	d001      	beq.n	8007328 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e026      	b.n	8007376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2204      	movs	r2, #4
 8007330:	4013      	ands	r3, r2
 8007332:	2b04      	cmp	r3, #4
 8007334:	d10c      	bne.n	8007350 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2280      	movs	r2, #128	; 0x80
 800733a:	03d1      	lsls	r1, r2, #15
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4a10      	ldr	r2, [pc, #64]	; (8007380 <UART_CheckIdleState+0x98>)
 8007340:	9200      	str	r2, [sp, #0]
 8007342:	2200      	movs	r2, #0
 8007344:	f000 f81e 	bl	8007384 <UART_WaitOnFlagUntilTimeout>
 8007348:	1e03      	subs	r3, r0, #0
 800734a:	d001      	beq.n	8007350 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e012      	b.n	8007376 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2288      	movs	r2, #136	; 0x88
 8007354:	2120      	movs	r1, #32
 8007356:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	228c      	movs	r2, #140	; 0x8c
 800735c:	2120      	movs	r1, #32
 800735e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2284      	movs	r2, #132	; 0x84
 8007370:	2100      	movs	r1, #0
 8007372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	0018      	movs	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	b004      	add	sp, #16
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	01ffffff 	.word	0x01ffffff

08007384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b094      	sub	sp, #80	; 0x50
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	1dfb      	adds	r3, r7, #7
 8007392:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007394:	e0a7      	b.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007398:	3301      	adds	r3, #1
 800739a:	d100      	bne.n	800739e <UART_WaitOnFlagUntilTimeout+0x1a>
 800739c:	e0a3      	b.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fc fa95 	bl	80038cc <HAL_GetTick>
 80073a2:	0002      	movs	r2, r0
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d13f      	bne.n	8007434 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b4:	f3ef 8310 	mrs	r3, PRIMASK
 80073b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073bc:	647b      	str	r3, [r7, #68]	; 0x44
 80073be:	2301      	movs	r3, #1
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	f383 8810 	msr	PRIMASK, r3
}
 80073c8:	46c0      	nop			; (mov r8, r8)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	494e      	ldr	r1, [pc, #312]	; (8007510 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80073d6:	400a      	ands	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80073ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ee:	643b      	str	r3, [r7, #64]	; 0x40
 80073f0:	2301      	movs	r3, #1
 80073f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	f383 8810 	msr	PRIMASK, r3
}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2101      	movs	r1, #1
 8007408:	438a      	bics	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007412:	f383 8810 	msr	PRIMASK, r3
}
 8007416:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2288      	movs	r2, #136	; 0x88
 800741c:	2120      	movs	r1, #32
 800741e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	228c      	movs	r2, #140	; 0x8c
 8007424:	2120      	movs	r1, #32
 8007426:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2284      	movs	r2, #132	; 0x84
 800742c:	2100      	movs	r1, #0
 800742e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e069      	b.n	8007508 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2204      	movs	r2, #4
 800743c:	4013      	ands	r3, r2
 800743e:	d052      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69da      	ldr	r2, [r3, #28]
 8007446:	2380      	movs	r3, #128	; 0x80
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	401a      	ands	r2, r3
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	429a      	cmp	r2, r3
 8007452:	d148      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2280      	movs	r2, #128	; 0x80
 800745a:	0112      	lsls	r2, r2, #4
 800745c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745e:	f3ef 8310 	mrs	r3, PRIMASK
 8007462:	613b      	str	r3, [r7, #16]
  return(result);
 8007464:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007468:	2301      	movs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f383 8810 	msr	PRIMASK, r3
}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4924      	ldr	r1, [pc, #144]	; (8007510 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007480:	400a      	ands	r2, r1
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007486:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	f383 8810 	msr	PRIMASK, r3
}
 800748e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007490:	f3ef 8310 	mrs	r3, PRIMASK
 8007494:	61fb      	str	r3, [r7, #28]
  return(result);
 8007496:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	64bb      	str	r3, [r7, #72]	; 0x48
 800749a:	2301      	movs	r3, #1
 800749c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	f383 8810 	msr	PRIMASK, r3
}
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2101      	movs	r1, #1
 80074b2:	438a      	bics	r2, r1
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	f383 8810 	msr	PRIMASK, r3
}
 80074c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2288      	movs	r2, #136	; 0x88
 80074c6:	2120      	movs	r1, #32
 80074c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	228c      	movs	r2, #140	; 0x8c
 80074ce:	2120      	movs	r1, #32
 80074d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2290      	movs	r2, #144	; 0x90
 80074d6:	2120      	movs	r1, #32
 80074d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2284      	movs	r2, #132	; 0x84
 80074de:	2100      	movs	r1, #0
 80074e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e010      	b.n	8007508 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	4013      	ands	r3, r2
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	425a      	negs	r2, r3
 80074f6:	4153      	adcs	r3, r2
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	001a      	movs	r2, r3
 80074fc:	1dfb      	adds	r3, r7, #7
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d100      	bne.n	8007506 <UART_WaitOnFlagUntilTimeout+0x182>
 8007504:	e747      	b.n	8007396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	0018      	movs	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	b014      	add	sp, #80	; 0x50
 800750e:	bd80      	pop	{r7, pc}
 8007510:	fffffe5f 	.word	0xfffffe5f

08007514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b098      	sub	sp, #96	; 0x60
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	1dbb      	adds	r3, r7, #6
 8007520:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1dba      	adds	r2, r7, #6
 800752c:	215c      	movs	r1, #92	; 0x5c
 800752e:	8812      	ldrh	r2, [r2, #0]
 8007530:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1dba      	adds	r2, r7, #6
 8007536:	215e      	movs	r1, #94	; 0x5e
 8007538:	8812      	ldrh	r2, [r2, #0]
 800753a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	2380      	movs	r3, #128	; 0x80
 8007548:	015b      	lsls	r3, r3, #5
 800754a:	429a      	cmp	r2, r3
 800754c:	d10d      	bne.n	800756a <UART_Start_Receive_IT+0x56>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <UART_Start_Receive_IT+0x4c>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2260      	movs	r2, #96	; 0x60
 800755a:	497b      	ldr	r1, [pc, #492]	; (8007748 <UART_Start_Receive_IT+0x234>)
 800755c:	5299      	strh	r1, [r3, r2]
 800755e:	e02e      	b.n	80075be <UART_Start_Receive_IT+0xaa>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2260      	movs	r2, #96	; 0x60
 8007564:	21ff      	movs	r1, #255	; 0xff
 8007566:	5299      	strh	r1, [r3, r2]
 8007568:	e029      	b.n	80075be <UART_Start_Receive_IT+0xaa>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10d      	bne.n	800758e <UART_Start_Receive_IT+0x7a>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d104      	bne.n	8007584 <UART_Start_Receive_IT+0x70>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2260      	movs	r2, #96	; 0x60
 800757e:	21ff      	movs	r1, #255	; 0xff
 8007580:	5299      	strh	r1, [r3, r2]
 8007582:	e01c      	b.n	80075be <UART_Start_Receive_IT+0xaa>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2260      	movs	r2, #96	; 0x60
 8007588:	217f      	movs	r1, #127	; 0x7f
 800758a:	5299      	strh	r1, [r3, r2]
 800758c:	e017      	b.n	80075be <UART_Start_Receive_IT+0xaa>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	2380      	movs	r3, #128	; 0x80
 8007594:	055b      	lsls	r3, r3, #21
 8007596:	429a      	cmp	r2, r3
 8007598:	d10d      	bne.n	80075b6 <UART_Start_Receive_IT+0xa2>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <UART_Start_Receive_IT+0x98>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2260      	movs	r2, #96	; 0x60
 80075a6:	217f      	movs	r1, #127	; 0x7f
 80075a8:	5299      	strh	r1, [r3, r2]
 80075aa:	e008      	b.n	80075be <UART_Start_Receive_IT+0xaa>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2260      	movs	r2, #96	; 0x60
 80075b0:	213f      	movs	r1, #63	; 0x3f
 80075b2:	5299      	strh	r1, [r3, r2]
 80075b4:	e003      	b.n	80075be <UART_Start_Receive_IT+0xaa>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2260      	movs	r2, #96	; 0x60
 80075ba:	2100      	movs	r1, #0
 80075bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2290      	movs	r2, #144	; 0x90
 80075c2:	2100      	movs	r1, #0
 80075c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	228c      	movs	r2, #140	; 0x8c
 80075ca:	2122      	movs	r1, #34	; 0x22
 80075cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ce:	f3ef 8310 	mrs	r3, PRIMASK
 80075d2:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80075d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d8:	2301      	movs	r3, #1
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075de:	f383 8810 	msr	PRIMASK, r3
}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2101      	movs	r1, #1
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	f383 8810 	msr	PRIMASK, r3
}
 80075fe:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007604:	2380      	movs	r3, #128	; 0x80
 8007606:	059b      	lsls	r3, r3, #22
 8007608:	429a      	cmp	r2, r3
 800760a:	d150      	bne.n	80076ae <UART_Start_Receive_IT+0x19a>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2268      	movs	r2, #104	; 0x68
 8007610:	5a9b      	ldrh	r3, [r3, r2]
 8007612:	1dba      	adds	r2, r7, #6
 8007614:	8812      	ldrh	r2, [r2, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d349      	bcc.n	80076ae <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	2380      	movs	r3, #128	; 0x80
 8007620:	015b      	lsls	r3, r3, #5
 8007622:	429a      	cmp	r2, r3
 8007624:	d107      	bne.n	8007636 <UART_Start_Receive_IT+0x122>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a46      	ldr	r2, [pc, #280]	; (800774c <UART_Start_Receive_IT+0x238>)
 8007632:	675a      	str	r2, [r3, #116]	; 0x74
 8007634:	e002      	b.n	800763c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4a45      	ldr	r2, [pc, #276]	; (8007750 <UART_Start_Receive_IT+0x23c>)
 800763a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d019      	beq.n	8007678 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007644:	f3ef 8310 	mrs	r3, PRIMASK
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800764a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800764c:	65bb      	str	r3, [r7, #88]	; 0x58
 800764e:	2301      	movs	r3, #1
 8007650:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f383 8810 	msr	PRIMASK, r3
}
 8007658:	46c0      	nop			; (mov r8, r8)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2180      	movs	r1, #128	; 0x80
 8007666:	0049      	lsls	r1, r1, #1
 8007668:	430a      	orrs	r2, r1
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007672:	f383 8810 	msr	PRIMASK, r3
}
 8007676:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007678:	f3ef 8310 	mrs	r3, PRIMASK
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007680:	657b      	str	r3, [r7, #84]	; 0x54
 8007682:	2301      	movs	r3, #1
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007688:	f383 8810 	msr	PRIMASK, r3
}
 800768c:	46c0      	nop			; (mov r8, r8)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2180      	movs	r1, #128	; 0x80
 800769a:	0549      	lsls	r1, r1, #21
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	f383 8810 	msr	PRIMASK, r3
}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	e047      	b.n	800773e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	015b      	lsls	r3, r3, #5
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d107      	bne.n	80076ca <UART_Start_Receive_IT+0x1b6>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a23      	ldr	r2, [pc, #140]	; (8007754 <UART_Start_Receive_IT+0x240>)
 80076c6:	675a      	str	r2, [r3, #116]	; 0x74
 80076c8:	e002      	b.n	80076d0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4a22      	ldr	r2, [pc, #136]	; (8007758 <UART_Start_Receive_IT+0x244>)
 80076ce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d019      	beq.n	800770c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d8:	f3ef 8310 	mrs	r3, PRIMASK
 80076dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80076de:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e2:	2301      	movs	r3, #1
 80076e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f383 8810 	msr	PRIMASK, r3
}
 80076ec:	46c0      	nop			; (mov r8, r8)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2190      	movs	r1, #144	; 0x90
 80076fa:	0049      	lsls	r1, r1, #1
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	f383 8810 	msr	PRIMASK, r3
}
 800770a:	e018      	b.n	800773e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770c:	f3ef 8310 	mrs	r3, PRIMASK
 8007710:	613b      	str	r3, [r7, #16]
  return(result);
 8007712:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007714:	653b      	str	r3, [r7, #80]	; 0x50
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f383 8810 	msr	PRIMASK, r3
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2120      	movs	r1, #32
 800772e:	430a      	orrs	r2, r1
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	0018      	movs	r0, r3
 8007742:	46bd      	mov	sp, r7
 8007744:	b018      	add	sp, #96	; 0x60
 8007746:	bd80      	pop	{r7, pc}
 8007748:	000001ff 	.word	0x000001ff
 800774c:	08007e85 	.word	0x08007e85
 8007750:	08007b99 	.word	0x08007b99
 8007754:	08007a25 	.word	0x08007a25
 8007758:	080078b1 	.word	0x080078b1

0800775c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08e      	sub	sp, #56	; 0x38
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007764:	f3ef 8310 	mrs	r3, PRIMASK
 8007768:	617b      	str	r3, [r7, #20]
  return(result);
 800776a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
 800776e:	2301      	movs	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	f383 8810 	msr	PRIMASK, r3
}
 8007778:	46c0      	nop			; (mov r8, r8)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4926      	ldr	r1, [pc, #152]	; (8007820 <UART_EndRxTransfer+0xc4>)
 8007786:	400a      	ands	r2, r1
 8007788:	601a      	str	r2, [r3, #0]
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f383 8810 	msr	PRIMASK, r3
}
 8007794:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007796:	f3ef 8310 	mrs	r3, PRIMASK
 800779a:	623b      	str	r3, [r7, #32]
  return(result);
 800779c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
 80077a0:	2301      	movs	r3, #1
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	f383 8810 	msr	PRIMASK, r3
}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	491b      	ldr	r1, [pc, #108]	; (8007824 <UART_EndRxTransfer+0xc8>)
 80077b8:	400a      	ands	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	f383 8810 	msr	PRIMASK, r3
}
 80077c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d118      	bne.n	8007802 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d0:	f3ef 8310 	mrs	r3, PRIMASK
 80077d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80077d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077da:	2301      	movs	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f383 8810 	msr	PRIMASK, r3
}
 80077e4:	46c0      	nop			; (mov r8, r8)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2110      	movs	r1, #16
 80077f2:	438a      	bics	r2, r1
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f383 8810 	msr	PRIMASK, r3
}
 8007800:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	228c      	movs	r2, #140	; 0x8c
 8007806:	2120      	movs	r1, #32
 8007808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	b00e      	add	sp, #56	; 0x38
 800781c:	bd80      	pop	{r7, pc}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	fffffedf 	.word	0xfffffedf
 8007824:	effffffe 	.word	0xeffffffe

08007828 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	225e      	movs	r2, #94	; 0x5e
 800783a:	2100      	movs	r1, #0
 800783c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2256      	movs	r2, #86	; 0x56
 8007842:	2100      	movs	r1, #0
 8007844:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0018      	movs	r0, r3
 800784a:	f7ff f9c7 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	46bd      	mov	sp, r7
 8007852:	b004      	add	sp, #16
 8007854:	bd80      	pop	{r7, pc}

08007856 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b086      	sub	sp, #24
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785e:	f3ef 8310 	mrs	r3, PRIMASK
 8007862:	60bb      	str	r3, [r7, #8]
  return(result);
 8007864:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	2301      	movs	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f383 8810 	msr	PRIMASK, r3
}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2140      	movs	r1, #64	; 0x40
 8007880:	438a      	bics	r2, r1
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	f383 8810 	msr	PRIMASK, r3
}
 800788e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2288      	movs	r2, #136	; 0x88
 8007894:	2120      	movs	r1, #32
 8007896:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7ff f993 	bl	8006bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b006      	add	sp, #24
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b090      	sub	sp, #64	; 0x40
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078b8:	203e      	movs	r0, #62	; 0x3e
 80078ba:	183b      	adds	r3, r7, r0
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	2160      	movs	r1, #96	; 0x60
 80078c0:	5a52      	ldrh	r2, [r2, r1]
 80078c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	228c      	movs	r2, #140	; 0x8c
 80078c8:	589b      	ldr	r3, [r3, r2]
 80078ca:	2b22      	cmp	r3, #34	; 0x22
 80078cc:	d000      	beq.n	80078d0 <UART_RxISR_8BIT+0x20>
 80078ce:	e09a      	b.n	8007a06 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d6:	213c      	movs	r1, #60	; 0x3c
 80078d8:	187b      	adds	r3, r7, r1
 80078da:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078dc:	187b      	adds	r3, r7, r1
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	183b      	adds	r3, r7, r0
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b2d9      	uxtb	r1, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ec:	400a      	ands	r2, r1
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	225e      	movs	r2, #94	; 0x5e
 8007900:	5a9b      	ldrh	r3, [r3, r2]
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b299      	uxth	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	225e      	movs	r2, #94	; 0x5e
 800790c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	225e      	movs	r2, #94	; 0x5e
 8007912:	5a9b      	ldrh	r3, [r3, r2]
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d000      	beq.n	800791c <UART_RxISR_8BIT+0x6c>
 800791a:	e07c      	b.n	8007a16 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800791c:	f3ef 8310 	mrs	r3, PRIMASK
 8007920:	61bb      	str	r3, [r7, #24]
  return(result);
 8007922:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
 8007926:	2301      	movs	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f383 8810 	msr	PRIMASK, r3
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4938      	ldr	r1, [pc, #224]	; (8007a20 <UART_RxISR_8BIT+0x170>)
 800793e:	400a      	ands	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	f383 8810 	msr	PRIMASK, r3
}
 800794c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794e:	f3ef 8310 	mrs	r3, PRIMASK
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
 8007958:	2301      	movs	r3, #1
 800795a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	f383 8810 	msr	PRIMASK, r3
}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2101      	movs	r1, #1
 8007970:	438a      	bics	r2, r1
 8007972:	609a      	str	r2, [r3, #8]
 8007974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007976:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	f383 8810 	msr	PRIMASK, r3
}
 800797e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	228c      	movs	r2, #140	; 0x8c
 8007984:	2120      	movs	r1, #32
 8007986:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007998:	2b01      	cmp	r3, #1
 800799a:	d12f      	bne.n	80079fc <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a2:	f3ef 8310 	mrs	r3, PRIMASK
 80079a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30
 80079ac:	2301      	movs	r3, #1
 80079ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f383 8810 	msr	PRIMASK, r3
}
 80079b6:	46c0      	nop			; (mov r8, r8)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2110      	movs	r1, #16
 80079c4:	438a      	bics	r2, r1
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f383 8810 	msr	PRIMASK, r3
}
 80079d2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	2210      	movs	r2, #16
 80079dc:	4013      	ands	r3, r2
 80079de:	2b10      	cmp	r3, #16
 80079e0:	d103      	bne.n	80079ea <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2210      	movs	r2, #16
 80079e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	225c      	movs	r2, #92	; 0x5c
 80079ee:	5a9a      	ldrh	r2, [r3, r2]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	0011      	movs	r1, r2
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7ff f8f9 	bl	8006bec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079fa:	e00c      	b.n	8007a16 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7fa fef0 	bl	80027e4 <HAL_UART_RxCpltCallback>
}
 8007a04:	e007      	b.n	8007a16 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2108      	movs	r1, #8
 8007a12:	430a      	orrs	r2, r1
 8007a14:	619a      	str	r2, [r3, #24]
}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	b010      	add	sp, #64	; 0x40
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	fffffedf 	.word	0xfffffedf

08007a24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b090      	sub	sp, #64	; 0x40
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a2c:	203e      	movs	r0, #62	; 0x3e
 8007a2e:	183b      	adds	r3, r7, r0
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	2160      	movs	r1, #96	; 0x60
 8007a34:	5a52      	ldrh	r2, [r2, r1]
 8007a36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	228c      	movs	r2, #140	; 0x8c
 8007a3c:	589b      	ldr	r3, [r3, r2]
 8007a3e:	2b22      	cmp	r3, #34	; 0x22
 8007a40:	d000      	beq.n	8007a44 <UART_RxISR_16BIT+0x20>
 8007a42:	e09a      	b.n	8007b7a <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a4a:	213c      	movs	r1, #60	; 0x3c
 8007a4c:	187b      	adds	r3, r7, r1
 8007a4e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a56:	187b      	adds	r3, r7, r1
 8007a58:	183a      	adds	r2, r7, r0
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	8812      	ldrh	r2, [r2, #0]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6a:	1c9a      	adds	r2, r3, #2
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	225e      	movs	r2, #94	; 0x5e
 8007a74:	5a9b      	ldrh	r3, [r3, r2]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b299      	uxth	r1, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	225e      	movs	r2, #94	; 0x5e
 8007a80:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	225e      	movs	r2, #94	; 0x5e
 8007a86:	5a9b      	ldrh	r3, [r3, r2]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d000      	beq.n	8007a90 <UART_RxISR_16BIT+0x6c>
 8007a8e:	e07c      	b.n	8007b8a <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a90:	f3ef 8310 	mrs	r3, PRIMASK
 8007a94:	617b      	str	r3, [r7, #20]
  return(result);
 8007a96:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f383 8810 	msr	PRIMASK, r3
}
 8007aa4:	46c0      	nop			; (mov r8, r8)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4938      	ldr	r1, [pc, #224]	; (8007b94 <UART_RxISR_16BIT+0x170>)
 8007ab2:	400a      	ands	r2, r1
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f383 8810 	msr	PRIMASK, r3
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac6:	623b      	str	r3, [r7, #32]
  return(result);
 8007ac8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
 8007acc:	2301      	movs	r3, #1
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	f383 8810 	msr	PRIMASK, r3
}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	438a      	bics	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f383 8810 	msr	PRIMASK, r3
}
 8007af2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	228c      	movs	r2, #140	; 0x8c
 8007af8:	2120      	movs	r1, #32
 8007afa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d12f      	bne.n	8007b70 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b16:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b1c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b20:	2301      	movs	r3, #1
 8007b22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f383 8810 	msr	PRIMASK, r3
}
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2110      	movs	r1, #16
 8007b38:	438a      	bics	r2, r1
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f383 8810 	msr	PRIMASK, r3
}
 8007b46:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	4013      	ands	r3, r2
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d103      	bne.n	8007b5e <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	225c      	movs	r2, #92	; 0x5c
 8007b62:	5a9a      	ldrh	r2, [r3, r2]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	0011      	movs	r1, r2
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f7ff f83f 	bl	8006bec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b6e:	e00c      	b.n	8007b8a <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	0018      	movs	r0, r3
 8007b74:	f7fa fe36 	bl	80027e4 <HAL_UART_RxCpltCallback>
}
 8007b78:	e007      	b.n	8007b8a <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2108      	movs	r1, #8
 8007b86:	430a      	orrs	r2, r1
 8007b88:	619a      	str	r2, [r3, #24]
}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	b010      	add	sp, #64	; 0x40
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	fffffedf 	.word	0xfffffedf

08007b98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b09c      	sub	sp, #112	; 0x70
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ba0:	236a      	movs	r3, #106	; 0x6a
 8007ba2:	18fb      	adds	r3, r7, r3
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	2160      	movs	r1, #96	; 0x60
 8007ba8:	5a52      	ldrh	r2, [r2, r1]
 8007baa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	228c      	movs	r2, #140	; 0x8c
 8007bc8:	589b      	ldr	r3, [r3, r2]
 8007bca:	2b22      	cmp	r3, #34	; 0x22
 8007bcc:	d000      	beq.n	8007bd0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007bce:	e144      	b.n	8007e5a <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bd0:	235e      	movs	r3, #94	; 0x5e
 8007bd2:	18fb      	adds	r3, r7, r3
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	2168      	movs	r1, #104	; 0x68
 8007bd8:	5a52      	ldrh	r2, [r2, r1]
 8007bda:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bdc:	e0eb      	b.n	8007db6 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007be4:	215c      	movs	r1, #92	; 0x5c
 8007be6:	187b      	adds	r3, r7, r1
 8007be8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bea:	187b      	adds	r3, r7, r1
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	236a      	movs	r3, #106	; 0x6a
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b2d9      	uxtb	r1, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	400a      	ands	r2, r1
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	225e      	movs	r2, #94	; 0x5e
 8007c10:	5a9b      	ldrh	r3, [r3, r2]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b299      	uxth	r1, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	225e      	movs	r2, #94	; 0x5e
 8007c1c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c28:	2207      	movs	r2, #7
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	d049      	beq.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c30:	2201      	movs	r2, #1
 8007c32:	4013      	ands	r3, r2
 8007c34:	d010      	beq.n	8007c58 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007c36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c38:	2380      	movs	r3, #128	; 0x80
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	d00b      	beq.n	8007c58 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2201      	movs	r2, #1
 8007c46:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2290      	movs	r2, #144	; 0x90
 8007c4c:	589b      	ldr	r3, [r3, r2]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2190      	movs	r1, #144	; 0x90
 8007c56:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	d00f      	beq.n	8007c80 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c62:	2201      	movs	r2, #1
 8007c64:	4013      	ands	r3, r2
 8007c66:	d00b      	beq.n	8007c80 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2290      	movs	r2, #144	; 0x90
 8007c74:	589b      	ldr	r3, [r3, r2]
 8007c76:	2204      	movs	r2, #4
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2190      	movs	r1, #144	; 0x90
 8007c7e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c82:	2204      	movs	r2, #4
 8007c84:	4013      	ands	r3, r2
 8007c86:	d00f      	beq.n	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2204      	movs	r2, #4
 8007c96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2290      	movs	r2, #144	; 0x90
 8007c9c:	589b      	ldr	r3, [r3, r2]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2190      	movs	r1, #144	; 0x90
 8007ca6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2290      	movs	r2, #144	; 0x90
 8007cac:	589b      	ldr	r3, [r3, r2]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f7fe ff91 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2290      	movs	r2, #144	; 0x90
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	225e      	movs	r2, #94	; 0x5e
 8007cc6:	5a9b      	ldrh	r3, [r3, r2]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d173      	bne.n	8007db6 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cce:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd8:	2301      	movs	r3, #1
 8007cda:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f383 8810 	msr	PRIMASK, r3
}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4961      	ldr	r1, [pc, #388]	; (8007e74 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007cf0:	400a      	ands	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cf6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfa:	f383 8810 	msr	PRIMASK, r3
}
 8007cfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d00:	f3ef 8310 	mrs	r3, PRIMASK
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d08:	657b      	str	r3, [r7, #84]	; 0x54
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d10:	f383 8810 	msr	PRIMASK, r3
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4955      	ldr	r1, [pc, #340]	; (8007e78 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
 8007d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d28:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2c:	f383 8810 	msr	PRIMASK, r3
}
 8007d30:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	228c      	movs	r2, #140	; 0x8c
 8007d36:	2120      	movs	r1, #32
 8007d38:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d12f      	bne.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d54:	f3ef 8310 	mrs	r3, PRIMASK
 8007d58:	623b      	str	r3, [r7, #32]
  return(result);
 8007d5a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8007d5e:	2301      	movs	r3, #1
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	f383 8810 	msr	PRIMASK, r3
}
 8007d68:	46c0      	nop			; (mov r8, r8)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2110      	movs	r1, #16
 8007d76:	438a      	bics	r2, r1
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	f383 8810 	msr	PRIMASK, r3
}
 8007d84:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	2210      	movs	r2, #16
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d103      	bne.n	8007d9c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2210      	movs	r2, #16
 8007d9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	225c      	movs	r2, #92	; 0x5c
 8007da0:	5a9a      	ldrh	r2, [r3, r2]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	0011      	movs	r1, r2
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7fe ff20 	bl	8006bec <HAL_UARTEx_RxEventCallback>
 8007dac:	e003      	b.n	8007db6 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f7fa fd17 	bl	80027e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007db6:	235e      	movs	r3, #94	; 0x5e
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <UART_RxISR_8BIT_FIFOEN+0x232>
 8007dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	4013      	ands	r3, r2
 8007dc6:	d000      	beq.n	8007dca <UART_RxISR_8BIT_FIFOEN+0x232>
 8007dc8:	e709      	b.n	8007bde <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dca:	204e      	movs	r0, #78	; 0x4e
 8007dcc:	183b      	adds	r3, r7, r0
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	215e      	movs	r1, #94	; 0x5e
 8007dd2:	5a52      	ldrh	r2, [r2, r1]
 8007dd4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dd6:	0001      	movs	r1, r0
 8007dd8:	187b      	adds	r3, r7, r1
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d044      	beq.n	8007e6a <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2268      	movs	r2, #104	; 0x68
 8007de4:	5a9b      	ldrh	r3, [r3, r2]
 8007de6:	187a      	adds	r2, r7, r1
 8007de8:	8812      	ldrh	r2, [r2, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d23d      	bcs.n	8007e6a <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dee:	f3ef 8310 	mrs	r3, PRIMASK
 8007df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007df4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df8:	2301      	movs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f383 8810 	msr	PRIMASK, r3
}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	491b      	ldr	r1, [pc, #108]	; (8007e7c <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007e10:	400a      	ands	r2, r1
 8007e12:	609a      	str	r2, [r3, #8]
 8007e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f383 8810 	msr	PRIMASK, r3
}
 8007e1e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a17      	ldr	r2, [pc, #92]	; (8007e80 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007e24:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e26:	f3ef 8310 	mrs	r3, PRIMASK
 8007e2a:	617b      	str	r3, [r7, #20]
  return(result);
 8007e2c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e30:	2301      	movs	r3, #1
 8007e32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f383 8810 	msr	PRIMASK, r3
}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2120      	movs	r1, #32
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f383 8810 	msr	PRIMASK, r3
}
 8007e56:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e58:	e007      	b.n	8007e6a <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699a      	ldr	r2, [r3, #24]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2108      	movs	r1, #8
 8007e66:	430a      	orrs	r2, r1
 8007e68:	619a      	str	r2, [r3, #24]
}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	b01c      	add	sp, #112	; 0x70
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	fffffeff 	.word	0xfffffeff
 8007e78:	effffffe 	.word	0xeffffffe
 8007e7c:	efffffff 	.word	0xefffffff
 8007e80:	080078b1 	.word	0x080078b1

08007e84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b09e      	sub	sp, #120	; 0x78
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e8c:	2372      	movs	r3, #114	; 0x72
 8007e8e:	18fb      	adds	r3, r7, r3
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	2160      	movs	r1, #96	; 0x60
 8007e94:	5a52      	ldrh	r2, [r2, r1]
 8007e96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	228c      	movs	r2, #140	; 0x8c
 8007eb4:	589b      	ldr	r3, [r3, r2]
 8007eb6:	2b22      	cmp	r3, #34	; 0x22
 8007eb8:	d000      	beq.n	8007ebc <UART_RxISR_16BIT_FIFOEN+0x38>
 8007eba:	e144      	b.n	8008146 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ebc:	2366      	movs	r3, #102	; 0x66
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	2168      	movs	r1, #104	; 0x68
 8007ec4:	5a52      	ldrh	r2, [r2, r1]
 8007ec6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ec8:	e0eb      	b.n	80080a2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed0:	2164      	movs	r1, #100	; 0x64
 8007ed2:	187b      	adds	r3, r7, r1
 8007ed4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eda:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007edc:	187b      	adds	r3, r7, r1
 8007ede:	2272      	movs	r2, #114	; 0x72
 8007ee0:	18ba      	adds	r2, r7, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	8812      	ldrh	r2, [r2, #0]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef2:	1c9a      	adds	r2, r3, #2
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	225e      	movs	r2, #94	; 0x5e
 8007efc:	5a9b      	ldrh	r3, [r3, r2]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b299      	uxth	r1, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	225e      	movs	r2, #94	; 0x5e
 8007f08:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f14:	2207      	movs	r2, #7
 8007f16:	4013      	ands	r3, r2
 8007f18:	d049      	beq.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4013      	ands	r3, r2
 8007f20:	d010      	beq.n	8007f44 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007f22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	4013      	ands	r3, r2
 8007f2a:	d00b      	beq.n	8007f44 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2201      	movs	r2, #1
 8007f32:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2290      	movs	r2, #144	; 0x90
 8007f38:	589b      	ldr	r3, [r3, r2]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2190      	movs	r1, #144	; 0x90
 8007f42:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f46:	2202      	movs	r2, #2
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d00f      	beq.n	8007f6c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4013      	ands	r3, r2
 8007f52:	d00b      	beq.n	8007f6c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2202      	movs	r2, #2
 8007f5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2290      	movs	r2, #144	; 0x90
 8007f60:	589b      	ldr	r3, [r3, r2]
 8007f62:	2204      	movs	r2, #4
 8007f64:	431a      	orrs	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2190      	movs	r1, #144	; 0x90
 8007f6a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f6e:	2204      	movs	r2, #4
 8007f70:	4013      	ands	r3, r2
 8007f72:	d00f      	beq.n	8007f94 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f76:	2201      	movs	r2, #1
 8007f78:	4013      	ands	r3, r2
 8007f7a:	d00b      	beq.n	8007f94 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2204      	movs	r2, #4
 8007f82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2290      	movs	r2, #144	; 0x90
 8007f88:	589b      	ldr	r3, [r3, r2]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2190      	movs	r1, #144	; 0x90
 8007f92:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2290      	movs	r2, #144	; 0x90
 8007f98:	589b      	ldr	r3, [r3, r2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d007      	beq.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f7fe fe1b 	bl	8006bdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2290      	movs	r2, #144	; 0x90
 8007faa:	2100      	movs	r1, #0
 8007fac:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	225e      	movs	r2, #94	; 0x5e
 8007fb2:	5a9b      	ldrh	r3, [r3, r2]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d173      	bne.n	80080a2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fba:	f3ef 8310 	mrs	r3, PRIMASK
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fca:	f383 8810 	msr	PRIMASK, r3
}
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4961      	ldr	r1, [pc, #388]	; (8008160 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007fdc:	400a      	ands	r2, r1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	f383 8810 	msr	PRIMASK, r3
}
 8007fea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fec:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ff4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	f383 8810 	msr	PRIMASK, r3
}
 8008000:	46c0      	nop			; (mov r8, r8)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4955      	ldr	r1, [pc, #340]	; (8008164 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800800e:	400a      	ands	r2, r1
 8008010:	609a      	str	r2, [r3, #8]
 8008012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008014:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008018:	f383 8810 	msr	PRIMASK, r3
}
 800801c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	228c      	movs	r2, #140	; 0x8c
 8008022:	2120      	movs	r1, #32
 8008024:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008036:	2b01      	cmp	r3, #1
 8008038:	d12f      	bne.n	800809a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008040:	f3ef 8310 	mrs	r3, PRIMASK
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008048:	657b      	str	r3, [r7, #84]	; 0x54
 800804a:	2301      	movs	r3, #1
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	f383 8810 	msr	PRIMASK, r3
}
 8008054:	46c0      	nop			; (mov r8, r8)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2110      	movs	r1, #16
 8008062:	438a      	bics	r2, r1
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	f383 8810 	msr	PRIMASK, r3
}
 8008070:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	2210      	movs	r2, #16
 800807a:	4013      	ands	r3, r2
 800807c:	2b10      	cmp	r3, #16
 800807e:	d103      	bne.n	8008088 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2210      	movs	r2, #16
 8008086:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	225c      	movs	r2, #92	; 0x5c
 800808c:	5a9a      	ldrh	r2, [r3, r2]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	0011      	movs	r1, r2
 8008092:	0018      	movs	r0, r3
 8008094:	f7fe fdaa 	bl	8006bec <HAL_UARTEx_RxEventCallback>
 8008098:	e003      	b.n	80080a2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	0018      	movs	r0, r3
 800809e:	f7fa fba1 	bl	80027e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080a2:	2366      	movs	r3, #102	; 0x66
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x232>
 80080ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ae:	2220      	movs	r2, #32
 80080b0:	4013      	ands	r3, r2
 80080b2:	d000      	beq.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x232>
 80080b4:	e709      	b.n	8007eca <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080b6:	2052      	movs	r0, #82	; 0x52
 80080b8:	183b      	adds	r3, r7, r0
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	215e      	movs	r1, #94	; 0x5e
 80080be:	5a52      	ldrh	r2, [r2, r1]
 80080c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080c2:	0001      	movs	r1, r0
 80080c4:	187b      	adds	r3, r7, r1
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d044      	beq.n	8008156 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2268      	movs	r2, #104	; 0x68
 80080d0:	5a9b      	ldrh	r3, [r3, r2]
 80080d2:	187a      	adds	r2, r7, r1
 80080d4:	8812      	ldrh	r2, [r2, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d23d      	bcs.n	8008156 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080da:	f3ef 8310 	mrs	r3, PRIMASK
 80080de:	60fb      	str	r3, [r7, #12]
  return(result);
 80080e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e4:	2301      	movs	r3, #1
 80080e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f383 8810 	msr	PRIMASK, r3
}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	491b      	ldr	r1, [pc, #108]	; (8008168 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80080fc:	400a      	ands	r2, r1
 80080fe:	609a      	str	r2, [r3, #8]
 8008100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f383 8810 	msr	PRIMASK, r3
}
 800810a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a17      	ldr	r2, [pc, #92]	; (800816c <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8008110:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008112:	f3ef 8310 	mrs	r3, PRIMASK
 8008116:	61bb      	str	r3, [r7, #24]
  return(result);
 8008118:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800811a:	64bb      	str	r3, [r7, #72]	; 0x48
 800811c:	2301      	movs	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f383 8810 	msr	PRIMASK, r3
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2120      	movs	r1, #32
 8008134:	430a      	orrs	r2, r1
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	f383 8810 	msr	PRIMASK, r3
}
 8008142:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008144:	e007      	b.n	8008156 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699a      	ldr	r2, [r3, #24]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2108      	movs	r1, #8
 8008152:	430a      	orrs	r2, r1
 8008154:	619a      	str	r2, [r3, #24]
}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	b01e      	add	sp, #120	; 0x78
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	fffffeff 	.word	0xfffffeff
 8008164:	effffffe 	.word	0xeffffffe
 8008168:	efffffff 	.word	0xefffffff
 800816c:	08007a25 	.word	0x08007a25

08008170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008188:	46c0      	nop			; (mov r8, r8)
 800818a:	46bd      	mov	sp, r7
 800818c:	b002      	add	sp, #8
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	b002      	add	sp, #8
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2284      	movs	r2, #132	; 0x84
 80081ac:	5c9b      	ldrb	r3, [r3, r2]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e027      	b.n	8008206 <HAL_UARTEx_DisableFifoMode+0x66>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2284      	movs	r2, #132	; 0x84
 80081ba:	2101      	movs	r1, #1
 80081bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2288      	movs	r2, #136	; 0x88
 80081c2:	2124      	movs	r1, #36	; 0x24
 80081c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2101      	movs	r1, #1
 80081da:	438a      	bics	r2, r1
 80081dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a0b      	ldr	r2, [pc, #44]	; (8008210 <HAL_UARTEx_DisableFifoMode+0x70>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2288      	movs	r2, #136	; 0x88
 80081f8:	2120      	movs	r1, #32
 80081fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2284      	movs	r2, #132	; 0x84
 8008200:	2100      	movs	r1, #0
 8008202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	0018      	movs	r0, r3
 8008208:	46bd      	mov	sp, r7
 800820a:	b004      	add	sp, #16
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	dfffffff 	.word	0xdfffffff

08008214 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2284      	movs	r2, #132	; 0x84
 8008222:	5c9b      	ldrb	r3, [r3, r2]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d101      	bne.n	800822c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008228:	2302      	movs	r3, #2
 800822a:	e02e      	b.n	800828a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2284      	movs	r2, #132	; 0x84
 8008230:	2101      	movs	r1, #1
 8008232:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2288      	movs	r2, #136	; 0x88
 8008238:	2124      	movs	r1, #36	; 0x24
 800823a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2101      	movs	r1, #1
 8008250:	438a      	bics	r2, r1
 8008252:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	08d9      	lsrs	r1, r3, #3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0018      	movs	r0, r3
 800826c:	f000 f854 	bl	8008318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2288      	movs	r2, #136	; 0x88
 800827c:	2120      	movs	r1, #32
 800827e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2284      	movs	r2, #132	; 0x84
 8008284:	2100      	movs	r1, #0
 8008286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	0018      	movs	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	b004      	add	sp, #16
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2284      	movs	r2, #132	; 0x84
 80082a2:	5c9b      	ldrb	r3, [r3, r2]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e02f      	b.n	800830c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2284      	movs	r2, #132	; 0x84
 80082b0:	2101      	movs	r1, #1
 80082b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2288      	movs	r2, #136	; 0x88
 80082b8:	2124      	movs	r1, #36	; 0x24
 80082ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2101      	movs	r1, #1
 80082d0:	438a      	bics	r2, r1
 80082d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	4a0e      	ldr	r2, [pc, #56]	; (8008314 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80082dc:	4013      	ands	r3, r2
 80082de:	0019      	movs	r1, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 f813 	bl	8008318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2288      	movs	r2, #136	; 0x88
 80082fe:	2120      	movs	r1, #32
 8008300:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2284      	movs	r2, #132	; 0x84
 8008306:	2100      	movs	r1, #0
 8008308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	0018      	movs	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	b004      	add	sp, #16
 8008312:	bd80      	pop	{r7, pc}
 8008314:	f1ffffff 	.word	0xf1ffffff

08008318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	226a      	movs	r2, #106	; 0x6a
 800832c:	2101      	movs	r1, #1
 800832e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2268      	movs	r2, #104	; 0x68
 8008334:	2101      	movs	r1, #1
 8008336:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008338:	e043      	b.n	80083c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800833a:	260f      	movs	r6, #15
 800833c:	19bb      	adds	r3, r7, r6
 800833e:	2208      	movs	r2, #8
 8008340:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008342:	200e      	movs	r0, #14
 8008344:	183b      	adds	r3, r7, r0
 8008346:	2208      	movs	r2, #8
 8008348:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	0e5b      	lsrs	r3, r3, #25
 8008352:	b2da      	uxtb	r2, r3
 8008354:	240d      	movs	r4, #13
 8008356:	193b      	adds	r3, r7, r4
 8008358:	2107      	movs	r1, #7
 800835a:	400a      	ands	r2, r1
 800835c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	0f5b      	lsrs	r3, r3, #29
 8008366:	b2da      	uxtb	r2, r3
 8008368:	250c      	movs	r5, #12
 800836a:	197b      	adds	r3, r7, r5
 800836c:	2107      	movs	r1, #7
 800836e:	400a      	ands	r2, r1
 8008370:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008372:	183b      	adds	r3, r7, r0
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	197a      	adds	r2, r7, r5
 8008378:	7812      	ldrb	r2, [r2, #0]
 800837a:	4914      	ldr	r1, [pc, #80]	; (80083cc <UARTEx_SetNbDataToProcess+0xb4>)
 800837c:	5c8a      	ldrb	r2, [r1, r2]
 800837e:	435a      	muls	r2, r3
 8008380:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008382:	197b      	adds	r3, r7, r5
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	4a12      	ldr	r2, [pc, #72]	; (80083d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008388:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838a:	0019      	movs	r1, r3
 800838c:	f7f7 ff62 	bl	8000254 <__divsi3>
 8008390:	0003      	movs	r3, r0
 8008392:	b299      	uxth	r1, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	226a      	movs	r2, #106	; 0x6a
 8008398:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800839a:	19bb      	adds	r3, r7, r6
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	193a      	adds	r2, r7, r4
 80083a0:	7812      	ldrb	r2, [r2, #0]
 80083a2:	490a      	ldr	r1, [pc, #40]	; (80083cc <UARTEx_SetNbDataToProcess+0xb4>)
 80083a4:	5c8a      	ldrb	r2, [r1, r2]
 80083a6:	435a      	muls	r2, r3
 80083a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80083aa:	193b      	adds	r3, r7, r4
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	4a08      	ldr	r2, [pc, #32]	; (80083d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80083b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b2:	0019      	movs	r1, r3
 80083b4:	f7f7 ff4e 	bl	8000254 <__divsi3>
 80083b8:	0003      	movs	r3, r0
 80083ba:	b299      	uxth	r1, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2268      	movs	r2, #104	; 0x68
 80083c0:	5299      	strh	r1, [r3, r2]
}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	46bd      	mov	sp, r7
 80083c6:	b005      	add	sp, #20
 80083c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	0800e264 	.word	0x0800e264
 80083d0:	0800e26c 	.word	0x0800e26c

080083d4 <__NVIC_SetPriority>:
{
 80083d4:	b590      	push	{r4, r7, lr}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	0002      	movs	r2, r0
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	1dfb      	adds	r3, r7, #7
 80083e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80083e2:	1dfb      	adds	r3, r7, #7
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b7f      	cmp	r3, #127	; 0x7f
 80083e8:	d828      	bhi.n	800843c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083ea:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <__NVIC_SetPriority+0xd4>)
 80083ec:	1dfb      	adds	r3, r7, #7
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	b25b      	sxtb	r3, r3
 80083f2:	089b      	lsrs	r3, r3, #2
 80083f4:	33c0      	adds	r3, #192	; 0xc0
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	589b      	ldr	r3, [r3, r2]
 80083fa:	1dfa      	adds	r2, r7, #7
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	0011      	movs	r1, r2
 8008400:	2203      	movs	r2, #3
 8008402:	400a      	ands	r2, r1
 8008404:	00d2      	lsls	r2, r2, #3
 8008406:	21ff      	movs	r1, #255	; 0xff
 8008408:	4091      	lsls	r1, r2
 800840a:	000a      	movs	r2, r1
 800840c:	43d2      	mvns	r2, r2
 800840e:	401a      	ands	r2, r3
 8008410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	019b      	lsls	r3, r3, #6
 8008416:	22ff      	movs	r2, #255	; 0xff
 8008418:	401a      	ands	r2, r3
 800841a:	1dfb      	adds	r3, r7, #7
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	0018      	movs	r0, r3
 8008420:	2303      	movs	r3, #3
 8008422:	4003      	ands	r3, r0
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008428:	481f      	ldr	r0, [pc, #124]	; (80084a8 <__NVIC_SetPriority+0xd4>)
 800842a:	1dfb      	adds	r3, r7, #7
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b25b      	sxtb	r3, r3
 8008430:	089b      	lsrs	r3, r3, #2
 8008432:	430a      	orrs	r2, r1
 8008434:	33c0      	adds	r3, #192	; 0xc0
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	501a      	str	r2, [r3, r0]
}
 800843a:	e031      	b.n	80084a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800843c:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <__NVIC_SetPriority+0xd8>)
 800843e:	1dfb      	adds	r3, r7, #7
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	0019      	movs	r1, r3
 8008444:	230f      	movs	r3, #15
 8008446:	400b      	ands	r3, r1
 8008448:	3b08      	subs	r3, #8
 800844a:	089b      	lsrs	r3, r3, #2
 800844c:	3306      	adds	r3, #6
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	18d3      	adds	r3, r2, r3
 8008452:	3304      	adds	r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	1dfa      	adds	r2, r7, #7
 8008458:	7812      	ldrb	r2, [r2, #0]
 800845a:	0011      	movs	r1, r2
 800845c:	2203      	movs	r2, #3
 800845e:	400a      	ands	r2, r1
 8008460:	00d2      	lsls	r2, r2, #3
 8008462:	21ff      	movs	r1, #255	; 0xff
 8008464:	4091      	lsls	r1, r2
 8008466:	000a      	movs	r2, r1
 8008468:	43d2      	mvns	r2, r2
 800846a:	401a      	ands	r2, r3
 800846c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	019b      	lsls	r3, r3, #6
 8008472:	22ff      	movs	r2, #255	; 0xff
 8008474:	401a      	ands	r2, r3
 8008476:	1dfb      	adds	r3, r7, #7
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	0018      	movs	r0, r3
 800847c:	2303      	movs	r3, #3
 800847e:	4003      	ands	r3, r0
 8008480:	00db      	lsls	r3, r3, #3
 8008482:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008484:	4809      	ldr	r0, [pc, #36]	; (80084ac <__NVIC_SetPriority+0xd8>)
 8008486:	1dfb      	adds	r3, r7, #7
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	001c      	movs	r4, r3
 800848c:	230f      	movs	r3, #15
 800848e:	4023      	ands	r3, r4
 8008490:	3b08      	subs	r3, #8
 8008492:	089b      	lsrs	r3, r3, #2
 8008494:	430a      	orrs	r2, r1
 8008496:	3306      	adds	r3, #6
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	18c3      	adds	r3, r0, r3
 800849c:	3304      	adds	r3, #4
 800849e:	601a      	str	r2, [r3, #0]
}
 80084a0:	46c0      	nop			; (mov r8, r8)
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b003      	add	sp, #12
 80084a6:	bd90      	pop	{r4, r7, pc}
 80084a8:	e000e100 	.word	0xe000e100
 80084ac:	e000ed00 	.word	0xe000ed00

080084b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <SysTick_Handler+0x1c>)
 80084b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084b8:	f001 fc88 	bl	8009dcc <xTaskGetSchedulerState>
 80084bc:	0003      	movs	r3, r0
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d001      	beq.n	80084c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084c2:	f002 fb09 	bl	800aad8 <xPortSysTickHandler>
  }
}
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	e000e010 	.word	0xe000e010

080084d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084d4:	2305      	movs	r3, #5
 80084d6:	425b      	negs	r3, r3
 80084d8:	2100      	movs	r1, #0
 80084da:	0018      	movs	r0, r3
 80084dc:	f7ff ff7a 	bl	80083d4 <__NVIC_SetPriority>
#endif
}
 80084e0:	46c0      	nop			; (mov r8, r8)
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ee:	f3ef 8305 	mrs	r3, IPSR
 80084f2:	603b      	str	r3, [r7, #0]
  return(result);
 80084f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084fa:	2306      	movs	r3, #6
 80084fc:	425b      	negs	r3, r3
 80084fe:	607b      	str	r3, [r7, #4]
 8008500:	e00c      	b.n	800851c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008502:	4b09      	ldr	r3, [pc, #36]	; (8008528 <osKernelInitialize+0x40>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800850a:	4b07      	ldr	r3, [pc, #28]	; (8008528 <osKernelInitialize+0x40>)
 800850c:	2201      	movs	r2, #1
 800850e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008510:	2300      	movs	r3, #0
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	e002      	b.n	800851c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008516:	2301      	movs	r3, #1
 8008518:	425b      	negs	r3, r3
 800851a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800851c:	687b      	ldr	r3, [r7, #4]
}
 800851e:	0018      	movs	r0, r3
 8008520:	46bd      	mov	sp, r7
 8008522:	b002      	add	sp, #8
 8008524:	bd80      	pop	{r7, pc}
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	20000778 	.word	0x20000778

0800852c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008532:	f3ef 8305 	mrs	r3, IPSR
 8008536:	603b      	str	r3, [r7, #0]
  return(result);
 8008538:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <osKernelStart+0x1a>
    stat = osErrorISR;
 800853e:	2306      	movs	r3, #6
 8008540:	425b      	negs	r3, r3
 8008542:	607b      	str	r3, [r7, #4]
 8008544:	e010      	b.n	8008568 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008546:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <osKernelStart+0x48>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d109      	bne.n	8008562 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800854e:	f7ff ffbf 	bl	80084d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008552:	4b08      	ldr	r3, [pc, #32]	; (8008574 <osKernelStart+0x48>)
 8008554:	2202      	movs	r2, #2
 8008556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008558:	f001 f84e 	bl	80095f8 <vTaskStartScheduler>
      stat = osOK;
 800855c:	2300      	movs	r3, #0
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	e002      	b.n	8008568 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008562:	2301      	movs	r3, #1
 8008564:	425b      	negs	r3, r3
 8008566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008568:	687b      	ldr	r3, [r7, #4]
}
 800856a:	0018      	movs	r0, r3
 800856c:	46bd      	mov	sp, r7
 800856e:	b002      	add	sp, #8
 8008570:	bd80      	pop	{r7, pc}
 8008572:	46c0      	nop			; (mov r8, r8)
 8008574:	20000778 	.word	0x20000778

08008578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b08e      	sub	sp, #56	; 0x38
 800857c:	af04      	add	r7, sp, #16
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008584:	2300      	movs	r3, #0
 8008586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008588:	f3ef 8305 	mrs	r3, IPSR
 800858c:	617b      	str	r3, [r7, #20]
  return(result);
 800858e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008590:	2b00      	cmp	r3, #0
 8008592:	d000      	beq.n	8008596 <osThreadNew+0x1e>
 8008594:	e081      	b.n	800869a <osThreadNew+0x122>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d100      	bne.n	800859e <osThreadNew+0x26>
 800859c:	e07d      	b.n	800869a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800859e:	2380      	movs	r3, #128	; 0x80
 80085a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80085a2:	2318      	movs	r3, #24
 80085a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085aa:	2301      	movs	r3, #1
 80085ac:	425b      	negs	r3, r3
 80085ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d044      	beq.n	8008640 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <osThreadNew+0x4c>
        name = attr->name;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d007      	beq.n	80085e8 <osThreadNew+0x70>
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	2b38      	cmp	r3, #56	; 0x38
 80085dc:	d804      	bhi.n	80085e8 <osThreadNew+0x70>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	4013      	ands	r3, r2
 80085e6:	d001      	beq.n	80085ec <osThreadNew+0x74>
        return (NULL);
 80085e8:	2300      	movs	r3, #0
 80085ea:	e057      	b.n	800869c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	089b      	lsrs	r3, r3, #2
 80085fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00e      	beq.n	8008622 <osThreadNew+0xaa>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2bbb      	cmp	r3, #187	; 0xbb
 800860a:	d90a      	bls.n	8008622 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <osThreadNew+0xaa>
        mem = 1;
 800861c:	2301      	movs	r3, #1
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	e010      	b.n	8008644 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10c      	bne.n	8008644 <osThreadNew+0xcc>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d108      	bne.n	8008644 <osThreadNew+0xcc>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d104      	bne.n	8008644 <osThreadNew+0xcc>
          mem = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	e001      	b.n	8008644 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d112      	bne.n	8008670 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008652:	68bd      	ldr	r5, [r7, #8]
 8008654:	6a3c      	ldr	r4, [r7, #32]
 8008656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	9201      	str	r2, [sp, #4]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	002b      	movs	r3, r5
 8008664:	0022      	movs	r2, r4
 8008666:	f000 fe08 	bl	800927a <xTaskCreateStatic>
 800866a:	0003      	movs	r3, r0
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	e014      	b.n	800869a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d111      	bne.n	800869a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	b29a      	uxth	r2, r3
 800867a:	68bc      	ldr	r4, [r7, #8]
 800867c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	2310      	movs	r3, #16
 8008682:	18fb      	adds	r3, r7, r3
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	0023      	movs	r3, r4
 800868c:	f000 fe39 	bl	8009302 <xTaskCreate>
 8008690:	0003      	movs	r3, r0
 8008692:	2b01      	cmp	r3, #1
 8008694:	d001      	beq.n	800869a <osThreadNew+0x122>
            hTask = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800869a:	693b      	ldr	r3, [r7, #16]
}
 800869c:	0018      	movs	r0, r3
 800869e:	46bd      	mov	sp, r7
 80086a0:	b00a      	add	sp, #40	; 0x28
 80086a2:	bdb0      	pop	{r4, r5, r7, pc}

080086a4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <osThreadFlagsSet+0x1a>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da03      	bge.n	80086c6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80086be:	2304      	movs	r3, #4
 80086c0:	425b      	negs	r3, r3
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	e031      	b.n	800872a <osThreadFlagsSet+0x86>
  }
  else {
    rflags = (uint32_t)osError;
 80086c6:	2301      	movs	r3, #1
 80086c8:	425b      	negs	r3, r3
 80086ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086cc:	f3ef 8305 	mrs	r3, IPSR
 80086d0:	613b      	str	r3, [r7, #16]
  return(result);
 80086d2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01b      	beq.n	8008710 <osThreadFlagsSet+0x6c>
      yield = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6978      	ldr	r0, [r7, #20]
 80086e0:	2308      	movs	r3, #8
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	2300      	movs	r3, #0
 80086e8:	2201      	movs	r2, #1
 80086ea:	f001 fcdb 	bl	800a0a4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80086ee:	230c      	movs	r3, #12
 80086f0:	18fb      	adds	r3, r7, r3
 80086f2:	6978      	ldr	r0, [r7, #20]
 80086f4:	2200      	movs	r2, #0
 80086f6:	9200      	str	r2, [sp, #0]
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	f001 fcd2 	bl	800a0a4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d011      	beq.n	800872a <osThreadFlagsSet+0x86>
 8008706:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <osThreadFlagsSet+0x90>)
 8008708:	2280      	movs	r2, #128	; 0x80
 800870a:	0552      	lsls	r2, r2, #21
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e00c      	b.n	800872a <osThreadFlagsSet+0x86>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6978      	ldr	r0, [r7, #20]
 8008714:	2300      	movs	r3, #0
 8008716:	2201      	movs	r2, #1
 8008718:	f001 fc28 	bl	8009f6c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800871c:	230c      	movs	r3, #12
 800871e:	18fb      	adds	r3, r7, r3
 8008720:	6978      	ldr	r0, [r7, #20]
 8008722:	2200      	movs	r2, #0
 8008724:	2100      	movs	r1, #0
 8008726:	f001 fc21 	bl	8009f6c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800872a:	68fb      	ldr	r3, [r7, #12]
}
 800872c:	0018      	movs	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	b006      	add	sp, #24
 8008732:	bd80      	pop	{r7, pc}
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b08c      	sub	sp, #48	; 0x30
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008744:	f3ef 8305 	mrs	r3, IPSR
 8008748:	617b      	str	r3, [r7, #20]
  return(result);
 800874a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008750:	2306      	movs	r3, #6
 8008752:	425b      	negs	r3, r3
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008756:	e06a      	b.n	800882e <osThreadFlagsWait+0xf6>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	da03      	bge.n	8008766 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800875e:	2304      	movs	r3, #4
 8008760:	425b      	negs	r3, r3
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008764:	e063      	b.n	800882e <osThreadFlagsWait+0xf6>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2202      	movs	r2, #2
 800876a:	4013      	ands	r3, r2
 800876c:	d002      	beq.n	8008774 <osThreadFlagsWait+0x3c>
      clear = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
 8008772:	e001      	b.n	8008778 <osThreadFlagsWait+0x40>
    } else {
      clear = flags;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008780:	f001 f830 	bl	80097e4 <xTaskGetTickCount>
 8008784:	0003      	movs	r3, r0
 8008786:	623b      	str	r3, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	2210      	movs	r2, #16
 800878c:	18ba      	adds	r2, r7, r2
 800878e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008790:	2000      	movs	r0, #0
 8008792:	f001 fb93 	bl	8009ebc <xTaskNotifyWait>
 8008796:	0003      	movs	r3, r0
 8008798:	61fb      	str	r3, [r7, #28]

      if (rval == pdPASS) {
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d135      	bne.n	800880c <osThreadFlagsWait+0xd4>
        rflags &= flags;
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4013      	ands	r3, r2
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ac:	4313      	orrs	r3, r2
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2201      	movs	r2, #1
 80087b4:	4013      	ands	r3, r2
 80087b6:	d00c      	beq.n	80087d2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087bc:	4013      	ands	r3, r2
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d031      	beq.n	8008828 <osThreadFlagsWait+0xf0>
            break;
          } else {
            if (timeout == 0U) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10e      	bne.n	80087e8 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80087ca:	2303      	movs	r3, #3
 80087cc:	425b      	negs	r3, r3
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80087d0:	e02d      	b.n	800882e <osThreadFlagsWait+0xf6>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d6:	4013      	ands	r3, r2
 80087d8:	d128      	bne.n	800882c <osThreadFlagsWait+0xf4>
            break;
          } else {
            if (timeout == 0U) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80087e0:	2303      	movs	r3, #3
 80087e2:	425b      	negs	r3, r3
 80087e4:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80087e6:	e022      	b.n	800882e <osThreadFlagsWait+0xf6>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80087e8:	f000 fffc 	bl	80097e4 <xTaskGetTickCount>
 80087ec:	0002      	movs	r2, r0
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d902      	bls.n	8008802 <osThreadFlagsWait+0xca>
          tout  = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	e00e      	b.n	8008820 <osThreadFlagsWait+0xe8>
        } else {
          tout -= td;
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
 800880a:	e009      	b.n	8008820 <osThreadFlagsWait+0xe8>
        }
      }
      else {
        if (timeout == 0) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <osThreadFlagsWait+0xe2>
          rflags = (uint32_t)osErrorResource;
 8008812:	2303      	movs	r3, #3
 8008814:	425b      	negs	r3, r3
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008818:	e002      	b.n	8008820 <osThreadFlagsWait+0xe8>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800881a:	2302      	movs	r3, #2
 800881c:	425b      	negs	r3, r3
 800881e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1b0      	bne.n	8008788 <osThreadFlagsWait+0x50>
 8008826:	e002      	b.n	800882e <osThreadFlagsWait+0xf6>
            break;
 8008828:	46c0      	nop			; (mov r8, r8)
 800882a:	e000      	b.n	800882e <osThreadFlagsWait+0xf6>
            break;
 800882c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return flags before clearing */
  return (rflags);
 800882e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008830:	0018      	movs	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	b00c      	add	sp, #48	; 0x30
 8008836:	bd80      	pop	{r7, pc}

08008838 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008840:	f3ef 8305 	mrs	r3, IPSR
 8008844:	60bb      	str	r3, [r7, #8]
  return(result);
 8008846:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <osDelay+0x1c>
    stat = osErrorISR;
 800884c:	2306      	movs	r3, #6
 800884e:	425b      	negs	r3, r3
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e008      	b.n	8008866 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <osDelay+0x2e>
      vTaskDelay(ticks);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	0018      	movs	r0, r3
 8008862:	f000 fea3 	bl	80095ac <vTaskDelay>
    }
  }

  return (stat);
 8008866:	68fb      	ldr	r3, [r7, #12]
}
 8008868:	0018      	movs	r0, r3
 800886a:	46bd      	mov	sp, r7
 800886c:	b004      	add	sp, #16
 800886e:	bd80      	pop	{r7, pc}

08008870 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4a06      	ldr	r2, [pc, #24]	; (8008898 <vApplicationGetIdleTaskMemory+0x28>)
 8008880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	4a05      	ldr	r2, [pc, #20]	; (800889c <vApplicationGetIdleTaskMemory+0x2c>)
 8008886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2280      	movs	r2, #128	; 0x80
 800888c:	601a      	str	r2, [r3, #0]
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b004      	add	sp, #16
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	2000077c 	.word	0x2000077c
 800889c:	20000838 	.word	0x20000838

080088a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4a06      	ldr	r2, [pc, #24]	; (80088c8 <vApplicationGetTimerTaskMemory+0x28>)
 80088b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4a05      	ldr	r2, [pc, #20]	; (80088cc <vApplicationGetTimerTaskMemory+0x2c>)
 80088b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2280      	movs	r2, #128	; 0x80
 80088bc:	0052      	lsls	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]
}
 80088c0:	46c0      	nop			; (mov r8, r8)
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b004      	add	sp, #16
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000a38 	.word	0x20000a38
 80088cc:	20000af4 	.word	0x20000af4

080088d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3308      	adds	r3, #8
 80088dc:	001a      	movs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	4252      	negs	r2, r2
 80088e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3308      	adds	r3, #8
 80088ee:	001a      	movs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3308      	adds	r3, #8
 80088f8:	001a      	movs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008904:	46c0      	nop			; (mov r8, r8)
 8008906:	46bd      	mov	sp, r7
 8008908:	b002      	add	sp, #8
 800890a:	bd80      	pop	{r7, pc}

0800890c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	46bd      	mov	sp, r7
 800891e:	b002      	add	sp, #8
 8008920:	bd80      	pop	{r7, pc}

08008922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
}
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	46bd      	mov	sp, r7
 8008962:	b004      	add	sp, #16
 8008964:	bd80      	pop	{r7, pc}

08008966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	3301      	adds	r3, #1
 800897a:	d103      	bne.n	8008984 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e00c      	b.n	800899e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3308      	adds	r3, #8
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	e002      	b.n	8008992 <vListInsert+0x2c>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	429a      	cmp	r2, r3
 800899c:	d2f6      	bcs.n	800898c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	601a      	str	r2, [r3, #0]
}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	46bd      	mov	sp, r7
 80089ce:	b004      	add	sp, #16
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6892      	ldr	r2, [r2, #8]
 80089e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6852      	ldr	r2, [r2, #4]
 80089f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d103      	bne.n	8008a06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	1e5a      	subs	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
}
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	b004      	add	sp, #16
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <xQueueGenericReset+0x18>
 8008a36:	b672      	cpsid	i
 8008a38:	e7fe      	b.n	8008a38 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008a3a:	f001 fff1 	bl	800aa20 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	434b      	muls	r3, r1
 8008a4c:	18d2      	adds	r2, r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a68:	1e59      	subs	r1, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	434b      	muls	r3, r1
 8008a70:	18d2      	adds	r2, r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2244      	movs	r2, #68	; 0x44
 8008a7a:	21ff      	movs	r1, #255	; 0xff
 8008a7c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2245      	movs	r2, #69	; 0x45
 8008a82:	21ff      	movs	r1, #255	; 0xff
 8008a84:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10d      	bne.n	8008aa8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d013      	beq.n	8008abc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	3310      	adds	r3, #16
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f000 ffff 	bl	8009a9c <xTaskRemoveFromEventList>
 8008a9e:	1e03      	subs	r3, r0, #0
 8008aa0:	d00c      	beq.n	8008abc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008aa2:	f001 ffad 	bl	800aa00 <vPortYield>
 8008aa6:	e009      	b.n	8008abc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3310      	adds	r3, #16
 8008aac:	0018      	movs	r0, r3
 8008aae:	f7ff ff0f 	bl	80088d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3324      	adds	r3, #36	; 0x24
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f7ff ff0a 	bl	80088d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008abc:	f001 ffc2 	bl	800aa44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ac0:	2301      	movs	r3, #1
}
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b004      	add	sp, #16
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008aca:	b590      	push	{r4, r7, lr}
 8008acc:	b089      	sub	sp, #36	; 0x24
 8008ace:	af02      	add	r7, sp, #8
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <xQueueGenericCreateStatic+0x18>
 8008ade:	b672      	cpsid	i
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <xQueueGenericCreateStatic+0x22>
 8008ae8:	b672      	cpsid	i
 8008aea:	e7fe      	b.n	8008aea <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <xQueueGenericCreateStatic+0x2e>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <xQueueGenericCreateStatic+0x32>
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <xQueueGenericCreateStatic+0x34>
 8008afc:	2300      	movs	r3, #0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <xQueueGenericCreateStatic+0x3c>
 8008b02:	b672      	cpsid	i
 8008b04:	e7fe      	b.n	8008b04 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d102      	bne.n	8008b12 <xQueueGenericCreateStatic+0x48>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <xQueueGenericCreateStatic+0x4c>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <xQueueGenericCreateStatic+0x4e>
 8008b16:	2300      	movs	r3, #0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <xQueueGenericCreateStatic+0x56>
 8008b1c:	b672      	cpsid	i
 8008b1e:	e7fe      	b.n	8008b1e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b20:	2350      	movs	r3, #80	; 0x50
 8008b22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	2b50      	cmp	r3, #80	; 0x50
 8008b28:	d001      	beq.n	8008b2e <xQueueGenericCreateStatic+0x64>
 8008b2a:	b672      	cpsid	i
 8008b2c:	e7fe      	b.n	8008b2c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b2e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2246      	movs	r2, #70	; 0x46
 8008b3e:	2101      	movs	r1, #1
 8008b40:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b42:	2328      	movs	r3, #40	; 0x28
 8008b44:	18fb      	adds	r3, r7, r3
 8008b46:	781c      	ldrb	r4, [r3, #0]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	0023      	movs	r3, r4
 8008b54:	f000 f805 	bl	8008b62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b58:	697b      	ldr	r3, [r7, #20]
	}
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	b007      	add	sp, #28
 8008b60:	bd90      	pop	{r4, r7, pc}

08008b62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
 8008b6e:	001a      	movs	r2, r3
 8008b70:	1cfb      	adds	r3, r7, #3
 8008b72:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d103      	bne.n	8008b82 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	e002      	b.n	8008b88 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2101      	movs	r1, #1
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7ff ff42 	bl	8008a22 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	1cfa      	adds	r2, r7, #3
 8008ba2:	214c      	movs	r1, #76	; 0x4c
 8008ba4:	7812      	ldrb	r2, [r2, #0]
 8008ba6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ba8:	46c0      	nop			; (mov r8, r8)
 8008baa:	46bd      	mov	sp, r7
 8008bac:	b004      	add	sp, #16
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	607a      	str	r2, [r7, #4]
 8008bbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xQueueGenericSend+0x20>
 8008bcc:	b672      	cpsid	i
 8008bce:	e7fe      	b.n	8008bce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d103      	bne.n	8008bde <xQueueGenericSend+0x2e>
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <xQueueGenericSend+0x32>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <xQueueGenericSend+0x34>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <xQueueGenericSend+0x3c>
 8008be8:	b672      	cpsid	i
 8008bea:	e7fe      	b.n	8008bea <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d103      	bne.n	8008bfa <xQueueGenericSend+0x4a>
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <xQueueGenericSend+0x4e>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericSend+0x50>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <xQueueGenericSend+0x58>
 8008c04:	b672      	cpsid	i
 8008c06:	e7fe      	b.n	8008c06 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c08:	f001 f8e0 	bl	8009dcc <xTaskGetSchedulerState>
 8008c0c:	1e03      	subs	r3, r0, #0
 8008c0e:	d102      	bne.n	8008c16 <xQueueGenericSend+0x66>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <xQueueGenericSend+0x6a>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <xQueueGenericSend+0x6c>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <xQueueGenericSend+0x74>
 8008c20:	b672      	cpsid	i
 8008c22:	e7fe      	b.n	8008c22 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c24:	f001 fefc 	bl	800aa20 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d302      	bcc.n	8008c3a <xQueueGenericSend+0x8a>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d11e      	bne.n	8008c78 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	0018      	movs	r0, r3
 8008c42:	f000 f9a2 	bl	8008f8a <prvCopyDataToQueue>
 8008c46:	0003      	movs	r3, r0
 8008c48:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d009      	beq.n	8008c66 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	3324      	adds	r3, #36	; 0x24
 8008c56:	0018      	movs	r0, r3
 8008c58:	f000 ff20 	bl	8009a9c <xTaskRemoveFromEventList>
 8008c5c:	1e03      	subs	r3, r0, #0
 8008c5e:	d007      	beq.n	8008c70 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c60:	f001 fece 	bl	800aa00 <vPortYield>
 8008c64:	e004      	b.n	8008c70 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c6c:	f001 fec8 	bl	800aa00 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c70:	f001 fee8 	bl	800aa44 <vPortExitCritical>
				return pdPASS;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e05b      	b.n	8008d30 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c7e:	f001 fee1 	bl	800aa44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	e054      	b.n	8008d30 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d106      	bne.n	8008c9a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c8c:	2314      	movs	r3, #20
 8008c8e:	18fb      	adds	r3, r7, r3
 8008c90:	0018      	movs	r0, r3
 8008c92:	f000 ff5f 	bl	8009b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c9a:	f001 fed3 	bl	800aa44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c9e:	f000 fd09 	bl	80096b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ca2:	f001 febd 	bl	800aa20 <vPortEnterCritical>
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	2244      	movs	r2, #68	; 0x44
 8008caa:	5c9b      	ldrb	r3, [r3, r2]
 8008cac:	b25b      	sxtb	r3, r3
 8008cae:	3301      	adds	r3, #1
 8008cb0:	d103      	bne.n	8008cba <xQueueGenericSend+0x10a>
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	2244      	movs	r2, #68	; 0x44
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	5499      	strb	r1, [r3, r2]
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	2245      	movs	r2, #69	; 0x45
 8008cbe:	5c9b      	ldrb	r3, [r3, r2]
 8008cc0:	b25b      	sxtb	r3, r3
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	d103      	bne.n	8008cce <xQueueGenericSend+0x11e>
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	2245      	movs	r2, #69	; 0x45
 8008cca:	2100      	movs	r1, #0
 8008ccc:	5499      	strb	r1, [r3, r2]
 8008cce:	f001 feb9 	bl	800aa44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cd2:	1d3a      	adds	r2, r7, #4
 8008cd4:	2314      	movs	r3, #20
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	0011      	movs	r1, r2
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 ff4e 	bl	8009b7c <xTaskCheckForTimeOut>
 8008ce0:	1e03      	subs	r3, r0, #0
 8008ce2:	d11e      	bne.n	8008d22 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f000 fa54 	bl	8009194 <prvIsQueueFull>
 8008cec:	1e03      	subs	r3, r0, #0
 8008cee:	d011      	beq.n	8008d14 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	0011      	movs	r1, r2
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f000 fe8b 	bl	8009a14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	0018      	movs	r0, r3
 8008d02:	f000 f9d3 	bl	80090ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d06:	f000 fce1 	bl	80096cc <xTaskResumeAll>
 8008d0a:	1e03      	subs	r3, r0, #0
 8008d0c:	d18a      	bne.n	8008c24 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008d0e:	f001 fe77 	bl	800aa00 <vPortYield>
 8008d12:	e787      	b.n	8008c24 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	0018      	movs	r0, r3
 8008d18:	f000 f9c8 	bl	80090ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d1c:	f000 fcd6 	bl	80096cc <xTaskResumeAll>
 8008d20:	e780      	b.n	8008c24 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d22:	6a3b      	ldr	r3, [r7, #32]
 8008d24:	0018      	movs	r0, r3
 8008d26:	f000 f9c1 	bl	80090ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d2a:	f000 fccf 	bl	80096cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d30:	0018      	movs	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b00a      	add	sp, #40	; 0x28
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d38:	b590      	push	{r4, r7, lr}
 8008d3a:	b08b      	sub	sp, #44	; 0x2c
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <xQueueGenericSendFromISR+0x1c>
 8008d50:	b672      	cpsid	i
 8008d52:	e7fe      	b.n	8008d52 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <xQueueGenericSendFromISR+0x2a>
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <xQueueGenericSendFromISR+0x2e>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e000      	b.n	8008d68 <xQueueGenericSendFromISR+0x30>
 8008d66:	2300      	movs	r3, #0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <xQueueGenericSendFromISR+0x38>
 8008d6c:	b672      	cpsid	i
 8008d6e:	e7fe      	b.n	8008d6e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d103      	bne.n	8008d7e <xQueueGenericSendFromISR+0x46>
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <xQueueGenericSendFromISR+0x4a>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <xQueueGenericSendFromISR+0x4c>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <xQueueGenericSendFromISR+0x54>
 8008d88:	b672      	cpsid	i
 8008d8a:	e7fe      	b.n	8008d8a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d8c:	f001 fe72 	bl	800aa74 <ulSetInterruptMaskFromISR>
 8008d90:	0003      	movs	r3, r0
 8008d92:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d302      	bcc.n	8008da6 <xQueueGenericSendFromISR+0x6e>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d131      	bne.n	8008e0a <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008da6:	241b      	movs	r4, #27
 8008da8:	193b      	adds	r3, r7, r4
 8008daa:	6a3a      	ldr	r2, [r7, #32]
 8008dac:	2145      	movs	r1, #69	; 0x45
 8008dae:	5c52      	ldrb	r2, [r2, r1]
 8008db0:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f000 f8e3 	bl	8008f8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dc4:	193b      	adds	r3, r7, r4
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	b25b      	sxtb	r3, r3
 8008dca:	3301      	adds	r3, #1
 8008dcc:	d111      	bne.n	8008df2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d016      	beq.n	8008e04 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f000 fe5e 	bl	8009a9c <xTaskRemoveFromEventList>
 8008de0:	1e03      	subs	r3, r0, #0
 8008de2:	d00f      	beq.n	8008e04 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00c      	beq.n	8008e04 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e008      	b.n	8008e04 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008df2:	231b      	movs	r3, #27
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	b259      	sxtb	r1, r3
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	2245      	movs	r2, #69	; 0x45
 8008e02:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008e04:	2301      	movs	r3, #1
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8008e08:	e001      	b.n	8008e0e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	0018      	movs	r0, r3
 8008e12:	f001 fe35 	bl	800aa80 <vClearInterruptMaskFromISR>

	return xReturn;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b00b      	add	sp, #44	; 0x2c
 8008e1e:	bd90      	pop	{r4, r7, pc}

08008e20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <xQueueReceive+0x1e>
 8008e3a:	b672      	cpsid	i
 8008e3c:	e7fe      	b.n	8008e3c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d103      	bne.n	8008e4c <xQueueReceive+0x2c>
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <xQueueReceive+0x30>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <xQueueReceive+0x32>
 8008e50:	2300      	movs	r3, #0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <xQueueReceive+0x3a>
 8008e56:	b672      	cpsid	i
 8008e58:	e7fe      	b.n	8008e58 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e5a:	f000 ffb7 	bl	8009dcc <xTaskGetSchedulerState>
 8008e5e:	1e03      	subs	r3, r0, #0
 8008e60:	d102      	bne.n	8008e68 <xQueueReceive+0x48>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <xQueueReceive+0x4c>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <xQueueReceive+0x4e>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <xQueueReceive+0x56>
 8008e72:	b672      	cpsid	i
 8008e74:	e7fe      	b.n	8008e74 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e76:	f001 fdd3 	bl	800aa20 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01a      	beq.n	8008ebc <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	0011      	movs	r1, r2
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f000 f8e7 	bl	8009060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	1e5a      	subs	r2, r3, #1
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	0018      	movs	r0, r3
 8008ea8:	f000 fdf8 	bl	8009a9c <xTaskRemoveFromEventList>
 8008eac:	1e03      	subs	r3, r0, #0
 8008eae:	d001      	beq.n	8008eb4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008eb0:	f001 fda6 	bl	800aa00 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eb4:	f001 fdc6 	bl	800aa44 <vPortExitCritical>
				return pdPASS;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e062      	b.n	8008f82 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ec2:	f001 fdbf 	bl	800aa44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e05b      	b.n	8008f82 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ed0:	2314      	movs	r3, #20
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f000 fe3d 	bl	8009b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ede:	f001 fdb1 	bl	800aa44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ee2:	f000 fbe7 	bl	80096b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee6:	f001 fd9b 	bl	800aa20 <vPortEnterCritical>
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	2244      	movs	r2, #68	; 0x44
 8008eee:	5c9b      	ldrb	r3, [r3, r2]
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	d103      	bne.n	8008efe <xQueueReceive+0xde>
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	2244      	movs	r2, #68	; 0x44
 8008efa:	2100      	movs	r1, #0
 8008efc:	5499      	strb	r1, [r3, r2]
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	2245      	movs	r2, #69	; 0x45
 8008f02:	5c9b      	ldrb	r3, [r3, r2]
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	3301      	adds	r3, #1
 8008f08:	d103      	bne.n	8008f12 <xQueueReceive+0xf2>
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	2245      	movs	r2, #69	; 0x45
 8008f0e:	2100      	movs	r1, #0
 8008f10:	5499      	strb	r1, [r3, r2]
 8008f12:	f001 fd97 	bl	800aa44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f16:	1d3a      	adds	r2, r7, #4
 8008f18:	2314      	movs	r3, #20
 8008f1a:	18fb      	adds	r3, r7, r3
 8008f1c:	0011      	movs	r1, r2
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f000 fe2c 	bl	8009b7c <xTaskCheckForTimeOut>
 8008f24:	1e03      	subs	r3, r0, #0
 8008f26:	d11e      	bne.n	8008f66 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f000 f91c 	bl	8009168 <prvIsQueueEmpty>
 8008f30:	1e03      	subs	r3, r0, #0
 8008f32:	d011      	beq.n	8008f58 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	3324      	adds	r3, #36	; 0x24
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	0011      	movs	r1, r2
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 fd69 	bl	8009a14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	0018      	movs	r0, r3
 8008f46:	f000 f8b1 	bl	80090ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f4a:	f000 fbbf 	bl	80096cc <xTaskResumeAll>
 8008f4e:	1e03      	subs	r3, r0, #0
 8008f50:	d191      	bne.n	8008e76 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008f52:	f001 fd55 	bl	800aa00 <vPortYield>
 8008f56:	e78e      	b.n	8008e76 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f000 f8a6 	bl	80090ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f60:	f000 fbb4 	bl	80096cc <xTaskResumeAll>
 8008f64:	e787      	b.n	8008e76 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f000 f89f 	bl	80090ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f6e:	f000 fbad 	bl	80096cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	0018      	movs	r0, r3
 8008f76:	f000 f8f7 	bl	8009168 <prvIsQueueEmpty>
 8008f7a:	1e03      	subs	r3, r0, #0
 8008f7c:	d100      	bne.n	8008f80 <xQueueReceive+0x160>
 8008f7e:	e77a      	b.n	8008e76 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f82:	0018      	movs	r0, r3
 8008f84:	46bd      	mov	sp, r7
 8008f86:	b00a      	add	sp, #40	; 0x28
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b086      	sub	sp, #24
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f96:	2300      	movs	r3, #0
 8008f98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10e      	bne.n	8008fc6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d14e      	bne.n	800904e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f000 ff25 	bl	8009e04 <xTaskPriorityDisinherit>
 8008fba:	0003      	movs	r3, r0
 8008fbc:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	609a      	str	r2, [r3, #8]
 8008fc4:	e043      	b.n	800904e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d119      	bne.n	8009000 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6858      	ldr	r0, [r3, #4]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	0019      	movs	r1, r3
 8008fd8:	f002 f89b 	bl	800b112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe4:	18d2      	adds	r2, r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d32b      	bcc.n	800904e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]
 8008ffe:	e026      	b.n	800904e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68d8      	ldr	r0, [r3, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	0019      	movs	r1, r3
 800900c:	f002 f881 	bl	800b112 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009018:	425b      	negs	r3, r3
 800901a:	18d2      	adds	r2, r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	68da      	ldr	r2, [r3, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d207      	bcs.n	800903c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	425b      	negs	r3, r3
 8009036:	18d2      	adds	r2, r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d105      	bne.n	800904e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	3b01      	subs	r3, #1
 800904c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009056:	697b      	ldr	r3, [r7, #20]
}
 8009058:	0018      	movs	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b006      	add	sp, #24
 800905e:	bd80      	pop	{r7, pc}

08009060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	18d2      	adds	r2, r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	429a      	cmp	r2, r3
 800908a:	d303      	bcc.n	8009094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68d9      	ldr	r1, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	0018      	movs	r0, r3
 80090a0:	f002 f837 	bl	800b112 <memcpy>
	}
}
 80090a4:	46c0      	nop			; (mov r8, r8)
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b002      	add	sp, #8
 80090aa:	bd80      	pop	{r7, pc}

080090ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090b4:	f001 fcb4 	bl	800aa20 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090b8:	230f      	movs	r3, #15
 80090ba:	18fb      	adds	r3, r7, r3
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	2145      	movs	r1, #69	; 0x45
 80090c0:	5c52      	ldrb	r2, [r2, r1]
 80090c2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090c4:	e013      	b.n	80090ee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d016      	beq.n	80090fc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	0018      	movs	r0, r3
 80090d4:	f000 fce2 	bl	8009a9c <xTaskRemoveFromEventList>
 80090d8:	1e03      	subs	r3, r0, #0
 80090da:	d001      	beq.n	80090e0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090dc:	f000 fd9e 	bl	8009c1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090e0:	210f      	movs	r1, #15
 80090e2:	187b      	adds	r3, r7, r1
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	187b      	adds	r3, r7, r1
 80090ec:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090ee:	230f      	movs	r3, #15
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b25b      	sxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dce5      	bgt.n	80090c6 <prvUnlockQueue+0x1a>
 80090fa:	e000      	b.n	80090fe <prvUnlockQueue+0x52>
					break;
 80090fc:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2245      	movs	r2, #69	; 0x45
 8009102:	21ff      	movs	r1, #255	; 0xff
 8009104:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009106:	f001 fc9d 	bl	800aa44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800910a:	f001 fc89 	bl	800aa20 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800910e:	230e      	movs	r3, #14
 8009110:	18fb      	adds	r3, r7, r3
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	2144      	movs	r1, #68	; 0x44
 8009116:	5c52      	ldrb	r2, [r2, r1]
 8009118:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800911a:	e013      	b.n	8009144 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d016      	beq.n	8009152 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3310      	adds	r3, #16
 8009128:	0018      	movs	r0, r3
 800912a:	f000 fcb7 	bl	8009a9c <xTaskRemoveFromEventList>
 800912e:	1e03      	subs	r3, r0, #0
 8009130:	d001      	beq.n	8009136 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8009132:	f000 fd73 	bl	8009c1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009136:	210e      	movs	r1, #14
 8009138:	187b      	adds	r3, r7, r1
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	3b01      	subs	r3, #1
 800913e:	b2da      	uxtb	r2, r3
 8009140:	187b      	adds	r3, r7, r1
 8009142:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009144:	230e      	movs	r3, #14
 8009146:	18fb      	adds	r3, r7, r3
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	b25b      	sxtb	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	dce5      	bgt.n	800911c <prvUnlockQueue+0x70>
 8009150:	e000      	b.n	8009154 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8009152:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2244      	movs	r2, #68	; 0x44
 8009158:	21ff      	movs	r1, #255	; 0xff
 800915a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800915c:	f001 fc72 	bl	800aa44 <vPortExitCritical>
}
 8009160:	46c0      	nop			; (mov r8, r8)
 8009162:	46bd      	mov	sp, r7
 8009164:	b004      	add	sp, #16
 8009166:	bd80      	pop	{r7, pc}

08009168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009170:	f001 fc56 	bl	800aa20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	2b00      	cmp	r3, #0
 800917a:	d102      	bne.n	8009182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	e001      	b.n	8009186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009186:	f001 fc5d 	bl	800aa44 <vPortExitCritical>

	return xReturn;
 800918a:	68fb      	ldr	r3, [r7, #12]
}
 800918c:	0018      	movs	r0, r3
 800918e:	46bd      	mov	sp, r7
 8009190:	b004      	add	sp, #16
 8009192:	bd80      	pop	{r7, pc}

08009194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800919c:	f001 fc40 	bl	800aa20 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d102      	bne.n	80091b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091ac:	2301      	movs	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e001      	b.n	80091b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091b6:	f001 fc45 	bl	800aa44 <vPortExitCritical>

	return xReturn;
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	0018      	movs	r0, r3
 80091be:	46bd      	mov	sp, r7
 80091c0:	b004      	add	sp, #16
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091ce:	2300      	movs	r3, #0
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	e015      	b.n	8009200 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091d4:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <vQueueAddToRegistry+0x4c>)
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	00d2      	lsls	r2, r2, #3
 80091da:	58d3      	ldr	r3, [r2, r3]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10c      	bne.n	80091fa <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091e0:	4b0b      	ldr	r3, [pc, #44]	; (8009210 <vQueueAddToRegistry+0x4c>)
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	00d2      	lsls	r2, r2, #3
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091ea:	4a09      	ldr	r2, [pc, #36]	; (8009210 <vQueueAddToRegistry+0x4c>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	18d3      	adds	r3, r2, r3
 80091f2:	3304      	adds	r3, #4
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091f8:	e006      	b.n	8009208 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3301      	adds	r3, #1
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b07      	cmp	r3, #7
 8009204:	d9e6      	bls.n	80091d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009206:	46c0      	nop			; (mov r8, r8)
 8009208:	46c0      	nop			; (mov r8, r8)
 800920a:	46bd      	mov	sp, r7
 800920c:	b004      	add	sp, #16
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000ef4 	.word	0x20000ef4

08009214 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009224:	f001 fbfc 	bl	800aa20 <vPortEnterCritical>
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2244      	movs	r2, #68	; 0x44
 800922c:	5c9b      	ldrb	r3, [r3, r2]
 800922e:	b25b      	sxtb	r3, r3
 8009230:	3301      	adds	r3, #1
 8009232:	d103      	bne.n	800923c <vQueueWaitForMessageRestricted+0x28>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2244      	movs	r2, #68	; 0x44
 8009238:	2100      	movs	r1, #0
 800923a:	5499      	strb	r1, [r3, r2]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2245      	movs	r2, #69	; 0x45
 8009240:	5c9b      	ldrb	r3, [r3, r2]
 8009242:	b25b      	sxtb	r3, r3
 8009244:	3301      	adds	r3, #1
 8009246:	d103      	bne.n	8009250 <vQueueWaitForMessageRestricted+0x3c>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	2245      	movs	r2, #69	; 0x45
 800924c:	2100      	movs	r1, #0
 800924e:	5499      	strb	r1, [r3, r2]
 8009250:	f001 fbf8 	bl	800aa44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	3324      	adds	r3, #36	; 0x24
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	68b9      	ldr	r1, [r7, #8]
 8009264:	0018      	movs	r0, r3
 8009266:	f000 fbf3 	bl	8009a50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	0018      	movs	r0, r3
 800926e:	f7ff ff1d 	bl	80090ac <prvUnlockQueue>
	}
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	46bd      	mov	sp, r7
 8009276:	b006      	add	sp, #24
 8009278:	bd80      	pop	{r7, pc}

0800927a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800927a:	b590      	push	{r4, r7, lr}
 800927c:	b08d      	sub	sp, #52	; 0x34
 800927e:	af04      	add	r7, sp, #16
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
 8009286:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <xTaskCreateStatic+0x18>
 800928e:	b672      	cpsid	i
 8009290:	e7fe      	b.n	8009290 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <xTaskCreateStatic+0x22>
 8009298:	b672      	cpsid	i
 800929a:	e7fe      	b.n	800929a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800929c:	23bc      	movs	r3, #188	; 0xbc
 800929e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2bbc      	cmp	r3, #188	; 0xbc
 80092a4:	d001      	beq.n	80092aa <xTaskCreateStatic+0x30>
 80092a6:	b672      	cpsid	i
 80092a8:	e7fe      	b.n	80092a8 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092aa:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d020      	beq.n	80092f4 <xTaskCreateStatic+0x7a>
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01d      	beq.n	80092f4 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	22b9      	movs	r2, #185	; 0xb9
 80092c6:	2102      	movs	r1, #2
 80092c8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092ca:	683c      	ldr	r4, [r7, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	2300      	movs	r3, #0
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	2318      	movs	r3, #24
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	0023      	movs	r3, r4
 80092e6:	f000 f859 	bl	800939c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	0018      	movs	r0, r3
 80092ee:	f000 f8f5 	bl	80094dc <prvAddNewTaskToReadyList>
 80092f2:	e001      	b.n	80092f8 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092f8:	69bb      	ldr	r3, [r7, #24]
	}
 80092fa:	0018      	movs	r0, r3
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b009      	add	sp, #36	; 0x24
 8009300:	bd90      	pop	{r4, r7, pc}

08009302 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009302:	b590      	push	{r4, r7, lr}
 8009304:	b08d      	sub	sp, #52	; 0x34
 8009306:	af04      	add	r7, sp, #16
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	603b      	str	r3, [r7, #0]
 800930e:	1dbb      	adds	r3, r7, #6
 8009310:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009312:	1dbb      	adds	r3, r7, #6
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	0018      	movs	r0, r3
 800931a:	f001 fc19 	bl	800ab50 <pvPortMalloc>
 800931e:	0003      	movs	r3, r0
 8009320:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d010      	beq.n	800934a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009328:	20bc      	movs	r0, #188	; 0xbc
 800932a:	f001 fc11 	bl	800ab50 <pvPortMalloc>
 800932e:	0003      	movs	r3, r0
 8009330:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d003      	beq.n	8009340 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	631a      	str	r2, [r3, #48]	; 0x30
 800933e:	e006      	b.n	800934e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	0018      	movs	r0, r3
 8009344:	f001 fcb0 	bl	800aca8 <vPortFree>
 8009348:	e001      	b.n	800934e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01a      	beq.n	800938a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	22b9      	movs	r2, #185	; 0xb9
 8009358:	2100      	movs	r1, #0
 800935a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800935c:	1dbb      	adds	r3, r7, #6
 800935e:	881a      	ldrh	r2, [r3, #0]
 8009360:	683c      	ldr	r4, [r7, #0]
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	2300      	movs	r3, #0
 8009368:	9303      	str	r3, [sp, #12]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	9302      	str	r3, [sp, #8]
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	0023      	movs	r3, r4
 8009378:	f000 f810 	bl	800939c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	0018      	movs	r0, r3
 8009380:	f000 f8ac 	bl	80094dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009384:	2301      	movs	r3, #1
 8009386:	61bb      	str	r3, [r7, #24]
 8009388:	e002      	b.n	8009390 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800938a:	2301      	movs	r3, #1
 800938c:	425b      	negs	r3, r3
 800938e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009390:	69bb      	ldr	r3, [r7, #24]
	}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	b009      	add	sp, #36	; 0x24
 8009398:	bd90      	pop	{r4, r7, pc}
	...

0800939c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	001a      	movs	r2, r3
 80093b4:	21a5      	movs	r1, #165	; 0xa5
 80093b6:	f001 feb5 	bl	800b124 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4942      	ldr	r1, [pc, #264]	; (80094cc <prvInitialiseNewTask+0x130>)
 80093c2:	468c      	mov	ip, r1
 80093c4:	4463      	add	r3, ip
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	18d3      	adds	r3, r2, r3
 80093ca:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2207      	movs	r2, #7
 80093d0:	4393      	bics	r3, r2
 80093d2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	2207      	movs	r2, #7
 80093d8:	4013      	ands	r3, r2
 80093da:	d001      	beq.n	80093e0 <prvInitialiseNewTask+0x44>
 80093dc:	b672      	cpsid	i
 80093de:	e7fe      	b.n	80093de <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d020      	beq.n	8009428 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e013      	b.n	8009414 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	18d3      	adds	r3, r2, r3
 80093f2:	7818      	ldrb	r0, [r3, #0]
 80093f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093f6:	2134      	movs	r1, #52	; 0x34
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	18d3      	adds	r3, r2, r3
 80093fc:	185b      	adds	r3, r3, r1
 80093fe:	1c02      	adds	r2, r0, #0
 8009400:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	18d3      	adds	r3, r2, r3
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d006      	beq.n	800941c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	3301      	adds	r3, #1
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2b0f      	cmp	r3, #15
 8009418:	d9e8      	bls.n	80093ec <prvInitialiseNewTask+0x50>
 800941a:	e000      	b.n	800941e <prvInitialiseNewTask+0x82>
			{
				break;
 800941c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	2243      	movs	r2, #67	; 0x43
 8009422:	2100      	movs	r1, #0
 8009424:	5499      	strb	r1, [r3, r2]
 8009426:	e003      	b.n	8009430 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2234      	movs	r2, #52	; 0x34
 800942c:	2100      	movs	r1, #0
 800942e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	2b37      	cmp	r3, #55	; 0x37
 8009434:	d901      	bls.n	800943a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009436:	2337      	movs	r3, #55	; 0x37
 8009438:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	6a3a      	ldr	r2, [r7, #32]
 800943e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	6a3a      	ldr	r2, [r7, #32]
 8009444:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	2200      	movs	r2, #0
 800944a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	3304      	adds	r3, #4
 8009450:	0018      	movs	r0, r3
 8009452:	f7ff fa5b 	bl	800890c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	3318      	adds	r3, #24
 800945a:	0018      	movs	r0, r3
 800945c:	f7ff fa56 	bl	800890c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009464:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	2238      	movs	r2, #56	; 0x38
 800946a:	1ad2      	subs	r2, r2, r3
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009474:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	22b4      	movs	r2, #180	; 0xb4
 800947a:	2100      	movs	r1, #0
 800947c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	22b8      	movs	r2, #184	; 0xb8
 8009482:	2100      	movs	r1, #0
 8009484:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	3354      	adds	r3, #84	; 0x54
 800948a:	2260      	movs	r2, #96	; 0x60
 800948c:	2100      	movs	r1, #0
 800948e:	0018      	movs	r0, r3
 8009490:	f001 fe48 	bl	800b124 <memset>
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	4a0e      	ldr	r2, [pc, #56]	; (80094d0 <prvInitialiseNewTask+0x134>)
 8009498:	659a      	str	r2, [r3, #88]	; 0x58
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <prvInitialiseNewTask+0x138>)
 800949e:	65da      	str	r2, [r3, #92]	; 0x5c
 80094a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a2:	4a0d      	ldr	r2, [pc, #52]	; (80094d8 <prvInitialiseNewTask+0x13c>)
 80094a4:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	68f9      	ldr	r1, [r7, #12]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	0018      	movs	r0, r3
 80094ae:	f001 fa19 	bl	800a8e4 <pxPortInitialiseStack>
 80094b2:	0002      	movs	r2, r0
 80094b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094c4:	46c0      	nop			; (mov r8, r8)
 80094c6:	46bd      	mov	sp, r7
 80094c8:	b006      	add	sp, #24
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	3fffffff 	.word	0x3fffffff
 80094d0:	0800e2e4 	.word	0x0800e2e4
 80094d4:	0800e304 	.word	0x0800e304
 80094d8:	0800e2c4 	.word	0x0800e2c4

080094dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094e4:	f001 fa9c 	bl	800aa20 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094e8:	4b2a      	ldr	r3, [pc, #168]	; (8009594 <prvAddNewTaskToReadyList+0xb8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	4b29      	ldr	r3, [pc, #164]	; (8009594 <prvAddNewTaskToReadyList+0xb8>)
 80094f0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80094f2:	4b29      	ldr	r3, [pc, #164]	; (8009598 <prvAddNewTaskToReadyList+0xbc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d109      	bne.n	800950e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094fa:	4b27      	ldr	r3, [pc, #156]	; (8009598 <prvAddNewTaskToReadyList+0xbc>)
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009500:	4b24      	ldr	r3, [pc, #144]	; (8009594 <prvAddNewTaskToReadyList+0xb8>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d110      	bne.n	800952a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009508:	f000 fba2 	bl	8009c50 <prvInitialiseTaskLists>
 800950c:	e00d      	b.n	800952a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800950e:	4b23      	ldr	r3, [pc, #140]	; (800959c <prvAddNewTaskToReadyList+0xc0>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009516:	4b20      	ldr	r3, [pc, #128]	; (8009598 <prvAddNewTaskToReadyList+0xbc>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	429a      	cmp	r2, r3
 8009522:	d802      	bhi.n	800952a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009524:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <prvAddNewTaskToReadyList+0xbc>)
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800952a:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <prvAddNewTaskToReadyList+0xc4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	4b1b      	ldr	r3, [pc, #108]	; (80095a0 <prvAddNewTaskToReadyList+0xc4>)
 8009532:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <prvAddNewTaskToReadyList+0xc4>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009540:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <prvAddNewTaskToReadyList+0xc8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	429a      	cmp	r2, r3
 8009546:	d903      	bls.n	8009550 <prvAddNewTaskToReadyList+0x74>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <prvAddNewTaskToReadyList+0xc8>)
 800954e:	601a      	str	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	0013      	movs	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	189b      	adds	r3, r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4a12      	ldr	r2, [pc, #72]	; (80095a8 <prvAddNewTaskToReadyList+0xcc>)
 800955e:	189a      	adds	r2, r3, r2
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	0019      	movs	r1, r3
 8009566:	0010      	movs	r0, r2
 8009568:	f7ff f9db 	bl	8008922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800956c:	f001 fa6a 	bl	800aa44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009570:	4b0a      	ldr	r3, [pc, #40]	; (800959c <prvAddNewTaskToReadyList+0xc0>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d008      	beq.n	800958a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <prvAddNewTaskToReadyList+0xbc>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	429a      	cmp	r2, r3
 8009584:	d201      	bcs.n	800958a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009586:	f001 fa3b 	bl	800aa00 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	46bd      	mov	sp, r7
 800958e:	b002      	add	sp, #8
 8009590:	bd80      	pop	{r7, pc}
 8009592:	46c0      	nop			; (mov r8, r8)
 8009594:	20001408 	.word	0x20001408
 8009598:	20000f34 	.word	0x20000f34
 800959c:	20001414 	.word	0x20001414
 80095a0:	20001424 	.word	0x20001424
 80095a4:	20001410 	.word	0x20001410
 80095a8:	20000f38 	.word	0x20000f38

080095ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d010      	beq.n	80095e0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095be:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <vTaskDelay+0x48>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <vTaskDelay+0x1e>
 80095c6:	b672      	cpsid	i
 80095c8:	e7fe      	b.n	80095c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80095ca:	f000 f873 	bl	80096b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2100      	movs	r1, #0
 80095d2:	0018      	movs	r0, r3
 80095d4:	f000 fe20 	bl	800a218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095d8:	f000 f878 	bl	80096cc <xTaskResumeAll>
 80095dc:	0003      	movs	r3, r0
 80095de:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80095e6:	f001 fa0b 	bl	800aa00 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	46bd      	mov	sp, r7
 80095ee:	b004      	add	sp, #16
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	20001430 	.word	0x20001430

080095f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b089      	sub	sp, #36	; 0x24
 80095fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009606:	003a      	movs	r2, r7
 8009608:	1d39      	adds	r1, r7, #4
 800960a:	2308      	movs	r3, #8
 800960c:	18fb      	adds	r3, r7, r3
 800960e:	0018      	movs	r0, r3
 8009610:	f7ff f92e 	bl	8008870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009614:	683c      	ldr	r4, [r7, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	491e      	ldr	r1, [pc, #120]	; (8009694 <vTaskStartScheduler+0x9c>)
 800961c:	481e      	ldr	r0, [pc, #120]	; (8009698 <vTaskStartScheduler+0xa0>)
 800961e:	9202      	str	r2, [sp, #8]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	2300      	movs	r3, #0
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	2300      	movs	r3, #0
 8009628:	0022      	movs	r2, r4
 800962a:	f7ff fe26 	bl	800927a <xTaskCreateStatic>
 800962e:	0002      	movs	r2, r0
 8009630:	4b1a      	ldr	r3, [pc, #104]	; (800969c <vTaskStartScheduler+0xa4>)
 8009632:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009634:	4b19      	ldr	r3, [pc, #100]	; (800969c <vTaskStartScheduler+0xa4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800963c:	2301      	movs	r3, #1
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e001      	b.n	8009646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d103      	bne.n	8009654 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800964c:	f000 fe38 	bl	800a2c0 <xTimerCreateTimerTask>
 8009650:	0003      	movs	r3, r0
 8009652:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d113      	bne.n	8009682 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800965a:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800965c:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <vTaskStartScheduler+0xa8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3354      	adds	r3, #84	; 0x54
 8009662:	001a      	movs	r2, r3
 8009664:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <vTaskStartScheduler+0xac>)
 8009666:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009668:	4b0f      	ldr	r3, [pc, #60]	; (80096a8 <vTaskStartScheduler+0xb0>)
 800966a:	2201      	movs	r2, #1
 800966c:	4252      	negs	r2, r2
 800966e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009670:	4b0e      	ldr	r3, [pc, #56]	; (80096ac <vTaskStartScheduler+0xb4>)
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009676:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <vTaskStartScheduler+0xb8>)
 8009678:	2200      	movs	r2, #0
 800967a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800967c:	f001 f99c 	bl	800a9b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009680:	e004      	b.n	800968c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3301      	adds	r3, #1
 8009686:	d101      	bne.n	800968c <vTaskStartScheduler+0x94>
 8009688:	b672      	cpsid	i
 800968a:	e7fe      	b.n	800968a <vTaskStartScheduler+0x92>
}
 800968c:	46c0      	nop			; (mov r8, r8)
 800968e:	46bd      	mov	sp, r7
 8009690:	b005      	add	sp, #20
 8009692:	bd90      	pop	{r4, r7, pc}
 8009694:	0800dfec 	.word	0x0800dfec
 8009698:	08009c31 	.word	0x08009c31
 800969c:	2000142c 	.word	0x2000142c
 80096a0:	20000f34 	.word	0x20000f34
 80096a4:	20000014 	.word	0x20000014
 80096a8:	20001428 	.word	0x20001428
 80096ac:	20001414 	.word	0x20001414
 80096b0:	2000140c 	.word	0x2000140c

080096b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096b8:	4b03      	ldr	r3, [pc, #12]	; (80096c8 <vTaskSuspendAll+0x14>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	4b02      	ldr	r3, [pc, #8]	; (80096c8 <vTaskSuspendAll+0x14>)
 80096c0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20001430 	.word	0x20001430

080096cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096da:	4b3a      	ldr	r3, [pc, #232]	; (80097c4 <xTaskResumeAll+0xf8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <xTaskResumeAll+0x1a>
 80096e2:	b672      	cpsid	i
 80096e4:	e7fe      	b.n	80096e4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096e6:	f001 f99b 	bl	800aa20 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096ea:	4b36      	ldr	r3, [pc, #216]	; (80097c4 <xTaskResumeAll+0xf8>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	1e5a      	subs	r2, r3, #1
 80096f0:	4b34      	ldr	r3, [pc, #208]	; (80097c4 <xTaskResumeAll+0xf8>)
 80096f2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096f4:	4b33      	ldr	r3, [pc, #204]	; (80097c4 <xTaskResumeAll+0xf8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d15b      	bne.n	80097b4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096fc:	4b32      	ldr	r3, [pc, #200]	; (80097c8 <xTaskResumeAll+0xfc>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d057      	beq.n	80097b4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009704:	e02f      	b.n	8009766 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009706:	4b31      	ldr	r3, [pc, #196]	; (80097cc <xTaskResumeAll+0x100>)
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3318      	adds	r3, #24
 8009712:	0018      	movs	r0, r3
 8009714:	f7ff f95d 	bl	80089d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3304      	adds	r3, #4
 800971c:	0018      	movs	r0, r3
 800971e:	f7ff f958 	bl	80089d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009726:	4b2a      	ldr	r3, [pc, #168]	; (80097d0 <xTaskResumeAll+0x104>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d903      	bls.n	8009736 <xTaskResumeAll+0x6a>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009732:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <xTaskResumeAll+0x104>)
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	0013      	movs	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	189b      	adds	r3, r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4a24      	ldr	r2, [pc, #144]	; (80097d4 <xTaskResumeAll+0x108>)
 8009744:	189a      	adds	r2, r3, r2
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3304      	adds	r3, #4
 800974a:	0019      	movs	r1, r3
 800974c:	0010      	movs	r0, r2
 800974e:	f7ff f8e8 	bl	8008922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	4b20      	ldr	r3, [pc, #128]	; (80097d8 <xTaskResumeAll+0x10c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	429a      	cmp	r2, r3
 800975e:	d302      	bcc.n	8009766 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8009760:	4b1e      	ldr	r3, [pc, #120]	; (80097dc <xTaskResumeAll+0x110>)
 8009762:	2201      	movs	r2, #1
 8009764:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009766:	4b19      	ldr	r3, [pc, #100]	; (80097cc <xTaskResumeAll+0x100>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1cb      	bne.n	8009706 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009774:	f000 fb0c 	bl	8009d90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009778:	4b19      	ldr	r3, [pc, #100]	; (80097e0 <xTaskResumeAll+0x114>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00f      	beq.n	80097a4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009784:	f000 f83c 	bl	8009800 <xTaskIncrementTick>
 8009788:	1e03      	subs	r3, r0, #0
 800978a:	d002      	beq.n	8009792 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800978c:	4b13      	ldr	r3, [pc, #76]	; (80097dc <xTaskResumeAll+0x110>)
 800978e:	2201      	movs	r2, #1
 8009790:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3b01      	subs	r3, #1
 8009796:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f2      	bne.n	8009784 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800979e:	4b10      	ldr	r3, [pc, #64]	; (80097e0 <xTaskResumeAll+0x114>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097a4:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <xTaskResumeAll+0x110>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097b0:	f001 f926 	bl	800aa00 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097b4:	f001 f946 	bl	800aa44 <vPortExitCritical>

	return xAlreadyYielded;
 80097b8:	68bb      	ldr	r3, [r7, #8]
}
 80097ba:	0018      	movs	r0, r3
 80097bc:	46bd      	mov	sp, r7
 80097be:	b004      	add	sp, #16
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	46c0      	nop			; (mov r8, r8)
 80097c4:	20001430 	.word	0x20001430
 80097c8:	20001408 	.word	0x20001408
 80097cc:	200013c8 	.word	0x200013c8
 80097d0:	20001410 	.word	0x20001410
 80097d4:	20000f38 	.word	0x20000f38
 80097d8:	20000f34 	.word	0x20000f34
 80097dc:	2000141c 	.word	0x2000141c
 80097e0:	20001418 	.word	0x20001418

080097e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097ea:	4b04      	ldr	r3, [pc, #16]	; (80097fc <xTaskGetTickCount+0x18>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097f0:	687b      	ldr	r3, [r7, #4]
}
 80097f2:	0018      	movs	r0, r3
 80097f4:	46bd      	mov	sp, r7
 80097f6:	b002      	add	sp, #8
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	2000140c 	.word	0x2000140c

08009800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980a:	4b4a      	ldr	r3, [pc, #296]	; (8009934 <xTaskIncrementTick+0x134>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d000      	beq.n	8009814 <xTaskIncrementTick+0x14>
 8009812:	e084      	b.n	800991e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009814:	4b48      	ldr	r3, [pc, #288]	; (8009938 <xTaskIncrementTick+0x138>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800981c:	4b46      	ldr	r3, [pc, #280]	; (8009938 <xTaskIncrementTick+0x138>)
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d117      	bne.n	8009858 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8009828:	4b44      	ldr	r3, [pc, #272]	; (800993c <xTaskIncrementTick+0x13c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <xTaskIncrementTick+0x36>
 8009832:	b672      	cpsid	i
 8009834:	e7fe      	b.n	8009834 <xTaskIncrementTick+0x34>
 8009836:	4b41      	ldr	r3, [pc, #260]	; (800993c <xTaskIncrementTick+0x13c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	4b40      	ldr	r3, [pc, #256]	; (8009940 <xTaskIncrementTick+0x140>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	4b3e      	ldr	r3, [pc, #248]	; (800993c <xTaskIncrementTick+0x13c>)
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	4b3e      	ldr	r3, [pc, #248]	; (8009940 <xTaskIncrementTick+0x140>)
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	4b3e      	ldr	r3, [pc, #248]	; (8009944 <xTaskIncrementTick+0x144>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	4b3c      	ldr	r3, [pc, #240]	; (8009944 <xTaskIncrementTick+0x144>)
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	f000 fa9c 	bl	8009d90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009858:	4b3b      	ldr	r3, [pc, #236]	; (8009948 <xTaskIncrementTick+0x148>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	429a      	cmp	r2, r3
 8009860:	d349      	bcc.n	80098f6 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009862:	4b36      	ldr	r3, [pc, #216]	; (800993c <xTaskIncrementTick+0x13c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d104      	bne.n	8009876 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800986c:	4b36      	ldr	r3, [pc, #216]	; (8009948 <xTaskIncrementTick+0x148>)
 800986e:	2201      	movs	r2, #1
 8009870:	4252      	negs	r2, r2
 8009872:	601a      	str	r2, [r3, #0]
					break;
 8009874:	e03f      	b.n	80098f6 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009876:	4b31      	ldr	r3, [pc, #196]	; (800993c <xTaskIncrementTick+0x13c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	d203      	bcs.n	8009896 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <xTaskIncrementTick+0x148>)
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009894:	e02f      	b.n	80098f6 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	3304      	adds	r3, #4
 800989a:	0018      	movs	r0, r3
 800989c:	f7ff f899 	bl	80089d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	3318      	adds	r3, #24
 80098ac:	0018      	movs	r0, r3
 80098ae:	f7ff f890 	bl	80089d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b6:	4b25      	ldr	r3, [pc, #148]	; (800994c <xTaskIncrementTick+0x14c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d903      	bls.n	80098c6 <xTaskIncrementTick+0xc6>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c2:	4b22      	ldr	r3, [pc, #136]	; (800994c <xTaskIncrementTick+0x14c>)
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	0013      	movs	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	189b      	adds	r3, r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4a1f      	ldr	r2, [pc, #124]	; (8009950 <xTaskIncrementTick+0x150>)
 80098d4:	189a      	adds	r2, r3, r2
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	3304      	adds	r3, #4
 80098da:	0019      	movs	r1, r3
 80098dc:	0010      	movs	r0, r2
 80098de:	f7ff f820 	bl	8008922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e6:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <xTaskIncrementTick+0x154>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d3b8      	bcc.n	8009862 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098f4:	e7b5      	b.n	8009862 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098f6:	4b17      	ldr	r3, [pc, #92]	; (8009954 <xTaskIncrementTick+0x154>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098fc:	4914      	ldr	r1, [pc, #80]	; (8009950 <xTaskIncrementTick+0x150>)
 80098fe:	0013      	movs	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	189b      	adds	r3, r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	585b      	ldr	r3, [r3, r1]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d901      	bls.n	8009910 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009910:	4b11      	ldr	r3, [pc, #68]	; (8009958 <xTaskIncrementTick+0x158>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e004      	b.n	8009928 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800991e:	4b0f      	ldr	r3, [pc, #60]	; (800995c <xTaskIncrementTick+0x15c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <xTaskIncrementTick+0x15c>)
 8009926:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009928:	697b      	ldr	r3, [r7, #20]
}
 800992a:	0018      	movs	r0, r3
 800992c:	46bd      	mov	sp, r7
 800992e:	b006      	add	sp, #24
 8009930:	bd80      	pop	{r7, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	20001430 	.word	0x20001430
 8009938:	2000140c 	.word	0x2000140c
 800993c:	200013c0 	.word	0x200013c0
 8009940:	200013c4 	.word	0x200013c4
 8009944:	20001420 	.word	0x20001420
 8009948:	20001428 	.word	0x20001428
 800994c:	20001410 	.word	0x20001410
 8009950:	20000f38 	.word	0x20000f38
 8009954:	20000f34 	.word	0x20000f34
 8009958:	2000141c 	.word	0x2000141c
 800995c:	20001418 	.word	0x20001418

08009960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009966:	4b25      	ldr	r3, [pc, #148]	; (80099fc <vTaskSwitchContext+0x9c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800996e:	4b24      	ldr	r3, [pc, #144]	; (8009a00 <vTaskSwitchContext+0xa0>)
 8009970:	2201      	movs	r2, #1
 8009972:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009974:	e03d      	b.n	80099f2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8009976:	4b22      	ldr	r3, [pc, #136]	; (8009a00 <vTaskSwitchContext+0xa0>)
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800997c:	4b21      	ldr	r3, [pc, #132]	; (8009a04 <vTaskSwitchContext+0xa4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	607b      	str	r3, [r7, #4]
 8009982:	e007      	b.n	8009994 <vTaskSwitchContext+0x34>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <vTaskSwitchContext+0x2e>
 800998a:	b672      	cpsid	i
 800998c:	e7fe      	b.n	800998c <vTaskSwitchContext+0x2c>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3b01      	subs	r3, #1
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	491c      	ldr	r1, [pc, #112]	; (8009a08 <vTaskSwitchContext+0xa8>)
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	0013      	movs	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	189b      	adds	r3, r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	585b      	ldr	r3, [r3, r1]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0ee      	beq.n	8009984 <vTaskSwitchContext+0x24>
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	0013      	movs	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	189b      	adds	r3, r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <vTaskSwitchContext+0xa8>)
 80099b2:	189b      	adds	r3, r3, r2
 80099b4:	603b      	str	r3, [r7, #0]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	605a      	str	r2, [r3, #4]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	3308      	adds	r3, #8
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d104      	bne.n	80099d6 <vTaskSwitchContext+0x76>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	605a      	str	r2, [r3, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <vTaskSwitchContext+0xac>)
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	4b08      	ldr	r3, [pc, #32]	; (8009a04 <vTaskSwitchContext+0xa4>)
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <vTaskSwitchContext+0xac>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3354      	adds	r3, #84	; 0x54
 80099ec:	001a      	movs	r2, r3
 80099ee:	4b08      	ldr	r3, [pc, #32]	; (8009a10 <vTaskSwitchContext+0xb0>)
 80099f0:	601a      	str	r2, [r3, #0]
}
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	46bd      	mov	sp, r7
 80099f6:	b002      	add	sp, #8
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	46c0      	nop			; (mov r8, r8)
 80099fc:	20001430 	.word	0x20001430
 8009a00:	2000141c 	.word	0x2000141c
 8009a04:	20001410 	.word	0x20001410
 8009a08:	20000f38 	.word	0x20000f38
 8009a0c:	20000f34 	.word	0x20000f34
 8009a10:	20000014 	.word	0x20000014

08009a14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <vTaskPlaceOnEventList+0x14>
 8009a24:	b672      	cpsid	i
 8009a26:	e7fe      	b.n	8009a26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a28:	4b08      	ldr	r3, [pc, #32]	; (8009a4c <vTaskPlaceOnEventList+0x38>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3318      	adds	r3, #24
 8009a2e:	001a      	movs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	0011      	movs	r1, r2
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7fe ff96 	bl	8008966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f000 fbea 	bl	800a218 <prvAddCurrentTaskToDelayedList>
}
 8009a44:	46c0      	nop			; (mov r8, r8)
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b002      	add	sp, #8
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20000f34 	.word	0x20000f34

08009a50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <vTaskPlaceOnEventListRestricted+0x16>
 8009a62:	b672      	cpsid	i
 8009a64:	e7fe      	b.n	8009a64 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a66:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <vTaskPlaceOnEventListRestricted+0x48>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3318      	adds	r3, #24
 8009a6c:	001a      	movs	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	0011      	movs	r1, r2
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7fe ff55 	bl	8008922 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	425b      	negs	r3, r3
 8009a82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	0011      	movs	r1, r2
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f000 fbc4 	bl	800a218 <prvAddCurrentTaskToDelayedList>
	}
 8009a90:	46c0      	nop			; (mov r8, r8)
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b004      	add	sp, #16
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	20000f34 	.word	0x20000f34

08009a9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d101      	bne.n	8009ab6 <xTaskRemoveFromEventList+0x1a>
 8009ab2:	b672      	cpsid	i
 8009ab4:	e7fe      	b.n	8009ab4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3318      	adds	r3, #24
 8009aba:	0018      	movs	r0, r3
 8009abc:	f7fe ff89 	bl	80089d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <xTaskRemoveFromEventList+0xa0>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d11d      	bne.n	8009b04 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	3304      	adds	r3, #4
 8009acc:	0018      	movs	r0, r3
 8009ace:	f7fe ff80 	bl	80089d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad6:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <xTaskRemoveFromEventList+0xa4>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <xTaskRemoveFromEventList+0x4a>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae2:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <xTaskRemoveFromEventList+0xa4>)
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	0013      	movs	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4a14      	ldr	r2, [pc, #80]	; (8009b44 <xTaskRemoveFromEventList+0xa8>)
 8009af4:	189a      	adds	r2, r3, r2
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3304      	adds	r3, #4
 8009afa:	0019      	movs	r1, r3
 8009afc:	0010      	movs	r0, r2
 8009afe:	f7fe ff10 	bl	8008922 <vListInsertEnd>
 8009b02:	e007      	b.n	8009b14 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	3318      	adds	r3, #24
 8009b08:	001a      	movs	r2, r3
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <xTaskRemoveFromEventList+0xac>)
 8009b0c:	0011      	movs	r1, r2
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f7fe ff07 	bl	8008922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <xTaskRemoveFromEventList+0xb0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d905      	bls.n	8009b2e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b22:	2301      	movs	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b26:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <xTaskRemoveFromEventList+0xb4>)
 8009b28:	2201      	movs	r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	e001      	b.n	8009b32 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009b32:	68fb      	ldr	r3, [r7, #12]
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b004      	add	sp, #16
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20001430 	.word	0x20001430
 8009b40:	20001410 	.word	0x20001410
 8009b44:	20000f38 	.word	0x20000f38
 8009b48:	200013c8 	.word	0x200013c8
 8009b4c:	20000f34 	.word	0x20000f34
 8009b50:	2000141c 	.word	0x2000141c

08009b54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <vTaskInternalSetTimeOutState+0x20>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b64:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <vTaskInternalSetTimeOutState+0x24>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	605a      	str	r2, [r3, #4]
}
 8009b6c:	46c0      	nop			; (mov r8, r8)
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b002      	add	sp, #8
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20001420 	.word	0x20001420
 8009b78:	2000140c 	.word	0x2000140c

08009b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <xTaskCheckForTimeOut+0x14>
 8009b8c:	b672      	cpsid	i
 8009b8e:	e7fe      	b.n	8009b8e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <xTaskCheckForTimeOut+0x1e>
 8009b96:	b672      	cpsid	i
 8009b98:	e7fe      	b.n	8009b98 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009b9a:	f000 ff41 	bl	800aa20 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b9e:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <xTaskCheckForTimeOut+0x98>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	d102      	bne.n	8009bbc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	e024      	b.n	8009c06 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <xTaskCheckForTimeOut+0x9c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d007      	beq.n	8009bd8 <xTaskCheckForTimeOut+0x5c>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	e016      	b.n	8009c06 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d20c      	bcs.n	8009bfc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	1ad2      	subs	r2, r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f7ff ffaf 	bl	8009b54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	e004      	b.n	8009c06 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c02:	2301      	movs	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009c06:	f000 ff1d 	bl	800aa44 <vPortExitCritical>

	return xReturn;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	b006      	add	sp, #24
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	2000140c 	.word	0x2000140c
 8009c18:	20001420 	.word	0x20001420

08009c1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c20:	4b02      	ldr	r3, [pc, #8]	; (8009c2c <vTaskMissedYield+0x10>)
 8009c22:	2201      	movs	r2, #1
 8009c24:	601a      	str	r2, [r3, #0]
}
 8009c26:	46c0      	nop			; (mov r8, r8)
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	2000141c 	.word	0x2000141c

08009c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c38:	f000 f84e 	bl	8009cd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c3c:	4b03      	ldr	r3, [pc, #12]	; (8009c4c <prvIdleTask+0x1c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d9f9      	bls.n	8009c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c44:	f000 fedc 	bl	800aa00 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009c48:	e7f6      	b.n	8009c38 <prvIdleTask+0x8>
 8009c4a:	46c0      	nop			; (mov r8, r8)
 8009c4c:	20000f38 	.word	0x20000f38

08009c50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
 8009c5a:	e00c      	b.n	8009c76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	0013      	movs	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	189b      	adds	r3, r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4a14      	ldr	r2, [pc, #80]	; (8009cb8 <prvInitialiseTaskLists+0x68>)
 8009c68:	189b      	adds	r3, r3, r2
 8009c6a:	0018      	movs	r0, r3
 8009c6c:	f7fe fe30 	bl	80088d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3301      	adds	r3, #1
 8009c74:	607b      	str	r3, [r7, #4]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b37      	cmp	r3, #55	; 0x37
 8009c7a:	d9ef      	bls.n	8009c5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <prvInitialiseTaskLists+0x6c>)
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7fe fe26 	bl	80088d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c84:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <prvInitialiseTaskLists+0x70>)
 8009c86:	0018      	movs	r0, r3
 8009c88:	f7fe fe22 	bl	80088d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <prvInitialiseTaskLists+0x74>)
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7fe fe1e 	bl	80088d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c94:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <prvInitialiseTaskLists+0x78>)
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7fe fe1a 	bl	80088d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <prvInitialiseTaskLists+0x7c>)
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	f7fe fe16 	bl	80088d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <prvInitialiseTaskLists+0x80>)
 8009ca6:	4a05      	ldr	r2, [pc, #20]	; (8009cbc <prvInitialiseTaskLists+0x6c>)
 8009ca8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009caa:	4b0a      	ldr	r3, [pc, #40]	; (8009cd4 <prvInitialiseTaskLists+0x84>)
 8009cac:	4a04      	ldr	r2, [pc, #16]	; (8009cc0 <prvInitialiseTaskLists+0x70>)
 8009cae:	601a      	str	r2, [r3, #0]
}
 8009cb0:	46c0      	nop			; (mov r8, r8)
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	b002      	add	sp, #8
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20000f38 	.word	0x20000f38
 8009cbc:	20001398 	.word	0x20001398
 8009cc0:	200013ac 	.word	0x200013ac
 8009cc4:	200013c8 	.word	0x200013c8
 8009cc8:	200013dc 	.word	0x200013dc
 8009ccc:	200013f4 	.word	0x200013f4
 8009cd0:	200013c0 	.word	0x200013c0
 8009cd4:	200013c4 	.word	0x200013c4

08009cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cde:	e01a      	b.n	8009d16 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009ce0:	f000 fe9e 	bl	800aa20 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce4:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <prvCheckTasksWaitingTermination+0x50>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	f7fe fe6e 	bl	80089d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <prvCheckTasksWaitingTermination+0x54>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	1e5a      	subs	r2, r3, #1
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	; (8009d2c <prvCheckTasksWaitingTermination+0x54>)
 8009cfe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	1e5a      	subs	r2, r3, #1
 8009d06:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d08:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009d0a:	f000 fe9b 	bl	800aa44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	0018      	movs	r0, r3
 8009d12:	f000 f80f 	bl	8009d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e0      	bne.n	8009ce0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	46c0      	nop			; (mov r8, r8)
 8009d22:	46bd      	mov	sp, r7
 8009d24:	b002      	add	sp, #8
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	200013dc 	.word	0x200013dc
 8009d2c:	20001408 	.word	0x20001408
 8009d30:	200013f0 	.word	0x200013f0

08009d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	3354      	adds	r3, #84	; 0x54
 8009d40:	0018      	movs	r0, r3
 8009d42:	f001 ff0b 	bl	800bb5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	22b9      	movs	r2, #185	; 0xb9
 8009d4a:	5c9b      	ldrb	r3, [r3, r2]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	0018      	movs	r0, r3
 8009d56:	f000 ffa7 	bl	800aca8 <vPortFree>
				vPortFree( pxTCB );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	f000 ffa3 	bl	800aca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d62:	e010      	b.n	8009d86 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	22b9      	movs	r2, #185	; 0xb9
 8009d68:	5c9b      	ldrb	r3, [r3, r2]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d104      	bne.n	8009d78 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	0018      	movs	r0, r3
 8009d72:	f000 ff99 	bl	800aca8 <vPortFree>
	}
 8009d76:	e006      	b.n	8009d86 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	22b9      	movs	r2, #185	; 0xb9
 8009d7c:	5c9b      	ldrb	r3, [r3, r2]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d001      	beq.n	8009d86 <prvDeleteTCB+0x52>
 8009d82:	b672      	cpsid	i
 8009d84:	e7fe      	b.n	8009d84 <prvDeleteTCB+0x50>
	}
 8009d86:	46c0      	nop			; (mov r8, r8)
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b002      	add	sp, #8
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d96:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <prvResetNextTaskUnblockTime+0x34>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d104      	bne.n	8009daa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009da0:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <prvResetNextTaskUnblockTime+0x38>)
 8009da2:	2201      	movs	r2, #1
 8009da4:	4252      	negs	r2, r2
 8009da6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009da8:	e008      	b.n	8009dbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <prvResetNextTaskUnblockTime+0x34>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	4b03      	ldr	r3, [pc, #12]	; (8009dc8 <prvResetNextTaskUnblockTime+0x38>)
 8009dba:	601a      	str	r2, [r3, #0]
}
 8009dbc:	46c0      	nop			; (mov r8, r8)
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	200013c0 	.word	0x200013c0
 8009dc8:	20001428 	.word	0x20001428

08009dcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <xTaskGetSchedulerState+0x30>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d102      	bne.n	8009de0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	607b      	str	r3, [r7, #4]
 8009dde:	e008      	b.n	8009df2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <xTaskGetSchedulerState+0x34>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009de8:	2302      	movs	r3, #2
 8009dea:	607b      	str	r3, [r7, #4]
 8009dec:	e001      	b.n	8009df2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dee:	2300      	movs	r3, #0
 8009df0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009df2:	687b      	ldr	r3, [r7, #4]
	}
 8009df4:	0018      	movs	r0, r3
 8009df6:	46bd      	mov	sp, r7
 8009df8:	b002      	add	sp, #8
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20001414 	.word	0x20001414
 8009e00:	20001430 	.word	0x20001430

08009e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d044      	beq.n	8009ea4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e1a:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <xTaskPriorityDisinherit+0xac>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d001      	beq.n	8009e28 <xTaskPriorityDisinherit+0x24>
 8009e24:	b672      	cpsid	i
 8009e26:	e7fe      	b.n	8009e26 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <xTaskPriorityDisinherit+0x30>
 8009e30:	b672      	cpsid	i
 8009e32:	e7fe      	b.n	8009e32 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e38:	1e5a      	subs	r2, r3, #1
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d02c      	beq.n	8009ea4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d128      	bne.n	8009ea4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	3304      	adds	r3, #4
 8009e56:	0018      	movs	r0, r3
 8009e58:	f7fe fdbb 	bl	80089d2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	2238      	movs	r2, #56	; 0x38
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e74:	4b0f      	ldr	r3, [pc, #60]	; (8009eb4 <xTaskPriorityDisinherit+0xb0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d903      	bls.n	8009e84 <xTaskPriorityDisinherit+0x80>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e80:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <xTaskPriorityDisinherit+0xb0>)
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e88:	0013      	movs	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4a09      	ldr	r2, [pc, #36]	; (8009eb8 <xTaskPriorityDisinherit+0xb4>)
 8009e92:	189a      	adds	r2, r3, r2
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3304      	adds	r3, #4
 8009e98:	0019      	movs	r1, r3
 8009e9a:	0010      	movs	r0, r2
 8009e9c:	f7fe fd41 	bl	8008922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
	}
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	b004      	add	sp, #16
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	20000f34 	.word	0x20000f34
 8009eb4:	20001410 	.word	0x20001410
 8009eb8:	20000f38 	.word	0x20000f38

08009ebc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009eca:	f000 fda9 	bl	800aa20 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	22b8      	movs	r2, #184	; 0xb8
 8009ed4:	5c9b      	ldrb	r3, [r3, r2]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d017      	beq.n	8009f0c <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009edc:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	22b4      	movs	r2, #180	; 0xb4
 8009ee2:	589a      	ldr	r2, [r3, r2]
 8009ee4:	68f9      	ldr	r1, [r7, #12]
 8009ee6:	43c9      	mvns	r1, r1
 8009ee8:	400a      	ands	r2, r1
 8009eea:	21b4      	movs	r1, #180	; 0xb4
 8009eec:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009eee:	4b1e      	ldr	r3, [pc, #120]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	22b8      	movs	r2, #184	; 0xb8
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d006      	beq.n	8009f0c <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2101      	movs	r1, #1
 8009f02:	0018      	movs	r0, r3
 8009f04:	f000 f988 	bl	800a218 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009f08:	f000 fd7a 	bl	800aa00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f0c:	f000 fd9a 	bl	800aa44 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009f10:	f000 fd86 	bl	800aa20 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009f1a:	4b13      	ldr	r3, [pc, #76]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	22b4      	movs	r2, #180	; 0xb4
 8009f20:	589a      	ldr	r2, [r3, r2]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f26:	4b10      	ldr	r3, [pc, #64]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	22b8      	movs	r2, #184	; 0xb8
 8009f2c:	5c9b      	ldrb	r3, [r3, r2]
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d002      	beq.n	8009f3a <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e00a      	b.n	8009f50 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009f3a:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	22b4      	movs	r2, #180	; 0xb4
 8009f40:	589a      	ldr	r2, [r3, r2]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	43c9      	mvns	r1, r1
 8009f46:	400a      	ands	r2, r1
 8009f48:	21b4      	movs	r1, #180	; 0xb4
 8009f4a:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f50:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <xTaskNotifyWait+0xac>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	22b8      	movs	r2, #184	; 0xb8
 8009f56:	2100      	movs	r1, #0
 8009f58:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8009f5a:	f000 fd73 	bl	800aa44 <vPortExitCritical>

		return xReturn;
 8009f5e:	697b      	ldr	r3, [r7, #20]
	}
 8009f60:	0018      	movs	r0, r3
 8009f62:	46bd      	mov	sp, r7
 8009f64:	b006      	add	sp, #24
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20000f34 	.word	0x20000f34

08009f6c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	603b      	str	r3, [r7, #0]
 8009f78:	1dfb      	adds	r3, r7, #7
 8009f7a:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <xTaskGenericNotify+0x1e>
 8009f86:	b672      	cpsid	i
 8009f88:	e7fe      	b.n	8009f88 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8009f8e:	f000 fd47 	bl	800aa20 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d004      	beq.n	8009fa2 <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	22b4      	movs	r2, #180	; 0xb4
 8009f9c:	589a      	ldr	r2, [r3, r2]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009fa2:	2317      	movs	r3, #23
 8009fa4:	18fb      	adds	r3, r7, r3
 8009fa6:	69ba      	ldr	r2, [r7, #24]
 8009fa8:	21b8      	movs	r1, #184	; 0xb8
 8009faa:	5c52      	ldrb	r2, [r2, r1]
 8009fac:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	22b8      	movs	r2, #184	; 0xb8
 8009fb2:	2102      	movs	r1, #2
 8009fb4:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8009fb6:	1dfb      	adds	r3, r7, #7
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d827      	bhi.n	800a00e <xTaskGenericNotify+0xa2>
 8009fbe:	009a      	lsls	r2, r3, #2
 8009fc0:	4b34      	ldr	r3, [pc, #208]	; (800a094 <xTaskGenericNotify+0x128>)
 8009fc2:	18d3      	adds	r3, r2, r3
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	22b4      	movs	r2, #180	; 0xb4
 8009fcc:	589a      	ldr	r2, [r3, r2]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	21b4      	movs	r1, #180	; 0xb4
 8009fd6:	505a      	str	r2, [r3, r1]
					break;
 8009fd8:	e023      	b.n	800a022 <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	22b4      	movs	r2, #180	; 0xb4
 8009fde:	589b      	ldr	r3, [r3, r2]
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	21b4      	movs	r1, #180	; 0xb4
 8009fe6:	505a      	str	r2, [r3, r1]
					break;
 8009fe8:	e01b      	b.n	800a022 <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	21b4      	movs	r1, #180	; 0xb4
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	505a      	str	r2, [r3, r1]
					break;
 8009ff2:	e016      	b.n	800a022 <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ff4:	2317      	movs	r3, #23
 8009ff6:	18fb      	adds	r3, r7, r3
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d004      	beq.n	800a008 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	21b4      	movs	r1, #180	; 0xb4
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a006:	e00c      	b.n	800a022 <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 800a008:	2300      	movs	r3, #0
 800a00a:	61fb      	str	r3, [r7, #28]
					break;
 800a00c:	e009      	b.n	800a022 <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	22b4      	movs	r2, #180	; 0xb4
 800a012:	589b      	ldr	r3, [r3, r2]
 800a014:	3301      	adds	r3, #1
 800a016:	d003      	beq.n	800a020 <xTaskGenericNotify+0xb4>
 800a018:	b672      	cpsid	i
 800a01a:	e7fe      	b.n	800a01a <xTaskGenericNotify+0xae>
					break;
 800a01c:	46c0      	nop			; (mov r8, r8)
 800a01e:	e000      	b.n	800a022 <xTaskGenericNotify+0xb6>

					break;
 800a020:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a022:	2317      	movs	r3, #23
 800a024:	18fb      	adds	r3, r7, r3
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d12b      	bne.n	800a084 <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	3304      	adds	r3, #4
 800a030:	0018      	movs	r0, r3
 800a032:	f7fe fcce 	bl	80089d2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03a:	4b17      	ldr	r3, [pc, #92]	; (800a098 <xTaskGenericNotify+0x12c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d903      	bls.n	800a04a <xTaskGenericNotify+0xde>
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	4b14      	ldr	r3, [pc, #80]	; (800a098 <xTaskGenericNotify+0x12c>)
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04e:	0013      	movs	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	189b      	adds	r3, r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4a11      	ldr	r2, [pc, #68]	; (800a09c <xTaskGenericNotify+0x130>)
 800a058:	189a      	adds	r2, r3, r2
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	3304      	adds	r3, #4
 800a05e:	0019      	movs	r1, r3
 800a060:	0010      	movs	r0, r2
 800a062:	f7fe fc5e 	bl	8008922 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <xTaskGenericNotify+0x106>
 800a06e:	b672      	cpsid	i
 800a070:	e7fe      	b.n	800a070 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a076:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <xTaskGenericNotify+0x134>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d901      	bls.n	800a084 <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a080:	f000 fcbe 	bl	800aa00 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a084:	f000 fcde 	bl	800aa44 <vPortExitCritical>

		return xReturn;
 800a088:	69fb      	ldr	r3, [r7, #28]
	}
 800a08a:	0018      	movs	r0, r3
 800a08c:	46bd      	mov	sp, r7
 800a08e:	b008      	add	sp, #32
 800a090:	bd80      	pop	{r7, pc}
 800a092:	46c0      	nop			; (mov r8, r8)
 800a094:	0800e274 	.word	0x0800e274
 800a098:	20001410 	.word	0x20001410
 800a09c:	20000f38 	.word	0x20000f38
 800a0a0:	20000f34 	.word	0x20000f34

0800a0a4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	1dfb      	adds	r3, r7, #7
 800a0b2:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <xTaskGenericNotifyFromISR+0x1e>
 800a0be:	b672      	cpsid	i
 800a0c0:	e7fe      	b.n	800a0c0 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0c6:	f000 fcd5 	bl	800aa74 <ulSetInterruptMaskFromISR>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d004      	beq.n	800a0de <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	22b4      	movs	r2, #180	; 0xb4
 800a0d8:	589a      	ldr	r2, [r3, r2]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a0de:	2313      	movs	r3, #19
 800a0e0:	18fb      	adds	r3, r7, r3
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	21b8      	movs	r1, #184	; 0xb8
 800a0e6:	5c52      	ldrb	r2, [r2, r1]
 800a0e8:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	22b8      	movs	r2, #184	; 0xb8
 800a0ee:	2102      	movs	r1, #2
 800a0f0:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800a0f2:	1dfb      	adds	r3, r7, #7
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d827      	bhi.n	800a14a <xTaskGenericNotifyFromISR+0xa6>
 800a0fa:	009a      	lsls	r2, r3, #2
 800a0fc:	4b3f      	ldr	r3, [pc, #252]	; (800a1fc <xTaskGenericNotifyFromISR+0x158>)
 800a0fe:	18d3      	adds	r3, r2, r3
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	22b4      	movs	r2, #180	; 0xb4
 800a108:	589a      	ldr	r2, [r3, r2]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	431a      	orrs	r2, r3
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	21b4      	movs	r1, #180	; 0xb4
 800a112:	505a      	str	r2, [r3, r1]
					break;
 800a114:	e023      	b.n	800a15e <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	22b4      	movs	r2, #180	; 0xb4
 800a11a:	589b      	ldr	r3, [r3, r2]
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	21b4      	movs	r1, #180	; 0xb4
 800a122:	505a      	str	r2, [r3, r1]
					break;
 800a124:	e01b      	b.n	800a15e <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	21b4      	movs	r1, #180	; 0xb4
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	505a      	str	r2, [r3, r1]
					break;
 800a12e:	e016      	b.n	800a15e <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a130:	2313      	movs	r3, #19
 800a132:	18fb      	adds	r3, r7, r3
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	2b02      	cmp	r3, #2
 800a138:	d004      	beq.n	800a144 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	21b4      	movs	r1, #180	; 0xb4
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a142:	e00c      	b.n	800a15e <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 800a144:	2300      	movs	r3, #0
 800a146:	61fb      	str	r3, [r7, #28]
					break;
 800a148:	e009      	b.n	800a15e <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	22b4      	movs	r2, #180	; 0xb4
 800a14e:	589b      	ldr	r3, [r3, r2]
 800a150:	3301      	adds	r3, #1
 800a152:	d003      	beq.n	800a15c <xTaskGenericNotifyFromISR+0xb8>
 800a154:	b672      	cpsid	i
 800a156:	e7fe      	b.n	800a156 <xTaskGenericNotifyFromISR+0xb2>
					break;
 800a158:	46c0      	nop			; (mov r8, r8)
 800a15a:	e000      	b.n	800a15e <xTaskGenericNotifyFromISR+0xba>
					break;
 800a15c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a15e:	2313      	movs	r3, #19
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d13f      	bne.n	800a1e8 <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <xTaskGenericNotifyFromISR+0xd0>
 800a170:	b672      	cpsid	i
 800a172:	e7fe      	b.n	800a172 <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a174:	4b22      	ldr	r3, [pc, #136]	; (800a200 <xTaskGenericNotifyFromISR+0x15c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d11d      	bne.n	800a1b8 <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	3304      	adds	r3, #4
 800a180:	0018      	movs	r0, r3
 800a182:	f7fe fc26 	bl	80089d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	4b1e      	ldr	r3, [pc, #120]	; (800a204 <xTaskGenericNotifyFromISR+0x160>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d903      	bls.n	800a19a <xTaskGenericNotifyFromISR+0xf6>
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <xTaskGenericNotifyFromISR+0x160>)
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19e:	0013      	movs	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	189b      	adds	r3, r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4a18      	ldr	r2, [pc, #96]	; (800a208 <xTaskGenericNotifyFromISR+0x164>)
 800a1a8:	189a      	adds	r2, r3, r2
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	0019      	movs	r1, r3
 800a1b0:	0010      	movs	r0, r2
 800a1b2:	f7fe fbb6 	bl	8008922 <vListInsertEnd>
 800a1b6:	e007      	b.n	800a1c8 <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	3318      	adds	r3, #24
 800a1bc:	001a      	movs	r2, r3
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <xTaskGenericNotifyFromISR+0x168>)
 800a1c0:	0011      	movs	r1, r2
 800a1c2:	0018      	movs	r0, r3
 800a1c4:	f7fe fbad 	bl	8008922 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1cc:	4b10      	ldr	r3, [pc, #64]	; (800a210 <xTaskGenericNotifyFromISR+0x16c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d908      	bls.n	800a1e8 <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a1e2:	4b0c      	ldr	r3, [pc, #48]	; (800a214 <xTaskGenericNotifyFromISR+0x170>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f000 fc48 	bl	800aa80 <vClearInterruptMaskFromISR>

		return xReturn;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
	}
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	b008      	add	sp, #32
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	0800e288 	.word	0x0800e288
 800a200:	20001430 	.word	0x20001430
 800a204:	20001410 	.word	0x20001410
 800a208:	20000f38 	.word	0x20000f38
 800a20c:	200013c8 	.word	0x200013c8
 800a210:	20000f34 	.word	0x20000f34
 800a214:	2000141c 	.word	0x2000141c

0800a218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a222:	4b21      	ldr	r3, [pc, #132]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a228:	4b20      	ldr	r3, [pc, #128]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3304      	adds	r3, #4
 800a22e:	0018      	movs	r0, r3
 800a230:	f7fe fbcf 	bl	80089d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3301      	adds	r3, #1
 800a238:	d10b      	bne.n	800a252 <prvAddCurrentTaskToDelayedList+0x3a>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a240:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	1d1a      	adds	r2, r3, #4
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a248:	0011      	movs	r1, r2
 800a24a:	0018      	movs	r0, r3
 800a24c:	f7fe fb69 	bl	8008922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a250:	e026      	b.n	800a2a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	18d3      	adds	r3, r2, r3
 800a258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a25a:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	429a      	cmp	r2, r3
 800a268:	d209      	bcs.n	800a27e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a26a:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3304      	adds	r3, #4
 800a274:	0019      	movs	r1, r3
 800a276:	0010      	movs	r0, r2
 800a278:	f7fe fb75 	bl	8008966 <vListInsert>
}
 800a27c:	e010      	b.n	800a2a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a27e:	4b0e      	ldr	r3, [pc, #56]	; (800a2b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4b0a      	ldr	r3, [pc, #40]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3304      	adds	r3, #4
 800a288:	0019      	movs	r1, r3
 800a28a:	0010      	movs	r0, r2
 800a28c:	f7fe fb6b 	bl	8008966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	429a      	cmp	r2, r3
 800a298:	d202      	bcs.n	800a2a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	601a      	str	r2, [r3, #0]
}
 800a2a0:	46c0      	nop			; (mov r8, r8)
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	b004      	add	sp, #16
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	2000140c 	.word	0x2000140c
 800a2ac:	20000f34 	.word	0x20000f34
 800a2b0:	200013f4 	.word	0x200013f4
 800a2b4:	200013c4 	.word	0x200013c4
 800a2b8:	200013c0 	.word	0x200013c0
 800a2bc:	20001428 	.word	0x20001428

0800a2c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2c0:	b590      	push	{r4, r7, lr}
 800a2c2:	b089      	sub	sp, #36	; 0x24
 800a2c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2ca:	f000 fac9 	bl	800a860 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2ce:	4b17      	ldr	r3, [pc, #92]	; (800a32c <xTimerCreateTimerTask+0x6c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d020      	beq.n	800a318 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2de:	003a      	movs	r2, r7
 800a2e0:	1d39      	adds	r1, r7, #4
 800a2e2:	2308      	movs	r3, #8
 800a2e4:	18fb      	adds	r3, r7, r3
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	f7fe fada 	bl	80088a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2ec:	683c      	ldr	r4, [r7, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	490f      	ldr	r1, [pc, #60]	; (800a330 <xTimerCreateTimerTask+0x70>)
 800a2f4:	480f      	ldr	r0, [pc, #60]	; (800a334 <xTimerCreateTimerTask+0x74>)
 800a2f6:	9202      	str	r2, [sp, #8]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	2300      	movs	r3, #0
 800a300:	0022      	movs	r2, r4
 800a302:	f7fe ffba 	bl	800927a <xTaskCreateStatic>
 800a306:	0002      	movs	r2, r0
 800a308:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <xTimerCreateTimerTask+0x78>)
 800a30a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a30c:	4b0a      	ldr	r3, [pc, #40]	; (800a338 <xTimerCreateTimerTask+0x78>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xTimerCreateTimerTask+0x62>
 800a31e:	b672      	cpsid	i
 800a320:	e7fe      	b.n	800a320 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800a322:	68fb      	ldr	r3, [r7, #12]
}
 800a324:	0018      	movs	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	b005      	add	sp, #20
 800a32a:	bd90      	pop	{r4, r7, pc}
 800a32c:	20001464 	.word	0x20001464
 800a330:	0800dff4 	.word	0x0800dff4
 800a334:	0800a459 	.word	0x0800a459
 800a338:	20001468 	.word	0x20001468

0800a33c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a33c:	b590      	push	{r4, r7, lr}
 800a33e:	b08b      	sub	sp, #44	; 0x2c
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <xTimerGenericCommand+0x1c>
 800a354:	b672      	cpsid	i
 800a356:	e7fe      	b.n	800a356 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a358:	4b1c      	ldr	r3, [pc, #112]	; (800a3cc <xTimerGenericCommand+0x90>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d030      	beq.n	800a3c2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a360:	2414      	movs	r4, #20
 800a362:	193b      	adds	r3, r7, r4
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a368:	193b      	adds	r3, r7, r4
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a36e:	193b      	adds	r3, r7, r4
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b05      	cmp	r3, #5
 800a378:	dc19      	bgt.n	800a3ae <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a37a:	f7ff fd27 	bl	8009dcc <xTaskGetSchedulerState>
 800a37e:	0003      	movs	r3, r0
 800a380:	2b02      	cmp	r3, #2
 800a382:	d109      	bne.n	800a398 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a384:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <xTimerGenericCommand+0x90>)
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a38a:	1939      	adds	r1, r7, r4
 800a38c:	2300      	movs	r3, #0
 800a38e:	f7fe fc0f 	bl	8008bb0 <xQueueGenericSend>
 800a392:	0003      	movs	r3, r0
 800a394:	627b      	str	r3, [r7, #36]	; 0x24
 800a396:	e014      	b.n	800a3c2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <xTimerGenericCommand+0x90>)
 800a39a:	6818      	ldr	r0, [r3, #0]
 800a39c:	2314      	movs	r3, #20
 800a39e:	18f9      	adds	r1, r7, r3
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f7fe fc04 	bl	8008bb0 <xQueueGenericSend>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ac:	e009      	b.n	800a3c2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <xTimerGenericCommand+0x90>)
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	2314      	movs	r3, #20
 800a3b6:	18f9      	adds	r1, r7, r3
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f7fe fcbd 	bl	8008d38 <xQueueGenericSendFromISR>
 800a3be:	0003      	movs	r3, r0
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	b00b      	add	sp, #44	; 0x2c
 800a3ca:	bd90      	pop	{r4, r7, pc}
 800a3cc:	20001464 	.word	0x20001464

0800a3d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3da:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <prvProcessExpiredTimer+0x84>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f7fe faf2 	bl	80089d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2228      	movs	r2, #40	; 0x28
 800a3f2:	5c9b      	ldrb	r3, [r3, r2]
 800a3f4:	001a      	movs	r2, r3
 800a3f6:	2304      	movs	r3, #4
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	d019      	beq.n	800a430 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	699a      	ldr	r2, [r3, #24]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	18d1      	adds	r1, r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 f8c3 	bl	800a594 <prvInsertTimerInActiveList>
 800a40e:	1e03      	subs	r3, r0, #0
 800a410:	d017      	beq.n	800a442 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	2300      	movs	r3, #0
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	2300      	movs	r3, #0
 800a41c:	2100      	movs	r1, #0
 800a41e:	f7ff ff8d 	bl	800a33c <xTimerGenericCommand>
 800a422:	0003      	movs	r3, r0
 800a424:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10a      	bne.n	800a442 <prvProcessExpiredTimer+0x72>
 800a42c:	b672      	cpsid	i
 800a42e:	e7fe      	b.n	800a42e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2228      	movs	r2, #40	; 0x28
 800a434:	5c9b      	ldrb	r3, [r3, r2]
 800a436:	2201      	movs	r2, #1
 800a438:	4393      	bics	r3, r2
 800a43a:	b2d9      	uxtb	r1, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2228      	movs	r2, #40	; 0x28
 800a440:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	0010      	movs	r0, r2
 800a44a:	4798      	blx	r3
}
 800a44c:	46c0      	nop			; (mov r8, r8)
 800a44e:	46bd      	mov	sp, r7
 800a450:	b004      	add	sp, #16
 800a452:	bd80      	pop	{r7, pc}
 800a454:	2000145c 	.word	0x2000145c

0800a458 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a460:	2308      	movs	r3, #8
 800a462:	18fb      	adds	r3, r7, r3
 800a464:	0018      	movs	r0, r3
 800a466:	f000 f853 	bl	800a510 <prvGetNextExpireTime>
 800a46a:	0003      	movs	r3, r0
 800a46c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	0011      	movs	r1, r2
 800a474:	0018      	movs	r0, r3
 800a476:	f000 f803 	bl	800a480 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a47a:	f000 f8cd 	bl	800a618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a47e:	e7ef      	b.n	800a460 <prvTimerTask+0x8>

0800a480 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a48a:	f7ff f913 	bl	80096b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a48e:	2308      	movs	r3, #8
 800a490:	18fb      	adds	r3, r7, r3
 800a492:	0018      	movs	r0, r3
 800a494:	f000 f85e 	bl	800a554 <prvSampleTimeNow>
 800a498:	0003      	movs	r3, r0
 800a49a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d12b      	bne.n	800a4fa <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10c      	bne.n	800a4c2 <prvProcessTimerOrBlockTask+0x42>
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d808      	bhi.n	800a4c2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a4b0:	f7ff f90c 	bl	80096cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	0011      	movs	r1, r2
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f7ff ff88 	bl	800a3d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4c0:	e01d      	b.n	800a4fe <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d008      	beq.n	800a4da <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4c8:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <prvProcessTimerOrBlockTask+0x88>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <prvProcessTimerOrBlockTask+0x56>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <prvProcessTimerOrBlockTask+0x58>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4da:	4b0c      	ldr	r3, [pc, #48]	; (800a50c <prvProcessTimerOrBlockTask+0x8c>)
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	0019      	movs	r1, r3
 800a4e8:	f7fe fe94 	bl	8009214 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ec:	f7ff f8ee 	bl	80096cc <xTaskResumeAll>
 800a4f0:	1e03      	subs	r3, r0, #0
 800a4f2:	d104      	bne.n	800a4fe <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800a4f4:	f000 fa84 	bl	800aa00 <vPortYield>
}
 800a4f8:	e001      	b.n	800a4fe <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800a4fa:	f7ff f8e7 	bl	80096cc <xTaskResumeAll>
}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	46bd      	mov	sp, r7
 800a502:	b004      	add	sp, #16
 800a504:	bd80      	pop	{r7, pc}
 800a506:	46c0      	nop			; (mov r8, r8)
 800a508:	20001460 	.word	0x20001460
 800a50c:	20001464 	.word	0x20001464

0800a510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a518:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <prvGetNextExpireTime+0x40>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <prvGetNextExpireTime+0x16>
 800a522:	2201      	movs	r2, #1
 800a524:	e000      	b.n	800a528 <prvGetNextExpireTime+0x18>
 800a526:	2200      	movs	r2, #0
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d105      	bne.n	800a540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a534:	4b06      	ldr	r3, [pc, #24]	; (800a550 <prvGetNextExpireTime+0x40>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	e001      	b.n	800a544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a544:	68fb      	ldr	r3, [r7, #12]
}
 800a546:	0018      	movs	r0, r3
 800a548:	46bd      	mov	sp, r7
 800a54a:	b004      	add	sp, #16
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	2000145c 	.word	0x2000145c

0800a554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a55c:	f7ff f942 	bl	80097e4 <xTaskGetTickCount>
 800a560:	0003      	movs	r3, r0
 800a562:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <prvSampleTimeNow+0x3c>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d205      	bcs.n	800a57a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a56e:	f000 f919 	bl	800a7a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e002      	b.n	800a580 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a580:	4b03      	ldr	r3, [pc, #12]	; (800a590 <prvSampleTimeNow+0x3c>)
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a586:	68fb      	ldr	r3, [r7, #12]
}
 800a588:	0018      	movs	r0, r3
 800a58a:	46bd      	mov	sp, r7
 800a58c:	b004      	add	sp, #16
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	2000146c 	.word	0x2000146c

0800a594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d812      	bhi.n	800a5e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d302      	bcc.n	800a5ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e01b      	b.n	800a606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5ce:	4b10      	ldr	r3, [pc, #64]	; (800a610 <prvInsertTimerInActiveList+0x7c>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	0019      	movs	r1, r3
 800a5d8:	0010      	movs	r0, r2
 800a5da:	f7fe f9c4 	bl	8008966 <vListInsert>
 800a5de:	e012      	b.n	800a606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d206      	bcs.n	800a5f6 <prvInsertTimerInActiveList+0x62>
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e007      	b.n	800a606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5f6:	4b07      	ldr	r3, [pc, #28]	; (800a614 <prvInsertTimerInActiveList+0x80>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	0019      	movs	r1, r3
 800a600:	0010      	movs	r0, r2
 800a602:	f7fe f9b0 	bl	8008966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a606:	697b      	ldr	r3, [r7, #20]
}
 800a608:	0018      	movs	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	b006      	add	sp, #24
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20001460 	.word	0x20001460
 800a614:	2000145c 	.word	0x2000145c

0800a618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b08d      	sub	sp, #52	; 0x34
 800a61c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a61e:	e0ac      	b.n	800a77a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a620:	2208      	movs	r2, #8
 800a622:	18bb      	adds	r3, r7, r2
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	da0f      	bge.n	800a64a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a62a:	18bb      	adds	r3, r7, r2
 800a62c:	3304      	adds	r3, #4
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <prvProcessReceivedCommands+0x22>
 800a636:	b672      	cpsid	i
 800a638:	e7fe      	b.n	800a638 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	6858      	ldr	r0, [r3, #4]
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	0019      	movs	r1, r3
 800a648:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a64a:	2208      	movs	r2, #8
 800a64c:	18bb      	adds	r3, r7, r2
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	da00      	bge.n	800a656 <prvProcessReceivedCommands+0x3e>
 800a654:	e090      	b.n	800a778 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a656:	18bb      	adds	r3, r7, r2
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	3304      	adds	r3, #4
 800a668:	0018      	movs	r0, r3
 800a66a:	f7fe f9b2 	bl	80089d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a66e:	1d3b      	adds	r3, r7, #4
 800a670:	0018      	movs	r0, r3
 800a672:	f7ff ff6f 	bl	800a554 <prvSampleTimeNow>
 800a676:	0003      	movs	r3, r0
 800a678:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800a67a:	2308      	movs	r3, #8
 800a67c:	18fb      	adds	r3, r7, r3
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b09      	cmp	r3, #9
 800a682:	d900      	bls.n	800a686 <prvProcessReceivedCommands+0x6e>
 800a684:	e079      	b.n	800a77a <prvProcessReceivedCommands+0x162>
 800a686:	009a      	lsls	r2, r3, #2
 800a688:	4b44      	ldr	r3, [pc, #272]	; (800a79c <prvProcessReceivedCommands+0x184>)
 800a68a:	18d3      	adds	r3, r2, r3
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	2228      	movs	r2, #40	; 0x28
 800a694:	5c9b      	ldrb	r3, [r3, r2]
 800a696:	2201      	movs	r2, #1
 800a698:	4313      	orrs	r3, r2
 800a69a:	b2d9      	uxtb	r1, r3
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	2228      	movs	r2, #40	; 0x28
 800a6a0:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6a2:	2408      	movs	r4, #8
 800a6a4:	193b      	adds	r3, r7, r4
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	18d1      	adds	r1, r2, r3
 800a6ae:	193b      	adds	r3, r7, r4
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	6a38      	ldr	r0, [r7, #32]
 800a6b6:	f7ff ff6d 	bl	800a594 <prvInsertTimerInActiveList>
 800a6ba:	1e03      	subs	r3, r0, #0
 800a6bc:	d05d      	beq.n	800a77a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	6a3a      	ldr	r2, [r7, #32]
 800a6c4:	0010      	movs	r0, r2
 800a6c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	2228      	movs	r2, #40	; 0x28
 800a6cc:	5c9b      	ldrb	r3, [r3, r2]
 800a6ce:	001a      	movs	r2, r3
 800a6d0:	2304      	movs	r3, #4
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	d051      	beq.n	800a77a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6d6:	193b      	adds	r3, r7, r4
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	18d2      	adds	r2, r2, r3
 800a6e0:	6a38      	ldr	r0, [r7, #32]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	f7ff fe27 	bl	800a33c <xTimerGenericCommand>
 800a6ee:	0003      	movs	r3, r0
 800a6f0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d140      	bne.n	800a77a <prvProcessReceivedCommands+0x162>
 800a6f8:	b672      	cpsid	i
 800a6fa:	e7fe      	b.n	800a6fa <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	2228      	movs	r2, #40	; 0x28
 800a700:	5c9b      	ldrb	r3, [r3, r2]
 800a702:	2201      	movs	r2, #1
 800a704:	4393      	bics	r3, r2
 800a706:	b2d9      	uxtb	r1, r3
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	2228      	movs	r2, #40	; 0x28
 800a70c:	5499      	strb	r1, [r3, r2]
					break;
 800a70e:	e034      	b.n	800a77a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2228      	movs	r2, #40	; 0x28
 800a714:	5c9b      	ldrb	r3, [r3, r2]
 800a716:	2201      	movs	r2, #1
 800a718:	4313      	orrs	r3, r2
 800a71a:	b2d9      	uxtb	r1, r3
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	2228      	movs	r2, #40	; 0x28
 800a720:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a722:	2308      	movs	r3, #8
 800a724:	18fb      	adds	r3, r7, r3
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <prvProcessReceivedCommands+0x120>
 800a734:	b672      	cpsid	i
 800a736:	e7fe      	b.n	800a736 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	699a      	ldr	r2, [r3, #24]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	18d1      	adds	r1, r2, r3
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	69fa      	ldr	r2, [r7, #28]
 800a744:	6a38      	ldr	r0, [r7, #32]
 800a746:	f7ff ff25 	bl	800a594 <prvInsertTimerInActiveList>
					break;
 800a74a:	e016      	b.n	800a77a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	2228      	movs	r2, #40	; 0x28
 800a750:	5c9b      	ldrb	r3, [r3, r2]
 800a752:	001a      	movs	r2, r3
 800a754:	2302      	movs	r3, #2
 800a756:	4013      	ands	r3, r2
 800a758:	d104      	bne.n	800a764 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	0018      	movs	r0, r3
 800a75e:	f000 faa3 	bl	800aca8 <vPortFree>
 800a762:	e00a      	b.n	800a77a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	2228      	movs	r2, #40	; 0x28
 800a768:	5c9b      	ldrb	r3, [r3, r2]
 800a76a:	2201      	movs	r2, #1
 800a76c:	4393      	bics	r3, r2
 800a76e:	b2d9      	uxtb	r1, r3
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	2228      	movs	r2, #40	; 0x28
 800a774:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a776:	e000      	b.n	800a77a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a778:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <prvProcessReceivedCommands+0x188>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2208      	movs	r2, #8
 800a780:	18b9      	adds	r1, r7, r2
 800a782:	2200      	movs	r2, #0
 800a784:	0018      	movs	r0, r3
 800a786:	f7fe fb4b 	bl	8008e20 <xQueueReceive>
 800a78a:	1e03      	subs	r3, r0, #0
 800a78c:	d000      	beq.n	800a790 <prvProcessReceivedCommands+0x178>
 800a78e:	e747      	b.n	800a620 <prvProcessReceivedCommands+0x8>
	}
}
 800a790:	46c0      	nop			; (mov r8, r8)
 800a792:	46c0      	nop			; (mov r8, r8)
 800a794:	46bd      	mov	sp, r7
 800a796:	b00b      	add	sp, #44	; 0x2c
 800a798:	bd90      	pop	{r4, r7, pc}
 800a79a:	46c0      	nop			; (mov r8, r8)
 800a79c:	0800e29c 	.word	0x0800e29c
 800a7a0:	20001464 	.word	0x20001464

0800a7a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7aa:	e041      	b.n	800a830 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7ac:	4b2a      	ldr	r3, [pc, #168]	; (800a858 <prvSwitchTimerLists+0xb4>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b6:	4b28      	ldr	r3, [pc, #160]	; (800a858 <prvSwitchTimerLists+0xb4>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f7fe f904 	bl	80089d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	0010      	movs	r0, r2
 800a7d2:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2228      	movs	r2, #40	; 0x28
 800a7d8:	5c9b      	ldrb	r3, [r3, r2]
 800a7da:	001a      	movs	r2, r3
 800a7dc:	2304      	movs	r3, #4
 800a7de:	4013      	ands	r3, r2
 800a7e0:	d026      	beq.n	800a830 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	18d3      	adds	r3, r2, r3
 800a7ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d90e      	bls.n	800a812 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a800:	4b15      	ldr	r3, [pc, #84]	; (800a858 <prvSwitchTimerLists+0xb4>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3304      	adds	r3, #4
 800a808:	0019      	movs	r1, r3
 800a80a:	0010      	movs	r0, r2
 800a80c:	f7fe f8ab 	bl	8008966 <vListInsert>
 800a810:	e00e      	b.n	800a830 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	2300      	movs	r3, #0
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	2300      	movs	r3, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	f7ff fd8d 	bl	800a33c <xTimerGenericCommand>
 800a822:	0003      	movs	r3, r0
 800a824:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <prvSwitchTimerLists+0x8c>
 800a82c:	b672      	cpsid	i
 800a82e:	e7fe      	b.n	800a82e <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a830:	4b09      	ldr	r3, [pc, #36]	; (800a858 <prvSwitchTimerLists+0xb4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1b8      	bne.n	800a7ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a83a:	4b07      	ldr	r3, [pc, #28]	; (800a858 <prvSwitchTimerLists+0xb4>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <prvSwitchTimerLists+0xb8>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <prvSwitchTimerLists+0xb4>)
 800a846:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800a848:	4b04      	ldr	r3, [pc, #16]	; (800a85c <prvSwitchTimerLists+0xb8>)
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	601a      	str	r2, [r3, #0]
}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	46bd      	mov	sp, r7
 800a852:	b006      	add	sp, #24
 800a854:	bd80      	pop	{r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	2000145c 	.word	0x2000145c
 800a85c:	20001460 	.word	0x20001460

0800a860 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a866:	f000 f8db 	bl	800aa20 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a86a:	4b16      	ldr	r3, [pc, #88]	; (800a8c4 <prvCheckForValidListAndQueue+0x64>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d123      	bne.n	800a8ba <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <prvCheckForValidListAndQueue+0x68>)
 800a874:	0018      	movs	r0, r3
 800a876:	f7fe f82b 	bl	80088d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <prvCheckForValidListAndQueue+0x6c>)
 800a87c:	0018      	movs	r0, r3
 800a87e:	f7fe f827 	bl	80088d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <prvCheckForValidListAndQueue+0x70>)
 800a884:	4a10      	ldr	r2, [pc, #64]	; (800a8c8 <prvCheckForValidListAndQueue+0x68>)
 800a886:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a888:	4b12      	ldr	r3, [pc, #72]	; (800a8d4 <prvCheckForValidListAndQueue+0x74>)
 800a88a:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <prvCheckForValidListAndQueue+0x6c>)
 800a88c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a88e:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <prvCheckForValidListAndQueue+0x78>)
 800a890:	4a12      	ldr	r2, [pc, #72]	; (800a8dc <prvCheckForValidListAndQueue+0x7c>)
 800a892:	2100      	movs	r1, #0
 800a894:	9100      	str	r1, [sp, #0]
 800a896:	2110      	movs	r1, #16
 800a898:	200a      	movs	r0, #10
 800a89a:	f7fe f916 	bl	8008aca <xQueueGenericCreateStatic>
 800a89e:	0002      	movs	r2, r0
 800a8a0:	4b08      	ldr	r3, [pc, #32]	; (800a8c4 <prvCheckForValidListAndQueue+0x64>)
 800a8a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <prvCheckForValidListAndQueue+0x64>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d006      	beq.n	800a8ba <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8ac:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <prvCheckForValidListAndQueue+0x64>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a0b      	ldr	r2, [pc, #44]	; (800a8e0 <prvCheckForValidListAndQueue+0x80>)
 800a8b2:	0011      	movs	r1, r2
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f7fe fc85 	bl	80091c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8ba:	f000 f8c3 	bl	800aa44 <vPortExitCritical>
}
 800a8be:	46c0      	nop			; (mov r8, r8)
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20001464 	.word	0x20001464
 800a8c8:	20001434 	.word	0x20001434
 800a8cc:	20001448 	.word	0x20001448
 800a8d0:	2000145c 	.word	0x2000145c
 800a8d4:	20001460 	.word	0x20001460
 800a8d8:	20001510 	.word	0x20001510
 800a8dc:	20001470 	.word	0x20001470
 800a8e0:	0800dffc 	.word	0x0800dffc

0800a8e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3b04      	subs	r3, #4
 800a8f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2280      	movs	r2, #128	; 0x80
 800a8fa:	0452      	lsls	r2, r2, #17
 800a8fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	3b04      	subs	r3, #4
 800a902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3b04      	subs	r3, #4
 800a90e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a910:	4a08      	ldr	r2, [pc, #32]	; (800a934 <pxPortInitialiseStack+0x50>)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3b14      	subs	r3, #20
 800a91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3b20      	subs	r3, #32
 800a926:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a928:	68fb      	ldr	r3, [r7, #12]
}
 800a92a:	0018      	movs	r0, r3
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b004      	add	sp, #16
 800a930:	bd80      	pop	{r7, pc}
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	0800a939 	.word	0x0800a939

0800a938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a93e:	2300      	movs	r3, #0
 800a940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a942:	4b08      	ldr	r3, [pc, #32]	; (800a964 <prvTaskExitError+0x2c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3301      	adds	r3, #1
 800a948:	d001      	beq.n	800a94e <prvTaskExitError+0x16>
 800a94a:	b672      	cpsid	i
 800a94c:	e7fe      	b.n	800a94c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a94e:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a950:	46c0      	nop			; (mov r8, r8)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d0fc      	beq.n	800a952 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a958:	46c0      	nop			; (mov r8, r8)
 800a95a:	46c0      	nop			; (mov r8, r8)
 800a95c:	46bd      	mov	sp, r7
 800a95e:	b002      	add	sp, #8
 800a960:	bd80      	pop	{r7, pc}
 800a962:	46c0      	nop			; (mov r8, r8)
 800a964:	20000010 	.word	0x20000010

0800a968 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a96c:	46c0      	nop			; (mov r8, r8)
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a980 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a980:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <pxCurrentTCBConst2>)
 800a982:	6813      	ldr	r3, [r2, #0]
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	3020      	adds	r0, #32
 800a988:	f380 8809 	msr	PSP, r0
 800a98c:	2002      	movs	r0, #2
 800a98e:	f380 8814 	msr	CONTROL, r0
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a998:	46ae      	mov	lr, r5
 800a99a:	bc08      	pop	{r3}
 800a99c:	bc04      	pop	{r2}
 800a99e:	b662      	cpsie	i
 800a9a0:	4718      	bx	r3
 800a9a2:	46c0      	nop			; (mov r8, r8)
 800a9a4:	46c0      	nop			; (mov r8, r8)
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	46c0      	nop			; (mov r8, r8)
 800a9aa:	46c0      	nop			; (mov r8, r8)
 800a9ac:	46c0      	nop			; (mov r8, r8)
 800a9ae:	46c0      	nop			; (mov r8, r8)

0800a9b0 <pxCurrentTCBConst2>:
 800a9b0:	20000f34 	.word	0x20000f34
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a9b4:	46c0      	nop			; (mov r8, r8)
 800a9b6:	46c0      	nop			; (mov r8, r8)

0800a9b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9bc:	4b0e      	ldr	r3, [pc, #56]	; (800a9f8 <xPortStartScheduler+0x40>)
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	4b0d      	ldr	r3, [pc, #52]	; (800a9f8 <xPortStartScheduler+0x40>)
 800a9c2:	21ff      	movs	r1, #255	; 0xff
 800a9c4:	0409      	lsls	r1, r1, #16
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9ca:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <xPortStartScheduler+0x40>)
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <xPortStartScheduler+0x40>)
 800a9d0:	21ff      	movs	r1, #255	; 0xff
 800a9d2:	0609      	lsls	r1, r1, #24
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9d8:	f000 f898 	bl	800ab0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9dc:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <xPortStartScheduler+0x44>)
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a9e2:	f7ff ffcd 	bl	800a980 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9e6:	f7fe ffbb 	bl	8009960 <vTaskSwitchContext>
	prvTaskExitError();
 800a9ea:	f7ff ffa5 	bl	800a938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	0018      	movs	r0, r3
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	46c0      	nop			; (mov r8, r8)
 800a9f8:	e000ed20 	.word	0xe000ed20
 800a9fc:	20000010 	.word	0x20000010

0800aa00 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <vPortYield+0x1c>)
 800aa06:	2280      	movs	r2, #128	; 0x80
 800aa08:	0552      	lsls	r2, r2, #21
 800aa0a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800aa0c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800aa10:	f3bf 8f6f 	isb	sy
}
 800aa14:	46c0      	nop			; (mov r8, r8)
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	46c0      	nop			; (mov r8, r8)
 800aa1c:	e000ed04 	.word	0xe000ed04

0800aa20 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800aa24:	b672      	cpsid	i
	uxCriticalNesting++;
 800aa26:	4b06      	ldr	r3, [pc, #24]	; (800aa40 <vPortEnterCritical+0x20>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <vPortEnterCritical+0x20>)
 800aa2e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800aa30:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800aa34:	f3bf 8f6f 	isb	sy
}
 800aa38:	46c0      	nop			; (mov r8, r8)
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	46c0      	nop			; (mov r8, r8)
 800aa40:	20000010 	.word	0x20000010

0800aa44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa48:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <vPortExitCritical+0x2c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <vPortExitCritical+0x10>
 800aa50:	b672      	cpsid	i
 800aa52:	e7fe      	b.n	800aa52 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800aa54:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <vPortExitCritical+0x2c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	1e5a      	subs	r2, r3, #1
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <vPortExitCritical+0x2c>)
 800aa5c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800aa5e:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <vPortExitCritical+0x2c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d100      	bne.n	800aa68 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800aa66:	b662      	cpsie	i
	}
}
 800aa68:	46c0      	nop			; (mov r8, r8)
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	20000010 	.word	0x20000010

0800aa74 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800aa74:	f3ef 8010 	mrs	r0, PRIMASK
 800aa78:	b672      	cpsid	i
 800aa7a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800aa7c:	46c0      	nop			; (mov r8, r8)
 800aa7e:	0018      	movs	r0, r3

0800aa80 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800aa80:	f380 8810 	msr	PRIMASK, r0
 800aa84:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800aa86:	46c0      	nop			; (mov r8, r8)
	...

0800aa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa90:	f3ef 8009 	mrs	r0, PSP
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <pxCurrentTCBConst>)
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	3820      	subs	r0, #32
 800aa9a:	6010      	str	r0, [r2, #0]
 800aa9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aa9e:	4644      	mov	r4, r8
 800aaa0:	464d      	mov	r5, r9
 800aaa2:	4656      	mov	r6, sl
 800aaa4:	465f      	mov	r7, fp
 800aaa6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aaa8:	b508      	push	{r3, lr}
 800aaaa:	b672      	cpsid	i
 800aaac:	f7fe ff58 	bl	8009960 <vTaskSwitchContext>
 800aab0:	b662      	cpsie	i
 800aab2:	bc0c      	pop	{r2, r3}
 800aab4:	6811      	ldr	r1, [r2, #0]
 800aab6:	6808      	ldr	r0, [r1, #0]
 800aab8:	3010      	adds	r0, #16
 800aaba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800aabc:	46a0      	mov	r8, r4
 800aabe:	46a9      	mov	r9, r5
 800aac0:	46b2      	mov	sl, r6
 800aac2:	46bb      	mov	fp, r7
 800aac4:	f380 8809 	msr	PSP, r0
 800aac8:	3820      	subs	r0, #32
 800aaca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800aacc:	4718      	bx	r3
 800aace:	46c0      	nop			; (mov r8, r8)

0800aad0 <pxCurrentTCBConst>:
 800aad0:	20000f34 	.word	0x20000f34
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800aad4:	46c0      	nop			; (mov r8, r8)
 800aad6:	46c0      	nop			; (mov r8, r8)

0800aad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800aade:	f7ff ffc9 	bl	800aa74 <ulSetInterruptMaskFromISR>
 800aae2:	0003      	movs	r3, r0
 800aae4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aae6:	f7fe fe8b 	bl	8009800 <xTaskIncrementTick>
 800aaea:	1e03      	subs	r3, r0, #0
 800aaec:	d003      	beq.n	800aaf6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aaee:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <xPortSysTickHandler+0x30>)
 800aaf0:	2280      	movs	r2, #128	; 0x80
 800aaf2:	0552      	lsls	r2, r2, #21
 800aaf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f7ff ffc1 	bl	800aa80 <vClearInterruptMaskFromISR>
}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	46bd      	mov	sp, r7
 800ab02:	b002      	add	sp, #8
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab10:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <vPortSetupTimerInterrupt+0x34>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <vPortSetupTimerInterrupt+0x38>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab1c:	4b0a      	ldr	r3, [pc, #40]	; (800ab48 <vPortSetupTimerInterrupt+0x3c>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	22fa      	movs	r2, #250	; 0xfa
 800ab22:	0091      	lsls	r1, r2, #2
 800ab24:	0018      	movs	r0, r3
 800ab26:	f7f5 fb0b 	bl	8000140 <__udivsi3>
 800ab2a:	0003      	movs	r3, r0
 800ab2c:	001a      	movs	r2, r3
 800ab2e:	4b07      	ldr	r3, [pc, #28]	; (800ab4c <vPortSetupTimerInterrupt+0x40>)
 800ab30:	3a01      	subs	r2, #1
 800ab32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ab34:	4b02      	ldr	r3, [pc, #8]	; (800ab40 <vPortSetupTimerInterrupt+0x34>)
 800ab36:	2207      	movs	r2, #7
 800ab38:	601a      	str	r2, [r3, #0]
}
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	e000e010 	.word	0xe000e010
 800ab44:	e000e018 	.word	0xe000e018
 800ab48:	20000004 	.word	0x20000004
 800ab4c:	e000e014 	.word	0xe000e014

0800ab50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800ab5c:	f7fe fdaa 	bl	80096b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab60:	4b4b      	ldr	r3, [pc, #300]	; (800ac90 <pvPortMalloc+0x140>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab68:	f000 f8ec 	bl	800ad44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab6c:	4b49      	ldr	r3, [pc, #292]	; (800ac94 <pvPortMalloc+0x144>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4013      	ands	r3, r2
 800ab74:	d000      	beq.n	800ab78 <pvPortMalloc+0x28>
 800ab76:	e07e      	b.n	800ac76 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d012      	beq.n	800aba4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800ab7e:	2208      	movs	r2, #8
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	189b      	adds	r3, r3, r2
 800ab84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2207      	movs	r2, #7
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	d00a      	beq.n	800aba4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2207      	movs	r2, #7
 800ab92:	4393      	bics	r3, r2
 800ab94:	3308      	adds	r3, #8
 800ab96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2207      	movs	r2, #7
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	d001      	beq.n	800aba4 <pvPortMalloc+0x54>
 800aba0:	b672      	cpsid	i
 800aba2:	e7fe      	b.n	800aba2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d065      	beq.n	800ac76 <pvPortMalloc+0x126>
 800abaa:	4b3b      	ldr	r3, [pc, #236]	; (800ac98 <pvPortMalloc+0x148>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d860      	bhi.n	800ac76 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abb4:	4b39      	ldr	r3, [pc, #228]	; (800ac9c <pvPortMalloc+0x14c>)
 800abb6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800abb8:	4b38      	ldr	r3, [pc, #224]	; (800ac9c <pvPortMalloc+0x14c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abbe:	e004      	b.n	800abca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d903      	bls.n	800abdc <pvPortMalloc+0x8c>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f1      	bne.n	800abc0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abdc:	4b2c      	ldr	r3, [pc, #176]	; (800ac90 <pvPortMalloc+0x140>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d047      	beq.n	800ac76 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2208      	movs	r2, #8
 800abec:	189b      	adds	r3, r3, r2
 800abee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	2308      	movs	r3, #8
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d916      	bls.n	800ac36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	18d3      	adds	r3, r2, r3
 800ac0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2207      	movs	r2, #7
 800ac14:	4013      	ands	r3, r2
 800ac16:	d001      	beq.n	800ac1c <pvPortMalloc+0xcc>
 800ac18:	b672      	cpsid	i
 800ac1a:	e7fe      	b.n	800ac1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	0018      	movs	r0, r3
 800ac32:	f000 f8e7 	bl	800ae04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac36:	4b18      	ldr	r3, [pc, #96]	; (800ac98 <pvPortMalloc+0x148>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <pvPortMalloc+0x148>)
 800ac42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac44:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <pvPortMalloc+0x148>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	4b15      	ldr	r3, [pc, #84]	; (800aca0 <pvPortMalloc+0x150>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d203      	bcs.n	800ac58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac50:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <pvPortMalloc+0x148>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	4b12      	ldr	r3, [pc, #72]	; (800aca0 <pvPortMalloc+0x150>)
 800ac56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <pvPortMalloc+0x144>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	431a      	orrs	r2, r3
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac6c:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <pvPortMalloc+0x154>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <pvPortMalloc+0x154>)
 800ac74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac76:	f7fe fd29 	bl	80096cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2207      	movs	r2, #7
 800ac7e:	4013      	ands	r3, r2
 800ac80:	d001      	beq.n	800ac86 <pvPortMalloc+0x136>
 800ac82:	b672      	cpsid	i
 800ac84:	e7fe      	b.n	800ac84 <pvPortMalloc+0x134>
	return pvReturn;
 800ac86:	68fb      	ldr	r3, [r7, #12]
}
 800ac88:	0018      	movs	r0, r3
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	b006      	add	sp, #24
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20002d68 	.word	0x20002d68
 800ac94:	20002d7c 	.word	0x20002d7c
 800ac98:	20002d6c 	.word	0x20002d6c
 800ac9c:	20002d60 	.word	0x20002d60
 800aca0:	20002d70 	.word	0x20002d70
 800aca4:	20002d74 	.word	0x20002d74

0800aca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d03a      	beq.n	800ad30 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acba:	2308      	movs	r3, #8
 800acbc:	425b      	negs	r3, r3
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	18d3      	adds	r3, r2, r3
 800acc2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	4b1a      	ldr	r3, [pc, #104]	; (800ad38 <vPortFree+0x90>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4013      	ands	r3, r2
 800acd2:	d101      	bne.n	800acd8 <vPortFree+0x30>
 800acd4:	b672      	cpsid	i
 800acd6:	e7fe      	b.n	800acd6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <vPortFree+0x3c>
 800ace0:	b672      	cpsid	i
 800ace2:	e7fe      	b.n	800ace2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	4b13      	ldr	r3, [pc, #76]	; (800ad38 <vPortFree+0x90>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4013      	ands	r3, r2
 800acee:	d01f      	beq.n	800ad30 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11b      	bne.n	800ad30 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <vPortFree+0x90>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	43db      	mvns	r3, r3
 800ad02:	401a      	ands	r2, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad08:	f7fe fcd4 	bl	80096b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <vPortFree+0x94>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	18d2      	adds	r2, r2, r3
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <vPortFree+0x94>)
 800ad18:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	f000 f871 	bl	800ae04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad22:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <vPortFree+0x98>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <vPortFree+0x98>)
 800ad2a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800ad2c:	f7fe fcce 	bl	80096cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad30:	46c0      	nop			; (mov r8, r8)
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b004      	add	sp, #16
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	20002d7c 	.word	0x20002d7c
 800ad3c:	20002d6c 	.word	0x20002d6c
 800ad40:	20002d78 	.word	0x20002d78

0800ad44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad4a:	23c0      	movs	r3, #192	; 0xc0
 800ad4c:	015b      	lsls	r3, r3, #5
 800ad4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad50:	4b26      	ldr	r3, [pc, #152]	; (800adec <prvHeapInit+0xa8>)
 800ad52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2207      	movs	r2, #7
 800ad58:	4013      	ands	r3, r2
 800ad5a:	d00c      	beq.n	800ad76 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3307      	adds	r3, #7
 800ad60:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2207      	movs	r2, #7
 800ad66:	4393      	bics	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	4b1e      	ldr	r3, [pc, #120]	; (800adec <prvHeapInit+0xa8>)
 800ad72:	18d3      	adds	r3, r2, r3
 800ad74:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad7a:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <prvHeapInit+0xac>)
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad80:	4b1b      	ldr	r3, [pc, #108]	; (800adf0 <prvHeapInit+0xac>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	18d3      	adds	r3, r2, r3
 800ad8c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad8e:	2208      	movs	r2, #8
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	1a9b      	subs	r3, r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2207      	movs	r2, #7
 800ad9a:	4393      	bics	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <prvHeapInit+0xb0>)
 800ada2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800ada4:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <prvHeapInit+0xb0>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2200      	movs	r2, #0
 800adaa:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adac:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <prvHeapInit+0xb0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	1ad2      	subs	r2, r2, r3
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adc2:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <prvHeapInit+0xb0>)
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <prvHeapInit+0xb4>)
 800add0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	4b09      	ldr	r3, [pc, #36]	; (800adfc <prvHeapInit+0xb8>)
 800add8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <prvHeapInit+0xbc>)
 800addc:	2280      	movs	r2, #128	; 0x80
 800adde:	0612      	lsls	r2, r2, #24
 800ade0:	601a      	str	r2, [r3, #0]
}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b004      	add	sp, #16
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	20001560 	.word	0x20001560
 800adf0:	20002d60 	.word	0x20002d60
 800adf4:	20002d68 	.word	0x20002d68
 800adf8:	20002d70 	.word	0x20002d70
 800adfc:	20002d6c 	.word	0x20002d6c
 800ae00:	20002d7c 	.word	0x20002d7c

0800ae04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae0c:	4b27      	ldr	r3, [pc, #156]	; (800aeac <prvInsertBlockIntoFreeList+0xa8>)
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	e002      	b.n	800ae18 <prvInsertBlockIntoFreeList+0x14>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d8f7      	bhi.n	800ae12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	18d3      	adds	r3, r2, r3
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d108      	bne.n	800ae46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	18d2      	adds	r2, r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	18d2      	adds	r2, r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d118      	bne.n	800ae8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <prvInsertBlockIntoFreeList+0xac>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d00d      	beq.n	800ae82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	18d2      	adds	r2, r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	e008      	b.n	800ae94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <prvInsertBlockIntoFreeList+0xac>)
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	e003      	b.n	800ae94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d002      	beq.n	800aea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aea2:	46c0      	nop			; (mov r8, r8)
 800aea4:	46bd      	mov	sp, r7
 800aea6:	b004      	add	sp, #16
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	46c0      	nop			; (mov r8, r8)
 800aeac:	20002d60 	.word	0x20002d60
 800aeb0:	20002d68 	.word	0x20002d68

0800aeb4 <__errno>:
 800aeb4:	4b01      	ldr	r3, [pc, #4]	; (800aebc <__errno+0x8>)
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	4770      	bx	lr
 800aeba:	46c0      	nop			; (mov r8, r8)
 800aebc:	20000014 	.word	0x20000014

0800aec0 <std>:
 800aec0:	2300      	movs	r3, #0
 800aec2:	b510      	push	{r4, lr}
 800aec4:	0004      	movs	r4, r0
 800aec6:	6003      	str	r3, [r0, #0]
 800aec8:	6043      	str	r3, [r0, #4]
 800aeca:	6083      	str	r3, [r0, #8]
 800aecc:	8181      	strh	r1, [r0, #12]
 800aece:	6643      	str	r3, [r0, #100]	; 0x64
 800aed0:	0019      	movs	r1, r3
 800aed2:	81c2      	strh	r2, [r0, #14]
 800aed4:	6103      	str	r3, [r0, #16]
 800aed6:	6143      	str	r3, [r0, #20]
 800aed8:	6183      	str	r3, [r0, #24]
 800aeda:	2208      	movs	r2, #8
 800aedc:	305c      	adds	r0, #92	; 0x5c
 800aede:	f000 f921 	bl	800b124 <memset>
 800aee2:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <std+0x38>)
 800aee4:	6224      	str	r4, [r4, #32]
 800aee6:	6263      	str	r3, [r4, #36]	; 0x24
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <std+0x3c>)
 800aeea:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <std+0x40>)
 800aeee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <std+0x44>)
 800aef2:	6323      	str	r3, [r4, #48]	; 0x30
 800aef4:	bd10      	pop	{r4, pc}
 800aef6:	46c0      	nop			; (mov r8, r8)
 800aef8:	0800bc8d 	.word	0x0800bc8d
 800aefc:	0800bcb5 	.word	0x0800bcb5
 800af00:	0800bced 	.word	0x0800bced
 800af04:	0800bd19 	.word	0x0800bd19

0800af08 <_cleanup_r>:
 800af08:	b510      	push	{r4, lr}
 800af0a:	4902      	ldr	r1, [pc, #8]	; (800af14 <_cleanup_r+0xc>)
 800af0c:	f000 f8ba 	bl	800b084 <_fwalk_reent>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	46c0      	nop			; (mov r8, r8)
 800af14:	0800cbd5 	.word	0x0800cbd5

0800af18 <__sfmoreglue>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	2568      	movs	r5, #104	; 0x68
 800af1c:	1e4a      	subs	r2, r1, #1
 800af1e:	4355      	muls	r5, r2
 800af20:	000e      	movs	r6, r1
 800af22:	0029      	movs	r1, r5
 800af24:	3174      	adds	r1, #116	; 0x74
 800af26:	f000 f927 	bl	800b178 <_malloc_r>
 800af2a:	1e04      	subs	r4, r0, #0
 800af2c:	d008      	beq.n	800af40 <__sfmoreglue+0x28>
 800af2e:	2100      	movs	r1, #0
 800af30:	002a      	movs	r2, r5
 800af32:	6001      	str	r1, [r0, #0]
 800af34:	6046      	str	r6, [r0, #4]
 800af36:	300c      	adds	r0, #12
 800af38:	60a0      	str	r0, [r4, #8]
 800af3a:	3268      	adds	r2, #104	; 0x68
 800af3c:	f000 f8f2 	bl	800b124 <memset>
 800af40:	0020      	movs	r0, r4
 800af42:	bd70      	pop	{r4, r5, r6, pc}

0800af44 <__sfp_lock_acquire>:
 800af44:	b510      	push	{r4, lr}
 800af46:	4802      	ldr	r0, [pc, #8]	; (800af50 <__sfp_lock_acquire+0xc>)
 800af48:	f000 f8e1 	bl	800b10e <__retarget_lock_acquire_recursive>
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	20002d81 	.word	0x20002d81

0800af54 <__sfp_lock_release>:
 800af54:	b510      	push	{r4, lr}
 800af56:	4802      	ldr	r0, [pc, #8]	; (800af60 <__sfp_lock_release+0xc>)
 800af58:	f000 f8da 	bl	800b110 <__retarget_lock_release_recursive>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	20002d81 	.word	0x20002d81

0800af64 <__sinit_lock_acquire>:
 800af64:	b510      	push	{r4, lr}
 800af66:	4802      	ldr	r0, [pc, #8]	; (800af70 <__sinit_lock_acquire+0xc>)
 800af68:	f000 f8d1 	bl	800b10e <__retarget_lock_acquire_recursive>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	46c0      	nop			; (mov r8, r8)
 800af70:	20002d82 	.word	0x20002d82

0800af74 <__sinit_lock_release>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4802      	ldr	r0, [pc, #8]	; (800af80 <__sinit_lock_release+0xc>)
 800af78:	f000 f8ca 	bl	800b110 <__retarget_lock_release_recursive>
 800af7c:	bd10      	pop	{r4, pc}
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	20002d82 	.word	0x20002d82

0800af84 <__sinit>:
 800af84:	b513      	push	{r0, r1, r4, lr}
 800af86:	0004      	movs	r4, r0
 800af88:	f7ff ffec 	bl	800af64 <__sinit_lock_acquire>
 800af8c:	69a3      	ldr	r3, [r4, #24]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <__sinit+0x14>
 800af92:	f7ff ffef 	bl	800af74 <__sinit_lock_release>
 800af96:	bd13      	pop	{r0, r1, r4, pc}
 800af98:	64a3      	str	r3, [r4, #72]	; 0x48
 800af9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800af9c:	6523      	str	r3, [r4, #80]	; 0x50
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <__sinit+0x68>)
 800afa0:	4a13      	ldr	r2, [pc, #76]	; (800aff0 <__sinit+0x6c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	d101      	bne.n	800afb0 <__sinit+0x2c>
 800afac:	2301      	movs	r3, #1
 800afae:	61a3      	str	r3, [r4, #24]
 800afb0:	0020      	movs	r0, r4
 800afb2:	f000 f81f 	bl	800aff4 <__sfp>
 800afb6:	6060      	str	r0, [r4, #4]
 800afb8:	0020      	movs	r0, r4
 800afba:	f000 f81b 	bl	800aff4 <__sfp>
 800afbe:	60a0      	str	r0, [r4, #8]
 800afc0:	0020      	movs	r0, r4
 800afc2:	f000 f817 	bl	800aff4 <__sfp>
 800afc6:	2200      	movs	r2, #0
 800afc8:	2104      	movs	r1, #4
 800afca:	60e0      	str	r0, [r4, #12]
 800afcc:	6860      	ldr	r0, [r4, #4]
 800afce:	f7ff ff77 	bl	800aec0 <std>
 800afd2:	2201      	movs	r2, #1
 800afd4:	2109      	movs	r1, #9
 800afd6:	68a0      	ldr	r0, [r4, #8]
 800afd8:	f7ff ff72 	bl	800aec0 <std>
 800afdc:	2202      	movs	r2, #2
 800afde:	2112      	movs	r1, #18
 800afe0:	68e0      	ldr	r0, [r4, #12]
 800afe2:	f7ff ff6d 	bl	800aec0 <std>
 800afe6:	2301      	movs	r3, #1
 800afe8:	61a3      	str	r3, [r4, #24]
 800afea:	e7d2      	b.n	800af92 <__sinit+0xe>
 800afec:	0800e324 	.word	0x0800e324
 800aff0:	0800af09 	.word	0x0800af09

0800aff4 <__sfp>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	0007      	movs	r7, r0
 800aff8:	f7ff ffa4 	bl	800af44 <__sfp_lock_acquire>
 800affc:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <__sfp+0x88>)
 800affe:	681e      	ldr	r6, [r3, #0]
 800b000:	69b3      	ldr	r3, [r6, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d102      	bne.n	800b00c <__sfp+0x18>
 800b006:	0030      	movs	r0, r6
 800b008:	f7ff ffbc 	bl	800af84 <__sinit>
 800b00c:	3648      	adds	r6, #72	; 0x48
 800b00e:	68b4      	ldr	r4, [r6, #8]
 800b010:	6873      	ldr	r3, [r6, #4]
 800b012:	3b01      	subs	r3, #1
 800b014:	d504      	bpl.n	800b020 <__sfp+0x2c>
 800b016:	6833      	ldr	r3, [r6, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d022      	beq.n	800b062 <__sfp+0x6e>
 800b01c:	6836      	ldr	r6, [r6, #0]
 800b01e:	e7f6      	b.n	800b00e <__sfp+0x1a>
 800b020:	220c      	movs	r2, #12
 800b022:	5ea5      	ldrsh	r5, [r4, r2]
 800b024:	2d00      	cmp	r5, #0
 800b026:	d11a      	bne.n	800b05e <__sfp+0x6a>
 800b028:	0020      	movs	r0, r4
 800b02a:	4b15      	ldr	r3, [pc, #84]	; (800b080 <__sfp+0x8c>)
 800b02c:	3058      	adds	r0, #88	; 0x58
 800b02e:	60e3      	str	r3, [r4, #12]
 800b030:	6665      	str	r5, [r4, #100]	; 0x64
 800b032:	f000 f86b 	bl	800b10c <__retarget_lock_init_recursive>
 800b036:	f7ff ff8d 	bl	800af54 <__sfp_lock_release>
 800b03a:	0020      	movs	r0, r4
 800b03c:	2208      	movs	r2, #8
 800b03e:	0029      	movs	r1, r5
 800b040:	6025      	str	r5, [r4, #0]
 800b042:	60a5      	str	r5, [r4, #8]
 800b044:	6065      	str	r5, [r4, #4]
 800b046:	6125      	str	r5, [r4, #16]
 800b048:	6165      	str	r5, [r4, #20]
 800b04a:	61a5      	str	r5, [r4, #24]
 800b04c:	305c      	adds	r0, #92	; 0x5c
 800b04e:	f000 f869 	bl	800b124 <memset>
 800b052:	6365      	str	r5, [r4, #52]	; 0x34
 800b054:	63a5      	str	r5, [r4, #56]	; 0x38
 800b056:	64a5      	str	r5, [r4, #72]	; 0x48
 800b058:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b05a:	0020      	movs	r0, r4
 800b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05e:	3468      	adds	r4, #104	; 0x68
 800b060:	e7d7      	b.n	800b012 <__sfp+0x1e>
 800b062:	2104      	movs	r1, #4
 800b064:	0038      	movs	r0, r7
 800b066:	f7ff ff57 	bl	800af18 <__sfmoreglue>
 800b06a:	1e04      	subs	r4, r0, #0
 800b06c:	6030      	str	r0, [r6, #0]
 800b06e:	d1d5      	bne.n	800b01c <__sfp+0x28>
 800b070:	f7ff ff70 	bl	800af54 <__sfp_lock_release>
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	e7ef      	b.n	800b05a <__sfp+0x66>
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	0800e324 	.word	0x0800e324
 800b080:	ffff0001 	.word	0xffff0001

0800b084 <_fwalk_reent>:
 800b084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b086:	0004      	movs	r4, r0
 800b088:	0006      	movs	r6, r0
 800b08a:	2700      	movs	r7, #0
 800b08c:	9101      	str	r1, [sp, #4]
 800b08e:	3448      	adds	r4, #72	; 0x48
 800b090:	6863      	ldr	r3, [r4, #4]
 800b092:	68a5      	ldr	r5, [r4, #8]
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	3b01      	subs	r3, #1
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	d504      	bpl.n	800b0a8 <_fwalk_reent+0x24>
 800b09e:	6824      	ldr	r4, [r4, #0]
 800b0a0:	2c00      	cmp	r4, #0
 800b0a2:	d1f5      	bne.n	800b090 <_fwalk_reent+0xc>
 800b0a4:	0038      	movs	r0, r7
 800b0a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d908      	bls.n	800b0c0 <_fwalk_reent+0x3c>
 800b0ae:	220e      	movs	r2, #14
 800b0b0:	5eab      	ldrsh	r3, [r5, r2]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	d004      	beq.n	800b0c0 <_fwalk_reent+0x3c>
 800b0b6:	0029      	movs	r1, r5
 800b0b8:	0030      	movs	r0, r6
 800b0ba:	9b01      	ldr	r3, [sp, #4]
 800b0bc:	4798      	blx	r3
 800b0be:	4307      	orrs	r7, r0
 800b0c0:	3568      	adds	r5, #104	; 0x68
 800b0c2:	e7e8      	b.n	800b096 <_fwalk_reent+0x12>

0800b0c4 <__libc_init_array>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	4d0c      	ldr	r5, [pc, #48]	; (800b0fc <__libc_init_array+0x38>)
 800b0ca:	4c0d      	ldr	r4, [pc, #52]	; (800b100 <__libc_init_array+0x3c>)
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	42a6      	cmp	r6, r4
 800b0d2:	d109      	bne.n	800b0e8 <__libc_init_array+0x24>
 800b0d4:	2600      	movs	r6, #0
 800b0d6:	f002 ff2d 	bl	800df34 <_init>
 800b0da:	4d0a      	ldr	r5, [pc, #40]	; (800b104 <__libc_init_array+0x40>)
 800b0dc:	4c0a      	ldr	r4, [pc, #40]	; (800b108 <__libc_init_array+0x44>)
 800b0de:	1b64      	subs	r4, r4, r5
 800b0e0:	10a4      	asrs	r4, r4, #2
 800b0e2:	42a6      	cmp	r6, r4
 800b0e4:	d105      	bne.n	800b0f2 <__libc_init_array+0x2e>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	00b3      	lsls	r3, r6, #2
 800b0ea:	58eb      	ldr	r3, [r5, r3]
 800b0ec:	4798      	blx	r3
 800b0ee:	3601      	adds	r6, #1
 800b0f0:	e7ee      	b.n	800b0d0 <__libc_init_array+0xc>
 800b0f2:	00b3      	lsls	r3, r6, #2
 800b0f4:	58eb      	ldr	r3, [r5, r3]
 800b0f6:	4798      	blx	r3
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	e7f2      	b.n	800b0e2 <__libc_init_array+0x1e>
 800b0fc:	0800e6a4 	.word	0x0800e6a4
 800b100:	0800e6a4 	.word	0x0800e6a4
 800b104:	0800e6a4 	.word	0x0800e6a4
 800b108:	0800e6a8 	.word	0x0800e6a8

0800b10c <__retarget_lock_init_recursive>:
 800b10c:	4770      	bx	lr

0800b10e <__retarget_lock_acquire_recursive>:
 800b10e:	4770      	bx	lr

0800b110 <__retarget_lock_release_recursive>:
 800b110:	4770      	bx	lr

0800b112 <memcpy>:
 800b112:	2300      	movs	r3, #0
 800b114:	b510      	push	{r4, lr}
 800b116:	429a      	cmp	r2, r3
 800b118:	d100      	bne.n	800b11c <memcpy+0xa>
 800b11a:	bd10      	pop	{r4, pc}
 800b11c:	5ccc      	ldrb	r4, [r1, r3]
 800b11e:	54c4      	strb	r4, [r0, r3]
 800b120:	3301      	adds	r3, #1
 800b122:	e7f8      	b.n	800b116 <memcpy+0x4>

0800b124 <memset>:
 800b124:	0003      	movs	r3, r0
 800b126:	1882      	adds	r2, r0, r2
 800b128:	4293      	cmp	r3, r2
 800b12a:	d100      	bne.n	800b12e <memset+0xa>
 800b12c:	4770      	bx	lr
 800b12e:	7019      	strb	r1, [r3, #0]
 800b130:	3301      	adds	r3, #1
 800b132:	e7f9      	b.n	800b128 <memset+0x4>

0800b134 <sbrk_aligned>:
 800b134:	b570      	push	{r4, r5, r6, lr}
 800b136:	4e0f      	ldr	r6, [pc, #60]	; (800b174 <sbrk_aligned+0x40>)
 800b138:	000d      	movs	r5, r1
 800b13a:	6831      	ldr	r1, [r6, #0]
 800b13c:	0004      	movs	r4, r0
 800b13e:	2900      	cmp	r1, #0
 800b140:	d102      	bne.n	800b148 <sbrk_aligned+0x14>
 800b142:	f000 fd71 	bl	800bc28 <_sbrk_r>
 800b146:	6030      	str	r0, [r6, #0]
 800b148:	0029      	movs	r1, r5
 800b14a:	0020      	movs	r0, r4
 800b14c:	f000 fd6c 	bl	800bc28 <_sbrk_r>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d00a      	beq.n	800b16a <sbrk_aligned+0x36>
 800b154:	2303      	movs	r3, #3
 800b156:	1cc5      	adds	r5, r0, #3
 800b158:	439d      	bics	r5, r3
 800b15a:	42a8      	cmp	r0, r5
 800b15c:	d007      	beq.n	800b16e <sbrk_aligned+0x3a>
 800b15e:	1a29      	subs	r1, r5, r0
 800b160:	0020      	movs	r0, r4
 800b162:	f000 fd61 	bl	800bc28 <_sbrk_r>
 800b166:	1c43      	adds	r3, r0, #1
 800b168:	d101      	bne.n	800b16e <sbrk_aligned+0x3a>
 800b16a:	2501      	movs	r5, #1
 800b16c:	426d      	negs	r5, r5
 800b16e:	0028      	movs	r0, r5
 800b170:	bd70      	pop	{r4, r5, r6, pc}
 800b172:	46c0      	nop			; (mov r8, r8)
 800b174:	20002d88 	.word	0x20002d88

0800b178 <_malloc_r>:
 800b178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b17a:	2203      	movs	r2, #3
 800b17c:	1ccb      	adds	r3, r1, #3
 800b17e:	4393      	bics	r3, r2
 800b180:	3308      	adds	r3, #8
 800b182:	0006      	movs	r6, r0
 800b184:	001f      	movs	r7, r3
 800b186:	2b0c      	cmp	r3, #12
 800b188:	d232      	bcs.n	800b1f0 <_malloc_r+0x78>
 800b18a:	270c      	movs	r7, #12
 800b18c:	42b9      	cmp	r1, r7
 800b18e:	d831      	bhi.n	800b1f4 <_malloc_r+0x7c>
 800b190:	0030      	movs	r0, r6
 800b192:	f001 fd8d 	bl	800ccb0 <__malloc_lock>
 800b196:	4d32      	ldr	r5, [pc, #200]	; (800b260 <_malloc_r+0xe8>)
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	001c      	movs	r4, r3
 800b19c:	2c00      	cmp	r4, #0
 800b19e:	d12e      	bne.n	800b1fe <_malloc_r+0x86>
 800b1a0:	0039      	movs	r1, r7
 800b1a2:	0030      	movs	r0, r6
 800b1a4:	f7ff ffc6 	bl	800b134 <sbrk_aligned>
 800b1a8:	0004      	movs	r4, r0
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	d11e      	bne.n	800b1ec <_malloc_r+0x74>
 800b1ae:	682c      	ldr	r4, [r5, #0]
 800b1b0:	0025      	movs	r5, r4
 800b1b2:	2d00      	cmp	r5, #0
 800b1b4:	d14a      	bne.n	800b24c <_malloc_r+0xd4>
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	0029      	movs	r1, r5
 800b1ba:	18e3      	adds	r3, r4, r3
 800b1bc:	0030      	movs	r0, r6
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	f000 fd32 	bl	800bc28 <_sbrk_r>
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	4283      	cmp	r3, r0
 800b1c8:	d143      	bne.n	800b252 <_malloc_r+0xda>
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	3703      	adds	r7, #3
 800b1ce:	1aff      	subs	r7, r7, r3
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	439f      	bics	r7, r3
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	2f0c      	cmp	r7, #12
 800b1d8:	d200      	bcs.n	800b1dc <_malloc_r+0x64>
 800b1da:	270c      	movs	r7, #12
 800b1dc:	0039      	movs	r1, r7
 800b1de:	0030      	movs	r0, r6
 800b1e0:	f7ff ffa8 	bl	800b134 <sbrk_aligned>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d034      	beq.n	800b252 <_malloc_r+0xda>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	19df      	adds	r7, r3, r7
 800b1ec:	6027      	str	r7, [r4, #0]
 800b1ee:	e013      	b.n	800b218 <_malloc_r+0xa0>
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dacb      	bge.n	800b18c <_malloc_r+0x14>
 800b1f4:	230c      	movs	r3, #12
 800b1f6:	2500      	movs	r5, #0
 800b1f8:	6033      	str	r3, [r6, #0]
 800b1fa:	0028      	movs	r0, r5
 800b1fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1fe:	6822      	ldr	r2, [r4, #0]
 800b200:	1bd1      	subs	r1, r2, r7
 800b202:	d420      	bmi.n	800b246 <_malloc_r+0xce>
 800b204:	290b      	cmp	r1, #11
 800b206:	d917      	bls.n	800b238 <_malloc_r+0xc0>
 800b208:	19e2      	adds	r2, r4, r7
 800b20a:	6027      	str	r7, [r4, #0]
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	d111      	bne.n	800b234 <_malloc_r+0xbc>
 800b210:	602a      	str	r2, [r5, #0]
 800b212:	6863      	ldr	r3, [r4, #4]
 800b214:	6011      	str	r1, [r2, #0]
 800b216:	6053      	str	r3, [r2, #4]
 800b218:	0030      	movs	r0, r6
 800b21a:	0025      	movs	r5, r4
 800b21c:	f001 fd50 	bl	800ccc0 <__malloc_unlock>
 800b220:	2207      	movs	r2, #7
 800b222:	350b      	adds	r5, #11
 800b224:	1d23      	adds	r3, r4, #4
 800b226:	4395      	bics	r5, r2
 800b228:	1aea      	subs	r2, r5, r3
 800b22a:	429d      	cmp	r5, r3
 800b22c:	d0e5      	beq.n	800b1fa <_malloc_r+0x82>
 800b22e:	1b5b      	subs	r3, r3, r5
 800b230:	50a3      	str	r3, [r4, r2]
 800b232:	e7e2      	b.n	800b1fa <_malloc_r+0x82>
 800b234:	605a      	str	r2, [r3, #4]
 800b236:	e7ec      	b.n	800b212 <_malloc_r+0x9a>
 800b238:	6862      	ldr	r2, [r4, #4]
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	d101      	bne.n	800b242 <_malloc_r+0xca>
 800b23e:	602a      	str	r2, [r5, #0]
 800b240:	e7ea      	b.n	800b218 <_malloc_r+0xa0>
 800b242:	605a      	str	r2, [r3, #4]
 800b244:	e7e8      	b.n	800b218 <_malloc_r+0xa0>
 800b246:	0023      	movs	r3, r4
 800b248:	6864      	ldr	r4, [r4, #4]
 800b24a:	e7a7      	b.n	800b19c <_malloc_r+0x24>
 800b24c:	002c      	movs	r4, r5
 800b24e:	686d      	ldr	r5, [r5, #4]
 800b250:	e7af      	b.n	800b1b2 <_malloc_r+0x3a>
 800b252:	230c      	movs	r3, #12
 800b254:	0030      	movs	r0, r6
 800b256:	6033      	str	r3, [r6, #0]
 800b258:	f001 fd32 	bl	800ccc0 <__malloc_unlock>
 800b25c:	e7cd      	b.n	800b1fa <_malloc_r+0x82>
 800b25e:	46c0      	nop			; (mov r8, r8)
 800b260:	20002d84 	.word	0x20002d84

0800b264 <__cvt>:
 800b264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b266:	001e      	movs	r6, r3
 800b268:	2300      	movs	r3, #0
 800b26a:	0014      	movs	r4, r2
 800b26c:	b08b      	sub	sp, #44	; 0x2c
 800b26e:	429e      	cmp	r6, r3
 800b270:	da04      	bge.n	800b27c <__cvt+0x18>
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	0609      	lsls	r1, r1, #24
 800b276:	1873      	adds	r3, r6, r1
 800b278:	001e      	movs	r6, r3
 800b27a:	232d      	movs	r3, #45	; 0x2d
 800b27c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b27e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b280:	7013      	strb	r3, [r2, #0]
 800b282:	2320      	movs	r3, #32
 800b284:	2203      	movs	r2, #3
 800b286:	439f      	bics	r7, r3
 800b288:	2f46      	cmp	r7, #70	; 0x46
 800b28a:	d007      	beq.n	800b29c <__cvt+0x38>
 800b28c:	003b      	movs	r3, r7
 800b28e:	3b45      	subs	r3, #69	; 0x45
 800b290:	4259      	negs	r1, r3
 800b292:	414b      	adcs	r3, r1
 800b294:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b296:	3a01      	subs	r2, #1
 800b298:	18cb      	adds	r3, r1, r3
 800b29a:	9310      	str	r3, [sp, #64]	; 0x40
 800b29c:	ab09      	add	r3, sp, #36	; 0x24
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	ab08      	add	r3, sp, #32
 800b2a2:	9303      	str	r3, [sp, #12]
 800b2a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2a6:	9200      	str	r2, [sp, #0]
 800b2a8:	9302      	str	r3, [sp, #8]
 800b2aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2ac:	0022      	movs	r2, r4
 800b2ae:	9301      	str	r3, [sp, #4]
 800b2b0:	0033      	movs	r3, r6
 800b2b2:	f000 fde9 	bl	800be88 <_dtoa_r>
 800b2b6:	0005      	movs	r5, r0
 800b2b8:	2f47      	cmp	r7, #71	; 0x47
 800b2ba:	d102      	bne.n	800b2c2 <__cvt+0x5e>
 800b2bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2be:	07db      	lsls	r3, r3, #31
 800b2c0:	d528      	bpl.n	800b314 <__cvt+0xb0>
 800b2c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2c4:	18eb      	adds	r3, r5, r3
 800b2c6:	9307      	str	r3, [sp, #28]
 800b2c8:	2f46      	cmp	r7, #70	; 0x46
 800b2ca:	d114      	bne.n	800b2f6 <__cvt+0x92>
 800b2cc:	782b      	ldrb	r3, [r5, #0]
 800b2ce:	2b30      	cmp	r3, #48	; 0x30
 800b2d0:	d10c      	bne.n	800b2ec <__cvt+0x88>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	0020      	movs	r0, r4
 800b2d8:	0031      	movs	r1, r6
 800b2da:	f7f5 f8b7 	bl	800044c <__aeabi_dcmpeq>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d104      	bne.n	800b2ec <__cvt+0x88>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2e6:	1a9b      	subs	r3, r3, r2
 800b2e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2ee:	9a07      	ldr	r2, [sp, #28]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	18d3      	adds	r3, r2, r3
 800b2f4:	9307      	str	r3, [sp, #28]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	0020      	movs	r0, r4
 800b2fc:	0031      	movs	r1, r6
 800b2fe:	f7f5 f8a5 	bl	800044c <__aeabi_dcmpeq>
 800b302:	2800      	cmp	r0, #0
 800b304:	d001      	beq.n	800b30a <__cvt+0xa6>
 800b306:	9b07      	ldr	r3, [sp, #28]
 800b308:	9309      	str	r3, [sp, #36]	; 0x24
 800b30a:	2230      	movs	r2, #48	; 0x30
 800b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30e:	9907      	ldr	r1, [sp, #28]
 800b310:	428b      	cmp	r3, r1
 800b312:	d306      	bcc.n	800b322 <__cvt+0xbe>
 800b314:	0028      	movs	r0, r5
 800b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b318:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b31a:	1b5b      	subs	r3, r3, r5
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	b00b      	add	sp, #44	; 0x2c
 800b320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b322:	1c59      	adds	r1, r3, #1
 800b324:	9109      	str	r1, [sp, #36]	; 0x24
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	e7f0      	b.n	800b30c <__cvt+0xa8>

0800b32a <__exponent>:
 800b32a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32c:	1c83      	adds	r3, r0, #2
 800b32e:	b087      	sub	sp, #28
 800b330:	9303      	str	r3, [sp, #12]
 800b332:	0005      	movs	r5, r0
 800b334:	000c      	movs	r4, r1
 800b336:	232b      	movs	r3, #43	; 0x2b
 800b338:	7002      	strb	r2, [r0, #0]
 800b33a:	2900      	cmp	r1, #0
 800b33c:	da01      	bge.n	800b342 <__exponent+0x18>
 800b33e:	424c      	negs	r4, r1
 800b340:	3302      	adds	r3, #2
 800b342:	706b      	strb	r3, [r5, #1]
 800b344:	2c09      	cmp	r4, #9
 800b346:	dd31      	ble.n	800b3ac <__exponent+0x82>
 800b348:	270a      	movs	r7, #10
 800b34a:	ab04      	add	r3, sp, #16
 800b34c:	1dde      	adds	r6, r3, #7
 800b34e:	0020      	movs	r0, r4
 800b350:	0039      	movs	r1, r7
 800b352:	9601      	str	r6, [sp, #4]
 800b354:	f7f5 f864 	bl	8000420 <__aeabi_idivmod>
 800b358:	3e01      	subs	r6, #1
 800b35a:	3130      	adds	r1, #48	; 0x30
 800b35c:	0020      	movs	r0, r4
 800b35e:	7031      	strb	r1, [r6, #0]
 800b360:	0039      	movs	r1, r7
 800b362:	9402      	str	r4, [sp, #8]
 800b364:	f7f4 ff76 	bl	8000254 <__divsi3>
 800b368:	9b02      	ldr	r3, [sp, #8]
 800b36a:	0004      	movs	r4, r0
 800b36c:	2b63      	cmp	r3, #99	; 0x63
 800b36e:	dcee      	bgt.n	800b34e <__exponent+0x24>
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	3430      	adds	r4, #48	; 0x30
 800b374:	1e9a      	subs	r2, r3, #2
 800b376:	0013      	movs	r3, r2
 800b378:	9903      	ldr	r1, [sp, #12]
 800b37a:	7014      	strb	r4, [r2, #0]
 800b37c:	a804      	add	r0, sp, #16
 800b37e:	3007      	adds	r0, #7
 800b380:	4298      	cmp	r0, r3
 800b382:	d80e      	bhi.n	800b3a2 <__exponent+0x78>
 800b384:	ab04      	add	r3, sp, #16
 800b386:	3307      	adds	r3, #7
 800b388:	2000      	movs	r0, #0
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d804      	bhi.n	800b398 <__exponent+0x6e>
 800b38e:	ab04      	add	r3, sp, #16
 800b390:	3009      	adds	r0, #9
 800b392:	18c0      	adds	r0, r0, r3
 800b394:	9b01      	ldr	r3, [sp, #4]
 800b396:	1ac0      	subs	r0, r0, r3
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	1818      	adds	r0, r3, r0
 800b39c:	1b40      	subs	r0, r0, r5
 800b39e:	b007      	add	sp, #28
 800b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3a2:	7818      	ldrb	r0, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	7008      	strb	r0, [r1, #0]
 800b3a8:	3101      	adds	r1, #1
 800b3aa:	e7e7      	b.n	800b37c <__exponent+0x52>
 800b3ac:	2330      	movs	r3, #48	; 0x30
 800b3ae:	18e4      	adds	r4, r4, r3
 800b3b0:	70ab      	strb	r3, [r5, #2]
 800b3b2:	1d28      	adds	r0, r5, #4
 800b3b4:	70ec      	strb	r4, [r5, #3]
 800b3b6:	e7f1      	b.n	800b39c <__exponent+0x72>

0800b3b8 <_printf_float>:
 800b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ba:	b095      	sub	sp, #84	; 0x54
 800b3bc:	000c      	movs	r4, r1
 800b3be:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c0:	001e      	movs	r6, r3
 800b3c2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b3c4:	0007      	movs	r7, r0
 800b3c6:	f001 fc45 	bl	800cc54 <_localeconv_r>
 800b3ca:	6803      	ldr	r3, [r0, #0]
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b3d0:	f7f4 fe9a 	bl	8000108 <strlen>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	9312      	str	r3, [sp, #72]	; 0x48
 800b3d8:	7e23      	ldrb	r3, [r4, #24]
 800b3da:	2207      	movs	r2, #7
 800b3dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	900e      	str	r0, [sp, #56]	; 0x38
 800b3e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b3e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	05c9      	lsls	r1, r1, #23
 800b3ea:	d547      	bpl.n	800b47c <_printf_float+0xc4>
 800b3ec:	189b      	adds	r3, r3, r2
 800b3ee:	4393      	bics	r3, r2
 800b3f0:	001a      	movs	r2, r3
 800b3f2:	3208      	adds	r2, #8
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	64a2      	str	r2, [r4, #72]	; 0x48
 800b3fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b3fe:	2201      	movs	r2, #1
 800b400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b402:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b404:	930b      	str	r3, [sp, #44]	; 0x2c
 800b406:	006b      	lsls	r3, r5, #1
 800b408:	085b      	lsrs	r3, r3, #1
 800b40a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b40c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b40e:	4ba7      	ldr	r3, [pc, #668]	; (800b6ac <_printf_float+0x2f4>)
 800b410:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b412:	4252      	negs	r2, r2
 800b414:	f7f6 ffd6 	bl	80023c4 <__aeabi_dcmpun>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d131      	bne.n	800b480 <_printf_float+0xc8>
 800b41c:	2201      	movs	r2, #1
 800b41e:	4ba3      	ldr	r3, [pc, #652]	; (800b6ac <_printf_float+0x2f4>)
 800b420:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b422:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b424:	4252      	negs	r2, r2
 800b426:	f7f5 f821 	bl	800046c <__aeabi_dcmple>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d128      	bne.n	800b480 <_printf_float+0xc8>
 800b42e:	2200      	movs	r2, #0
 800b430:	2300      	movs	r3, #0
 800b432:	0029      	movs	r1, r5
 800b434:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b436:	f7f5 f80f 	bl	8000458 <__aeabi_dcmplt>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d003      	beq.n	800b446 <_printf_float+0x8e>
 800b43e:	0023      	movs	r3, r4
 800b440:	222d      	movs	r2, #45	; 0x2d
 800b442:	3343      	adds	r3, #67	; 0x43
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b448:	4d99      	ldr	r5, [pc, #612]	; (800b6b0 <_printf_float+0x2f8>)
 800b44a:	2b47      	cmp	r3, #71	; 0x47
 800b44c:	d900      	bls.n	800b450 <_printf_float+0x98>
 800b44e:	4d99      	ldr	r5, [pc, #612]	; (800b6b4 <_printf_float+0x2fc>)
 800b450:	2303      	movs	r3, #3
 800b452:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b454:	6123      	str	r3, [r4, #16]
 800b456:	3301      	adds	r3, #1
 800b458:	439a      	bics	r2, r3
 800b45a:	2300      	movs	r3, #0
 800b45c:	6022      	str	r2, [r4, #0]
 800b45e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b462:	0021      	movs	r1, r4
 800b464:	0038      	movs	r0, r7
 800b466:	9600      	str	r6, [sp, #0]
 800b468:	aa13      	add	r2, sp, #76	; 0x4c
 800b46a:	f000 f9e7 	bl	800b83c <_printf_common>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	d000      	beq.n	800b474 <_printf_float+0xbc>
 800b472:	e0a2      	b.n	800b5ba <_printf_float+0x202>
 800b474:	2001      	movs	r0, #1
 800b476:	4240      	negs	r0, r0
 800b478:	b015      	add	sp, #84	; 0x54
 800b47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47c:	3307      	adds	r3, #7
 800b47e:	e7b6      	b.n	800b3ee <_printf_float+0x36>
 800b480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b482:	002b      	movs	r3, r5
 800b484:	0010      	movs	r0, r2
 800b486:	0029      	movs	r1, r5
 800b488:	f7f6 ff9c 	bl	80023c4 <__aeabi_dcmpun>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d00b      	beq.n	800b4a8 <_printf_float+0xf0>
 800b490:	2d00      	cmp	r5, #0
 800b492:	da03      	bge.n	800b49c <_printf_float+0xe4>
 800b494:	0023      	movs	r3, r4
 800b496:	222d      	movs	r2, #45	; 0x2d
 800b498:	3343      	adds	r3, #67	; 0x43
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b49e:	4d86      	ldr	r5, [pc, #536]	; (800b6b8 <_printf_float+0x300>)
 800b4a0:	2b47      	cmp	r3, #71	; 0x47
 800b4a2:	d9d5      	bls.n	800b450 <_printf_float+0x98>
 800b4a4:	4d85      	ldr	r5, [pc, #532]	; (800b6bc <_printf_float+0x304>)
 800b4a6:	e7d3      	b.n	800b450 <_printf_float+0x98>
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4ac:	6863      	ldr	r3, [r4, #4]
 800b4ae:	4391      	bics	r1, r2
 800b4b0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	d149      	bne.n	800b54a <_printf_float+0x192>
 800b4b6:	3307      	adds	r3, #7
 800b4b8:	6063      	str	r3, [r4, #4]
 800b4ba:	2380      	movs	r3, #128	; 0x80
 800b4bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	9206      	str	r2, [sp, #24]
 800b4c6:	aa12      	add	r2, sp, #72	; 0x48
 800b4c8:	9205      	str	r2, [sp, #20]
 800b4ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4cc:	a908      	add	r1, sp, #32
 800b4ce:	9204      	str	r2, [sp, #16]
 800b4d0:	aa11      	add	r2, sp, #68	; 0x44
 800b4d2:	9203      	str	r2, [sp, #12]
 800b4d4:	2223      	movs	r2, #35	; 0x23
 800b4d6:	6023      	str	r3, [r4, #0]
 800b4d8:	9301      	str	r3, [sp, #4]
 800b4da:	6863      	ldr	r3, [r4, #4]
 800b4dc:	1852      	adds	r2, r2, r1
 800b4de:	9202      	str	r2, [sp, #8]
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	0038      	movs	r0, r7
 800b4e4:	002b      	movs	r3, r5
 800b4e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4e8:	f7ff febc 	bl	800b264 <__cvt>
 800b4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ee:	0005      	movs	r5, r0
 800b4f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b4f2:	2b47      	cmp	r3, #71	; 0x47
 800b4f4:	d108      	bne.n	800b508 <_printf_float+0x150>
 800b4f6:	1ccb      	adds	r3, r1, #3
 800b4f8:	db02      	blt.n	800b500 <_printf_float+0x148>
 800b4fa:	6863      	ldr	r3, [r4, #4]
 800b4fc:	4299      	cmp	r1, r3
 800b4fe:	dd48      	ble.n	800b592 <_printf_float+0x1da>
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	3b02      	subs	r3, #2
 800b504:	b2db      	uxtb	r3, r3
 800b506:	930a      	str	r3, [sp, #40]	; 0x28
 800b508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b50a:	2b65      	cmp	r3, #101	; 0x65
 800b50c:	d824      	bhi.n	800b558 <_printf_float+0x1a0>
 800b50e:	0020      	movs	r0, r4
 800b510:	001a      	movs	r2, r3
 800b512:	3901      	subs	r1, #1
 800b514:	3050      	adds	r0, #80	; 0x50
 800b516:	9111      	str	r1, [sp, #68]	; 0x44
 800b518:	f7ff ff07 	bl	800b32a <__exponent>
 800b51c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b51e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b520:	1813      	adds	r3, r2, r0
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	2a01      	cmp	r2, #1
 800b526:	dc02      	bgt.n	800b52e <_printf_float+0x176>
 800b528:	6822      	ldr	r2, [r4, #0]
 800b52a:	07d2      	lsls	r2, r2, #31
 800b52c:	d501      	bpl.n	800b532 <_printf_float+0x17a>
 800b52e:	3301      	adds	r3, #1
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	2323      	movs	r3, #35	; 0x23
 800b534:	aa08      	add	r2, sp, #32
 800b536:	189b      	adds	r3, r3, r2
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d100      	bne.n	800b540 <_printf_float+0x188>
 800b53e:	e78f      	b.n	800b460 <_printf_float+0xa8>
 800b540:	0023      	movs	r3, r4
 800b542:	222d      	movs	r2, #45	; 0x2d
 800b544:	3343      	adds	r3, #67	; 0x43
 800b546:	701a      	strb	r2, [r3, #0]
 800b548:	e78a      	b.n	800b460 <_printf_float+0xa8>
 800b54a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b54c:	2a47      	cmp	r2, #71	; 0x47
 800b54e:	d1b4      	bne.n	800b4ba <_printf_float+0x102>
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1b2      	bne.n	800b4ba <_printf_float+0x102>
 800b554:	3301      	adds	r3, #1
 800b556:	e7af      	b.n	800b4b8 <_printf_float+0x100>
 800b558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55a:	2b66      	cmp	r3, #102	; 0x66
 800b55c:	d11b      	bne.n	800b596 <_printf_float+0x1de>
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	2900      	cmp	r1, #0
 800b562:	dd0d      	ble.n	800b580 <_printf_float+0x1c8>
 800b564:	6121      	str	r1, [r4, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d102      	bne.n	800b570 <_printf_float+0x1b8>
 800b56a:	6822      	ldr	r2, [r4, #0]
 800b56c:	07d2      	lsls	r2, r2, #31
 800b56e:	d502      	bpl.n	800b576 <_printf_float+0x1be>
 800b570:	3301      	adds	r3, #1
 800b572:	1859      	adds	r1, r3, r1
 800b574:	6121      	str	r1, [r4, #16]
 800b576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b578:	65a3      	str	r3, [r4, #88]	; 0x58
 800b57a:	2300      	movs	r3, #0
 800b57c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b57e:	e7d8      	b.n	800b532 <_printf_float+0x17a>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <_printf_float+0x1d4>
 800b584:	2201      	movs	r2, #1
 800b586:	6821      	ldr	r1, [r4, #0]
 800b588:	4211      	tst	r1, r2
 800b58a:	d000      	beq.n	800b58e <_printf_float+0x1d6>
 800b58c:	1c9a      	adds	r2, r3, #2
 800b58e:	6122      	str	r2, [r4, #16]
 800b590:	e7f1      	b.n	800b576 <_printf_float+0x1be>
 800b592:	2367      	movs	r3, #103	; 0x67
 800b594:	930a      	str	r3, [sp, #40]	; 0x28
 800b596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b59a:	4293      	cmp	r3, r2
 800b59c:	db06      	blt.n	800b5ac <_printf_float+0x1f4>
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	6123      	str	r3, [r4, #16]
 800b5a2:	07d2      	lsls	r2, r2, #31
 800b5a4:	d5e7      	bpl.n	800b576 <_printf_float+0x1be>
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	e7e4      	b.n	800b576 <_printf_float+0x1be>
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dc01      	bgt.n	800b5b6 <_printf_float+0x1fe>
 800b5b2:	1849      	adds	r1, r1, r1
 800b5b4:	1ac9      	subs	r1, r1, r3
 800b5b6:	1852      	adds	r2, r2, r1
 800b5b8:	e7e9      	b.n	800b58e <_printf_float+0x1d6>
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	0553      	lsls	r3, r2, #21
 800b5be:	d407      	bmi.n	800b5d0 <_printf_float+0x218>
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	002a      	movs	r2, r5
 800b5c4:	0038      	movs	r0, r7
 800b5c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5c8:	47b0      	blx	r6
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	d128      	bne.n	800b620 <_printf_float+0x268>
 800b5ce:	e751      	b.n	800b474 <_printf_float+0xbc>
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d2:	2b65      	cmp	r3, #101	; 0x65
 800b5d4:	d800      	bhi.n	800b5d8 <_printf_float+0x220>
 800b5d6:	e0e1      	b.n	800b79c <_printf_float+0x3e4>
 800b5d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b5da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f7f4 ff34 	bl	800044c <__aeabi_dcmpeq>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d031      	beq.n	800b64c <_printf_float+0x294>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	0038      	movs	r0, r7
 800b5ec:	4a34      	ldr	r2, [pc, #208]	; (800b6c0 <_printf_float+0x308>)
 800b5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5f0:	47b0      	blx	r6
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d100      	bne.n	800b5f8 <_printf_float+0x240>
 800b5f6:	e73d      	b.n	800b474 <_printf_float+0xbc>
 800b5f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	db02      	blt.n	800b606 <_printf_float+0x24e>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	07db      	lsls	r3, r3, #31
 800b604:	d50c      	bpl.n	800b620 <_printf_float+0x268>
 800b606:	0038      	movs	r0, r7
 800b608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b60a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b60c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b60e:	47b0      	blx	r6
 800b610:	2500      	movs	r5, #0
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	d100      	bne.n	800b618 <_printf_float+0x260>
 800b616:	e72d      	b.n	800b474 <_printf_float+0xbc>
 800b618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b61a:	3b01      	subs	r3, #1
 800b61c:	42ab      	cmp	r3, r5
 800b61e:	dc0a      	bgt.n	800b636 <_printf_float+0x27e>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	079b      	lsls	r3, r3, #30
 800b624:	d500      	bpl.n	800b628 <_printf_float+0x270>
 800b626:	e106      	b.n	800b836 <_printf_float+0x47e>
 800b628:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b62a:	68e0      	ldr	r0, [r4, #12]
 800b62c:	4298      	cmp	r0, r3
 800b62e:	db00      	blt.n	800b632 <_printf_float+0x27a>
 800b630:	e722      	b.n	800b478 <_printf_float+0xc0>
 800b632:	0018      	movs	r0, r3
 800b634:	e720      	b.n	800b478 <_printf_float+0xc0>
 800b636:	0022      	movs	r2, r4
 800b638:	2301      	movs	r3, #1
 800b63a:	0038      	movs	r0, r7
 800b63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b63e:	321a      	adds	r2, #26
 800b640:	47b0      	blx	r6
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d100      	bne.n	800b648 <_printf_float+0x290>
 800b646:	e715      	b.n	800b474 <_printf_float+0xbc>
 800b648:	3501      	adds	r5, #1
 800b64a:	e7e5      	b.n	800b618 <_printf_float+0x260>
 800b64c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b64e:	2b00      	cmp	r3, #0
 800b650:	dc38      	bgt.n	800b6c4 <_printf_float+0x30c>
 800b652:	2301      	movs	r3, #1
 800b654:	0038      	movs	r0, r7
 800b656:	4a1a      	ldr	r2, [pc, #104]	; (800b6c0 <_printf_float+0x308>)
 800b658:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b65a:	47b0      	blx	r6
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d100      	bne.n	800b662 <_printf_float+0x2aa>
 800b660:	e708      	b.n	800b474 <_printf_float+0xbc>
 800b662:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b666:	4313      	orrs	r3, r2
 800b668:	d102      	bne.n	800b670 <_printf_float+0x2b8>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	07db      	lsls	r3, r3, #31
 800b66e:	d5d7      	bpl.n	800b620 <_printf_float+0x268>
 800b670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b672:	0038      	movs	r0, r7
 800b674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b676:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b678:	47b0      	blx	r6
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	d100      	bne.n	800b680 <_printf_float+0x2c8>
 800b67e:	e6f9      	b.n	800b474 <_printf_float+0xbc>
 800b680:	2300      	movs	r3, #0
 800b682:	930a      	str	r3, [sp, #40]	; 0x28
 800b684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b688:	425b      	negs	r3, r3
 800b68a:	4293      	cmp	r3, r2
 800b68c:	dc01      	bgt.n	800b692 <_printf_float+0x2da>
 800b68e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b690:	e797      	b.n	800b5c2 <_printf_float+0x20a>
 800b692:	0022      	movs	r2, r4
 800b694:	2301      	movs	r3, #1
 800b696:	0038      	movs	r0, r7
 800b698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b69a:	321a      	adds	r2, #26
 800b69c:	47b0      	blx	r6
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d100      	bne.n	800b6a4 <_printf_float+0x2ec>
 800b6a2:	e6e7      	b.n	800b474 <_printf_float+0xbc>
 800b6a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	e7eb      	b.n	800b682 <_printf_float+0x2ca>
 800b6aa:	46c0      	nop			; (mov r8, r8)
 800b6ac:	7fefffff 	.word	0x7fefffff
 800b6b0:	0800e328 	.word	0x0800e328
 800b6b4:	0800e32c 	.word	0x0800e32c
 800b6b8:	0800e330 	.word	0x0800e330
 800b6bc:	0800e334 	.word	0x0800e334
 800b6c0:	0800e338 	.word	0x0800e338
 800b6c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	dd00      	ble.n	800b6d0 <_printf_float+0x318>
 800b6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dc3c      	bgt.n	800b750 <_printf_float+0x398>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6dc:	43db      	mvns	r3, r3
 800b6de:	17db      	asrs	r3, r3, #31
 800b6e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	dc34      	bgt.n	800b760 <_printf_float+0x3a8>
 800b6f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	db3d      	blt.n	800b77a <_printf_float+0x3c2>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	07db      	lsls	r3, r3, #31
 800b702:	d43a      	bmi.n	800b77a <_printf_float+0x3c2>
 800b704:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b708:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	1a52      	subs	r2, r2, r1
 800b70e:	920a      	str	r2, [sp, #40]	; 0x28
 800b710:	429a      	cmp	r2, r3
 800b712:	dd00      	ble.n	800b716 <_printf_float+0x35e>
 800b714:	930a      	str	r3, [sp, #40]	; 0x28
 800b716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b718:	2b00      	cmp	r3, #0
 800b71a:	dc36      	bgt.n	800b78a <_printf_float+0x3d2>
 800b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b71e:	2500      	movs	r5, #0
 800b720:	43db      	mvns	r3, r3
 800b722:	17db      	asrs	r3, r3, #31
 800b724:	930b      	str	r3, [sp, #44]	; 0x2c
 800b726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b72a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b730:	400a      	ands	r2, r1
 800b732:	1a9b      	subs	r3, r3, r2
 800b734:	42ab      	cmp	r3, r5
 800b736:	dc00      	bgt.n	800b73a <_printf_float+0x382>
 800b738:	e772      	b.n	800b620 <_printf_float+0x268>
 800b73a:	0022      	movs	r2, r4
 800b73c:	2301      	movs	r3, #1
 800b73e:	0038      	movs	r0, r7
 800b740:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b742:	321a      	adds	r2, #26
 800b744:	47b0      	blx	r6
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d100      	bne.n	800b74c <_printf_float+0x394>
 800b74a:	e693      	b.n	800b474 <_printf_float+0xbc>
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7ea      	b.n	800b726 <_printf_float+0x36e>
 800b750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b752:	002a      	movs	r2, r5
 800b754:	0038      	movs	r0, r7
 800b756:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b758:	47b0      	blx	r6
 800b75a:	1c43      	adds	r3, r0, #1
 800b75c:	d1bb      	bne.n	800b6d6 <_printf_float+0x31e>
 800b75e:	e689      	b.n	800b474 <_printf_float+0xbc>
 800b760:	0022      	movs	r2, r4
 800b762:	2301      	movs	r3, #1
 800b764:	0038      	movs	r0, r7
 800b766:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b768:	321a      	adds	r2, #26
 800b76a:	47b0      	blx	r6
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d100      	bne.n	800b772 <_printf_float+0x3ba>
 800b770:	e680      	b.n	800b474 <_printf_float+0xbc>
 800b772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b774:	3301      	adds	r3, #1
 800b776:	930d      	str	r3, [sp, #52]	; 0x34
 800b778:	e7b3      	b.n	800b6e2 <_printf_float+0x32a>
 800b77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b77c:	0038      	movs	r0, r7
 800b77e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b780:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b782:	47b0      	blx	r6
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d1bd      	bne.n	800b704 <_printf_float+0x34c>
 800b788:	e674      	b.n	800b474 <_printf_float+0xbc>
 800b78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b78c:	0038      	movs	r0, r7
 800b78e:	18ea      	adds	r2, r5, r3
 800b790:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b794:	47b0      	blx	r6
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d1c0      	bne.n	800b71c <_printf_float+0x364>
 800b79a:	e66b      	b.n	800b474 <_printf_float+0xbc>
 800b79c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	dc02      	bgt.n	800b7a8 <_printf_float+0x3f0>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	421a      	tst	r2, r3
 800b7a6:	d034      	beq.n	800b812 <_printf_float+0x45a>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	002a      	movs	r2, r5
 800b7ac:	0038      	movs	r0, r7
 800b7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b0:	47b0      	blx	r6
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	d100      	bne.n	800b7b8 <_printf_float+0x400>
 800b7b6:	e65d      	b.n	800b474 <_printf_float+0xbc>
 800b7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7ba:	0038      	movs	r0, r7
 800b7bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7c0:	47b0      	blx	r6
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	d100      	bne.n	800b7c8 <_printf_float+0x410>
 800b7c6:	e655      	b.n	800b474 <_printf_float+0xbc>
 800b7c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b7ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f7f4 fe3c 	bl	800044c <__aeabi_dcmpeq>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d11a      	bne.n	800b80e <_printf_float+0x456>
 800b7d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7da:	1c6a      	adds	r2, r5, #1
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	0038      	movs	r0, r7
 800b7e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7e2:	47b0      	blx	r6
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d10e      	bne.n	800b806 <_printf_float+0x44e>
 800b7e8:	e644      	b.n	800b474 <_printf_float+0xbc>
 800b7ea:	0022      	movs	r2, r4
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	0038      	movs	r0, r7
 800b7f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7f2:	321a      	adds	r2, #26
 800b7f4:	47b0      	blx	r6
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	d100      	bne.n	800b7fc <_printf_float+0x444>
 800b7fa:	e63b      	b.n	800b474 <_printf_float+0xbc>
 800b7fc:	3501      	adds	r5, #1
 800b7fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b800:	3b01      	subs	r3, #1
 800b802:	42ab      	cmp	r3, r5
 800b804:	dcf1      	bgt.n	800b7ea <_printf_float+0x432>
 800b806:	0022      	movs	r2, r4
 800b808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80a:	3250      	adds	r2, #80	; 0x50
 800b80c:	e6da      	b.n	800b5c4 <_printf_float+0x20c>
 800b80e:	2500      	movs	r5, #0
 800b810:	e7f5      	b.n	800b7fe <_printf_float+0x446>
 800b812:	002a      	movs	r2, r5
 800b814:	e7e3      	b.n	800b7de <_printf_float+0x426>
 800b816:	0022      	movs	r2, r4
 800b818:	2301      	movs	r3, #1
 800b81a:	0038      	movs	r0, r7
 800b81c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b81e:	3219      	adds	r2, #25
 800b820:	47b0      	blx	r6
 800b822:	1c43      	adds	r3, r0, #1
 800b824:	d100      	bne.n	800b828 <_printf_float+0x470>
 800b826:	e625      	b.n	800b474 <_printf_float+0xbc>
 800b828:	3501      	adds	r5, #1
 800b82a:	68e3      	ldr	r3, [r4, #12]
 800b82c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b82e:	1a9b      	subs	r3, r3, r2
 800b830:	42ab      	cmp	r3, r5
 800b832:	dcf0      	bgt.n	800b816 <_printf_float+0x45e>
 800b834:	e6f8      	b.n	800b628 <_printf_float+0x270>
 800b836:	2500      	movs	r5, #0
 800b838:	e7f7      	b.n	800b82a <_printf_float+0x472>
 800b83a:	46c0      	nop			; (mov r8, r8)

0800b83c <_printf_common>:
 800b83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b83e:	0015      	movs	r5, r2
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	688a      	ldr	r2, [r1, #8]
 800b844:	690b      	ldr	r3, [r1, #16]
 800b846:	000c      	movs	r4, r1
 800b848:	9000      	str	r0, [sp, #0]
 800b84a:	4293      	cmp	r3, r2
 800b84c:	da00      	bge.n	800b850 <_printf_common+0x14>
 800b84e:	0013      	movs	r3, r2
 800b850:	0022      	movs	r2, r4
 800b852:	602b      	str	r3, [r5, #0]
 800b854:	3243      	adds	r2, #67	; 0x43
 800b856:	7812      	ldrb	r2, [r2, #0]
 800b858:	2a00      	cmp	r2, #0
 800b85a:	d001      	beq.n	800b860 <_printf_common+0x24>
 800b85c:	3301      	adds	r3, #1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	069b      	lsls	r3, r3, #26
 800b864:	d502      	bpl.n	800b86c <_printf_common+0x30>
 800b866:	682b      	ldr	r3, [r5, #0]
 800b868:	3302      	adds	r3, #2
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	6822      	ldr	r2, [r4, #0]
 800b86e:	2306      	movs	r3, #6
 800b870:	0017      	movs	r7, r2
 800b872:	401f      	ands	r7, r3
 800b874:	421a      	tst	r2, r3
 800b876:	d027      	beq.n	800b8c8 <_printf_common+0x8c>
 800b878:	0023      	movs	r3, r4
 800b87a:	3343      	adds	r3, #67	; 0x43
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	1e5a      	subs	r2, r3, #1
 800b880:	4193      	sbcs	r3, r2
 800b882:	6822      	ldr	r2, [r4, #0]
 800b884:	0692      	lsls	r2, r2, #26
 800b886:	d430      	bmi.n	800b8ea <_printf_common+0xae>
 800b888:	0022      	movs	r2, r4
 800b88a:	9901      	ldr	r1, [sp, #4]
 800b88c:	9800      	ldr	r0, [sp, #0]
 800b88e:	9e08      	ldr	r6, [sp, #32]
 800b890:	3243      	adds	r2, #67	; 0x43
 800b892:	47b0      	blx	r6
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d025      	beq.n	800b8e4 <_printf_common+0xa8>
 800b898:	2306      	movs	r3, #6
 800b89a:	6820      	ldr	r0, [r4, #0]
 800b89c:	682a      	ldr	r2, [r5, #0]
 800b89e:	68e1      	ldr	r1, [r4, #12]
 800b8a0:	2500      	movs	r5, #0
 800b8a2:	4003      	ands	r3, r0
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d103      	bne.n	800b8b0 <_printf_common+0x74>
 800b8a8:	1a8d      	subs	r5, r1, r2
 800b8aa:	43eb      	mvns	r3, r5
 800b8ac:	17db      	asrs	r3, r3, #31
 800b8ae:	401d      	ands	r5, r3
 800b8b0:	68a3      	ldr	r3, [r4, #8]
 800b8b2:	6922      	ldr	r2, [r4, #16]
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	dd01      	ble.n	800b8bc <_printf_common+0x80>
 800b8b8:	1a9b      	subs	r3, r3, r2
 800b8ba:	18ed      	adds	r5, r5, r3
 800b8bc:	2700      	movs	r7, #0
 800b8be:	42bd      	cmp	r5, r7
 800b8c0:	d120      	bne.n	800b904 <_printf_common+0xc8>
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e010      	b.n	800b8e8 <_printf_common+0xac>
 800b8c6:	3701      	adds	r7, #1
 800b8c8:	68e3      	ldr	r3, [r4, #12]
 800b8ca:	682a      	ldr	r2, [r5, #0]
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	42bb      	cmp	r3, r7
 800b8d0:	ddd2      	ble.n	800b878 <_printf_common+0x3c>
 800b8d2:	0022      	movs	r2, r4
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	9901      	ldr	r1, [sp, #4]
 800b8d8:	9800      	ldr	r0, [sp, #0]
 800b8da:	9e08      	ldr	r6, [sp, #32]
 800b8dc:	3219      	adds	r2, #25
 800b8de:	47b0      	blx	r6
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d1f0      	bne.n	800b8c6 <_printf_common+0x8a>
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	4240      	negs	r0, r0
 800b8e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8ea:	2030      	movs	r0, #48	; 0x30
 800b8ec:	18e1      	adds	r1, r4, r3
 800b8ee:	3143      	adds	r1, #67	; 0x43
 800b8f0:	7008      	strb	r0, [r1, #0]
 800b8f2:	0021      	movs	r1, r4
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	3145      	adds	r1, #69	; 0x45
 800b8f8:	7809      	ldrb	r1, [r1, #0]
 800b8fa:	18a2      	adds	r2, r4, r2
 800b8fc:	3243      	adds	r2, #67	; 0x43
 800b8fe:	3302      	adds	r3, #2
 800b900:	7011      	strb	r1, [r2, #0]
 800b902:	e7c1      	b.n	800b888 <_printf_common+0x4c>
 800b904:	0022      	movs	r2, r4
 800b906:	2301      	movs	r3, #1
 800b908:	9901      	ldr	r1, [sp, #4]
 800b90a:	9800      	ldr	r0, [sp, #0]
 800b90c:	9e08      	ldr	r6, [sp, #32]
 800b90e:	321a      	adds	r2, #26
 800b910:	47b0      	blx	r6
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	d0e6      	beq.n	800b8e4 <_printf_common+0xa8>
 800b916:	3701      	adds	r7, #1
 800b918:	e7d1      	b.n	800b8be <_printf_common+0x82>
	...

0800b91c <_printf_i>:
 800b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b91e:	b08b      	sub	sp, #44	; 0x2c
 800b920:	9206      	str	r2, [sp, #24]
 800b922:	000a      	movs	r2, r1
 800b924:	3243      	adds	r2, #67	; 0x43
 800b926:	9307      	str	r3, [sp, #28]
 800b928:	9005      	str	r0, [sp, #20]
 800b92a:	9204      	str	r2, [sp, #16]
 800b92c:	7e0a      	ldrb	r2, [r1, #24]
 800b92e:	000c      	movs	r4, r1
 800b930:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b932:	2a78      	cmp	r2, #120	; 0x78
 800b934:	d807      	bhi.n	800b946 <_printf_i+0x2a>
 800b936:	2a62      	cmp	r2, #98	; 0x62
 800b938:	d809      	bhi.n	800b94e <_printf_i+0x32>
 800b93a:	2a00      	cmp	r2, #0
 800b93c:	d100      	bne.n	800b940 <_printf_i+0x24>
 800b93e:	e0c1      	b.n	800bac4 <_printf_i+0x1a8>
 800b940:	2a58      	cmp	r2, #88	; 0x58
 800b942:	d100      	bne.n	800b946 <_printf_i+0x2a>
 800b944:	e08c      	b.n	800ba60 <_printf_i+0x144>
 800b946:	0026      	movs	r6, r4
 800b948:	3642      	adds	r6, #66	; 0x42
 800b94a:	7032      	strb	r2, [r6, #0]
 800b94c:	e022      	b.n	800b994 <_printf_i+0x78>
 800b94e:	0010      	movs	r0, r2
 800b950:	3863      	subs	r0, #99	; 0x63
 800b952:	2815      	cmp	r0, #21
 800b954:	d8f7      	bhi.n	800b946 <_printf_i+0x2a>
 800b956:	f7f4 fbe9 	bl	800012c <__gnu_thumb1_case_shi>
 800b95a:	0016      	.short	0x0016
 800b95c:	fff6001f 	.word	0xfff6001f
 800b960:	fff6fff6 	.word	0xfff6fff6
 800b964:	001ffff6 	.word	0x001ffff6
 800b968:	fff6fff6 	.word	0xfff6fff6
 800b96c:	fff6fff6 	.word	0xfff6fff6
 800b970:	003600a8 	.word	0x003600a8
 800b974:	fff6009a 	.word	0xfff6009a
 800b978:	00b9fff6 	.word	0x00b9fff6
 800b97c:	0036fff6 	.word	0x0036fff6
 800b980:	fff6fff6 	.word	0xfff6fff6
 800b984:	009e      	.short	0x009e
 800b986:	0026      	movs	r6, r4
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	3642      	adds	r6, #66	; 0x42
 800b98c:	1d11      	adds	r1, r2, #4
 800b98e:	6019      	str	r1, [r3, #0]
 800b990:	6813      	ldr	r3, [r2, #0]
 800b992:	7033      	strb	r3, [r6, #0]
 800b994:	2301      	movs	r3, #1
 800b996:	e0a7      	b.n	800bae8 <_printf_i+0x1cc>
 800b998:	6808      	ldr	r0, [r1, #0]
 800b99a:	6819      	ldr	r1, [r3, #0]
 800b99c:	1d0a      	adds	r2, r1, #4
 800b99e:	0605      	lsls	r5, r0, #24
 800b9a0:	d50b      	bpl.n	800b9ba <_printf_i+0x9e>
 800b9a2:	680d      	ldr	r5, [r1, #0]
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	da03      	bge.n	800b9b2 <_printf_i+0x96>
 800b9aa:	232d      	movs	r3, #45	; 0x2d
 800b9ac:	9a04      	ldr	r2, [sp, #16]
 800b9ae:	426d      	negs	r5, r5
 800b9b0:	7013      	strb	r3, [r2, #0]
 800b9b2:	4b61      	ldr	r3, [pc, #388]	; (800bb38 <_printf_i+0x21c>)
 800b9b4:	270a      	movs	r7, #10
 800b9b6:	9303      	str	r3, [sp, #12]
 800b9b8:	e01b      	b.n	800b9f2 <_printf_i+0xd6>
 800b9ba:	680d      	ldr	r5, [r1, #0]
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	0641      	lsls	r1, r0, #25
 800b9c0:	d5f1      	bpl.n	800b9a6 <_printf_i+0x8a>
 800b9c2:	b22d      	sxth	r5, r5
 800b9c4:	e7ef      	b.n	800b9a6 <_printf_i+0x8a>
 800b9c6:	680d      	ldr	r5, [r1, #0]
 800b9c8:	6819      	ldr	r1, [r3, #0]
 800b9ca:	1d08      	adds	r0, r1, #4
 800b9cc:	6018      	str	r0, [r3, #0]
 800b9ce:	062e      	lsls	r6, r5, #24
 800b9d0:	d501      	bpl.n	800b9d6 <_printf_i+0xba>
 800b9d2:	680d      	ldr	r5, [r1, #0]
 800b9d4:	e003      	b.n	800b9de <_printf_i+0xc2>
 800b9d6:	066d      	lsls	r5, r5, #25
 800b9d8:	d5fb      	bpl.n	800b9d2 <_printf_i+0xb6>
 800b9da:	680d      	ldr	r5, [r1, #0]
 800b9dc:	b2ad      	uxth	r5, r5
 800b9de:	4b56      	ldr	r3, [pc, #344]	; (800bb38 <_printf_i+0x21c>)
 800b9e0:	2708      	movs	r7, #8
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	2a6f      	cmp	r2, #111	; 0x6f
 800b9e6:	d000      	beq.n	800b9ea <_printf_i+0xce>
 800b9e8:	3702      	adds	r7, #2
 800b9ea:	0023      	movs	r3, r4
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	3343      	adds	r3, #67	; 0x43
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	6863      	ldr	r3, [r4, #4]
 800b9f4:	60a3      	str	r3, [r4, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	db03      	blt.n	800ba02 <_printf_i+0xe6>
 800b9fa:	2204      	movs	r2, #4
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	4391      	bics	r1, r2
 800ba00:	6021      	str	r1, [r4, #0]
 800ba02:	2d00      	cmp	r5, #0
 800ba04:	d102      	bne.n	800ba0c <_printf_i+0xf0>
 800ba06:	9e04      	ldr	r6, [sp, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00c      	beq.n	800ba26 <_printf_i+0x10a>
 800ba0c:	9e04      	ldr	r6, [sp, #16]
 800ba0e:	0028      	movs	r0, r5
 800ba10:	0039      	movs	r1, r7
 800ba12:	f7f4 fc1b 	bl	800024c <__aeabi_uidivmod>
 800ba16:	9b03      	ldr	r3, [sp, #12]
 800ba18:	3e01      	subs	r6, #1
 800ba1a:	5c5b      	ldrb	r3, [r3, r1]
 800ba1c:	7033      	strb	r3, [r6, #0]
 800ba1e:	002b      	movs	r3, r5
 800ba20:	0005      	movs	r5, r0
 800ba22:	429f      	cmp	r7, r3
 800ba24:	d9f3      	bls.n	800ba0e <_printf_i+0xf2>
 800ba26:	2f08      	cmp	r7, #8
 800ba28:	d109      	bne.n	800ba3e <_printf_i+0x122>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	07db      	lsls	r3, r3, #31
 800ba2e:	d506      	bpl.n	800ba3e <_printf_i+0x122>
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	6922      	ldr	r2, [r4, #16]
 800ba34:	4293      	cmp	r3, r2
 800ba36:	dc02      	bgt.n	800ba3e <_printf_i+0x122>
 800ba38:	2330      	movs	r3, #48	; 0x30
 800ba3a:	3e01      	subs	r6, #1
 800ba3c:	7033      	strb	r3, [r6, #0]
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	1b9b      	subs	r3, r3, r6
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	9b07      	ldr	r3, [sp, #28]
 800ba46:	0021      	movs	r1, r4
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	9805      	ldr	r0, [sp, #20]
 800ba4c:	9b06      	ldr	r3, [sp, #24]
 800ba4e:	aa09      	add	r2, sp, #36	; 0x24
 800ba50:	f7ff fef4 	bl	800b83c <_printf_common>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d14c      	bne.n	800baf2 <_printf_i+0x1d6>
 800ba58:	2001      	movs	r0, #1
 800ba5a:	4240      	negs	r0, r0
 800ba5c:	b00b      	add	sp, #44	; 0x2c
 800ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba60:	3145      	adds	r1, #69	; 0x45
 800ba62:	700a      	strb	r2, [r1, #0]
 800ba64:	4a34      	ldr	r2, [pc, #208]	; (800bb38 <_printf_i+0x21c>)
 800ba66:	9203      	str	r2, [sp, #12]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	6821      	ldr	r1, [r4, #0]
 800ba6c:	ca20      	ldmia	r2!, {r5}
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	0608      	lsls	r0, r1, #24
 800ba72:	d516      	bpl.n	800baa2 <_printf_i+0x186>
 800ba74:	07cb      	lsls	r3, r1, #31
 800ba76:	d502      	bpl.n	800ba7e <_printf_i+0x162>
 800ba78:	2320      	movs	r3, #32
 800ba7a:	4319      	orrs	r1, r3
 800ba7c:	6021      	str	r1, [r4, #0]
 800ba7e:	2710      	movs	r7, #16
 800ba80:	2d00      	cmp	r5, #0
 800ba82:	d1b2      	bne.n	800b9ea <_printf_i+0xce>
 800ba84:	2320      	movs	r3, #32
 800ba86:	6822      	ldr	r2, [r4, #0]
 800ba88:	439a      	bics	r2, r3
 800ba8a:	6022      	str	r2, [r4, #0]
 800ba8c:	e7ad      	b.n	800b9ea <_printf_i+0xce>
 800ba8e:	2220      	movs	r2, #32
 800ba90:	6809      	ldr	r1, [r1, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	6022      	str	r2, [r4, #0]
 800ba96:	0022      	movs	r2, r4
 800ba98:	2178      	movs	r1, #120	; 0x78
 800ba9a:	3245      	adds	r2, #69	; 0x45
 800ba9c:	7011      	strb	r1, [r2, #0]
 800ba9e:	4a27      	ldr	r2, [pc, #156]	; (800bb3c <_printf_i+0x220>)
 800baa0:	e7e1      	b.n	800ba66 <_printf_i+0x14a>
 800baa2:	0648      	lsls	r0, r1, #25
 800baa4:	d5e6      	bpl.n	800ba74 <_printf_i+0x158>
 800baa6:	b2ad      	uxth	r5, r5
 800baa8:	e7e4      	b.n	800ba74 <_printf_i+0x158>
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	680d      	ldr	r5, [r1, #0]
 800baae:	1d10      	adds	r0, r2, #4
 800bab0:	6949      	ldr	r1, [r1, #20]
 800bab2:	6018      	str	r0, [r3, #0]
 800bab4:	6813      	ldr	r3, [r2, #0]
 800bab6:	062e      	lsls	r6, r5, #24
 800bab8:	d501      	bpl.n	800babe <_printf_i+0x1a2>
 800baba:	6019      	str	r1, [r3, #0]
 800babc:	e002      	b.n	800bac4 <_printf_i+0x1a8>
 800babe:	066d      	lsls	r5, r5, #25
 800bac0:	d5fb      	bpl.n	800baba <_printf_i+0x19e>
 800bac2:	8019      	strh	r1, [r3, #0]
 800bac4:	2300      	movs	r3, #0
 800bac6:	9e04      	ldr	r6, [sp, #16]
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	e7bb      	b.n	800ba44 <_printf_i+0x128>
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	1d11      	adds	r1, r2, #4
 800bad0:	6019      	str	r1, [r3, #0]
 800bad2:	6816      	ldr	r6, [r2, #0]
 800bad4:	2100      	movs	r1, #0
 800bad6:	0030      	movs	r0, r6
 800bad8:	6862      	ldr	r2, [r4, #4]
 800bada:	f001 f8dd 	bl	800cc98 <memchr>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d001      	beq.n	800bae6 <_printf_i+0x1ca>
 800bae2:	1b80      	subs	r0, r0, r6
 800bae4:	6060      	str	r0, [r4, #4]
 800bae6:	6863      	ldr	r3, [r4, #4]
 800bae8:	6123      	str	r3, [r4, #16]
 800baea:	2300      	movs	r3, #0
 800baec:	9a04      	ldr	r2, [sp, #16]
 800baee:	7013      	strb	r3, [r2, #0]
 800baf0:	e7a8      	b.n	800ba44 <_printf_i+0x128>
 800baf2:	6923      	ldr	r3, [r4, #16]
 800baf4:	0032      	movs	r2, r6
 800baf6:	9906      	ldr	r1, [sp, #24]
 800baf8:	9805      	ldr	r0, [sp, #20]
 800bafa:	9d07      	ldr	r5, [sp, #28]
 800bafc:	47a8      	blx	r5
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d0aa      	beq.n	800ba58 <_printf_i+0x13c>
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	079b      	lsls	r3, r3, #30
 800bb06:	d415      	bmi.n	800bb34 <_printf_i+0x218>
 800bb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0a:	68e0      	ldr	r0, [r4, #12]
 800bb0c:	4298      	cmp	r0, r3
 800bb0e:	daa5      	bge.n	800ba5c <_printf_i+0x140>
 800bb10:	0018      	movs	r0, r3
 800bb12:	e7a3      	b.n	800ba5c <_printf_i+0x140>
 800bb14:	0022      	movs	r2, r4
 800bb16:	2301      	movs	r3, #1
 800bb18:	9906      	ldr	r1, [sp, #24]
 800bb1a:	9805      	ldr	r0, [sp, #20]
 800bb1c:	9e07      	ldr	r6, [sp, #28]
 800bb1e:	3219      	adds	r2, #25
 800bb20:	47b0      	blx	r6
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d098      	beq.n	800ba58 <_printf_i+0x13c>
 800bb26:	3501      	adds	r5, #1
 800bb28:	68e3      	ldr	r3, [r4, #12]
 800bb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb2c:	1a9b      	subs	r3, r3, r2
 800bb2e:	42ab      	cmp	r3, r5
 800bb30:	dcf0      	bgt.n	800bb14 <_printf_i+0x1f8>
 800bb32:	e7e9      	b.n	800bb08 <_printf_i+0x1ec>
 800bb34:	2500      	movs	r5, #0
 800bb36:	e7f7      	b.n	800bb28 <_printf_i+0x20c>
 800bb38:	0800e33a 	.word	0x0800e33a
 800bb3c:	0800e34b 	.word	0x0800e34b

0800bb40 <cleanup_glue>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	000d      	movs	r5, r1
 800bb44:	6809      	ldr	r1, [r1, #0]
 800bb46:	0004      	movs	r4, r0
 800bb48:	2900      	cmp	r1, #0
 800bb4a:	d001      	beq.n	800bb50 <cleanup_glue+0x10>
 800bb4c:	f7ff fff8 	bl	800bb40 <cleanup_glue>
 800bb50:	0029      	movs	r1, r5
 800bb52:	0020      	movs	r0, r4
 800bb54:	f001 fc84 	bl	800d460 <_free_r>
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb5c <_reclaim_reent>:
 800bb5c:	4b31      	ldr	r3, [pc, #196]	; (800bc24 <_reclaim_reent+0xc8>)
 800bb5e:	b570      	push	{r4, r5, r6, lr}
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	0004      	movs	r4, r0
 800bb64:	4283      	cmp	r3, r0
 800bb66:	d049      	beq.n	800bbfc <_reclaim_reent+0xa0>
 800bb68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00a      	beq.n	800bb84 <_reclaim_reent+0x28>
 800bb6e:	2500      	movs	r5, #0
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	42ab      	cmp	r3, r5
 800bb74:	d147      	bne.n	800bc06 <_reclaim_reent+0xaa>
 800bb76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb78:	6819      	ldr	r1, [r3, #0]
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	d002      	beq.n	800bb84 <_reclaim_reent+0x28>
 800bb7e:	0020      	movs	r0, r4
 800bb80:	f001 fc6e 	bl	800d460 <_free_r>
 800bb84:	6961      	ldr	r1, [r4, #20]
 800bb86:	2900      	cmp	r1, #0
 800bb88:	d002      	beq.n	800bb90 <_reclaim_reent+0x34>
 800bb8a:	0020      	movs	r0, r4
 800bb8c:	f001 fc68 	bl	800d460 <_free_r>
 800bb90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb92:	2900      	cmp	r1, #0
 800bb94:	d002      	beq.n	800bb9c <_reclaim_reent+0x40>
 800bb96:	0020      	movs	r0, r4
 800bb98:	f001 fc62 	bl	800d460 <_free_r>
 800bb9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb9e:	2900      	cmp	r1, #0
 800bba0:	d002      	beq.n	800bba8 <_reclaim_reent+0x4c>
 800bba2:	0020      	movs	r0, r4
 800bba4:	f001 fc5c 	bl	800d460 <_free_r>
 800bba8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	d002      	beq.n	800bbb4 <_reclaim_reent+0x58>
 800bbae:	0020      	movs	r0, r4
 800bbb0:	f001 fc56 	bl	800d460 <_free_r>
 800bbb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bbb6:	2900      	cmp	r1, #0
 800bbb8:	d002      	beq.n	800bbc0 <_reclaim_reent+0x64>
 800bbba:	0020      	movs	r0, r4
 800bbbc:	f001 fc50 	bl	800d460 <_free_r>
 800bbc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d002      	beq.n	800bbcc <_reclaim_reent+0x70>
 800bbc6:	0020      	movs	r0, r4
 800bbc8:	f001 fc4a 	bl	800d460 <_free_r>
 800bbcc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d002      	beq.n	800bbd8 <_reclaim_reent+0x7c>
 800bbd2:	0020      	movs	r0, r4
 800bbd4:	f001 fc44 	bl	800d460 <_free_r>
 800bbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbda:	2900      	cmp	r1, #0
 800bbdc:	d002      	beq.n	800bbe4 <_reclaim_reent+0x88>
 800bbde:	0020      	movs	r0, r4
 800bbe0:	f001 fc3e 	bl	800d460 <_free_r>
 800bbe4:	69a3      	ldr	r3, [r4, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d008      	beq.n	800bbfc <_reclaim_reent+0xa0>
 800bbea:	0020      	movs	r0, r4
 800bbec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbee:	4798      	blx	r3
 800bbf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	d002      	beq.n	800bbfc <_reclaim_reent+0xa0>
 800bbf6:	0020      	movs	r0, r4
 800bbf8:	f7ff ffa2 	bl	800bb40 <cleanup_glue>
 800bbfc:	bd70      	pop	{r4, r5, r6, pc}
 800bbfe:	5949      	ldr	r1, [r1, r5]
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d108      	bne.n	800bc16 <_reclaim_reent+0xba>
 800bc04:	3504      	adds	r5, #4
 800bc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc08:	68d9      	ldr	r1, [r3, #12]
 800bc0a:	2d80      	cmp	r5, #128	; 0x80
 800bc0c:	d1f7      	bne.n	800bbfe <_reclaim_reent+0xa2>
 800bc0e:	0020      	movs	r0, r4
 800bc10:	f001 fc26 	bl	800d460 <_free_r>
 800bc14:	e7af      	b.n	800bb76 <_reclaim_reent+0x1a>
 800bc16:	680e      	ldr	r6, [r1, #0]
 800bc18:	0020      	movs	r0, r4
 800bc1a:	f001 fc21 	bl	800d460 <_free_r>
 800bc1e:	0031      	movs	r1, r6
 800bc20:	e7ee      	b.n	800bc00 <_reclaim_reent+0xa4>
 800bc22:	46c0      	nop			; (mov r8, r8)
 800bc24:	20000014 	.word	0x20000014

0800bc28 <_sbrk_r>:
 800bc28:	2300      	movs	r3, #0
 800bc2a:	b570      	push	{r4, r5, r6, lr}
 800bc2c:	4d06      	ldr	r5, [pc, #24]	; (800bc48 <_sbrk_r+0x20>)
 800bc2e:	0004      	movs	r4, r0
 800bc30:	0008      	movs	r0, r1
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	f7f7 fcfc 	bl	8003630 <_sbrk>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d103      	bne.n	800bc44 <_sbrk_r+0x1c>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d000      	beq.n	800bc44 <_sbrk_r+0x1c>
 800bc42:	6023      	str	r3, [r4, #0]
 800bc44:	bd70      	pop	{r4, r5, r6, pc}
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	20002d8c 	.word	0x20002d8c

0800bc4c <siprintf>:
 800bc4c:	b40e      	push	{r1, r2, r3}
 800bc4e:	b500      	push	{lr}
 800bc50:	490b      	ldr	r1, [pc, #44]	; (800bc80 <siprintf+0x34>)
 800bc52:	b09c      	sub	sp, #112	; 0x70
 800bc54:	ab1d      	add	r3, sp, #116	; 0x74
 800bc56:	9002      	str	r0, [sp, #8]
 800bc58:	9006      	str	r0, [sp, #24]
 800bc5a:	9107      	str	r1, [sp, #28]
 800bc5c:	9104      	str	r1, [sp, #16]
 800bc5e:	4809      	ldr	r0, [pc, #36]	; (800bc84 <siprintf+0x38>)
 800bc60:	4909      	ldr	r1, [pc, #36]	; (800bc88 <siprintf+0x3c>)
 800bc62:	cb04      	ldmia	r3!, {r2}
 800bc64:	9105      	str	r1, [sp, #20]
 800bc66:	6800      	ldr	r0, [r0, #0]
 800bc68:	a902      	add	r1, sp, #8
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	f001 fca4 	bl	800d5b8 <_svfiprintf_r>
 800bc70:	2300      	movs	r3, #0
 800bc72:	9a02      	ldr	r2, [sp, #8]
 800bc74:	7013      	strb	r3, [r2, #0]
 800bc76:	b01c      	add	sp, #112	; 0x70
 800bc78:	bc08      	pop	{r3}
 800bc7a:	b003      	add	sp, #12
 800bc7c:	4718      	bx	r3
 800bc7e:	46c0      	nop			; (mov r8, r8)
 800bc80:	7fffffff 	.word	0x7fffffff
 800bc84:	20000014 	.word	0x20000014
 800bc88:	ffff0208 	.word	0xffff0208

0800bc8c <__sread>:
 800bc8c:	b570      	push	{r4, r5, r6, lr}
 800bc8e:	000c      	movs	r4, r1
 800bc90:	250e      	movs	r5, #14
 800bc92:	5f49      	ldrsh	r1, [r1, r5]
 800bc94:	f001 fd90 	bl	800d7b8 <_read_r>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	db03      	blt.n	800bca4 <__sread+0x18>
 800bc9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bc9e:	181b      	adds	r3, r3, r0
 800bca0:	6563      	str	r3, [r4, #84]	; 0x54
 800bca2:	bd70      	pop	{r4, r5, r6, pc}
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	4a02      	ldr	r2, [pc, #8]	; (800bcb0 <__sread+0x24>)
 800bca8:	4013      	ands	r3, r2
 800bcaa:	81a3      	strh	r3, [r4, #12]
 800bcac:	e7f9      	b.n	800bca2 <__sread+0x16>
 800bcae:	46c0      	nop			; (mov r8, r8)
 800bcb0:	ffffefff 	.word	0xffffefff

0800bcb4 <__swrite>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	001f      	movs	r7, r3
 800bcb8:	898b      	ldrh	r3, [r1, #12]
 800bcba:	0005      	movs	r5, r0
 800bcbc:	000c      	movs	r4, r1
 800bcbe:	0016      	movs	r6, r2
 800bcc0:	05db      	lsls	r3, r3, #23
 800bcc2:	d505      	bpl.n	800bcd0 <__swrite+0x1c>
 800bcc4:	230e      	movs	r3, #14
 800bcc6:	5ec9      	ldrsh	r1, [r1, r3]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2302      	movs	r3, #2
 800bccc:	f000 ffc6 	bl	800cc5c <_lseek_r>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	4a05      	ldr	r2, [pc, #20]	; (800bce8 <__swrite+0x34>)
 800bcd4:	0028      	movs	r0, r5
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	0032      	movs	r2, r6
 800bcdc:	230e      	movs	r3, #14
 800bcde:	5ee1      	ldrsh	r1, [r4, r3]
 800bce0:	003b      	movs	r3, r7
 800bce2:	f000 f81f 	bl	800bd24 <_write_r>
 800bce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce8:	ffffefff 	.word	0xffffefff

0800bcec <__sseek>:
 800bcec:	b570      	push	{r4, r5, r6, lr}
 800bcee:	000c      	movs	r4, r1
 800bcf0:	250e      	movs	r5, #14
 800bcf2:	5f49      	ldrsh	r1, [r1, r5]
 800bcf4:	f000 ffb2 	bl	800cc5c <_lseek_r>
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	1c42      	adds	r2, r0, #1
 800bcfc:	d103      	bne.n	800bd06 <__sseek+0x1a>
 800bcfe:	4a05      	ldr	r2, [pc, #20]	; (800bd14 <__sseek+0x28>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	bd70      	pop	{r4, r5, r6, pc}
 800bd06:	2280      	movs	r2, #128	; 0x80
 800bd08:	0152      	lsls	r2, r2, #5
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	81a3      	strh	r3, [r4, #12]
 800bd0e:	6560      	str	r0, [r4, #84]	; 0x54
 800bd10:	e7f8      	b.n	800bd04 <__sseek+0x18>
 800bd12:	46c0      	nop			; (mov r8, r8)
 800bd14:	ffffefff 	.word	0xffffefff

0800bd18 <__sclose>:
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	230e      	movs	r3, #14
 800bd1c:	5ec9      	ldrsh	r1, [r1, r3]
 800bd1e:	f000 f815 	bl	800bd4c <_close_r>
 800bd22:	bd10      	pop	{r4, pc}

0800bd24 <_write_r>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	0004      	movs	r4, r0
 800bd28:	0008      	movs	r0, r1
 800bd2a:	0011      	movs	r1, r2
 800bd2c:	001a      	movs	r2, r3
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4d05      	ldr	r5, [pc, #20]	; (800bd48 <_write_r+0x24>)
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f7 fc33 	bl	800359e <_write>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d103      	bne.n	800bd44 <_write_r+0x20>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d000      	beq.n	800bd44 <_write_r+0x20>
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	bd70      	pop	{r4, r5, r6, pc}
 800bd46:	46c0      	nop			; (mov r8, r8)
 800bd48:	20002d8c 	.word	0x20002d8c

0800bd4c <_close_r>:
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	b570      	push	{r4, r5, r6, lr}
 800bd50:	4d06      	ldr	r5, [pc, #24]	; (800bd6c <_close_r+0x20>)
 800bd52:	0004      	movs	r4, r0
 800bd54:	0008      	movs	r0, r1
 800bd56:	602b      	str	r3, [r5, #0]
 800bd58:	f7f7 fc3d 	bl	80035d6 <_close>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d103      	bne.n	800bd68 <_close_r+0x1c>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d000      	beq.n	800bd68 <_close_r+0x1c>
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	bd70      	pop	{r4, r5, r6, pc}
 800bd6a:	46c0      	nop			; (mov r8, r8)
 800bd6c:	20002d8c 	.word	0x20002d8c

0800bd70 <quorem>:
 800bd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd72:	0006      	movs	r6, r0
 800bd74:	690b      	ldr	r3, [r1, #16]
 800bd76:	6932      	ldr	r2, [r6, #16]
 800bd78:	b087      	sub	sp, #28
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	9103      	str	r1, [sp, #12]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	db65      	blt.n	800be4e <quorem+0xde>
 800bd82:	3b01      	subs	r3, #1
 800bd84:	009c      	lsls	r4, r3, #2
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	000b      	movs	r3, r1
 800bd8a:	3314      	adds	r3, #20
 800bd8c:	9305      	str	r3, [sp, #20]
 800bd8e:	191b      	adds	r3, r3, r4
 800bd90:	9304      	str	r3, [sp, #16]
 800bd92:	0033      	movs	r3, r6
 800bd94:	3314      	adds	r3, #20
 800bd96:	9302      	str	r3, [sp, #8]
 800bd98:	191c      	adds	r4, r3, r4
 800bd9a:	9b04      	ldr	r3, [sp, #16]
 800bd9c:	6827      	ldr	r7, [r4, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	0038      	movs	r0, r7
 800bda2:	1c5d      	adds	r5, r3, #1
 800bda4:	0029      	movs	r1, r5
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f7f4 f9ca 	bl	8000140 <__udivsi3>
 800bdac:	9001      	str	r0, [sp, #4]
 800bdae:	42af      	cmp	r7, r5
 800bdb0:	d324      	bcc.n	800bdfc <quorem+0x8c>
 800bdb2:	2500      	movs	r5, #0
 800bdb4:	46ac      	mov	ip, r5
 800bdb6:	9802      	ldr	r0, [sp, #8]
 800bdb8:	9f05      	ldr	r7, [sp, #20]
 800bdba:	cf08      	ldmia	r7!, {r3}
 800bdbc:	9a01      	ldr	r2, [sp, #4]
 800bdbe:	b299      	uxth	r1, r3
 800bdc0:	4351      	muls	r1, r2
 800bdc2:	0c1b      	lsrs	r3, r3, #16
 800bdc4:	4353      	muls	r3, r2
 800bdc6:	1949      	adds	r1, r1, r5
 800bdc8:	0c0a      	lsrs	r2, r1, #16
 800bdca:	189b      	adds	r3, r3, r2
 800bdcc:	6802      	ldr	r2, [r0, #0]
 800bdce:	b289      	uxth	r1, r1
 800bdd0:	b292      	uxth	r2, r2
 800bdd2:	4462      	add	r2, ip
 800bdd4:	1a52      	subs	r2, r2, r1
 800bdd6:	6801      	ldr	r1, [r0, #0]
 800bdd8:	0c1d      	lsrs	r5, r3, #16
 800bdda:	0c09      	lsrs	r1, r1, #16
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	1acb      	subs	r3, r1, r3
 800bde0:	1411      	asrs	r1, r2, #16
 800bde2:	185b      	adds	r3, r3, r1
 800bde4:	1419      	asrs	r1, r3, #16
 800bde6:	b292      	uxth	r2, r2
 800bde8:	041b      	lsls	r3, r3, #16
 800bdea:	431a      	orrs	r2, r3
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	468c      	mov	ip, r1
 800bdf0:	c004      	stmia	r0!, {r2}
 800bdf2:	42bb      	cmp	r3, r7
 800bdf4:	d2e1      	bcs.n	800bdba <quorem+0x4a>
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d030      	beq.n	800be5e <quorem+0xee>
 800bdfc:	0030      	movs	r0, r6
 800bdfe:	9903      	ldr	r1, [sp, #12]
 800be00:	f001 f9ea 	bl	800d1d8 <__mcmp>
 800be04:	2800      	cmp	r0, #0
 800be06:	db21      	blt.n	800be4c <quorem+0xdc>
 800be08:	0030      	movs	r0, r6
 800be0a:	2400      	movs	r4, #0
 800be0c:	9b01      	ldr	r3, [sp, #4]
 800be0e:	9903      	ldr	r1, [sp, #12]
 800be10:	3301      	adds	r3, #1
 800be12:	9301      	str	r3, [sp, #4]
 800be14:	3014      	adds	r0, #20
 800be16:	3114      	adds	r1, #20
 800be18:	6803      	ldr	r3, [r0, #0]
 800be1a:	c920      	ldmia	r1!, {r5}
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	1914      	adds	r4, r2, r4
 800be20:	b2aa      	uxth	r2, r5
 800be22:	1aa2      	subs	r2, r4, r2
 800be24:	0c1b      	lsrs	r3, r3, #16
 800be26:	0c2d      	lsrs	r5, r5, #16
 800be28:	1414      	asrs	r4, r2, #16
 800be2a:	1b5b      	subs	r3, r3, r5
 800be2c:	191b      	adds	r3, r3, r4
 800be2e:	141c      	asrs	r4, r3, #16
 800be30:	b292      	uxth	r2, r2
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	4313      	orrs	r3, r2
 800be36:	c008      	stmia	r0!, {r3}
 800be38:	9b04      	ldr	r3, [sp, #16]
 800be3a:	428b      	cmp	r3, r1
 800be3c:	d2ec      	bcs.n	800be18 <quorem+0xa8>
 800be3e:	9b00      	ldr	r3, [sp, #0]
 800be40:	9a02      	ldr	r2, [sp, #8]
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	18d3      	adds	r3, r2, r3
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	2a00      	cmp	r2, #0
 800be4a:	d015      	beq.n	800be78 <quorem+0x108>
 800be4c:	9801      	ldr	r0, [sp, #4]
 800be4e:	b007      	add	sp, #28
 800be50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d106      	bne.n	800be66 <quorem+0xf6>
 800be58:	9b00      	ldr	r3, [sp, #0]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	9b02      	ldr	r3, [sp, #8]
 800be60:	3c04      	subs	r4, #4
 800be62:	42a3      	cmp	r3, r4
 800be64:	d3f5      	bcc.n	800be52 <quorem+0xe2>
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	6133      	str	r3, [r6, #16]
 800be6a:	e7c7      	b.n	800bdfc <quorem+0x8c>
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	2a00      	cmp	r2, #0
 800be70:	d106      	bne.n	800be80 <quorem+0x110>
 800be72:	9a00      	ldr	r2, [sp, #0]
 800be74:	3a01      	subs	r2, #1
 800be76:	9200      	str	r2, [sp, #0]
 800be78:	9a02      	ldr	r2, [sp, #8]
 800be7a:	3b04      	subs	r3, #4
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d3f5      	bcc.n	800be6c <quorem+0xfc>
 800be80:	9b00      	ldr	r3, [sp, #0]
 800be82:	6133      	str	r3, [r6, #16]
 800be84:	e7e2      	b.n	800be4c <quorem+0xdc>
	...

0800be88 <_dtoa_r>:
 800be88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be8a:	b09d      	sub	sp, #116	; 0x74
 800be8c:	9202      	str	r2, [sp, #8]
 800be8e:	9303      	str	r3, [sp, #12]
 800be90:	9b02      	ldr	r3, [sp, #8]
 800be92:	9c03      	ldr	r4, [sp, #12]
 800be94:	9308      	str	r3, [sp, #32]
 800be96:	9409      	str	r4, [sp, #36]	; 0x24
 800be98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be9a:	0007      	movs	r7, r0
 800be9c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800be9e:	2c00      	cmp	r4, #0
 800bea0:	d10e      	bne.n	800bec0 <_dtoa_r+0x38>
 800bea2:	2010      	movs	r0, #16
 800bea4:	f000 feee 	bl	800cc84 <malloc>
 800bea8:	1e02      	subs	r2, r0, #0
 800beaa:	6278      	str	r0, [r7, #36]	; 0x24
 800beac:	d104      	bne.n	800beb8 <_dtoa_r+0x30>
 800beae:	21ea      	movs	r1, #234	; 0xea
 800beb0:	4bc7      	ldr	r3, [pc, #796]	; (800c1d0 <_dtoa_r+0x348>)
 800beb2:	48c8      	ldr	r0, [pc, #800]	; (800c1d4 <_dtoa_r+0x34c>)
 800beb4:	f001 fc94 	bl	800d7e0 <__assert_func>
 800beb8:	6044      	str	r4, [r0, #4]
 800beba:	6084      	str	r4, [r0, #8]
 800bebc:	6004      	str	r4, [r0, #0]
 800bebe:	60c4      	str	r4, [r0, #12]
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	2900      	cmp	r1, #0
 800bec6:	d00a      	beq.n	800bede <_dtoa_r+0x56>
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	2301      	movs	r3, #1
 800becc:	4093      	lsls	r3, r2
 800bece:	604a      	str	r2, [r1, #4]
 800bed0:	608b      	str	r3, [r1, #8]
 800bed2:	0038      	movs	r0, r7
 800bed4:	f000 ff40 	bl	800cd58 <_Bfree>
 800bed8:	2200      	movs	r2, #0
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	da20      	bge.n	800bf26 <_dtoa_r+0x9e>
 800bee4:	2301      	movs	r3, #1
 800bee6:	602b      	str	r3, [r5, #0]
 800bee8:	9b03      	ldr	r3, [sp, #12]
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	085b      	lsrs	r3, r3, #1
 800beee:	9309      	str	r3, [sp, #36]	; 0x24
 800bef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bef2:	4bb9      	ldr	r3, [pc, #740]	; (800c1d8 <_dtoa_r+0x350>)
 800bef4:	4ab8      	ldr	r2, [pc, #736]	; (800c1d8 <_dtoa_r+0x350>)
 800bef6:	402b      	ands	r3, r5
 800bef8:	4293      	cmp	r3, r2
 800befa:	d117      	bne.n	800bf2c <_dtoa_r+0xa4>
 800befc:	4bb7      	ldr	r3, [pc, #732]	; (800c1dc <_dtoa_r+0x354>)
 800befe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf00:	0328      	lsls	r0, r5, #12
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	9b02      	ldr	r3, [sp, #8]
 800bf06:	0b00      	lsrs	r0, r0, #12
 800bf08:	4318      	orrs	r0, r3
 800bf0a:	d101      	bne.n	800bf10 <_dtoa_r+0x88>
 800bf0c:	f000 fdbf 	bl	800ca8e <_dtoa_r+0xc06>
 800bf10:	48b3      	ldr	r0, [pc, #716]	; (800c1e0 <_dtoa_r+0x358>)
 800bf12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf14:	9006      	str	r0, [sp, #24]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <_dtoa_r+0x98>
 800bf1a:	4bb2      	ldr	r3, [pc, #712]	; (800c1e4 <_dtoa_r+0x35c>)
 800bf1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	9806      	ldr	r0, [sp, #24]
 800bf22:	b01d      	add	sp, #116	; 0x74
 800bf24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf26:	2300      	movs	r3, #0
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	e7e1      	b.n	800bef0 <_dtoa_r+0x68>
 800bf2c:	9b08      	ldr	r3, [sp, #32]
 800bf2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bf30:	9312      	str	r3, [sp, #72]	; 0x48
 800bf32:	9413      	str	r4, [sp, #76]	; 0x4c
 800bf34:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f7f4 fa86 	bl	800044c <__aeabi_dcmpeq>
 800bf40:	1e04      	subs	r4, r0, #0
 800bf42:	d009      	beq.n	800bf58 <_dtoa_r+0xd0>
 800bf44:	2301      	movs	r3, #1
 800bf46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf48:	6013      	str	r3, [r2, #0]
 800bf4a:	4ba7      	ldr	r3, [pc, #668]	; (800c1e8 <_dtoa_r+0x360>)
 800bf4c:	9306      	str	r3, [sp, #24]
 800bf4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d0e5      	beq.n	800bf20 <_dtoa_r+0x98>
 800bf54:	4ba5      	ldr	r3, [pc, #660]	; (800c1ec <_dtoa_r+0x364>)
 800bf56:	e7e1      	b.n	800bf1c <_dtoa_r+0x94>
 800bf58:	ab1a      	add	r3, sp, #104	; 0x68
 800bf5a:	9301      	str	r3, [sp, #4]
 800bf5c:	ab1b      	add	r3, sp, #108	; 0x6c
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	0038      	movs	r0, r7
 800bf62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf66:	f001 f9eb 	bl	800d340 <__d2b>
 800bf6a:	006e      	lsls	r6, r5, #1
 800bf6c:	9005      	str	r0, [sp, #20]
 800bf6e:	0d76      	lsrs	r6, r6, #21
 800bf70:	d100      	bne.n	800bf74 <_dtoa_r+0xec>
 800bf72:	e07c      	b.n	800c06e <_dtoa_r+0x1e6>
 800bf74:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf7a:	4a9d      	ldr	r2, [pc, #628]	; (800c1f0 <_dtoa_r+0x368>)
 800bf7c:	031b      	lsls	r3, r3, #12
 800bf7e:	0b1b      	lsrs	r3, r3, #12
 800bf80:	431a      	orrs	r2, r3
 800bf82:	0011      	movs	r1, r2
 800bf84:	4b9b      	ldr	r3, [pc, #620]	; (800c1f4 <_dtoa_r+0x36c>)
 800bf86:	9418      	str	r4, [sp, #96]	; 0x60
 800bf88:	18f6      	adds	r6, r6, r3
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4b9a      	ldr	r3, [pc, #616]	; (800c1f8 <_dtoa_r+0x370>)
 800bf8e:	f7f5 fe87 	bl	8001ca0 <__aeabi_dsub>
 800bf92:	4a9a      	ldr	r2, [pc, #616]	; (800c1fc <_dtoa_r+0x374>)
 800bf94:	4b9a      	ldr	r3, [pc, #616]	; (800c200 <_dtoa_r+0x378>)
 800bf96:	f7f5 fc17 	bl	80017c8 <__aeabi_dmul>
 800bf9a:	4a9a      	ldr	r2, [pc, #616]	; (800c204 <_dtoa_r+0x37c>)
 800bf9c:	4b9a      	ldr	r3, [pc, #616]	; (800c208 <_dtoa_r+0x380>)
 800bf9e:	f7f4 fcd5 	bl	800094c <__aeabi_dadd>
 800bfa2:	0004      	movs	r4, r0
 800bfa4:	0030      	movs	r0, r6
 800bfa6:	000d      	movs	r5, r1
 800bfa8:	f7f6 fa60 	bl	800246c <__aeabi_i2d>
 800bfac:	4a97      	ldr	r2, [pc, #604]	; (800c20c <_dtoa_r+0x384>)
 800bfae:	4b98      	ldr	r3, [pc, #608]	; (800c210 <_dtoa_r+0x388>)
 800bfb0:	f7f5 fc0a 	bl	80017c8 <__aeabi_dmul>
 800bfb4:	0002      	movs	r2, r0
 800bfb6:	000b      	movs	r3, r1
 800bfb8:	0020      	movs	r0, r4
 800bfba:	0029      	movs	r1, r5
 800bfbc:	f7f4 fcc6 	bl	800094c <__aeabi_dadd>
 800bfc0:	0004      	movs	r4, r0
 800bfc2:	000d      	movs	r5, r1
 800bfc4:	f7f6 fa1c 	bl	8002400 <__aeabi_d2iz>
 800bfc8:	2200      	movs	r2, #0
 800bfca:	9002      	str	r0, [sp, #8]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	0020      	movs	r0, r4
 800bfd0:	0029      	movs	r1, r5
 800bfd2:	f7f4 fa41 	bl	8000458 <__aeabi_dcmplt>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d00b      	beq.n	800bff2 <_dtoa_r+0x16a>
 800bfda:	9802      	ldr	r0, [sp, #8]
 800bfdc:	f7f6 fa46 	bl	800246c <__aeabi_i2d>
 800bfe0:	002b      	movs	r3, r5
 800bfe2:	0022      	movs	r2, r4
 800bfe4:	f7f4 fa32 	bl	800044c <__aeabi_dcmpeq>
 800bfe8:	4243      	negs	r3, r0
 800bfea:	4158      	adcs	r0, r3
 800bfec:	9b02      	ldr	r3, [sp, #8]
 800bfee:	1a1b      	subs	r3, r3, r0
 800bff0:	9302      	str	r3, [sp, #8]
 800bff2:	2301      	movs	r3, #1
 800bff4:	9316      	str	r3, [sp, #88]	; 0x58
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	2b16      	cmp	r3, #22
 800bffa:	d80f      	bhi.n	800c01c <_dtoa_r+0x194>
 800bffc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bffe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c000:	00da      	lsls	r2, r3, #3
 800c002:	4b84      	ldr	r3, [pc, #528]	; (800c214 <_dtoa_r+0x38c>)
 800c004:	189b      	adds	r3, r3, r2
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	f7f4 fa25 	bl	8000458 <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d049      	beq.n	800c0a6 <_dtoa_r+0x21e>
 800c012:	9b02      	ldr	r3, [sp, #8]
 800c014:	3b01      	subs	r3, #1
 800c016:	9302      	str	r3, [sp, #8]
 800c018:	2300      	movs	r3, #0
 800c01a:	9316      	str	r3, [sp, #88]	; 0x58
 800c01c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c01e:	1b9e      	subs	r6, r3, r6
 800c020:	2300      	movs	r3, #0
 800c022:	930a      	str	r3, [sp, #40]	; 0x28
 800c024:	0033      	movs	r3, r6
 800c026:	3b01      	subs	r3, #1
 800c028:	930d      	str	r3, [sp, #52]	; 0x34
 800c02a:	d504      	bpl.n	800c036 <_dtoa_r+0x1ae>
 800c02c:	2301      	movs	r3, #1
 800c02e:	1b9b      	subs	r3, r3, r6
 800c030:	930a      	str	r3, [sp, #40]	; 0x28
 800c032:	2300      	movs	r3, #0
 800c034:	930d      	str	r3, [sp, #52]	; 0x34
 800c036:	9b02      	ldr	r3, [sp, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	db36      	blt.n	800c0aa <_dtoa_r+0x222>
 800c03c:	9a02      	ldr	r2, [sp, #8]
 800c03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c040:	4694      	mov	ip, r2
 800c042:	4463      	add	r3, ip
 800c044:	930d      	str	r3, [sp, #52]	; 0x34
 800c046:	2300      	movs	r3, #0
 800c048:	9215      	str	r2, [sp, #84]	; 0x54
 800c04a:	930e      	str	r3, [sp, #56]	; 0x38
 800c04c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c04e:	2401      	movs	r4, #1
 800c050:	2b09      	cmp	r3, #9
 800c052:	d864      	bhi.n	800c11e <_dtoa_r+0x296>
 800c054:	2b05      	cmp	r3, #5
 800c056:	dd02      	ble.n	800c05e <_dtoa_r+0x1d6>
 800c058:	2400      	movs	r4, #0
 800c05a:	3b04      	subs	r3, #4
 800c05c:	9322      	str	r3, [sp, #136]	; 0x88
 800c05e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c060:	1e98      	subs	r0, r3, #2
 800c062:	2803      	cmp	r0, #3
 800c064:	d864      	bhi.n	800c130 <_dtoa_r+0x2a8>
 800c066:	f7f4 f857 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c06a:	3829      	.short	0x3829
 800c06c:	5836      	.short	0x5836
 800c06e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c070:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c072:	189e      	adds	r6, r3, r2
 800c074:	4b68      	ldr	r3, [pc, #416]	; (800c218 <_dtoa_r+0x390>)
 800c076:	18f2      	adds	r2, r6, r3
 800c078:	2a20      	cmp	r2, #32
 800c07a:	dd0f      	ble.n	800c09c <_dtoa_r+0x214>
 800c07c:	2340      	movs	r3, #64	; 0x40
 800c07e:	1a9b      	subs	r3, r3, r2
 800c080:	409d      	lsls	r5, r3
 800c082:	4b66      	ldr	r3, [pc, #408]	; (800c21c <_dtoa_r+0x394>)
 800c084:	9802      	ldr	r0, [sp, #8]
 800c086:	18f3      	adds	r3, r6, r3
 800c088:	40d8      	lsrs	r0, r3
 800c08a:	4328      	orrs	r0, r5
 800c08c:	f7f6 fa1e 	bl	80024cc <__aeabi_ui2d>
 800c090:	2301      	movs	r3, #1
 800c092:	4c63      	ldr	r4, [pc, #396]	; (800c220 <_dtoa_r+0x398>)
 800c094:	3e01      	subs	r6, #1
 800c096:	1909      	adds	r1, r1, r4
 800c098:	9318      	str	r3, [sp, #96]	; 0x60
 800c09a:	e776      	b.n	800bf8a <_dtoa_r+0x102>
 800c09c:	2320      	movs	r3, #32
 800c09e:	9802      	ldr	r0, [sp, #8]
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	4098      	lsls	r0, r3
 800c0a4:	e7f2      	b.n	800c08c <_dtoa_r+0x204>
 800c0a6:	9016      	str	r0, [sp, #88]	; 0x58
 800c0a8:	e7b8      	b.n	800c01c <_dtoa_r+0x194>
 800c0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ac:	9a02      	ldr	r2, [sp, #8]
 800c0ae:	1a9b      	subs	r3, r3, r2
 800c0b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c0b2:	4253      	negs	r3, r2
 800c0b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9315      	str	r3, [sp, #84]	; 0x54
 800c0ba:	e7c7      	b.n	800c04c <_dtoa_r+0x1c4>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c4:	9307      	str	r3, [sp, #28]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	dc13      	bgt.n	800c0f2 <_dtoa_r+0x26a>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	001a      	movs	r2, r3
 800c0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c0d0:	9307      	str	r3, [sp, #28]
 800c0d2:	9223      	str	r2, [sp, #140]	; 0x8c
 800c0d4:	e00d      	b.n	800c0f2 <_dtoa_r+0x26a>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e7f1      	b.n	800c0be <_dtoa_r+0x236>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c0de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0e0:	4694      	mov	ip, r2
 800c0e2:	9b02      	ldr	r3, [sp, #8]
 800c0e4:	4463      	add	r3, ip
 800c0e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	9307      	str	r3, [sp, #28]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dc00      	bgt.n	800c0f2 <_dtoa_r+0x26a>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0f6:	6042      	str	r2, [r0, #4]
 800c0f8:	3204      	adds	r2, #4
 800c0fa:	0015      	movs	r5, r2
 800c0fc:	3514      	adds	r5, #20
 800c0fe:	6841      	ldr	r1, [r0, #4]
 800c100:	429d      	cmp	r5, r3
 800c102:	d919      	bls.n	800c138 <_dtoa_r+0x2b0>
 800c104:	0038      	movs	r0, r7
 800c106:	f000 fde3 	bl	800ccd0 <_Balloc>
 800c10a:	9006      	str	r0, [sp, #24]
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d117      	bne.n	800c140 <_dtoa_r+0x2b8>
 800c110:	21d5      	movs	r1, #213	; 0xd5
 800c112:	0002      	movs	r2, r0
 800c114:	4b43      	ldr	r3, [pc, #268]	; (800c224 <_dtoa_r+0x39c>)
 800c116:	0049      	lsls	r1, r1, #1
 800c118:	e6cb      	b.n	800beb2 <_dtoa_r+0x2a>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e7de      	b.n	800c0dc <_dtoa_r+0x254>
 800c11e:	2300      	movs	r3, #0
 800c120:	940f      	str	r4, [sp, #60]	; 0x3c
 800c122:	9322      	str	r3, [sp, #136]	; 0x88
 800c124:	3b01      	subs	r3, #1
 800c126:	930c      	str	r3, [sp, #48]	; 0x30
 800c128:	9307      	str	r3, [sp, #28]
 800c12a:	2200      	movs	r2, #0
 800c12c:	3313      	adds	r3, #19
 800c12e:	e7d0      	b.n	800c0d2 <_dtoa_r+0x24a>
 800c130:	2301      	movs	r3, #1
 800c132:	930f      	str	r3, [sp, #60]	; 0x3c
 800c134:	3b02      	subs	r3, #2
 800c136:	e7f6      	b.n	800c126 <_dtoa_r+0x29e>
 800c138:	3101      	adds	r1, #1
 800c13a:	6041      	str	r1, [r0, #4]
 800c13c:	0052      	lsls	r2, r2, #1
 800c13e:	e7dc      	b.n	800c0fa <_dtoa_r+0x272>
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	9a06      	ldr	r2, [sp, #24]
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	9b07      	ldr	r3, [sp, #28]
 800c148:	2b0e      	cmp	r3, #14
 800c14a:	d900      	bls.n	800c14e <_dtoa_r+0x2c6>
 800c14c:	e0eb      	b.n	800c326 <_dtoa_r+0x49e>
 800c14e:	2c00      	cmp	r4, #0
 800c150:	d100      	bne.n	800c154 <_dtoa_r+0x2cc>
 800c152:	e0e8      	b.n	800c326 <_dtoa_r+0x49e>
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	dd68      	ble.n	800c22c <_dtoa_r+0x3a4>
 800c15a:	001a      	movs	r2, r3
 800c15c:	210f      	movs	r1, #15
 800c15e:	4b2d      	ldr	r3, [pc, #180]	; (800c214 <_dtoa_r+0x38c>)
 800c160:	400a      	ands	r2, r1
 800c162:	00d2      	lsls	r2, r2, #3
 800c164:	189b      	adds	r3, r3, r2
 800c166:	681d      	ldr	r5, [r3, #0]
 800c168:	685e      	ldr	r6, [r3, #4]
 800c16a:	9b02      	ldr	r3, [sp, #8]
 800c16c:	111c      	asrs	r4, r3, #4
 800c16e:	2302      	movs	r3, #2
 800c170:	9310      	str	r3, [sp, #64]	; 0x40
 800c172:	9b02      	ldr	r3, [sp, #8]
 800c174:	05db      	lsls	r3, r3, #23
 800c176:	d50b      	bpl.n	800c190 <_dtoa_r+0x308>
 800c178:	4b2b      	ldr	r3, [pc, #172]	; (800c228 <_dtoa_r+0x3a0>)
 800c17a:	400c      	ands	r4, r1
 800c17c:	6a1a      	ldr	r2, [r3, #32]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c182:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c184:	f7f4 ff1e 	bl	8000fc4 <__aeabi_ddiv>
 800c188:	2303      	movs	r3, #3
 800c18a:	9008      	str	r0, [sp, #32]
 800c18c:	9109      	str	r1, [sp, #36]	; 0x24
 800c18e:	9310      	str	r3, [sp, #64]	; 0x40
 800c190:	4b25      	ldr	r3, [pc, #148]	; (800c228 <_dtoa_r+0x3a0>)
 800c192:	9314      	str	r3, [sp, #80]	; 0x50
 800c194:	2c00      	cmp	r4, #0
 800c196:	d108      	bne.n	800c1aa <_dtoa_r+0x322>
 800c198:	9808      	ldr	r0, [sp, #32]
 800c19a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c19c:	002a      	movs	r2, r5
 800c19e:	0033      	movs	r3, r6
 800c1a0:	f7f4 ff10 	bl	8000fc4 <__aeabi_ddiv>
 800c1a4:	9008      	str	r0, [sp, #32]
 800c1a6:	9109      	str	r1, [sp, #36]	; 0x24
 800c1a8:	e05c      	b.n	800c264 <_dtoa_r+0x3dc>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	421c      	tst	r4, r3
 800c1ae:	d00b      	beq.n	800c1c8 <_dtoa_r+0x340>
 800c1b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1b2:	0028      	movs	r0, r5
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	9310      	str	r3, [sp, #64]	; 0x40
 800c1b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1ba:	0031      	movs	r1, r6
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f7f5 fb02 	bl	80017c8 <__aeabi_dmul>
 800c1c4:	0005      	movs	r5, r0
 800c1c6:	000e      	movs	r6, r1
 800c1c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1ca:	1064      	asrs	r4, r4, #1
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	e7e0      	b.n	800c192 <_dtoa_r+0x30a>
 800c1d0:	0800e369 	.word	0x0800e369
 800c1d4:	0800e380 	.word	0x0800e380
 800c1d8:	7ff00000 	.word	0x7ff00000
 800c1dc:	0000270f 	.word	0x0000270f
 800c1e0:	0800e365 	.word	0x0800e365
 800c1e4:	0800e368 	.word	0x0800e368
 800c1e8:	0800e338 	.word	0x0800e338
 800c1ec:	0800e339 	.word	0x0800e339
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	fffffc01 	.word	0xfffffc01
 800c1f8:	3ff80000 	.word	0x3ff80000
 800c1fc:	636f4361 	.word	0x636f4361
 800c200:	3fd287a7 	.word	0x3fd287a7
 800c204:	8b60c8b3 	.word	0x8b60c8b3
 800c208:	3fc68a28 	.word	0x3fc68a28
 800c20c:	509f79fb 	.word	0x509f79fb
 800c210:	3fd34413 	.word	0x3fd34413
 800c214:	0800e470 	.word	0x0800e470
 800c218:	00000432 	.word	0x00000432
 800c21c:	00000412 	.word	0x00000412
 800c220:	fe100000 	.word	0xfe100000
 800c224:	0800e3db 	.word	0x0800e3db
 800c228:	0800e448 	.word	0x0800e448
 800c22c:	2302      	movs	r3, #2
 800c22e:	9310      	str	r3, [sp, #64]	; 0x40
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d016      	beq.n	800c264 <_dtoa_r+0x3dc>
 800c236:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c238:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c23a:	425c      	negs	r4, r3
 800c23c:	230f      	movs	r3, #15
 800c23e:	4ab6      	ldr	r2, [pc, #728]	; (800c518 <_dtoa_r+0x690>)
 800c240:	4023      	ands	r3, r4
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	18d3      	adds	r3, r2, r3
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	f7f5 fabd 	bl	80017c8 <__aeabi_dmul>
 800c24e:	2601      	movs	r6, #1
 800c250:	2300      	movs	r3, #0
 800c252:	9008      	str	r0, [sp, #32]
 800c254:	9109      	str	r1, [sp, #36]	; 0x24
 800c256:	4db1      	ldr	r5, [pc, #708]	; (800c51c <_dtoa_r+0x694>)
 800c258:	1124      	asrs	r4, r4, #4
 800c25a:	2c00      	cmp	r4, #0
 800c25c:	d000      	beq.n	800c260 <_dtoa_r+0x3d8>
 800c25e:	e094      	b.n	800c38a <_dtoa_r+0x502>
 800c260:	2b00      	cmp	r3, #0
 800c262:	d19f      	bne.n	800c1a4 <_dtoa_r+0x31c>
 800c264:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c266:	2b00      	cmp	r3, #0
 800c268:	d100      	bne.n	800c26c <_dtoa_r+0x3e4>
 800c26a:	e09b      	b.n	800c3a4 <_dtoa_r+0x51c>
 800c26c:	9c08      	ldr	r4, [sp, #32]
 800c26e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c270:	2200      	movs	r2, #0
 800c272:	0020      	movs	r0, r4
 800c274:	0029      	movs	r1, r5
 800c276:	4baa      	ldr	r3, [pc, #680]	; (800c520 <_dtoa_r+0x698>)
 800c278:	f7f4 f8ee 	bl	8000458 <__aeabi_dcmplt>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d100      	bne.n	800c282 <_dtoa_r+0x3fa>
 800c280:	e090      	b.n	800c3a4 <_dtoa_r+0x51c>
 800c282:	9b07      	ldr	r3, [sp, #28]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d100      	bne.n	800c28a <_dtoa_r+0x402>
 800c288:	e08c      	b.n	800c3a4 <_dtoa_r+0x51c>
 800c28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	dd46      	ble.n	800c31e <_dtoa_r+0x496>
 800c290:	9b02      	ldr	r3, [sp, #8]
 800c292:	2200      	movs	r2, #0
 800c294:	0020      	movs	r0, r4
 800c296:	0029      	movs	r1, r5
 800c298:	1e5e      	subs	r6, r3, #1
 800c29a:	4ba2      	ldr	r3, [pc, #648]	; (800c524 <_dtoa_r+0x69c>)
 800c29c:	f7f5 fa94 	bl	80017c8 <__aeabi_dmul>
 800c2a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2a2:	9008      	str	r0, [sp, #32]
 800c2a4:	9109      	str	r1, [sp, #36]	; 0x24
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	9310      	str	r3, [sp, #64]	; 0x40
 800c2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c2ae:	9c08      	ldr	r4, [sp, #32]
 800c2b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c2b2:	9314      	str	r3, [sp, #80]	; 0x50
 800c2b4:	f7f6 f8da 	bl	800246c <__aeabi_i2d>
 800c2b8:	0022      	movs	r2, r4
 800c2ba:	002b      	movs	r3, r5
 800c2bc:	f7f5 fa84 	bl	80017c8 <__aeabi_dmul>
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	4b99      	ldr	r3, [pc, #612]	; (800c528 <_dtoa_r+0x6a0>)
 800c2c4:	f7f4 fb42 	bl	800094c <__aeabi_dadd>
 800c2c8:	9010      	str	r0, [sp, #64]	; 0x40
 800c2ca:	9111      	str	r1, [sp, #68]	; 0x44
 800c2cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2d0:	9208      	str	r2, [sp, #32]
 800c2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d4:	4a95      	ldr	r2, [pc, #596]	; (800c52c <_dtoa_r+0x6a4>)
 800c2d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2d8:	4694      	mov	ip, r2
 800c2da:	4463      	add	r3, ip
 800c2dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2de:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d161      	bne.n	800c3aa <_dtoa_r+0x522>
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	0020      	movs	r0, r4
 800c2ea:	0029      	movs	r1, r5
 800c2ec:	4b90      	ldr	r3, [pc, #576]	; (800c530 <_dtoa_r+0x6a8>)
 800c2ee:	f7f5 fcd7 	bl	8001ca0 <__aeabi_dsub>
 800c2f2:	9a08      	ldr	r2, [sp, #32]
 800c2f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2f6:	0004      	movs	r4, r0
 800c2f8:	000d      	movs	r5, r1
 800c2fa:	f7f4 f8c1 	bl	8000480 <__aeabi_dcmpgt>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d000      	beq.n	800c304 <_dtoa_r+0x47c>
 800c302:	e2af      	b.n	800c864 <_dtoa_r+0x9dc>
 800c304:	488b      	ldr	r0, [pc, #556]	; (800c534 <_dtoa_r+0x6ac>)
 800c306:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c308:	4684      	mov	ip, r0
 800c30a:	4461      	add	r1, ip
 800c30c:	000b      	movs	r3, r1
 800c30e:	0020      	movs	r0, r4
 800c310:	0029      	movs	r1, r5
 800c312:	9a08      	ldr	r2, [sp, #32]
 800c314:	f7f4 f8a0 	bl	8000458 <__aeabi_dcmplt>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d000      	beq.n	800c31e <_dtoa_r+0x496>
 800c31c:	e29f      	b.n	800c85e <_dtoa_r+0x9d6>
 800c31e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c320:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c322:	9308      	str	r3, [sp, #32]
 800c324:	9409      	str	r4, [sp, #36]	; 0x24
 800c326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c328:	2b00      	cmp	r3, #0
 800c32a:	da00      	bge.n	800c32e <_dtoa_r+0x4a6>
 800c32c:	e172      	b.n	800c614 <_dtoa_r+0x78c>
 800c32e:	9a02      	ldr	r2, [sp, #8]
 800c330:	2a0e      	cmp	r2, #14
 800c332:	dd00      	ble.n	800c336 <_dtoa_r+0x4ae>
 800c334:	e16e      	b.n	800c614 <_dtoa_r+0x78c>
 800c336:	4b78      	ldr	r3, [pc, #480]	; (800c518 <_dtoa_r+0x690>)
 800c338:	00d2      	lsls	r2, r2, #3
 800c33a:	189b      	adds	r3, r3, r2
 800c33c:	685c      	ldr	r4, [r3, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	930a      	str	r3, [sp, #40]	; 0x28
 800c342:	940b      	str	r4, [sp, #44]	; 0x2c
 800c344:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c346:	2b00      	cmp	r3, #0
 800c348:	db00      	blt.n	800c34c <_dtoa_r+0x4c4>
 800c34a:	e0f7      	b.n	800c53c <_dtoa_r+0x6b4>
 800c34c:	9b07      	ldr	r3, [sp, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd00      	ble.n	800c354 <_dtoa_r+0x4cc>
 800c352:	e0f3      	b.n	800c53c <_dtoa_r+0x6b4>
 800c354:	d000      	beq.n	800c358 <_dtoa_r+0x4d0>
 800c356:	e282      	b.n	800c85e <_dtoa_r+0x9d6>
 800c358:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c35a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c35c:	2200      	movs	r2, #0
 800c35e:	4b74      	ldr	r3, [pc, #464]	; (800c530 <_dtoa_r+0x6a8>)
 800c360:	f7f5 fa32 	bl	80017c8 <__aeabi_dmul>
 800c364:	9a08      	ldr	r2, [sp, #32]
 800c366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c368:	f7f4 f894 	bl	8000494 <__aeabi_dcmpge>
 800c36c:	9e07      	ldr	r6, [sp, #28]
 800c36e:	0035      	movs	r5, r6
 800c370:	2800      	cmp	r0, #0
 800c372:	d000      	beq.n	800c376 <_dtoa_r+0x4ee>
 800c374:	e259      	b.n	800c82a <_dtoa_r+0x9a2>
 800c376:	9b06      	ldr	r3, [sp, #24]
 800c378:	9a06      	ldr	r2, [sp, #24]
 800c37a:	3301      	adds	r3, #1
 800c37c:	9308      	str	r3, [sp, #32]
 800c37e:	2331      	movs	r3, #49	; 0x31
 800c380:	7013      	strb	r3, [r2, #0]
 800c382:	9b02      	ldr	r3, [sp, #8]
 800c384:	3301      	adds	r3, #1
 800c386:	9302      	str	r3, [sp, #8]
 800c388:	e254      	b.n	800c834 <_dtoa_r+0x9ac>
 800c38a:	4234      	tst	r4, r6
 800c38c:	d007      	beq.n	800c39e <_dtoa_r+0x516>
 800c38e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c390:	3301      	adds	r3, #1
 800c392:	9310      	str	r3, [sp, #64]	; 0x40
 800c394:	682a      	ldr	r2, [r5, #0]
 800c396:	686b      	ldr	r3, [r5, #4]
 800c398:	f7f5 fa16 	bl	80017c8 <__aeabi_dmul>
 800c39c:	0033      	movs	r3, r6
 800c39e:	1064      	asrs	r4, r4, #1
 800c3a0:	3508      	adds	r5, #8
 800c3a2:	e75a      	b.n	800c25a <_dtoa_r+0x3d2>
 800c3a4:	9e02      	ldr	r6, [sp, #8]
 800c3a6:	9b07      	ldr	r3, [sp, #28]
 800c3a8:	e780      	b.n	800c2ac <_dtoa_r+0x424>
 800c3aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c3ae:	1e5a      	subs	r2, r3, #1
 800c3b0:	4b59      	ldr	r3, [pc, #356]	; (800c518 <_dtoa_r+0x690>)
 800c3b2:	00d2      	lsls	r2, r2, #3
 800c3b4:	189b      	adds	r3, r3, r2
 800c3b6:	681a      	ldr	r2, [r3, #0]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	2900      	cmp	r1, #0
 800c3bc:	d051      	beq.n	800c462 <_dtoa_r+0x5da>
 800c3be:	2000      	movs	r0, #0
 800c3c0:	495d      	ldr	r1, [pc, #372]	; (800c538 <_dtoa_r+0x6b0>)
 800c3c2:	f7f4 fdff 	bl	8000fc4 <__aeabi_ddiv>
 800c3c6:	9a08      	ldr	r2, [sp, #32]
 800c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ca:	f7f5 fc69 	bl	8001ca0 <__aeabi_dsub>
 800c3ce:	9a06      	ldr	r2, [sp, #24]
 800c3d0:	9b06      	ldr	r3, [sp, #24]
 800c3d2:	4694      	mov	ip, r2
 800c3d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3d8:	9010      	str	r0, [sp, #64]	; 0x40
 800c3da:	9111      	str	r1, [sp, #68]	; 0x44
 800c3dc:	4463      	add	r3, ip
 800c3de:	9319      	str	r3, [sp, #100]	; 0x64
 800c3e0:	0029      	movs	r1, r5
 800c3e2:	0020      	movs	r0, r4
 800c3e4:	f7f6 f80c 	bl	8002400 <__aeabi_d2iz>
 800c3e8:	9014      	str	r0, [sp, #80]	; 0x50
 800c3ea:	f7f6 f83f 	bl	800246c <__aeabi_i2d>
 800c3ee:	0002      	movs	r2, r0
 800c3f0:	000b      	movs	r3, r1
 800c3f2:	0020      	movs	r0, r4
 800c3f4:	0029      	movs	r1, r5
 800c3f6:	f7f5 fc53 	bl	8001ca0 <__aeabi_dsub>
 800c3fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3fe:	3301      	adds	r3, #1
 800c400:	9308      	str	r3, [sp, #32]
 800c402:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c404:	0004      	movs	r4, r0
 800c406:	3330      	adds	r3, #48	; 0x30
 800c408:	7013      	strb	r3, [r2, #0]
 800c40a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c40c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c40e:	000d      	movs	r5, r1
 800c410:	f7f4 f822 	bl	8000458 <__aeabi_dcmplt>
 800c414:	2800      	cmp	r0, #0
 800c416:	d175      	bne.n	800c504 <_dtoa_r+0x67c>
 800c418:	0022      	movs	r2, r4
 800c41a:	002b      	movs	r3, r5
 800c41c:	2000      	movs	r0, #0
 800c41e:	4940      	ldr	r1, [pc, #256]	; (800c520 <_dtoa_r+0x698>)
 800c420:	f7f5 fc3e 	bl	8001ca0 <__aeabi_dsub>
 800c424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c426:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c428:	f7f4 f816 	bl	8000458 <__aeabi_dcmplt>
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d000      	beq.n	800c432 <_dtoa_r+0x5aa>
 800c430:	e0d2      	b.n	800c5d8 <_dtoa_r+0x750>
 800c432:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c434:	9a08      	ldr	r2, [sp, #32]
 800c436:	4293      	cmp	r3, r2
 800c438:	d100      	bne.n	800c43c <_dtoa_r+0x5b4>
 800c43a:	e770      	b.n	800c31e <_dtoa_r+0x496>
 800c43c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c43e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c440:	2200      	movs	r2, #0
 800c442:	4b38      	ldr	r3, [pc, #224]	; (800c524 <_dtoa_r+0x69c>)
 800c444:	f7f5 f9c0 	bl	80017c8 <__aeabi_dmul>
 800c448:	4b36      	ldr	r3, [pc, #216]	; (800c524 <_dtoa_r+0x69c>)
 800c44a:	9010      	str	r0, [sp, #64]	; 0x40
 800c44c:	9111      	str	r1, [sp, #68]	; 0x44
 800c44e:	2200      	movs	r2, #0
 800c450:	0020      	movs	r0, r4
 800c452:	0029      	movs	r1, r5
 800c454:	f7f5 f9b8 	bl	80017c8 <__aeabi_dmul>
 800c458:	9b08      	ldr	r3, [sp, #32]
 800c45a:	0004      	movs	r4, r0
 800c45c:	000d      	movs	r5, r1
 800c45e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c460:	e7be      	b.n	800c3e0 <_dtoa_r+0x558>
 800c462:	9808      	ldr	r0, [sp, #32]
 800c464:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c466:	f7f5 f9af 	bl	80017c8 <__aeabi_dmul>
 800c46a:	9a06      	ldr	r2, [sp, #24]
 800c46c:	9b06      	ldr	r3, [sp, #24]
 800c46e:	4694      	mov	ip, r2
 800c470:	9308      	str	r3, [sp, #32]
 800c472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c474:	9010      	str	r0, [sp, #64]	; 0x40
 800c476:	9111      	str	r1, [sp, #68]	; 0x44
 800c478:	4463      	add	r3, ip
 800c47a:	9319      	str	r3, [sp, #100]	; 0x64
 800c47c:	0029      	movs	r1, r5
 800c47e:	0020      	movs	r0, r4
 800c480:	f7f5 ffbe 	bl	8002400 <__aeabi_d2iz>
 800c484:	9017      	str	r0, [sp, #92]	; 0x5c
 800c486:	f7f5 fff1 	bl	800246c <__aeabi_i2d>
 800c48a:	0002      	movs	r2, r0
 800c48c:	000b      	movs	r3, r1
 800c48e:	0020      	movs	r0, r4
 800c490:	0029      	movs	r1, r5
 800c492:	f7f5 fc05 	bl	8001ca0 <__aeabi_dsub>
 800c496:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c498:	9a08      	ldr	r2, [sp, #32]
 800c49a:	3330      	adds	r3, #48	; 0x30
 800c49c:	7013      	strb	r3, [r2, #0]
 800c49e:	0013      	movs	r3, r2
 800c4a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	0004      	movs	r4, r0
 800c4a6:	000d      	movs	r5, r1
 800c4a8:	9308      	str	r3, [sp, #32]
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d12c      	bne.n	800c508 <_dtoa_r+0x680>
 800c4ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c4b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4b2:	9a06      	ldr	r2, [sp, #24]
 800c4b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4b6:	4694      	mov	ip, r2
 800c4b8:	4463      	add	r3, ip
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	9308      	str	r3, [sp, #32]
 800c4be:	4b1e      	ldr	r3, [pc, #120]	; (800c538 <_dtoa_r+0x6b0>)
 800c4c0:	f7f4 fa44 	bl	800094c <__aeabi_dadd>
 800c4c4:	0002      	movs	r2, r0
 800c4c6:	000b      	movs	r3, r1
 800c4c8:	0020      	movs	r0, r4
 800c4ca:	0029      	movs	r1, r5
 800c4cc:	f7f3 ffd8 	bl	8000480 <__aeabi_dcmpgt>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d000      	beq.n	800c4d6 <_dtoa_r+0x64e>
 800c4d4:	e080      	b.n	800c5d8 <_dtoa_r+0x750>
 800c4d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4da:	2000      	movs	r0, #0
 800c4dc:	4916      	ldr	r1, [pc, #88]	; (800c538 <_dtoa_r+0x6b0>)
 800c4de:	f7f5 fbdf 	bl	8001ca0 <__aeabi_dsub>
 800c4e2:	0002      	movs	r2, r0
 800c4e4:	000b      	movs	r3, r1
 800c4e6:	0020      	movs	r0, r4
 800c4e8:	0029      	movs	r1, r5
 800c4ea:	f7f3 ffb5 	bl	8000458 <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d100      	bne.n	800c4f4 <_dtoa_r+0x66c>
 800c4f2:	e714      	b.n	800c31e <_dtoa_r+0x496>
 800c4f4:	9b08      	ldr	r3, [sp, #32]
 800c4f6:	001a      	movs	r2, r3
 800c4f8:	3a01      	subs	r2, #1
 800c4fa:	9208      	str	r2, [sp, #32]
 800c4fc:	7812      	ldrb	r2, [r2, #0]
 800c4fe:	2a30      	cmp	r2, #48	; 0x30
 800c500:	d0f8      	beq.n	800c4f4 <_dtoa_r+0x66c>
 800c502:	9308      	str	r3, [sp, #32]
 800c504:	9602      	str	r6, [sp, #8]
 800c506:	e055      	b.n	800c5b4 <_dtoa_r+0x72c>
 800c508:	2200      	movs	r2, #0
 800c50a:	4b06      	ldr	r3, [pc, #24]	; (800c524 <_dtoa_r+0x69c>)
 800c50c:	f7f5 f95c 	bl	80017c8 <__aeabi_dmul>
 800c510:	0004      	movs	r4, r0
 800c512:	000d      	movs	r5, r1
 800c514:	e7b2      	b.n	800c47c <_dtoa_r+0x5f4>
 800c516:	46c0      	nop			; (mov r8, r8)
 800c518:	0800e470 	.word	0x0800e470
 800c51c:	0800e448 	.word	0x0800e448
 800c520:	3ff00000 	.word	0x3ff00000
 800c524:	40240000 	.word	0x40240000
 800c528:	401c0000 	.word	0x401c0000
 800c52c:	fcc00000 	.word	0xfcc00000
 800c530:	40140000 	.word	0x40140000
 800c534:	7cc00000 	.word	0x7cc00000
 800c538:	3fe00000 	.word	0x3fe00000
 800c53c:	9b07      	ldr	r3, [sp, #28]
 800c53e:	9e06      	ldr	r6, [sp, #24]
 800c540:	3b01      	subs	r3, #1
 800c542:	199b      	adds	r3, r3, r6
 800c544:	930c      	str	r3, [sp, #48]	; 0x30
 800c546:	9c08      	ldr	r4, [sp, #32]
 800c548:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c54a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c54e:	0020      	movs	r0, r4
 800c550:	0029      	movs	r1, r5
 800c552:	f7f4 fd37 	bl	8000fc4 <__aeabi_ddiv>
 800c556:	f7f5 ff53 	bl	8002400 <__aeabi_d2iz>
 800c55a:	9007      	str	r0, [sp, #28]
 800c55c:	f7f5 ff86 	bl	800246c <__aeabi_i2d>
 800c560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c564:	f7f5 f930 	bl	80017c8 <__aeabi_dmul>
 800c568:	0002      	movs	r2, r0
 800c56a:	000b      	movs	r3, r1
 800c56c:	0020      	movs	r0, r4
 800c56e:	0029      	movs	r1, r5
 800c570:	f7f5 fb96 	bl	8001ca0 <__aeabi_dsub>
 800c574:	0033      	movs	r3, r6
 800c576:	9a07      	ldr	r2, [sp, #28]
 800c578:	3601      	adds	r6, #1
 800c57a:	3230      	adds	r2, #48	; 0x30
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c580:	9608      	str	r6, [sp, #32]
 800c582:	429a      	cmp	r2, r3
 800c584:	d139      	bne.n	800c5fa <_dtoa_r+0x772>
 800c586:	0002      	movs	r2, r0
 800c588:	000b      	movs	r3, r1
 800c58a:	f7f4 f9df 	bl	800094c <__aeabi_dadd>
 800c58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c592:	0004      	movs	r4, r0
 800c594:	000d      	movs	r5, r1
 800c596:	f7f3 ff73 	bl	8000480 <__aeabi_dcmpgt>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d11b      	bne.n	800c5d6 <_dtoa_r+0x74e>
 800c59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5a2:	0020      	movs	r0, r4
 800c5a4:	0029      	movs	r1, r5
 800c5a6:	f7f3 ff51 	bl	800044c <__aeabi_dcmpeq>
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d002      	beq.n	800c5b4 <_dtoa_r+0x72c>
 800c5ae:	9b07      	ldr	r3, [sp, #28]
 800c5b0:	07db      	lsls	r3, r3, #31
 800c5b2:	d410      	bmi.n	800c5d6 <_dtoa_r+0x74e>
 800c5b4:	0038      	movs	r0, r7
 800c5b6:	9905      	ldr	r1, [sp, #20]
 800c5b8:	f000 fbce 	bl	800cd58 <_Bfree>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9a08      	ldr	r2, [sp, #32]
 800c5c0:	9802      	ldr	r0, [sp, #8]
 800c5c2:	7013      	strb	r3, [r2, #0]
 800c5c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	6018      	str	r0, [r3, #0]
 800c5ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d100      	bne.n	800c5d2 <_dtoa_r+0x74a>
 800c5d0:	e4a6      	b.n	800bf20 <_dtoa_r+0x98>
 800c5d2:	601a      	str	r2, [r3, #0]
 800c5d4:	e4a4      	b.n	800bf20 <_dtoa_r+0x98>
 800c5d6:	9e02      	ldr	r6, [sp, #8]
 800c5d8:	9b08      	ldr	r3, [sp, #32]
 800c5da:	9308      	str	r3, [sp, #32]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	781a      	ldrb	r2, [r3, #0]
 800c5e0:	2a39      	cmp	r2, #57	; 0x39
 800c5e2:	d106      	bne.n	800c5f2 <_dtoa_r+0x76a>
 800c5e4:	9a06      	ldr	r2, [sp, #24]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d1f7      	bne.n	800c5da <_dtoa_r+0x752>
 800c5ea:	2230      	movs	r2, #48	; 0x30
 800c5ec:	9906      	ldr	r1, [sp, #24]
 800c5ee:	3601      	adds	r6, #1
 800c5f0:	700a      	strb	r2, [r1, #0]
 800c5f2:	781a      	ldrb	r2, [r3, #0]
 800c5f4:	3201      	adds	r2, #1
 800c5f6:	701a      	strb	r2, [r3, #0]
 800c5f8:	e784      	b.n	800c504 <_dtoa_r+0x67c>
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4baa      	ldr	r3, [pc, #680]	; (800c8a8 <_dtoa_r+0xa20>)
 800c5fe:	f7f5 f8e3 	bl	80017c8 <__aeabi_dmul>
 800c602:	2200      	movs	r2, #0
 800c604:	2300      	movs	r3, #0
 800c606:	0004      	movs	r4, r0
 800c608:	000d      	movs	r5, r1
 800c60a:	f7f3 ff1f 	bl	800044c <__aeabi_dcmpeq>
 800c60e:	2800      	cmp	r0, #0
 800c610:	d09b      	beq.n	800c54a <_dtoa_r+0x6c2>
 800c612:	e7cf      	b.n	800c5b4 <_dtoa_r+0x72c>
 800c614:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c616:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c618:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c61a:	2d00      	cmp	r5, #0
 800c61c:	d012      	beq.n	800c644 <_dtoa_r+0x7bc>
 800c61e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c620:	2a01      	cmp	r2, #1
 800c622:	dc66      	bgt.n	800c6f2 <_dtoa_r+0x86a>
 800c624:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c626:	2a00      	cmp	r2, #0
 800c628:	d05d      	beq.n	800c6e6 <_dtoa_r+0x85e>
 800c62a:	4aa0      	ldr	r2, [pc, #640]	; (800c8ac <_dtoa_r+0xa24>)
 800c62c:	189b      	adds	r3, r3, r2
 800c62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c630:	2101      	movs	r1, #1
 800c632:	18d2      	adds	r2, r2, r3
 800c634:	920a      	str	r2, [sp, #40]	; 0x28
 800c636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c638:	0038      	movs	r0, r7
 800c63a:	18d3      	adds	r3, r2, r3
 800c63c:	930d      	str	r3, [sp, #52]	; 0x34
 800c63e:	f000 fc3b 	bl	800ceb8 <__i2b>
 800c642:	0005      	movs	r5, r0
 800c644:	2c00      	cmp	r4, #0
 800c646:	dd0e      	ble.n	800c666 <_dtoa_r+0x7de>
 800c648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	dd0b      	ble.n	800c666 <_dtoa_r+0x7de>
 800c64e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c650:	0023      	movs	r3, r4
 800c652:	4294      	cmp	r4, r2
 800c654:	dd00      	ble.n	800c658 <_dtoa_r+0x7d0>
 800c656:	0013      	movs	r3, r2
 800c658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c65a:	1ae4      	subs	r4, r4, r3
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	920a      	str	r2, [sp, #40]	; 0x28
 800c660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c662:	1ad3      	subs	r3, r2, r3
 800c664:	930d      	str	r3, [sp, #52]	; 0x34
 800c666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d01f      	beq.n	800c6ac <_dtoa_r+0x824>
 800c66c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d054      	beq.n	800c71c <_dtoa_r+0x894>
 800c672:	2e00      	cmp	r6, #0
 800c674:	dd11      	ble.n	800c69a <_dtoa_r+0x812>
 800c676:	0029      	movs	r1, r5
 800c678:	0032      	movs	r2, r6
 800c67a:	0038      	movs	r0, r7
 800c67c:	f000 fce2 	bl	800d044 <__pow5mult>
 800c680:	9a05      	ldr	r2, [sp, #20]
 800c682:	0001      	movs	r1, r0
 800c684:	0005      	movs	r5, r0
 800c686:	0038      	movs	r0, r7
 800c688:	f000 fc2c 	bl	800cee4 <__multiply>
 800c68c:	9905      	ldr	r1, [sp, #20]
 800c68e:	9014      	str	r0, [sp, #80]	; 0x50
 800c690:	0038      	movs	r0, r7
 800c692:	f000 fb61 	bl	800cd58 <_Bfree>
 800c696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c69c:	1b9a      	subs	r2, r3, r6
 800c69e:	42b3      	cmp	r3, r6
 800c6a0:	d004      	beq.n	800c6ac <_dtoa_r+0x824>
 800c6a2:	0038      	movs	r0, r7
 800c6a4:	9905      	ldr	r1, [sp, #20]
 800c6a6:	f000 fccd 	bl	800d044 <__pow5mult>
 800c6aa:	9005      	str	r0, [sp, #20]
 800c6ac:	2101      	movs	r1, #1
 800c6ae:	0038      	movs	r0, r7
 800c6b0:	f000 fc02 	bl	800ceb8 <__i2b>
 800c6b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6b6:	0006      	movs	r6, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	dd31      	ble.n	800c720 <_dtoa_r+0x898>
 800c6bc:	001a      	movs	r2, r3
 800c6be:	0001      	movs	r1, r0
 800c6c0:	0038      	movs	r0, r7
 800c6c2:	f000 fcbf 	bl	800d044 <__pow5mult>
 800c6c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6c8:	0006      	movs	r6, r0
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	dd2d      	ble.n	800c72a <_dtoa_r+0x8a2>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	930e      	str	r3, [sp, #56]	; 0x38
 800c6d2:	6933      	ldr	r3, [r6, #16]
 800c6d4:	3303      	adds	r3, #3
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	18f3      	adds	r3, r6, r3
 800c6da:	6858      	ldr	r0, [r3, #4]
 800c6dc:	f000 fba4 	bl	800ce28 <__hi0bits>
 800c6e0:	2320      	movs	r3, #32
 800c6e2:	1a18      	subs	r0, r3, r0
 800c6e4:	e039      	b.n	800c75a <_dtoa_r+0x8d2>
 800c6e6:	2336      	movs	r3, #54	; 0x36
 800c6e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6ea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c6ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6ee:	1a9b      	subs	r3, r3, r2
 800c6f0:	e79d      	b.n	800c62e <_dtoa_r+0x7a6>
 800c6f2:	9b07      	ldr	r3, [sp, #28]
 800c6f4:	1e5e      	subs	r6, r3, #1
 800c6f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f8:	42b3      	cmp	r3, r6
 800c6fa:	db07      	blt.n	800c70c <_dtoa_r+0x884>
 800c6fc:	1b9e      	subs	r6, r3, r6
 800c6fe:	9b07      	ldr	r3, [sp, #28]
 800c700:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c702:	2b00      	cmp	r3, #0
 800c704:	da93      	bge.n	800c62e <_dtoa_r+0x7a6>
 800c706:	1ae4      	subs	r4, r4, r3
 800c708:	2300      	movs	r3, #0
 800c70a:	e790      	b.n	800c62e <_dtoa_r+0x7a6>
 800c70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c70e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c710:	1af3      	subs	r3, r6, r3
 800c712:	18d3      	adds	r3, r2, r3
 800c714:	960e      	str	r6, [sp, #56]	; 0x38
 800c716:	9315      	str	r3, [sp, #84]	; 0x54
 800c718:	2600      	movs	r6, #0
 800c71a:	e7f0      	b.n	800c6fe <_dtoa_r+0x876>
 800c71c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c71e:	e7c0      	b.n	800c6a2 <_dtoa_r+0x81a>
 800c720:	2300      	movs	r3, #0
 800c722:	930e      	str	r3, [sp, #56]	; 0x38
 800c724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c726:	2b01      	cmp	r3, #1
 800c728:	dc13      	bgt.n	800c752 <_dtoa_r+0x8ca>
 800c72a:	2300      	movs	r3, #0
 800c72c:	930e      	str	r3, [sp, #56]	; 0x38
 800c72e:	9b08      	ldr	r3, [sp, #32]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10e      	bne.n	800c752 <_dtoa_r+0x8ca>
 800c734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c736:	031b      	lsls	r3, r3, #12
 800c738:	d10b      	bne.n	800c752 <_dtoa_r+0x8ca>
 800c73a:	4b5d      	ldr	r3, [pc, #372]	; (800c8b0 <_dtoa_r+0xa28>)
 800c73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73e:	4213      	tst	r3, r2
 800c740:	d007      	beq.n	800c752 <_dtoa_r+0x8ca>
 800c742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c744:	3301      	adds	r3, #1
 800c746:	930a      	str	r3, [sp, #40]	; 0x28
 800c748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c74a:	3301      	adds	r3, #1
 800c74c:	930d      	str	r3, [sp, #52]	; 0x34
 800c74e:	2301      	movs	r3, #1
 800c750:	930e      	str	r3, [sp, #56]	; 0x38
 800c752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c754:	2001      	movs	r0, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1bb      	bne.n	800c6d2 <_dtoa_r+0x84a>
 800c75a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c75c:	221f      	movs	r2, #31
 800c75e:	1818      	adds	r0, r3, r0
 800c760:	0003      	movs	r3, r0
 800c762:	4013      	ands	r3, r2
 800c764:	4210      	tst	r0, r2
 800c766:	d046      	beq.n	800c7f6 <_dtoa_r+0x96e>
 800c768:	3201      	adds	r2, #1
 800c76a:	1ad2      	subs	r2, r2, r3
 800c76c:	2a04      	cmp	r2, #4
 800c76e:	dd3f      	ble.n	800c7f0 <_dtoa_r+0x968>
 800c770:	221c      	movs	r2, #28
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c776:	18e4      	adds	r4, r4, r3
 800c778:	18d2      	adds	r2, r2, r3
 800c77a:	920a      	str	r2, [sp, #40]	; 0x28
 800c77c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c77e:	18d3      	adds	r3, r2, r3
 800c780:	930d      	str	r3, [sp, #52]	; 0x34
 800c782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c784:	2b00      	cmp	r3, #0
 800c786:	dd05      	ble.n	800c794 <_dtoa_r+0x90c>
 800c788:	001a      	movs	r2, r3
 800c78a:	0038      	movs	r0, r7
 800c78c:	9905      	ldr	r1, [sp, #20]
 800c78e:	f000 fcb5 	bl	800d0fc <__lshift>
 800c792:	9005      	str	r0, [sp, #20]
 800c794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c796:	2b00      	cmp	r3, #0
 800c798:	dd05      	ble.n	800c7a6 <_dtoa_r+0x91e>
 800c79a:	0031      	movs	r1, r6
 800c79c:	001a      	movs	r2, r3
 800c79e:	0038      	movs	r0, r7
 800c7a0:	f000 fcac 	bl	800d0fc <__lshift>
 800c7a4:	0006      	movs	r6, r0
 800c7a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d026      	beq.n	800c7fa <_dtoa_r+0x972>
 800c7ac:	0031      	movs	r1, r6
 800c7ae:	9805      	ldr	r0, [sp, #20]
 800c7b0:	f000 fd12 	bl	800d1d8 <__mcmp>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	da20      	bge.n	800c7fa <_dtoa_r+0x972>
 800c7b8:	9b02      	ldr	r3, [sp, #8]
 800c7ba:	220a      	movs	r2, #10
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	9302      	str	r3, [sp, #8]
 800c7c0:	0038      	movs	r0, r7
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9905      	ldr	r1, [sp, #20]
 800c7c6:	f000 faeb 	bl	800cda0 <__multadd>
 800c7ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7cc:	9005      	str	r0, [sp, #20]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d100      	bne.n	800c7d4 <_dtoa_r+0x94c>
 800c7d2:	e166      	b.n	800caa2 <_dtoa_r+0xc1a>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	0029      	movs	r1, r5
 800c7d8:	220a      	movs	r2, #10
 800c7da:	0038      	movs	r0, r7
 800c7dc:	f000 fae0 	bl	800cda0 <__multadd>
 800c7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7e2:	0005      	movs	r5, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dc47      	bgt.n	800c878 <_dtoa_r+0x9f0>
 800c7e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	dc0d      	bgt.n	800c80a <_dtoa_r+0x982>
 800c7ee:	e043      	b.n	800c878 <_dtoa_r+0x9f0>
 800c7f0:	2a04      	cmp	r2, #4
 800c7f2:	d0c6      	beq.n	800c782 <_dtoa_r+0x8fa>
 800c7f4:	0013      	movs	r3, r2
 800c7f6:	331c      	adds	r3, #28
 800c7f8:	e7bc      	b.n	800c774 <_dtoa_r+0x8ec>
 800c7fa:	9b07      	ldr	r3, [sp, #28]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dc35      	bgt.n	800c86c <_dtoa_r+0x9e4>
 800c800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c802:	2b02      	cmp	r3, #2
 800c804:	dd32      	ble.n	800c86c <_dtoa_r+0x9e4>
 800c806:	9b07      	ldr	r3, [sp, #28]
 800c808:	930c      	str	r3, [sp, #48]	; 0x30
 800c80a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10c      	bne.n	800c82a <_dtoa_r+0x9a2>
 800c810:	0031      	movs	r1, r6
 800c812:	2205      	movs	r2, #5
 800c814:	0038      	movs	r0, r7
 800c816:	f000 fac3 	bl	800cda0 <__multadd>
 800c81a:	0006      	movs	r6, r0
 800c81c:	0001      	movs	r1, r0
 800c81e:	9805      	ldr	r0, [sp, #20]
 800c820:	f000 fcda 	bl	800d1d8 <__mcmp>
 800c824:	2800      	cmp	r0, #0
 800c826:	dd00      	ble.n	800c82a <_dtoa_r+0x9a2>
 800c828:	e5a5      	b.n	800c376 <_dtoa_r+0x4ee>
 800c82a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c82c:	43db      	mvns	r3, r3
 800c82e:	9302      	str	r3, [sp, #8]
 800c830:	9b06      	ldr	r3, [sp, #24]
 800c832:	9308      	str	r3, [sp, #32]
 800c834:	2400      	movs	r4, #0
 800c836:	0031      	movs	r1, r6
 800c838:	0038      	movs	r0, r7
 800c83a:	f000 fa8d 	bl	800cd58 <_Bfree>
 800c83e:	2d00      	cmp	r5, #0
 800c840:	d100      	bne.n	800c844 <_dtoa_r+0x9bc>
 800c842:	e6b7      	b.n	800c5b4 <_dtoa_r+0x72c>
 800c844:	2c00      	cmp	r4, #0
 800c846:	d005      	beq.n	800c854 <_dtoa_r+0x9cc>
 800c848:	42ac      	cmp	r4, r5
 800c84a:	d003      	beq.n	800c854 <_dtoa_r+0x9cc>
 800c84c:	0021      	movs	r1, r4
 800c84e:	0038      	movs	r0, r7
 800c850:	f000 fa82 	bl	800cd58 <_Bfree>
 800c854:	0029      	movs	r1, r5
 800c856:	0038      	movs	r0, r7
 800c858:	f000 fa7e 	bl	800cd58 <_Bfree>
 800c85c:	e6aa      	b.n	800c5b4 <_dtoa_r+0x72c>
 800c85e:	2600      	movs	r6, #0
 800c860:	0035      	movs	r5, r6
 800c862:	e7e2      	b.n	800c82a <_dtoa_r+0x9a2>
 800c864:	9602      	str	r6, [sp, #8]
 800c866:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c868:	0035      	movs	r5, r6
 800c86a:	e584      	b.n	800c376 <_dtoa_r+0x4ee>
 800c86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d100      	bne.n	800c874 <_dtoa_r+0x9ec>
 800c872:	e0ce      	b.n	800ca12 <_dtoa_r+0xb8a>
 800c874:	9b07      	ldr	r3, [sp, #28]
 800c876:	930c      	str	r3, [sp, #48]	; 0x30
 800c878:	2c00      	cmp	r4, #0
 800c87a:	dd05      	ble.n	800c888 <_dtoa_r+0xa00>
 800c87c:	0029      	movs	r1, r5
 800c87e:	0022      	movs	r2, r4
 800c880:	0038      	movs	r0, r7
 800c882:	f000 fc3b 	bl	800d0fc <__lshift>
 800c886:	0005      	movs	r5, r0
 800c888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c88a:	0028      	movs	r0, r5
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d022      	beq.n	800c8d6 <_dtoa_r+0xa4e>
 800c890:	0038      	movs	r0, r7
 800c892:	6869      	ldr	r1, [r5, #4]
 800c894:	f000 fa1c 	bl	800ccd0 <_Balloc>
 800c898:	1e04      	subs	r4, r0, #0
 800c89a:	d10f      	bne.n	800c8bc <_dtoa_r+0xa34>
 800c89c:	0002      	movs	r2, r0
 800c89e:	4b05      	ldr	r3, [pc, #20]	; (800c8b4 <_dtoa_r+0xa2c>)
 800c8a0:	4905      	ldr	r1, [pc, #20]	; (800c8b8 <_dtoa_r+0xa30>)
 800c8a2:	f7ff fb06 	bl	800beb2 <_dtoa_r+0x2a>
 800c8a6:	46c0      	nop			; (mov r8, r8)
 800c8a8:	40240000 	.word	0x40240000
 800c8ac:	00000433 	.word	0x00000433
 800c8b0:	7ff00000 	.word	0x7ff00000
 800c8b4:	0800e3db 	.word	0x0800e3db
 800c8b8:	000002ea 	.word	0x000002ea
 800c8bc:	0029      	movs	r1, r5
 800c8be:	692b      	ldr	r3, [r5, #16]
 800c8c0:	310c      	adds	r1, #12
 800c8c2:	1c9a      	adds	r2, r3, #2
 800c8c4:	0092      	lsls	r2, r2, #2
 800c8c6:	300c      	adds	r0, #12
 800c8c8:	f7fe fc23 	bl	800b112 <memcpy>
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	0021      	movs	r1, r4
 800c8d0:	0038      	movs	r0, r7
 800c8d2:	f000 fc13 	bl	800d0fc <__lshift>
 800c8d6:	9b06      	ldr	r3, [sp, #24]
 800c8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8da:	930a      	str	r3, [sp, #40]	; 0x28
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	189b      	adds	r3, r3, r2
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	002c      	movs	r4, r5
 800c8e4:	0005      	movs	r5, r0
 800c8e6:	9314      	str	r3, [sp, #80]	; 0x50
 800c8e8:	9b08      	ldr	r3, [sp, #32]
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ee:	0031      	movs	r1, r6
 800c8f0:	9805      	ldr	r0, [sp, #20]
 800c8f2:	f7ff fa3d 	bl	800bd70 <quorem>
 800c8f6:	0003      	movs	r3, r0
 800c8f8:	0021      	movs	r1, r4
 800c8fa:	3330      	adds	r3, #48	; 0x30
 800c8fc:	900d      	str	r0, [sp, #52]	; 0x34
 800c8fe:	9805      	ldr	r0, [sp, #20]
 800c900:	9307      	str	r3, [sp, #28]
 800c902:	f000 fc69 	bl	800d1d8 <__mcmp>
 800c906:	002a      	movs	r2, r5
 800c908:	900e      	str	r0, [sp, #56]	; 0x38
 800c90a:	0031      	movs	r1, r6
 800c90c:	0038      	movs	r0, r7
 800c90e:	f000 fc7f 	bl	800d210 <__mdiff>
 800c912:	68c3      	ldr	r3, [r0, #12]
 800c914:	9008      	str	r0, [sp, #32]
 800c916:	9310      	str	r3, [sp, #64]	; 0x40
 800c918:	2301      	movs	r3, #1
 800c91a:	930c      	str	r3, [sp, #48]	; 0x30
 800c91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d104      	bne.n	800c92c <_dtoa_r+0xaa4>
 800c922:	0001      	movs	r1, r0
 800c924:	9805      	ldr	r0, [sp, #20]
 800c926:	f000 fc57 	bl	800d1d8 <__mcmp>
 800c92a:	900c      	str	r0, [sp, #48]	; 0x30
 800c92c:	0038      	movs	r0, r7
 800c92e:	9908      	ldr	r1, [sp, #32]
 800c930:	f000 fa12 	bl	800cd58 <_Bfree>
 800c934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c938:	3301      	adds	r3, #1
 800c93a:	9308      	str	r3, [sp, #32]
 800c93c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c93e:	4313      	orrs	r3, r2
 800c940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c942:	4313      	orrs	r3, r2
 800c944:	d10c      	bne.n	800c960 <_dtoa_r+0xad8>
 800c946:	9b07      	ldr	r3, [sp, #28]
 800c948:	2b39      	cmp	r3, #57	; 0x39
 800c94a:	d026      	beq.n	800c99a <_dtoa_r+0xb12>
 800c94c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dd02      	ble.n	800c958 <_dtoa_r+0xad0>
 800c952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c954:	3331      	adds	r3, #49	; 0x31
 800c956:	9307      	str	r3, [sp, #28]
 800c958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c95a:	9a07      	ldr	r2, [sp, #28]
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	e76a      	b.n	800c836 <_dtoa_r+0x9ae>
 800c960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c962:	2b00      	cmp	r3, #0
 800c964:	db04      	blt.n	800c970 <_dtoa_r+0xae8>
 800c966:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c968:	4313      	orrs	r3, r2
 800c96a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c96c:	4313      	orrs	r3, r2
 800c96e:	d11f      	bne.n	800c9b0 <_dtoa_r+0xb28>
 800c970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c972:	2b00      	cmp	r3, #0
 800c974:	ddf0      	ble.n	800c958 <_dtoa_r+0xad0>
 800c976:	9905      	ldr	r1, [sp, #20]
 800c978:	2201      	movs	r2, #1
 800c97a:	0038      	movs	r0, r7
 800c97c:	f000 fbbe 	bl	800d0fc <__lshift>
 800c980:	0031      	movs	r1, r6
 800c982:	9005      	str	r0, [sp, #20]
 800c984:	f000 fc28 	bl	800d1d8 <__mcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	dc03      	bgt.n	800c994 <_dtoa_r+0xb0c>
 800c98c:	d1e4      	bne.n	800c958 <_dtoa_r+0xad0>
 800c98e:	9b07      	ldr	r3, [sp, #28]
 800c990:	07db      	lsls	r3, r3, #31
 800c992:	d5e1      	bpl.n	800c958 <_dtoa_r+0xad0>
 800c994:	9b07      	ldr	r3, [sp, #28]
 800c996:	2b39      	cmp	r3, #57	; 0x39
 800c998:	d1db      	bne.n	800c952 <_dtoa_r+0xaca>
 800c99a:	2339      	movs	r3, #57	; 0x39
 800c99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c99e:	7013      	strb	r3, [r2, #0]
 800c9a0:	9b08      	ldr	r3, [sp, #32]
 800c9a2:	9308      	str	r3, [sp, #32]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	781a      	ldrb	r2, [r3, #0]
 800c9a8:	2a39      	cmp	r2, #57	; 0x39
 800c9aa:	d068      	beq.n	800ca7e <_dtoa_r+0xbf6>
 800c9ac:	3201      	adds	r2, #1
 800c9ae:	e7d5      	b.n	800c95c <_dtoa_r+0xad4>
 800c9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dd07      	ble.n	800c9c6 <_dtoa_r+0xb3e>
 800c9b6:	9b07      	ldr	r3, [sp, #28]
 800c9b8:	2b39      	cmp	r3, #57	; 0x39
 800c9ba:	d0ee      	beq.n	800c99a <_dtoa_r+0xb12>
 800c9bc:	9b07      	ldr	r3, [sp, #28]
 800c9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	7013      	strb	r3, [r2, #0]
 800c9c4:	e737      	b.n	800c836 <_dtoa_r+0x9ae>
 800c9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9c8:	9a07      	ldr	r2, [sp, #28]
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d03e      	beq.n	800ca52 <_dtoa_r+0xbca>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	220a      	movs	r2, #10
 800c9d8:	9905      	ldr	r1, [sp, #20]
 800c9da:	0038      	movs	r0, r7
 800c9dc:	f000 f9e0 	bl	800cda0 <__multadd>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	9005      	str	r0, [sp, #20]
 800c9e4:	220a      	movs	r2, #10
 800c9e6:	0021      	movs	r1, r4
 800c9e8:	0038      	movs	r0, r7
 800c9ea:	42ac      	cmp	r4, r5
 800c9ec:	d106      	bne.n	800c9fc <_dtoa_r+0xb74>
 800c9ee:	f000 f9d7 	bl	800cda0 <__multadd>
 800c9f2:	0004      	movs	r4, r0
 800c9f4:	0005      	movs	r5, r0
 800c9f6:	9b08      	ldr	r3, [sp, #32]
 800c9f8:	930a      	str	r3, [sp, #40]	; 0x28
 800c9fa:	e778      	b.n	800c8ee <_dtoa_r+0xa66>
 800c9fc:	f000 f9d0 	bl	800cda0 <__multadd>
 800ca00:	0029      	movs	r1, r5
 800ca02:	0004      	movs	r4, r0
 800ca04:	2300      	movs	r3, #0
 800ca06:	220a      	movs	r2, #10
 800ca08:	0038      	movs	r0, r7
 800ca0a:	f000 f9c9 	bl	800cda0 <__multadd>
 800ca0e:	0005      	movs	r5, r0
 800ca10:	e7f1      	b.n	800c9f6 <_dtoa_r+0xb6e>
 800ca12:	9b07      	ldr	r3, [sp, #28]
 800ca14:	930c      	str	r3, [sp, #48]	; 0x30
 800ca16:	2400      	movs	r4, #0
 800ca18:	0031      	movs	r1, r6
 800ca1a:	9805      	ldr	r0, [sp, #20]
 800ca1c:	f7ff f9a8 	bl	800bd70 <quorem>
 800ca20:	9b06      	ldr	r3, [sp, #24]
 800ca22:	3030      	adds	r0, #48	; 0x30
 800ca24:	5518      	strb	r0, [r3, r4]
 800ca26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca28:	3401      	adds	r4, #1
 800ca2a:	9007      	str	r0, [sp, #28]
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	dd07      	ble.n	800ca40 <_dtoa_r+0xbb8>
 800ca30:	2300      	movs	r3, #0
 800ca32:	220a      	movs	r2, #10
 800ca34:	0038      	movs	r0, r7
 800ca36:	9905      	ldr	r1, [sp, #20]
 800ca38:	f000 f9b2 	bl	800cda0 <__multadd>
 800ca3c:	9005      	str	r0, [sp, #20]
 800ca3e:	e7eb      	b.n	800ca18 <_dtoa_r+0xb90>
 800ca40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca42:	2001      	movs	r0, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	dd00      	ble.n	800ca4a <_dtoa_r+0xbc2>
 800ca48:	0018      	movs	r0, r3
 800ca4a:	2400      	movs	r4, #0
 800ca4c:	9b06      	ldr	r3, [sp, #24]
 800ca4e:	181b      	adds	r3, r3, r0
 800ca50:	9308      	str	r3, [sp, #32]
 800ca52:	9905      	ldr	r1, [sp, #20]
 800ca54:	2201      	movs	r2, #1
 800ca56:	0038      	movs	r0, r7
 800ca58:	f000 fb50 	bl	800d0fc <__lshift>
 800ca5c:	0031      	movs	r1, r6
 800ca5e:	9005      	str	r0, [sp, #20]
 800ca60:	f000 fbba 	bl	800d1d8 <__mcmp>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	dc9b      	bgt.n	800c9a0 <_dtoa_r+0xb18>
 800ca68:	d102      	bne.n	800ca70 <_dtoa_r+0xbe8>
 800ca6a:	9b07      	ldr	r3, [sp, #28]
 800ca6c:	07db      	lsls	r3, r3, #31
 800ca6e:	d497      	bmi.n	800c9a0 <_dtoa_r+0xb18>
 800ca70:	9b08      	ldr	r3, [sp, #32]
 800ca72:	9308      	str	r3, [sp, #32]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	781a      	ldrb	r2, [r3, #0]
 800ca78:	2a30      	cmp	r2, #48	; 0x30
 800ca7a:	d0fa      	beq.n	800ca72 <_dtoa_r+0xbea>
 800ca7c:	e6db      	b.n	800c836 <_dtoa_r+0x9ae>
 800ca7e:	9a06      	ldr	r2, [sp, #24]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d18e      	bne.n	800c9a2 <_dtoa_r+0xb1a>
 800ca84:	9b02      	ldr	r3, [sp, #8]
 800ca86:	3301      	adds	r3, #1
 800ca88:	9302      	str	r3, [sp, #8]
 800ca8a:	2331      	movs	r3, #49	; 0x31
 800ca8c:	e799      	b.n	800c9c2 <_dtoa_r+0xb3a>
 800ca8e:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <_dtoa_r+0xc2c>)
 800ca90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca92:	9306      	str	r3, [sp, #24]
 800ca94:	4b08      	ldr	r3, [pc, #32]	; (800cab8 <_dtoa_r+0xc30>)
 800ca96:	2a00      	cmp	r2, #0
 800ca98:	d001      	beq.n	800ca9e <_dtoa_r+0xc16>
 800ca9a:	f7ff fa3f 	bl	800bf1c <_dtoa_r+0x94>
 800ca9e:	f7ff fa3f 	bl	800bf20 <_dtoa_r+0x98>
 800caa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	dcb6      	bgt.n	800ca16 <_dtoa_r+0xb8e>
 800caa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800caaa:	2b02      	cmp	r3, #2
 800caac:	dd00      	ble.n	800cab0 <_dtoa_r+0xc28>
 800caae:	e6ac      	b.n	800c80a <_dtoa_r+0x982>
 800cab0:	e7b1      	b.n	800ca16 <_dtoa_r+0xb8e>
 800cab2:	46c0      	nop			; (mov r8, r8)
 800cab4:	0800e35c 	.word	0x0800e35c
 800cab8:	0800e364 	.word	0x0800e364

0800cabc <__sflush_r>:
 800cabc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cabe:	898b      	ldrh	r3, [r1, #12]
 800cac0:	0005      	movs	r5, r0
 800cac2:	000c      	movs	r4, r1
 800cac4:	071a      	lsls	r2, r3, #28
 800cac6:	d45f      	bmi.n	800cb88 <__sflush_r+0xcc>
 800cac8:	684a      	ldr	r2, [r1, #4]
 800caca:	2a00      	cmp	r2, #0
 800cacc:	dc04      	bgt.n	800cad8 <__sflush_r+0x1c>
 800cace:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cad0:	2a00      	cmp	r2, #0
 800cad2:	dc01      	bgt.n	800cad8 <__sflush_r+0x1c>
 800cad4:	2000      	movs	r0, #0
 800cad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cad8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cada:	2f00      	cmp	r7, #0
 800cadc:	d0fa      	beq.n	800cad4 <__sflush_r+0x18>
 800cade:	2200      	movs	r2, #0
 800cae0:	2180      	movs	r1, #128	; 0x80
 800cae2:	682e      	ldr	r6, [r5, #0]
 800cae4:	602a      	str	r2, [r5, #0]
 800cae6:	001a      	movs	r2, r3
 800cae8:	0149      	lsls	r1, r1, #5
 800caea:	400a      	ands	r2, r1
 800caec:	420b      	tst	r3, r1
 800caee:	d034      	beq.n	800cb5a <__sflush_r+0x9e>
 800caf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caf2:	89a3      	ldrh	r3, [r4, #12]
 800caf4:	075b      	lsls	r3, r3, #29
 800caf6:	d506      	bpl.n	800cb06 <__sflush_r+0x4a>
 800caf8:	6863      	ldr	r3, [r4, #4]
 800cafa:	1ac0      	subs	r0, r0, r3
 800cafc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d001      	beq.n	800cb06 <__sflush_r+0x4a>
 800cb02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb04:	1ac0      	subs	r0, r0, r3
 800cb06:	0002      	movs	r2, r0
 800cb08:	6a21      	ldr	r1, [r4, #32]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	0028      	movs	r0, r5
 800cb0e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cb10:	47b8      	blx	r7
 800cb12:	89a1      	ldrh	r1, [r4, #12]
 800cb14:	1c43      	adds	r3, r0, #1
 800cb16:	d106      	bne.n	800cb26 <__sflush_r+0x6a>
 800cb18:	682b      	ldr	r3, [r5, #0]
 800cb1a:	2b1d      	cmp	r3, #29
 800cb1c:	d831      	bhi.n	800cb82 <__sflush_r+0xc6>
 800cb1e:	4a2c      	ldr	r2, [pc, #176]	; (800cbd0 <__sflush_r+0x114>)
 800cb20:	40da      	lsrs	r2, r3
 800cb22:	07d3      	lsls	r3, r2, #31
 800cb24:	d52d      	bpl.n	800cb82 <__sflush_r+0xc6>
 800cb26:	2300      	movs	r3, #0
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	04cb      	lsls	r3, r1, #19
 800cb30:	d505      	bpl.n	800cb3e <__sflush_r+0x82>
 800cb32:	1c43      	adds	r3, r0, #1
 800cb34:	d102      	bne.n	800cb3c <__sflush_r+0x80>
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d100      	bne.n	800cb3e <__sflush_r+0x82>
 800cb3c:	6560      	str	r0, [r4, #84]	; 0x54
 800cb3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb40:	602e      	str	r6, [r5, #0]
 800cb42:	2900      	cmp	r1, #0
 800cb44:	d0c6      	beq.n	800cad4 <__sflush_r+0x18>
 800cb46:	0023      	movs	r3, r4
 800cb48:	3344      	adds	r3, #68	; 0x44
 800cb4a:	4299      	cmp	r1, r3
 800cb4c:	d002      	beq.n	800cb54 <__sflush_r+0x98>
 800cb4e:	0028      	movs	r0, r5
 800cb50:	f000 fc86 	bl	800d460 <_free_r>
 800cb54:	2000      	movs	r0, #0
 800cb56:	6360      	str	r0, [r4, #52]	; 0x34
 800cb58:	e7bd      	b.n	800cad6 <__sflush_r+0x1a>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	0028      	movs	r0, r5
 800cb5e:	6a21      	ldr	r1, [r4, #32]
 800cb60:	47b8      	blx	r7
 800cb62:	1c43      	adds	r3, r0, #1
 800cb64:	d1c5      	bne.n	800caf2 <__sflush_r+0x36>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d0c2      	beq.n	800caf2 <__sflush_r+0x36>
 800cb6c:	2b1d      	cmp	r3, #29
 800cb6e:	d001      	beq.n	800cb74 <__sflush_r+0xb8>
 800cb70:	2b16      	cmp	r3, #22
 800cb72:	d101      	bne.n	800cb78 <__sflush_r+0xbc>
 800cb74:	602e      	str	r6, [r5, #0]
 800cb76:	e7ad      	b.n	800cad4 <__sflush_r+0x18>
 800cb78:	2340      	movs	r3, #64	; 0x40
 800cb7a:	89a2      	ldrh	r2, [r4, #12]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	81a3      	strh	r3, [r4, #12]
 800cb80:	e7a9      	b.n	800cad6 <__sflush_r+0x1a>
 800cb82:	2340      	movs	r3, #64	; 0x40
 800cb84:	430b      	orrs	r3, r1
 800cb86:	e7fa      	b.n	800cb7e <__sflush_r+0xc2>
 800cb88:	690f      	ldr	r7, [r1, #16]
 800cb8a:	2f00      	cmp	r7, #0
 800cb8c:	d0a2      	beq.n	800cad4 <__sflush_r+0x18>
 800cb8e:	680a      	ldr	r2, [r1, #0]
 800cb90:	600f      	str	r7, [r1, #0]
 800cb92:	1bd2      	subs	r2, r2, r7
 800cb94:	9201      	str	r2, [sp, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	079b      	lsls	r3, r3, #30
 800cb9a:	d100      	bne.n	800cb9e <__sflush_r+0xe2>
 800cb9c:	694a      	ldr	r2, [r1, #20]
 800cb9e:	60a2      	str	r2, [r4, #8]
 800cba0:	9b01      	ldr	r3, [sp, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	dc00      	bgt.n	800cba8 <__sflush_r+0xec>
 800cba6:	e795      	b.n	800cad4 <__sflush_r+0x18>
 800cba8:	003a      	movs	r2, r7
 800cbaa:	0028      	movs	r0, r5
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	6a21      	ldr	r1, [r4, #32]
 800cbb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbb2:	47b0      	blx	r6
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	dc06      	bgt.n	800cbc6 <__sflush_r+0x10a>
 800cbb8:	2340      	movs	r3, #64	; 0x40
 800cbba:	2001      	movs	r0, #1
 800cbbc:	89a2      	ldrh	r2, [r4, #12]
 800cbbe:	4240      	negs	r0, r0
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	81a3      	strh	r3, [r4, #12]
 800cbc4:	e787      	b.n	800cad6 <__sflush_r+0x1a>
 800cbc6:	9b01      	ldr	r3, [sp, #4]
 800cbc8:	183f      	adds	r7, r7, r0
 800cbca:	1a1b      	subs	r3, r3, r0
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	e7e7      	b.n	800cba0 <__sflush_r+0xe4>
 800cbd0:	20400001 	.word	0x20400001

0800cbd4 <_fflush_r>:
 800cbd4:	690b      	ldr	r3, [r1, #16]
 800cbd6:	b570      	push	{r4, r5, r6, lr}
 800cbd8:	0005      	movs	r5, r0
 800cbda:	000c      	movs	r4, r1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <_fflush_r+0x12>
 800cbe0:	2500      	movs	r5, #0
 800cbe2:	0028      	movs	r0, r5
 800cbe4:	bd70      	pop	{r4, r5, r6, pc}
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d004      	beq.n	800cbf4 <_fflush_r+0x20>
 800cbea:	6983      	ldr	r3, [r0, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <_fflush_r+0x20>
 800cbf0:	f7fe f9c8 	bl	800af84 <__sinit>
 800cbf4:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <_fflush_r+0x74>)
 800cbf6:	429c      	cmp	r4, r3
 800cbf8:	d11b      	bne.n	800cc32 <_fflush_r+0x5e>
 800cbfa:	686c      	ldr	r4, [r5, #4]
 800cbfc:	220c      	movs	r2, #12
 800cbfe:	5ea3      	ldrsh	r3, [r4, r2]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0ed      	beq.n	800cbe0 <_fflush_r+0xc>
 800cc04:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc06:	07d2      	lsls	r2, r2, #31
 800cc08:	d404      	bmi.n	800cc14 <_fflush_r+0x40>
 800cc0a:	059b      	lsls	r3, r3, #22
 800cc0c:	d402      	bmi.n	800cc14 <_fflush_r+0x40>
 800cc0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc10:	f7fe fa7d 	bl	800b10e <__retarget_lock_acquire_recursive>
 800cc14:	0028      	movs	r0, r5
 800cc16:	0021      	movs	r1, r4
 800cc18:	f7ff ff50 	bl	800cabc <__sflush_r>
 800cc1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc1e:	0005      	movs	r5, r0
 800cc20:	07db      	lsls	r3, r3, #31
 800cc22:	d4de      	bmi.n	800cbe2 <_fflush_r+0xe>
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	059b      	lsls	r3, r3, #22
 800cc28:	d4db      	bmi.n	800cbe2 <_fflush_r+0xe>
 800cc2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc2c:	f7fe fa70 	bl	800b110 <__retarget_lock_release_recursive>
 800cc30:	e7d7      	b.n	800cbe2 <_fflush_r+0xe>
 800cc32:	4b06      	ldr	r3, [pc, #24]	; (800cc4c <_fflush_r+0x78>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	d101      	bne.n	800cc3c <_fflush_r+0x68>
 800cc38:	68ac      	ldr	r4, [r5, #8]
 800cc3a:	e7df      	b.n	800cbfc <_fflush_r+0x28>
 800cc3c:	4b04      	ldr	r3, [pc, #16]	; (800cc50 <_fflush_r+0x7c>)
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	d1dc      	bne.n	800cbfc <_fflush_r+0x28>
 800cc42:	68ec      	ldr	r4, [r5, #12]
 800cc44:	e7da      	b.n	800cbfc <_fflush_r+0x28>
 800cc46:	46c0      	nop			; (mov r8, r8)
 800cc48:	0800e2e4 	.word	0x0800e2e4
 800cc4c:	0800e304 	.word	0x0800e304
 800cc50:	0800e2c4 	.word	0x0800e2c4

0800cc54 <_localeconv_r>:
 800cc54:	4800      	ldr	r0, [pc, #0]	; (800cc58 <_localeconv_r+0x4>)
 800cc56:	4770      	bx	lr
 800cc58:	20000168 	.word	0x20000168

0800cc5c <_lseek_r>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	0004      	movs	r4, r0
 800cc60:	0008      	movs	r0, r1
 800cc62:	0011      	movs	r1, r2
 800cc64:	001a      	movs	r2, r3
 800cc66:	2300      	movs	r3, #0
 800cc68:	4d05      	ldr	r5, [pc, #20]	; (800cc80 <_lseek_r+0x24>)
 800cc6a:	602b      	str	r3, [r5, #0]
 800cc6c:	f7f6 fcd4 	bl	8003618 <_lseek>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d103      	bne.n	800cc7c <_lseek_r+0x20>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d000      	beq.n	800cc7c <_lseek_r+0x20>
 800cc7a:	6023      	str	r3, [r4, #0]
 800cc7c:	bd70      	pop	{r4, r5, r6, pc}
 800cc7e:	46c0      	nop			; (mov r8, r8)
 800cc80:	20002d8c 	.word	0x20002d8c

0800cc84 <malloc>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <malloc+0x10>)
 800cc88:	0001      	movs	r1, r0
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	f7fe fa74 	bl	800b178 <_malloc_r>
 800cc90:	bd10      	pop	{r4, pc}
 800cc92:	46c0      	nop			; (mov r8, r8)
 800cc94:	20000014 	.word	0x20000014

0800cc98 <memchr>:
 800cc98:	b2c9      	uxtb	r1, r1
 800cc9a:	1882      	adds	r2, r0, r2
 800cc9c:	4290      	cmp	r0, r2
 800cc9e:	d101      	bne.n	800cca4 <memchr+0xc>
 800cca0:	2000      	movs	r0, #0
 800cca2:	4770      	bx	lr
 800cca4:	7803      	ldrb	r3, [r0, #0]
 800cca6:	428b      	cmp	r3, r1
 800cca8:	d0fb      	beq.n	800cca2 <memchr+0xa>
 800ccaa:	3001      	adds	r0, #1
 800ccac:	e7f6      	b.n	800cc9c <memchr+0x4>
	...

0800ccb0 <__malloc_lock>:
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	4802      	ldr	r0, [pc, #8]	; (800ccbc <__malloc_lock+0xc>)
 800ccb4:	f7fe fa2b 	bl	800b10e <__retarget_lock_acquire_recursive>
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	46c0      	nop			; (mov r8, r8)
 800ccbc:	20002d80 	.word	0x20002d80

0800ccc0 <__malloc_unlock>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	4802      	ldr	r0, [pc, #8]	; (800cccc <__malloc_unlock+0xc>)
 800ccc4:	f7fe fa24 	bl	800b110 <__retarget_lock_release_recursive>
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	46c0      	nop			; (mov r8, r8)
 800cccc:	20002d80 	.word	0x20002d80

0800ccd0 <_Balloc>:
 800ccd0:	b570      	push	{r4, r5, r6, lr}
 800ccd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ccd4:	0006      	movs	r6, r0
 800ccd6:	000c      	movs	r4, r1
 800ccd8:	2d00      	cmp	r5, #0
 800ccda:	d10e      	bne.n	800ccfa <_Balloc+0x2a>
 800ccdc:	2010      	movs	r0, #16
 800ccde:	f7ff ffd1 	bl	800cc84 <malloc>
 800cce2:	1e02      	subs	r2, r0, #0
 800cce4:	6270      	str	r0, [r6, #36]	; 0x24
 800cce6:	d104      	bne.n	800ccf2 <_Balloc+0x22>
 800cce8:	2166      	movs	r1, #102	; 0x66
 800ccea:	4b19      	ldr	r3, [pc, #100]	; (800cd50 <_Balloc+0x80>)
 800ccec:	4819      	ldr	r0, [pc, #100]	; (800cd54 <_Balloc+0x84>)
 800ccee:	f000 fd77 	bl	800d7e0 <__assert_func>
 800ccf2:	6045      	str	r5, [r0, #4]
 800ccf4:	6085      	str	r5, [r0, #8]
 800ccf6:	6005      	str	r5, [r0, #0]
 800ccf8:	60c5      	str	r5, [r0, #12]
 800ccfa:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ccfc:	68eb      	ldr	r3, [r5, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d013      	beq.n	800cd2a <_Balloc+0x5a>
 800cd02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cd04:	00a2      	lsls	r2, r4, #2
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	189b      	adds	r3, r3, r2
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d118      	bne.n	800cd42 <_Balloc+0x72>
 800cd10:	2101      	movs	r1, #1
 800cd12:	000d      	movs	r5, r1
 800cd14:	40a5      	lsls	r5, r4
 800cd16:	1d6a      	adds	r2, r5, #5
 800cd18:	0030      	movs	r0, r6
 800cd1a:	0092      	lsls	r2, r2, #2
 800cd1c:	f000 fb74 	bl	800d408 <_calloc_r>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d00c      	beq.n	800cd3e <_Balloc+0x6e>
 800cd24:	6044      	str	r4, [r0, #4]
 800cd26:	6085      	str	r5, [r0, #8]
 800cd28:	e00d      	b.n	800cd46 <_Balloc+0x76>
 800cd2a:	2221      	movs	r2, #33	; 0x21
 800cd2c:	2104      	movs	r1, #4
 800cd2e:	0030      	movs	r0, r6
 800cd30:	f000 fb6a 	bl	800d408 <_calloc_r>
 800cd34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cd36:	60e8      	str	r0, [r5, #12]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1e1      	bne.n	800cd02 <_Balloc+0x32>
 800cd3e:	2000      	movs	r0, #0
 800cd40:	bd70      	pop	{r4, r5, r6, pc}
 800cd42:	6802      	ldr	r2, [r0, #0]
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	2300      	movs	r3, #0
 800cd48:	6103      	str	r3, [r0, #16]
 800cd4a:	60c3      	str	r3, [r0, #12]
 800cd4c:	e7f8      	b.n	800cd40 <_Balloc+0x70>
 800cd4e:	46c0      	nop			; (mov r8, r8)
 800cd50:	0800e369 	.word	0x0800e369
 800cd54:	0800e3ec 	.word	0x0800e3ec

0800cd58 <_Bfree>:
 800cd58:	b570      	push	{r4, r5, r6, lr}
 800cd5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd5c:	0005      	movs	r5, r0
 800cd5e:	000c      	movs	r4, r1
 800cd60:	2e00      	cmp	r6, #0
 800cd62:	d10e      	bne.n	800cd82 <_Bfree+0x2a>
 800cd64:	2010      	movs	r0, #16
 800cd66:	f7ff ff8d 	bl	800cc84 <malloc>
 800cd6a:	1e02      	subs	r2, r0, #0
 800cd6c:	6268      	str	r0, [r5, #36]	; 0x24
 800cd6e:	d104      	bne.n	800cd7a <_Bfree+0x22>
 800cd70:	218a      	movs	r1, #138	; 0x8a
 800cd72:	4b09      	ldr	r3, [pc, #36]	; (800cd98 <_Bfree+0x40>)
 800cd74:	4809      	ldr	r0, [pc, #36]	; (800cd9c <_Bfree+0x44>)
 800cd76:	f000 fd33 	bl	800d7e0 <__assert_func>
 800cd7a:	6046      	str	r6, [r0, #4]
 800cd7c:	6086      	str	r6, [r0, #8]
 800cd7e:	6006      	str	r6, [r0, #0]
 800cd80:	60c6      	str	r6, [r0, #12]
 800cd82:	2c00      	cmp	r4, #0
 800cd84:	d007      	beq.n	800cd96 <_Bfree+0x3e>
 800cd86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd88:	6862      	ldr	r2, [r4, #4]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	0092      	lsls	r2, r2, #2
 800cd8e:	189b      	adds	r3, r3, r2
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	6022      	str	r2, [r4, #0]
 800cd94:	601c      	str	r4, [r3, #0]
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	0800e369 	.word	0x0800e369
 800cd9c:	0800e3ec 	.word	0x0800e3ec

0800cda0 <__multadd>:
 800cda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cda2:	000e      	movs	r6, r1
 800cda4:	9001      	str	r0, [sp, #4]
 800cda6:	000c      	movs	r4, r1
 800cda8:	001d      	movs	r5, r3
 800cdaa:	2000      	movs	r0, #0
 800cdac:	690f      	ldr	r7, [r1, #16]
 800cdae:	3614      	adds	r6, #20
 800cdb0:	6833      	ldr	r3, [r6, #0]
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	b299      	uxth	r1, r3
 800cdb6:	4351      	muls	r1, r2
 800cdb8:	0c1b      	lsrs	r3, r3, #16
 800cdba:	4353      	muls	r3, r2
 800cdbc:	1949      	adds	r1, r1, r5
 800cdbe:	0c0d      	lsrs	r5, r1, #16
 800cdc0:	195b      	adds	r3, r3, r5
 800cdc2:	0c1d      	lsrs	r5, r3, #16
 800cdc4:	b289      	uxth	r1, r1
 800cdc6:	041b      	lsls	r3, r3, #16
 800cdc8:	185b      	adds	r3, r3, r1
 800cdca:	c608      	stmia	r6!, {r3}
 800cdcc:	4287      	cmp	r7, r0
 800cdce:	dcef      	bgt.n	800cdb0 <__multadd+0x10>
 800cdd0:	2d00      	cmp	r5, #0
 800cdd2:	d022      	beq.n	800ce1a <__multadd+0x7a>
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	42bb      	cmp	r3, r7
 800cdd8:	dc19      	bgt.n	800ce0e <__multadd+0x6e>
 800cdda:	6863      	ldr	r3, [r4, #4]
 800cddc:	9801      	ldr	r0, [sp, #4]
 800cdde:	1c59      	adds	r1, r3, #1
 800cde0:	f7ff ff76 	bl	800ccd0 <_Balloc>
 800cde4:	1e06      	subs	r6, r0, #0
 800cde6:	d105      	bne.n	800cdf4 <__multadd+0x54>
 800cde8:	0002      	movs	r2, r0
 800cdea:	21b5      	movs	r1, #181	; 0xb5
 800cdec:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <__multadd+0x80>)
 800cdee:	480d      	ldr	r0, [pc, #52]	; (800ce24 <__multadd+0x84>)
 800cdf0:	f000 fcf6 	bl	800d7e0 <__assert_func>
 800cdf4:	0021      	movs	r1, r4
 800cdf6:	6923      	ldr	r3, [r4, #16]
 800cdf8:	310c      	adds	r1, #12
 800cdfa:	1c9a      	adds	r2, r3, #2
 800cdfc:	0092      	lsls	r2, r2, #2
 800cdfe:	300c      	adds	r0, #12
 800ce00:	f7fe f987 	bl	800b112 <memcpy>
 800ce04:	0021      	movs	r1, r4
 800ce06:	9801      	ldr	r0, [sp, #4]
 800ce08:	f7ff ffa6 	bl	800cd58 <_Bfree>
 800ce0c:	0034      	movs	r4, r6
 800ce0e:	1d3b      	adds	r3, r7, #4
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	18e3      	adds	r3, r4, r3
 800ce14:	605d      	str	r5, [r3, #4]
 800ce16:	1c7b      	adds	r3, r7, #1
 800ce18:	6123      	str	r3, [r4, #16]
 800ce1a:	0020      	movs	r0, r4
 800ce1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce1e:	46c0      	nop			; (mov r8, r8)
 800ce20:	0800e3db 	.word	0x0800e3db
 800ce24:	0800e3ec 	.word	0x0800e3ec

0800ce28 <__hi0bits>:
 800ce28:	0003      	movs	r3, r0
 800ce2a:	0c02      	lsrs	r2, r0, #16
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	4282      	cmp	r2, r0
 800ce30:	d101      	bne.n	800ce36 <__hi0bits+0xe>
 800ce32:	041b      	lsls	r3, r3, #16
 800ce34:	3010      	adds	r0, #16
 800ce36:	0e1a      	lsrs	r2, r3, #24
 800ce38:	d101      	bne.n	800ce3e <__hi0bits+0x16>
 800ce3a:	3008      	adds	r0, #8
 800ce3c:	021b      	lsls	r3, r3, #8
 800ce3e:	0f1a      	lsrs	r2, r3, #28
 800ce40:	d101      	bne.n	800ce46 <__hi0bits+0x1e>
 800ce42:	3004      	adds	r0, #4
 800ce44:	011b      	lsls	r3, r3, #4
 800ce46:	0f9a      	lsrs	r2, r3, #30
 800ce48:	d101      	bne.n	800ce4e <__hi0bits+0x26>
 800ce4a:	3002      	adds	r0, #2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	db03      	blt.n	800ce5a <__hi0bits+0x32>
 800ce52:	3001      	adds	r0, #1
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	d400      	bmi.n	800ce5a <__hi0bits+0x32>
 800ce58:	2020      	movs	r0, #32
 800ce5a:	4770      	bx	lr

0800ce5c <__lo0bits>:
 800ce5c:	6803      	ldr	r3, [r0, #0]
 800ce5e:	0002      	movs	r2, r0
 800ce60:	2107      	movs	r1, #7
 800ce62:	0018      	movs	r0, r3
 800ce64:	4008      	ands	r0, r1
 800ce66:	420b      	tst	r3, r1
 800ce68:	d00d      	beq.n	800ce86 <__lo0bits+0x2a>
 800ce6a:	3906      	subs	r1, #6
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	420b      	tst	r3, r1
 800ce70:	d105      	bne.n	800ce7e <__lo0bits+0x22>
 800ce72:	3002      	adds	r0, #2
 800ce74:	4203      	tst	r3, r0
 800ce76:	d003      	beq.n	800ce80 <__lo0bits+0x24>
 800ce78:	40cb      	lsrs	r3, r1
 800ce7a:	0008      	movs	r0, r1
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	4770      	bx	lr
 800ce80:	089b      	lsrs	r3, r3, #2
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	e7fb      	b.n	800ce7e <__lo0bits+0x22>
 800ce86:	b299      	uxth	r1, r3
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	d101      	bne.n	800ce90 <__lo0bits+0x34>
 800ce8c:	2010      	movs	r0, #16
 800ce8e:	0c1b      	lsrs	r3, r3, #16
 800ce90:	b2d9      	uxtb	r1, r3
 800ce92:	2900      	cmp	r1, #0
 800ce94:	d101      	bne.n	800ce9a <__lo0bits+0x3e>
 800ce96:	3008      	adds	r0, #8
 800ce98:	0a1b      	lsrs	r3, r3, #8
 800ce9a:	0719      	lsls	r1, r3, #28
 800ce9c:	d101      	bne.n	800cea2 <__lo0bits+0x46>
 800ce9e:	3004      	adds	r0, #4
 800cea0:	091b      	lsrs	r3, r3, #4
 800cea2:	0799      	lsls	r1, r3, #30
 800cea4:	d101      	bne.n	800ceaa <__lo0bits+0x4e>
 800cea6:	3002      	adds	r0, #2
 800cea8:	089b      	lsrs	r3, r3, #2
 800ceaa:	07d9      	lsls	r1, r3, #31
 800ceac:	d4e9      	bmi.n	800ce82 <__lo0bits+0x26>
 800ceae:	3001      	adds	r0, #1
 800ceb0:	085b      	lsrs	r3, r3, #1
 800ceb2:	d1e6      	bne.n	800ce82 <__lo0bits+0x26>
 800ceb4:	2020      	movs	r0, #32
 800ceb6:	e7e2      	b.n	800ce7e <__lo0bits+0x22>

0800ceb8 <__i2b>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	000c      	movs	r4, r1
 800cebc:	2101      	movs	r1, #1
 800cebe:	f7ff ff07 	bl	800ccd0 <_Balloc>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d106      	bne.n	800ced4 <__i2b+0x1c>
 800cec6:	21a0      	movs	r1, #160	; 0xa0
 800cec8:	0002      	movs	r2, r0
 800ceca:	4b04      	ldr	r3, [pc, #16]	; (800cedc <__i2b+0x24>)
 800cecc:	4804      	ldr	r0, [pc, #16]	; (800cee0 <__i2b+0x28>)
 800cece:	0049      	lsls	r1, r1, #1
 800ced0:	f000 fc86 	bl	800d7e0 <__assert_func>
 800ced4:	2301      	movs	r3, #1
 800ced6:	6144      	str	r4, [r0, #20]
 800ced8:	6103      	str	r3, [r0, #16]
 800ceda:	bd10      	pop	{r4, pc}
 800cedc:	0800e3db 	.word	0x0800e3db
 800cee0:	0800e3ec 	.word	0x0800e3ec

0800cee4 <__multiply>:
 800cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee6:	690b      	ldr	r3, [r1, #16]
 800cee8:	0014      	movs	r4, r2
 800ceea:	6912      	ldr	r2, [r2, #16]
 800ceec:	000d      	movs	r5, r1
 800ceee:	b089      	sub	sp, #36	; 0x24
 800cef0:	4293      	cmp	r3, r2
 800cef2:	da01      	bge.n	800cef8 <__multiply+0x14>
 800cef4:	0025      	movs	r5, r4
 800cef6:	000c      	movs	r4, r1
 800cef8:	692f      	ldr	r7, [r5, #16]
 800cefa:	6926      	ldr	r6, [r4, #16]
 800cefc:	6869      	ldr	r1, [r5, #4]
 800cefe:	19bb      	adds	r3, r7, r6
 800cf00:	9302      	str	r3, [sp, #8]
 800cf02:	68ab      	ldr	r3, [r5, #8]
 800cf04:	19ba      	adds	r2, r7, r6
 800cf06:	4293      	cmp	r3, r2
 800cf08:	da00      	bge.n	800cf0c <__multiply+0x28>
 800cf0a:	3101      	adds	r1, #1
 800cf0c:	f7ff fee0 	bl	800ccd0 <_Balloc>
 800cf10:	9001      	str	r0, [sp, #4]
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d106      	bne.n	800cf24 <__multiply+0x40>
 800cf16:	215e      	movs	r1, #94	; 0x5e
 800cf18:	0002      	movs	r2, r0
 800cf1a:	4b48      	ldr	r3, [pc, #288]	; (800d03c <__multiply+0x158>)
 800cf1c:	4848      	ldr	r0, [pc, #288]	; (800d040 <__multiply+0x15c>)
 800cf1e:	31ff      	adds	r1, #255	; 0xff
 800cf20:	f000 fc5e 	bl	800d7e0 <__assert_func>
 800cf24:	9b01      	ldr	r3, [sp, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	3314      	adds	r3, #20
 800cf2a:	469c      	mov	ip, r3
 800cf2c:	19bb      	adds	r3, r7, r6
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4463      	add	r3, ip
 800cf32:	9303      	str	r3, [sp, #12]
 800cf34:	4663      	mov	r3, ip
 800cf36:	9903      	ldr	r1, [sp, #12]
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	d32c      	bcc.n	800cf96 <__multiply+0xb2>
 800cf3c:	002b      	movs	r3, r5
 800cf3e:	0022      	movs	r2, r4
 800cf40:	3314      	adds	r3, #20
 800cf42:	00bf      	lsls	r7, r7, #2
 800cf44:	3214      	adds	r2, #20
 800cf46:	9306      	str	r3, [sp, #24]
 800cf48:	00b6      	lsls	r6, r6, #2
 800cf4a:	19db      	adds	r3, r3, r7
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	1993      	adds	r3, r2, r6
 800cf50:	9307      	str	r3, [sp, #28]
 800cf52:	2304      	movs	r3, #4
 800cf54:	9305      	str	r3, [sp, #20]
 800cf56:	002b      	movs	r3, r5
 800cf58:	9904      	ldr	r1, [sp, #16]
 800cf5a:	3315      	adds	r3, #21
 800cf5c:	9200      	str	r2, [sp, #0]
 800cf5e:	4299      	cmp	r1, r3
 800cf60:	d305      	bcc.n	800cf6e <__multiply+0x8a>
 800cf62:	1b4b      	subs	r3, r1, r5
 800cf64:	3b15      	subs	r3, #21
 800cf66:	089b      	lsrs	r3, r3, #2
 800cf68:	3301      	adds	r3, #1
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	9305      	str	r3, [sp, #20]
 800cf6e:	9b07      	ldr	r3, [sp, #28]
 800cf70:	9a00      	ldr	r2, [sp, #0]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d311      	bcc.n	800cf9a <__multiply+0xb6>
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	dd06      	ble.n	800cf8a <__multiply+0xa6>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	3b04      	subs	r3, #4
 800cf80:	9303      	str	r3, [sp, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d053      	beq.n	800d032 <__multiply+0x14e>
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	9a02      	ldr	r2, [sp, #8]
 800cf8e:	0018      	movs	r0, r3
 800cf90:	611a      	str	r2, [r3, #16]
 800cf92:	b009      	add	sp, #36	; 0x24
 800cf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf96:	c304      	stmia	r3!, {r2}
 800cf98:	e7cd      	b.n	800cf36 <__multiply+0x52>
 800cf9a:	9b00      	ldr	r3, [sp, #0]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	b298      	uxth	r0, r3
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d01b      	beq.n	800cfdc <__multiply+0xf8>
 800cfa4:	4667      	mov	r7, ip
 800cfa6:	2400      	movs	r4, #0
 800cfa8:	9e06      	ldr	r6, [sp, #24]
 800cfaa:	ce02      	ldmia	r6!, {r1}
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	b28b      	uxth	r3, r1
 800cfb0:	4343      	muls	r3, r0
 800cfb2:	b292      	uxth	r2, r2
 800cfb4:	189b      	adds	r3, r3, r2
 800cfb6:	191b      	adds	r3, r3, r4
 800cfb8:	0c0c      	lsrs	r4, r1, #16
 800cfba:	4344      	muls	r4, r0
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	0c11      	lsrs	r1, r2, #16
 800cfc0:	1861      	adds	r1, r4, r1
 800cfc2:	0c1c      	lsrs	r4, r3, #16
 800cfc4:	1909      	adds	r1, r1, r4
 800cfc6:	0c0c      	lsrs	r4, r1, #16
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	0409      	lsls	r1, r1, #16
 800cfcc:	430b      	orrs	r3, r1
 800cfce:	c708      	stmia	r7!, {r3}
 800cfd0:	9b04      	ldr	r3, [sp, #16]
 800cfd2:	42b3      	cmp	r3, r6
 800cfd4:	d8e9      	bhi.n	800cfaa <__multiply+0xc6>
 800cfd6:	4663      	mov	r3, ip
 800cfd8:	9a05      	ldr	r2, [sp, #20]
 800cfda:	509c      	str	r4, [r3, r2]
 800cfdc:	9b00      	ldr	r3, [sp, #0]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	0c1e      	lsrs	r6, r3, #16
 800cfe2:	d020      	beq.n	800d026 <__multiply+0x142>
 800cfe4:	4663      	mov	r3, ip
 800cfe6:	002c      	movs	r4, r5
 800cfe8:	4660      	mov	r0, ip
 800cfea:	2700      	movs	r7, #0
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3414      	adds	r4, #20
 800cff0:	6822      	ldr	r2, [r4, #0]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	b291      	uxth	r1, r2
 800cff6:	4371      	muls	r1, r6
 800cff8:	6802      	ldr	r2, [r0, #0]
 800cffa:	0c12      	lsrs	r2, r2, #16
 800cffc:	1889      	adds	r1, r1, r2
 800cffe:	19cf      	adds	r7, r1, r7
 800d000:	0439      	lsls	r1, r7, #16
 800d002:	430b      	orrs	r3, r1
 800d004:	6003      	str	r3, [r0, #0]
 800d006:	cc02      	ldmia	r4!, {r1}
 800d008:	6843      	ldr	r3, [r0, #4]
 800d00a:	0c09      	lsrs	r1, r1, #16
 800d00c:	4371      	muls	r1, r6
 800d00e:	b29b      	uxth	r3, r3
 800d010:	0c3f      	lsrs	r7, r7, #16
 800d012:	18cb      	adds	r3, r1, r3
 800d014:	9a04      	ldr	r2, [sp, #16]
 800d016:	19db      	adds	r3, r3, r7
 800d018:	0c1f      	lsrs	r7, r3, #16
 800d01a:	3004      	adds	r0, #4
 800d01c:	42a2      	cmp	r2, r4
 800d01e:	d8e7      	bhi.n	800cff0 <__multiply+0x10c>
 800d020:	4662      	mov	r2, ip
 800d022:	9905      	ldr	r1, [sp, #20]
 800d024:	5053      	str	r3, [r2, r1]
 800d026:	9b00      	ldr	r3, [sp, #0]
 800d028:	3304      	adds	r3, #4
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	2304      	movs	r3, #4
 800d02e:	449c      	add	ip, r3
 800d030:	e79d      	b.n	800cf6e <__multiply+0x8a>
 800d032:	9b02      	ldr	r3, [sp, #8]
 800d034:	3b01      	subs	r3, #1
 800d036:	9302      	str	r3, [sp, #8]
 800d038:	e79d      	b.n	800cf76 <__multiply+0x92>
 800d03a:	46c0      	nop			; (mov r8, r8)
 800d03c:	0800e3db 	.word	0x0800e3db
 800d040:	0800e3ec 	.word	0x0800e3ec

0800d044 <__pow5mult>:
 800d044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d046:	2303      	movs	r3, #3
 800d048:	0015      	movs	r5, r2
 800d04a:	0007      	movs	r7, r0
 800d04c:	000e      	movs	r6, r1
 800d04e:	401a      	ands	r2, r3
 800d050:	421d      	tst	r5, r3
 800d052:	d008      	beq.n	800d066 <__pow5mult+0x22>
 800d054:	4925      	ldr	r1, [pc, #148]	; (800d0ec <__pow5mult+0xa8>)
 800d056:	3a01      	subs	r2, #1
 800d058:	0092      	lsls	r2, r2, #2
 800d05a:	5852      	ldr	r2, [r2, r1]
 800d05c:	2300      	movs	r3, #0
 800d05e:	0031      	movs	r1, r6
 800d060:	f7ff fe9e 	bl	800cda0 <__multadd>
 800d064:	0006      	movs	r6, r0
 800d066:	10ad      	asrs	r5, r5, #2
 800d068:	d03d      	beq.n	800d0e6 <__pow5mult+0xa2>
 800d06a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d06c:	2c00      	cmp	r4, #0
 800d06e:	d10f      	bne.n	800d090 <__pow5mult+0x4c>
 800d070:	2010      	movs	r0, #16
 800d072:	f7ff fe07 	bl	800cc84 <malloc>
 800d076:	1e02      	subs	r2, r0, #0
 800d078:	6278      	str	r0, [r7, #36]	; 0x24
 800d07a:	d105      	bne.n	800d088 <__pow5mult+0x44>
 800d07c:	21d7      	movs	r1, #215	; 0xd7
 800d07e:	4b1c      	ldr	r3, [pc, #112]	; (800d0f0 <__pow5mult+0xac>)
 800d080:	481c      	ldr	r0, [pc, #112]	; (800d0f4 <__pow5mult+0xb0>)
 800d082:	0049      	lsls	r1, r1, #1
 800d084:	f000 fbac 	bl	800d7e0 <__assert_func>
 800d088:	6044      	str	r4, [r0, #4]
 800d08a:	6084      	str	r4, [r0, #8]
 800d08c:	6004      	str	r4, [r0, #0]
 800d08e:	60c4      	str	r4, [r0, #12]
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	689c      	ldr	r4, [r3, #8]
 800d094:	9301      	str	r3, [sp, #4]
 800d096:	2c00      	cmp	r4, #0
 800d098:	d108      	bne.n	800d0ac <__pow5mult+0x68>
 800d09a:	0038      	movs	r0, r7
 800d09c:	4916      	ldr	r1, [pc, #88]	; (800d0f8 <__pow5mult+0xb4>)
 800d09e:	f7ff ff0b 	bl	800ceb8 <__i2b>
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	0004      	movs	r4, r0
 800d0a6:	6098      	str	r0, [r3, #8]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	6003      	str	r3, [r0, #0]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	421d      	tst	r5, r3
 800d0b0:	d00a      	beq.n	800d0c8 <__pow5mult+0x84>
 800d0b2:	0031      	movs	r1, r6
 800d0b4:	0022      	movs	r2, r4
 800d0b6:	0038      	movs	r0, r7
 800d0b8:	f7ff ff14 	bl	800cee4 <__multiply>
 800d0bc:	0031      	movs	r1, r6
 800d0be:	9001      	str	r0, [sp, #4]
 800d0c0:	0038      	movs	r0, r7
 800d0c2:	f7ff fe49 	bl	800cd58 <_Bfree>
 800d0c6:	9e01      	ldr	r6, [sp, #4]
 800d0c8:	106d      	asrs	r5, r5, #1
 800d0ca:	d00c      	beq.n	800d0e6 <__pow5mult+0xa2>
 800d0cc:	6820      	ldr	r0, [r4, #0]
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d107      	bne.n	800d0e2 <__pow5mult+0x9e>
 800d0d2:	0022      	movs	r2, r4
 800d0d4:	0021      	movs	r1, r4
 800d0d6:	0038      	movs	r0, r7
 800d0d8:	f7ff ff04 	bl	800cee4 <__multiply>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	6020      	str	r0, [r4, #0]
 800d0e0:	6003      	str	r3, [r0, #0]
 800d0e2:	0004      	movs	r4, r0
 800d0e4:	e7e2      	b.n	800d0ac <__pow5mult+0x68>
 800d0e6:	0030      	movs	r0, r6
 800d0e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0ea:	46c0      	nop			; (mov r8, r8)
 800d0ec:	0800e538 	.word	0x0800e538
 800d0f0:	0800e369 	.word	0x0800e369
 800d0f4:	0800e3ec 	.word	0x0800e3ec
 800d0f8:	00000271 	.word	0x00000271

0800d0fc <__lshift>:
 800d0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0fe:	000c      	movs	r4, r1
 800d100:	0017      	movs	r7, r2
 800d102:	6923      	ldr	r3, [r4, #16]
 800d104:	1155      	asrs	r5, r2, #5
 800d106:	b087      	sub	sp, #28
 800d108:	18eb      	adds	r3, r5, r3
 800d10a:	9302      	str	r3, [sp, #8]
 800d10c:	3301      	adds	r3, #1
 800d10e:	9301      	str	r3, [sp, #4]
 800d110:	6849      	ldr	r1, [r1, #4]
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	9004      	str	r0, [sp, #16]
 800d116:	9a01      	ldr	r2, [sp, #4]
 800d118:	4293      	cmp	r3, r2
 800d11a:	db10      	blt.n	800d13e <__lshift+0x42>
 800d11c:	9804      	ldr	r0, [sp, #16]
 800d11e:	f7ff fdd7 	bl	800ccd0 <_Balloc>
 800d122:	2300      	movs	r3, #0
 800d124:	0002      	movs	r2, r0
 800d126:	0006      	movs	r6, r0
 800d128:	0019      	movs	r1, r3
 800d12a:	3214      	adds	r2, #20
 800d12c:	4298      	cmp	r0, r3
 800d12e:	d10c      	bne.n	800d14a <__lshift+0x4e>
 800d130:	21da      	movs	r1, #218	; 0xda
 800d132:	0002      	movs	r2, r0
 800d134:	4b26      	ldr	r3, [pc, #152]	; (800d1d0 <__lshift+0xd4>)
 800d136:	4827      	ldr	r0, [pc, #156]	; (800d1d4 <__lshift+0xd8>)
 800d138:	31ff      	adds	r1, #255	; 0xff
 800d13a:	f000 fb51 	bl	800d7e0 <__assert_func>
 800d13e:	3101      	adds	r1, #1
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	e7e8      	b.n	800d116 <__lshift+0x1a>
 800d144:	0098      	lsls	r0, r3, #2
 800d146:	5011      	str	r1, [r2, r0]
 800d148:	3301      	adds	r3, #1
 800d14a:	42ab      	cmp	r3, r5
 800d14c:	dbfa      	blt.n	800d144 <__lshift+0x48>
 800d14e:	43eb      	mvns	r3, r5
 800d150:	17db      	asrs	r3, r3, #31
 800d152:	401d      	ands	r5, r3
 800d154:	211f      	movs	r1, #31
 800d156:	0023      	movs	r3, r4
 800d158:	0038      	movs	r0, r7
 800d15a:	00ad      	lsls	r5, r5, #2
 800d15c:	1955      	adds	r5, r2, r5
 800d15e:	6922      	ldr	r2, [r4, #16]
 800d160:	3314      	adds	r3, #20
 800d162:	0092      	lsls	r2, r2, #2
 800d164:	4008      	ands	r0, r1
 800d166:	4684      	mov	ip, r0
 800d168:	189a      	adds	r2, r3, r2
 800d16a:	420f      	tst	r7, r1
 800d16c:	d02a      	beq.n	800d1c4 <__lshift+0xc8>
 800d16e:	3101      	adds	r1, #1
 800d170:	1a09      	subs	r1, r1, r0
 800d172:	9105      	str	r1, [sp, #20]
 800d174:	2100      	movs	r1, #0
 800d176:	9503      	str	r5, [sp, #12]
 800d178:	4667      	mov	r7, ip
 800d17a:	6818      	ldr	r0, [r3, #0]
 800d17c:	40b8      	lsls	r0, r7
 800d17e:	4301      	orrs	r1, r0
 800d180:	9803      	ldr	r0, [sp, #12]
 800d182:	c002      	stmia	r0!, {r1}
 800d184:	cb02      	ldmia	r3!, {r1}
 800d186:	9003      	str	r0, [sp, #12]
 800d188:	9805      	ldr	r0, [sp, #20]
 800d18a:	40c1      	lsrs	r1, r0
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d8f3      	bhi.n	800d178 <__lshift+0x7c>
 800d190:	0020      	movs	r0, r4
 800d192:	3015      	adds	r0, #21
 800d194:	2304      	movs	r3, #4
 800d196:	4282      	cmp	r2, r0
 800d198:	d304      	bcc.n	800d1a4 <__lshift+0xa8>
 800d19a:	1b13      	subs	r3, r2, r4
 800d19c:	3b15      	subs	r3, #21
 800d19e:	089b      	lsrs	r3, r3, #2
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	50e9      	str	r1, [r5, r3]
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	d002      	beq.n	800d1b0 <__lshift+0xb4>
 800d1aa:	9b02      	ldr	r3, [sp, #8]
 800d1ac:	3302      	adds	r3, #2
 800d1ae:	9301      	str	r3, [sp, #4]
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	9804      	ldr	r0, [sp, #16]
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	0021      	movs	r1, r4
 800d1b8:	6133      	str	r3, [r6, #16]
 800d1ba:	f7ff fdcd 	bl	800cd58 <_Bfree>
 800d1be:	0030      	movs	r0, r6
 800d1c0:	b007      	add	sp, #28
 800d1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c4:	cb02      	ldmia	r3!, {r1}
 800d1c6:	c502      	stmia	r5!, {r1}
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d8fb      	bhi.n	800d1c4 <__lshift+0xc8>
 800d1cc:	e7f0      	b.n	800d1b0 <__lshift+0xb4>
 800d1ce:	46c0      	nop			; (mov r8, r8)
 800d1d0:	0800e3db 	.word	0x0800e3db
 800d1d4:	0800e3ec 	.word	0x0800e3ec

0800d1d8 <__mcmp>:
 800d1d8:	6902      	ldr	r2, [r0, #16]
 800d1da:	690b      	ldr	r3, [r1, #16]
 800d1dc:	b530      	push	{r4, r5, lr}
 800d1de:	0004      	movs	r4, r0
 800d1e0:	1ad0      	subs	r0, r2, r3
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d10d      	bne.n	800d202 <__mcmp+0x2a>
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	3414      	adds	r4, #20
 800d1ea:	3114      	adds	r1, #20
 800d1ec:	18e2      	adds	r2, r4, r3
 800d1ee:	18c9      	adds	r1, r1, r3
 800d1f0:	3a04      	subs	r2, #4
 800d1f2:	3904      	subs	r1, #4
 800d1f4:	6815      	ldr	r5, [r2, #0]
 800d1f6:	680b      	ldr	r3, [r1, #0]
 800d1f8:	429d      	cmp	r5, r3
 800d1fa:	d003      	beq.n	800d204 <__mcmp+0x2c>
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	429d      	cmp	r5, r3
 800d200:	d303      	bcc.n	800d20a <__mcmp+0x32>
 800d202:	bd30      	pop	{r4, r5, pc}
 800d204:	4294      	cmp	r4, r2
 800d206:	d3f3      	bcc.n	800d1f0 <__mcmp+0x18>
 800d208:	e7fb      	b.n	800d202 <__mcmp+0x2a>
 800d20a:	4240      	negs	r0, r0
 800d20c:	e7f9      	b.n	800d202 <__mcmp+0x2a>
	...

0800d210 <__mdiff>:
 800d210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d212:	000e      	movs	r6, r1
 800d214:	0007      	movs	r7, r0
 800d216:	0011      	movs	r1, r2
 800d218:	0030      	movs	r0, r6
 800d21a:	b087      	sub	sp, #28
 800d21c:	0014      	movs	r4, r2
 800d21e:	f7ff ffdb 	bl	800d1d8 <__mcmp>
 800d222:	1e05      	subs	r5, r0, #0
 800d224:	d110      	bne.n	800d248 <__mdiff+0x38>
 800d226:	0001      	movs	r1, r0
 800d228:	0038      	movs	r0, r7
 800d22a:	f7ff fd51 	bl	800ccd0 <_Balloc>
 800d22e:	1e02      	subs	r2, r0, #0
 800d230:	d104      	bne.n	800d23c <__mdiff+0x2c>
 800d232:	4b40      	ldr	r3, [pc, #256]	; (800d334 <__mdiff+0x124>)
 800d234:	4940      	ldr	r1, [pc, #256]	; (800d338 <__mdiff+0x128>)
 800d236:	4841      	ldr	r0, [pc, #260]	; (800d33c <__mdiff+0x12c>)
 800d238:	f000 fad2 	bl	800d7e0 <__assert_func>
 800d23c:	2301      	movs	r3, #1
 800d23e:	6145      	str	r5, [r0, #20]
 800d240:	6103      	str	r3, [r0, #16]
 800d242:	0010      	movs	r0, r2
 800d244:	b007      	add	sp, #28
 800d246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d248:	2301      	movs	r3, #1
 800d24a:	9301      	str	r3, [sp, #4]
 800d24c:	2800      	cmp	r0, #0
 800d24e:	db04      	blt.n	800d25a <__mdiff+0x4a>
 800d250:	0023      	movs	r3, r4
 800d252:	0034      	movs	r4, r6
 800d254:	001e      	movs	r6, r3
 800d256:	2300      	movs	r3, #0
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	0038      	movs	r0, r7
 800d25c:	6861      	ldr	r1, [r4, #4]
 800d25e:	f7ff fd37 	bl	800ccd0 <_Balloc>
 800d262:	1e02      	subs	r2, r0, #0
 800d264:	d103      	bne.n	800d26e <__mdiff+0x5e>
 800d266:	2190      	movs	r1, #144	; 0x90
 800d268:	4b32      	ldr	r3, [pc, #200]	; (800d334 <__mdiff+0x124>)
 800d26a:	0089      	lsls	r1, r1, #2
 800d26c:	e7e3      	b.n	800d236 <__mdiff+0x26>
 800d26e:	9b01      	ldr	r3, [sp, #4]
 800d270:	2700      	movs	r7, #0
 800d272:	60c3      	str	r3, [r0, #12]
 800d274:	6920      	ldr	r0, [r4, #16]
 800d276:	3414      	adds	r4, #20
 800d278:	9401      	str	r4, [sp, #4]
 800d27a:	9b01      	ldr	r3, [sp, #4]
 800d27c:	0084      	lsls	r4, r0, #2
 800d27e:	191b      	adds	r3, r3, r4
 800d280:	0034      	movs	r4, r6
 800d282:	9302      	str	r3, [sp, #8]
 800d284:	6933      	ldr	r3, [r6, #16]
 800d286:	3414      	adds	r4, #20
 800d288:	0099      	lsls	r1, r3, #2
 800d28a:	1863      	adds	r3, r4, r1
 800d28c:	9303      	str	r3, [sp, #12]
 800d28e:	0013      	movs	r3, r2
 800d290:	3314      	adds	r3, #20
 800d292:	469c      	mov	ip, r3
 800d294:	9305      	str	r3, [sp, #20]
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	9304      	str	r3, [sp, #16]
 800d29a:	9b04      	ldr	r3, [sp, #16]
 800d29c:	cc02      	ldmia	r4!, {r1}
 800d29e:	cb20      	ldmia	r3!, {r5}
 800d2a0:	9304      	str	r3, [sp, #16]
 800d2a2:	b2ab      	uxth	r3, r5
 800d2a4:	19df      	adds	r7, r3, r7
 800d2a6:	b28b      	uxth	r3, r1
 800d2a8:	1afb      	subs	r3, r7, r3
 800d2aa:	0c09      	lsrs	r1, r1, #16
 800d2ac:	0c2d      	lsrs	r5, r5, #16
 800d2ae:	1a6d      	subs	r5, r5, r1
 800d2b0:	1419      	asrs	r1, r3, #16
 800d2b2:	186d      	adds	r5, r5, r1
 800d2b4:	4661      	mov	r1, ip
 800d2b6:	142f      	asrs	r7, r5, #16
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	042d      	lsls	r5, r5, #16
 800d2bc:	432b      	orrs	r3, r5
 800d2be:	c108      	stmia	r1!, {r3}
 800d2c0:	9b03      	ldr	r3, [sp, #12]
 800d2c2:	468c      	mov	ip, r1
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	d8e8      	bhi.n	800d29a <__mdiff+0x8a>
 800d2c8:	0031      	movs	r1, r6
 800d2ca:	9c03      	ldr	r4, [sp, #12]
 800d2cc:	3115      	adds	r1, #21
 800d2ce:	2304      	movs	r3, #4
 800d2d0:	428c      	cmp	r4, r1
 800d2d2:	d304      	bcc.n	800d2de <__mdiff+0xce>
 800d2d4:	1ba3      	subs	r3, r4, r6
 800d2d6:	3b15      	subs	r3, #21
 800d2d8:	089b      	lsrs	r3, r3, #2
 800d2da:	3301      	adds	r3, #1
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	9901      	ldr	r1, [sp, #4]
 800d2e0:	18cc      	adds	r4, r1, r3
 800d2e2:	9905      	ldr	r1, [sp, #20]
 800d2e4:	0026      	movs	r6, r4
 800d2e6:	18cb      	adds	r3, r1, r3
 800d2e8:	469c      	mov	ip, r3
 800d2ea:	9902      	ldr	r1, [sp, #8]
 800d2ec:	428e      	cmp	r6, r1
 800d2ee:	d310      	bcc.n	800d312 <__mdiff+0x102>
 800d2f0:	9e02      	ldr	r6, [sp, #8]
 800d2f2:	1ee1      	subs	r1, r4, #3
 800d2f4:	2500      	movs	r5, #0
 800d2f6:	428e      	cmp	r6, r1
 800d2f8:	d304      	bcc.n	800d304 <__mdiff+0xf4>
 800d2fa:	0031      	movs	r1, r6
 800d2fc:	3103      	adds	r1, #3
 800d2fe:	1b0c      	subs	r4, r1, r4
 800d300:	08a4      	lsrs	r4, r4, #2
 800d302:	00a5      	lsls	r5, r4, #2
 800d304:	195b      	adds	r3, r3, r5
 800d306:	3b04      	subs	r3, #4
 800d308:	6819      	ldr	r1, [r3, #0]
 800d30a:	2900      	cmp	r1, #0
 800d30c:	d00f      	beq.n	800d32e <__mdiff+0x11e>
 800d30e:	6110      	str	r0, [r2, #16]
 800d310:	e797      	b.n	800d242 <__mdiff+0x32>
 800d312:	ce02      	ldmia	r6!, {r1}
 800d314:	b28d      	uxth	r5, r1
 800d316:	19ed      	adds	r5, r5, r7
 800d318:	0c0f      	lsrs	r7, r1, #16
 800d31a:	1429      	asrs	r1, r5, #16
 800d31c:	1879      	adds	r1, r7, r1
 800d31e:	140f      	asrs	r7, r1, #16
 800d320:	b2ad      	uxth	r5, r5
 800d322:	0409      	lsls	r1, r1, #16
 800d324:	430d      	orrs	r5, r1
 800d326:	4661      	mov	r1, ip
 800d328:	c120      	stmia	r1!, {r5}
 800d32a:	468c      	mov	ip, r1
 800d32c:	e7dd      	b.n	800d2ea <__mdiff+0xda>
 800d32e:	3801      	subs	r0, #1
 800d330:	e7e9      	b.n	800d306 <__mdiff+0xf6>
 800d332:	46c0      	nop			; (mov r8, r8)
 800d334:	0800e3db 	.word	0x0800e3db
 800d338:	00000232 	.word	0x00000232
 800d33c:	0800e3ec 	.word	0x0800e3ec

0800d340 <__d2b>:
 800d340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d342:	2101      	movs	r1, #1
 800d344:	0014      	movs	r4, r2
 800d346:	001e      	movs	r6, r3
 800d348:	9f08      	ldr	r7, [sp, #32]
 800d34a:	f7ff fcc1 	bl	800ccd0 <_Balloc>
 800d34e:	1e05      	subs	r5, r0, #0
 800d350:	d105      	bne.n	800d35e <__d2b+0x1e>
 800d352:	0002      	movs	r2, r0
 800d354:	4b26      	ldr	r3, [pc, #152]	; (800d3f0 <__d2b+0xb0>)
 800d356:	4927      	ldr	r1, [pc, #156]	; (800d3f4 <__d2b+0xb4>)
 800d358:	4827      	ldr	r0, [pc, #156]	; (800d3f8 <__d2b+0xb8>)
 800d35a:	f000 fa41 	bl	800d7e0 <__assert_func>
 800d35e:	0333      	lsls	r3, r6, #12
 800d360:	0076      	lsls	r6, r6, #1
 800d362:	0b1b      	lsrs	r3, r3, #12
 800d364:	0d76      	lsrs	r6, r6, #21
 800d366:	d124      	bne.n	800d3b2 <__d2b+0x72>
 800d368:	9301      	str	r3, [sp, #4]
 800d36a:	2c00      	cmp	r4, #0
 800d36c:	d027      	beq.n	800d3be <__d2b+0x7e>
 800d36e:	4668      	mov	r0, sp
 800d370:	9400      	str	r4, [sp, #0]
 800d372:	f7ff fd73 	bl	800ce5c <__lo0bits>
 800d376:	9c00      	ldr	r4, [sp, #0]
 800d378:	2800      	cmp	r0, #0
 800d37a:	d01e      	beq.n	800d3ba <__d2b+0x7a>
 800d37c:	9b01      	ldr	r3, [sp, #4]
 800d37e:	2120      	movs	r1, #32
 800d380:	001a      	movs	r2, r3
 800d382:	1a09      	subs	r1, r1, r0
 800d384:	408a      	lsls	r2, r1
 800d386:	40c3      	lsrs	r3, r0
 800d388:	4322      	orrs	r2, r4
 800d38a:	616a      	str	r2, [r5, #20]
 800d38c:	9301      	str	r3, [sp, #4]
 800d38e:	9c01      	ldr	r4, [sp, #4]
 800d390:	61ac      	str	r4, [r5, #24]
 800d392:	1e63      	subs	r3, r4, #1
 800d394:	419c      	sbcs	r4, r3
 800d396:	3401      	adds	r4, #1
 800d398:	612c      	str	r4, [r5, #16]
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	d018      	beq.n	800d3d0 <__d2b+0x90>
 800d39e:	4b17      	ldr	r3, [pc, #92]	; (800d3fc <__d2b+0xbc>)
 800d3a0:	18f6      	adds	r6, r6, r3
 800d3a2:	2335      	movs	r3, #53	; 0x35
 800d3a4:	1836      	adds	r6, r6, r0
 800d3a6:	1a18      	subs	r0, r3, r0
 800d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3aa:	603e      	str	r6, [r7, #0]
 800d3ac:	6018      	str	r0, [r3, #0]
 800d3ae:	0028      	movs	r0, r5
 800d3b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3b2:	2280      	movs	r2, #128	; 0x80
 800d3b4:	0352      	lsls	r2, r2, #13
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	e7d6      	b.n	800d368 <__d2b+0x28>
 800d3ba:	616c      	str	r4, [r5, #20]
 800d3bc:	e7e7      	b.n	800d38e <__d2b+0x4e>
 800d3be:	a801      	add	r0, sp, #4
 800d3c0:	f7ff fd4c 	bl	800ce5c <__lo0bits>
 800d3c4:	2401      	movs	r4, #1
 800d3c6:	9b01      	ldr	r3, [sp, #4]
 800d3c8:	612c      	str	r4, [r5, #16]
 800d3ca:	616b      	str	r3, [r5, #20]
 800d3cc:	3020      	adds	r0, #32
 800d3ce:	e7e4      	b.n	800d39a <__d2b+0x5a>
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	; (800d400 <__d2b+0xc0>)
 800d3d2:	18c0      	adds	r0, r0, r3
 800d3d4:	4b0b      	ldr	r3, [pc, #44]	; (800d404 <__d2b+0xc4>)
 800d3d6:	6038      	str	r0, [r7, #0]
 800d3d8:	18e3      	adds	r3, r4, r3
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	18eb      	adds	r3, r5, r3
 800d3de:	6958      	ldr	r0, [r3, #20]
 800d3e0:	f7ff fd22 	bl	800ce28 <__hi0bits>
 800d3e4:	0164      	lsls	r4, r4, #5
 800d3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e8:	1a24      	subs	r4, r4, r0
 800d3ea:	601c      	str	r4, [r3, #0]
 800d3ec:	e7df      	b.n	800d3ae <__d2b+0x6e>
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	0800e3db 	.word	0x0800e3db
 800d3f4:	0000030a 	.word	0x0000030a
 800d3f8:	0800e3ec 	.word	0x0800e3ec
 800d3fc:	fffffbcd 	.word	0xfffffbcd
 800d400:	fffffbce 	.word	0xfffffbce
 800d404:	3fffffff 	.word	0x3fffffff

0800d408 <_calloc_r>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	0c13      	lsrs	r3, r2, #16
 800d40c:	0c0d      	lsrs	r5, r1, #16
 800d40e:	d11e      	bne.n	800d44e <_calloc_r+0x46>
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10c      	bne.n	800d42e <_calloc_r+0x26>
 800d414:	b289      	uxth	r1, r1
 800d416:	b294      	uxth	r4, r2
 800d418:	434c      	muls	r4, r1
 800d41a:	0021      	movs	r1, r4
 800d41c:	f7fd feac 	bl	800b178 <_malloc_r>
 800d420:	1e05      	subs	r5, r0, #0
 800d422:	d01b      	beq.n	800d45c <_calloc_r+0x54>
 800d424:	0022      	movs	r2, r4
 800d426:	2100      	movs	r1, #0
 800d428:	f7fd fe7c 	bl	800b124 <memset>
 800d42c:	e016      	b.n	800d45c <_calloc_r+0x54>
 800d42e:	1c1d      	adds	r5, r3, #0
 800d430:	1c0b      	adds	r3, r1, #0
 800d432:	b292      	uxth	r2, r2
 800d434:	b289      	uxth	r1, r1
 800d436:	b29c      	uxth	r4, r3
 800d438:	4351      	muls	r1, r2
 800d43a:	b2ab      	uxth	r3, r5
 800d43c:	4363      	muls	r3, r4
 800d43e:	0c0c      	lsrs	r4, r1, #16
 800d440:	191c      	adds	r4, r3, r4
 800d442:	0c22      	lsrs	r2, r4, #16
 800d444:	d107      	bne.n	800d456 <_calloc_r+0x4e>
 800d446:	0424      	lsls	r4, r4, #16
 800d448:	b289      	uxth	r1, r1
 800d44a:	430c      	orrs	r4, r1
 800d44c:	e7e5      	b.n	800d41a <_calloc_r+0x12>
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <_calloc_r+0x4e>
 800d452:	1c13      	adds	r3, r2, #0
 800d454:	e7ed      	b.n	800d432 <_calloc_r+0x2a>
 800d456:	230c      	movs	r3, #12
 800d458:	2500      	movs	r5, #0
 800d45a:	6003      	str	r3, [r0, #0]
 800d45c:	0028      	movs	r0, r5
 800d45e:	bd70      	pop	{r4, r5, r6, pc}

0800d460 <_free_r>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	0005      	movs	r5, r0
 800d464:	2900      	cmp	r1, #0
 800d466:	d010      	beq.n	800d48a <_free_r+0x2a>
 800d468:	1f0c      	subs	r4, r1, #4
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	da00      	bge.n	800d472 <_free_r+0x12>
 800d470:	18e4      	adds	r4, r4, r3
 800d472:	0028      	movs	r0, r5
 800d474:	f7ff fc1c 	bl	800ccb0 <__malloc_lock>
 800d478:	4a1d      	ldr	r2, [pc, #116]	; (800d4f0 <_free_r+0x90>)
 800d47a:	6813      	ldr	r3, [r2, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d105      	bne.n	800d48c <_free_r+0x2c>
 800d480:	6063      	str	r3, [r4, #4]
 800d482:	6014      	str	r4, [r2, #0]
 800d484:	0028      	movs	r0, r5
 800d486:	f7ff fc1b 	bl	800ccc0 <__malloc_unlock>
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	d908      	bls.n	800d4a2 <_free_r+0x42>
 800d490:	6821      	ldr	r1, [r4, #0]
 800d492:	1860      	adds	r0, r4, r1
 800d494:	4283      	cmp	r3, r0
 800d496:	d1f3      	bne.n	800d480 <_free_r+0x20>
 800d498:	6818      	ldr	r0, [r3, #0]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	1841      	adds	r1, r0, r1
 800d49e:	6021      	str	r1, [r4, #0]
 800d4a0:	e7ee      	b.n	800d480 <_free_r+0x20>
 800d4a2:	001a      	movs	r2, r3
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <_free_r+0x4e>
 800d4aa:	42a3      	cmp	r3, r4
 800d4ac:	d9f9      	bls.n	800d4a2 <_free_r+0x42>
 800d4ae:	6811      	ldr	r1, [r2, #0]
 800d4b0:	1850      	adds	r0, r2, r1
 800d4b2:	42a0      	cmp	r0, r4
 800d4b4:	d10b      	bne.n	800d4ce <_free_r+0x6e>
 800d4b6:	6820      	ldr	r0, [r4, #0]
 800d4b8:	1809      	adds	r1, r1, r0
 800d4ba:	1850      	adds	r0, r2, r1
 800d4bc:	6011      	str	r1, [r2, #0]
 800d4be:	4283      	cmp	r3, r0
 800d4c0:	d1e0      	bne.n	800d484 <_free_r+0x24>
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	1841      	adds	r1, r0, r1
 800d4c8:	6011      	str	r1, [r2, #0]
 800d4ca:	6053      	str	r3, [r2, #4]
 800d4cc:	e7da      	b.n	800d484 <_free_r+0x24>
 800d4ce:	42a0      	cmp	r0, r4
 800d4d0:	d902      	bls.n	800d4d8 <_free_r+0x78>
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	e7d5      	b.n	800d484 <_free_r+0x24>
 800d4d8:	6821      	ldr	r1, [r4, #0]
 800d4da:	1860      	adds	r0, r4, r1
 800d4dc:	4283      	cmp	r3, r0
 800d4de:	d103      	bne.n	800d4e8 <_free_r+0x88>
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	1841      	adds	r1, r0, r1
 800d4e6:	6021      	str	r1, [r4, #0]
 800d4e8:	6063      	str	r3, [r4, #4]
 800d4ea:	6054      	str	r4, [r2, #4]
 800d4ec:	e7ca      	b.n	800d484 <_free_r+0x24>
 800d4ee:	46c0      	nop			; (mov r8, r8)
 800d4f0:	20002d84 	.word	0x20002d84

0800d4f4 <__ssputs_r>:
 800d4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4f6:	688e      	ldr	r6, [r1, #8]
 800d4f8:	b085      	sub	sp, #20
 800d4fa:	0007      	movs	r7, r0
 800d4fc:	000c      	movs	r4, r1
 800d4fe:	9203      	str	r2, [sp, #12]
 800d500:	9301      	str	r3, [sp, #4]
 800d502:	429e      	cmp	r6, r3
 800d504:	d83c      	bhi.n	800d580 <__ssputs_r+0x8c>
 800d506:	2390      	movs	r3, #144	; 0x90
 800d508:	898a      	ldrh	r2, [r1, #12]
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	421a      	tst	r2, r3
 800d50e:	d034      	beq.n	800d57a <__ssputs_r+0x86>
 800d510:	6909      	ldr	r1, [r1, #16]
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	6960      	ldr	r0, [r4, #20]
 800d516:	1a5b      	subs	r3, r3, r1
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	2303      	movs	r3, #3
 800d51c:	4343      	muls	r3, r0
 800d51e:	0fdd      	lsrs	r5, r3, #31
 800d520:	18ed      	adds	r5, r5, r3
 800d522:	9b01      	ldr	r3, [sp, #4]
 800d524:	9802      	ldr	r0, [sp, #8]
 800d526:	3301      	adds	r3, #1
 800d528:	181b      	adds	r3, r3, r0
 800d52a:	106d      	asrs	r5, r5, #1
 800d52c:	42ab      	cmp	r3, r5
 800d52e:	d900      	bls.n	800d532 <__ssputs_r+0x3e>
 800d530:	001d      	movs	r5, r3
 800d532:	0553      	lsls	r3, r2, #21
 800d534:	d532      	bpl.n	800d59c <__ssputs_r+0xa8>
 800d536:	0029      	movs	r1, r5
 800d538:	0038      	movs	r0, r7
 800d53a:	f7fd fe1d 	bl	800b178 <_malloc_r>
 800d53e:	1e06      	subs	r6, r0, #0
 800d540:	d109      	bne.n	800d556 <__ssputs_r+0x62>
 800d542:	230c      	movs	r3, #12
 800d544:	603b      	str	r3, [r7, #0]
 800d546:	2340      	movs	r3, #64	; 0x40
 800d548:	2001      	movs	r0, #1
 800d54a:	89a2      	ldrh	r2, [r4, #12]
 800d54c:	4240      	negs	r0, r0
 800d54e:	4313      	orrs	r3, r2
 800d550:	81a3      	strh	r3, [r4, #12]
 800d552:	b005      	add	sp, #20
 800d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d556:	9a02      	ldr	r2, [sp, #8]
 800d558:	6921      	ldr	r1, [r4, #16]
 800d55a:	f7fd fdda 	bl	800b112 <memcpy>
 800d55e:	89a3      	ldrh	r3, [r4, #12]
 800d560:	4a14      	ldr	r2, [pc, #80]	; (800d5b4 <__ssputs_r+0xc0>)
 800d562:	401a      	ands	r2, r3
 800d564:	2380      	movs	r3, #128	; 0x80
 800d566:	4313      	orrs	r3, r2
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	9b02      	ldr	r3, [sp, #8]
 800d56c:	6126      	str	r6, [r4, #16]
 800d56e:	18f6      	adds	r6, r6, r3
 800d570:	6026      	str	r6, [r4, #0]
 800d572:	6165      	str	r5, [r4, #20]
 800d574:	9e01      	ldr	r6, [sp, #4]
 800d576:	1aed      	subs	r5, r5, r3
 800d578:	60a5      	str	r5, [r4, #8]
 800d57a:	9b01      	ldr	r3, [sp, #4]
 800d57c:	429e      	cmp	r6, r3
 800d57e:	d900      	bls.n	800d582 <__ssputs_r+0x8e>
 800d580:	9e01      	ldr	r6, [sp, #4]
 800d582:	0032      	movs	r2, r6
 800d584:	9903      	ldr	r1, [sp, #12]
 800d586:	6820      	ldr	r0, [r4, #0]
 800d588:	f000 f96a 	bl	800d860 <memmove>
 800d58c:	68a3      	ldr	r3, [r4, #8]
 800d58e:	2000      	movs	r0, #0
 800d590:	1b9b      	subs	r3, r3, r6
 800d592:	60a3      	str	r3, [r4, #8]
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	199e      	adds	r6, r3, r6
 800d598:	6026      	str	r6, [r4, #0]
 800d59a:	e7da      	b.n	800d552 <__ssputs_r+0x5e>
 800d59c:	002a      	movs	r2, r5
 800d59e:	0038      	movs	r0, r7
 800d5a0:	f000 f971 	bl	800d886 <_realloc_r>
 800d5a4:	1e06      	subs	r6, r0, #0
 800d5a6:	d1e0      	bne.n	800d56a <__ssputs_r+0x76>
 800d5a8:	0038      	movs	r0, r7
 800d5aa:	6921      	ldr	r1, [r4, #16]
 800d5ac:	f7ff ff58 	bl	800d460 <_free_r>
 800d5b0:	e7c7      	b.n	800d542 <__ssputs_r+0x4e>
 800d5b2:	46c0      	nop			; (mov r8, r8)
 800d5b4:	fffffb7f 	.word	0xfffffb7f

0800d5b8 <_svfiprintf_r>:
 800d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ba:	b0a1      	sub	sp, #132	; 0x84
 800d5bc:	9003      	str	r0, [sp, #12]
 800d5be:	001d      	movs	r5, r3
 800d5c0:	898b      	ldrh	r3, [r1, #12]
 800d5c2:	000f      	movs	r7, r1
 800d5c4:	0016      	movs	r6, r2
 800d5c6:	061b      	lsls	r3, r3, #24
 800d5c8:	d511      	bpl.n	800d5ee <_svfiprintf_r+0x36>
 800d5ca:	690b      	ldr	r3, [r1, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10e      	bne.n	800d5ee <_svfiprintf_r+0x36>
 800d5d0:	2140      	movs	r1, #64	; 0x40
 800d5d2:	f7fd fdd1 	bl	800b178 <_malloc_r>
 800d5d6:	6038      	str	r0, [r7, #0]
 800d5d8:	6138      	str	r0, [r7, #16]
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d105      	bne.n	800d5ea <_svfiprintf_r+0x32>
 800d5de:	230c      	movs	r3, #12
 800d5e0:	9a03      	ldr	r2, [sp, #12]
 800d5e2:	3801      	subs	r0, #1
 800d5e4:	6013      	str	r3, [r2, #0]
 800d5e6:	b021      	add	sp, #132	; 0x84
 800d5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ea:	2340      	movs	r3, #64	; 0x40
 800d5ec:	617b      	str	r3, [r7, #20]
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	ac08      	add	r4, sp, #32
 800d5f2:	6163      	str	r3, [r4, #20]
 800d5f4:	3320      	adds	r3, #32
 800d5f6:	7663      	strb	r3, [r4, #25]
 800d5f8:	3310      	adds	r3, #16
 800d5fa:	76a3      	strb	r3, [r4, #26]
 800d5fc:	9507      	str	r5, [sp, #28]
 800d5fe:	0035      	movs	r5, r6
 800d600:	782b      	ldrb	r3, [r5, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <_svfiprintf_r+0x52>
 800d606:	2b25      	cmp	r3, #37	; 0x25
 800d608:	d147      	bne.n	800d69a <_svfiprintf_r+0xe2>
 800d60a:	1bab      	subs	r3, r5, r6
 800d60c:	9305      	str	r3, [sp, #20]
 800d60e:	42b5      	cmp	r5, r6
 800d610:	d00c      	beq.n	800d62c <_svfiprintf_r+0x74>
 800d612:	0032      	movs	r2, r6
 800d614:	0039      	movs	r1, r7
 800d616:	9803      	ldr	r0, [sp, #12]
 800d618:	f7ff ff6c 	bl	800d4f4 <__ssputs_r>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d100      	bne.n	800d622 <_svfiprintf_r+0x6a>
 800d620:	e0ae      	b.n	800d780 <_svfiprintf_r+0x1c8>
 800d622:	6962      	ldr	r2, [r4, #20]
 800d624:	9b05      	ldr	r3, [sp, #20]
 800d626:	4694      	mov	ip, r2
 800d628:	4463      	add	r3, ip
 800d62a:	6163      	str	r3, [r4, #20]
 800d62c:	782b      	ldrb	r3, [r5, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d100      	bne.n	800d634 <_svfiprintf_r+0x7c>
 800d632:	e0a5      	b.n	800d780 <_svfiprintf_r+0x1c8>
 800d634:	2201      	movs	r2, #1
 800d636:	2300      	movs	r3, #0
 800d638:	4252      	negs	r2, r2
 800d63a:	6062      	str	r2, [r4, #4]
 800d63c:	a904      	add	r1, sp, #16
 800d63e:	3254      	adds	r2, #84	; 0x54
 800d640:	1852      	adds	r2, r2, r1
 800d642:	1c6e      	adds	r6, r5, #1
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	60e3      	str	r3, [r4, #12]
 800d648:	60a3      	str	r3, [r4, #8]
 800d64a:	7013      	strb	r3, [r2, #0]
 800d64c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d64e:	2205      	movs	r2, #5
 800d650:	7831      	ldrb	r1, [r6, #0]
 800d652:	4854      	ldr	r0, [pc, #336]	; (800d7a4 <_svfiprintf_r+0x1ec>)
 800d654:	f7ff fb20 	bl	800cc98 <memchr>
 800d658:	1c75      	adds	r5, r6, #1
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d11f      	bne.n	800d69e <_svfiprintf_r+0xe6>
 800d65e:	6822      	ldr	r2, [r4, #0]
 800d660:	06d3      	lsls	r3, r2, #27
 800d662:	d504      	bpl.n	800d66e <_svfiprintf_r+0xb6>
 800d664:	2353      	movs	r3, #83	; 0x53
 800d666:	a904      	add	r1, sp, #16
 800d668:	185b      	adds	r3, r3, r1
 800d66a:	2120      	movs	r1, #32
 800d66c:	7019      	strb	r1, [r3, #0]
 800d66e:	0713      	lsls	r3, r2, #28
 800d670:	d504      	bpl.n	800d67c <_svfiprintf_r+0xc4>
 800d672:	2353      	movs	r3, #83	; 0x53
 800d674:	a904      	add	r1, sp, #16
 800d676:	185b      	adds	r3, r3, r1
 800d678:	212b      	movs	r1, #43	; 0x2b
 800d67a:	7019      	strb	r1, [r3, #0]
 800d67c:	7833      	ldrb	r3, [r6, #0]
 800d67e:	2b2a      	cmp	r3, #42	; 0x2a
 800d680:	d016      	beq.n	800d6b0 <_svfiprintf_r+0xf8>
 800d682:	0035      	movs	r5, r6
 800d684:	2100      	movs	r1, #0
 800d686:	200a      	movs	r0, #10
 800d688:	68e3      	ldr	r3, [r4, #12]
 800d68a:	782a      	ldrb	r2, [r5, #0]
 800d68c:	1c6e      	adds	r6, r5, #1
 800d68e:	3a30      	subs	r2, #48	; 0x30
 800d690:	2a09      	cmp	r2, #9
 800d692:	d94e      	bls.n	800d732 <_svfiprintf_r+0x17a>
 800d694:	2900      	cmp	r1, #0
 800d696:	d111      	bne.n	800d6bc <_svfiprintf_r+0x104>
 800d698:	e017      	b.n	800d6ca <_svfiprintf_r+0x112>
 800d69a:	3501      	adds	r5, #1
 800d69c:	e7b0      	b.n	800d600 <_svfiprintf_r+0x48>
 800d69e:	4b41      	ldr	r3, [pc, #260]	; (800d7a4 <_svfiprintf_r+0x1ec>)
 800d6a0:	6822      	ldr	r2, [r4, #0]
 800d6a2:	1ac0      	subs	r0, r0, r3
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	4083      	lsls	r3, r0
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	002e      	movs	r6, r5
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	e7ce      	b.n	800d64e <_svfiprintf_r+0x96>
 800d6b0:	9b07      	ldr	r3, [sp, #28]
 800d6b2:	1d19      	adds	r1, r3, #4
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	9107      	str	r1, [sp, #28]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	db01      	blt.n	800d6c0 <_svfiprintf_r+0x108>
 800d6bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6be:	e004      	b.n	800d6ca <_svfiprintf_r+0x112>
 800d6c0:	425b      	negs	r3, r3
 800d6c2:	60e3      	str	r3, [r4, #12]
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	782b      	ldrb	r3, [r5, #0]
 800d6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ce:	d10a      	bne.n	800d6e6 <_svfiprintf_r+0x12e>
 800d6d0:	786b      	ldrb	r3, [r5, #1]
 800d6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6d4:	d135      	bne.n	800d742 <_svfiprintf_r+0x18a>
 800d6d6:	9b07      	ldr	r3, [sp, #28]
 800d6d8:	3502      	adds	r5, #2
 800d6da:	1d1a      	adds	r2, r3, #4
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	9207      	str	r2, [sp, #28]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	db2b      	blt.n	800d73c <_svfiprintf_r+0x184>
 800d6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e6:	4e30      	ldr	r6, [pc, #192]	; (800d7a8 <_svfiprintf_r+0x1f0>)
 800d6e8:	2203      	movs	r2, #3
 800d6ea:	0030      	movs	r0, r6
 800d6ec:	7829      	ldrb	r1, [r5, #0]
 800d6ee:	f7ff fad3 	bl	800cc98 <memchr>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d006      	beq.n	800d704 <_svfiprintf_r+0x14c>
 800d6f6:	2340      	movs	r3, #64	; 0x40
 800d6f8:	1b80      	subs	r0, r0, r6
 800d6fa:	4083      	lsls	r3, r0
 800d6fc:	6822      	ldr	r2, [r4, #0]
 800d6fe:	3501      	adds	r5, #1
 800d700:	4313      	orrs	r3, r2
 800d702:	6023      	str	r3, [r4, #0]
 800d704:	7829      	ldrb	r1, [r5, #0]
 800d706:	2206      	movs	r2, #6
 800d708:	4828      	ldr	r0, [pc, #160]	; (800d7ac <_svfiprintf_r+0x1f4>)
 800d70a:	1c6e      	adds	r6, r5, #1
 800d70c:	7621      	strb	r1, [r4, #24]
 800d70e:	f7ff fac3 	bl	800cc98 <memchr>
 800d712:	2800      	cmp	r0, #0
 800d714:	d03c      	beq.n	800d790 <_svfiprintf_r+0x1d8>
 800d716:	4b26      	ldr	r3, [pc, #152]	; (800d7b0 <_svfiprintf_r+0x1f8>)
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d125      	bne.n	800d768 <_svfiprintf_r+0x1b0>
 800d71c:	2207      	movs	r2, #7
 800d71e:	9b07      	ldr	r3, [sp, #28]
 800d720:	3307      	adds	r3, #7
 800d722:	4393      	bics	r3, r2
 800d724:	3308      	adds	r3, #8
 800d726:	9307      	str	r3, [sp, #28]
 800d728:	6963      	ldr	r3, [r4, #20]
 800d72a:	9a04      	ldr	r2, [sp, #16]
 800d72c:	189b      	adds	r3, r3, r2
 800d72e:	6163      	str	r3, [r4, #20]
 800d730:	e765      	b.n	800d5fe <_svfiprintf_r+0x46>
 800d732:	4343      	muls	r3, r0
 800d734:	0035      	movs	r5, r6
 800d736:	2101      	movs	r1, #1
 800d738:	189b      	adds	r3, r3, r2
 800d73a:	e7a6      	b.n	800d68a <_svfiprintf_r+0xd2>
 800d73c:	2301      	movs	r3, #1
 800d73e:	425b      	negs	r3, r3
 800d740:	e7d0      	b.n	800d6e4 <_svfiprintf_r+0x12c>
 800d742:	2300      	movs	r3, #0
 800d744:	200a      	movs	r0, #10
 800d746:	001a      	movs	r2, r3
 800d748:	3501      	adds	r5, #1
 800d74a:	6063      	str	r3, [r4, #4]
 800d74c:	7829      	ldrb	r1, [r5, #0]
 800d74e:	1c6e      	adds	r6, r5, #1
 800d750:	3930      	subs	r1, #48	; 0x30
 800d752:	2909      	cmp	r1, #9
 800d754:	d903      	bls.n	800d75e <_svfiprintf_r+0x1a6>
 800d756:	2b00      	cmp	r3, #0
 800d758:	d0c5      	beq.n	800d6e6 <_svfiprintf_r+0x12e>
 800d75a:	9209      	str	r2, [sp, #36]	; 0x24
 800d75c:	e7c3      	b.n	800d6e6 <_svfiprintf_r+0x12e>
 800d75e:	4342      	muls	r2, r0
 800d760:	0035      	movs	r5, r6
 800d762:	2301      	movs	r3, #1
 800d764:	1852      	adds	r2, r2, r1
 800d766:	e7f1      	b.n	800d74c <_svfiprintf_r+0x194>
 800d768:	ab07      	add	r3, sp, #28
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	003a      	movs	r2, r7
 800d76e:	0021      	movs	r1, r4
 800d770:	4b10      	ldr	r3, [pc, #64]	; (800d7b4 <_svfiprintf_r+0x1fc>)
 800d772:	9803      	ldr	r0, [sp, #12]
 800d774:	f7fd fe20 	bl	800b3b8 <_printf_float>
 800d778:	9004      	str	r0, [sp, #16]
 800d77a:	9b04      	ldr	r3, [sp, #16]
 800d77c:	3301      	adds	r3, #1
 800d77e:	d1d3      	bne.n	800d728 <_svfiprintf_r+0x170>
 800d780:	89bb      	ldrh	r3, [r7, #12]
 800d782:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d784:	065b      	lsls	r3, r3, #25
 800d786:	d400      	bmi.n	800d78a <_svfiprintf_r+0x1d2>
 800d788:	e72d      	b.n	800d5e6 <_svfiprintf_r+0x2e>
 800d78a:	2001      	movs	r0, #1
 800d78c:	4240      	negs	r0, r0
 800d78e:	e72a      	b.n	800d5e6 <_svfiprintf_r+0x2e>
 800d790:	ab07      	add	r3, sp, #28
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	003a      	movs	r2, r7
 800d796:	0021      	movs	r1, r4
 800d798:	4b06      	ldr	r3, [pc, #24]	; (800d7b4 <_svfiprintf_r+0x1fc>)
 800d79a:	9803      	ldr	r0, [sp, #12]
 800d79c:	f7fe f8be 	bl	800b91c <_printf_i>
 800d7a0:	e7ea      	b.n	800d778 <_svfiprintf_r+0x1c0>
 800d7a2:	46c0      	nop			; (mov r8, r8)
 800d7a4:	0800e544 	.word	0x0800e544
 800d7a8:	0800e54a 	.word	0x0800e54a
 800d7ac:	0800e54e 	.word	0x0800e54e
 800d7b0:	0800b3b9 	.word	0x0800b3b9
 800d7b4:	0800d4f5 	.word	0x0800d4f5

0800d7b8 <_read_r>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	0004      	movs	r4, r0
 800d7bc:	0008      	movs	r0, r1
 800d7be:	0011      	movs	r1, r2
 800d7c0:	001a      	movs	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4d05      	ldr	r5, [pc, #20]	; (800d7dc <_read_r+0x24>)
 800d7c6:	602b      	str	r3, [r5, #0]
 800d7c8:	f7f5 fecc 	bl	8003564 <_read>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d103      	bne.n	800d7d8 <_read_r+0x20>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d000      	beq.n	800d7d8 <_read_r+0x20>
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	bd70      	pop	{r4, r5, r6, pc}
 800d7da:	46c0      	nop			; (mov r8, r8)
 800d7dc:	20002d8c 	.word	0x20002d8c

0800d7e0 <__assert_func>:
 800d7e0:	b530      	push	{r4, r5, lr}
 800d7e2:	0014      	movs	r4, r2
 800d7e4:	001a      	movs	r2, r3
 800d7e6:	4b09      	ldr	r3, [pc, #36]	; (800d80c <__assert_func+0x2c>)
 800d7e8:	0005      	movs	r5, r0
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	b085      	sub	sp, #20
 800d7ee:	68d8      	ldr	r0, [r3, #12]
 800d7f0:	4b07      	ldr	r3, [pc, #28]	; (800d810 <__assert_func+0x30>)
 800d7f2:	2c00      	cmp	r4, #0
 800d7f4:	d101      	bne.n	800d7fa <__assert_func+0x1a>
 800d7f6:	4b07      	ldr	r3, [pc, #28]	; (800d814 <__assert_func+0x34>)
 800d7f8:	001c      	movs	r4, r3
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	9100      	str	r1, [sp, #0]
 800d7fe:	002b      	movs	r3, r5
 800d800:	4905      	ldr	r1, [pc, #20]	; (800d818 <__assert_func+0x38>)
 800d802:	9402      	str	r4, [sp, #8]
 800d804:	f000 f80a 	bl	800d81c <fiprintf>
 800d808:	f000 faaa 	bl	800dd60 <abort>
 800d80c:	20000014 	.word	0x20000014
 800d810:	0800e555 	.word	0x0800e555
 800d814:	0800e590 	.word	0x0800e590
 800d818:	0800e562 	.word	0x0800e562

0800d81c <fiprintf>:
 800d81c:	b40e      	push	{r1, r2, r3}
 800d81e:	b503      	push	{r0, r1, lr}
 800d820:	0001      	movs	r1, r0
 800d822:	ab03      	add	r3, sp, #12
 800d824:	4804      	ldr	r0, [pc, #16]	; (800d838 <fiprintf+0x1c>)
 800d826:	cb04      	ldmia	r3!, {r2}
 800d828:	6800      	ldr	r0, [r0, #0]
 800d82a:	9301      	str	r3, [sp, #4]
 800d82c:	f000 f882 	bl	800d934 <_vfiprintf_r>
 800d830:	b002      	add	sp, #8
 800d832:	bc08      	pop	{r3}
 800d834:	b003      	add	sp, #12
 800d836:	4718      	bx	r3
 800d838:	20000014 	.word	0x20000014

0800d83c <__ascii_mbtowc>:
 800d83c:	b082      	sub	sp, #8
 800d83e:	2900      	cmp	r1, #0
 800d840:	d100      	bne.n	800d844 <__ascii_mbtowc+0x8>
 800d842:	a901      	add	r1, sp, #4
 800d844:	1e10      	subs	r0, r2, #0
 800d846:	d006      	beq.n	800d856 <__ascii_mbtowc+0x1a>
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d006      	beq.n	800d85a <__ascii_mbtowc+0x1e>
 800d84c:	7813      	ldrb	r3, [r2, #0]
 800d84e:	600b      	str	r3, [r1, #0]
 800d850:	7810      	ldrb	r0, [r2, #0]
 800d852:	1e43      	subs	r3, r0, #1
 800d854:	4198      	sbcs	r0, r3
 800d856:	b002      	add	sp, #8
 800d858:	4770      	bx	lr
 800d85a:	2002      	movs	r0, #2
 800d85c:	4240      	negs	r0, r0
 800d85e:	e7fa      	b.n	800d856 <__ascii_mbtowc+0x1a>

0800d860 <memmove>:
 800d860:	b510      	push	{r4, lr}
 800d862:	4288      	cmp	r0, r1
 800d864:	d902      	bls.n	800d86c <memmove+0xc>
 800d866:	188b      	adds	r3, r1, r2
 800d868:	4298      	cmp	r0, r3
 800d86a:	d303      	bcc.n	800d874 <memmove+0x14>
 800d86c:	2300      	movs	r3, #0
 800d86e:	e007      	b.n	800d880 <memmove+0x20>
 800d870:	5c8b      	ldrb	r3, [r1, r2]
 800d872:	5483      	strb	r3, [r0, r2]
 800d874:	3a01      	subs	r2, #1
 800d876:	d2fb      	bcs.n	800d870 <memmove+0x10>
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	5ccc      	ldrb	r4, [r1, r3]
 800d87c:	54c4      	strb	r4, [r0, r3]
 800d87e:	3301      	adds	r3, #1
 800d880:	429a      	cmp	r2, r3
 800d882:	d1fa      	bne.n	800d87a <memmove+0x1a>
 800d884:	e7f8      	b.n	800d878 <memmove+0x18>

0800d886 <_realloc_r>:
 800d886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d888:	0007      	movs	r7, r0
 800d88a:	000e      	movs	r6, r1
 800d88c:	0014      	movs	r4, r2
 800d88e:	2900      	cmp	r1, #0
 800d890:	d105      	bne.n	800d89e <_realloc_r+0x18>
 800d892:	0011      	movs	r1, r2
 800d894:	f7fd fc70 	bl	800b178 <_malloc_r>
 800d898:	0005      	movs	r5, r0
 800d89a:	0028      	movs	r0, r5
 800d89c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d89e:	2a00      	cmp	r2, #0
 800d8a0:	d103      	bne.n	800d8aa <_realloc_r+0x24>
 800d8a2:	f7ff fddd 	bl	800d460 <_free_r>
 800d8a6:	0025      	movs	r5, r4
 800d8a8:	e7f7      	b.n	800d89a <_realloc_r+0x14>
 800d8aa:	f000 facd 	bl	800de48 <_malloc_usable_size_r>
 800d8ae:	9001      	str	r0, [sp, #4]
 800d8b0:	4284      	cmp	r4, r0
 800d8b2:	d803      	bhi.n	800d8bc <_realloc_r+0x36>
 800d8b4:	0035      	movs	r5, r6
 800d8b6:	0843      	lsrs	r3, r0, #1
 800d8b8:	42a3      	cmp	r3, r4
 800d8ba:	d3ee      	bcc.n	800d89a <_realloc_r+0x14>
 800d8bc:	0021      	movs	r1, r4
 800d8be:	0038      	movs	r0, r7
 800d8c0:	f7fd fc5a 	bl	800b178 <_malloc_r>
 800d8c4:	1e05      	subs	r5, r0, #0
 800d8c6:	d0e8      	beq.n	800d89a <_realloc_r+0x14>
 800d8c8:	9b01      	ldr	r3, [sp, #4]
 800d8ca:	0022      	movs	r2, r4
 800d8cc:	429c      	cmp	r4, r3
 800d8ce:	d900      	bls.n	800d8d2 <_realloc_r+0x4c>
 800d8d0:	001a      	movs	r2, r3
 800d8d2:	0031      	movs	r1, r6
 800d8d4:	0028      	movs	r0, r5
 800d8d6:	f7fd fc1c 	bl	800b112 <memcpy>
 800d8da:	0031      	movs	r1, r6
 800d8dc:	0038      	movs	r0, r7
 800d8de:	f7ff fdbf 	bl	800d460 <_free_r>
 800d8e2:	e7da      	b.n	800d89a <_realloc_r+0x14>

0800d8e4 <__sfputc_r>:
 800d8e4:	6893      	ldr	r3, [r2, #8]
 800d8e6:	b510      	push	{r4, lr}
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	6093      	str	r3, [r2, #8]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	da04      	bge.n	800d8fa <__sfputc_r+0x16>
 800d8f0:	6994      	ldr	r4, [r2, #24]
 800d8f2:	42a3      	cmp	r3, r4
 800d8f4:	db07      	blt.n	800d906 <__sfputc_r+0x22>
 800d8f6:	290a      	cmp	r1, #10
 800d8f8:	d005      	beq.n	800d906 <__sfputc_r+0x22>
 800d8fa:	6813      	ldr	r3, [r2, #0]
 800d8fc:	1c58      	adds	r0, r3, #1
 800d8fe:	6010      	str	r0, [r2, #0]
 800d900:	7019      	strb	r1, [r3, #0]
 800d902:	0008      	movs	r0, r1
 800d904:	bd10      	pop	{r4, pc}
 800d906:	f000 f94f 	bl	800dba8 <__swbuf_r>
 800d90a:	0001      	movs	r1, r0
 800d90c:	e7f9      	b.n	800d902 <__sfputc_r+0x1e>

0800d90e <__sfputs_r>:
 800d90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d910:	0006      	movs	r6, r0
 800d912:	000f      	movs	r7, r1
 800d914:	0014      	movs	r4, r2
 800d916:	18d5      	adds	r5, r2, r3
 800d918:	42ac      	cmp	r4, r5
 800d91a:	d101      	bne.n	800d920 <__sfputs_r+0x12>
 800d91c:	2000      	movs	r0, #0
 800d91e:	e007      	b.n	800d930 <__sfputs_r+0x22>
 800d920:	7821      	ldrb	r1, [r4, #0]
 800d922:	003a      	movs	r2, r7
 800d924:	0030      	movs	r0, r6
 800d926:	f7ff ffdd 	bl	800d8e4 <__sfputc_r>
 800d92a:	3401      	adds	r4, #1
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d1f3      	bne.n	800d918 <__sfputs_r+0xa>
 800d930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d934 <_vfiprintf_r>:
 800d934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d936:	b0a1      	sub	sp, #132	; 0x84
 800d938:	0006      	movs	r6, r0
 800d93a:	000c      	movs	r4, r1
 800d93c:	001f      	movs	r7, r3
 800d93e:	9203      	str	r2, [sp, #12]
 800d940:	2800      	cmp	r0, #0
 800d942:	d004      	beq.n	800d94e <_vfiprintf_r+0x1a>
 800d944:	6983      	ldr	r3, [r0, #24]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <_vfiprintf_r+0x1a>
 800d94a:	f7fd fb1b 	bl	800af84 <__sinit>
 800d94e:	4b8e      	ldr	r3, [pc, #568]	; (800db88 <_vfiprintf_r+0x254>)
 800d950:	429c      	cmp	r4, r3
 800d952:	d11c      	bne.n	800d98e <_vfiprintf_r+0x5a>
 800d954:	6874      	ldr	r4, [r6, #4]
 800d956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d958:	07db      	lsls	r3, r3, #31
 800d95a:	d405      	bmi.n	800d968 <_vfiprintf_r+0x34>
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	059b      	lsls	r3, r3, #22
 800d960:	d402      	bmi.n	800d968 <_vfiprintf_r+0x34>
 800d962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d964:	f7fd fbd3 	bl	800b10e <__retarget_lock_acquire_recursive>
 800d968:	89a3      	ldrh	r3, [r4, #12]
 800d96a:	071b      	lsls	r3, r3, #28
 800d96c:	d502      	bpl.n	800d974 <_vfiprintf_r+0x40>
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11d      	bne.n	800d9b0 <_vfiprintf_r+0x7c>
 800d974:	0021      	movs	r1, r4
 800d976:	0030      	movs	r0, r6
 800d978:	f000 f97a 	bl	800dc70 <__swsetup_r>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d017      	beq.n	800d9b0 <_vfiprintf_r+0x7c>
 800d980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d982:	07db      	lsls	r3, r3, #31
 800d984:	d50d      	bpl.n	800d9a2 <_vfiprintf_r+0x6e>
 800d986:	2001      	movs	r0, #1
 800d988:	4240      	negs	r0, r0
 800d98a:	b021      	add	sp, #132	; 0x84
 800d98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d98e:	4b7f      	ldr	r3, [pc, #508]	; (800db8c <_vfiprintf_r+0x258>)
 800d990:	429c      	cmp	r4, r3
 800d992:	d101      	bne.n	800d998 <_vfiprintf_r+0x64>
 800d994:	68b4      	ldr	r4, [r6, #8]
 800d996:	e7de      	b.n	800d956 <_vfiprintf_r+0x22>
 800d998:	4b7d      	ldr	r3, [pc, #500]	; (800db90 <_vfiprintf_r+0x25c>)
 800d99a:	429c      	cmp	r4, r3
 800d99c:	d1db      	bne.n	800d956 <_vfiprintf_r+0x22>
 800d99e:	68f4      	ldr	r4, [r6, #12]
 800d9a0:	e7d9      	b.n	800d956 <_vfiprintf_r+0x22>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	059b      	lsls	r3, r3, #22
 800d9a6:	d4ee      	bmi.n	800d986 <_vfiprintf_r+0x52>
 800d9a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9aa:	f7fd fbb1 	bl	800b110 <__retarget_lock_release_recursive>
 800d9ae:	e7ea      	b.n	800d986 <_vfiprintf_r+0x52>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	ad08      	add	r5, sp, #32
 800d9b4:	616b      	str	r3, [r5, #20]
 800d9b6:	3320      	adds	r3, #32
 800d9b8:	766b      	strb	r3, [r5, #25]
 800d9ba:	3310      	adds	r3, #16
 800d9bc:	76ab      	strb	r3, [r5, #26]
 800d9be:	9707      	str	r7, [sp, #28]
 800d9c0:	9f03      	ldr	r7, [sp, #12]
 800d9c2:	783b      	ldrb	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <_vfiprintf_r+0x98>
 800d9c8:	2b25      	cmp	r3, #37	; 0x25
 800d9ca:	d14e      	bne.n	800da6a <_vfiprintf_r+0x136>
 800d9cc:	9b03      	ldr	r3, [sp, #12]
 800d9ce:	1afb      	subs	r3, r7, r3
 800d9d0:	9305      	str	r3, [sp, #20]
 800d9d2:	9b03      	ldr	r3, [sp, #12]
 800d9d4:	429f      	cmp	r7, r3
 800d9d6:	d00d      	beq.n	800d9f4 <_vfiprintf_r+0xc0>
 800d9d8:	9b05      	ldr	r3, [sp, #20]
 800d9da:	0021      	movs	r1, r4
 800d9dc:	0030      	movs	r0, r6
 800d9de:	9a03      	ldr	r2, [sp, #12]
 800d9e0:	f7ff ff95 	bl	800d90e <__sfputs_r>
 800d9e4:	1c43      	adds	r3, r0, #1
 800d9e6:	d100      	bne.n	800d9ea <_vfiprintf_r+0xb6>
 800d9e8:	e0b5      	b.n	800db56 <_vfiprintf_r+0x222>
 800d9ea:	696a      	ldr	r2, [r5, #20]
 800d9ec:	9b05      	ldr	r3, [sp, #20]
 800d9ee:	4694      	mov	ip, r2
 800d9f0:	4463      	add	r3, ip
 800d9f2:	616b      	str	r3, [r5, #20]
 800d9f4:	783b      	ldrb	r3, [r7, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d100      	bne.n	800d9fc <_vfiprintf_r+0xc8>
 800d9fa:	e0ac      	b.n	800db56 <_vfiprintf_r+0x222>
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	1c7b      	adds	r3, r7, #1
 800da00:	9303      	str	r3, [sp, #12]
 800da02:	2300      	movs	r3, #0
 800da04:	4252      	negs	r2, r2
 800da06:	606a      	str	r2, [r5, #4]
 800da08:	a904      	add	r1, sp, #16
 800da0a:	3254      	adds	r2, #84	; 0x54
 800da0c:	1852      	adds	r2, r2, r1
 800da0e:	602b      	str	r3, [r5, #0]
 800da10:	60eb      	str	r3, [r5, #12]
 800da12:	60ab      	str	r3, [r5, #8]
 800da14:	7013      	strb	r3, [r2, #0]
 800da16:	65ab      	str	r3, [r5, #88]	; 0x58
 800da18:	9b03      	ldr	r3, [sp, #12]
 800da1a:	2205      	movs	r2, #5
 800da1c:	7819      	ldrb	r1, [r3, #0]
 800da1e:	485d      	ldr	r0, [pc, #372]	; (800db94 <_vfiprintf_r+0x260>)
 800da20:	f7ff f93a 	bl	800cc98 <memchr>
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	1c5f      	adds	r7, r3, #1
 800da28:	2800      	cmp	r0, #0
 800da2a:	d120      	bne.n	800da6e <_vfiprintf_r+0x13a>
 800da2c:	682a      	ldr	r2, [r5, #0]
 800da2e:	06d3      	lsls	r3, r2, #27
 800da30:	d504      	bpl.n	800da3c <_vfiprintf_r+0x108>
 800da32:	2353      	movs	r3, #83	; 0x53
 800da34:	a904      	add	r1, sp, #16
 800da36:	185b      	adds	r3, r3, r1
 800da38:	2120      	movs	r1, #32
 800da3a:	7019      	strb	r1, [r3, #0]
 800da3c:	0713      	lsls	r3, r2, #28
 800da3e:	d504      	bpl.n	800da4a <_vfiprintf_r+0x116>
 800da40:	2353      	movs	r3, #83	; 0x53
 800da42:	a904      	add	r1, sp, #16
 800da44:	185b      	adds	r3, r3, r1
 800da46:	212b      	movs	r1, #43	; 0x2b
 800da48:	7019      	strb	r1, [r3, #0]
 800da4a:	9b03      	ldr	r3, [sp, #12]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	2b2a      	cmp	r3, #42	; 0x2a
 800da50:	d016      	beq.n	800da80 <_vfiprintf_r+0x14c>
 800da52:	2100      	movs	r1, #0
 800da54:	68eb      	ldr	r3, [r5, #12]
 800da56:	9f03      	ldr	r7, [sp, #12]
 800da58:	783a      	ldrb	r2, [r7, #0]
 800da5a:	1c78      	adds	r0, r7, #1
 800da5c:	3a30      	subs	r2, #48	; 0x30
 800da5e:	4684      	mov	ip, r0
 800da60:	2a09      	cmp	r2, #9
 800da62:	d94f      	bls.n	800db04 <_vfiprintf_r+0x1d0>
 800da64:	2900      	cmp	r1, #0
 800da66:	d111      	bne.n	800da8c <_vfiprintf_r+0x158>
 800da68:	e017      	b.n	800da9a <_vfiprintf_r+0x166>
 800da6a:	3701      	adds	r7, #1
 800da6c:	e7a9      	b.n	800d9c2 <_vfiprintf_r+0x8e>
 800da6e:	4b49      	ldr	r3, [pc, #292]	; (800db94 <_vfiprintf_r+0x260>)
 800da70:	682a      	ldr	r2, [r5, #0]
 800da72:	1ac0      	subs	r0, r0, r3
 800da74:	2301      	movs	r3, #1
 800da76:	4083      	lsls	r3, r0
 800da78:	4313      	orrs	r3, r2
 800da7a:	602b      	str	r3, [r5, #0]
 800da7c:	9703      	str	r7, [sp, #12]
 800da7e:	e7cb      	b.n	800da18 <_vfiprintf_r+0xe4>
 800da80:	9b07      	ldr	r3, [sp, #28]
 800da82:	1d19      	adds	r1, r3, #4
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	9107      	str	r1, [sp, #28]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	db01      	blt.n	800da90 <_vfiprintf_r+0x15c>
 800da8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800da8e:	e004      	b.n	800da9a <_vfiprintf_r+0x166>
 800da90:	425b      	negs	r3, r3
 800da92:	60eb      	str	r3, [r5, #12]
 800da94:	2302      	movs	r3, #2
 800da96:	4313      	orrs	r3, r2
 800da98:	602b      	str	r3, [r5, #0]
 800da9a:	783b      	ldrb	r3, [r7, #0]
 800da9c:	2b2e      	cmp	r3, #46	; 0x2e
 800da9e:	d10a      	bne.n	800dab6 <_vfiprintf_r+0x182>
 800daa0:	787b      	ldrb	r3, [r7, #1]
 800daa2:	2b2a      	cmp	r3, #42	; 0x2a
 800daa4:	d137      	bne.n	800db16 <_vfiprintf_r+0x1e2>
 800daa6:	9b07      	ldr	r3, [sp, #28]
 800daa8:	3702      	adds	r7, #2
 800daaa:	1d1a      	adds	r2, r3, #4
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	9207      	str	r2, [sp, #28]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	db2d      	blt.n	800db10 <_vfiprintf_r+0x1dc>
 800dab4:	9309      	str	r3, [sp, #36]	; 0x24
 800dab6:	2203      	movs	r2, #3
 800dab8:	7839      	ldrb	r1, [r7, #0]
 800daba:	4837      	ldr	r0, [pc, #220]	; (800db98 <_vfiprintf_r+0x264>)
 800dabc:	f7ff f8ec 	bl	800cc98 <memchr>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d007      	beq.n	800dad4 <_vfiprintf_r+0x1a0>
 800dac4:	4b34      	ldr	r3, [pc, #208]	; (800db98 <_vfiprintf_r+0x264>)
 800dac6:	682a      	ldr	r2, [r5, #0]
 800dac8:	1ac0      	subs	r0, r0, r3
 800daca:	2340      	movs	r3, #64	; 0x40
 800dacc:	4083      	lsls	r3, r0
 800dace:	4313      	orrs	r3, r2
 800dad0:	3701      	adds	r7, #1
 800dad2:	602b      	str	r3, [r5, #0]
 800dad4:	7839      	ldrb	r1, [r7, #0]
 800dad6:	1c7b      	adds	r3, r7, #1
 800dad8:	2206      	movs	r2, #6
 800dada:	4830      	ldr	r0, [pc, #192]	; (800db9c <_vfiprintf_r+0x268>)
 800dadc:	9303      	str	r3, [sp, #12]
 800dade:	7629      	strb	r1, [r5, #24]
 800dae0:	f7ff f8da 	bl	800cc98 <memchr>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d045      	beq.n	800db74 <_vfiprintf_r+0x240>
 800dae8:	4b2d      	ldr	r3, [pc, #180]	; (800dba0 <_vfiprintf_r+0x26c>)
 800daea:	2b00      	cmp	r3, #0
 800daec:	d127      	bne.n	800db3e <_vfiprintf_r+0x20a>
 800daee:	2207      	movs	r2, #7
 800daf0:	9b07      	ldr	r3, [sp, #28]
 800daf2:	3307      	adds	r3, #7
 800daf4:	4393      	bics	r3, r2
 800daf6:	3308      	adds	r3, #8
 800daf8:	9307      	str	r3, [sp, #28]
 800dafa:	696b      	ldr	r3, [r5, #20]
 800dafc:	9a04      	ldr	r2, [sp, #16]
 800dafe:	189b      	adds	r3, r3, r2
 800db00:	616b      	str	r3, [r5, #20]
 800db02:	e75d      	b.n	800d9c0 <_vfiprintf_r+0x8c>
 800db04:	210a      	movs	r1, #10
 800db06:	434b      	muls	r3, r1
 800db08:	4667      	mov	r7, ip
 800db0a:	189b      	adds	r3, r3, r2
 800db0c:	3909      	subs	r1, #9
 800db0e:	e7a3      	b.n	800da58 <_vfiprintf_r+0x124>
 800db10:	2301      	movs	r3, #1
 800db12:	425b      	negs	r3, r3
 800db14:	e7ce      	b.n	800dab4 <_vfiprintf_r+0x180>
 800db16:	2300      	movs	r3, #0
 800db18:	001a      	movs	r2, r3
 800db1a:	3701      	adds	r7, #1
 800db1c:	606b      	str	r3, [r5, #4]
 800db1e:	7839      	ldrb	r1, [r7, #0]
 800db20:	1c78      	adds	r0, r7, #1
 800db22:	3930      	subs	r1, #48	; 0x30
 800db24:	4684      	mov	ip, r0
 800db26:	2909      	cmp	r1, #9
 800db28:	d903      	bls.n	800db32 <_vfiprintf_r+0x1fe>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d0c3      	beq.n	800dab6 <_vfiprintf_r+0x182>
 800db2e:	9209      	str	r2, [sp, #36]	; 0x24
 800db30:	e7c1      	b.n	800dab6 <_vfiprintf_r+0x182>
 800db32:	230a      	movs	r3, #10
 800db34:	435a      	muls	r2, r3
 800db36:	4667      	mov	r7, ip
 800db38:	1852      	adds	r2, r2, r1
 800db3a:	3b09      	subs	r3, #9
 800db3c:	e7ef      	b.n	800db1e <_vfiprintf_r+0x1ea>
 800db3e:	ab07      	add	r3, sp, #28
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	0022      	movs	r2, r4
 800db44:	0029      	movs	r1, r5
 800db46:	0030      	movs	r0, r6
 800db48:	4b16      	ldr	r3, [pc, #88]	; (800dba4 <_vfiprintf_r+0x270>)
 800db4a:	f7fd fc35 	bl	800b3b8 <_printf_float>
 800db4e:	9004      	str	r0, [sp, #16]
 800db50:	9b04      	ldr	r3, [sp, #16]
 800db52:	3301      	adds	r3, #1
 800db54:	d1d1      	bne.n	800dafa <_vfiprintf_r+0x1c6>
 800db56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db58:	07db      	lsls	r3, r3, #31
 800db5a:	d405      	bmi.n	800db68 <_vfiprintf_r+0x234>
 800db5c:	89a3      	ldrh	r3, [r4, #12]
 800db5e:	059b      	lsls	r3, r3, #22
 800db60:	d402      	bmi.n	800db68 <_vfiprintf_r+0x234>
 800db62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db64:	f7fd fad4 	bl	800b110 <__retarget_lock_release_recursive>
 800db68:	89a3      	ldrh	r3, [r4, #12]
 800db6a:	065b      	lsls	r3, r3, #25
 800db6c:	d500      	bpl.n	800db70 <_vfiprintf_r+0x23c>
 800db6e:	e70a      	b.n	800d986 <_vfiprintf_r+0x52>
 800db70:	980d      	ldr	r0, [sp, #52]	; 0x34
 800db72:	e70a      	b.n	800d98a <_vfiprintf_r+0x56>
 800db74:	ab07      	add	r3, sp, #28
 800db76:	9300      	str	r3, [sp, #0]
 800db78:	0022      	movs	r2, r4
 800db7a:	0029      	movs	r1, r5
 800db7c:	0030      	movs	r0, r6
 800db7e:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <_vfiprintf_r+0x270>)
 800db80:	f7fd fecc 	bl	800b91c <_printf_i>
 800db84:	e7e3      	b.n	800db4e <_vfiprintf_r+0x21a>
 800db86:	46c0      	nop			; (mov r8, r8)
 800db88:	0800e2e4 	.word	0x0800e2e4
 800db8c:	0800e304 	.word	0x0800e304
 800db90:	0800e2c4 	.word	0x0800e2c4
 800db94:	0800e544 	.word	0x0800e544
 800db98:	0800e54a 	.word	0x0800e54a
 800db9c:	0800e54e 	.word	0x0800e54e
 800dba0:	0800b3b9 	.word	0x0800b3b9
 800dba4:	0800d90f 	.word	0x0800d90f

0800dba8 <__swbuf_r>:
 800dba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbaa:	0005      	movs	r5, r0
 800dbac:	000e      	movs	r6, r1
 800dbae:	0014      	movs	r4, r2
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d004      	beq.n	800dbbe <__swbuf_r+0x16>
 800dbb4:	6983      	ldr	r3, [r0, #24]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <__swbuf_r+0x16>
 800dbba:	f7fd f9e3 	bl	800af84 <__sinit>
 800dbbe:	4b22      	ldr	r3, [pc, #136]	; (800dc48 <__swbuf_r+0xa0>)
 800dbc0:	429c      	cmp	r4, r3
 800dbc2:	d12e      	bne.n	800dc22 <__swbuf_r+0x7a>
 800dbc4:	686c      	ldr	r4, [r5, #4]
 800dbc6:	69a3      	ldr	r3, [r4, #24]
 800dbc8:	60a3      	str	r3, [r4, #8]
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	071b      	lsls	r3, r3, #28
 800dbce:	d532      	bpl.n	800dc36 <__swbuf_r+0x8e>
 800dbd0:	6923      	ldr	r3, [r4, #16]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d02f      	beq.n	800dc36 <__swbuf_r+0x8e>
 800dbd6:	6823      	ldr	r3, [r4, #0]
 800dbd8:	6922      	ldr	r2, [r4, #16]
 800dbda:	b2f7      	uxtb	r7, r6
 800dbdc:	1a98      	subs	r0, r3, r2
 800dbde:	6963      	ldr	r3, [r4, #20]
 800dbe0:	b2f6      	uxtb	r6, r6
 800dbe2:	4283      	cmp	r3, r0
 800dbe4:	dc05      	bgt.n	800dbf2 <__swbuf_r+0x4a>
 800dbe6:	0021      	movs	r1, r4
 800dbe8:	0028      	movs	r0, r5
 800dbea:	f7fe fff3 	bl	800cbd4 <_fflush_r>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	d127      	bne.n	800dc42 <__swbuf_r+0x9a>
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	60a3      	str	r3, [r4, #8]
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	1c5a      	adds	r2, r3, #1
 800dbfe:	6022      	str	r2, [r4, #0]
 800dc00:	701f      	strb	r7, [r3, #0]
 800dc02:	6963      	ldr	r3, [r4, #20]
 800dc04:	4283      	cmp	r3, r0
 800dc06:	d004      	beq.n	800dc12 <__swbuf_r+0x6a>
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	07db      	lsls	r3, r3, #31
 800dc0c:	d507      	bpl.n	800dc1e <__swbuf_r+0x76>
 800dc0e:	2e0a      	cmp	r6, #10
 800dc10:	d105      	bne.n	800dc1e <__swbuf_r+0x76>
 800dc12:	0021      	movs	r1, r4
 800dc14:	0028      	movs	r0, r5
 800dc16:	f7fe ffdd 	bl	800cbd4 <_fflush_r>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d111      	bne.n	800dc42 <__swbuf_r+0x9a>
 800dc1e:	0030      	movs	r0, r6
 800dc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc22:	4b0a      	ldr	r3, [pc, #40]	; (800dc4c <__swbuf_r+0xa4>)
 800dc24:	429c      	cmp	r4, r3
 800dc26:	d101      	bne.n	800dc2c <__swbuf_r+0x84>
 800dc28:	68ac      	ldr	r4, [r5, #8]
 800dc2a:	e7cc      	b.n	800dbc6 <__swbuf_r+0x1e>
 800dc2c:	4b08      	ldr	r3, [pc, #32]	; (800dc50 <__swbuf_r+0xa8>)
 800dc2e:	429c      	cmp	r4, r3
 800dc30:	d1c9      	bne.n	800dbc6 <__swbuf_r+0x1e>
 800dc32:	68ec      	ldr	r4, [r5, #12]
 800dc34:	e7c7      	b.n	800dbc6 <__swbuf_r+0x1e>
 800dc36:	0021      	movs	r1, r4
 800dc38:	0028      	movs	r0, r5
 800dc3a:	f000 f819 	bl	800dc70 <__swsetup_r>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d0c9      	beq.n	800dbd6 <__swbuf_r+0x2e>
 800dc42:	2601      	movs	r6, #1
 800dc44:	4276      	negs	r6, r6
 800dc46:	e7ea      	b.n	800dc1e <__swbuf_r+0x76>
 800dc48:	0800e2e4 	.word	0x0800e2e4
 800dc4c:	0800e304 	.word	0x0800e304
 800dc50:	0800e2c4 	.word	0x0800e2c4

0800dc54 <__ascii_wctomb>:
 800dc54:	0003      	movs	r3, r0
 800dc56:	1e08      	subs	r0, r1, #0
 800dc58:	d005      	beq.n	800dc66 <__ascii_wctomb+0x12>
 800dc5a:	2aff      	cmp	r2, #255	; 0xff
 800dc5c:	d904      	bls.n	800dc68 <__ascii_wctomb+0x14>
 800dc5e:	228a      	movs	r2, #138	; 0x8a
 800dc60:	2001      	movs	r0, #1
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	4240      	negs	r0, r0
 800dc66:	4770      	bx	lr
 800dc68:	2001      	movs	r0, #1
 800dc6a:	700a      	strb	r2, [r1, #0]
 800dc6c:	e7fb      	b.n	800dc66 <__ascii_wctomb+0x12>
	...

0800dc70 <__swsetup_r>:
 800dc70:	4b37      	ldr	r3, [pc, #220]	; (800dd50 <__swsetup_r+0xe0>)
 800dc72:	b570      	push	{r4, r5, r6, lr}
 800dc74:	681d      	ldr	r5, [r3, #0]
 800dc76:	0006      	movs	r6, r0
 800dc78:	000c      	movs	r4, r1
 800dc7a:	2d00      	cmp	r5, #0
 800dc7c:	d005      	beq.n	800dc8a <__swsetup_r+0x1a>
 800dc7e:	69ab      	ldr	r3, [r5, #24]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d102      	bne.n	800dc8a <__swsetup_r+0x1a>
 800dc84:	0028      	movs	r0, r5
 800dc86:	f7fd f97d 	bl	800af84 <__sinit>
 800dc8a:	4b32      	ldr	r3, [pc, #200]	; (800dd54 <__swsetup_r+0xe4>)
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	d10f      	bne.n	800dcb0 <__swsetup_r+0x40>
 800dc90:	686c      	ldr	r4, [r5, #4]
 800dc92:	230c      	movs	r3, #12
 800dc94:	5ee2      	ldrsh	r2, [r4, r3]
 800dc96:	b293      	uxth	r3, r2
 800dc98:	0711      	lsls	r1, r2, #28
 800dc9a:	d42d      	bmi.n	800dcf8 <__swsetup_r+0x88>
 800dc9c:	06d9      	lsls	r1, r3, #27
 800dc9e:	d411      	bmi.n	800dcc4 <__swsetup_r+0x54>
 800dca0:	2309      	movs	r3, #9
 800dca2:	2001      	movs	r0, #1
 800dca4:	6033      	str	r3, [r6, #0]
 800dca6:	3337      	adds	r3, #55	; 0x37
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	4240      	negs	r0, r0
 800dcae:	bd70      	pop	{r4, r5, r6, pc}
 800dcb0:	4b29      	ldr	r3, [pc, #164]	; (800dd58 <__swsetup_r+0xe8>)
 800dcb2:	429c      	cmp	r4, r3
 800dcb4:	d101      	bne.n	800dcba <__swsetup_r+0x4a>
 800dcb6:	68ac      	ldr	r4, [r5, #8]
 800dcb8:	e7eb      	b.n	800dc92 <__swsetup_r+0x22>
 800dcba:	4b28      	ldr	r3, [pc, #160]	; (800dd5c <__swsetup_r+0xec>)
 800dcbc:	429c      	cmp	r4, r3
 800dcbe:	d1e8      	bne.n	800dc92 <__swsetup_r+0x22>
 800dcc0:	68ec      	ldr	r4, [r5, #12]
 800dcc2:	e7e6      	b.n	800dc92 <__swsetup_r+0x22>
 800dcc4:	075b      	lsls	r3, r3, #29
 800dcc6:	d513      	bpl.n	800dcf0 <__swsetup_r+0x80>
 800dcc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcca:	2900      	cmp	r1, #0
 800dccc:	d008      	beq.n	800dce0 <__swsetup_r+0x70>
 800dcce:	0023      	movs	r3, r4
 800dcd0:	3344      	adds	r3, #68	; 0x44
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	d002      	beq.n	800dcdc <__swsetup_r+0x6c>
 800dcd6:	0030      	movs	r0, r6
 800dcd8:	f7ff fbc2 	bl	800d460 <_free_r>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	6363      	str	r3, [r4, #52]	; 0x34
 800dce0:	2224      	movs	r2, #36	; 0x24
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	4393      	bics	r3, r2
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	2300      	movs	r3, #0
 800dcea:	6063      	str	r3, [r4, #4]
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	6023      	str	r3, [r4, #0]
 800dcf0:	2308      	movs	r3, #8
 800dcf2:	89a2      	ldrh	r2, [r4, #12]
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	81a3      	strh	r3, [r4, #12]
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10b      	bne.n	800dd16 <__swsetup_r+0xa6>
 800dcfe:	21a0      	movs	r1, #160	; 0xa0
 800dd00:	2280      	movs	r2, #128	; 0x80
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	0089      	lsls	r1, r1, #2
 800dd06:	0092      	lsls	r2, r2, #2
 800dd08:	400b      	ands	r3, r1
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d003      	beq.n	800dd16 <__swsetup_r+0xa6>
 800dd0e:	0021      	movs	r1, r4
 800dd10:	0030      	movs	r0, r6
 800dd12:	f000 f855 	bl	800ddc0 <__smakebuf_r>
 800dd16:	220c      	movs	r2, #12
 800dd18:	5ea3      	ldrsh	r3, [r4, r2]
 800dd1a:	2001      	movs	r0, #1
 800dd1c:	001a      	movs	r2, r3
 800dd1e:	b299      	uxth	r1, r3
 800dd20:	4002      	ands	r2, r0
 800dd22:	4203      	tst	r3, r0
 800dd24:	d00f      	beq.n	800dd46 <__swsetup_r+0xd6>
 800dd26:	2200      	movs	r2, #0
 800dd28:	60a2      	str	r2, [r4, #8]
 800dd2a:	6962      	ldr	r2, [r4, #20]
 800dd2c:	4252      	negs	r2, r2
 800dd2e:	61a2      	str	r2, [r4, #24]
 800dd30:	2000      	movs	r0, #0
 800dd32:	6922      	ldr	r2, [r4, #16]
 800dd34:	4282      	cmp	r2, r0
 800dd36:	d1ba      	bne.n	800dcae <__swsetup_r+0x3e>
 800dd38:	060a      	lsls	r2, r1, #24
 800dd3a:	d5b8      	bpl.n	800dcae <__swsetup_r+0x3e>
 800dd3c:	2240      	movs	r2, #64	; 0x40
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	81a3      	strh	r3, [r4, #12]
 800dd42:	3801      	subs	r0, #1
 800dd44:	e7b3      	b.n	800dcae <__swsetup_r+0x3e>
 800dd46:	0788      	lsls	r0, r1, #30
 800dd48:	d400      	bmi.n	800dd4c <__swsetup_r+0xdc>
 800dd4a:	6962      	ldr	r2, [r4, #20]
 800dd4c:	60a2      	str	r2, [r4, #8]
 800dd4e:	e7ef      	b.n	800dd30 <__swsetup_r+0xc0>
 800dd50:	20000014 	.word	0x20000014
 800dd54:	0800e2e4 	.word	0x0800e2e4
 800dd58:	0800e304 	.word	0x0800e304
 800dd5c:	0800e2c4 	.word	0x0800e2c4

0800dd60 <abort>:
 800dd60:	2006      	movs	r0, #6
 800dd62:	b510      	push	{r4, lr}
 800dd64:	f000 f8a2 	bl	800deac <raise>
 800dd68:	2001      	movs	r0, #1
 800dd6a:	f7f5 fbef 	bl	800354c <_exit>
	...

0800dd70 <__swhatbuf_r>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	000e      	movs	r6, r1
 800dd74:	001d      	movs	r5, r3
 800dd76:	230e      	movs	r3, #14
 800dd78:	5ec9      	ldrsh	r1, [r1, r3]
 800dd7a:	0014      	movs	r4, r2
 800dd7c:	b096      	sub	sp, #88	; 0x58
 800dd7e:	2900      	cmp	r1, #0
 800dd80:	da08      	bge.n	800dd94 <__swhatbuf_r+0x24>
 800dd82:	220c      	movs	r2, #12
 800dd84:	5eb3      	ldrsh	r3, [r6, r2]
 800dd86:	2200      	movs	r2, #0
 800dd88:	602a      	str	r2, [r5, #0]
 800dd8a:	061b      	lsls	r3, r3, #24
 800dd8c:	d411      	bmi.n	800ddb2 <__swhatbuf_r+0x42>
 800dd8e:	2380      	movs	r3, #128	; 0x80
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	e00f      	b.n	800ddb4 <__swhatbuf_r+0x44>
 800dd94:	466a      	mov	r2, sp
 800dd96:	f000 f8a9 	bl	800deec <_fstat_r>
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	dbf1      	blt.n	800dd82 <__swhatbuf_r+0x12>
 800dd9e:	23f0      	movs	r3, #240	; 0xf0
 800dda0:	9901      	ldr	r1, [sp, #4]
 800dda2:	021b      	lsls	r3, r3, #8
 800dda4:	4019      	ands	r1, r3
 800dda6:	4b05      	ldr	r3, [pc, #20]	; (800ddbc <__swhatbuf_r+0x4c>)
 800dda8:	18c9      	adds	r1, r1, r3
 800ddaa:	424b      	negs	r3, r1
 800ddac:	4159      	adcs	r1, r3
 800ddae:	6029      	str	r1, [r5, #0]
 800ddb0:	e7ed      	b.n	800dd8e <__swhatbuf_r+0x1e>
 800ddb2:	2340      	movs	r3, #64	; 0x40
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	b016      	add	sp, #88	; 0x58
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	ffffe000 	.word	0xffffe000

0800ddc0 <__smakebuf_r>:
 800ddc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddc2:	2602      	movs	r6, #2
 800ddc4:	898b      	ldrh	r3, [r1, #12]
 800ddc6:	0005      	movs	r5, r0
 800ddc8:	000c      	movs	r4, r1
 800ddca:	4233      	tst	r3, r6
 800ddcc:	d006      	beq.n	800dddc <__smakebuf_r+0x1c>
 800ddce:	0023      	movs	r3, r4
 800ddd0:	3347      	adds	r3, #71	; 0x47
 800ddd2:	6023      	str	r3, [r4, #0]
 800ddd4:	6123      	str	r3, [r4, #16]
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	6163      	str	r3, [r4, #20]
 800ddda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dddc:	466a      	mov	r2, sp
 800ddde:	ab01      	add	r3, sp, #4
 800dde0:	f7ff ffc6 	bl	800dd70 <__swhatbuf_r>
 800dde4:	9900      	ldr	r1, [sp, #0]
 800dde6:	0007      	movs	r7, r0
 800dde8:	0028      	movs	r0, r5
 800ddea:	f7fd f9c5 	bl	800b178 <_malloc_r>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d108      	bne.n	800de04 <__smakebuf_r+0x44>
 800ddf2:	220c      	movs	r2, #12
 800ddf4:	5ea3      	ldrsh	r3, [r4, r2]
 800ddf6:	059a      	lsls	r2, r3, #22
 800ddf8:	d4ef      	bmi.n	800ddda <__smakebuf_r+0x1a>
 800ddfa:	2203      	movs	r2, #3
 800ddfc:	4393      	bics	r3, r2
 800ddfe:	431e      	orrs	r6, r3
 800de00:	81a6      	strh	r6, [r4, #12]
 800de02:	e7e4      	b.n	800ddce <__smakebuf_r+0xe>
 800de04:	4b0f      	ldr	r3, [pc, #60]	; (800de44 <__smakebuf_r+0x84>)
 800de06:	62ab      	str	r3, [r5, #40]	; 0x28
 800de08:	2380      	movs	r3, #128	; 0x80
 800de0a:	89a2      	ldrh	r2, [r4, #12]
 800de0c:	6020      	str	r0, [r4, #0]
 800de0e:	4313      	orrs	r3, r2
 800de10:	81a3      	strh	r3, [r4, #12]
 800de12:	9b00      	ldr	r3, [sp, #0]
 800de14:	6120      	str	r0, [r4, #16]
 800de16:	6163      	str	r3, [r4, #20]
 800de18:	9b01      	ldr	r3, [sp, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00d      	beq.n	800de3a <__smakebuf_r+0x7a>
 800de1e:	0028      	movs	r0, r5
 800de20:	230e      	movs	r3, #14
 800de22:	5ee1      	ldrsh	r1, [r4, r3]
 800de24:	f000 f874 	bl	800df10 <_isatty_r>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d006      	beq.n	800de3a <__smakebuf_r+0x7a>
 800de2c:	2203      	movs	r2, #3
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	4393      	bics	r3, r2
 800de32:	001a      	movs	r2, r3
 800de34:	2301      	movs	r3, #1
 800de36:	4313      	orrs	r3, r2
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	89a0      	ldrh	r0, [r4, #12]
 800de3c:	4307      	orrs	r7, r0
 800de3e:	81a7      	strh	r7, [r4, #12]
 800de40:	e7cb      	b.n	800ddda <__smakebuf_r+0x1a>
 800de42:	46c0      	nop			; (mov r8, r8)
 800de44:	0800af09 	.word	0x0800af09

0800de48 <_malloc_usable_size_r>:
 800de48:	1f0b      	subs	r3, r1, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	1f18      	subs	r0, r3, #4
 800de4e:	2b00      	cmp	r3, #0
 800de50:	da01      	bge.n	800de56 <_malloc_usable_size_r+0xe>
 800de52:	580b      	ldr	r3, [r1, r0]
 800de54:	18c0      	adds	r0, r0, r3
 800de56:	4770      	bx	lr

0800de58 <_raise_r>:
 800de58:	b570      	push	{r4, r5, r6, lr}
 800de5a:	0004      	movs	r4, r0
 800de5c:	000d      	movs	r5, r1
 800de5e:	291f      	cmp	r1, #31
 800de60:	d904      	bls.n	800de6c <_raise_r+0x14>
 800de62:	2316      	movs	r3, #22
 800de64:	6003      	str	r3, [r0, #0]
 800de66:	2001      	movs	r0, #1
 800de68:	4240      	negs	r0, r0
 800de6a:	bd70      	pop	{r4, r5, r6, pc}
 800de6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d004      	beq.n	800de7c <_raise_r+0x24>
 800de72:	008a      	lsls	r2, r1, #2
 800de74:	189b      	adds	r3, r3, r2
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	2a00      	cmp	r2, #0
 800de7a:	d108      	bne.n	800de8e <_raise_r+0x36>
 800de7c:	0020      	movs	r0, r4
 800de7e:	f000 f831 	bl	800dee4 <_getpid_r>
 800de82:	002a      	movs	r2, r5
 800de84:	0001      	movs	r1, r0
 800de86:	0020      	movs	r0, r4
 800de88:	f000 f81a 	bl	800dec0 <_kill_r>
 800de8c:	e7ed      	b.n	800de6a <_raise_r+0x12>
 800de8e:	2000      	movs	r0, #0
 800de90:	2a01      	cmp	r2, #1
 800de92:	d0ea      	beq.n	800de6a <_raise_r+0x12>
 800de94:	1c51      	adds	r1, r2, #1
 800de96:	d103      	bne.n	800dea0 <_raise_r+0x48>
 800de98:	2316      	movs	r3, #22
 800de9a:	3001      	adds	r0, #1
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	e7e4      	b.n	800de6a <_raise_r+0x12>
 800dea0:	2400      	movs	r4, #0
 800dea2:	0028      	movs	r0, r5
 800dea4:	601c      	str	r4, [r3, #0]
 800dea6:	4790      	blx	r2
 800dea8:	0020      	movs	r0, r4
 800deaa:	e7de      	b.n	800de6a <_raise_r+0x12>

0800deac <raise>:
 800deac:	b510      	push	{r4, lr}
 800deae:	4b03      	ldr	r3, [pc, #12]	; (800debc <raise+0x10>)
 800deb0:	0001      	movs	r1, r0
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	f7ff ffd0 	bl	800de58 <_raise_r>
 800deb8:	bd10      	pop	{r4, pc}
 800deba:	46c0      	nop			; (mov r8, r8)
 800debc:	20000014 	.word	0x20000014

0800dec0 <_kill_r>:
 800dec0:	2300      	movs	r3, #0
 800dec2:	b570      	push	{r4, r5, r6, lr}
 800dec4:	4d06      	ldr	r5, [pc, #24]	; (800dee0 <_kill_r+0x20>)
 800dec6:	0004      	movs	r4, r0
 800dec8:	0008      	movs	r0, r1
 800deca:	0011      	movs	r1, r2
 800decc:	602b      	str	r3, [r5, #0]
 800dece:	f7f5 fb2d 	bl	800352c <_kill>
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	d103      	bne.n	800dede <_kill_r+0x1e>
 800ded6:	682b      	ldr	r3, [r5, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d000      	beq.n	800dede <_kill_r+0x1e>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	20002d8c 	.word	0x20002d8c

0800dee4 <_getpid_r>:
 800dee4:	b510      	push	{r4, lr}
 800dee6:	f7f5 fb1b 	bl	8003520 <_getpid>
 800deea:	bd10      	pop	{r4, pc}

0800deec <_fstat_r>:
 800deec:	2300      	movs	r3, #0
 800deee:	b570      	push	{r4, r5, r6, lr}
 800def0:	4d06      	ldr	r5, [pc, #24]	; (800df0c <_fstat_r+0x20>)
 800def2:	0004      	movs	r4, r0
 800def4:	0008      	movs	r0, r1
 800def6:	0011      	movs	r1, r2
 800def8:	602b      	str	r3, [r5, #0]
 800defa:	f7f5 fb76 	bl	80035ea <_fstat>
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	d103      	bne.n	800df0a <_fstat_r+0x1e>
 800df02:	682b      	ldr	r3, [r5, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d000      	beq.n	800df0a <_fstat_r+0x1e>
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	20002d8c 	.word	0x20002d8c

0800df10 <_isatty_r>:
 800df10:	2300      	movs	r3, #0
 800df12:	b570      	push	{r4, r5, r6, lr}
 800df14:	4d06      	ldr	r5, [pc, #24]	; (800df30 <_isatty_r+0x20>)
 800df16:	0004      	movs	r4, r0
 800df18:	0008      	movs	r0, r1
 800df1a:	602b      	str	r3, [r5, #0]
 800df1c:	f7f5 fb73 	bl	8003606 <_isatty>
 800df20:	1c43      	adds	r3, r0, #1
 800df22:	d103      	bne.n	800df2c <_isatty_r+0x1c>
 800df24:	682b      	ldr	r3, [r5, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d000      	beq.n	800df2c <_isatty_r+0x1c>
 800df2a:	6023      	str	r3, [r4, #0]
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	46c0      	nop			; (mov r8, r8)
 800df30:	20002d8c 	.word	0x20002d8c

0800df34 <_init>:
 800df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df36:	46c0      	nop			; (mov r8, r8)
 800df38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df3a:	bc08      	pop	{r3}
 800df3c:	469e      	mov	lr, r3
 800df3e:	4770      	bx	lr

0800df40 <_fini>:
 800df40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df42:	46c0      	nop			; (mov r8, r8)
 800df44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df46:	bc08      	pop	{r3}
 800df48:	469e      	mov	lr, r3
 800df4a:	4770      	bx	lr
