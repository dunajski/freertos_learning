
FreeRTOS_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a24  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08007ae4  08007ae4  00017ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d6c  08007d6c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d74  08007d74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  20000078  08007df4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c04  08007df4  00021c04  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3c9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa6  00000000  00000000  0003e469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00041f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  000437c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039bc  00000000  00000000  00044f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2a5  00000000  00000000  000488e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acbdd  00000000  00000000  00063b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110766  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d74  00000000  00000000  001107b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007acc 	.word	0x08007acc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08007acc 	.word	0x08007acc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fc78 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f860 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f932 	bl	8000894 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000630:	f000 f8e2 	bl	80007f8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000634:	f000 f8a2 	bl	800077c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8000638:	491b      	ldr	r1, [pc, #108]	; (80006a8 <main+0x88>)
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <main+0x8c>)
 800063c:	2201      	movs	r2, #1
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fc4e 	bl	8002ee0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f004 fc5e 	bl	8004f04 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000648:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <main+0x90>)
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <main+0x94>)
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f004 fca0 	bl	8004f94 <osThreadNew>
 8000654:	0002      	movs	r2, r0
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <main+0x98>)
 8000658:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  blinkingRatioThreadHandle = osThreadNew(ChangeBlinkingRatioThread, NULL, &blinkingRatioTask_attributes);
 800065a:	4a18      	ldr	r2, [pc, #96]	; (80006bc <main+0x9c>)
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <main+0xa0>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f004 fc97 	bl	8004f94 <osThreadNew>
 8000666:	0002      	movs	r2, r0
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <main+0xa4>)
 800066a:	601a      	str	r2, [r3, #0]
  toggleLEDThreadHandle = osThreadNew(ToggleLEDThread, NULL, &toggleLEDTask_attributes);
 800066c:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <main+0xa8>)
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <main+0xac>)
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f004 fc8e 	bl	8004f94 <osThreadNew>
 8000678:	0002      	movs	r2, r0
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <main+0xb0>)
 800067c:	601a      	str	r2, [r3, #0]
  sendByteOverUartHandle = osThreadNew(SendBytOverUartThread, NULL, &sendByteOverUartTask_attributes);
 800067e:	4a15      	ldr	r2, [pc, #84]	; (80006d4 <main+0xb4>)
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <main+0xb8>)
 8000682:	2100      	movs	r1, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f004 fc85 	bl	8004f94 <osThreadNew>
 800068a:	0002      	movs	r2, r0
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <main+0xbc>)
 800068e:	601a      	str	r2, [r3, #0]
  accelServiceHandle = osThreadNew(AccelServiceThread, NULL, &accelServiceTask_attributes);
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <main+0xc0>)
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <main+0xc4>)
 8000694:	2100      	movs	r1, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f004 fc7c 	bl	8004f94 <osThreadNew>
 800069c:	0002      	movs	r2, r0
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <main+0xc8>)
 80006a0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a2:	f004 fc51 	bl	8004f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x86>
 80006a8:	2000019c 	.word	0x2000019c
 80006ac:	200000f8 	.word	0x200000f8
 80006b0:	08007b4c 	.word	0x08007b4c
 80006b4:	08000b3b 	.word	0x08000b3b
 80006b8:	2000018c 	.word	0x2000018c
 80006bc:	08007b70 	.word	0x08007b70
 80006c0:	08000a45 	.word	0x08000a45
 80006c4:	20000190 	.word	0x20000190
 80006c8:	08007b94 	.word	0x08007b94
 80006cc:	080009f9 	.word	0x080009f9
 80006d0:	20000194 	.word	0x20000194
 80006d4:	08007bb8 	.word	0x08007bb8
 80006d8:	08000a61 	.word	0x08000a61
 80006dc:	20000198 	.word	0x20000198
 80006e0:	08007bdc 	.word	0x08007bdc
 80006e4:	08000b2d 	.word	0x08000b2d
 80006e8:	200001a0 	.word	0x200001a0

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b093      	sub	sp, #76	; 0x4c
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	2410      	movs	r4, #16
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	0018      	movs	r0, r3
 80006f8:	2338      	movs	r3, #56	; 0x38
 80006fa:	001a      	movs	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	f007 f910 	bl	8007922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000702:	003b      	movs	r3, r7
 8000704:	0018      	movs	r0, r3
 8000706:	2310      	movs	r3, #16
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f007 f909 	bl	8007922 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 ff85 	bl	8001624 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	193b      	adds	r3, r7, r4
 8000730:	2240      	movs	r2, #64	; 0x40
 8000732:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	f000 ffbd 	bl	80016bc <HAL_RCC_OscConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000746:	f000 fa15 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	003b      	movs	r3, r7
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	003b      	movs	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	003b      	movs	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	003b      	movs	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000762:	003b      	movs	r3, r7
 8000764:	2100      	movs	r1, #0
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fac2 	bl	8001cf0 <HAL_RCC_ClockConfig>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000770:	f000 fa00 	bl	8000b74 <Error_Handler>
  }
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b013      	add	sp, #76	; 0x4c
 800077a:	bd90      	pop	{r4, r7, pc}

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_SPI1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000788:	2282      	movs	r2, #130	; 0x82
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_SPI1_Init+0x74>)
 8000796:	22e0      	movs	r2, #224	; 0xe0
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_SPI1_Init+0x74>)
 800079e:	2202      	movs	r2, #2
 80007a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	0092      	lsls	r2, r2, #2
 80007ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007ca:	2207      	movs	r2, #7
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_SPI1_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fe13 	bl	8002408 <HAL_SPI_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f9c5 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000094 	.word	0x20000094
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_USART2_UART_Init+0x94>)
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <MX_USART2_UART_Init+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000804:	22e1      	movs	r2, #225	; 0xe1
 8000806:	0252      	lsls	r2, r2, #9
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_USART2_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_USART2_UART_Init+0x94>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_USART2_UART_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART2_UART_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fa5a 	bl	8002cfc <HAL_UART_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800084c:	f000 f992 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f004 f9eb 	bl	8004c30 <HAL_UARTEx_SetTxFifoThreshold>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800085e:	f000 f989 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000864:	2100      	movs	r1, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f004 fa22 	bl	8004cb0 <HAL_UARTEx_SetRxFifoThreshold>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000870:	f000 f980 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_USART2_UART_Init+0x94>)
 8000876:	0018      	movs	r0, r3
 8000878:	f004 f9a0 	bl	8004bbc <HAL_UARTEx_DisableFifoMode>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 f978 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	200000f8 	.word	0x200000f8
 8000890:	40004400 	.word	0x40004400

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	2414      	movs	r4, #20
 800089c:	193b      	adds	r3, r7, r4
 800089e:	0018      	movs	r0, r3
 80008a0:	2314      	movs	r3, #20
 80008a2:	001a      	movs	r2, r3
 80008a4:	2100      	movs	r1, #0
 80008a6:	f007 f83c 	bl	8007922 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	4b40      	ldr	r3, [pc, #256]	; (80009ac <MX_GPIO_Init+0x118>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_GPIO_Init+0x118>)
 80008b0:	2104      	movs	r1, #4
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <MX_GPIO_Init+0x118>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2204      	movs	r2, #4
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_GPIO_Init+0x118>)
 80008c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MX_GPIO_Init+0x118>)
 80008c8:	2120      	movs	r1, #32
 80008ca:	430a      	orrs	r2, r1
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
 80008ce:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_GPIO_Init+0x118>)
 80008d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d2:	2220      	movs	r2, #32
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <MX_GPIO_Init+0x118>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <MX_GPIO_Init+0x118>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <MX_GPIO_Init+0x118>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_GPIO_Init+0x118>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <MX_GPIO_Init+0x118>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_GPIO_Init+0x118>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000902:	2202      	movs	r2, #2
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800090a:	23a0      	movs	r3, #160	; 0xa0
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2200      	movs	r2, #0
 8000910:	2120      	movs	r1, #32
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fe1a 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_GPIO_Init+0x11c>)
 800091a:	2200      	movs	r2, #0
 800091c:	2101      	movs	r1, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f000 fe14 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2284      	movs	r2, #132	; 0x84
 8000930:	0392      	lsls	r2, r2, #14
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800093a:	193b      	adds	r3, r7, r4
 800093c:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <MX_GPIO_Init+0x120>)
 800093e:	0019      	movs	r1, r3
 8000940:	0010      	movs	r0, r2
 8000942:	f000 fc9f 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2220      	movs	r2, #32
 800094a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2201      	movs	r2, #1
 8000950:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000958:	193b      	adds	r3, r7, r4
 800095a:	2202      	movs	r2, #2
 800095c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800095e:	193a      	adds	r2, r7, r4
 8000960:	23a0      	movs	r3, #160	; 0xa0
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fc8c 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800096c:	0021      	movs	r1, r4
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2201      	movs	r2, #1
 8000978:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000986:	187b      	adds	r3, r7, r1
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <MX_GPIO_Init+0x11c>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f000 fc79 	bl	8001284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2103      	movs	r1, #3
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fb82 	bl	80010a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800099c:	2007      	movs	r0, #7
 800099e:	f000 fb94 	bl	80010ca <HAL_NVIC_EnableIRQ>

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b00b      	add	sp, #44	; 0x2c
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40021000 	.word	0x40021000
 80009b0:	50000400 	.word	0x50000400
 80009b4:	50000800 	.word	0x50000800

080009b8 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	019b      	lsls	r3, r3, #6
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d10b      	bne.n	80009e8 <HAL_GPIO_EXTI_Falling_Callback+0x30>
  {
    osThreadFlagsSet(blinkingRatioThreadHandle, BIT_1);
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2102      	movs	r1, #2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f004 fb72 	bl	80050c0 <osThreadFlagsSet>
    osThreadFlagsSet(sendByteOverUartHandle, BIT_1);
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2102      	movs	r1, #2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 fb6c 	bl	80050c0 <osThreadFlagsSet>

  }
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000190 	.word	0x20000190
 80009f4:	20000198 	.word	0x20000198

080009f8 <ToggleLEDThread>:

void ToggleLEDThread(void * argument)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    osDelay(blinking_ratio);
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <ToggleLEDThread+0x20>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	0018      	movs	r0, r3
 8000a06:	f004 fc25 	bl	8005254 <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000a0a:	23a0      	movs	r3, #160	; 0xa0
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2120      	movs	r1, #32
 8000a10:	0018      	movs	r0, r3
 8000a12:	f000 fdb8 	bl	8001586 <HAL_GPIO_TogglePin>
    osDelay(blinking_ratio);
 8000a16:	e7f3      	b.n	8000a00 <ToggleLEDThread+0x8>
 8000a18:	20000000 	.word	0x20000000

08000a1c <ChangeBlinkingRatio>:
  }
}

void ChangeBlinkingRatio(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  if (blinking_ratio == 250)
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <ChangeBlinkingRatio+0x24>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2bfa      	cmp	r3, #250	; 0xfa
 8000a26:	d104      	bne.n	8000a32 <ChangeBlinkingRatio+0x16>
    blinking_ratio = 1000;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <ChangeBlinkingRatio+0x24>)
 8000a2a:	22fa      	movs	r2, #250	; 0xfa
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
  else
    blinking_ratio = 250;
}
 8000a30:	e002      	b.n	8000a38 <ChangeBlinkingRatio+0x1c>
    blinking_ratio = 250;
 8000a32:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ChangeBlinkingRatio+0x24>)
 8000a34:	22fa      	movs	r2, #250	; 0xfa
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000000 	.word	0x20000000

08000a44 <ChangeBlinkingRatioThread>:

void ChangeBlinkingRatioThread(void * argument)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void) argument;
  for(;;)
  {
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	425b      	negs	r3, r3
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	2002      	movs	r0, #2
 8000a56:	f004 fb7d 	bl	8005154 <osThreadFlagsWait>

    ChangeBlinkingRatio();
 8000a5a:	f7ff ffdf 	bl	8000a1c <ChangeBlinkingRatio>
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 8000a5e:	e7f5      	b.n	8000a4c <ChangeBlinkingRatioThread+0x8>

08000a60 <SendBytOverUartThread>:
const uint8_t button_press_str[] = "Button pressed\r\n";
const uint8_t data_rec_str[] = "received sth\r\n";
const uint8_t data_rec_e_str[] = "received e\r\n";

void SendBytOverUartThread(void *argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  (void) argument;
  uint32_t events = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	425b      	negs	r3, r3
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	2003      	movs	r0, #3
 8000a76:	f004 fb6d 	bl	8005154 <osThreadFlagsWait>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	60fb      	str	r3, [r7, #12]

    switch (events)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d003      	beq.n	8000a8c <SendBytOverUartThread+0x2c>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d014      	beq.n	8000ab4 <SendBytOverUartThread+0x54>
        break;
      case BIT_1:
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
        break;
      default:
        break;
 8000a8a:	e01b      	b.n	8000ac4 <SendBytOverUartThread+0x64>
        if (rec_character == 'e')
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <SendBytOverUartThread+0x68>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b65      	cmp	r3, #101	; 0x65
 8000a92:	d107      	bne.n	8000aa4 <SendBytOverUartThread+0x44>
          HAL_UART_Transmit(&huart2, data_rec_e_str, sizeof(data_rec_e_str), 500);
 8000a94:	23fa      	movs	r3, #250	; 0xfa
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <SendBytOverUartThread+0x6c>)
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <SendBytOverUartThread+0x70>)
 8000a9c:	220d      	movs	r2, #13
 8000a9e:	f002 f983 	bl	8002da8 <HAL_UART_Transmit>
        break;
 8000aa2:	e00f      	b.n	8000ac4 <SendBytOverUartThread+0x64>
          HAL_UART_Transmit(&huart2, data_rec_str, sizeof(data_rec_str), 500);
 8000aa4:	23fa      	movs	r3, #250	; 0xfa
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	490a      	ldr	r1, [pc, #40]	; (8000ad4 <SendBytOverUartThread+0x74>)
 8000aaa:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <SendBytOverUartThread+0x70>)
 8000aac:	220f      	movs	r2, #15
 8000aae:	f002 f97b 	bl	8002da8 <HAL_UART_Transmit>
        break;
 8000ab2:	e007      	b.n	8000ac4 <SendBytOverUartThread+0x64>
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
 8000ab4:	23fa      	movs	r3, #250	; 0xfa
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <SendBytOverUartThread+0x78>)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <SendBytOverUartThread+0x70>)
 8000abc:	2211      	movs	r2, #17
 8000abe:	f002 f973 	bl	8002da8 <HAL_UART_Transmit>
        break;
 8000ac2:	46c0      	nop			; (mov r8, r8)
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8000ac4:	e7d2      	b.n	8000a6c <SendBytOverUartThread+0xc>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	2000019c 	.word	0x2000019c
 8000acc:	08007c24 	.word	0x08007c24
 8000ad0:	200000f8 	.word	0x200000f8
 8000ad4:	08007c14 	.word	0x08007c14
 8000ad8:	08007c00 	.word	0x08007c00

08000adc <HAL_UART_RxCpltCallback>:
    }
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_UART_RxCpltCallback+0x34>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10b      	bne.n	8000b06 <HAL_UART_RxCpltCallback+0x2a>
  {
    osThreadFlagsSet(sendByteOverUartHandle, BIT_0);
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_UART_RxCpltCallback+0x38>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2101      	movs	r1, #1
 8000af4:	0018      	movs	r0, r3
 8000af6:	f004 fae3 	bl	80050c0 <osThreadFlagsSet>
    HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8000afa:	4907      	ldr	r1, [pc, #28]	; (8000b18 <HAL_UART_RxCpltCallback+0x3c>)
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_UART_RxCpltCallback+0x40>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	0018      	movs	r0, r3
 8000b02:	f002 f9ed 	bl	8002ee0 <HAL_UART_Receive_IT>
  }
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	b002      	add	sp, #8
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	40004400 	.word	0x40004400
 8000b14:	20000198 	.word	0x20000198
 8000b18:	2000019c 	.word	0x2000019c
 8000b1c:	200000f8 	.word	0x200000f8

08000b20 <AccelMachineState>:

void AccelMachineState(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  break;

  // TODO add more states according to datasheet

  default:
  break;
 8000b24:	46c0      	nop			; (mov r8, r8)
  }
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <AccelServiceThread>:

void AccelServiceThread(void *argument)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    AccelMachineState();
 8000b34:	f7ff fff4 	bl	8000b20 <AccelMachineState>
 8000b38:	e7fc      	b.n	8000b34 <AccelServiceThread+0x8>

08000b3a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000b42:	23fa      	movs	r3, #250	; 0xfa
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f004 fb84 	bl	8005254 <osDelay>
 8000b4c:	e7f9      	b.n	8000b42 <StartDefaultTask+0x8>
	...

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 f9f9 	bl	8000f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	40001000 	.word	0x40001000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_MspInit+0x50>)
 8000b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_MspInit+0x50>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	641a      	str	r2, [r3, #64]	; 0x40
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x50>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2201      	movs	r2, #1
 8000b98:	4013      	ands	r3, r2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x50>)
 8000ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x50>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0549      	lsls	r1, r1, #21
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x50>)
 8000bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	055b      	lsls	r3, r3, #21
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bba:	2302      	movs	r3, #2
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 fa6c 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	2414      	movs	r4, #20
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f006 fe9b 	bl	8007922 <memset>
  if(hspi->Instance==SPI1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <HAL_SPI_MspInit+0x9c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d138      	bne.n	8000c68 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <HAL_SPI_MspInit+0xa0>)
 8000bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_SPI_MspInit+0xa0>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0149      	lsls	r1, r1, #5
 8000c00:	430a      	orrs	r2, r1
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_SPI_MspInit+0xa0>)
 8000c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_SPI_MspInit+0xa0>)
 8000c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_SPI_MspInit+0xa0>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_SPI_MspInit+0xa0>)
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c22:	2201      	movs	r2, #1
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	22c2      	movs	r2, #194	; 0xc2
 8000c30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2202      	movs	r2, #2
 8000c36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	187a      	adds	r2, r7, r1
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fb16 	bl	8001284 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	2019      	movs	r0, #25
 8000c5e:	f000 fa1f 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c62:	2019      	movs	r0, #25
 8000c64:	f000 fa31 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b00b      	add	sp, #44	; 0x2c
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	40013000 	.word	0x40013000
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b097      	sub	sp, #92	; 0x5c
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	2344      	movs	r3, #68	; 0x44
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	0018      	movs	r0, r3
 8000c86:	2314      	movs	r3, #20
 8000c88:	001a      	movs	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f006 fe49 	bl	8007922 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	2410      	movs	r4, #16
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	0018      	movs	r0, r3
 8000c96:	2334      	movs	r3, #52	; 0x34
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f006 fe41 	bl	8007922 <memset>
  if(huart->Instance==USART2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_UART_MspInit+0xc8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d146      	bne.n	8000d38 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2202      	movs	r2, #2
 8000cae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f001 f9ed 	bl	8002098 <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cc2:	f7ff ff57 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cca:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	0289      	lsls	r1, r1, #10
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	029b      	lsls	r3, r3, #10
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_UART_MspInit+0xcc>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000cfa:	2144      	movs	r1, #68	; 0x44
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2202      	movs	r2, #2
 8000d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2201      	movs	r2, #1
 8000d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	187a      	adds	r2, r7, r1
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 faae 	bl	8001284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f000 f9b7 	bl	80010a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d32:	201c      	movs	r0, #28
 8000d34:	f000 f9c9 	bl	80010ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b017      	add	sp, #92	; 0x5c
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b5b0      	push	{r4, r5, r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d50:	232b      	movs	r3, #43	; 0x2b
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d58:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <HAL_InitTick+0xf0>)
 8000d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d5c:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_InitTick+0xf0>)
 8000d5e:	2110      	movs	r1, #16
 8000d60:	430a      	orrs	r2, r1
 8000d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <HAL_InitTick+0xf0>)
 8000d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d68:	2210      	movs	r2, #16
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d70:	230c      	movs	r3, #12
 8000d72:	18fa      	adds	r2, r7, r3
 8000d74:	2410      	movs	r4, #16
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f001 f962 	bl	8002044 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d104      	bne.n	8000d96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d8c:	f001 f944 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8000d90:	0003      	movs	r3, r0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d94:	e004      	b.n	8000da0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d96:	f001 f93f 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	4926      	ldr	r1, [pc, #152]	; (8000e3c <HAL_InitTick+0xf4>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff f9af 	bl	8000108 <__udivsi3>
 8000daa:	0003      	movs	r3, r0
 8000dac:	3b01      	subs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000db0:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <HAL_InitTick+0xf8>)
 8000db2:	4a24      	ldr	r2, [pc, #144]	; (8000e44 <HAL_InitTick+0xfc>)
 8000db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <HAL_InitTick+0xf8>)
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_InitTick+0x100>)
 8000dba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dbc:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <HAL_InitTick+0xf8>)
 8000dbe:	6a3a      	ldr	r2, [r7, #32]
 8000dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_InitTick+0xf8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_InitTick+0xf8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_InitTick+0xf8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dd4:	252b      	movs	r5, #43	; 0x2b
 8000dd6:	197c      	adds	r4, r7, r5
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_InitTick+0xf8>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f001 fce8 	bl	80027b0 <HAL_TIM_Base_Init>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000de4:	197b      	adds	r3, r7, r5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11e      	bne.n	8000e2a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dec:	197c      	adds	r4, r7, r5
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_InitTick+0xf8>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f001 fd3d 	bl	8002870 <HAL_TIM_Base_Start_IT>
 8000df6:	0003      	movs	r3, r0
 8000df8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d113      	bne.n	8000e2a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000e02:	2011      	movs	r0, #17
 8000e04:	f000 f961 	bl	80010ca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	d809      	bhi.n	8000e22 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	0019      	movs	r1, r3
 8000e14:	2011      	movs	r0, #17
 8000e16:	f000 f943 	bl	80010a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_InitTick+0x104>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e003      	b.n	8000e2a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000e22:	232b      	movs	r3, #43	; 0x2b
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000e2a:	232b      	movs	r3, #43	; 0x2b
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	781b      	ldrb	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b00c      	add	sp, #48	; 0x30
 8000e36:	bdb0      	pop	{r4, r5, r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	000f4240 	.word	0x000f4240
 8000e40:	200001a4 	.word	0x200001a4
 8000e44:	40001000 	.word	0x40001000
 8000e48:	000003e7 	.word	0x000003e7
 8000e4c:	20000008 	.word	0x20000008

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	019b      	lsls	r3, r3, #6
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fba9 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 fd56 	bl	8002928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	200001a4 	.word	0x200001a4

08000e88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <SPI1_IRQHandler+0x14>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f001 fb72 	bl	8002578 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	20000094 	.word	0x20000094

08000ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <USART2_IRQHandler+0x14>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f002 f878 	bl	8002f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	200000f8 	.word	0x200000f8

08000eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec8:	f7ff fff6 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef2:	f006 fce7 	bl	80078c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ef6:	f7ff fb93 	bl	8000620 <main>

08000efa <LoopForever>:

LoopForever:
  b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f08:	08007d7c 	.word	0x08007d7c
  ldr r2, =_sbss
 8000f0c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f10:	20001c04 	.word	0x20001c04

08000f14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_COMP_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_Init+0x3c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Init+0x3c>)
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	0049      	lsls	r1, r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f32:	2003      	movs	r0, #3
 8000f34:	f7ff ff08 	bl	8000d48 <HAL_InitTick>
 8000f38:	1e03      	subs	r3, r0, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e001      	b.n	8000f48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fe1c 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	781b      	ldrb	r3, [r3, #0]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b002      	add	sp, #8
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40022000 	.word	0x40022000

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	001a      	movs	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	18d2      	adds	r2, r2, r3
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_IncTick+0x20>)
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	200001f0 	.word	0x200001f0

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_GetTick+0x10>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	200001f0 	.word	0x200001f0

08000f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	0002      	movs	r2, r0
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa2:	d809      	bhi.n	8000fb8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	001a      	movs	r2, r3
 8000faa:	231f      	movs	r3, #31
 8000fac:	401a      	ands	r2, r3
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_EnableIRQ+0x30>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	4091      	lsls	r1, r2
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	0002      	movs	r2, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd8:	d828      	bhi.n	800102c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fda:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <__NVIC_SetPriority+0xd4>)
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	33c0      	adds	r3, #192	; 0xc0
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	589b      	ldr	r3, [r3, r2]
 8000fea:	1dfa      	adds	r2, r7, #7
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	0011      	movs	r1, r2
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	00d2      	lsls	r2, r2, #3
 8000ff6:	21ff      	movs	r1, #255	; 0xff
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	43d2      	mvns	r2, r2
 8000ffe:	401a      	ands	r2, r3
 8001000:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	019b      	lsls	r3, r3, #6
 8001006:	22ff      	movs	r2, #255	; 0xff
 8001008:	401a      	ands	r2, r3
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	0018      	movs	r0, r3
 8001010:	2303      	movs	r3, #3
 8001012:	4003      	ands	r3, r0
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001018:	481f      	ldr	r0, [pc, #124]	; (8001098 <__NVIC_SetPriority+0xd4>)
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b25b      	sxtb	r3, r3
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	430a      	orrs	r2, r1
 8001024:	33c0      	adds	r3, #192	; 0xc0
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800102a:	e031      	b.n	8001090 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <__NVIC_SetPriority+0xd8>)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0019      	movs	r1, r3
 8001034:	230f      	movs	r3, #15
 8001036:	400b      	ands	r3, r1
 8001038:	3b08      	subs	r3, #8
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3306      	adds	r3, #6
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	3304      	adds	r3, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	1dfa      	adds	r2, r7, #7
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	0011      	movs	r1, r2
 800104c:	2203      	movs	r2, #3
 800104e:	400a      	ands	r2, r1
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	21ff      	movs	r1, #255	; 0xff
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	43d2      	mvns	r2, r2
 800105a:	401a      	ands	r2, r3
 800105c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	22ff      	movs	r2, #255	; 0xff
 8001064:	401a      	ands	r2, r3
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	2303      	movs	r3, #3
 800106e:	4003      	ands	r3, r0
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <__NVIC_SetPriority+0xd8>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	001c      	movs	r4, r3
 800107c:	230f      	movs	r3, #15
 800107e:	4023      	ands	r3, r4
 8001080:	3b08      	subs	r3, #8
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	430a      	orrs	r2, r1
 8001086:	3306      	adds	r3, #6
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	18c3      	adds	r3, r0, r3
 800108c:	3304      	adds	r3, #4
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b003      	add	sp, #12
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	210f      	movs	r1, #15
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	1c02      	adds	r2, r0, #0
 80010b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff ff81 	bl	8000fc4 <__NVIC_SetPriority>
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	0002      	movs	r2, r0
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff ff57 	bl	8000f90 <__NVIC_EnableIRQ>
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e050      	b.n	80011a0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2225      	movs	r2, #37	; 0x25
 8001102:	5c9b      	ldrb	r3, [r3, r2]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d008      	beq.n	800111c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2204      	movs	r2, #4
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2224      	movs	r2, #36	; 0x24
 8001114:	2100      	movs	r1, #0
 8001116:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e041      	b.n	80011a0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	210e      	movs	r1, #14
 8001128:	438a      	bics	r2, r1
 800112a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	491c      	ldr	r1, [pc, #112]	; (80011a8 <HAL_DMA_Abort+0xbc>)
 8001138:	400a      	ands	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2101      	movs	r1, #1
 8001148:	438a      	bics	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800114c:	4b17      	ldr	r3, [pc, #92]	; (80011ac <HAL_DMA_Abort+0xc0>)
 800114e:	6859      	ldr	r1, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	221c      	movs	r2, #28
 8001156:	4013      	ands	r3, r2
 8001158:	2201      	movs	r2, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_DMA_Abort+0xc0>)
 800115e:	430a      	orrs	r2, r1
 8001160:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800116a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00c      	beq.n	800118e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800117e:	490a      	ldr	r1, [pc, #40]	; (80011a8 <HAL_DMA_Abort+0xbc>)
 8001180:	400a      	ands	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800118c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2225      	movs	r2, #37	; 0x25
 8001192:	2101      	movs	r1, #1
 8001194:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2224      	movs	r2, #36	; 0x24
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	fffffeff 	.word	0xfffffeff
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	210f      	movs	r1, #15
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2225      	movs	r2, #37	; 0x25
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d006      	beq.n	80011da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2204      	movs	r2, #4
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011d2:	187b      	adds	r3, r7, r1
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e049      	b.n	800126e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	210e      	movs	r1, #14
 80011e6:	438a      	bics	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	491d      	ldr	r1, [pc, #116]	; (800127c <HAL_DMA_Abort_IT+0xcc>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_DMA_Abort_IT+0xd0>)
 800120c:	6859      	ldr	r1, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	221c      	movs	r2, #28
 8001214:	4013      	ands	r3, r2
 8001216:	2201      	movs	r2, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_DMA_Abort_IT+0xd0>)
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001228:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00c      	beq.n	800124c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123c:	490f      	ldr	r1, [pc, #60]	; (800127c <HAL_DMA_Abort_IT+0xcc>)
 800123e:	400a      	ands	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800124a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2225      	movs	r2, #37	; 0x25
 8001250:	2101      	movs	r1, #1
 8001252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2224      	movs	r2, #36	; 0x24
 8001258:	2100      	movs	r1, #0
 800125a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	0010      	movs	r0, r2
 800126c:	4798      	blx	r3
    }
  }
  return status;
 800126e:	230f      	movs	r3, #15
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b004      	add	sp, #16
 800127a:	bd80      	pop	{r7, pc}
 800127c:	fffffeff 	.word	0xfffffeff
 8001280:	40020000 	.word	0x40020000

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e147      	b.n	8001524 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x28>
 80012aa:	e138      	b.n	800151e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2203      	movs	r2, #3
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d005      	beq.n	80012c4 <HAL_GPIO_Init+0x40>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d130      	bne.n	8001326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	409a      	lsls	r2, r3
 80012d2:	0013      	movs	r3, r2
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	0013      	movs	r3, r2
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fa:	2201      	movs	r2, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	2201      	movs	r2, #1
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2203      	movs	r2, #3
 800132c:	4013      	ands	r3, r2
 800132e:	2b03      	cmp	r3, #3
 8001330:	d017      	beq.n	8001362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2203      	movs	r2, #3
 8001368:	4013      	ands	r3, r2
 800136a:	2b02      	cmp	r3, #2
 800136c:	d123      	bne.n	80013b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	58d3      	ldr	r3, [r2, r3]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2207      	movs	r2, #7
 8001380:	4013      	ands	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2107      	movs	r1, #7
 800139a:	400b      	ands	r3, r1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	409a      	lsls	r2, r3
 80013c4:	0013      	movs	r3, r2
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	401a      	ands	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	23c0      	movs	r3, #192	; 0xc0
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d100      	bne.n	80013f8 <HAL_GPIO_Init+0x174>
 80013f6:	e092      	b.n	800151e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013f8:	4a50      	ldr	r2, [pc, #320]	; (800153c <HAL_GPIO_Init+0x2b8>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3318      	adds	r3, #24
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	589b      	ldr	r3, [r3, r2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	220f      	movs	r2, #15
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	43da      	mvns	r2, r3
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	23a0      	movs	r3, #160	; 0xa0
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	429a      	cmp	r2, r3
 8001424:	d013      	beq.n	800144e <HAL_GPIO_Init+0x1ca>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a45      	ldr	r2, [pc, #276]	; (8001540 <HAL_GPIO_Init+0x2bc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x1c6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a44      	ldr	r2, [pc, #272]	; (8001544 <HAL_GPIO_Init+0x2c0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x1c2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a43      	ldr	r2, [pc, #268]	; (8001548 <HAL_GPIO_Init+0x2c4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x1be>
 800143e:	2303      	movs	r3, #3
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x1cc>
 8001442:	2305      	movs	r3, #5
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x1cc>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x1cc>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x1cc>
 800144e:	2300      	movs	r3, #0
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	2103      	movs	r1, #3
 8001454:	400a      	ands	r2, r1
 8001456:	00d2      	lsls	r2, r2, #3
 8001458:	4093      	lsls	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001460:	4936      	ldr	r1, [pc, #216]	; (800153c <HAL_GPIO_Init+0x2b8>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3318      	adds	r3, #24
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_GPIO_Init+0x2b8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_GPIO_Init+0x2b8>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_GPIO_Init+0x2b8>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_GPIO_Init+0x2b8>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014c2:	4a1e      	ldr	r2, [pc, #120]	; (800153c <HAL_GPIO_Init+0x2b8>)
 80014c4:	2384      	movs	r3, #132	; 0x84
 80014c6:	58d3      	ldr	r3, [r2, r3]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43da      	mvns	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	029b      	lsls	r3, r3, #10
 80014dc:	4013      	ands	r3, r2
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e8:	4914      	ldr	r1, [pc, #80]	; (800153c <HAL_GPIO_Init+0x2b8>)
 80014ea:	2284      	movs	r2, #132	; 0x84
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <HAL_GPIO_Init+0x2b8>)
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	58d3      	ldr	r3, [r2, r3]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	4013      	ands	r3, r2
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001516:	4909      	ldr	r1, [pc, #36]	; (800153c <HAL_GPIO_Init+0x2b8>)
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	40da      	lsrs	r2, r3
 800152c:	1e13      	subs	r3, r2, #0
 800152e:	d000      	beq.n	8001532 <HAL_GPIO_Init+0x2ae>
 8001530:	e6b0      	b.n	8001294 <HAL_GPIO_Init+0x10>
  }
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b006      	add	sp, #24
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021800 	.word	0x40021800
 8001540:	50000400 	.word	0x50000400
 8001544:	50000800 	.word	0x50000800
 8001548:	50000c00 	.word	0x50000c00

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	0008      	movs	r0, r1
 8001556:	0011      	movs	r1, r2
 8001558:	1cbb      	adds	r3, r7, #2
 800155a:	1c02      	adds	r2, r0, #0
 800155c:	801a      	strh	r2, [r3, #0]
 800155e:	1c7b      	adds	r3, r7, #1
 8001560:	1c0a      	adds	r2, r1, #0
 8001562:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	1c7b      	adds	r3, r7, #1
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800156c:	1cbb      	adds	r3, r7, #2
 800156e:	881a      	ldrh	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001574:	e003      	b.n	800157e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001576:	1cbb      	adds	r3, r7, #2
 8001578:	881a      	ldrh	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	000a      	movs	r2, r1
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159a:	1cbb      	adds	r3, r7, #2
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	041a      	lsls	r2, r3, #16
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	1cb9      	adds	r1, r7, #2
 80015aa:	8809      	ldrh	r1, [r1, #0]
 80015ac:	400b      	ands	r3, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b004      	add	sp, #16
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	1dbb      	adds	r3, r7, #6
 80015c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	1dba      	adds	r2, r7, #6
 80015ce:	8812      	ldrh	r2, [r2, #0]
 80015d0:	4013      	ands	r3, r2
 80015d2:	d008      	beq.n	80015e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015d6:	1dba      	adds	r2, r7, #6
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80015dc:	1dbb      	adds	r3, r7, #6
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 f815 	bl	8001610 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	1dba      	adds	r2, r7, #6
 80015ec:	8812      	ldrh	r2, [r2, #0]
 80015ee:	4013      	ands	r3, r2
 80015f0:	d008      	beq.n	8001604 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015f4:	1dba      	adds	r2, r7, #6
 80015f6:	8812      	ldrh	r2, [r2, #0]
 80015f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015fa:	1dbb      	adds	r3, r7, #6
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff f9da 	bl	80009b8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001604:	46c0      	nop			; (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021800 	.word	0x40021800

08001610 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	0002      	movs	r2, r0
 8001618:	1dbb      	adds	r3, r7, #6
 800161a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001632:	4013      	ands	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d11f      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	0013      	movs	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	189b      	adds	r3, r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4912      	ldr	r1, [pc, #72]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001656:	0018      	movs	r0, r3
 8001658:	f7fe fd56 	bl	8000108 <__udivsi3>
 800165c:	0003      	movs	r3, r0
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001662:	e008      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b01      	subs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e001      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e009      	b.n	800168a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	401a      	ands	r2, r3
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	429a      	cmp	r2, r3
 8001686:	d0ed      	beq.n	8001664 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	40007000 	.word	0x40007000
 8001698:	fffff9ff 	.word	0xfffff9ff
 800169c:	20000004 	.word	0x20000004
 80016a0:	000f4240 	.word	0x000f4240

080016a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	23e0      	movs	r3, #224	; 0xe0
 80016ae:	01db      	lsls	r3, r3, #7
 80016b0:	4013      	ands	r3, r2
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e2fe      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	4013      	ands	r3, r2
 80016d6:	d100      	bne.n	80016da <HAL_RCC_OscConfig+0x1e>
 80016d8:	e07c      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4bc3      	ldr	r3, [pc, #780]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	; 0x38
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	4bc0      	ldr	r3, [pc, #768]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2203      	movs	r2, #3
 80016ea:	4013      	ands	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_OscConfig+0x3e>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d002      	beq.n	8001700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d10b      	bne.n	8001718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	4bb9      	ldr	r3, [pc, #740]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	029b      	lsls	r3, r3, #10
 8001708:	4013      	ands	r3, r2
 800170a:	d062      	beq.n	80017d2 <HAL_RCC_OscConfig+0x116>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d15e      	bne.n	80017d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e2d9      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	025b      	lsls	r3, r3, #9
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x78>
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4baf      	ldr	r3, [pc, #700]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0249      	lsls	r1, r1, #9
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e020      	b.n	8001776 <HAL_RCC_OscConfig+0xba>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	23a0      	movs	r3, #160	; 0xa0
 800173a:	02db      	lsls	r3, r3, #11
 800173c:	429a      	cmp	r2, r3
 800173e:	d10e      	bne.n	800175e <HAL_RCC_OscConfig+0xa2>
 8001740:	4ba9      	ldr	r3, [pc, #676]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4ba8      	ldr	r3, [pc, #672]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	02c9      	lsls	r1, r1, #11
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4ba5      	ldr	r3, [pc, #660]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0249      	lsls	r1, r1, #9
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0xba>
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001764:	49a1      	ldr	r1, [pc, #644]	; (80019ec <HAL_RCC_OscConfig+0x330>)
 8001766:	400a      	ands	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	4b9f      	ldr	r3, [pc, #636]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001770:	499f      	ldr	r1, [pc, #636]	; (80019f0 <HAL_RCC_OscConfig+0x334>)
 8001772:	400a      	ands	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d014      	beq.n	80017a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fbfd 	bl	8000f7c <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fbf8 	bl	8000f7c <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e298      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xcc>
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbe8 	bl	8000f7c <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b2:	f7ff fbe3 	bl	8000f7c <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	; 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e283      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCC_OscConfig+0xf6>
 80017d0:	e000      	b.n	80017d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_RCC_OscConfig+0x124>
 80017de:	e099      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2238      	movs	r2, #56	; 0x38
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2203      	movs	r2, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d102      	bne.n	8001800 <HAL_RCC_OscConfig+0x144>
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d002      	beq.n	8001806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d135      	bne.n	8001872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001806:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4013      	ands	r3, r2
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x162>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e256      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b72      	ldr	r3, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a74      	ldr	r2, [pc, #464]	; (80019f4 <HAL_RCC_OscConfig+0x338>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	4b6e      	ldr	r3, [pc, #440]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x33c>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800184e:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	0adb      	lsrs	r3, r3, #11
 8001854:	2207      	movs	r2, #7
 8001856:	4013      	ands	r3, r2
 8001858:	4a68      	ldr	r2, [pc, #416]	; (80019fc <HAL_RCC_OscConfig+0x340>)
 800185a:	40da      	lsrs	r2, r3
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x344>)
 800185e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x348>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff fa6f 	bl	8000d48 <HAL_InitTick>
 800186a:	1e03      	subs	r3, r0, #0
 800186c:	d051      	beq.n	8001912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e22c      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x33c>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0049      	lsls	r1, r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fb6e 	bl	8000f7c <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fb69 	bl	8000f7c <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e209      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4013      	ands	r3, r2
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_RCC_OscConfig+0x338>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	021a      	lsls	r2, r3, #8
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	e01b      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	4949      	ldr	r1, [pc, #292]	; (8001a08 <HAL_RCC_OscConfig+0x34c>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fb48 	bl	8000f7c <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb43 	bl	8000f7c <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1e3      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x236>
 8001910:	e000      	b.n	8001914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2208      	movs	r2, #8
 800191a:	4013      	ands	r3, r2
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2238      	movs	r2, #56	; 0x38
 8001924:	4013      	ands	r3, r2
 8001926:	2b18      	cmp	r3, #24
 8001928:	d10a      	bne.n	8001940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d03c      	beq.n	80019ae <HAL_RCC_OscConfig+0x2f2>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d138      	bne.n	80019ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e1c5      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d019      	beq.n	800197c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800194a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194c:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800194e:	2101      	movs	r1, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fb12 	bl	8000f7c <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fb0d 	bl	8000f7c <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1ad      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d0f1      	beq.n	800195e <HAL_RCC_OscConfig+0x2a2>
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 800197e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff faf8 	bl	8000f7c <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001992:	f7ff faf3 	bl	8000f7c <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e193      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a8:	2202      	movs	r2, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f1      	bne.n	8001992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2204      	movs	r2, #4
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x2fe>
 80019b8:	e0c6      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ba:	231f      	movs	r3, #31
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2238      	movs	r2, #56	; 0x38
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d11e      	bne.n	8001a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x32c>)
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d100      	bne.n	80019da <HAL_RCC_OscConfig+0x31e>
 80019d8:	e0b6      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d000      	beq.n	80019e4 <HAL_RCC_OscConfig+0x328>
 80019e2:	e0b1      	b.n	8001b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e171      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	fffeffff 	.word	0xfffeffff
 80019f0:	fffbffff 	.word	0xfffbffff
 80019f4:	ffff80ff 	.word	0xffff80ff
 80019f8:	ffffc7ff 	.word	0xffffc7ff
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	20000004 	.word	0x20000004
 8001a04:	20000008 	.word	0x20000008
 8001a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a0c:	4bb1      	ldr	r3, [pc, #708]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x360>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x362>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d011      	beq.n	8001a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	4bac      	ldr	r3, [pc, #688]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a26:	4bab      	ldr	r3, [pc, #684]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0549      	lsls	r1, r1, #21
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a30:	4ba8      	ldr	r3, [pc, #672]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a3e:	231f      	movs	r3, #31
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a52:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0049      	lsls	r1, r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fa8c 	bl	8000f7c <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fa87 	bl	8000f7c <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e127      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <HAL_RCC_OscConfig+0x61c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3e2>
 8001a90:	4b90      	ldr	r3, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9c:	e01c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x404>
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001aac:	2104      	movs	r1, #4
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x41c>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ac4:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d014      	beq.n	8001b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa4c 	bl	8000f7c <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff fa47 	bl	8000f7c <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a79      	ldr	r2, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x620>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0e6      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x42e>
 8001b08:	e013      	b.n	8001b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa37 	bl	8000f7c <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b12:	e009      	b.n	8001b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b14:	f7ff fa32 	bl	8000f7c <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a6f      	ldr	r2, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x620>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0d1      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b32:	231f      	movs	r3, #31
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b40:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b42:	4967      	ldr	r1, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x624>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x496>
 8001b50:	e0bb      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2238      	movs	r2, #56	; 0x38
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d100      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4a4>
 8001b5e:	e07b      	b.n	8001c58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d156      	bne.n	8001c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b68:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	495d      	ldr	r1, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x628>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fa02 	bl	8000f7c <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f9fd 	bl	8000f7c <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e09d      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	049b      	lsls	r3, r3, #18
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x62c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1a      	ldr	r2, [r3, #32]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0449      	lsls	r1, r1, #17
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0549      	lsls	r1, r1, #21
 8001be8:	430a      	orrs	r2, r1
 8001bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f9c6 	bl	8000f7c <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff f9c1 	bl	8000f7c <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e061      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	049b      	lsls	r3, r3, #18
 8001c10:	4013      	ands	r3, r2
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x53a>
 8001c14:	e059      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c1c:	4931      	ldr	r1, [pc, #196]	; (8001ce4 <HAL_RCC_OscConfig+0x628>)
 8001c1e:	400a      	ands	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c22:	f7ff f9ab 	bl	8000f7c <HAL_GetTick>
 8001c26:	0003      	movs	r3, r0
 8001c28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff f9a6 	bl	8000f7c <HAL_GetTick>
 8001c30:	0002      	movs	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e046      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	049b      	lsls	r3, r3, #18
 8001c46:	4013      	ands	r3, r2
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c50:	4926      	ldr	r1, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x630>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e038      	b.n	8001cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e033      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x618>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d126      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2270      	movs	r2, #112	; 0x70
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11f      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	23fe      	movs	r3, #254	; 0xfe
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d116      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	23f8      	movs	r3, #248	; 0xf8
 8001c9c:	039b      	lsls	r3, r3, #14
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	23e0      	movs	r3, #224	; 0xe0
 8001cac:	051b      	lsls	r3, r3, #20
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	0f5b      	lsrs	r3, r3, #29
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b008      	add	sp, #32
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	11c1808c 	.word	0x11c1808c
 8001cec:	eefefffc 	.word	0xeefefffc

08001cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0e9      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2207      	movs	r2, #7
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d91e      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b73      	ldr	r3, [pc, #460]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2207      	movs	r2, #7
 8001d18:	4393      	bics	r3, r2
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d24:	f7ff f92a 	bl	8000f7c <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff f925 	bl	8000f7c <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0ca      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2207      	movs	r2, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2202      	movs	r2, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	d006      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d64:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6a:	21e0      	movs	r1, #224	; 0xe0
 8001d6c:	01c9      	lsls	r1, r1, #7
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_RCC_ClockConfig+0x1fc>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d057      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	d12b      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e097      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	049b      	lsls	r3, r3, #18
 8001db8:	4013      	ands	r3, r2
 8001dba:	d11f      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e08b      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d113      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e07f      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de0:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e074      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e06d      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2207      	movs	r2, #7
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e10:	f7ff f8b4 	bl	8000f7c <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7ff f8af 	bl	8000f7c <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e054      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2238      	movs	r2, #56	; 0x38
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d1ec      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2207      	movs	r2, #7
 8001e46:	4013      	ands	r3, r2
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d21e      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2207      	movs	r2, #7
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e60:	f7ff f88c 	bl	8000f7c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6a:	f7ff f887 	bl	8000f7c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e02c      	b.n	8001ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2207      	movs	r2, #7
 8001e84:	4013      	ands	r3, r2
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <HAL_RCC_ClockConfig+0x200>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001eaa:	f000 f829 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001eae:	0001      	movs	r1, r0
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	401a      	ands	r2, r3
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x204>)
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	58d3      	ldr	r3, [r2, r3]
 8001ec0:	221f      	movs	r2, #31
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	40da      	lsrs	r2, r3
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_ClockConfig+0x208>)
 8001eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_ClockConfig+0x20c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7fe ff39 	bl	8000d48 <HAL_InitTick>
 8001ed6:	0003      	movs	r3, r0
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b004      	add	sp, #16
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	fffff0ff 	.word	0xfffff0ff
 8001ef0:	ffff8fff 	.word	0xffff8fff
 8001ef4:	08007c34 	.word	0x08007c34
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	20000008 	.word	0x20000008

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2238      	movs	r2, #56	; 0x38
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d10f      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0adb      	lsrs	r3, r3, #11
 8001f16:	2207      	movs	r2, #7
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	4835      	ldr	r0, [pc, #212]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f26:	f7fe f8ef 	bl	8000108 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e05d      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2238      	movs	r2, #56	; 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e054      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2238      	movs	r2, #56	; 0x38
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d138      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2203      	movs	r2, #3
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4013      	ands	r3, r2
 8001f62:	3301      	adds	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	4824      	ldr	r0, [pc, #144]	; (8002000 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f70:	f7fe f8ca 	bl	8000108 <__udivsi3>
 8001f74:	0003      	movs	r3, r0
 8001f76:	0019      	movs	r1, r3
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	227f      	movs	r2, #127	; 0x7f
 8001f80:	4013      	ands	r3, r2
 8001f82:	434b      	muls	r3, r1
 8001f84:	617b      	str	r3, [r7, #20]
        break;
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	481c      	ldr	r0, [pc, #112]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f8c:	f7fe f8bc 	bl	8000108 <__udivsi3>
 8001f90:	0003      	movs	r3, r0
 8001f92:	0019      	movs	r1, r3
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	227f      	movs	r2, #127	; 0x7f
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	434b      	muls	r3, r1
 8001fa0:	617b      	str	r3, [r7, #20]
        break;
 8001fa2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0f5b      	lsrs	r3, r3, #29
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7fe f8a7 	bl	8000108 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2238      	movs	r2, #56	; 0x38
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d103      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2238      	movs	r2, #56	; 0x38
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b18      	cmp	r3, #24
 8001fde:	d103      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fe0:	23fa      	movs	r3, #250	; 0xfa
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	e001      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fec:	693b      	ldr	r3, [r7, #16]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b006      	add	sp, #24
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b02      	ldr	r3, [pc, #8]	; (8002014 <HAL_RCC_GetHCLKFreq+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800201c:	f7ff fff2 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002020:	0004      	movs	r4, r0
 8002022:	f7ff fb3f 	bl	80016a4 <LL_RCC_GetAPB1Prescaler>
 8002026:	0003      	movs	r3, r0
 8002028:	0b1a      	lsrs	r2, r3, #12
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800202c:	0092      	lsls	r2, r2, #2
 800202e:	58d3      	ldr	r3, [r2, r3]
 8002030:	221f      	movs	r2, #31
 8002032:	4013      	ands	r3, r2
 8002034:	40dc      	lsrs	r4, r3
 8002036:	0023      	movs	r3, r4
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bdb0      	pop	{r4, r5, r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	08007c74 	.word	0x08007c74

08002044 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2207      	movs	r2, #7
 8002052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_RCC_GetClockConfig+0x4c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2207      	movs	r2, #7
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_GetClockConfig+0x4c>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	23f0      	movs	r3, #240	; 0xf0
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	401a      	ands	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_RCC_GetClockConfig+0x4c>)
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	23e0      	movs	r3, #224	; 0xe0
 8002074:	01db      	lsls	r3, r3, #7
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetClockConfig+0x50>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2207      	movs	r2, #7
 8002082:	401a      	ands	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	40022000 	.word	0x40022000

08002098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020a0:	2313      	movs	r3, #19
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a8:	2312      	movs	r3, #18
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d100      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020bc:	e0a3      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2011      	movs	r0, #17
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4bc3      	ldr	r3, [pc, #780]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	055b      	lsls	r3, r3, #21
 80020ce:	4013      	ands	r3, r2
 80020d0:	d110      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4bc0      	ldr	r3, [pc, #768]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d6:	4bbf      	ldr	r3, [pc, #764]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0549      	lsls	r1, r1, #21
 80020dc:	430a      	orrs	r2, r1
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
 80020e0:	4bbc      	ldr	r3, [pc, #752]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f4:	4bb8      	ldr	r3, [pc, #736]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4bb7      	ldr	r3, [pc, #732]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002102:	f7fe ff3b 	bl	8000f7c <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210a:	e00b      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe ff36 	bl	8000f7c <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d904      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800211a:	2313      	movs	r3, #19
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2203      	movs	r2, #3
 8002120:	701a      	strb	r2, [r3, #0]
        break;
 8002122:	e005      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002124:	4bac      	ldr	r3, [pc, #688]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d0ed      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002130:	2313      	movs	r3, #19
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d154      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800213a:	4ba6      	ldr	r3, [pc, #664]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4013      	ands	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d019      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	429a      	cmp	r2, r3
 8002154:	d014      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002156:	4b9f      	ldr	r3, [pc, #636]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	4aa0      	ldr	r2, [pc, #640]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800215c:	4013      	ands	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002160:	4b9c      	ldr	r3, [pc, #624]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002164:	4b9b      	ldr	r3, [pc, #620]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	0249      	lsls	r1, r1, #9
 800216a:	430a      	orrs	r2, r1
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216e:	4b99      	ldr	r3, [pc, #612]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002172:	4b98      	ldr	r3, [pc, #608]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	499a      	ldr	r1, [pc, #616]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002176:	400a      	ands	r2, r1
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800217a:	4b96      	ldr	r3, [pc, #600]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	d016      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fef8 	bl	8000f7c <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002190:	e00c      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fef3 	bl	8000f7c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a91      	ldr	r2, [pc, #580]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d904      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021a2:	2313      	movs	r3, #19
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2203      	movs	r2, #3
 80021a8:	701a      	strb	r2, [r3, #0]
            break;
 80021aa:	e004      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ac:	4b89      	ldr	r3, [pc, #548]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0ed      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021b6:	2313      	movs	r3, #19
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c0:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	4a85      	ldr	r2, [pc, #532]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ce:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d4:	e00c      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d6:	2312      	movs	r3, #18
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2213      	movs	r2, #19
 80021dc:	18ba      	adds	r2, r7, r2
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e005      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	2312      	movs	r3, #18
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2213      	movs	r2, #19
 80021ea:	18ba      	adds	r2, r7, r2
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f0:	2311      	movs	r3, #17
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021fe:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	4979      	ldr	r1, [pc, #484]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002202:	400a      	ands	r2, r1
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002210:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	2203      	movs	r2, #3
 8002216:	4393      	bics	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	430a      	orrs	r2, r1
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800222e:	4b69      	ldr	r3, [pc, #420]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002232:	220c      	movs	r2, #12
 8002234:	4393      	bics	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2210      	movs	r2, #16
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224c:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002270:	4a5f      	ldr	r2, [pc, #380]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4b56      	ldr	r3, [pc, #344]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227c:	430a      	orrs	r2, r1
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4013      	ands	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	430a      	orrs	r2, r1
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2220      	movs	r2, #32
 80022a6:	4013      	ands	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022aa:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	01db      	lsls	r3, r3, #7
 80022c6:	4013      	ands	r3, r2
 80022c8:	d015      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ca:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	0899      	lsrs	r1, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	0249      	lsls	r1, r1, #9
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	430a      	orrs	r2, r1
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	039b      	lsls	r3, r3, #14
 800231e:	4013      	ands	r3, r2
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	4a35      	ldr	r2, [pc, #212]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002332:	430a      	orrs	r2, r1
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	03db      	lsls	r3, r3, #15
 800233e:	429a      	cmp	r2, r3
 8002340:	d106      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0449      	lsls	r1, r1, #17
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	03db      	lsls	r3, r3, #15
 8002358:	4013      	ands	r3, r2
 800235a:	d016      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	430a      	orrs	r2, r1
 800236e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	045b      	lsls	r3, r3, #17
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0449      	lsls	r1, r1, #17
 8002386:	430a      	orrs	r2, r1
 8002388:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4013      	ands	r3, r2
 8002394:	d016      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800239c:	4013      	ands	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	01db      	lsls	r3, r3, #7
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d106      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	0249      	lsls	r1, r1, #9
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023c4:	2312      	movs	r3, #18
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	781b      	ldrb	r3, [r3, #0]
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b006      	add	sp, #24
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	fffffcff 	.word	0xfffffcff
 80023e0:	fffeffff 	.word	0xfffeffff
 80023e4:	00001388 	.word	0x00001388
 80023e8:	efffffff 	.word	0xefffffff
 80023ec:	fffff3ff 	.word	0xfffff3ff
 80023f0:	fff3ffff 	.word	0xfff3ffff
 80023f4:	ffcfffff 	.word	0xffcfffff
 80023f8:	ffffcfff 	.word	0xffffcfff
 80023fc:	ffbfffff 	.word	0xffbfffff
 8002400:	feffffff 	.word	0xfeffffff
 8002404:	ffff3fff 	.word	0xffff3fff

08002408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0a8      	b.n	800256c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	2382      	movs	r3, #130	; 0x82
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	429a      	cmp	r2, r3
 800242c:	d009      	beq.n	8002442 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
 8002434:	e005      	b.n	8002442 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	225d      	movs	r2, #93	; 0x5d
 800244c:	5c9b      	ldrb	r3, [r3, r2]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	225c      	movs	r2, #92	; 0x5c
 8002458:	2100      	movs	r1, #0
 800245a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0018      	movs	r0, r3
 8002460:	f7fe fbb8 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	225d      	movs	r2, #93	; 0x5d
 8002468:	2102      	movs	r1, #2
 800246a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2140      	movs	r1, #64	; 0x40
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	23e0      	movs	r3, #224	; 0xe0
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	429a      	cmp	r2, r3
 8002486:	d902      	bls.n	800248e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e002      	b.n	8002494 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	015b      	lsls	r3, r3, #5
 8002492:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	23f0      	movs	r3, #240	; 0xf0
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	429a      	cmp	r2, r3
 800249e:	d008      	beq.n	80024b2 <HAL_SPI_Init+0xaa>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	23e0      	movs	r3, #224	; 0xe0
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	2382      	movs	r3, #130	; 0x82
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	2384      	movs	r3, #132	; 0x84
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	400b      	ands	r3, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2102      	movs	r1, #2
 80024ce:	400b      	ands	r3, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2101      	movs	r1, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6999      	ldr	r1, [r3, #24]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	400b      	ands	r3, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2138      	movs	r1, #56	; 0x38
 80024ee:	400b      	ands	r3, r1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	2180      	movs	r1, #128	; 0x80
 80024f8:	400b      	ands	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	0011      	movs	r1, r2
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	401a      	ands	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	2204      	movs	r2, #4
 8002518:	401a      	ands	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2110      	movs	r1, #16
 8002520:	400b      	ands	r3, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002528:	2108      	movs	r1, #8
 800252a:	400b      	ands	r3, r1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	23f0      	movs	r3, #240	; 0xf0
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	400b      	ands	r3, r1
 8002538:	431a      	orrs	r2, r3
 800253a:	0011      	movs	r1, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	015b      	lsls	r3, r3, #5
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4907      	ldr	r1, [pc, #28]	; (8002574 <HAL_SPI_Init+0x16c>)
 8002558:	400a      	ands	r2, r1
 800255a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	225d      	movs	r2, #93	; 0x5d
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b004      	add	sp, #16
 8002572:	bd80      	pop	{r7, pc}
 8002574:	fffff7ff 	.word	0xfffff7ff

08002578 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	001a      	movs	r2, r3
 8002596:	2301      	movs	r3, #1
 8002598:	4013      	ands	r3, r2
 800259a:	d10f      	bne.n	80025bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2201      	movs	r2, #1
 80025a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025a2:	d00b      	beq.n	80025bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	001a      	movs	r2, r3
 80025aa:	2301      	movs	r3, #1
 80025ac:	4013      	ands	r3, r2
 80025ae:	d005      	beq.n	80025bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	0010      	movs	r0, r2
 80025b8:	4798      	blx	r3
    return;
 80025ba:	e0d5      	b.n	8002768 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	001a      	movs	r2, r3
 80025c2:	2301      	movs	r3, #1
 80025c4:	4013      	ands	r3, r2
 80025c6:	d00b      	beq.n	80025e0 <HAL_SPI_IRQHandler+0x68>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	09db      	lsrs	r3, r3, #7
 80025cc:	001a      	movs	r2, r3
 80025ce:	2301      	movs	r3, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d005      	beq.n	80025e0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	0010      	movs	r0, r2
 80025dc:	4798      	blx	r3
    return;
 80025de:	e0c3      	b.n	8002768 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	001a      	movs	r2, r3
 80025e6:	2301      	movs	r3, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	d10c      	bne.n	8002606 <HAL_SPI_IRQHandler+0x8e>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	099b      	lsrs	r3, r3, #6
 80025f0:	001a      	movs	r2, r3
 80025f2:	2301      	movs	r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d106      	bne.n	8002606 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	001a      	movs	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d100      	bne.n	8002606 <HAL_SPI_IRQHandler+0x8e>
 8002604:	e0b0      	b.n	8002768 <HAL_SPI_IRQHandler+0x1f0>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	001a      	movs	r2, r3
 800260c:	2301      	movs	r3, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d100      	bne.n	8002614 <HAL_SPI_IRQHandler+0x9c>
 8002612:	e0a9      	b.n	8002768 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	001a      	movs	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	4013      	ands	r3, r2
 800261e:	d023      	beq.n	8002668 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	225d      	movs	r2, #93	; 0x5d
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d011      	beq.n	8002650 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002630:	2204      	movs	r2, #4
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	e00b      	b.n	8002668 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
        return;
 8002666:	e07f      	b.n	8002768 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	001a      	movs	r2, r3
 800266e:	2301      	movs	r3, #1
 8002670:	4013      	ands	r3, r2
 8002672:	d014      	beq.n	800269e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	2201      	movs	r2, #1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	438a      	bics	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	001a      	movs	r2, r3
 80026a4:	2301      	movs	r3, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	d00c      	beq.n	80026c4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	2208      	movs	r2, #8
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d04c      	beq.n	8002766 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	21e0      	movs	r1, #224	; 0xe0
 80026d8:	438a      	bics	r2, r1
 80026da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	225d      	movs	r2, #93	; 0x5d
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d103      	bne.n	80026f4 <HAL_SPI_IRQHandler+0x17c>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2201      	movs	r2, #1
 80026f0:	4013      	ands	r3, r2
 80026f2:	d032      	beq.n	800275a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2103      	movs	r1, #3
 8002700:	438a      	bics	r2, r1
 8002702:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_SPI_IRQHandler+0x1f8>)
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002718:	0018      	movs	r0, r3
 800271a:	f7fe fd49 	bl	80011b0 <HAL_DMA_Abort_IT>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d005      	beq.n	800272e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <HAL_SPI_IRQHandler+0x1f8>)
 800273c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	0018      	movs	r0, r3
 8002744:	f7fe fd34 	bl	80011b0 <HAL_DMA_Abort_IT>
 8002748:	1e03      	subs	r3, r0, #0
 800274a:	d00b      	beq.n	8002764 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	2240      	movs	r2, #64	; 0x40
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002758:	e004      	b.n	8002764 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f000 f809 	bl	8002774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002762:	e000      	b.n	8002766 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002764:	46c0      	nop			; (mov r8, r8)
    return;
 8002766:	46c0      	nop			; (mov r8, r8)
  }
}
 8002768:	46bd      	mov	sp, r7
 800276a:	b008      	add	sp, #32
 800276c:	bd80      	pop	{r7, pc}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	08002785 	.word	0x08002785

08002774 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2246      	movs	r2, #70	; 0x46
 8002796:	2100      	movs	r1, #0
 8002798:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ffe6 	bl	8002774 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e04a      	b.n	8002858 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223d      	movs	r2, #61	; 0x3d
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d107      	bne.n	80027de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223c      	movs	r2, #60	; 0x3c
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 f841 	bl	8002860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	223d      	movs	r2, #61	; 0x3d
 80027e2:	2102      	movs	r1, #2
 80027e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	0019      	movs	r1, r3
 80027f0:	0010      	movs	r0, r2
 80027f2:	f000 f9eb 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2248      	movs	r2, #72	; 0x48
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223e      	movs	r2, #62	; 0x3e
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223f      	movs	r2, #63	; 0x3f
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2240      	movs	r2, #64	; 0x40
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2241      	movs	r2, #65	; 0x41
 800281a:	2101      	movs	r1, #1
 800281c:	5499      	strb	r1, [r3, r2]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2242      	movs	r2, #66	; 0x42
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2243      	movs	r2, #67	; 0x43
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2244      	movs	r2, #68	; 0x44
 8002832:	2101      	movs	r1, #1
 8002834:	5499      	strb	r1, [r3, r2]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2245      	movs	r2, #69	; 0x45
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2246      	movs	r2, #70	; 0x46
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2247      	movs	r2, #71	; 0x47
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	223d      	movs	r2, #61	; 0x3d
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	5c9b      	ldrb	r3, [r3, r2]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d001      	beq.n	8002888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e042      	b.n	800290e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	223d      	movs	r2, #61	; 0x3d
 800288c:	2102      	movs	r1, #2
 800288e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2101      	movs	r1, #1
 800289c:	430a      	orrs	r2, r1
 800289e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_TIM_Base_Start_IT+0xa8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00f      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x5a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	05db      	lsls	r3, r3, #23
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d009      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x5a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIM_Base_Start_IT+0xac>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x5a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a16      	ldr	r2, [pc, #88]	; (8002920 <HAL_TIM_Base_Start_IT+0xb0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d116      	bne.n	80028f8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_TIM_Base_Start_IT+0xb4>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b06      	cmp	r3, #6
 80028da:	d016      	beq.n	800290a <HAL_TIM_Base_Start_IT+0x9a>
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	025b      	lsls	r3, r3, #9
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d011      	beq.n	800290a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f6:	e008      	b.n	800290a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2101      	movs	r1, #1
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e000      	b.n	800290c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b004      	add	sp, #16
 8002914:	bd80      	pop	{r7, pc}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400
 8002920:	40014000 	.word	0x40014000
 8002924:	00010007 	.word	0x00010007

08002928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2202      	movs	r2, #2
 8002938:	4013      	ands	r3, r2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d124      	bne.n	8002988 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2202      	movs	r2, #2
 8002946:	4013      	ands	r3, r2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d11d      	bne.n	8002988 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2203      	movs	r2, #3
 8002952:	4252      	negs	r2, r2
 8002954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2203      	movs	r2, #3
 8002964:	4013      	ands	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f916 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002970:	e007      	b.n	8002982 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0018      	movs	r0, r3
 8002976:	f000 f909 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f915 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2204      	movs	r2, #4
 8002990:	4013      	ands	r3, r2
 8002992:	2b04      	cmp	r3, #4
 8002994:	d125      	bne.n	80029e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2204      	movs	r2, #4
 800299e:	4013      	ands	r3, r2
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d11e      	bne.n	80029e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2205      	movs	r2, #5
 80029aa:	4252      	negs	r2, r2
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	23c0      	movs	r3, #192	; 0xc0
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 f8e9 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 80029ca:	e007      	b.n	80029dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f8dc 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f8e8 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2208      	movs	r2, #8
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d124      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2208      	movs	r2, #8
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d11d      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2209      	movs	r2, #9
 8002a04:	4252      	negs	r2, r2
 8002a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2203      	movs	r2, #3
 8002a16:	4013      	ands	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f8bd 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002a22:	e007      	b.n	8002a34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f8b0 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 f8bc 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2210      	movs	r2, #16
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d125      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d11e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2211      	movs	r2, #17
 8002a5c:	4252      	negs	r2, r2
 8002a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2208      	movs	r2, #8
 8002a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	23c0      	movs	r3, #192	; 0xc0
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f890 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e007      	b.n	8002a8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 f883 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 f88f 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4252      	negs	r2, r2
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fe f847 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d10f      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d108      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2281      	movs	r2, #129	; 0x81
 8002ae4:	4252      	negs	r2, r2
 8002ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 f8f6 	bl	8002cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	401a      	ands	r2, r3
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d10e      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b80      	cmp	r3, #128	; 0x80
 8002b10:	d107      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <HAL_TIM_IRQHandler+0x260>)
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f8e5 	bl	8002cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d10f      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d108      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2241      	movs	r2, #65	; 0x41
 8002b44:	4252      	negs	r2, r2
 8002b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f836 	bl	8002bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2220      	movs	r2, #32
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d10f      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d108      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2221      	movs	r2, #33	; 0x21
 8002b72:	4252      	negs	r2, r2
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 f8a7 	bl	8002ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b002      	add	sp, #8
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	fffffeff 	.word	0xfffffeff

08002b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb4:	46c0      	nop			; (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d008      	beq.n	8002bf6 <TIM_Base_SetConfig+0x2a>
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	05db      	lsls	r3, r3, #23
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d003      	beq.n	8002bf6 <TIM_Base_SetConfig+0x2a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d108      	bne.n	8002c08 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2270      	movs	r2, #112	; 0x70
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a29      	ldr	r2, [pc, #164]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d018      	beq.n	8002c42 <TIM_Base_SetConfig+0x76>
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	05db      	lsls	r3, r3, #23
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d013      	beq.n	8002c42 <TIM_Base_SetConfig+0x76>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00f      	beq.n	8002c42 <TIM_Base_SetConfig+0x76>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <TIM_Base_SetConfig+0x76>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <TIM_Base_SetConfig+0x76>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <TIM_Base_SetConfig+0xf4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d003      	beq.n	8002c42 <TIM_Base_SetConfig+0x76>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <TIM_Base_SetConfig+0xf8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d108      	bne.n	8002c54 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a20      	ldr	r2, [pc, #128]	; (8002cc8 <TIM_Base_SetConfig+0xfc>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	4393      	bics	r3, r2
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_Base_SetConfig+0xce>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0xce>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <TIM_Base_SetConfig+0xf4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0xce>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <TIM_Base_SetConfig+0xf8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d103      	bne.n	8002ca2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b004      	add	sp, #16
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40002000 	.word	0x40002000
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	40014400 	.word	0x40014400
 8002cc4:	40014800 	.word	0x40014800
 8002cc8:	fffffcff 	.word	0xfffffcff

08002ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ce4:	46c0      	nop			; (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b002      	add	sp, #8
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e046      	b.n	8002d9c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2288      	movs	r2, #136	; 0x88
 8002d12:	589b      	ldr	r3, [r3, r2]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2284      	movs	r2, #132	; 0x84
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fd ffa8 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2288      	movs	r2, #136	; 0x88
 8002d2c:	2124      	movs	r1, #36	; 0x24
 8002d2e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 fc6c 	bl	8003620 <UART_SetConfig>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e024      	b.n	8002d9c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 ff1d 	bl	8003b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	490d      	ldr	r1, [pc, #52]	; (8002da4 <HAL_UART_Init+0xa8>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	212a      	movs	r1, #42	; 0x2a
 8002d7e:	438a      	bics	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f000 ffb5 	bl	8003d04 <UART_CheckIdleState>
 8002d9a:	0003      	movs	r3, r0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	ffffb7ff 	.word	0xffffb7ff

08002da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	; 0x28
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2288      	movs	r2, #136	; 0x88
 8002dbc:	589b      	ldr	r3, [r3, r2]
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d000      	beq.n	8002dc4 <HAL_UART_Transmit+0x1c>
 8002dc2:	e088      	b.n	8002ed6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_UART_Transmit+0x2a>
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e080      	b.n	8002ed8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d109      	bne.n	8002df6 <HAL_UART_Transmit+0x4e>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	d001      	beq.n	8002df6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e070      	b.n	8002ed8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2290      	movs	r2, #144	; 0x90
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2288      	movs	r2, #136	; 0x88
 8002e02:	2121      	movs	r1, #33	; 0x21
 8002e04:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e06:	f7fe f8b9 	bl	8000f7c <HAL_GetTick>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1dba      	adds	r2, r7, #6
 8002e12:	2154      	movs	r1, #84	; 0x54
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1dba      	adds	r2, r7, #6
 8002e1c:	2156      	movs	r1, #86	; 0x56
 8002e1e:	8812      	ldrh	r2, [r2, #0]
 8002e20:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	015b      	lsls	r3, r3, #5
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d108      	bne.n	8002e40 <HAL_UART_Transmit+0x98>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e003      	b.n	8002e48 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e48:	e02c      	b.n	8002ea4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	0013      	movs	r3, r2
 8002e54:	2200      	movs	r2, #0
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	f000 ffa2 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8002e5c:	1e03      	subs	r3, r0, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e039      	b.n	8002ed8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	001a      	movs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	05d2      	lsls	r2, r2, #23
 8002e76:	0dd2      	lsrs	r2, r2, #23
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	e007      	b.n	8002e92 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2256      	movs	r2, #86	; 0x56
 8002e96:	5a9b      	ldrh	r3, [r3, r2]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b299      	uxth	r1, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2256      	movs	r2, #86	; 0x56
 8002ea2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2256      	movs	r2, #86	; 0x56
 8002ea8:	5a9b      	ldrh	r3, [r3, r2]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1cc      	bne.n	8002e4a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	0013      	movs	r3, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2140      	movs	r1, #64	; 0x40
 8002ebe:	f000 ff6f 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8002ec2:	1e03      	subs	r3, r0, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e006      	b.n	8002ed8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2288      	movs	r2, #136	; 0x88
 8002ece:	2120      	movs	r1, #32
 8002ed0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b008      	add	sp, #32
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	228c      	movs	r2, #140	; 0x8c
 8002ef2:	589b      	ldr	r3, [r3, r2]
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d14a      	bne.n	8002f8e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_UART_Receive_IT+0x26>
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e042      	b.n	8002f90 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	015b      	lsls	r3, r3, #5
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d109      	bne.n	8002f2a <HAL_UART_Receive_IT+0x4a>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e032      	b.n	8002f90 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_UART_Receive_IT+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d020      	beq.n	8002f7c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	4013      	ands	r3, r2
 8002f46:	d019      	beq.n	8002f7c <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f48:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8002f4e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	2301      	movs	r3, #1
 8002f54:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	04c9      	lsls	r1, r1, #19
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 ffd3 	bl	8003f30 <UART_Start_Receive_IT>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	e000      	b.n	8002f90 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b008      	add	sp, #32
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40008000 	.word	0x40008000

08002f9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b0aa      	sub	sp, #168	; 0xa8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	22a4      	movs	r2, #164	; 0xa4
 8002fac:	18b9      	adds	r1, r7, r2
 8002fae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	20a0      	movs	r0, #160	; 0xa0
 8002fb8:	1839      	adds	r1, r7, r0
 8002fba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	249c      	movs	r4, #156	; 0x9c
 8002fc4:	1939      	adds	r1, r7, r4
 8002fc6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fc8:	0011      	movs	r1, r2
 8002fca:	18bb      	adds	r3, r7, r2
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4aa2      	ldr	r2, [pc, #648]	; (8003258 <HAL_UART_IRQHandler+0x2bc>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2298      	movs	r2, #152	; 0x98
 8002fd4:	18bd      	adds	r5, r7, r2
 8002fd6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002fd8:	18bb      	adds	r3, r7, r2
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11a      	bne.n	8003016 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d015      	beq.n	8003016 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fea:	183b      	adds	r3, r7, r0
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d105      	bne.n	8003000 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	055b      	lsls	r3, r3, #21
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00a      	beq.n	8003016 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003004:	2b00      	cmp	r3, #0
 8003006:	d100      	bne.n	800300a <HAL_UART_IRQHandler+0x6e>
 8003008:	e2dc      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	0010      	movs	r0, r2
 8003012:	4798      	blx	r3
      }
      return;
 8003014:	e2d6      	b.n	80035c4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003016:	2398      	movs	r3, #152	; 0x98
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d100      	bne.n	8003022 <HAL_UART_IRQHandler+0x86>
 8003020:	e122      	b.n	8003268 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003022:	239c      	movs	r3, #156	; 0x9c
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a8c      	ldr	r2, [pc, #560]	; (800325c <HAL_UART_IRQHandler+0x2c0>)
 800302a:	4013      	ands	r3, r2
 800302c:	d106      	bne.n	800303c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800302e:	23a0      	movs	r3, #160	; 0xa0
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a8a      	ldr	r2, [pc, #552]	; (8003260 <HAL_UART_IRQHandler+0x2c4>)
 8003036:	4013      	ands	r3, r2
 8003038:	d100      	bne.n	800303c <HAL_UART_IRQHandler+0xa0>
 800303a:	e115      	b.n	8003268 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800303c:	23a4      	movs	r3, #164	; 0xa4
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d012      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
 8003048:	23a0      	movs	r3, #160	; 0xa0
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4013      	ands	r3, r2
 8003054:	d00b      	beq.n	800306e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2290      	movs	r2, #144	; 0x90
 8003062:	589b      	ldr	r3, [r3, r2]
 8003064:	2201      	movs	r2, #1
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2190      	movs	r1, #144	; 0x90
 800306c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800306e:	23a4      	movs	r3, #164	; 0xa4
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d011      	beq.n	800309e <HAL_UART_IRQHandler+0x102>
 800307a:	239c      	movs	r3, #156	; 0x9c
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	d00b      	beq.n	800309e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2202      	movs	r2, #2
 800308c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2290      	movs	r2, #144	; 0x90
 8003092:	589b      	ldr	r3, [r3, r2]
 8003094:	2204      	movs	r2, #4
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2190      	movs	r1, #144	; 0x90
 800309c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800309e:	23a4      	movs	r3, #164	; 0xa4
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2204      	movs	r2, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	d011      	beq.n	80030ce <HAL_UART_IRQHandler+0x132>
 80030aa:	239c      	movs	r3, #156	; 0x9c
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	d00b      	beq.n	80030ce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2290      	movs	r2, #144	; 0x90
 80030c2:	589b      	ldr	r3, [r3, r2]
 80030c4:	2202      	movs	r2, #2
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2190      	movs	r1, #144	; 0x90
 80030cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030ce:	23a4      	movs	r3, #164	; 0xa4
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2208      	movs	r2, #8
 80030d6:	4013      	ands	r3, r2
 80030d8:	d017      	beq.n	800310a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030da:	23a0      	movs	r3, #160	; 0xa0
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2220      	movs	r2, #32
 80030e2:	4013      	ands	r3, r2
 80030e4:	d105      	bne.n	80030f2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030e6:	239c      	movs	r3, #156	; 0x9c
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5b      	ldr	r2, [pc, #364]	; (800325c <HAL_UART_IRQHandler+0x2c0>)
 80030ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030f0:	d00b      	beq.n	800310a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2208      	movs	r2, #8
 80030f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2290      	movs	r2, #144	; 0x90
 80030fe:	589b      	ldr	r3, [r3, r2]
 8003100:	2208      	movs	r2, #8
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2190      	movs	r1, #144	; 0x90
 8003108:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800310a:	23a4      	movs	r3, #164	; 0xa4
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	4013      	ands	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_UART_IRQHandler+0x1a4>
 8003118:	23a0      	movs	r3, #160	; 0xa0
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	04db      	lsls	r3, r3, #19
 8003122:	4013      	ands	r3, r2
 8003124:	d00c      	beq.n	8003140 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2290      	movs	r2, #144	; 0x90
 8003134:	589b      	ldr	r3, [r3, r2]
 8003136:	2220      	movs	r2, #32
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2190      	movs	r1, #144	; 0x90
 800313e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2290      	movs	r2, #144	; 0x90
 8003144:	589b      	ldr	r3, [r3, r2]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d100      	bne.n	800314c <HAL_UART_IRQHandler+0x1b0>
 800314a:	e23d      	b.n	80035c8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800314c:	23a4      	movs	r3, #164	; 0xa4
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2220      	movs	r2, #32
 8003154:	4013      	ands	r3, r2
 8003156:	d015      	beq.n	8003184 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003158:	23a0      	movs	r3, #160	; 0xa0
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2220      	movs	r2, #32
 8003160:	4013      	ands	r3, r2
 8003162:	d106      	bne.n	8003172 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003164:	239c      	movs	r3, #156	; 0x9c
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	055b      	lsls	r3, r3, #21
 800316e:	4013      	ands	r3, r2
 8003170:	d008      	beq.n	8003184 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	0010      	movs	r0, r2
 8003182:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2290      	movs	r2, #144	; 0x90
 8003188:	589b      	ldr	r3, [r3, r2]
 800318a:	2194      	movs	r1, #148	; 0x94
 800318c:	187a      	adds	r2, r7, r1
 800318e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	4013      	ands	r3, r2
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d004      	beq.n	80031a8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2228      	movs	r2, #40	; 0x28
 80031a4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031a6:	d04c      	beq.n	8003242 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 ffe4 	bl	8004178 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b40      	cmp	r3, #64	; 0x40
 80031bc:	d13c      	bne.n	8003238 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031be:	f3ef 8310 	mrs	r3, PRIMASK
 80031c2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c6:	2090      	movs	r0, #144	; 0x90
 80031c8:	183a      	adds	r2, r7, r0
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	2301      	movs	r3, #1
 80031ce:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031d2:	f383 8810 	msr	PRIMASK, r3
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2140      	movs	r1, #64	; 0x40
 80031e4:	438a      	bics	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	183b      	adds	r3, r7, r0
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	589b      	ldr	r3, [r3, r2]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d016      	beq.n	800322e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	589b      	ldr	r3, [r3, r2]
 8003206:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_UART_IRQHandler+0x2c8>)
 8003208:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd ffcd 	bl	80011b0 <HAL_DMA_Abort_IT>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d01c      	beq.n	8003254 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2280      	movs	r2, #128	; 0x80
 800321e:	589b      	ldr	r3, [r3, r2]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	5852      	ldr	r2, [r2, r1]
 8003228:	0010      	movs	r0, r2
 800322a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322c:	e012      	b.n	8003254 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 f9e1 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003236:	e00d      	b.n	8003254 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 f9dc 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e008      	b.n	8003254 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0018      	movs	r0, r3
 8003246:	f000 f9d7 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2290      	movs	r2, #144	; 0x90
 800324e:	2100      	movs	r1, #0
 8003250:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003252:	e1b9      	b.n	80035c8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	46c0      	nop			; (mov r8, r8)
    return;
 8003256:	e1b7      	b.n	80035c8 <HAL_UART_IRQHandler+0x62c>
 8003258:	0000080f 	.word	0x0000080f
 800325c:	10000001 	.word	0x10000001
 8003260:	04000120 	.word	0x04000120
 8003264:	08004245 	.word	0x08004245

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d000      	beq.n	8003272 <HAL_UART_IRQHandler+0x2d6>
 8003270:	e13e      	b.n	80034f0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003272:	23a4      	movs	r3, #164	; 0xa4
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d100      	bne.n	8003280 <HAL_UART_IRQHandler+0x2e4>
 800327e:	e137      	b.n	80034f0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2210      	movs	r2, #16
 8003288:	4013      	ands	r3, r2
 800328a:	d100      	bne.n	800328e <HAL_UART_IRQHandler+0x2f2>
 800328c:	e130      	b.n	80034f0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	4013      	ands	r3, r2
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d000      	beq.n	80032a6 <HAL_UART_IRQHandler+0x30a>
 80032a4:	e0a4      	b.n	80033f0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	589b      	ldr	r3, [r3, r2]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	217e      	movs	r1, #126	; 0x7e
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d100      	bne.n	80032c0 <HAL_UART_IRQHandler+0x324>
 80032be:	e185      	b.n	80035cc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	225c      	movs	r2, #92	; 0x5c
 80032c4:	5a9b      	ldrh	r3, [r3, r2]
 80032c6:	187a      	adds	r2, r7, r1
 80032c8:	8812      	ldrh	r2, [r2, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d300      	bcc.n	80032d0 <HAL_UART_IRQHandler+0x334>
 80032ce:	e17d      	b.n	80035cc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	187a      	adds	r2, r7, r1
 80032d4:	215e      	movs	r1, #94	; 0x5e
 80032d6:	8812      	ldrh	r2, [r2, #0]
 80032d8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	589b      	ldr	r3, [r3, r2]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2220      	movs	r2, #32
 80032e6:	4013      	ands	r3, r2
 80032e8:	d170      	bne.n	80033cc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ea:	f3ef 8310 	mrs	r3, PRIMASK
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80032f4:	2301      	movs	r3, #1
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	f383 8810 	msr	PRIMASK, r3
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	49b4      	ldr	r1, [pc, #720]	; (80035dc <HAL_UART_IRQHandler+0x640>)
 800330c:	400a      	ands	r2, r1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331c:	f3ef 8310 	mrs	r3, PRIMASK
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003324:	677b      	str	r3, [r7, #116]	; 0x74
 8003326:	2301      	movs	r3, #1
 8003328:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2101      	movs	r1, #1
 800333e:	438a      	bics	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003348:	f383 8810 	msr	PRIMASK, r3
}
 800334c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334e:	f3ef 8310 	mrs	r3, PRIMASK
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003354:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003356:	673b      	str	r3, [r7, #112]	; 0x70
 8003358:	2301      	movs	r3, #1
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	438a      	bics	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003376:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	228c      	movs	r2, #140	; 0x8c
 8003384:	2120      	movs	r1, #32
 8003386:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338e:	f3ef 8310 	mrs	r3, PRIMASK
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003394:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003398:	2301      	movs	r3, #1
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2110      	movs	r1, #16
 80033b0:	438a      	bics	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	f383 8810 	msr	PRIMASK, r3
}
 80033be:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	589b      	ldr	r3, [r3, r2]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7fd fe90 	bl	80010ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	225c      	movs	r2, #92	; 0x5c
 80033d6:	5a9a      	ldrh	r2, [r3, r2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	215e      	movs	r1, #94	; 0x5e
 80033dc:	5a5b      	ldrh	r3, [r3, r1]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0011      	movs	r1, r2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 f90d 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ee:	e0ed      	b.n	80035cc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	225c      	movs	r2, #92	; 0x5c
 80033f4:	5a99      	ldrh	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	225e      	movs	r2, #94	; 0x5e
 80033fa:	5a9b      	ldrh	r3, [r3, r2]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	208e      	movs	r0, #142	; 0x8e
 8003400:	183b      	adds	r3, r7, r0
 8003402:	1a8a      	subs	r2, r1, r2
 8003404:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	225e      	movs	r2, #94	; 0x5e
 800340a:	5a9b      	ldrh	r3, [r3, r2]
 800340c:	b29b      	uxth	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d100      	bne.n	8003414 <HAL_UART_IRQHandler+0x478>
 8003412:	e0dd      	b.n	80035d0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003414:	183b      	adds	r3, r7, r0
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <HAL_UART_IRQHandler+0x482>
 800341c:	e0d8      	b.n	80035d0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341e:	f3ef 8310 	mrs	r3, PRIMASK
 8003422:	60fb      	str	r3, [r7, #12]
  return(result);
 8003424:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003426:	2488      	movs	r4, #136	; 0x88
 8003428:	193a      	adds	r2, r7, r4
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	2301      	movs	r3, #1
 800342e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4967      	ldr	r1, [pc, #412]	; (80035e0 <HAL_UART_IRQHandler+0x644>)
 8003444:	400a      	ands	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	193b      	adds	r3, r7, r4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003456:	f3ef 8310 	mrs	r3, PRIMASK
 800345a:	61bb      	str	r3, [r7, #24]
  return(result);
 800345c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800345e:	2484      	movs	r4, #132	; 0x84
 8003460:	193a      	adds	r2, r7, r4
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	2301      	movs	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	495a      	ldr	r1, [pc, #360]	; (80035e4 <HAL_UART_IRQHandler+0x648>)
 800347c:	400a      	ands	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	193b      	adds	r3, r7, r4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	228c      	movs	r2, #140	; 0x8c
 8003492:	2120      	movs	r1, #32
 8003494:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a2:	f3ef 8310 	mrs	r3, PRIMASK
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034aa:	2480      	movs	r4, #128	; 0x80
 80034ac:	193a      	adds	r2, r7, r4
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	2301      	movs	r3, #1
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2110      	movs	r1, #16
 80034c8:	438a      	bics	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e0:	183b      	adds	r3, r7, r0
 80034e2:	881a      	ldrh	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0011      	movs	r1, r2
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 f88d 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ee:	e06f      	b.n	80035d0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034f0:	23a4      	movs	r3, #164	; 0xa4
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	035b      	lsls	r3, r3, #13
 80034fa:	4013      	ands	r3, r2
 80034fc:	d010      	beq.n	8003520 <HAL_UART_IRQHandler+0x584>
 80034fe:	239c      	movs	r3, #156	; 0x9c
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	03db      	lsls	r3, r3, #15
 8003508:	4013      	ands	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0352      	lsls	r2, r2, #13
 8003514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f001 fb37 	bl	8004b8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800351e:	e05a      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003520:	23a4      	movs	r3, #164	; 0xa4
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	4013      	ands	r3, r2
 800352a:	d016      	beq.n	800355a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800352c:	23a0      	movs	r3, #160	; 0xa0
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	4013      	ands	r3, r2
 8003536:	d106      	bne.n	8003546 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003538:	239c      	movs	r3, #156	; 0x9c
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	4013      	ands	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	2b00      	cmp	r3, #0
 800354c:	d042      	beq.n	80035d4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	0010      	movs	r0, r2
 8003556:	4798      	blx	r3
    }
    return;
 8003558:	e03c      	b.n	80035d4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800355a:	23a4      	movs	r3, #164	; 0xa4
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	4013      	ands	r3, r2
 8003564:	d00a      	beq.n	800357c <HAL_UART_IRQHandler+0x5e0>
 8003566:	23a0      	movs	r3, #160	; 0xa0
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	4013      	ands	r3, r2
 8003570:	d004      	beq.n	800357c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 fe7c 	bl	8004272 <UART_EndTransmit_IT>
    return;
 800357a:	e02c      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800357c:	23a4      	movs	r3, #164	; 0xa4
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	4013      	ands	r3, r2
 8003588:	d00b      	beq.n	80035a2 <HAL_UART_IRQHandler+0x606>
 800358a:	23a0      	movs	r3, #160	; 0xa0
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	05db      	lsls	r3, r3, #23
 8003594:	4013      	ands	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0018      	movs	r0, r3
 800359c:	f001 fb06 	bl	8004bac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a0:	e019      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035a2:	23a4      	movs	r3, #164	; 0xa4
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	045b      	lsls	r3, r3, #17
 80035ac:	4013      	ands	r3, r2
 80035ae:	d012      	beq.n	80035d6 <HAL_UART_IRQHandler+0x63a>
 80035b0:	23a0      	movs	r3, #160	; 0xa0
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da0d      	bge.n	80035d6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f001 faed 	bl	8004b9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035c2:	e008      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	e006      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
    return;
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	e004      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	e002      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	e000      	b.n	80035d6 <HAL_UART_IRQHandler+0x63a>
    return;
 80035d4:	46c0      	nop			; (mov r8, r8)
  }
}
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b02a      	add	sp, #168	; 0xa8
 80035da:	bdb0      	pop	{r4, r5, r7, pc}
 80035dc:	fffffeff 	.word	0xfffffeff
 80035e0:	fffffedf 	.word	0xfffffedf
 80035e4:	effffffe 	.word	0xeffffffe

080035e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	000a      	movs	r2, r1
 8003612:	1cbb      	adds	r3, r7, #2
 8003614:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b090      	sub	sp, #64	; 0x40
 8003624:	af00      	add	r7, sp, #0
 8003626:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003628:	231a      	movs	r3, #26
 800362a:	2220      	movs	r2, #32
 800362c:	189b      	adds	r3, r3, r2
 800362e:	19db      	adds	r3, r3, r7
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4313      	orrs	r3, r2
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4aaf      	ldr	r2, [pc, #700]	; (8003910 <UART_SetConfig+0x2f0>)
 8003654:	4013      	ands	r3, r2
 8003656:	0019      	movs	r1, r3
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	430b      	orrs	r3, r1
 8003660:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4aaa      	ldr	r2, [pc, #680]	; (8003914 <UART_SetConfig+0x2f4>)
 800366a:	4013      	ands	r3, r2
 800366c:	0018      	movs	r0, r3
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	68d9      	ldr	r1, [r3, #12]
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	0003      	movs	r3, r0
 8003678:	430b      	orrs	r3, r1
 800367a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4aa4      	ldr	r2, [pc, #656]	; (8003918 <UART_SetConfig+0x2f8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003692:	4313      	orrs	r3, r2
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a9f      	ldr	r2, [pc, #636]	; (800391c <UART_SetConfig+0x2fc>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	220f      	movs	r2, #15
 80036b4:	4393      	bics	r3, r2
 80036b6:	0018      	movs	r0, r3
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	0003      	movs	r3, r0
 80036c2:	430b      	orrs	r3, r1
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a95      	ldr	r2, [pc, #596]	; (8003920 <UART_SetConfig+0x300>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d131      	bne.n	8003734 <UART_SetConfig+0x114>
 80036d0:	4b94      	ldr	r3, [pc, #592]	; (8003924 <UART_SetConfig+0x304>)
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	2203      	movs	r2, #3
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d01d      	beq.n	8003718 <UART_SetConfig+0xf8>
 80036dc:	d823      	bhi.n	8003726 <UART_SetConfig+0x106>
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d00c      	beq.n	80036fc <UART_SetConfig+0xdc>
 80036e2:	d820      	bhi.n	8003726 <UART_SetConfig+0x106>
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <UART_SetConfig+0xce>
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d00e      	beq.n	800370a <UART_SetConfig+0xea>
 80036ec:	e01b      	b.n	8003726 <UART_SetConfig+0x106>
 80036ee:	231b      	movs	r3, #27
 80036f0:	2220      	movs	r2, #32
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e0b4      	b.n	8003866 <UART_SetConfig+0x246>
 80036fc:	231b      	movs	r3, #27
 80036fe:	2220      	movs	r2, #32
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	2202      	movs	r2, #2
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	e0ad      	b.n	8003866 <UART_SetConfig+0x246>
 800370a:	231b      	movs	r3, #27
 800370c:	2220      	movs	r2, #32
 800370e:	189b      	adds	r3, r3, r2
 8003710:	19db      	adds	r3, r3, r7
 8003712:	2204      	movs	r2, #4
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e0a6      	b.n	8003866 <UART_SetConfig+0x246>
 8003718:	231b      	movs	r3, #27
 800371a:	2220      	movs	r2, #32
 800371c:	189b      	adds	r3, r3, r2
 800371e:	19db      	adds	r3, r3, r7
 8003720:	2208      	movs	r2, #8
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e09f      	b.n	8003866 <UART_SetConfig+0x246>
 8003726:	231b      	movs	r3, #27
 8003728:	2220      	movs	r2, #32
 800372a:	189b      	adds	r3, r3, r2
 800372c:	19db      	adds	r3, r3, r7
 800372e:	2210      	movs	r2, #16
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e098      	b.n	8003866 <UART_SetConfig+0x246>
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7b      	ldr	r2, [pc, #492]	; (8003928 <UART_SetConfig+0x308>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d131      	bne.n	80037a2 <UART_SetConfig+0x182>
 800373e:	4b79      	ldr	r3, [pc, #484]	; (8003924 <UART_SetConfig+0x304>)
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	220c      	movs	r2, #12
 8003744:	4013      	ands	r3, r2
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d01d      	beq.n	8003786 <UART_SetConfig+0x166>
 800374a:	d823      	bhi.n	8003794 <UART_SetConfig+0x174>
 800374c:	2b08      	cmp	r3, #8
 800374e:	d00c      	beq.n	800376a <UART_SetConfig+0x14a>
 8003750:	d820      	bhi.n	8003794 <UART_SetConfig+0x174>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <UART_SetConfig+0x13c>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d00e      	beq.n	8003778 <UART_SetConfig+0x158>
 800375a:	e01b      	b.n	8003794 <UART_SetConfig+0x174>
 800375c:	231b      	movs	r3, #27
 800375e:	2220      	movs	r2, #32
 8003760:	189b      	adds	r3, r3, r2
 8003762:	19db      	adds	r3, r3, r7
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e07d      	b.n	8003866 <UART_SetConfig+0x246>
 800376a:	231b      	movs	r3, #27
 800376c:	2220      	movs	r2, #32
 800376e:	189b      	adds	r3, r3, r2
 8003770:	19db      	adds	r3, r3, r7
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e076      	b.n	8003866 <UART_SetConfig+0x246>
 8003778:	231b      	movs	r3, #27
 800377a:	2220      	movs	r2, #32
 800377c:	189b      	adds	r3, r3, r2
 800377e:	19db      	adds	r3, r3, r7
 8003780:	2204      	movs	r2, #4
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e06f      	b.n	8003866 <UART_SetConfig+0x246>
 8003786:	231b      	movs	r3, #27
 8003788:	2220      	movs	r2, #32
 800378a:	189b      	adds	r3, r3, r2
 800378c:	19db      	adds	r3, r3, r7
 800378e:	2208      	movs	r2, #8
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e068      	b.n	8003866 <UART_SetConfig+0x246>
 8003794:	231b      	movs	r3, #27
 8003796:	2220      	movs	r2, #32
 8003798:	189b      	adds	r3, r3, r2
 800379a:	19db      	adds	r3, r3, r7
 800379c:	2210      	movs	r2, #16
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e061      	b.n	8003866 <UART_SetConfig+0x246>
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a61      	ldr	r2, [pc, #388]	; (800392c <UART_SetConfig+0x30c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d106      	bne.n	80037ba <UART_SetConfig+0x19a>
 80037ac:	231b      	movs	r3, #27
 80037ae:	2220      	movs	r2, #32
 80037b0:	189b      	adds	r3, r3, r2
 80037b2:	19db      	adds	r3, r3, r7
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e055      	b.n	8003866 <UART_SetConfig+0x246>
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <UART_SetConfig+0x310>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d106      	bne.n	80037d2 <UART_SetConfig+0x1b2>
 80037c4:	231b      	movs	r3, #27
 80037c6:	2220      	movs	r2, #32
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e049      	b.n	8003866 <UART_SetConfig+0x246>
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a50      	ldr	r2, [pc, #320]	; (8003918 <UART_SetConfig+0x2f8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d13e      	bne.n	800385a <UART_SetConfig+0x23a>
 80037dc:	4b51      	ldr	r3, [pc, #324]	; (8003924 <UART_SetConfig+0x304>)
 80037de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037e0:	23c0      	movs	r3, #192	; 0xc0
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4013      	ands	r3, r2
 80037e6:	22c0      	movs	r2, #192	; 0xc0
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <UART_SetConfig+0x21e>
 80037ee:	22c0      	movs	r2, #192	; 0xc0
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d82a      	bhi.n	800384c <UART_SetConfig+0x22c>
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d011      	beq.n	8003822 <UART_SetConfig+0x202>
 80037fe:	2280      	movs	r2, #128	; 0x80
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	4293      	cmp	r3, r2
 8003804:	d822      	bhi.n	800384c <UART_SetConfig+0x22c>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <UART_SetConfig+0x1f4>
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	00d2      	lsls	r2, r2, #3
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <UART_SetConfig+0x210>
 8003812:	e01b      	b.n	800384c <UART_SetConfig+0x22c>
 8003814:	231b      	movs	r3, #27
 8003816:	2220      	movs	r2, #32
 8003818:	189b      	adds	r3, r3, r2
 800381a:	19db      	adds	r3, r3, r7
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e021      	b.n	8003866 <UART_SetConfig+0x246>
 8003822:	231b      	movs	r3, #27
 8003824:	2220      	movs	r2, #32
 8003826:	189b      	adds	r3, r3, r2
 8003828:	19db      	adds	r3, r3, r7
 800382a:	2202      	movs	r2, #2
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e01a      	b.n	8003866 <UART_SetConfig+0x246>
 8003830:	231b      	movs	r3, #27
 8003832:	2220      	movs	r2, #32
 8003834:	189b      	adds	r3, r3, r2
 8003836:	19db      	adds	r3, r3, r7
 8003838:	2204      	movs	r2, #4
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e013      	b.n	8003866 <UART_SetConfig+0x246>
 800383e:	231b      	movs	r3, #27
 8003840:	2220      	movs	r2, #32
 8003842:	189b      	adds	r3, r3, r2
 8003844:	19db      	adds	r3, r3, r7
 8003846:	2208      	movs	r2, #8
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e00c      	b.n	8003866 <UART_SetConfig+0x246>
 800384c:	231b      	movs	r3, #27
 800384e:	2220      	movs	r2, #32
 8003850:	189b      	adds	r3, r3, r2
 8003852:	19db      	adds	r3, r3, r7
 8003854:	2210      	movs	r2, #16
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e005      	b.n	8003866 <UART_SetConfig+0x246>
 800385a:	231b      	movs	r3, #27
 800385c:	2220      	movs	r2, #32
 800385e:	189b      	adds	r3, r3, r2
 8003860:	19db      	adds	r3, r3, r7
 8003862:	2210      	movs	r2, #16
 8003864:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <UART_SetConfig+0x2f8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d000      	beq.n	8003872 <UART_SetConfig+0x252>
 8003870:	e0a9      	b.n	80039c6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003872:	231b      	movs	r3, #27
 8003874:	2220      	movs	r2, #32
 8003876:	189b      	adds	r3, r3, r2
 8003878:	19db      	adds	r3, r3, r7
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d015      	beq.n	80038ac <UART_SetConfig+0x28c>
 8003880:	dc18      	bgt.n	80038b4 <UART_SetConfig+0x294>
 8003882:	2b04      	cmp	r3, #4
 8003884:	d00d      	beq.n	80038a2 <UART_SetConfig+0x282>
 8003886:	dc15      	bgt.n	80038b4 <UART_SetConfig+0x294>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <UART_SetConfig+0x272>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d005      	beq.n	800389c <UART_SetConfig+0x27c>
 8003890:	e010      	b.n	80038b4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003892:	f7fe fbc1 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8003896:	0003      	movs	r3, r0
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800389a:	e014      	b.n	80038c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <UART_SetConfig+0x314>)
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038a0:	e011      	b.n	80038c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038a2:	f7fe fb2d 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 80038a6:	0003      	movs	r3, r0
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038aa:	e00c      	b.n	80038c6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038b2:	e008      	b.n	80038c6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038b8:	231a      	movs	r3, #26
 80038ba:	2220      	movs	r2, #32
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	19db      	adds	r3, r3, r7
 80038c0:	2201      	movs	r2, #1
 80038c2:	701a      	strb	r2, [r3, #0]
        break;
 80038c4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d100      	bne.n	80038ce <UART_SetConfig+0x2ae>
 80038cc:	e14b      	b.n	8003b66 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <UART_SetConfig+0x318>)
 80038d4:	0052      	lsls	r2, r2, #1
 80038d6:	5ad3      	ldrh	r3, [r2, r3]
 80038d8:	0019      	movs	r1, r3
 80038da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038dc:	f7fc fc14 	bl	8000108 <__udivsi3>
 80038e0:	0003      	movs	r3, r0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	0013      	movs	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	189b      	adds	r3, r3, r2
 80038ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d305      	bcc.n	8003900 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d91d      	bls.n	800393c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003900:	231a      	movs	r3, #26
 8003902:	2220      	movs	r2, #32
 8003904:	189b      	adds	r3, r3, r2
 8003906:	19db      	adds	r3, r3, r7
 8003908:	2201      	movs	r2, #1
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e12b      	b.n	8003b66 <UART_SetConfig+0x546>
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	cfff69f3 	.word	0xcfff69f3
 8003914:	ffffcfff 	.word	0xffffcfff
 8003918:	40008000 	.word	0x40008000
 800391c:	11fff4ff 	.word	0x11fff4ff
 8003920:	40013800 	.word	0x40013800
 8003924:	40021000 	.word	0x40021000
 8003928:	40004400 	.word	0x40004400
 800392c:	40004800 	.word	0x40004800
 8003930:	40004c00 	.word	0x40004c00
 8003934:	00f42400 	.word	0x00f42400
 8003938:	08007c94 	.word	0x08007c94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003948:	4b92      	ldr	r3, [pc, #584]	; (8003b94 <UART_SetConfig+0x574>)
 800394a:	0052      	lsls	r2, r2, #1
 800394c:	5ad3      	ldrh	r3, [r2, r3]
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	69b8      	ldr	r0, [r7, #24]
 800395a:	69f9      	ldr	r1, [r7, #28]
 800395c:	f7fc fd4a 	bl	80003f4 <__aeabi_uldivmod>
 8003960:	0002      	movs	r2, r0
 8003962:	000b      	movs	r3, r1
 8003964:	0e11      	lsrs	r1, r2, #24
 8003966:	021d      	lsls	r5, r3, #8
 8003968:	430d      	orrs	r5, r1
 800396a:	0214      	lsls	r4, r2, #8
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	68f9      	ldr	r1, [r7, #12]
 800397c:	1900      	adds	r0, r0, r4
 800397e:	4169      	adcs	r1, r5
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f7fc fd31 	bl	80003f4 <__aeabi_uldivmod>
 8003992:	0002      	movs	r2, r0
 8003994:	000b      	movs	r3, r1
 8003996:	0013      	movs	r3, r2
 8003998:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800399a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399c:	23c0      	movs	r3, #192	; 0xc0
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d309      	bcc.n	80039b8 <UART_SetConfig+0x398>
 80039a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	035b      	lsls	r3, r3, #13
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d204      	bcs.n	80039b8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e0d6      	b.n	8003b66 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80039b8:	231a      	movs	r3, #26
 80039ba:	2220      	movs	r2, #32
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	19db      	adds	r3, r3, r7
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e0cf      	b.n	8003b66 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d000      	beq.n	80039d4 <UART_SetConfig+0x3b4>
 80039d2:	e070      	b.n	8003ab6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80039d4:	231b      	movs	r3, #27
 80039d6:	2220      	movs	r2, #32
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	19db      	adds	r3, r3, r7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d015      	beq.n	8003a0e <UART_SetConfig+0x3ee>
 80039e2:	dc18      	bgt.n	8003a16 <UART_SetConfig+0x3f6>
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00d      	beq.n	8003a04 <UART_SetConfig+0x3e4>
 80039e8:	dc15      	bgt.n	8003a16 <UART_SetConfig+0x3f6>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <UART_SetConfig+0x3d4>
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d005      	beq.n	80039fe <UART_SetConfig+0x3de>
 80039f2:	e010      	b.n	8003a16 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7fe fb10 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80039f8:	0003      	movs	r3, r0
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80039fc:	e014      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fe:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <UART_SetConfig+0x578>)
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a02:	e011      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a04:	f7fe fa7c 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a0c:	e00c      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a14:	e008      	b.n	8003a28 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003a1a:	231a      	movs	r3, #26
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	19db      	adds	r3, r3, r7
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
        break;
 8003a26:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d100      	bne.n	8003a30 <UART_SetConfig+0x410>
 8003a2e:	e09a      	b.n	8003b66 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a34:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <UART_SetConfig+0x574>)
 8003a36:	0052      	lsls	r2, r2, #1
 8003a38:	5ad3      	ldrh	r3, [r2, r3]
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a3e:	f7fc fb63 	bl	8000108 <__udivsi3>
 8003a42:	0003      	movs	r3, r0
 8003a44:	005a      	lsls	r2, r3, #1
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	18d2      	adds	r2, r2, r3
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	0019      	movs	r1, r3
 8003a54:	0010      	movs	r0, r2
 8003a56:	f7fc fb57 	bl	8000108 <__udivsi3>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d921      	bls.n	8003aa8 <UART_SetConfig+0x488>
 8003a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	025b      	lsls	r3, r3, #9
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d21c      	bcs.n	8003aa8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	200e      	movs	r0, #14
 8003a74:	2420      	movs	r4, #32
 8003a76:	1903      	adds	r3, r0, r4
 8003a78:	19db      	adds	r3, r3, r7
 8003a7a:	210f      	movs	r1, #15
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2207      	movs	r2, #7
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b299      	uxth	r1, r3
 8003a8c:	1903      	adds	r3, r0, r4
 8003a8e:	19db      	adds	r3, r3, r7
 8003a90:	1902      	adds	r2, r0, r4
 8003a92:	19d2      	adds	r2, r2, r7
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	1902      	adds	r2, r0, r4
 8003aa0:	19d2      	adds	r2, r2, r7
 8003aa2:	8812      	ldrh	r2, [r2, #0]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e05e      	b.n	8003b66 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa8:	231a      	movs	r3, #26
 8003aaa:	2220      	movs	r2, #32
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	19db      	adds	r3, r3, r7
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e057      	b.n	8003b66 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ab6:	231b      	movs	r3, #27
 8003ab8:	2220      	movs	r2, #32
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d015      	beq.n	8003af0 <UART_SetConfig+0x4d0>
 8003ac4:	dc18      	bgt.n	8003af8 <UART_SetConfig+0x4d8>
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d00d      	beq.n	8003ae6 <UART_SetConfig+0x4c6>
 8003aca:	dc15      	bgt.n	8003af8 <UART_SetConfig+0x4d8>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <UART_SetConfig+0x4b6>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d005      	beq.n	8003ae0 <UART_SetConfig+0x4c0>
 8003ad4:	e010      	b.n	8003af8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad6:	f7fe fa9f 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 8003ada:	0003      	movs	r3, r0
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ade:	e014      	b.n	8003b0a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <UART_SetConfig+0x578>)
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ae4:	e011      	b.n	8003b0a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae6:	f7fe fa0b 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8003aea:	0003      	movs	r3, r0
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003aee:	e00c      	b.n	8003b0a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003af6:	e008      	b.n	8003b0a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003afc:	231a      	movs	r3, #26
 8003afe:	2220      	movs	r2, #32
 8003b00:	189b      	adds	r3, r3, r2
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
        break;
 8003b08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d02a      	beq.n	8003b66 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b14:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <UART_SetConfig+0x574>)
 8003b16:	0052      	lsls	r2, r2, #1
 8003b18:	5ad3      	ldrh	r3, [r2, r3]
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b1e:	f7fc faf3 	bl	8000108 <__udivsi3>
 8003b22:	0003      	movs	r3, r0
 8003b24:	001a      	movs	r2, r3
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	18d2      	adds	r2, r2, r3
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0019      	movs	r1, r3
 8003b34:	0010      	movs	r0, r2
 8003b36:	f7fc fae7 	bl	8000108 <__udivsi3>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d90a      	bls.n	8003b5a <UART_SetConfig+0x53a>
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	025b      	lsls	r3, r3, #9
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d205      	bcs.n	8003b5a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60da      	str	r2, [r3, #12]
 8003b58:	e005      	b.n	8003b66 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5a:	231a      	movs	r3, #26
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	19db      	adds	r3, r3, r7
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	226a      	movs	r2, #106	; 0x6a
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2268      	movs	r2, #104	; 0x68
 8003b72:	2101      	movs	r1, #1
 8003b74:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2200      	movs	r2, #0
 8003b7a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	2200      	movs	r2, #0
 8003b80:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b82:	231a      	movs	r3, #26
 8003b84:	2220      	movs	r2, #32
 8003b86:	189b      	adds	r3, r3, r2
 8003b88:	19db      	adds	r3, r3, r7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b010      	add	sp, #64	; 0x40
 8003b92:	bdb0      	pop	{r4, r5, r7, pc}
 8003b94:	08007c94 	.word	0x08007c94
 8003b98:	00f42400 	.word	0x00f42400

08003b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4013      	ands	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <UART_AdvFeatureConfig+0x144>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2202      	movs	r2, #2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4a43      	ldr	r2, [pc, #268]	; (8003ce4 <UART_AdvFeatureConfig+0x148>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	0019      	movs	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	2204      	movs	r2, #4
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a3b      	ldr	r2, [pc, #236]	; (8003ce8 <UART_AdvFeatureConfig+0x14c>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	2208      	movs	r2, #8
 8003c10:	4013      	ands	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a34      	ldr	r2, [pc, #208]	; (8003cec <UART_AdvFeatureConfig+0x150>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	2210      	movs	r2, #16
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <UART_AdvFeatureConfig+0x154>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2220      	movs	r2, #32
 8003c54:	4013      	ands	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4a25      	ldr	r2, [pc, #148]	; (8003cf4 <UART_AdvFeatureConfig+0x158>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	2240      	movs	r2, #64	; 0x40
 8003c76:	4013      	ands	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <UART_AdvFeatureConfig+0x15c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	035b      	lsls	r3, r3, #13
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d10b      	bne.n	8003cb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a15      	ldr	r2, [pc, #84]	; (8003cfc <UART_AdvFeatureConfig+0x160>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d00b      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <UART_AdvFeatureConfig+0x164>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	fffdffff 	.word	0xfffdffff
 8003ce4:	fffeffff 	.word	0xfffeffff
 8003ce8:	fffbffff 	.word	0xfffbffff
 8003cec:	ffff7fff 	.word	0xffff7fff
 8003cf0:	ffffefff 	.word	0xffffefff
 8003cf4:	ffffdfff 	.word	0xffffdfff
 8003cf8:	ffefffff 	.word	0xffefffff
 8003cfc:	ff9fffff 	.word	0xff9fffff
 8003d00:	fff7ffff 	.word	0xfff7ffff

08003d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2290      	movs	r2, #144	; 0x90
 8003d10:	2100      	movs	r1, #0
 8003d12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d14:	f7fd f932 	bl	8000f7c <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2208      	movs	r2, #8
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d10c      	bne.n	8003d44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	0391      	lsls	r1, r2, #14
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <UART_CheckIdleState+0x98>)
 8003d34:	9200      	str	r2, [sp, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f000 f832 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d001      	beq.n	8003d44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e026      	b.n	8003d92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d10c      	bne.n	8003d6c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	03d1      	lsls	r1, r2, #15
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4a10      	ldr	r2, [pc, #64]	; (8003d9c <UART_CheckIdleState+0x98>)
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f000 f81e 	bl	8003da0 <UART_WaitOnFlagUntilTimeout>
 8003d64:	1e03      	subs	r3, r0, #0
 8003d66:	d001      	beq.n	8003d6c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e012      	b.n	8003d92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2288      	movs	r2, #136	; 0x88
 8003d70:	2120      	movs	r1, #32
 8003d72:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	228c      	movs	r2, #140	; 0x8c
 8003d78:	2120      	movs	r1, #32
 8003d7a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2284      	movs	r2, #132	; 0x84
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	01ffffff 	.word	0x01ffffff

08003da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b094      	sub	sp, #80	; 0x50
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	1dfb      	adds	r3, r7, #7
 8003dae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db0:	e0a7      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db4:	3301      	adds	r3, #1
 8003db6:	d100      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0x1a>
 8003db8:	e0a3      	b.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fd f8df 	bl	8000f7c <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d13f      	bne.n	8003e50 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dda:	2301      	movs	r3, #1
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	f383 8810 	msr	PRIMASK, r3
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	494e      	ldr	r1, [pc, #312]	; (8003f2c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	438a      	bics	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2288      	movs	r2, #136	; 0x88
 8003e38:	2120      	movs	r1, #32
 8003e3a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	228c      	movs	r2, #140	; 0x8c
 8003e40:	2120      	movs	r1, #32
 8003e42:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2284      	movs	r2, #132	; 0x84
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e069      	b.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2204      	movs	r2, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d052      	beq.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	401a      	ands	r2, r3
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d148      	bne.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7e:	613b      	str	r3, [r7, #16]
  return(result);
 8003e80:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f383 8810 	msr	PRIMASK, r3
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4924      	ldr	r1, [pc, #144]	; (8003f2c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eac:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	438a      	bics	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2288      	movs	r2, #136	; 0x88
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	228c      	movs	r2, #140	; 0x8c
 8003eea:	2120      	movs	r1, #32
 8003eec:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2290      	movs	r2, #144	; 0x90
 8003ef2:	2120      	movs	r1, #32
 8003ef4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2284      	movs	r2, #132	; 0x84
 8003efa:	2100      	movs	r1, #0
 8003efc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e010      	b.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	425a      	negs	r2, r3
 8003f12:	4153      	adcs	r3, r2
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	001a      	movs	r2, r3
 8003f18:	1dfb      	adds	r3, r7, #7
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d100      	bne.n	8003f22 <UART_WaitOnFlagUntilTimeout+0x182>
 8003f20:	e747      	b.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b014      	add	sp, #80	; 0x50
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	fffffe5f 	.word	0xfffffe5f

08003f30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b098      	sub	sp, #96	; 0x60
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	1dbb      	adds	r3, r7, #6
 8003f3c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1dba      	adds	r2, r7, #6
 8003f48:	215c      	movs	r1, #92	; 0x5c
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1dba      	adds	r2, r7, #6
 8003f52:	215e      	movs	r1, #94	; 0x5e
 8003f54:	8812      	ldrh	r2, [r2, #0]
 8003f56:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	015b      	lsls	r3, r3, #5
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10d      	bne.n	8003f86 <UART_Start_Receive_IT+0x56>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <UART_Start_Receive_IT+0x4c>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2260      	movs	r2, #96	; 0x60
 8003f76:	497b      	ldr	r1, [pc, #492]	; (8004164 <UART_Start_Receive_IT+0x234>)
 8003f78:	5299      	strh	r1, [r3, r2]
 8003f7a:	e02e      	b.n	8003fda <UART_Start_Receive_IT+0xaa>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2260      	movs	r2, #96	; 0x60
 8003f80:	21ff      	movs	r1, #255	; 0xff
 8003f82:	5299      	strh	r1, [r3, r2]
 8003f84:	e029      	b.n	8003fda <UART_Start_Receive_IT+0xaa>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <UART_Start_Receive_IT+0x7a>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <UART_Start_Receive_IT+0x70>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2260      	movs	r2, #96	; 0x60
 8003f9a:	21ff      	movs	r1, #255	; 0xff
 8003f9c:	5299      	strh	r1, [r3, r2]
 8003f9e:	e01c      	b.n	8003fda <UART_Start_Receive_IT+0xaa>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2260      	movs	r2, #96	; 0x60
 8003fa4:	217f      	movs	r1, #127	; 0x7f
 8003fa6:	5299      	strh	r1, [r3, r2]
 8003fa8:	e017      	b.n	8003fda <UART_Start_Receive_IT+0xaa>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	055b      	lsls	r3, r3, #21
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d10d      	bne.n	8003fd2 <UART_Start_Receive_IT+0xa2>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <UART_Start_Receive_IT+0x98>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2260      	movs	r2, #96	; 0x60
 8003fc2:	217f      	movs	r1, #127	; 0x7f
 8003fc4:	5299      	strh	r1, [r3, r2]
 8003fc6:	e008      	b.n	8003fda <UART_Start_Receive_IT+0xaa>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2260      	movs	r2, #96	; 0x60
 8003fcc:	213f      	movs	r1, #63	; 0x3f
 8003fce:	5299      	strh	r1, [r3, r2]
 8003fd0:	e003      	b.n	8003fda <UART_Start_Receive_IT+0xaa>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2260      	movs	r2, #96	; 0x60
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2290      	movs	r2, #144	; 0x90
 8003fde:	2100      	movs	r1, #0
 8003fe0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	228c      	movs	r2, #140	; 0x8c
 8003fe6:	2122      	movs	r1, #34	; 0x22
 8003fe8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8310 	mrs	r3, PRIMASK
 8003fee:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004012:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	059b      	lsls	r3, r3, #22
 8004024:	429a      	cmp	r2, r3
 8004026:	d150      	bne.n	80040ca <UART_Start_Receive_IT+0x19a>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2268      	movs	r2, #104	; 0x68
 800402c:	5a9b      	ldrh	r3, [r3, r2]
 800402e:	1dba      	adds	r2, r7, #6
 8004030:	8812      	ldrh	r2, [r2, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d349      	bcc.n	80040ca <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	015b      	lsls	r3, r3, #5
 800403e:	429a      	cmp	r2, r3
 8004040:	d107      	bne.n	8004052 <UART_Start_Receive_IT+0x122>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a46      	ldr	r2, [pc, #280]	; (8004168 <UART_Start_Receive_IT+0x238>)
 800404e:	675a      	str	r2, [r3, #116]	; 0x74
 8004050:	e002      	b.n	8004058 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a45      	ldr	r2, [pc, #276]	; (800416c <UART_Start_Receive_IT+0x23c>)
 8004056:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d019      	beq.n	8004094 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004060:	f3ef 8310 	mrs	r3, PRIMASK
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
 800406a:	2301      	movs	r3, #1
 800406c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0049      	lsls	r1, r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408e:	f383 8810 	msr	PRIMASK, r3
}
 8004092:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004094:	f3ef 8310 	mrs	r3, PRIMASK
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800409c:	657b      	str	r3, [r7, #84]	; 0x54
 800409e:	2301      	movs	r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0549      	lsls	r1, r1, #21
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	e047      	b.n	800415a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	015b      	lsls	r3, r3, #5
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d107      	bne.n	80040e6 <UART_Start_Receive_IT+0x1b6>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a23      	ldr	r2, [pc, #140]	; (8004170 <UART_Start_Receive_IT+0x240>)
 80040e2:	675a      	str	r2, [r3, #116]	; 0x74
 80040e4:	e002      	b.n	80040ec <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a22      	ldr	r2, [pc, #136]	; (8004174 <UART_Start_Receive_IT+0x244>)
 80040ea:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d019      	beq.n	8004128 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80040fa:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80040fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fe:	2301      	movs	r3, #1
 8004100:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2190      	movs	r1, #144	; 0x90
 8004116:	0049      	lsls	r1, r1, #1
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	e018      	b.n	800415a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	613b      	str	r3, [r7, #16]
  return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2120      	movs	r1, #32
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b018      	add	sp, #96	; 0x60
 8004162:	bd80      	pop	{r7, pc}
 8004164:	000001ff 	.word	0x000001ff
 8004168:	080048a1 	.word	0x080048a1
 800416c:	080045b5 	.word	0x080045b5
 8004170:	08004441 	.word	0x08004441
 8004174:	080042cd 	.word	0x080042cd

08004178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	; 0x38
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004180:	f3ef 8310 	mrs	r3, PRIMASK
 8004184:	617b      	str	r3, [r7, #20]
  return(result);
 8004186:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	2301      	movs	r3, #1
 800418c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f383 8810 	msr	PRIMASK, r3
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4926      	ldr	r1, [pc, #152]	; (800423c <UART_EndRxTransfer+0xc4>)
 80041a2:	400a      	ands	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8310 	mrs	r3, PRIMASK
 80041b6:	623b      	str	r3, [r7, #32]
  return(result);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
 80041bc:	2301      	movs	r3, #1
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	491b      	ldr	r1, [pc, #108]	; (8004240 <UART_EndRxTransfer+0xc8>)
 80041d4:	400a      	ands	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	f383 8810 	msr	PRIMASK, r3
}
 80041e2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d118      	bne.n	800421e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ec:	f3ef 8310 	mrs	r3, PRIMASK
 80041f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	2301      	movs	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2110      	movs	r1, #16
 800420e:	438a      	bics	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f383 8810 	msr	PRIMASK, r3
}
 800421c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	228c      	movs	r2, #140	; 0x8c
 8004222:	2120      	movs	r1, #32
 8004224:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b00e      	add	sp, #56	; 0x38
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	fffffedf 	.word	0xfffffedf
 8004240:	effffffe 	.word	0xeffffffe

08004244 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	225e      	movs	r2, #94	; 0x5e
 8004256:	2100      	movs	r1, #0
 8004258:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2256      	movs	r2, #86	; 0x56
 800425e:	2100      	movs	r1, #0
 8004260:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff f9c7 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b004      	add	sp, #16
 8004270:	bd80      	pop	{r7, pc}

08004272 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427a:	f3ef 8310 	mrs	r3, PRIMASK
 800427e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004280:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	2301      	movs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2140      	movs	r1, #64	; 0x40
 800429c:	438a      	bics	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f383 8810 	msr	PRIMASK, r3
}
 80042aa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2288      	movs	r2, #136	; 0x88
 80042b0:	2120      	movs	r1, #32
 80042b2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0018      	movs	r0, r3
 80042be:	f7ff f993 	bl	80035e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b006      	add	sp, #24
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b090      	sub	sp, #64	; 0x40
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042d4:	203e      	movs	r0, #62	; 0x3e
 80042d6:	183b      	adds	r3, r7, r0
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	2160      	movs	r1, #96	; 0x60
 80042dc:	5a52      	ldrh	r2, [r2, r1]
 80042de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	228c      	movs	r2, #140	; 0x8c
 80042e4:	589b      	ldr	r3, [r3, r2]
 80042e6:	2b22      	cmp	r3, #34	; 0x22
 80042e8:	d000      	beq.n	80042ec <UART_RxISR_8BIT+0x20>
 80042ea:	e09a      	b.n	8004422 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f2:	213c      	movs	r1, #60	; 0x3c
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b2d9      	uxtb	r1, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	400a      	ands	r2, r1
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	225e      	movs	r2, #94	; 0x5e
 800431c:	5a9b      	ldrh	r3, [r3, r2]
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b299      	uxth	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	225e      	movs	r2, #94	; 0x5e
 8004328:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	225e      	movs	r2, #94	; 0x5e
 800432e:	5a9b      	ldrh	r3, [r3, r2]
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d000      	beq.n	8004338 <UART_RxISR_8BIT+0x6c>
 8004336:	e07c      	b.n	8004432 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004338:	f3ef 8310 	mrs	r3, PRIMASK
 800433c:	61bb      	str	r3, [r7, #24]
  return(result);
 800433e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004340:	63bb      	str	r3, [r7, #56]	; 0x38
 8004342:	2301      	movs	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f383 8810 	msr	PRIMASK, r3
}
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4938      	ldr	r1, [pc, #224]	; (800443c <UART_RxISR_8BIT+0x170>)
 800435a:	400a      	ands	r2, r1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436a:	f3ef 8310 	mrs	r3, PRIMASK
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
 8004374:	2301      	movs	r3, #1
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	f383 8810 	msr	PRIMASK, r3
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	438a      	bics	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	f383 8810 	msr	PRIMASK, r3
}
 800439a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	228c      	movs	r2, #140	; 0x8c
 80043a0:	2120      	movs	r1, #32
 80043a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d12f      	bne.n	8004418 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043be:	f3ef 8310 	mrs	r3, PRIMASK
 80043c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80043c4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
 80043c8:	2301      	movs	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f383 8810 	msr	PRIMASK, r3
}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2110      	movs	r1, #16
 80043e0:	438a      	bics	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2210      	movs	r2, #16
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d103      	bne.n	8004406 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	225c      	movs	r2, #92	; 0x5c
 800440a:	5a9a      	ldrh	r2, [r3, r2]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0011      	movs	r1, r2
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff f8f9 	bl	8003608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004416:	e00c      	b.n	8004432 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0018      	movs	r0, r3
 800441c:	f7fc fb5e 	bl	8000adc <HAL_UART_RxCpltCallback>
}
 8004420:	e007      	b.n	8004432 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2108      	movs	r1, #8
 800442e:	430a      	orrs	r2, r1
 8004430:	619a      	str	r2, [r3, #24]
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b010      	add	sp, #64	; 0x40
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	fffffedf 	.word	0xfffffedf

08004440 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b090      	sub	sp, #64	; 0x40
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004448:	203e      	movs	r0, #62	; 0x3e
 800444a:	183b      	adds	r3, r7, r0
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	2160      	movs	r1, #96	; 0x60
 8004450:	5a52      	ldrh	r2, [r2, r1]
 8004452:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	228c      	movs	r2, #140	; 0x8c
 8004458:	589b      	ldr	r3, [r3, r2]
 800445a:	2b22      	cmp	r3, #34	; 0x22
 800445c:	d000      	beq.n	8004460 <UART_RxISR_16BIT+0x20>
 800445e:	e09a      	b.n	8004596 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004466:	213c      	movs	r1, #60	; 0x3c
 8004468:	187b      	adds	r3, r7, r1
 800446a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004472:	187b      	adds	r3, r7, r1
 8004474:	183a      	adds	r2, r7, r0
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	8812      	ldrh	r2, [r2, #0]
 800447a:	4013      	ands	r3, r2
 800447c:	b29a      	uxth	r2, r3
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	225e      	movs	r2, #94	; 0x5e
 8004490:	5a9b      	ldrh	r3, [r3, r2]
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b299      	uxth	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	225e      	movs	r2, #94	; 0x5e
 800449c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	225e      	movs	r2, #94	; 0x5e
 80044a2:	5a9b      	ldrh	r3, [r3, r2]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d000      	beq.n	80044ac <UART_RxISR_16BIT+0x6c>
 80044aa:	e07c      	b.n	80045a6 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ac:	f3ef 8310 	mrs	r3, PRIMASK
 80044b0:	617b      	str	r3, [r7, #20]
  return(result);
 80044b2:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
 80044b6:	2301      	movs	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4938      	ldr	r1, [pc, #224]	; (80045b0 <UART_RxISR_16BIT+0x170>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044de:	f3ef 8310 	mrs	r3, PRIMASK
 80044e2:	623b      	str	r3, [r7, #32]
  return(result);
 80044e4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2101      	movs	r1, #1
 8004500:	438a      	bics	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f383 8810 	msr	PRIMASK, r3
}
 800450e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	228c      	movs	r2, #140	; 0x8c
 8004514:	2120      	movs	r1, #32
 8004516:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d12f      	bne.n	800458c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	60bb      	str	r3, [r7, #8]
  return(result);
 8004538:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	2301      	movs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2110      	movs	r1, #16
 8004554:	438a      	bics	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	2210      	movs	r2, #16
 800456c:	4013      	ands	r3, r2
 800456e:	2b10      	cmp	r3, #16
 8004570:	d103      	bne.n	800457a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2210      	movs	r2, #16
 8004578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	225c      	movs	r2, #92	; 0x5c
 800457e:	5a9a      	ldrh	r2, [r3, r2]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff f83f 	bl	8003608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800458a:	e00c      	b.n	80045a6 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0018      	movs	r0, r3
 8004590:	f7fc faa4 	bl	8000adc <HAL_UART_RxCpltCallback>
}
 8004594:	e007      	b.n	80045a6 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2108      	movs	r1, #8
 80045a2:	430a      	orrs	r2, r1
 80045a4:	619a      	str	r2, [r3, #24]
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b010      	add	sp, #64	; 0x40
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	fffffedf 	.word	0xfffffedf

080045b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b09c      	sub	sp, #112	; 0x70
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80045bc:	236a      	movs	r3, #106	; 0x6a
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	2160      	movs	r1, #96	; 0x60
 80045c4:	5a52      	ldrh	r2, [r2, r1]
 80045c6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	228c      	movs	r2, #140	; 0x8c
 80045e4:	589b      	ldr	r3, [r3, r2]
 80045e6:	2b22      	cmp	r3, #34	; 0x22
 80045e8:	d000      	beq.n	80045ec <UART_RxISR_8BIT_FIFOEN+0x38>
 80045ea:	e144      	b.n	8004876 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045ec:	235e      	movs	r3, #94	; 0x5e
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	2168      	movs	r1, #104	; 0x68
 80045f4:	5a52      	ldrh	r2, [r2, r1]
 80045f6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045f8:	e0eb      	b.n	80047d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004600:	215c      	movs	r1, #92	; 0x5c
 8004602:	187b      	adds	r3, r7, r1
 8004604:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004606:	187b      	adds	r3, r7, r1
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	236a      	movs	r3, #106	; 0x6a
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b2d9      	uxtb	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	400a      	ands	r2, r1
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	225e      	movs	r2, #94	; 0x5e
 800462c:	5a9b      	ldrh	r3, [r3, r2]
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b299      	uxth	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	225e      	movs	r2, #94	; 0x5e
 8004638:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	2207      	movs	r2, #7
 8004646:	4013      	ands	r3, r2
 8004648:	d049      	beq.n	80046de <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	2201      	movs	r2, #1
 800464e:	4013      	ands	r3, r2
 8004650:	d010      	beq.n	8004674 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004652:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4013      	ands	r3, r2
 800465a:	d00b      	beq.n	8004674 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2290      	movs	r2, #144	; 0x90
 8004668:	589b      	ldr	r3, [r3, r2]
 800466a:	2201      	movs	r2, #1
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2190      	movs	r1, #144	; 0x90
 8004672:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004676:	2202      	movs	r2, #2
 8004678:	4013      	ands	r3, r2
 800467a:	d00f      	beq.n	800469c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800467c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467e:	2201      	movs	r2, #1
 8004680:	4013      	ands	r3, r2
 8004682:	d00b      	beq.n	800469c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2290      	movs	r2, #144	; 0x90
 8004690:	589b      	ldr	r3, [r3, r2]
 8004692:	2204      	movs	r2, #4
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2190      	movs	r1, #144	; 0x90
 800469a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800469c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469e:	2204      	movs	r2, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00f      	beq.n	80046c4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80046a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046a6:	2201      	movs	r2, #1
 80046a8:	4013      	ands	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2204      	movs	r2, #4
 80046b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2290      	movs	r2, #144	; 0x90
 80046b8:	589b      	ldr	r3, [r3, r2]
 80046ba:	2202      	movs	r2, #2
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2190      	movs	r1, #144	; 0x90
 80046c2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2290      	movs	r2, #144	; 0x90
 80046c8:	589b      	ldr	r3, [r3, r2]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fe ff91 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2290      	movs	r2, #144	; 0x90
 80046da:	2100      	movs	r1, #0
 80046dc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	225e      	movs	r2, #94	; 0x5e
 80046e2:	5a9b      	ldrh	r3, [r3, r2]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d173      	bne.n	80047d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ea:	f3ef 8310 	mrs	r3, PRIMASK
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046f4:	2301      	movs	r3, #1
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4961      	ldr	r1, [pc, #388]	; (8004890 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004712:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471c:	f3ef 8310 	mrs	r3, PRIMASK
 8004720:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004724:	657b      	str	r3, [r7, #84]	; 0x54
 8004726:	2301      	movs	r3, #1
 8004728:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	f383 8810 	msr	PRIMASK, r3
}
 8004730:	46c0      	nop			; (mov r8, r8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4955      	ldr	r1, [pc, #340]	; (8004894 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800473e:	400a      	ands	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004744:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	f383 8810 	msr	PRIMASK, r3
}
 800474c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	228c      	movs	r2, #140	; 0x8c
 8004752:	2120      	movs	r1, #32
 8004754:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d12f      	bne.n	80047ca <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004770:	f3ef 8310 	mrs	r3, PRIMASK
 8004774:	623b      	str	r3, [r7, #32]
  return(result);
 8004776:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004778:	653b      	str	r3, [r7, #80]	; 0x50
 800477a:	2301      	movs	r3, #1
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2110      	movs	r1, #16
 8004792:	438a      	bics	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	f383 8810 	msr	PRIMASK, r3
}
 80047a0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	2210      	movs	r2, #16
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d103      	bne.n	80047b8 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	225c      	movs	r2, #92	; 0x5c
 80047bc:	5a9a      	ldrh	r2, [r3, r2]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0011      	movs	r1, r2
 80047c2:	0018      	movs	r0, r3
 80047c4:	f7fe ff20 	bl	8003608 <HAL_UARTEx_RxEventCallback>
 80047c8:	e003      	b.n	80047d2 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fc f985 	bl	8000adc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047d2:	235e      	movs	r3, #94	; 0x5e
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <UART_RxISR_8BIT_FIFOEN+0x232>
 80047dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047de:	2220      	movs	r2, #32
 80047e0:	4013      	ands	r3, r2
 80047e2:	d000      	beq.n	80047e6 <UART_RxISR_8BIT_FIFOEN+0x232>
 80047e4:	e709      	b.n	80045fa <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80047e6:	204e      	movs	r0, #78	; 0x4e
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	215e      	movs	r1, #94	; 0x5e
 80047ee:	5a52      	ldrh	r2, [r2, r1]
 80047f0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80047f2:	0001      	movs	r1, r0
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d044      	beq.n	8004886 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2268      	movs	r2, #104	; 0x68
 8004800:	5a9b      	ldrh	r3, [r3, r2]
 8004802:	187a      	adds	r2, r7, r1
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d23d      	bcs.n	8004886 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480a:	f3ef 8310 	mrs	r3, PRIMASK
 800480e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004810:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
 8004814:	2301      	movs	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f383 8810 	msr	PRIMASK, r3
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	491b      	ldr	r1, [pc, #108]	; (8004898 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800482c:	400a      	ands	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f383 8810 	msr	PRIMASK, r3
}
 800483a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a17      	ldr	r2, [pc, #92]	; (800489c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8004840:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004842:	f3ef 8310 	mrs	r3, PRIMASK
 8004846:	617b      	str	r3, [r7, #20]
  return(result);
 8004848:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800484a:	647b      	str	r3, [r7, #68]	; 0x44
 800484c:	2301      	movs	r3, #1
 800484e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f383 8810 	msr	PRIMASK, r3
}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2120      	movs	r1, #32
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800486a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f383 8810 	msr	PRIMASK, r3
}
 8004872:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004874:	e007      	b.n	8004886 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2108      	movs	r1, #8
 8004882:	430a      	orrs	r2, r1
 8004884:	619a      	str	r2, [r3, #24]
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b01c      	add	sp, #112	; 0x70
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	fffffeff 	.word	0xfffffeff
 8004894:	effffffe 	.word	0xeffffffe
 8004898:	efffffff 	.word	0xefffffff
 800489c:	080042cd 	.word	0x080042cd

080048a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b09e      	sub	sp, #120	; 0x78
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80048a8:	2372      	movs	r3, #114	; 0x72
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	2160      	movs	r1, #96	; 0x60
 80048b0:	5a52      	ldrh	r2, [r2, r1]
 80048b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	228c      	movs	r2, #140	; 0x8c
 80048d0:	589b      	ldr	r3, [r3, r2]
 80048d2:	2b22      	cmp	r3, #34	; 0x22
 80048d4:	d000      	beq.n	80048d8 <UART_RxISR_16BIT_FIFOEN+0x38>
 80048d6:	e144      	b.n	8004b62 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80048d8:	2366      	movs	r3, #102	; 0x66
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	2168      	movs	r1, #104	; 0x68
 80048e0:	5a52      	ldrh	r2, [r2, r1]
 80048e2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048e4:	e0eb      	b.n	8004abe <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ec:	2164      	movs	r1, #100	; 0x64
 80048ee:	187b      	adds	r3, r7, r1
 80048f0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	2272      	movs	r2, #114	; 0x72
 80048fc:	18ba      	adds	r2, r7, r2
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	4013      	ands	r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	225e      	movs	r2, #94	; 0x5e
 8004918:	5a9b      	ldrh	r3, [r3, r2]
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b299      	uxth	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	225e      	movs	r2, #94	; 0x5e
 8004924:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800492e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004930:	2207      	movs	r2, #7
 8004932:	4013      	ands	r3, r2
 8004934:	d049      	beq.n	80049ca <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004938:	2201      	movs	r2, #1
 800493a:	4013      	ands	r3, r2
 800493c:	d010      	beq.n	8004960 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800493e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d00b      	beq.n	8004960 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2290      	movs	r2, #144	; 0x90
 8004954:	589b      	ldr	r3, [r3, r2]
 8004956:	2201      	movs	r2, #1
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2190      	movs	r1, #144	; 0x90
 800495e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004962:	2202      	movs	r2, #2
 8004964:	4013      	ands	r3, r2
 8004966:	d00f      	beq.n	8004988 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496a:	2201      	movs	r2, #1
 800496c:	4013      	ands	r3, r2
 800496e:	d00b      	beq.n	8004988 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2202      	movs	r2, #2
 8004976:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2290      	movs	r2, #144	; 0x90
 800497c:	589b      	ldr	r3, [r3, r2]
 800497e:	2204      	movs	r2, #4
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2190      	movs	r1, #144	; 0x90
 8004986:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498a:	2204      	movs	r2, #4
 800498c:	4013      	ands	r3, r2
 800498e:	d00f      	beq.n	80049b0 <UART_RxISR_16BIT_FIFOEN+0x110>
 8004990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004992:	2201      	movs	r2, #1
 8004994:	4013      	ands	r3, r2
 8004996:	d00b      	beq.n	80049b0 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2204      	movs	r2, #4
 800499e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2290      	movs	r2, #144	; 0x90
 80049a4:	589b      	ldr	r3, [r3, r2]
 80049a6:	2202      	movs	r2, #2
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2190      	movs	r1, #144	; 0x90
 80049ae:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2290      	movs	r2, #144	; 0x90
 80049b4:	589b      	ldr	r3, [r3, r2]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7fe fe1b 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2290      	movs	r2, #144	; 0x90
 80049c6:	2100      	movs	r1, #0
 80049c8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	225e      	movs	r2, #94	; 0x5e
 80049ce:	5a9b      	ldrh	r3, [r3, r2]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d173      	bne.n	8004abe <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d6:	f3ef 8310 	mrs	r3, PRIMASK
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e0:	2301      	movs	r3, #1
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4961      	ldr	r1, [pc, #388]	; (8004b7c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80049f8:	400a      	ands	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a08:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a12:	2301      	movs	r3, #1
 8004a14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4955      	ldr	r1, [pc, #340]	; (8004b80 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	609a      	str	r2, [r3, #8]
 8004a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a30:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	228c      	movs	r2, #140	; 0x8c
 8004a3e:	2120      	movs	r1, #32
 8004a40:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d12f      	bne.n	8004ab6 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a64:	657b      	str	r3, [r7, #84]	; 0x54
 8004a66:	2301      	movs	r3, #1
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	f383 8810 	msr	PRIMASK, r3
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2110      	movs	r1, #16
 8004a7e:	438a      	bics	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2210      	movs	r2, #16
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d103      	bne.n	8004aa4 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	225c      	movs	r2, #92	; 0x5c
 8004aa8:	5a9a      	ldrh	r2, [r3, r2]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0011      	movs	r1, r2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fe fdaa 	bl	8003608 <HAL_UARTEx_RxEventCallback>
 8004ab4:	e003      	b.n	8004abe <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fc f80f 	bl	8000adc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004abe:	2366      	movs	r3, #102	; 0x66
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aca:	2220      	movs	r2, #32
 8004acc:	4013      	ands	r3, r2
 8004ace:	d000      	beq.n	8004ad2 <UART_RxISR_16BIT_FIFOEN+0x232>
 8004ad0:	e709      	b.n	80048e6 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ad2:	2052      	movs	r0, #82	; 0x52
 8004ad4:	183b      	adds	r3, r7, r0
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	215e      	movs	r1, #94	; 0x5e
 8004ada:	5a52      	ldrh	r2, [r2, r1]
 8004adc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ade:	0001      	movs	r1, r0
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d044      	beq.n	8004b72 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2268      	movs	r2, #104	; 0x68
 8004aec:	5a9b      	ldrh	r3, [r3, r2]
 8004aee:	187a      	adds	r2, r7, r1
 8004af0:	8812      	ldrh	r2, [r2, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d23d      	bcs.n	8004b72 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af6:	f3ef 8310 	mrs	r3, PRIMASK
 8004afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004afc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f383 8810 	msr	PRIMASK, r3
}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	491b      	ldr	r1, [pc, #108]	; (8004b84 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8004b2c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b32:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b34:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b38:	2301      	movs	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f383 8810 	msr	PRIMASK, r3
}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2120      	movs	r1, #32
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f383 8810 	msr	PRIMASK, r3
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b60:	e007      	b.n	8004b72 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2108      	movs	r1, #8
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	619a      	str	r2, [r3, #24]
}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b01e      	add	sp, #120	; 0x78
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	fffffeff 	.word	0xfffffeff
 8004b80:	effffffe 	.word	0xeffffffe
 8004b84:	efffffff 	.word	0xefffffff
 8004b88:	08004441 	.word	0x08004441

08004b8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004bb4:	46c0      	nop			; (mov r8, r8)
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b002      	add	sp, #8
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2284      	movs	r2, #132	; 0x84
 8004bc8:	5c9b      	ldrb	r3, [r3, r2]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e027      	b.n	8004c22 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2284      	movs	r2, #132	; 0x84
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2288      	movs	r2, #136	; 0x88
 8004bde:	2124      	movs	r1, #36	; 0x24
 8004be0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	438a      	bics	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2288      	movs	r2, #136	; 0x88
 8004c14:	2120      	movs	r1, #32
 8004c16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2284      	movs	r2, #132	; 0x84
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b004      	add	sp, #16
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	dfffffff 	.word	0xdfffffff

08004c30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2284      	movs	r2, #132	; 0x84
 8004c3e:	5c9b      	ldrb	r3, [r3, r2]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e02e      	b.n	8004ca6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2284      	movs	r2, #132	; 0x84
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2288      	movs	r2, #136	; 0x88
 8004c54:	2124      	movs	r1, #36	; 0x24
 8004c56:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	08d9      	lsrs	r1, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	0018      	movs	r0, r3
 8004c88:	f000 f854 	bl	8004d34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2288      	movs	r2, #136	; 0x88
 8004c98:	2120      	movs	r1, #32
 8004c9a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2284      	movs	r2, #132	; 0x84
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2284      	movs	r2, #132	; 0x84
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e02f      	b.n	8004d28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2284      	movs	r2, #132	; 0x84
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2288      	movs	r2, #136	; 0x88
 8004cd4:	2124      	movs	r1, #36	; 0x24
 8004cd6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2101      	movs	r1, #1
 8004cec:	438a      	bics	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 f813 	bl	8004d34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2288      	movs	r2, #136	; 0x88
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2284      	movs	r2, #132	; 0x84
 8004d22:	2100      	movs	r1, #0
 8004d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	f1ffffff 	.word	0xf1ffffff

08004d34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	226a      	movs	r2, #106	; 0x6a
 8004d48:	2101      	movs	r1, #1
 8004d4a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2268      	movs	r2, #104	; 0x68
 8004d50:	2101      	movs	r1, #1
 8004d52:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d54:	e043      	b.n	8004dde <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d56:	260f      	movs	r6, #15
 8004d58:	19bb      	adds	r3, r7, r6
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d5e:	200e      	movs	r0, #14
 8004d60:	183b      	adds	r3, r7, r0
 8004d62:	2208      	movs	r2, #8
 8004d64:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	0e5b      	lsrs	r3, r3, #25
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	240d      	movs	r4, #13
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	2107      	movs	r1, #7
 8004d76:	400a      	ands	r2, r1
 8004d78:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	0f5b      	lsrs	r3, r3, #29
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	250c      	movs	r5, #12
 8004d86:	197b      	adds	r3, r7, r5
 8004d88:	2107      	movs	r1, #7
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	197a      	adds	r2, r7, r5
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	4914      	ldr	r1, [pc, #80]	; (8004de8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004d98:	5c8a      	ldrb	r2, [r1, r2]
 8004d9a:	435a      	muls	r2, r3
 8004d9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d9e:	197b      	adds	r3, r7, r5
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <UARTEx_SetNbDataToProcess+0xb8>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004da6:	0019      	movs	r1, r3
 8004da8:	f7fb fa38 	bl	800021c <__divsi3>
 8004dac:	0003      	movs	r3, r0
 8004dae:	b299      	uxth	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	226a      	movs	r2, #106	; 0x6a
 8004db4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004db6:	19bb      	adds	r3, r7, r6
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	193a      	adds	r2, r7, r4
 8004dbc:	7812      	ldrb	r2, [r2, #0]
 8004dbe:	490a      	ldr	r1, [pc, #40]	; (8004de8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004dc0:	5c8a      	ldrb	r2, [r1, r2]
 8004dc2:	435a      	muls	r2, r3
 8004dc4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dc6:	193b      	adds	r3, r7, r4
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	4a08      	ldr	r2, [pc, #32]	; (8004dec <UARTEx_SetNbDataToProcess+0xb8>)
 8004dcc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004dce:	0019      	movs	r1, r3
 8004dd0:	f7fb fa24 	bl	800021c <__divsi3>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	b299      	uxth	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2268      	movs	r2, #104	; 0x68
 8004ddc:	5299      	strh	r1, [r3, r2]
}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b005      	add	sp, #20
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	08007cac 	.word	0x08007cac
 8004dec:	08007cb4 	.word	0x08007cb4

08004df0 <__NVIC_SetPriority>:
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	0002      	movs	r2, r0
 8004df8:	6039      	str	r1, [r7, #0]
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b7f      	cmp	r3, #127	; 0x7f
 8004e04:	d828      	bhi.n	8004e58 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e06:	4a2f      	ldr	r2, [pc, #188]	; (8004ec4 <__NVIC_SetPriority+0xd4>)
 8004e08:	1dfb      	adds	r3, r7, #7
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b25b      	sxtb	r3, r3
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	33c0      	adds	r3, #192	; 0xc0
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	589b      	ldr	r3, [r3, r2]
 8004e16:	1dfa      	adds	r2, r7, #7
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	0011      	movs	r1, r2
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	400a      	ands	r2, r1
 8004e20:	00d2      	lsls	r2, r2, #3
 8004e22:	21ff      	movs	r1, #255	; 0xff
 8004e24:	4091      	lsls	r1, r2
 8004e26:	000a      	movs	r2, r1
 8004e28:	43d2      	mvns	r2, r2
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	019b      	lsls	r3, r3, #6
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	401a      	ands	r2, r3
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	4003      	ands	r3, r0
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e44:	481f      	ldr	r0, [pc, #124]	; (8004ec4 <__NVIC_SetPriority+0xd4>)
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	33c0      	adds	r3, #192	; 0xc0
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	501a      	str	r2, [r3, r0]
}
 8004e56:	e031      	b.n	8004ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e58:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <__NVIC_SetPriority+0xd8>)
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	0019      	movs	r1, r3
 8004e60:	230f      	movs	r3, #15
 8004e62:	400b      	ands	r3, r1
 8004e64:	3b08      	subs	r3, #8
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	3306      	adds	r3, #6
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	18d3      	adds	r3, r2, r3
 8004e6e:	3304      	adds	r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	1dfa      	adds	r2, r7, #7
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	0011      	movs	r1, r2
 8004e78:	2203      	movs	r2, #3
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	00d2      	lsls	r2, r2, #3
 8004e7e:	21ff      	movs	r1, #255	; 0xff
 8004e80:	4091      	lsls	r1, r2
 8004e82:	000a      	movs	r2, r1
 8004e84:	43d2      	mvns	r2, r2
 8004e86:	401a      	ands	r2, r3
 8004e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	019b      	lsls	r3, r3, #6
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	401a      	ands	r2, r3
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	0018      	movs	r0, r3
 8004e98:	2303      	movs	r3, #3
 8004e9a:	4003      	ands	r3, r0
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea0:	4809      	ldr	r0, [pc, #36]	; (8004ec8 <__NVIC_SetPriority+0xd8>)
 8004ea2:	1dfb      	adds	r3, r7, #7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	001c      	movs	r4, r3
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	4023      	ands	r3, r4
 8004eac:	3b08      	subs	r3, #8
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	3306      	adds	r3, #6
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	18c3      	adds	r3, r0, r3
 8004eb8:	3304      	adds	r3, #4
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b003      	add	sp, #12
 8004ec2:	bd90      	pop	{r4, r7, pc}
 8004ec4:	e000e100 	.word	0xe000e100
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <SysTick_Handler+0x1c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004ed4:	f001 fc88 	bl	80067e8 <xTaskGetSchedulerState>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ede:	f002 fb03 	bl	80074e8 <xPortSysTickHandler>
  }
}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000e010 	.word	0xe000e010

08004eec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ef0:	2305      	movs	r3, #5
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f7ff ff7a 	bl	8004df0 <__NVIC_SetPriority>
#endif
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0a:	f3ef 8305 	mrs	r3, IPSR
 8004f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f16:	2306      	movs	r3, #6
 8004f18:	425b      	negs	r3, r3
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	e00c      	b.n	8004f38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <osKernelInitialize+0x40>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f26:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <osKernelInitialize+0x40>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	e002      	b.n	8004f38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f32:	2301      	movs	r3, #1
 8004f34:	425b      	negs	r3, r3
 8004f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f38:	687b      	ldr	r3, [r7, #4]
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b002      	add	sp, #8
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	200001f4 	.word	0x200001f4

08004f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f4e:	f3ef 8305 	mrs	r3, IPSR
 8004f52:	603b      	str	r3, [r7, #0]
  return(result);
 8004f54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f5a:	2306      	movs	r3, #6
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	e010      	b.n	8004f84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <osKernelStart+0x48>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d109      	bne.n	8004f7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f6a:	f7ff ffbf 	bl	8004eec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <osKernelStart+0x48>)
 8004f70:	2202      	movs	r2, #2
 8004f72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f74:	f001 f84e 	bl	8006014 <vTaskStartScheduler>
      stat = osOK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	e002      	b.n	8004f84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	425b      	negs	r3, r3
 8004f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f84:	687b      	ldr	r3, [r7, #4]
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	200001f4 	.word	0x200001f4

08004f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f94:	b5b0      	push	{r4, r5, r7, lr}
 8004f96:	b08e      	sub	sp, #56	; 0x38
 8004f98:	af04      	add	r7, sp, #16
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa4:	f3ef 8305 	mrs	r3, IPSR
 8004fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8004faa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d000      	beq.n	8004fb2 <osThreadNew+0x1e>
 8004fb0:	e081      	b.n	80050b6 <osThreadNew+0x122>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d100      	bne.n	8004fba <osThreadNew+0x26>
 8004fb8:	e07d      	b.n	80050b6 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004fbe:	2318      	movs	r3, #24
 8004fc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	425b      	negs	r3, r3
 8004fca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <osThreadNew+0x4c>
        name = attr->name;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <osThreadNew+0x70>
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b38      	cmp	r3, #56	; 0x38
 8004ff8:	d804      	bhi.n	8005004 <osThreadNew+0x70>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	4013      	ands	r3, r2
 8005002:	d001      	beq.n	8005008 <osThreadNew+0x74>
        return (NULL);
 8005004:	2300      	movs	r3, #0
 8005006:	e057      	b.n	80050b8 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	089b      	lsrs	r3, r3, #2
 8005016:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00e      	beq.n	800503e <osThreadNew+0xaa>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2bbb      	cmp	r3, #187	; 0xbb
 8005026:	d90a      	bls.n	800503e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <osThreadNew+0xaa>
        mem = 1;
 8005038:	2301      	movs	r3, #1
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e010      	b.n	8005060 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10c      	bne.n	8005060 <osThreadNew+0xcc>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d108      	bne.n	8005060 <osThreadNew+0xcc>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <osThreadNew+0xcc>
          mem = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	e001      	b.n	8005060 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d112      	bne.n	800508c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800506e:	68bd      	ldr	r5, [r7, #8]
 8005070:	6a3c      	ldr	r4, [r7, #32]
 8005072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	9302      	str	r3, [sp, #8]
 8005078:	9201      	str	r2, [sp, #4]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	002b      	movs	r3, r5
 8005080:	0022      	movs	r2, r4
 8005082:	f000 fe08 	bl	8005c96 <xTaskCreateStatic>
 8005086:	0003      	movs	r3, r0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	e014      	b.n	80050b6 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d111      	bne.n	80050b6 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	b29a      	uxth	r2, r3
 8005096:	68bc      	ldr	r4, [r7, #8]
 8005098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	2310      	movs	r3, #16
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	0023      	movs	r3, r4
 80050a8:	f000 fe39 	bl	8005d1e <xTaskCreate>
 80050ac:	0003      	movs	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d001      	beq.n	80050b6 <osThreadNew+0x122>
            hTask = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050b6:	693b      	ldr	r3, [r7, #16]
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b00a      	add	sp, #40	; 0x28
 80050be:	bdb0      	pop	{r4, r5, r7, pc}

080050c0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <osThreadFlagsSet+0x1a>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	da03      	bge.n	80050e2 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80050da:	2304      	movs	r3, #4
 80050dc:	425b      	negs	r3, r3
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e031      	b.n	8005146 <osThreadFlagsSet+0x86>
  }
  else {
    rflags = (uint32_t)osError;
 80050e2:	2301      	movs	r3, #1
 80050e4:	425b      	negs	r3, r3
 80050e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e8:	f3ef 8305 	mrs	r3, IPSR
 80050ec:	613b      	str	r3, [r7, #16]
  return(result);
 80050ee:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <osThreadFlagsSet+0x6c>
      yield = pdFALSE;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	2308      	movs	r3, #8
 80050fe:	18fb      	adds	r3, r7, r3
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	2201      	movs	r2, #1
 8005106:	f001 fcdb 	bl	8006ac0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800510a:	230c      	movs	r3, #12
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	9200      	str	r2, [sp, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	2100      	movs	r1, #0
 8005118:	f001 fcd2 	bl	8006ac0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d011      	beq.n	8005146 <osThreadFlagsSet+0x86>
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <osThreadFlagsSet+0x90>)
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	0552      	lsls	r2, r2, #21
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e00c      	b.n	8005146 <osThreadFlagsSet+0x86>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6978      	ldr	r0, [r7, #20]
 8005130:	2300      	movs	r3, #0
 8005132:	2201      	movs	r2, #1
 8005134:	f001 fc28 	bl	8006988 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005138:	230c      	movs	r3, #12
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	6978      	ldr	r0, [r7, #20]
 800513e:	2200      	movs	r2, #0
 8005140:	2100      	movs	r1, #0
 8005142:	f001 fc21 	bl	8006988 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	0018      	movs	r0, r3
 800514a:	46bd      	mov	sp, r7
 800514c:	b006      	add	sp, #24
 800514e:	bd80      	pop	{r7, pc}
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005160:	f3ef 8305 	mrs	r3, IPSR
 8005164:	617b      	str	r3, [r7, #20]
  return(result);
 8005166:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800516c:	2306      	movs	r3, #6
 800516e:	425b      	negs	r3, r3
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e06a      	b.n	800524a <osThreadFlagsWait+0xf6>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	da03      	bge.n	8005182 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800517a:	2304      	movs	r3, #4
 800517c:	425b      	negs	r3, r3
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005180:	e063      	b.n	800524a <osThreadFlagsWait+0xf6>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2202      	movs	r2, #2
 8005186:	4013      	ands	r3, r2
 8005188:	d002      	beq.n	8005190 <osThreadFlagsWait+0x3c>
      clear = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
 800518e:	e001      	b.n	8005194 <osThreadFlagsWait+0x40>
    } else {
      clear = flags;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800519c:	f001 f830 	bl	8006200 <xTaskGetTickCount>
 80051a0:	0003      	movs	r3, r0
 80051a2:	623b      	str	r3, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	2210      	movs	r2, #16
 80051a8:	18ba      	adds	r2, r7, r2
 80051aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ac:	2000      	movs	r0, #0
 80051ae:	f001 fb93 	bl	80068d8 <xTaskNotifyWait>
 80051b2:	0003      	movs	r3, r0
 80051b4:	61fb      	str	r3, [r7, #28]

      if (rval == pdPASS) {
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d135      	bne.n	8005228 <osThreadFlagsWait+0xd4>
        rflags &= flags;
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4013      	ands	r3, r2
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2201      	movs	r2, #1
 80051d0:	4013      	ands	r3, r2
 80051d2:	d00c      	beq.n	80051ee <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d8:	4013      	ands	r3, r2
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d031      	beq.n	8005244 <osThreadFlagsWait+0xf0>
            break;
          } else {
            if (timeout == 0U) {
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10e      	bne.n	8005204 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80051e6:	2303      	movs	r3, #3
 80051e8:	425b      	negs	r3, r3
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80051ec:	e02d      	b.n	800524a <osThreadFlagsWait+0xf6>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f2:	4013      	ands	r3, r2
 80051f4:	d128      	bne.n	8005248 <osThreadFlagsWait+0xf4>
            break;
          } else {
            if (timeout == 0U) {
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80051fc:	2303      	movs	r3, #3
 80051fe:	425b      	negs	r3, r3
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8005202:	e022      	b.n	800524a <osThreadFlagsWait+0xf6>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005204:	f000 fffc 	bl	8006200 <xTaskGetTickCount>
 8005208:	0002      	movs	r2, r0
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	429a      	cmp	r2, r3
 8005216:	d902      	bls.n	800521e <osThreadFlagsWait+0xca>
          tout  = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
 800521c:	e00e      	b.n	800523c <osThreadFlagsWait+0xe8>
        } else {
          tout -= td;
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e009      	b.n	800523c <osThreadFlagsWait+0xe8>
        }
      }
      else {
        if (timeout == 0) {
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <osThreadFlagsWait+0xe2>
          rflags = (uint32_t)osErrorResource;
 800522e:	2303      	movs	r3, #3
 8005230:	425b      	negs	r3, r3
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005234:	e002      	b.n	800523c <osThreadFlagsWait+0xe8>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005236:	2302      	movs	r3, #2
 8005238:	425b      	negs	r3, r3
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1b0      	bne.n	80051a4 <osThreadFlagsWait+0x50>
 8005242:	e002      	b.n	800524a <osThreadFlagsWait+0xf6>
            break;
 8005244:	46c0      	nop			; (mov r8, r8)
 8005246:	e000      	b.n	800524a <osThreadFlagsWait+0xf6>
            break;
 8005248:	46c0      	nop			; (mov r8, r8)
  }

  /* Return flags before clearing */
  return (rflags);
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b00c      	add	sp, #48	; 0x30
 8005252:	bd80      	pop	{r7, pc}

08005254 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800525c:	f3ef 8305 	mrs	r3, IPSR
 8005260:	60bb      	str	r3, [r7, #8]
  return(result);
 8005262:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <osDelay+0x1c>
    stat = osErrorISR;
 8005268:	2306      	movs	r3, #6
 800526a:	425b      	negs	r3, r3
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	e008      	b.n	8005282 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <osDelay+0x2e>
      vTaskDelay(ticks);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 fea3 	bl	8005fc8 <vTaskDelay>
    }
  }

  return (stat);
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	0018      	movs	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	b004      	add	sp, #16
 800528a:	bd80      	pop	{r7, pc}

0800528c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a06      	ldr	r2, [pc, #24]	; (80052b4 <vApplicationGetIdleTaskMemory+0x28>)
 800529c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80052a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2280      	movs	r2, #128	; 0x80
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b004      	add	sp, #16
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	200001f8 	.word	0x200001f8
 80052b8:	200002b4 	.word	0x200002b4

080052bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4a06      	ldr	r2, [pc, #24]	; (80052e4 <vApplicationGetTimerTaskMemory+0x28>)
 80052cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80052d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2280      	movs	r2, #128	; 0x80
 80052d8:	0052      	lsls	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	46c0      	nop			; (mov r8, r8)
 80052de:	46bd      	mov	sp, r7
 80052e0:	b004      	add	sp, #16
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	200004b4 	.word	0x200004b4
 80052e8:	20000570 	.word	0x20000570

080052ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3308      	adds	r3, #8
 80052f8:	001a      	movs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	4252      	negs	r2, r2
 8005304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3308      	adds	r3, #8
 800530a:	001a      	movs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3308      	adds	r3, #8
 8005314:	001a      	movs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	46bd      	mov	sp, r7
 8005324:	b002      	add	sp, #8
 8005326:	bd80      	pop	{r7, pc}

08005328 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}

0800533e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}

08005382 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	3301      	adds	r3, #1
 8005396:	d103      	bne.n	80053a0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e00c      	b.n	80053ba <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3308      	adds	r3, #8
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e002      	b.n	80053ae <vListInsert+0x2c>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d2f6      	bcs.n	80053a8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bd80      	pop	{r7, pc}

080053ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6852      	ldr	r2, [r2, #4]
 800540e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d103      	bne.n	8005422 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b004      	add	sp, #16
 800543c:	bd80      	pop	{r7, pc}

0800543e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <xQueueGenericReset+0x18>
 8005452:	b672      	cpsid	i
 8005454:	e7fe      	b.n	8005454 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005456:	f001 ffeb 	bl	8007430 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	434b      	muls	r3, r1
 8005468:	18d2      	adds	r2, r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	1e59      	subs	r1, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	434b      	muls	r3, r1
 800548c:	18d2      	adds	r2, r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2244      	movs	r2, #68	; 0x44
 8005496:	21ff      	movs	r1, #255	; 0xff
 8005498:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2245      	movs	r2, #69	; 0x45
 800549e:	21ff      	movs	r1, #255	; 0xff
 80054a0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3310      	adds	r3, #16
 80054b4:	0018      	movs	r0, r3
 80054b6:	f000 ffff 	bl	80064b8 <xTaskRemoveFromEventList>
 80054ba:	1e03      	subs	r3, r0, #0
 80054bc:	d00c      	beq.n	80054d8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054be:	f001 ffa7 	bl	8007410 <vPortYield>
 80054c2:	e009      	b.n	80054d8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3310      	adds	r3, #16
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff ff0f 	bl	80052ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3324      	adds	r3, #36	; 0x24
 80054d2:	0018      	movs	r0, r3
 80054d4:	f7ff ff0a 	bl	80052ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054d8:	f001 ffbc 	bl	8007454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054dc:	2301      	movs	r3, #1
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054e6:	b590      	push	{r4, r7, lr}
 80054e8:	b089      	sub	sp, #36	; 0x24
 80054ea:	af02      	add	r7, sp, #8
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <xQueueGenericCreateStatic+0x18>
 80054fa:	b672      	cpsid	i
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <xQueueGenericCreateStatic+0x22>
 8005504:	b672      	cpsid	i
 8005506:	e7fe      	b.n	8005506 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <xQueueGenericCreateStatic+0x2e>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <xQueueGenericCreateStatic+0x32>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <xQueueGenericCreateStatic+0x34>
 8005518:	2300      	movs	r3, #0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <xQueueGenericCreateStatic+0x3c>
 800551e:	b672      	cpsid	i
 8005520:	e7fe      	b.n	8005520 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <xQueueGenericCreateStatic+0x48>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <xQueueGenericCreateStatic+0x4c>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <xQueueGenericCreateStatic+0x4e>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <xQueueGenericCreateStatic+0x56>
 8005538:	b672      	cpsid	i
 800553a:	e7fe      	b.n	800553a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800553c:	2350      	movs	r3, #80	; 0x50
 800553e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b50      	cmp	r3, #80	; 0x50
 8005544:	d001      	beq.n	800554a <xQueueGenericCreateStatic+0x64>
 8005546:	b672      	cpsid	i
 8005548:	e7fe      	b.n	8005548 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800554a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2246      	movs	r2, #70	; 0x46
 800555a:	2101      	movs	r1, #1
 800555c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800555e:	2328      	movs	r3, #40	; 0x28
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	781c      	ldrb	r4, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	0023      	movs	r3, r4
 8005570:	f000 f805 	bl	800557e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005574:	697b      	ldr	r3, [r7, #20]
	}
 8005576:	0018      	movs	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	b007      	add	sp, #28
 800557c:	bd90      	pop	{r4, r7, pc}

0800557e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	001a      	movs	r2, r3
 800558c:	1cfb      	adds	r3, r7, #3
 800558e:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e002      	b.n	80055a4 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2101      	movs	r1, #1
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7ff ff42 	bl	800543e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1cfa      	adds	r2, r7, #3
 80055be:	214c      	movs	r1, #76	; 0x4c
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055c4:	46c0      	nop			; (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b004      	add	sp, #16
 80055ca:	bd80      	pop	{r7, pc}

080055cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055da:	2300      	movs	r3, #0
 80055dc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <xQueueGenericSend+0x20>
 80055e8:	b672      	cpsid	i
 80055ea:	e7fe      	b.n	80055ea <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <xQueueGenericSend+0x2e>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <xQueueGenericSend+0x32>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <xQueueGenericSend+0x34>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <xQueueGenericSend+0x3c>
 8005604:	b672      	cpsid	i
 8005606:	e7fe      	b.n	8005606 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d103      	bne.n	8005616 <xQueueGenericSend+0x4a>
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <xQueueGenericSend+0x4e>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericSend+0x50>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <xQueueGenericSend+0x58>
 8005620:	b672      	cpsid	i
 8005622:	e7fe      	b.n	8005622 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005624:	f001 f8e0 	bl	80067e8 <xTaskGetSchedulerState>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d102      	bne.n	8005632 <xQueueGenericSend+0x66>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <xQueueGenericSend+0x6a>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericSend+0x6c>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <xQueueGenericSend+0x74>
 800563c:	b672      	cpsid	i
 800563e:	e7fe      	b.n	800563e <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005640:	f001 fef6 	bl	8007430 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564c:	429a      	cmp	r2, r3
 800564e:	d302      	bcc.n	8005656 <xQueueGenericSend+0x8a>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d11e      	bne.n	8005694 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	0018      	movs	r0, r3
 800565e:	f000 f9a2 	bl	80059a6 <prvCopyDataToQueue>
 8005662:	0003      	movs	r3, r0
 8005664:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	3324      	adds	r3, #36	; 0x24
 8005672:	0018      	movs	r0, r3
 8005674:	f000 ff20 	bl	80064b8 <xTaskRemoveFromEventList>
 8005678:	1e03      	subs	r3, r0, #0
 800567a:	d007      	beq.n	800568c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800567c:	f001 fec8 	bl	8007410 <vPortYield>
 8005680:	e004      	b.n	800568c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005688:	f001 fec2 	bl	8007410 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800568c:	f001 fee2 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 8005690:	2301      	movs	r3, #1
 8005692:	e05b      	b.n	800574c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800569a:	f001 fedb 	bl	8007454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	e054      	b.n	800574c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056a8:	2314      	movs	r3, #20
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 ff5f 	bl	8006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056b6:	f001 fecd 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056ba:	f000 fd09 	bl	80060d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056be:	f001 feb7 	bl	8007430 <vPortEnterCritical>
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	2244      	movs	r2, #68	; 0x44
 80056c6:	5c9b      	ldrb	r3, [r3, r2]
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSend+0x10a>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2244      	movs	r2, #68	; 0x44
 80056d2:	2100      	movs	r1, #0
 80056d4:	5499      	strb	r1, [r3, r2]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2245      	movs	r2, #69	; 0x45
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	b25b      	sxtb	r3, r3
 80056de:	3301      	adds	r3, #1
 80056e0:	d103      	bne.n	80056ea <xQueueGenericSend+0x11e>
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	2245      	movs	r2, #69	; 0x45
 80056e6:	2100      	movs	r1, #0
 80056e8:	5499      	strb	r1, [r3, r2]
 80056ea:	f001 feb3 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ee:	1d3a      	adds	r2, r7, #4
 80056f0:	2314      	movs	r3, #20
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	0011      	movs	r1, r2
 80056f6:	0018      	movs	r0, r3
 80056f8:	f000 ff4e 	bl	8006598 <xTaskCheckForTimeOut>
 80056fc:	1e03      	subs	r3, r0, #0
 80056fe:	d11e      	bne.n	800573e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fa54 	bl	8005bb0 <prvIsQueueFull>
 8005708:	1e03      	subs	r3, r0, #0
 800570a:	d011      	beq.n	8005730 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	3310      	adds	r3, #16
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f000 fe8b 	bl	8006430 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	0018      	movs	r0, r3
 800571e:	f000 f9d3 	bl	8005ac8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005722:	f000 fce1 	bl	80060e8 <xTaskResumeAll>
 8005726:	1e03      	subs	r3, r0, #0
 8005728:	d18a      	bne.n	8005640 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800572a:	f001 fe71 	bl	8007410 <vPortYield>
 800572e:	e787      	b.n	8005640 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f9c8 	bl	8005ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005738:	f000 fcd6 	bl	80060e8 <xTaskResumeAll>
 800573c:	e780      	b.n	8005640 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	0018      	movs	r0, r3
 8005742:	f000 f9c1 	bl	8005ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005746:	f000 fccf 	bl	80060e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800574a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800574c:	0018      	movs	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	b00a      	add	sp, #40	; 0x28
 8005752:	bd80      	pop	{r7, pc}

08005754 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b08b      	sub	sp, #44	; 0x2c
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueGenericSendFromISR+0x1c>
 800576c:	b672      	cpsid	i
 800576e:	e7fe      	b.n	800576e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <xQueueGenericSendFromISR+0x2a>
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <xQueueGenericSendFromISR+0x2e>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <xQueueGenericSendFromISR+0x30>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xQueueGenericSendFromISR+0x38>
 8005788:	b672      	cpsid	i
 800578a:	e7fe      	b.n	800578a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d103      	bne.n	800579a <xQueueGenericSendFromISR+0x46>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <xQueueGenericSendFromISR+0x4a>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericSendFromISR+0x4c>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <xQueueGenericSendFromISR+0x54>
 80057a4:	b672      	cpsid	i
 80057a6:	e7fe      	b.n	80057a6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057a8:	f001 fe6c 	bl	8007484 <ulSetInterruptMaskFromISR>
 80057ac:	0003      	movs	r3, r0
 80057ae:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d302      	bcc.n	80057c2 <xQueueGenericSendFromISR+0x6e>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d131      	bne.n	8005826 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057c2:	241b      	movs	r4, #27
 80057c4:	193b      	adds	r3, r7, r4
 80057c6:	6a3a      	ldr	r2, [r7, #32]
 80057c8:	2145      	movs	r1, #69	; 0x45
 80057ca:	5c52      	ldrb	r2, [r2, r1]
 80057cc:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	0018      	movs	r0, r3
 80057dc:	f000 f8e3 	bl	80059a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057e0:	193b      	adds	r3, r7, r4
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	b25b      	sxtb	r3, r3
 80057e6:	3301      	adds	r3, #1
 80057e8:	d111      	bne.n	800580e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	3324      	adds	r3, #36	; 0x24
 80057f6:	0018      	movs	r0, r3
 80057f8:	f000 fe5e 	bl	80064b8 <xTaskRemoveFromEventList>
 80057fc:	1e03      	subs	r3, r0, #0
 80057fe:	d00f      	beq.n	8005820 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00c      	beq.n	8005820 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e008      	b.n	8005820 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800580e:	231b      	movs	r3, #27
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	b259      	sxtb	r1, r3
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2245      	movs	r2, #69	; 0x45
 800581e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005820:	2301      	movs	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8005824:	e001      	b.n	800582a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005826:	2300      	movs	r3, #0
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	0018      	movs	r0, r3
 800582e:	f001 fe2f 	bl	8007490 <vClearInterruptMaskFromISR>

	return xReturn;
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b00b      	add	sp, #44	; 0x2c
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005848:	2300      	movs	r3, #0
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <xQueueReceive+0x1e>
 8005856:	b672      	cpsid	i
 8005858:	e7fe      	b.n	8005858 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <xQueueReceive+0x2c>
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <xQueueReceive+0x30>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <xQueueReceive+0x32>
 800586c:	2300      	movs	r3, #0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <xQueueReceive+0x3a>
 8005872:	b672      	cpsid	i
 8005874:	e7fe      	b.n	8005874 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005876:	f000 ffb7 	bl	80067e8 <xTaskGetSchedulerState>
 800587a:	1e03      	subs	r3, r0, #0
 800587c:	d102      	bne.n	8005884 <xQueueReceive+0x48>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <xQueueReceive+0x4c>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <xQueueReceive+0x4e>
 8005888:	2300      	movs	r3, #0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <xQueueReceive+0x56>
 800588e:	b672      	cpsid	i
 8005890:	e7fe      	b.n	8005890 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005892:	f001 fdcd 	bl	8007430 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d01a      	beq.n	80058d8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 f8e7 	bl	8005a7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	1e5a      	subs	r2, r3, #1
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	3310      	adds	r3, #16
 80058c2:	0018      	movs	r0, r3
 80058c4:	f000 fdf8 	bl	80064b8 <xTaskRemoveFromEventList>
 80058c8:	1e03      	subs	r3, r0, #0
 80058ca:	d001      	beq.n	80058d0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058cc:	f001 fda0 	bl	8007410 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058d0:	f001 fdc0 	bl	8007454 <vPortExitCritical>
				return pdPASS;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e062      	b.n	800599e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058de:	f001 fdb9 	bl	8007454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e05b      	b.n	800599e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058ec:	2314      	movs	r3, #20
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 fe3d 	bl	8006570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058f6:	2301      	movs	r3, #1
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058fa:	f001 fdab 	bl	8007454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058fe:	f000 fbe7 	bl	80060d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005902:	f001 fd95 	bl	8007430 <vPortEnterCritical>
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	2244      	movs	r2, #68	; 0x44
 800590a:	5c9b      	ldrb	r3, [r3, r2]
 800590c:	b25b      	sxtb	r3, r3
 800590e:	3301      	adds	r3, #1
 8005910:	d103      	bne.n	800591a <xQueueReceive+0xde>
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2244      	movs	r2, #68	; 0x44
 8005916:	2100      	movs	r1, #0
 8005918:	5499      	strb	r1, [r3, r2]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2245      	movs	r2, #69	; 0x45
 800591e:	5c9b      	ldrb	r3, [r3, r2]
 8005920:	b25b      	sxtb	r3, r3
 8005922:	3301      	adds	r3, #1
 8005924:	d103      	bne.n	800592e <xQueueReceive+0xf2>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	2245      	movs	r2, #69	; 0x45
 800592a:	2100      	movs	r1, #0
 800592c:	5499      	strb	r1, [r3, r2]
 800592e:	f001 fd91 	bl	8007454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005932:	1d3a      	adds	r2, r7, #4
 8005934:	2314      	movs	r3, #20
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	0011      	movs	r1, r2
 800593a:	0018      	movs	r0, r3
 800593c:	f000 fe2c 	bl	8006598 <xTaskCheckForTimeOut>
 8005940:	1e03      	subs	r3, r0, #0
 8005942:	d11e      	bne.n	8005982 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 f91c 	bl	8005b84 <prvIsQueueEmpty>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d011      	beq.n	8005974 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	0011      	movs	r1, r2
 8005958:	0018      	movs	r0, r3
 800595a:	f000 fd69 	bl	8006430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	0018      	movs	r0, r3
 8005962:	f000 f8b1 	bl	8005ac8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005966:	f000 fbbf 	bl	80060e8 <xTaskResumeAll>
 800596a:	1e03      	subs	r3, r0, #0
 800596c:	d191      	bne.n	8005892 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800596e:	f001 fd4f 	bl	8007410 <vPortYield>
 8005972:	e78e      	b.n	8005892 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	0018      	movs	r0, r3
 8005978:	f000 f8a6 	bl	8005ac8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800597c:	f000 fbb4 	bl	80060e8 <xTaskResumeAll>
 8005980:	e787      	b.n	8005892 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	0018      	movs	r0, r3
 8005986:	f000 f89f 	bl	8005ac8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800598a:	f000 fbad 	bl	80060e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	0018      	movs	r0, r3
 8005992:	f000 f8f7 	bl	8005b84 <prvIsQueueEmpty>
 8005996:	1e03      	subs	r3, r0, #0
 8005998:	d100      	bne.n	800599c <xQueueReceive+0x160>
 800599a:	e77a      	b.n	8005892 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800599c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b00a      	add	sp, #40	; 0x28
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10e      	bne.n	80059e2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d14e      	bne.n	8005a6a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 ff25 	bl	8006820 <xTaskPriorityDisinherit>
 80059d6:	0003      	movs	r3, r0
 80059d8:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e043      	b.n	8005a6a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d119      	bne.n	8005a1c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6858      	ldr	r0, [r3, #4]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	0019      	movs	r1, r3
 80059f4:	f001 ff8c 	bl	8007910 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	18d2      	adds	r2, r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d32b      	bcc.n	8005a6a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	e026      	b.n	8005a6a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68d8      	ldr	r0, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	0019      	movs	r1, r3
 8005a28:	f001 ff72 	bl	8007910 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	425b      	negs	r3, r3
 8005a36:	18d2      	adds	r2, r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d207      	bcs.n	8005a58 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	425b      	negs	r3, r3
 8005a52:	18d2      	adds	r2, r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d105      	bne.n	8005a6a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a72:	697b      	ldr	r3, [r7, #20]
}
 8005a74:	0018      	movs	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b006      	add	sp, #24
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	18d2      	adds	r2, r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d303      	bcc.n	8005ab0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68d9      	ldr	r1, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f001 ff28 	bl	8007910 <memcpy>
	}
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ad0:	f001 fcae 	bl	8007430 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad4:	230f      	movs	r3, #15
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	2145      	movs	r1, #69	; 0x45
 8005adc:	5c52      	ldrb	r2, [r2, r1]
 8005ade:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	e013      	b.n	8005b0a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 fce2 	bl	80064b8 <xTaskRemoveFromEventList>
 8005af4:	1e03      	subs	r3, r0, #0
 8005af6:	d001      	beq.n	8005afc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005af8:	f000 fd9e 	bl	8006638 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005afc:	210f      	movs	r1, #15
 8005afe:	187b      	adds	r3, r7, r1
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b0a:	230f      	movs	r3, #15
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dce5      	bgt.n	8005ae2 <prvUnlockQueue+0x1a>
 8005b16:	e000      	b.n	8005b1a <prvUnlockQueue+0x52>
					break;
 8005b18:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2245      	movs	r2, #69	; 0x45
 8005b1e:	21ff      	movs	r1, #255	; 0xff
 8005b20:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005b22:	f001 fc97 	bl	8007454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b26:	f001 fc83 	bl	8007430 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b2a:	230e      	movs	r3, #14
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	2144      	movs	r1, #68	; 0x44
 8005b32:	5c52      	ldrb	r2, [r2, r1]
 8005b34:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b36:	e013      	b.n	8005b60 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d016      	beq.n	8005b6e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3310      	adds	r3, #16
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 fcb7 	bl	80064b8 <xTaskRemoveFromEventList>
 8005b4a:	1e03      	subs	r3, r0, #0
 8005b4c:	d001      	beq.n	8005b52 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005b4e:	f000 fd73 	bl	8006638 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b52:	210e      	movs	r1, #14
 8005b54:	187b      	adds	r3, r7, r1
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b60:	230e      	movs	r3, #14
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	b25b      	sxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dce5      	bgt.n	8005b38 <prvUnlockQueue+0x70>
 8005b6c:	e000      	b.n	8005b70 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005b6e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2244      	movs	r2, #68	; 0x44
 8005b74:	21ff      	movs	r1, #255	; 0xff
 8005b76:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005b78:	f001 fc6c 	bl	8007454 <vPortExitCritical>
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b004      	add	sp, #16
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b8c:	f001 fc50 	bl	8007430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d102      	bne.n	8005b9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e001      	b.n	8005ba2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ba2:	f001 fc57 	bl	8007454 <vPortExitCritical>

	return xReturn;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b004      	add	sp, #16
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bb8:	f001 fc3a 	bl	8007430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d102      	bne.n	8005bce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	e001      	b.n	8005bd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bd2:	f001 fc3f 	bl	8007454 <vPortExitCritical>

	return xReturn;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b004      	add	sp, #16
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e015      	b.n	8005c1c <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <vQueueAddToRegistry+0x4c>)
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	00d2      	lsls	r2, r2, #3
 8005bf6:	58d3      	ldr	r3, [r2, r3]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10c      	bne.n	8005c16 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <vQueueAddToRegistry+0x4c>)
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	00d2      	lsls	r2, r2, #3
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c06:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <vQueueAddToRegistry+0x4c>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	18d3      	adds	r3, r2, r3
 8005c0e:	3304      	adds	r3, #4
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c14:	e006      	b.n	8005c24 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b07      	cmp	r3, #7
 8005c20:	d9e6      	bls.n	8005bf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000970 	.word	0x20000970

08005c30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c40:	f001 fbf6 	bl	8007430 <vPortEnterCritical>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2244      	movs	r2, #68	; 0x44
 8005c48:	5c9b      	ldrb	r3, [r3, r2]
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	d103      	bne.n	8005c58 <vQueueWaitForMessageRestricted+0x28>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2244      	movs	r2, #68	; 0x44
 8005c54:	2100      	movs	r1, #0
 8005c56:	5499      	strb	r1, [r3, r2]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2245      	movs	r2, #69	; 0x45
 8005c5c:	5c9b      	ldrb	r3, [r3, r2]
 8005c5e:	b25b      	sxtb	r3, r3
 8005c60:	3301      	adds	r3, #1
 8005c62:	d103      	bne.n	8005c6c <vQueueWaitForMessageRestricted+0x3c>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2245      	movs	r2, #69	; 0x45
 8005c68:	2100      	movs	r1, #0
 8005c6a:	5499      	strb	r1, [r3, r2]
 8005c6c:	f001 fbf2 	bl	8007454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	3324      	adds	r3, #36	; 0x24
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f000 fbf3 	bl	800646c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7ff ff1d 	bl	8005ac8 <prvUnlockQueue>
	}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b006      	add	sp, #24
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c96:	b590      	push	{r4, r7, lr}
 8005c98:	b08d      	sub	sp, #52	; 0x34
 8005c9a:	af04      	add	r7, sp, #16
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <xTaskCreateStatic+0x18>
 8005caa:	b672      	cpsid	i
 8005cac:	e7fe      	b.n	8005cac <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <xTaskCreateStatic+0x22>
 8005cb4:	b672      	cpsid	i
 8005cb6:	e7fe      	b.n	8005cb6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cb8:	23bc      	movs	r3, #188	; 0xbc
 8005cba:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2bbc      	cmp	r3, #188	; 0xbc
 8005cc0:	d001      	beq.n	8005cc6 <xTaskCreateStatic+0x30>
 8005cc2:	b672      	cpsid	i
 8005cc4:	e7fe      	b.n	8005cc4 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cc6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d020      	beq.n	8005d10 <xTaskCreateStatic+0x7a>
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01d      	beq.n	8005d10 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	22b9      	movs	r2, #185	; 0xb9
 8005ce2:	2102      	movs	r1, #2
 8005ce4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ce6:	683c      	ldr	r4, [r7, #0]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9303      	str	r3, [sp, #12]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	9302      	str	r3, [sp, #8]
 8005cf6:	2318      	movs	r3, #24
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	0023      	movs	r3, r4
 8005d02:	f000 f859 	bl	8005db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f8f5 	bl	8005ef8 <prvAddNewTaskToReadyList>
 8005d0e:	e001      	b.n	8005d14 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d14:	69bb      	ldr	r3, [r7, #24]
	}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b009      	add	sp, #36	; 0x24
 8005d1c:	bd90      	pop	{r4, r7, pc}

08005d1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d1e:	b590      	push	{r4, r7, lr}
 8005d20:	b08d      	sub	sp, #52	; 0x34
 8005d22:	af04      	add	r7, sp, #16
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	1dbb      	adds	r3, r7, #6
 8005d2c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d2e:	1dbb      	adds	r3, r7, #6
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	0018      	movs	r0, r3
 8005d36:	f001 fc13 	bl	8007560 <pvPortMalloc>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d44:	20bc      	movs	r0, #188	; 0xbc
 8005d46:	f001 fc0b 	bl	8007560 <pvPortMalloc>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
 8005d5a:	e006      	b.n	8005d6a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f001 fcaa 	bl	80076b8 <vPortFree>
 8005d64:	e001      	b.n	8005d6a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	22b9      	movs	r2, #185	; 0xb9
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d78:	1dbb      	adds	r3, r7, #6
 8005d7a:	881a      	ldrh	r2, [r3, #0]
 8005d7c:	683c      	ldr	r4, [r7, #0]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	2300      	movs	r3, #0
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	9301      	str	r3, [sp, #4]
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	0023      	movs	r3, r4
 8005d94:	f000 f810 	bl	8005db8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f000 f8ac 	bl	8005ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005da0:	2301      	movs	r3, #1
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e002      	b.n	8005dac <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005da6:	2301      	movs	r3, #1
 8005da8:	425b      	negs	r3, r3
 8005daa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dac:	69bb      	ldr	r3, [r7, #24]
	}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b009      	add	sp, #36	; 0x24
 8005db4:	bd90      	pop	{r4, r7, pc}
	...

08005db8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	001a      	movs	r2, r3
 8005dd0:	21a5      	movs	r1, #165	; 0xa5
 8005dd2:	f001 fda6 	bl	8007922 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4942      	ldr	r1, [pc, #264]	; (8005ee8 <prvInitialiseNewTask+0x130>)
 8005dde:	468c      	mov	ip, r1
 8005de0:	4463      	add	r3, ip
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2207      	movs	r2, #7
 8005dec:	4393      	bics	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2207      	movs	r2, #7
 8005df4:	4013      	ands	r3, r2
 8005df6:	d001      	beq.n	8005dfc <prvInitialiseNewTask+0x44>
 8005df8:	b672      	cpsid	i
 8005dfa:	e7fe      	b.n	8005dfa <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d020      	beq.n	8005e44 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e013      	b.n	8005e30 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	7818      	ldrb	r0, [r3, #0]
 8005e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e12:	2134      	movs	r1, #52	; 0x34
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	18d3      	adds	r3, r2, r3
 8005e18:	185b      	adds	r3, r3, r1
 8005e1a:	1c02      	adds	r2, r0, #0
 8005e1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b0f      	cmp	r3, #15
 8005e34:	d9e8      	bls.n	8005e08 <prvInitialiseNewTask+0x50>
 8005e36:	e000      	b.n	8005e3a <prvInitialiseNewTask+0x82>
			{
				break;
 8005e38:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	2243      	movs	r2, #67	; 0x43
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]
 8005e42:	e003      	b.n	8005e4c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2234      	movs	r2, #52	; 0x34
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	2b37      	cmp	r3, #55	; 0x37
 8005e50:	d901      	bls.n	8005e56 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e52:	2337      	movs	r3, #55	; 0x37
 8005e54:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2200      	movs	r2, #0
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f7ff fa5b 	bl	8005328 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	3318      	adds	r3, #24
 8005e76:	0018      	movs	r0, r3
 8005e78:	f7ff fa56 	bl	8005328 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	2238      	movs	r2, #56	; 0x38
 8005e86:	1ad2      	subs	r2, r2, r3
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	22b4      	movs	r2, #180	; 0xb4
 8005e96:	2100      	movs	r1, #0
 8005e98:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	22b8      	movs	r2, #184	; 0xb8
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	3354      	adds	r3, #84	; 0x54
 8005ea6:	2260      	movs	r2, #96	; 0x60
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f001 fd39 	bl	8007922 <memset>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <prvInitialiseNewTask+0x134>)
 8005eb4:	659a      	str	r2, [r3, #88]	; 0x58
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <prvInitialiseNewTask+0x138>)
 8005eba:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <prvInitialiseNewTask+0x13c>)
 8005ec0:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f001 fa19 	bl	8007300 <pxPortInitialiseStack>
 8005ece:	0002      	movs	r2, r0
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ede:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b006      	add	sp, #24
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	3fffffff 	.word	0x3fffffff
 8005eec:	08007d2c 	.word	0x08007d2c
 8005ef0:	08007d4c 	.word	0x08007d4c
 8005ef4:	08007d0c 	.word	0x08007d0c

08005ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f00:	f001 fa96 	bl	8007430 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f04:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <prvAddNewTaskToReadyList+0xb8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	4b29      	ldr	r3, [pc, #164]	; (8005fb0 <prvAddNewTaskToReadyList+0xb8>)
 8005f0c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005f0e:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f16:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f1c:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <prvAddNewTaskToReadyList+0xb8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d110      	bne.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f24:	f000 fba2 	bl	800666c <prvInitialiseTaskLists>
 8005f28:	e00d      	b.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f2a:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <prvAddNewTaskToReadyList+0xc0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d802      	bhi.n	8005f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f40:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f46:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <prvAddNewTaskToReadyList+0xc4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <prvAddNewTaskToReadyList+0xc4>)
 8005f4e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <prvAddNewTaskToReadyList+0xc4>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <prvAddNewTaskToReadyList+0xc8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d903      	bls.n	8005f6c <prvAddNewTaskToReadyList+0x74>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <prvAddNewTaskToReadyList+0xc8>)
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	0013      	movs	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	189b      	adds	r3, r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4a12      	ldr	r2, [pc, #72]	; (8005fc4 <prvAddNewTaskToReadyList+0xcc>)
 8005f7a:	189a      	adds	r2, r3, r2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	0019      	movs	r1, r3
 8005f82:	0010      	movs	r0, r2
 8005f84:	f7ff f9db 	bl	800533e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f88:	f001 fa64 	bl	8007454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <prvAddNewTaskToReadyList+0xc0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d008      	beq.n	8005fa6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <prvAddNewTaskToReadyList+0xbc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d201      	bcs.n	8005fa6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fa2:	f001 fa35 	bl	8007410 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b002      	add	sp, #8
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	20000e84 	.word	0x20000e84
 8005fb4:	200009b0 	.word	0x200009b0
 8005fb8:	20000e90 	.word	0x20000e90
 8005fbc:	20000ea0 	.word	0x20000ea0
 8005fc0:	20000e8c 	.word	0x20000e8c
 8005fc4:	200009b4 	.word	0x200009b4

08005fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <vTaskDelay+0x48>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <vTaskDelay+0x1e>
 8005fe2:	b672      	cpsid	i
 8005fe4:	e7fe      	b.n	8005fe4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005fe6:	f000 f873 	bl	80060d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2100      	movs	r1, #0
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f000 fe20 	bl	8006c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ff4:	f000 f878 	bl	80060e8 <xTaskResumeAll>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006002:	f001 fa05 	bl	8007410 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	20000eac 	.word	0x20000eac

08006014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006014:	b590      	push	{r4, r7, lr}
 8006016:	b089      	sub	sp, #36	; 0x24
 8006018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006022:	003a      	movs	r2, r7
 8006024:	1d39      	adds	r1, r7, #4
 8006026:	2308      	movs	r3, #8
 8006028:	18fb      	adds	r3, r7, r3
 800602a:	0018      	movs	r0, r3
 800602c:	f7ff f92e 	bl	800528c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006030:	683c      	ldr	r4, [r7, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	491e      	ldr	r1, [pc, #120]	; (80060b0 <vTaskStartScheduler+0x9c>)
 8006038:	481e      	ldr	r0, [pc, #120]	; (80060b4 <vTaskStartScheduler+0xa0>)
 800603a:	9202      	str	r2, [sp, #8]
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	2300      	movs	r3, #0
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2300      	movs	r3, #0
 8006044:	0022      	movs	r2, r4
 8006046:	f7ff fe26 	bl	8005c96 <xTaskCreateStatic>
 800604a:	0002      	movs	r2, r0
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <vTaskStartScheduler+0xa4>)
 800604e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <vTaskStartScheduler+0xa4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006058:	2301      	movs	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e001      	b.n	8006062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d103      	bne.n	8006070 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006068:	f000 fe38 	bl	8006cdc <xTimerCreateTimerTask>
 800606c:	0003      	movs	r3, r0
 800606e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d113      	bne.n	800609e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006076:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006078:	4b10      	ldr	r3, [pc, #64]	; (80060bc <vTaskStartScheduler+0xa8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3354      	adds	r3, #84	; 0x54
 800607e:	001a      	movs	r2, r3
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <vTaskStartScheduler+0xac>)
 8006082:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <vTaskStartScheduler+0xb0>)
 8006086:	2201      	movs	r2, #1
 8006088:	4252      	negs	r2, r2
 800608a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800608c:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <vTaskStartScheduler+0xb4>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <vTaskStartScheduler+0xb8>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006098:	f001 f996 	bl	80073c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800609c:	e004      	b.n	80060a8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	d101      	bne.n	80060a8 <vTaskStartScheduler+0x94>
 80060a4:	b672      	cpsid	i
 80060a6:	e7fe      	b.n	80060a6 <vTaskStartScheduler+0x92>
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b005      	add	sp, #20
 80060ae:	bd90      	pop	{r4, r7, pc}
 80060b0:	08007b34 	.word	0x08007b34
 80060b4:	0800664d 	.word	0x0800664d
 80060b8:	20000ea8 	.word	0x20000ea8
 80060bc:	200009b0 	.word	0x200009b0
 80060c0:	20000014 	.word	0x20000014
 80060c4:	20000ea4 	.word	0x20000ea4
 80060c8:	20000e90 	.word	0x20000e90
 80060cc:	20000e88 	.word	0x20000e88

080060d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060d4:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <vTaskSuspendAll+0x14>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	4b02      	ldr	r3, [pc, #8]	; (80060e4 <vTaskSuspendAll+0x14>)
 80060dc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000eac 	.word	0x20000eac

080060e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060f6:	4b3a      	ldr	r3, [pc, #232]	; (80061e0 <xTaskResumeAll+0xf8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <xTaskResumeAll+0x1a>
 80060fe:	b672      	cpsid	i
 8006100:	e7fe      	b.n	8006100 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006102:	f001 f995 	bl	8007430 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006106:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskResumeAll+0xf8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	1e5a      	subs	r2, r3, #1
 800610c:	4b34      	ldr	r3, [pc, #208]	; (80061e0 <xTaskResumeAll+0xf8>)
 800610e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006110:	4b33      	ldr	r3, [pc, #204]	; (80061e0 <xTaskResumeAll+0xf8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d15b      	bne.n	80061d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006118:	4b32      	ldr	r3, [pc, #200]	; (80061e4 <xTaskResumeAll+0xfc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d057      	beq.n	80061d0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006120:	e02f      	b.n	8006182 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006122:	4b31      	ldr	r3, [pc, #196]	; (80061e8 <xTaskResumeAll+0x100>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3318      	adds	r3, #24
 800612e:	0018      	movs	r0, r3
 8006130:	f7ff f95d 	bl	80053ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3304      	adds	r3, #4
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff f958 	bl	80053ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <xTaskResumeAll+0x104>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d903      	bls.n	8006152 <xTaskResumeAll+0x6a>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	4b27      	ldr	r3, [pc, #156]	; (80061ec <xTaskResumeAll+0x104>)
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	0013      	movs	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	189b      	adds	r3, r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4a24      	ldr	r2, [pc, #144]	; (80061f0 <xTaskResumeAll+0x108>)
 8006160:	189a      	adds	r2, r3, r2
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3304      	adds	r3, #4
 8006166:	0019      	movs	r1, r3
 8006168:	0010      	movs	r0, r2
 800616a:	f7ff f8e8 	bl	800533e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <xTaskResumeAll+0x10c>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800617c:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <xTaskResumeAll+0x110>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006182:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <xTaskResumeAll+0x100>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1cb      	bne.n	8006122 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006190:	f000 fb0c 	bl	80067ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006194:	4b19      	ldr	r3, [pc, #100]	; (80061fc <xTaskResumeAll+0x114>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00f      	beq.n	80061c0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061a0:	f000 f83c 	bl	800621c <xTaskIncrementTick>
 80061a4:	1e03      	subs	r3, r0, #0
 80061a6:	d002      	beq.n	80061ae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80061a8:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <xTaskResumeAll+0x110>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f2      	bne.n	80061a0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80061ba:	4b10      	ldr	r3, [pc, #64]	; (80061fc <xTaskResumeAll+0x114>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061c0:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <xTaskResumeAll+0x110>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061cc:	f001 f920 	bl	8007410 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061d0:	f001 f940 	bl	8007454 <vPortExitCritical>

	return xAlreadyYielded;
 80061d4:	68bb      	ldr	r3, [r7, #8]
}
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b004      	add	sp, #16
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	20000eac 	.word	0x20000eac
 80061e4:	20000e84 	.word	0x20000e84
 80061e8:	20000e44 	.word	0x20000e44
 80061ec:	20000e8c 	.word	0x20000e8c
 80061f0:	200009b4 	.word	0x200009b4
 80061f4:	200009b0 	.word	0x200009b0
 80061f8:	20000e98 	.word	0x20000e98
 80061fc:	20000e94 	.word	0x20000e94

08006200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006206:	4b04      	ldr	r3, [pc, #16]	; (8006218 <xTaskGetTickCount+0x18>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800620c:	687b      	ldr	r3, [r7, #4]
}
 800620e:	0018      	movs	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	b002      	add	sp, #8
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	20000e88 	.word	0x20000e88

0800621c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006226:	4b4a      	ldr	r3, [pc, #296]	; (8006350 <xTaskIncrementTick+0x134>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d000      	beq.n	8006230 <xTaskIncrementTick+0x14>
 800622e:	e084      	b.n	800633a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006230:	4b48      	ldr	r3, [pc, #288]	; (8006354 <xTaskIncrementTick+0x138>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006238:	4b46      	ldr	r3, [pc, #280]	; (8006354 <xTaskIncrementTick+0x138>)
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d117      	bne.n	8006274 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006244:	4b44      	ldr	r3, [pc, #272]	; (8006358 <xTaskIncrementTick+0x13c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <xTaskIncrementTick+0x36>
 800624e:	b672      	cpsid	i
 8006250:	e7fe      	b.n	8006250 <xTaskIncrementTick+0x34>
 8006252:	4b41      	ldr	r3, [pc, #260]	; (8006358 <xTaskIncrementTick+0x13c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	4b40      	ldr	r3, [pc, #256]	; (800635c <xTaskIncrementTick+0x140>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <xTaskIncrementTick+0x13c>)
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	4b3e      	ldr	r3, [pc, #248]	; (800635c <xTaskIncrementTick+0x140>)
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	4b3e      	ldr	r3, [pc, #248]	; (8006360 <xTaskIncrementTick+0x144>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	4b3c      	ldr	r3, [pc, #240]	; (8006360 <xTaskIncrementTick+0x144>)
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f000 fa9c 	bl	80067ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006274:	4b3b      	ldr	r3, [pc, #236]	; (8006364 <xTaskIncrementTick+0x148>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	429a      	cmp	r2, r3
 800627c:	d349      	bcc.n	8006312 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627e:	4b36      	ldr	r3, [pc, #216]	; (8006358 <xTaskIncrementTick+0x13c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006288:	4b36      	ldr	r3, [pc, #216]	; (8006364 <xTaskIncrementTick+0x148>)
 800628a:	2201      	movs	r2, #1
 800628c:	4252      	negs	r2, r2
 800628e:	601a      	str	r2, [r3, #0]
					break;
 8006290:	e03f      	b.n	8006312 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006292:	4b31      	ldr	r3, [pc, #196]	; (8006358 <xTaskIncrementTick+0x13c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d203      	bcs.n	80062b2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062aa:	4b2e      	ldr	r3, [pc, #184]	; (8006364 <xTaskIncrementTick+0x148>)
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062b0:	e02f      	b.n	8006312 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	3304      	adds	r3, #4
 80062b6:	0018      	movs	r0, r3
 80062b8:	f7ff f899 	bl	80053ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3318      	adds	r3, #24
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7ff f890 	bl	80053ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d2:	4b25      	ldr	r3, [pc, #148]	; (8006368 <xTaskIncrementTick+0x14c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d903      	bls.n	80062e2 <xTaskIncrementTick+0xc6>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062de:	4b22      	ldr	r3, [pc, #136]	; (8006368 <xTaskIncrementTick+0x14c>)
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	0013      	movs	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4a1f      	ldr	r2, [pc, #124]	; (800636c <xTaskIncrementTick+0x150>)
 80062f0:	189a      	adds	r2, r3, r2
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3304      	adds	r3, #4
 80062f6:	0019      	movs	r1, r3
 80062f8:	0010      	movs	r0, r2
 80062fa:	f7ff f820 	bl	800533e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006302:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <xTaskIncrementTick+0x154>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d3b8      	bcc.n	800627e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006310:	e7b5      	b.n	800627e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <xTaskIncrementTick+0x154>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	4914      	ldr	r1, [pc, #80]	; (800636c <xTaskIncrementTick+0x150>)
 800631a:	0013      	movs	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	189b      	adds	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	585b      	ldr	r3, [r3, r1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d901      	bls.n	800632c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800632c:	4b11      	ldr	r3, [pc, #68]	; (8006374 <xTaskIncrementTick+0x158>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e004      	b.n	8006344 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800633a:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <xTaskIncrementTick+0x15c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <xTaskIncrementTick+0x15c>)
 8006342:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006344:	697b      	ldr	r3, [r7, #20]
}
 8006346:	0018      	movs	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	b006      	add	sp, #24
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	20000eac 	.word	0x20000eac
 8006354:	20000e88 	.word	0x20000e88
 8006358:	20000e3c 	.word	0x20000e3c
 800635c:	20000e40 	.word	0x20000e40
 8006360:	20000e9c 	.word	0x20000e9c
 8006364:	20000ea4 	.word	0x20000ea4
 8006368:	20000e8c 	.word	0x20000e8c
 800636c:	200009b4 	.word	0x200009b4
 8006370:	200009b0 	.word	0x200009b0
 8006374:	20000e98 	.word	0x20000e98
 8006378:	20000e94 	.word	0x20000e94

0800637c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006382:	4b25      	ldr	r3, [pc, #148]	; (8006418 <vTaskSwitchContext+0x9c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <vTaskSwitchContext+0xa0>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006390:	e03d      	b.n	800640e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8006392:	4b22      	ldr	r3, [pc, #136]	; (800641c <vTaskSwitchContext+0xa0>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006398:	4b21      	ldr	r3, [pc, #132]	; (8006420 <vTaskSwitchContext+0xa4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	e007      	b.n	80063b0 <vTaskSwitchContext+0x34>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <vTaskSwitchContext+0x2e>
 80063a6:	b672      	cpsid	i
 80063a8:	e7fe      	b.n	80063a8 <vTaskSwitchContext+0x2c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	491c      	ldr	r1, [pc, #112]	; (8006424 <vTaskSwitchContext+0xa8>)
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	0013      	movs	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	189b      	adds	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	585b      	ldr	r3, [r3, r1]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0ee      	beq.n	80063a0 <vTaskSwitchContext+0x24>
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	0013      	movs	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	189b      	adds	r3, r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4a15      	ldr	r2, [pc, #84]	; (8006424 <vTaskSwitchContext+0xa8>)
 80063ce:	189b      	adds	r3, r3, r2
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	605a      	str	r2, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d104      	bne.n	80063f2 <vTaskSwitchContext+0x76>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <vTaskSwitchContext+0xac>)
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <vTaskSwitchContext+0xa4>)
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <vTaskSwitchContext+0xac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3354      	adds	r3, #84	; 0x54
 8006408:	001a      	movs	r2, r3
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <vTaskSwitchContext+0xb0>)
 800640c:	601a      	str	r2, [r3, #0]
}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b002      	add	sp, #8
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	20000eac 	.word	0x20000eac
 800641c:	20000e98 	.word	0x20000e98
 8006420:	20000e8c 	.word	0x20000e8c
 8006424:	200009b4 	.word	0x200009b4
 8006428:	200009b0 	.word	0x200009b0
 800642c:	20000014 	.word	0x20000014

08006430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <vTaskPlaceOnEventList+0x14>
 8006440:	b672      	cpsid	i
 8006442:	e7fe      	b.n	8006442 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006444:	4b08      	ldr	r3, [pc, #32]	; (8006468 <vTaskPlaceOnEventList+0x38>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3318      	adds	r3, #24
 800644a:	001a      	movs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	0011      	movs	r1, r2
 8006450:	0018      	movs	r0, r3
 8006452:	f7fe ff96 	bl	8005382 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2101      	movs	r1, #1
 800645a:	0018      	movs	r0, r3
 800645c:	f000 fbea 	bl	8006c34 <prvAddCurrentTaskToDelayedList>
}
 8006460:	46c0      	nop			; (mov r8, r8)
 8006462:	46bd      	mov	sp, r7
 8006464:	b002      	add	sp, #8
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200009b0 	.word	0x200009b0

0800646c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <vTaskPlaceOnEventListRestricted+0x16>
 800647e:	b672      	cpsid	i
 8006480:	e7fe      	b.n	8006480 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <vTaskPlaceOnEventListRestricted+0x48>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3318      	adds	r3, #24
 8006488:	001a      	movs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	0011      	movs	r1, r2
 800648e:	0018      	movs	r0, r3
 8006490:	f7fe ff55 	bl	800533e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800649a:	2301      	movs	r3, #1
 800649c:	425b      	negs	r3, r3
 800649e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	0011      	movs	r1, r2
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 fbc4 	bl	8006c34 <prvAddCurrentTaskToDelayedList>
	}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b004      	add	sp, #16
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	200009b0 	.word	0x200009b0

080064b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <xTaskRemoveFromEventList+0x1a>
 80064ce:	b672      	cpsid	i
 80064d0:	e7fe      	b.n	80064d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	3318      	adds	r3, #24
 80064d6:	0018      	movs	r0, r3
 80064d8:	f7fe ff89 	bl	80053ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064dc:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <xTaskRemoveFromEventList+0xa0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11d      	bne.n	8006520 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	3304      	adds	r3, #4
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7fe ff80 	bl	80053ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f2:	4b1a      	ldr	r3, [pc, #104]	; (800655c <xTaskRemoveFromEventList+0xa4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d903      	bls.n	8006502 <xTaskRemoveFromEventList+0x4a>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <xTaskRemoveFromEventList+0xa4>)
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	0013      	movs	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	189b      	adds	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <xTaskRemoveFromEventList+0xa8>)
 8006510:	189a      	adds	r2, r3, r2
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	3304      	adds	r3, #4
 8006516:	0019      	movs	r1, r3
 8006518:	0010      	movs	r0, r2
 800651a:	f7fe ff10 	bl	800533e <vListInsertEnd>
 800651e:	e007      	b.n	8006530 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3318      	adds	r3, #24
 8006524:	001a      	movs	r2, r3
 8006526:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <xTaskRemoveFromEventList+0xac>)
 8006528:	0011      	movs	r1, r2
 800652a:	0018      	movs	r0, r3
 800652c:	f7fe ff07 	bl	800533e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <xTaskRemoveFromEventList+0xb0>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	429a      	cmp	r2, r3
 800653c:	d905      	bls.n	800654a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <xTaskRemoveFromEventList+0xb4>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e001      	b.n	800654e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	0018      	movs	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	b004      	add	sp, #16
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20000eac 	.word	0x20000eac
 800655c:	20000e8c 	.word	0x20000e8c
 8006560:	200009b4 	.word	0x200009b4
 8006564:	20000e44 	.word	0x20000e44
 8006568:	200009b0 	.word	0x200009b0
 800656c:	20000e98 	.word	0x20000e98

08006570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <vTaskInternalSetTimeOutState+0x20>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <vTaskInternalSetTimeOutState+0x24>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b002      	add	sp, #8
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000e9c 	.word	0x20000e9c
 8006594:	20000e88 	.word	0x20000e88

08006598 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <xTaskCheckForTimeOut+0x14>
 80065a8:	b672      	cpsid	i
 80065aa:	e7fe      	b.n	80065aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <xTaskCheckForTimeOut+0x1e>
 80065b2:	b672      	cpsid	i
 80065b4:	e7fe      	b.n	80065b4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80065b6:	f000 ff3b 	bl	8007430 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <xTaskCheckForTimeOut+0x98>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	d102      	bne.n	80065d8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e024      	b.n	8006622 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b15      	ldr	r3, [pc, #84]	; (8006634 <xTaskCheckForTimeOut+0x9c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d007      	beq.n	80065f4 <xTaskCheckForTimeOut+0x5c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e016      	b.n	8006622 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20c      	bcs.n	8006618 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1ad2      	subs	r2, r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	f7ff ffaf 	bl	8006570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e004      	b.n	8006622 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006622:	f000 ff17 	bl	8007454 <vPortExitCritical>

	return xReturn;
 8006626:	697b      	ldr	r3, [r7, #20]
}
 8006628:	0018      	movs	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	b006      	add	sp, #24
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20000e88 	.word	0x20000e88
 8006634:	20000e9c 	.word	0x20000e9c

08006638 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800663c:	4b02      	ldr	r3, [pc, #8]	; (8006648 <vTaskMissedYield+0x10>)
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000e98 	.word	0x20000e98

0800664c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006654:	f000 f84e 	bl	80066f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006658:	4b03      	ldr	r3, [pc, #12]	; (8006668 <prvIdleTask+0x1c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d9f9      	bls.n	8006654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006660:	f000 fed6 	bl	8007410 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006664:	e7f6      	b.n	8006654 <prvIdleTask+0x8>
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	200009b4 	.word	0x200009b4

0800666c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006672:	2300      	movs	r3, #0
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	e00c      	b.n	8006692 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	0013      	movs	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	189b      	adds	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4a14      	ldr	r2, [pc, #80]	; (80066d4 <prvInitialiseTaskLists+0x68>)
 8006684:	189b      	adds	r3, r3, r2
 8006686:	0018      	movs	r0, r3
 8006688:	f7fe fe30 	bl	80052ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3301      	adds	r3, #1
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b37      	cmp	r3, #55	; 0x37
 8006696:	d9ef      	bls.n	8006678 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <prvInitialiseTaskLists+0x6c>)
 800669a:	0018      	movs	r0, r3
 800669c:	f7fe fe26 	bl	80052ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066a0:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <prvInitialiseTaskLists+0x70>)
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fe fe22 	bl	80052ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <prvInitialiseTaskLists+0x74>)
 80066aa:	0018      	movs	r0, r3
 80066ac:	f7fe fe1e 	bl	80052ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066b0:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <prvInitialiseTaskLists+0x78>)
 80066b2:	0018      	movs	r0, r3
 80066b4:	f7fe fe1a 	bl	80052ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <prvInitialiseTaskLists+0x7c>)
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7fe fe16 	bl	80052ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <prvInitialiseTaskLists+0x80>)
 80066c2:	4a05      	ldr	r2, [pc, #20]	; (80066d8 <prvInitialiseTaskLists+0x6c>)
 80066c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <prvInitialiseTaskLists+0x84>)
 80066c8:	4a04      	ldr	r2, [pc, #16]	; (80066dc <prvInitialiseTaskLists+0x70>)
 80066ca:	601a      	str	r2, [r3, #0]
}
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b002      	add	sp, #8
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	200009b4 	.word	0x200009b4
 80066d8:	20000e14 	.word	0x20000e14
 80066dc:	20000e28 	.word	0x20000e28
 80066e0:	20000e44 	.word	0x20000e44
 80066e4:	20000e58 	.word	0x20000e58
 80066e8:	20000e70 	.word	0x20000e70
 80066ec:	20000e3c 	.word	0x20000e3c
 80066f0:	20000e40 	.word	0x20000e40

080066f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066fa:	e01a      	b.n	8006732 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80066fc:	f000 fe98 	bl	8007430 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006700:	4b10      	ldr	r3, [pc, #64]	; (8006744 <prvCheckTasksWaitingTermination+0x50>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3304      	adds	r3, #4
 800670c:	0018      	movs	r0, r3
 800670e:	f7fe fe6e 	bl	80053ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006712:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <prvCheckTasksWaitingTermination+0x54>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <prvCheckTasksWaitingTermination+0x54>)
 800671a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	4b0a      	ldr	r3, [pc, #40]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 8006724:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006726:	f000 fe95 	bl	8007454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0018      	movs	r0, r3
 800672e:	f000 f80f 	bl	8006750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <prvCheckTasksWaitingTermination+0x58>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e0      	bne.n	80066fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	46c0      	nop			; (mov r8, r8)
 800673e:	46bd      	mov	sp, r7
 8006740:	b002      	add	sp, #8
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000e58 	.word	0x20000e58
 8006748:	20000e84 	.word	0x20000e84
 800674c:	20000e6c 	.word	0x20000e6c

08006750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3354      	adds	r3, #84	; 0x54
 800675c:	0018      	movs	r0, r3
 800675e:	f001 f8f5 	bl	800794c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	22b9      	movs	r2, #185	; 0xb9
 8006766:	5c9b      	ldrb	r3, [r3, r2]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	0018      	movs	r0, r3
 8006772:	f000 ffa1 	bl	80076b8 <vPortFree>
				vPortFree( pxTCB );
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f000 ff9d 	bl	80076b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800677e:	e010      	b.n	80067a2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	22b9      	movs	r2, #185	; 0xb9
 8006784:	5c9b      	ldrb	r3, [r3, r2]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d104      	bne.n	8006794 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 ff93 	bl	80076b8 <vPortFree>
	}
 8006792:	e006      	b.n	80067a2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	22b9      	movs	r2, #185	; 0xb9
 8006798:	5c9b      	ldrb	r3, [r3, r2]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d001      	beq.n	80067a2 <prvDeleteTCB+0x52>
 800679e:	b672      	cpsid	i
 80067a0:	e7fe      	b.n	80067a0 <prvDeleteTCB+0x50>
	}
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b002      	add	sp, #8
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b2:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <prvResetNextTaskUnblockTime+0x34>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067bc:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <prvResetNextTaskUnblockTime+0x38>)
 80067be:	2201      	movs	r2, #1
 80067c0:	4252      	negs	r2, r2
 80067c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067c4:	e008      	b.n	80067d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c6:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <prvResetNextTaskUnblockTime+0x34>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	4b03      	ldr	r3, [pc, #12]	; (80067e4 <prvResetNextTaskUnblockTime+0x38>)
 80067d6:	601a      	str	r2, [r3, #0]
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	46bd      	mov	sp, r7
 80067dc:	b002      	add	sp, #8
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000e3c 	.word	0x20000e3c
 80067e4:	20000ea4 	.word	0x20000ea4

080067e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <xTaskGetSchedulerState+0x30>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d102      	bne.n	80067fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067f6:	2301      	movs	r3, #1
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	e008      	b.n	800680e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <xTaskGetSchedulerState+0x34>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006804:	2302      	movs	r3, #2
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	e001      	b.n	800680e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800680e:	687b      	ldr	r3, [r7, #4]
	}
 8006810:	0018      	movs	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000e90 	.word	0x20000e90
 800681c:	20000eac 	.word	0x20000eac

08006820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d044      	beq.n	80068c0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006836:	4b25      	ldr	r3, [pc, #148]	; (80068cc <xTaskPriorityDisinherit+0xac>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <xTaskPriorityDisinherit+0x24>
 8006840:	b672      	cpsid	i
 8006842:	e7fe      	b.n	8006842 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <xTaskPriorityDisinherit+0x30>
 800684c:	b672      	cpsid	i
 800684e:	e7fe      	b.n	800684e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006854:	1e5a      	subs	r2, r3, #1
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006862:	429a      	cmp	r2, r3
 8006864:	d02c      	beq.n	80068c0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686a:	2b00      	cmp	r3, #0
 800686c:	d128      	bne.n	80068c0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3304      	adds	r3, #4
 8006872:	0018      	movs	r0, r3
 8006874:	f7fe fdbb 	bl	80053ee <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	2238      	movs	r2, #56	; 0x38
 8006886:	1ad2      	subs	r2, r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006890:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <xTaskPriorityDisinherit+0xb0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d903      	bls.n	80068a0 <xTaskPriorityDisinherit+0x80>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <xTaskPriorityDisinherit+0xb0>)
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a4:	0013      	movs	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4a09      	ldr	r2, [pc, #36]	; (80068d4 <xTaskPriorityDisinherit+0xb4>)
 80068ae:	189a      	adds	r2, r3, r2
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	3304      	adds	r3, #4
 80068b4:	0019      	movs	r1, r3
 80068b6:	0010      	movs	r0, r2
 80068b8:	f7fe fd41 	bl	800533e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068c0:	68fb      	ldr	r3, [r7, #12]
	}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b004      	add	sp, #16
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	200009b0 	.word	0x200009b0
 80068d0:	20000e8c 	.word	0x20000e8c
 80068d4:	200009b4 	.word	0x200009b4

080068d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80068e6:	f000 fda3 	bl	8007430 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80068ea:	4b26      	ldr	r3, [pc, #152]	; (8006984 <xTaskNotifyWait+0xac>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	22b8      	movs	r2, #184	; 0xb8
 80068f0:	5c9b      	ldrb	r3, [r3, r2]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d017      	beq.n	8006928 <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80068f8:	4b22      	ldr	r3, [pc, #136]	; (8006984 <xTaskNotifyWait+0xac>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	22b4      	movs	r2, #180	; 0xb4
 80068fe:	589a      	ldr	r2, [r3, r2]
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	43c9      	mvns	r1, r1
 8006904:	400a      	ands	r2, r1
 8006906:	21b4      	movs	r1, #180	; 0xb4
 8006908:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800690a:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <xTaskNotifyWait+0xac>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	22b8      	movs	r2, #184	; 0xb8
 8006910:	2101      	movs	r1, #1
 8006912:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d006      	beq.n	8006928 <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2101      	movs	r1, #1
 800691e:	0018      	movs	r0, r3
 8006920:	f000 f988 	bl	8006c34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006924:	f000 fd74 	bl	8007410 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006928:	f000 fd94 	bl	8007454 <vPortExitCritical>

		taskENTER_CRITICAL();
 800692c:	f000 fd80 	bl	8007430 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006936:	4b13      	ldr	r3, [pc, #76]	; (8006984 <xTaskNotifyWait+0xac>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	22b4      	movs	r2, #180	; 0xb4
 800693c:	589a      	ldr	r2, [r3, r2]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <xTaskNotifyWait+0xac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	22b8      	movs	r2, #184	; 0xb8
 8006948:	5c9b      	ldrb	r3, [r3, r2]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d002      	beq.n	8006956 <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e00a      	b.n	800696c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <xTaskNotifyWait+0xac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	22b4      	movs	r2, #180	; 0xb4
 800695c:	589a      	ldr	r2, [r3, r2]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	43c9      	mvns	r1, r1
 8006962:	400a      	ands	r2, r1
 8006964:	21b4      	movs	r1, #180	; 0xb4
 8006966:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <xTaskNotifyWait+0xac>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	22b8      	movs	r2, #184	; 0xb8
 8006972:	2100      	movs	r1, #0
 8006974:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8006976:	f000 fd6d 	bl	8007454 <vPortExitCritical>

		return xReturn;
 800697a:	697b      	ldr	r3, [r7, #20]
	}
 800697c:	0018      	movs	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	b006      	add	sp, #24
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200009b0 	.word	0x200009b0

08006988 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	1dfb      	adds	r3, r7, #7
 8006996:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006998:	2301      	movs	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xTaskGenericNotify+0x1e>
 80069a2:	b672      	cpsid	i
 80069a4:	e7fe      	b.n	80069a4 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 80069aa:	f000 fd41 	bl	8007430 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	22b4      	movs	r2, #180	; 0xb4
 80069b8:	589a      	ldr	r2, [r3, r2]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80069be:	2317      	movs	r3, #23
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	21b8      	movs	r1, #184	; 0xb8
 80069c6:	5c52      	ldrb	r2, [r2, r1]
 80069c8:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	22b8      	movs	r2, #184	; 0xb8
 80069ce:	2102      	movs	r1, #2
 80069d0:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80069d2:	1dfb      	adds	r3, r7, #7
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d827      	bhi.n	8006a2a <xTaskGenericNotify+0xa2>
 80069da:	009a      	lsls	r2, r3, #2
 80069dc:	4b34      	ldr	r3, [pc, #208]	; (8006ab0 <xTaskGenericNotify+0x128>)
 80069de:	18d3      	adds	r3, r2, r3
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	22b4      	movs	r2, #180	; 0xb4
 80069e8:	589a      	ldr	r2, [r3, r2]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	21b4      	movs	r1, #180	; 0xb4
 80069f2:	505a      	str	r2, [r3, r1]
					break;
 80069f4:	e023      	b.n	8006a3e <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	22b4      	movs	r2, #180	; 0xb4
 80069fa:	589b      	ldr	r3, [r3, r2]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	21b4      	movs	r1, #180	; 0xb4
 8006a02:	505a      	str	r2, [r3, r1]
					break;
 8006a04:	e01b      	b.n	8006a3e <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	21b4      	movs	r1, #180	; 0xb4
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	505a      	str	r2, [r3, r1]
					break;
 8006a0e:	e016      	b.n	8006a3e <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a10:	2317      	movs	r3, #23
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d004      	beq.n	8006a24 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	21b4      	movs	r1, #180	; 0xb4
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006a22:	e00c      	b.n	8006a3e <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
					break;
 8006a28:	e009      	b.n	8006a3e <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	22b4      	movs	r2, #180	; 0xb4
 8006a2e:	589b      	ldr	r3, [r3, r2]
 8006a30:	3301      	adds	r3, #1
 8006a32:	d003      	beq.n	8006a3c <xTaskGenericNotify+0xb4>
 8006a34:	b672      	cpsid	i
 8006a36:	e7fe      	b.n	8006a36 <xTaskGenericNotify+0xae>
					break;
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	e000      	b.n	8006a3e <xTaskGenericNotify+0xb6>

					break;
 8006a3c:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a3e:	2317      	movs	r3, #23
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d12b      	bne.n	8006aa0 <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7fe fcce 	bl	80053ee <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b17      	ldr	r3, [pc, #92]	; (8006ab4 <xTaskGenericNotify+0x12c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d903      	bls.n	8006a66 <xTaskGenericNotify+0xde>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a62:	4b14      	ldr	r3, [pc, #80]	; (8006ab4 <xTaskGenericNotify+0x12c>)
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6a:	0013      	movs	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	189b      	adds	r3, r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4a11      	ldr	r2, [pc, #68]	; (8006ab8 <xTaskGenericNotify+0x130>)
 8006a74:	189a      	adds	r2, r3, r2
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	0010      	movs	r0, r2
 8006a7e:	f7fe fc5e 	bl	800533e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <xTaskGenericNotify+0x106>
 8006a8a:	b672      	cpsid	i
 8006a8c:	e7fe      	b.n	8006a8c <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <xTaskGenericNotify+0x134>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d901      	bls.n	8006aa0 <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006a9c:	f000 fcb8 	bl	8007410 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006aa0:	f000 fcd8 	bl	8007454 <vPortExitCritical>

		return xReturn;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
	}
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	b008      	add	sp, #32
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	08007cbc 	.word	0x08007cbc
 8006ab4:	20000e8c 	.word	0x20000e8c
 8006ab8:	200009b4 	.word	0x200009b4
 8006abc:	200009b0 	.word	0x200009b0

08006ac0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	1dfb      	adds	r3, r7, #7
 8006ace:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <xTaskGenericNotifyFromISR+0x1e>
 8006ada:	b672      	cpsid	i
 8006adc:	e7fe      	b.n	8006adc <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ae2:	f000 fccf 	bl	8007484 <ulSetInterruptMaskFromISR>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	22b4      	movs	r2, #180	; 0xb4
 8006af4:	589a      	ldr	r2, [r3, r2]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006afa:	2313      	movs	r3, #19
 8006afc:	18fb      	adds	r3, r7, r3
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	21b8      	movs	r1, #184	; 0xb8
 8006b02:	5c52      	ldrb	r2, [r2, r1]
 8006b04:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	22b8      	movs	r2, #184	; 0xb8
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8006b0e:	1dfb      	adds	r3, r7, #7
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d827      	bhi.n	8006b66 <xTaskGenericNotifyFromISR+0xa6>
 8006b16:	009a      	lsls	r2, r3, #2
 8006b18:	4b3f      	ldr	r3, [pc, #252]	; (8006c18 <xTaskGenericNotifyFromISR+0x158>)
 8006b1a:	18d3      	adds	r3, r2, r3
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	22b4      	movs	r2, #180	; 0xb4
 8006b24:	589a      	ldr	r2, [r3, r2]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	21b4      	movs	r1, #180	; 0xb4
 8006b2e:	505a      	str	r2, [r3, r1]
					break;
 8006b30:	e023      	b.n	8006b7a <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	22b4      	movs	r2, #180	; 0xb4
 8006b36:	589b      	ldr	r3, [r3, r2]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	21b4      	movs	r1, #180	; 0xb4
 8006b3e:	505a      	str	r2, [r3, r1]
					break;
 8006b40:	e01b      	b.n	8006b7a <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	21b4      	movs	r1, #180	; 0xb4
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	505a      	str	r2, [r3, r1]
					break;
 8006b4a:	e016      	b.n	8006b7a <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b4c:	2313      	movs	r3, #19
 8006b4e:	18fb      	adds	r3, r7, r3
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d004      	beq.n	8006b60 <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	21b4      	movs	r1, #180	; 0xb4
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006b5e:	e00c      	b.n	8006b7a <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	61fb      	str	r3, [r7, #28]
					break;
 8006b64:	e009      	b.n	8006b7a <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	22b4      	movs	r2, #180	; 0xb4
 8006b6a:	589b      	ldr	r3, [r3, r2]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	d003      	beq.n	8006b78 <xTaskGenericNotifyFromISR+0xb8>
 8006b70:	b672      	cpsid	i
 8006b72:	e7fe      	b.n	8006b72 <xTaskGenericNotifyFromISR+0xb2>
					break;
 8006b74:	46c0      	nop			; (mov r8, r8)
 8006b76:	e000      	b.n	8006b7a <xTaskGenericNotifyFromISR+0xba>
					break;
 8006b78:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b7a:	2313      	movs	r3, #19
 8006b7c:	18fb      	adds	r3, r7, r3
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d13f      	bne.n	8006c04 <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <xTaskGenericNotifyFromISR+0xd0>
 8006b8c:	b672      	cpsid	i
 8006b8e:	e7fe      	b.n	8006b8e <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b90:	4b22      	ldr	r3, [pc, #136]	; (8006c1c <xTaskGenericNotifyFromISR+0x15c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11d      	bne.n	8006bd4 <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7fe fc26 	bl	80053ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <xTaskGenericNotifyFromISR+0x160>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d903      	bls.n	8006bb6 <xTaskGenericNotifyFromISR+0xf6>
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb2:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <xTaskGenericNotifyFromISR+0x160>)
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	0013      	movs	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	189b      	adds	r3, r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4a18      	ldr	r2, [pc, #96]	; (8006c24 <xTaskGenericNotifyFromISR+0x164>)
 8006bc4:	189a      	adds	r2, r3, r2
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	0019      	movs	r1, r3
 8006bcc:	0010      	movs	r0, r2
 8006bce:	f7fe fbb6 	bl	800533e <vListInsertEnd>
 8006bd2:	e007      	b.n	8006be4 <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3318      	adds	r3, #24
 8006bd8:	001a      	movs	r2, r3
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <xTaskGenericNotifyFromISR+0x168>)
 8006bdc:	0011      	movs	r1, r2
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7fe fbad 	bl	800533e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <xTaskGenericNotifyFromISR+0x16c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d908      	bls.n	8006c04 <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <xTaskGenericNotifyFromISR+0x170>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f000 fc42 	bl	8007490 <vClearInterruptMaskFromISR>

		return xReturn;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
	}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b008      	add	sp, #32
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	08007cd0 	.word	0x08007cd0
 8006c1c:	20000eac 	.word	0x20000eac
 8006c20:	20000e8c 	.word	0x20000e8c
 8006c24:	200009b4 	.word	0x200009b4
 8006c28:	20000e44 	.word	0x20000e44
 8006c2c:	200009b0 	.word	0x200009b0
 8006c30:	20000e98 	.word	0x20000e98

08006c34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c3e:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c44:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7fe fbcf 	bl	80053ee <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3301      	adds	r3, #1
 8006c54:	d10b      	bne.n	8006c6e <prvAddCurrentTaskToDelayedList+0x3a>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c5c:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	1d1a      	adds	r2, r3, #4
 8006c62:	4b1a      	ldr	r3, [pc, #104]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x98>)
 8006c64:	0011      	movs	r1, r2
 8006c66:	0018      	movs	r0, r3
 8006c68:	f7fe fb69 	bl	800533e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c6c:	e026      	b.n	8006cbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	18d3      	adds	r3, r2, r3
 8006c74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c76:	4b14      	ldr	r3, [pc, #80]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d209      	bcs.n	8006c9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	0019      	movs	r1, r3
 8006c92:	0010      	movs	r0, r2
 8006c94:	f7fe fb75 	bl	8005382 <vListInsert>
}
 8006c98:	e010      	b.n	8006cbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	0019      	movs	r1, r3
 8006ca6:	0010      	movs	r0, r2
 8006ca8:	f7fe fb6b 	bl	8005382 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d202      	bcs.n	8006cbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cb6:	4b08      	ldr	r3, [pc, #32]	; (8006cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	601a      	str	r2, [r3, #0]
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b004      	add	sp, #16
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20000e88 	.word	0x20000e88
 8006cc8:	200009b0 	.word	0x200009b0
 8006ccc:	20000e70 	.word	0x20000e70
 8006cd0:	20000e40 	.word	0x20000e40
 8006cd4:	20000e3c 	.word	0x20000e3c
 8006cd8:	20000ea4 	.word	0x20000ea4

08006cdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b089      	sub	sp, #36	; 0x24
 8006ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ce6:	f000 fac9 	bl	800727c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cea:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <xTimerCreateTimerTask+0x6c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d020      	beq.n	8006d34 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cfa:	003a      	movs	r2, r7
 8006cfc:	1d39      	adds	r1, r7, #4
 8006cfe:	2308      	movs	r3, #8
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7fe fada 	bl	80052bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d08:	683c      	ldr	r4, [r7, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	490f      	ldr	r1, [pc, #60]	; (8006d4c <xTimerCreateTimerTask+0x70>)
 8006d10:	480f      	ldr	r0, [pc, #60]	; (8006d50 <xTimerCreateTimerTask+0x74>)
 8006d12:	9202      	str	r2, [sp, #8]
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	2302      	movs	r3, #2
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	0022      	movs	r2, r4
 8006d1e:	f7fe ffba 	bl	8005c96 <xTaskCreateStatic>
 8006d22:	0002      	movs	r2, r0
 8006d24:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <xTimerCreateTimerTask+0x78>)
 8006d26:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <xTimerCreateTimerTask+0x78>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xTimerCreateTimerTask+0x62>
 8006d3a:	b672      	cpsid	i
 8006d3c:	e7fe      	b.n	8006d3c <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b005      	add	sp, #20
 8006d46:	bd90      	pop	{r4, r7, pc}
 8006d48:	20000ee0 	.word	0x20000ee0
 8006d4c:	08007b3c 	.word	0x08007b3c
 8006d50:	08006e75 	.word	0x08006e75
 8006d54:	20000ee4 	.word	0x20000ee4

08006d58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d58:	b590      	push	{r4, r7, lr}
 8006d5a:	b08b      	sub	sp, #44	; 0x2c
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <xTimerGenericCommand+0x1c>
 8006d70:	b672      	cpsid	i
 8006d72:	e7fe      	b.n	8006d72 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <xTimerGenericCommand+0x90>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d030      	beq.n	8006dde <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d7c:	2414      	movs	r4, #20
 8006d7e:	193b      	adds	r3, r7, r4
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d84:	193b      	adds	r3, r7, r4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d8a:	193b      	adds	r3, r7, r4
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	dc19      	bgt.n	8006dca <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d96:	f7ff fd27 	bl	80067e8 <xTaskGetSchedulerState>
 8006d9a:	0003      	movs	r3, r0
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d109      	bne.n	8006db4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006da0:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <xTimerGenericCommand+0x90>)
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da6:	1939      	adds	r1, r7, r4
 8006da8:	2300      	movs	r3, #0
 8006daa:	f7fe fc0f 	bl	80055cc <xQueueGenericSend>
 8006dae:	0003      	movs	r3, r0
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
 8006db2:	e014      	b.n	8006dde <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <xTimerGenericCommand+0x90>)
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	2314      	movs	r3, #20
 8006dba:	18f9      	adds	r1, r7, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f7fe fc04 	bl	80055cc <xQueueGenericSend>
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc8:	e009      	b.n	8006dde <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <xTimerGenericCommand+0x90>)
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	2314      	movs	r3, #20
 8006dd2:	18f9      	adds	r1, r7, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f7fe fcbd 	bl	8005754 <xQueueGenericSendFromISR>
 8006dda:	0003      	movs	r3, r0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b00b      	add	sp, #44	; 0x2c
 8006de6:	bd90      	pop	{r4, r7, pc}
 8006de8:	20000ee0 	.word	0x20000ee0

08006dec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af02      	add	r7, sp, #8
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df6:	4b1e      	ldr	r3, [pc, #120]	; (8006e70 <prvProcessExpiredTimer+0x84>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3304      	adds	r3, #4
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7fe faf2 	bl	80053ee <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2228      	movs	r2, #40	; 0x28
 8006e0e:	5c9b      	ldrb	r3, [r3, r2]
 8006e10:	001a      	movs	r2, r3
 8006e12:	2304      	movs	r3, #4
 8006e14:	4013      	ands	r3, r2
 8006e16:	d019      	beq.n	8006e4c <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	699a      	ldr	r2, [r3, #24]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	18d1      	adds	r1, r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f8c3 	bl	8006fb0 <prvInsertTimerInActiveList>
 8006e2a:	1e03      	subs	r3, r0, #0
 8006e2c:	d017      	beq.n	8006e5e <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	2300      	movs	r3, #0
 8006e38:	2100      	movs	r1, #0
 8006e3a:	f7ff ff8d 	bl	8006d58 <xTimerGenericCommand>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <prvProcessExpiredTimer+0x72>
 8006e48:	b672      	cpsid	i
 8006e4a:	e7fe      	b.n	8006e4a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2228      	movs	r2, #40	; 0x28
 8006e50:	5c9b      	ldrb	r3, [r3, r2]
 8006e52:	2201      	movs	r2, #1
 8006e54:	4393      	bics	r3, r2
 8006e56:	b2d9      	uxtb	r1, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2228      	movs	r2, #40	; 0x28
 8006e5c:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	0010      	movs	r0, r2
 8006e66:	4798      	blx	r3
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	b004      	add	sp, #16
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000ed8 	.word	0x20000ed8

08006e74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	0018      	movs	r0, r3
 8006e82:	f000 f853 	bl	8006f2c <prvGetNextExpireTime>
 8006e86:	0003      	movs	r3, r0
 8006e88:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	0011      	movs	r1, r2
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f803 	bl	8006e9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e96:	f000 f8cd 	bl	8007034 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e9a:	e7ef      	b.n	8006e7c <prvTimerTask+0x8>

08006e9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ea6:	f7ff f913 	bl	80060d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eaa:	2308      	movs	r3, #8
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	0018      	movs	r0, r3
 8006eb0:	f000 f85e 	bl	8006f70 <prvSampleTimeNow>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d12b      	bne.n	8006f16 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10c      	bne.n	8006ede <prvProcessTimerOrBlockTask+0x42>
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d808      	bhi.n	8006ede <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006ecc:	f7ff f90c 	bl	80060e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	0011      	movs	r1, r2
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f7ff ff88 	bl	8006dec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006edc:	e01d      	b.n	8006f1a <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <prvProcessTimerOrBlockTask+0x88>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <prvProcessTimerOrBlockTask+0x56>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <prvProcessTimerOrBlockTask+0x58>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ef6:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvProcessTimerOrBlockTask+0x8c>)
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	0019      	movs	r1, r3
 8006f04:	f7fe fe94 	bl	8005c30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f08:	f7ff f8ee 	bl	80060e8 <xTaskResumeAll>
 8006f0c:	1e03      	subs	r3, r0, #0
 8006f0e:	d104      	bne.n	8006f1a <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8006f10:	f000 fa7e 	bl	8007410 <vPortYield>
}
 8006f14:	e001      	b.n	8006f1a <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8006f16:	f7ff f8e7 	bl	80060e8 <xTaskResumeAll>
}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b004      	add	sp, #16
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	20000edc 	.word	0x20000edc
 8006f28:	20000ee0 	.word	0x20000ee0

08006f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <prvGetNextExpireTime+0x40>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <prvGetNextExpireTime+0x16>
 8006f3e:	2201      	movs	r2, #1
 8006f40:	e000      	b.n	8006f44 <prvGetNextExpireTime+0x18>
 8006f42:	2200      	movs	r2, #0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f50:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <prvGetNextExpireTime+0x40>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e001      	b.n	8006f60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f60:	68fb      	ldr	r3, [r7, #12]
}
 8006f62:	0018      	movs	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b004      	add	sp, #16
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	20000ed8 	.word	0x20000ed8

08006f70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f78:	f7ff f942 	bl	8006200 <xTaskGetTickCount>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <prvSampleTimeNow+0x3c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d205      	bcs.n	8006f96 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006f8a:	f000 f919 	bl	80071c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	e002      	b.n	8006f9c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f9c:	4b03      	ldr	r3, [pc, #12]	; (8006fac <prvSampleTimeNow+0x3c>)
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
}
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	b004      	add	sp, #16
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000ee8 	.word	0x20000ee8

08006fb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d812      	bhi.n	8006ffc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e01b      	b.n	8007022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <prvInsertTimerInActiveList+0x7c>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	0019      	movs	r1, r3
 8006ff4:	0010      	movs	r0, r2
 8006ff6:	f7fe f9c4 	bl	8005382 <vListInsert>
 8006ffa:	e012      	b.n	8007022 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d206      	bcs.n	8007012 <prvInsertTimerInActiveList+0x62>
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d302      	bcc.n	8007012 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e007      	b.n	8007022 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007012:	4b07      	ldr	r3, [pc, #28]	; (8007030 <prvInsertTimerInActiveList+0x80>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3304      	adds	r3, #4
 800701a:	0019      	movs	r1, r3
 800701c:	0010      	movs	r0, r2
 800701e:	f7fe f9b0 	bl	8005382 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007022:	697b      	ldr	r3, [r7, #20]
}
 8007024:	0018      	movs	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	b006      	add	sp, #24
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000edc 	.word	0x20000edc
 8007030:	20000ed8 	.word	0x20000ed8

08007034 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007034:	b590      	push	{r4, r7, lr}
 8007036:	b08d      	sub	sp, #52	; 0x34
 8007038:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800703a:	e0ac      	b.n	8007196 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800703c:	2208      	movs	r2, #8
 800703e:	18bb      	adds	r3, r7, r2
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da0f      	bge.n	8007066 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007046:	18bb      	adds	r3, r7, r2
 8007048:	3304      	adds	r3, #4
 800704a:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <prvProcessReceivedCommands+0x22>
 8007052:	b672      	cpsid	i
 8007054:	e7fe      	b.n	8007054 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705c:	6858      	ldr	r0, [r3, #4]
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	0019      	movs	r1, r3
 8007064:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007066:	2208      	movs	r2, #8
 8007068:	18bb      	adds	r3, r7, r2
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	da00      	bge.n	8007072 <prvProcessReceivedCommands+0x3e>
 8007070:	e090      	b.n	8007194 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007072:	18bb      	adds	r3, r7, r2
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	3304      	adds	r3, #4
 8007084:	0018      	movs	r0, r3
 8007086:	f7fe f9b2 	bl	80053ee <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800708a:	1d3b      	adds	r3, r7, #4
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff ff6f 	bl	8006f70 <prvSampleTimeNow>
 8007092:	0003      	movs	r3, r0
 8007094:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007096:	2308      	movs	r3, #8
 8007098:	18fb      	adds	r3, r7, r3
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b09      	cmp	r3, #9
 800709e:	d900      	bls.n	80070a2 <prvProcessReceivedCommands+0x6e>
 80070a0:	e079      	b.n	8007196 <prvProcessReceivedCommands+0x162>
 80070a2:	009a      	lsls	r2, r3, #2
 80070a4:	4b44      	ldr	r3, [pc, #272]	; (80071b8 <prvProcessReceivedCommands+0x184>)
 80070a6:	18d3      	adds	r3, r2, r3
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2228      	movs	r2, #40	; 0x28
 80070b0:	5c9b      	ldrb	r3, [r3, r2]
 80070b2:	2201      	movs	r2, #1
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b2d9      	uxtb	r1, r3
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2228      	movs	r2, #40	; 0x28
 80070bc:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070be:	2408      	movs	r4, #8
 80070c0:	193b      	adds	r3, r7, r4
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	18d1      	adds	r1, r2, r3
 80070ca:	193b      	adds	r3, r7, r4
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	6a38      	ldr	r0, [r7, #32]
 80070d2:	f7ff ff6d 	bl	8006fb0 <prvInsertTimerInActiveList>
 80070d6:	1e03      	subs	r3, r0, #0
 80070d8:	d05d      	beq.n	8007196 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	0010      	movs	r0, r2
 80070e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	2228      	movs	r2, #40	; 0x28
 80070e8:	5c9b      	ldrb	r3, [r3, r2]
 80070ea:	001a      	movs	r2, r3
 80070ec:	2304      	movs	r3, #4
 80070ee:	4013      	ands	r3, r2
 80070f0:	d051      	beq.n	8007196 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070f2:	193b      	adds	r3, r7, r4
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	18d2      	adds	r2, r2, r3
 80070fc:	6a38      	ldr	r0, [r7, #32]
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	2100      	movs	r1, #0
 8007106:	f7ff fe27 	bl	8006d58 <xTimerGenericCommand>
 800710a:	0003      	movs	r3, r0
 800710c:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d140      	bne.n	8007196 <prvProcessReceivedCommands+0x162>
 8007114:	b672      	cpsid	i
 8007116:	e7fe      	b.n	8007116 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2228      	movs	r2, #40	; 0x28
 800711c:	5c9b      	ldrb	r3, [r3, r2]
 800711e:	2201      	movs	r2, #1
 8007120:	4393      	bics	r3, r2
 8007122:	b2d9      	uxtb	r1, r3
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	2228      	movs	r2, #40	; 0x28
 8007128:	5499      	strb	r1, [r3, r2]
					break;
 800712a:	e034      	b.n	8007196 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	2228      	movs	r2, #40	; 0x28
 8007130:	5c9b      	ldrb	r3, [r3, r2]
 8007132:	2201      	movs	r2, #1
 8007134:	4313      	orrs	r3, r2
 8007136:	b2d9      	uxtb	r1, r3
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2228      	movs	r2, #40	; 0x28
 800713c:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800713e:	2308      	movs	r3, #8
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <prvProcessReceivedCommands+0x120>
 8007150:	b672      	cpsid	i
 8007152:	e7fe      	b.n	8007152 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	699a      	ldr	r2, [r3, #24]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	18d1      	adds	r1, r2, r3
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	6a38      	ldr	r0, [r7, #32]
 8007162:	f7ff ff25 	bl	8006fb0 <prvInsertTimerInActiveList>
					break;
 8007166:	e016      	b.n	8007196 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	2228      	movs	r2, #40	; 0x28
 800716c:	5c9b      	ldrb	r3, [r3, r2]
 800716e:	001a      	movs	r2, r3
 8007170:	2302      	movs	r3, #2
 8007172:	4013      	ands	r3, r2
 8007174:	d104      	bne.n	8007180 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	0018      	movs	r0, r3
 800717a:	f000 fa9d 	bl	80076b8 <vPortFree>
 800717e:	e00a      	b.n	8007196 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	2228      	movs	r2, #40	; 0x28
 8007184:	5c9b      	ldrb	r3, [r3, r2]
 8007186:	2201      	movs	r2, #1
 8007188:	4393      	bics	r3, r2
 800718a:	b2d9      	uxtb	r1, r3
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2228      	movs	r2, #40	; 0x28
 8007190:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007192:	e000      	b.n	8007196 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007194:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <prvProcessReceivedCommands+0x188>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2208      	movs	r2, #8
 800719c:	18b9      	adds	r1, r7, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	0018      	movs	r0, r3
 80071a2:	f7fe fb4b 	bl	800583c <xQueueReceive>
 80071a6:	1e03      	subs	r3, r0, #0
 80071a8:	d000      	beq.n	80071ac <prvProcessReceivedCommands+0x178>
 80071aa:	e747      	b.n	800703c <prvProcessReceivedCommands+0x8>
	}
}
 80071ac:	46c0      	nop			; (mov r8, r8)
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	46bd      	mov	sp, r7
 80071b2:	b00b      	add	sp, #44	; 0x2c
 80071b4:	bd90      	pop	{r4, r7, pc}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	08007ce4 	.word	0x08007ce4
 80071bc:	20000ee0 	.word	0x20000ee0

080071c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071c6:	e041      	b.n	800724c <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <prvSwitchTimerLists+0xb4>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d2:	4b28      	ldr	r3, [pc, #160]	; (8007274 <prvSwitchTimerLists+0xb4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3304      	adds	r3, #4
 80071e0:	0018      	movs	r0, r3
 80071e2:	f7fe f904 	bl	80053ee <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	0010      	movs	r0, r2
 80071ee:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2228      	movs	r2, #40	; 0x28
 80071f4:	5c9b      	ldrb	r3, [r3, r2]
 80071f6:	001a      	movs	r2, r3
 80071f8:	2304      	movs	r3, #4
 80071fa:	4013      	ands	r3, r2
 80071fc:	d026      	beq.n	800724c <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	18d3      	adds	r3, r2, r3
 8007206:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	429a      	cmp	r2, r3
 800720e:	d90e      	bls.n	800722e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800721c:	4b15      	ldr	r3, [pc, #84]	; (8007274 <prvSwitchTimerLists+0xb4>)
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3304      	adds	r3, #4
 8007224:	0019      	movs	r1, r3
 8007226:	0010      	movs	r0, r2
 8007228:	f7fe f8ab 	bl	8005382 <vListInsert>
 800722c:	e00e      	b.n	800724c <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	2300      	movs	r3, #0
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	2100      	movs	r1, #0
 800723a:	f7ff fd8d 	bl	8006d58 <xTimerGenericCommand>
 800723e:	0003      	movs	r3, r0
 8007240:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <prvSwitchTimerLists+0x8c>
 8007248:	b672      	cpsid	i
 800724a:	e7fe      	b.n	800724a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <prvSwitchTimerLists+0xb4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1b8      	bne.n	80071c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007256:	4b07      	ldr	r3, [pc, #28]	; (8007274 <prvSwitchTimerLists+0xb4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <prvSwitchTimerLists+0xb8>)
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	4b04      	ldr	r3, [pc, #16]	; (8007274 <prvSwitchTimerLists+0xb4>)
 8007262:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <prvSwitchTimerLists+0xb8>)
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	46bd      	mov	sp, r7
 800726e:	b006      	add	sp, #24
 8007270:	bd80      	pop	{r7, pc}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	20000ed8 	.word	0x20000ed8
 8007278:	20000edc 	.word	0x20000edc

0800727c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007282:	f000 f8d5 	bl	8007430 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007286:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <prvCheckForValidListAndQueue+0x64>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d123      	bne.n	80072d6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800728e:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <prvCheckForValidListAndQueue+0x68>)
 8007290:	0018      	movs	r0, r3
 8007292:	f7fe f82b 	bl	80052ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <prvCheckForValidListAndQueue+0x6c>)
 8007298:	0018      	movs	r0, r3
 800729a:	f7fe f827 	bl	80052ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <prvCheckForValidListAndQueue+0x70>)
 80072a0:	4a10      	ldr	r2, [pc, #64]	; (80072e4 <prvCheckForValidListAndQueue+0x68>)
 80072a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072a4:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <prvCheckForValidListAndQueue+0x74>)
 80072a6:	4a10      	ldr	r2, [pc, #64]	; (80072e8 <prvCheckForValidListAndQueue+0x6c>)
 80072a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072aa:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <prvCheckForValidListAndQueue+0x78>)
 80072ac:	4a12      	ldr	r2, [pc, #72]	; (80072f8 <prvCheckForValidListAndQueue+0x7c>)
 80072ae:	2100      	movs	r1, #0
 80072b0:	9100      	str	r1, [sp, #0]
 80072b2:	2110      	movs	r1, #16
 80072b4:	200a      	movs	r0, #10
 80072b6:	f7fe f916 	bl	80054e6 <xQueueGenericCreateStatic>
 80072ba:	0002      	movs	r2, r0
 80072bc:	4b08      	ldr	r3, [pc, #32]	; (80072e0 <prvCheckForValidListAndQueue+0x64>)
 80072be:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072c0:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <prvCheckForValidListAndQueue+0x64>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d006      	beq.n	80072d6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <prvCheckForValidListAndQueue+0x64>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <prvCheckForValidListAndQueue+0x80>)
 80072ce:	0011      	movs	r1, r2
 80072d0:	0018      	movs	r0, r3
 80072d2:	f7fe fc85 	bl	8005be0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072d6:	f000 f8bd 	bl	8007454 <vPortExitCritical>
}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000ee0 	.word	0x20000ee0
 80072e4:	20000eb0 	.word	0x20000eb0
 80072e8:	20000ec4 	.word	0x20000ec4
 80072ec:	20000ed8 	.word	0x20000ed8
 80072f0:	20000edc 	.word	0x20000edc
 80072f4:	20000f8c 	.word	0x20000f8c
 80072f8:	20000eec 	.word	0x20000eec
 80072fc:	08007b44 	.word	0x08007b44

08007300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3b04      	subs	r3, #4
 8007310:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2280      	movs	r2, #128	; 0x80
 8007316:	0452      	lsls	r2, r2, #17
 8007318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b04      	subs	r3, #4
 800731e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b04      	subs	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800732c:	4a08      	ldr	r2, [pc, #32]	; (8007350 <pxPortInitialiseStack+0x50>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b14      	subs	r3, #20
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3b20      	subs	r3, #32
 8007342:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007344:	68fb      	ldr	r3, [r7, #12]
}
 8007346:	0018      	movs	r0, r3
 8007348:	46bd      	mov	sp, r7
 800734a:	b004      	add	sp, #16
 800734c:	bd80      	pop	{r7, pc}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	08007355 	.word	0x08007355

08007354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800735a:	2300      	movs	r3, #0
 800735c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800735e:	4b08      	ldr	r3, [pc, #32]	; (8007380 <prvTaskExitError+0x2c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	d001      	beq.n	800736a <prvTaskExitError+0x16>
 8007366:	b672      	cpsid	i
 8007368:	e7fe      	b.n	8007368 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800736a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800736c:	46c0      	nop			; (mov r8, r8)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0fc      	beq.n	800736e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007374:	46c0      	nop			; (mov r8, r8)
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	46bd      	mov	sp, r7
 800737a:	b002      	add	sp, #8
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	20000010 	.word	0x20000010

08007384 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007388:	46c0      	nop			; (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007390:	4a0b      	ldr	r2, [pc, #44]	; (80073c0 <pxCurrentTCBConst2>)
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	3020      	adds	r0, #32
 8007398:	f380 8809 	msr	PSP, r0
 800739c:	2002      	movs	r0, #2
 800739e:	f380 8814 	msr	CONTROL, r0
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80073a8:	46ae      	mov	lr, r5
 80073aa:	bc08      	pop	{r3}
 80073ac:	bc04      	pop	{r2}
 80073ae:	b662      	cpsie	i
 80073b0:	4718      	bx	r3
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	46c0      	nop			; (mov r8, r8)
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	46c0      	nop			; (mov r8, r8)
 80073be:	46c0      	nop			; (mov r8, r8)

080073c0 <pxCurrentTCBConst2>:
 80073c0:	200009b0 	.word	0x200009b0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	46c0      	nop			; (mov r8, r8)

080073c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <xPortStartScheduler+0x40>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <xPortStartScheduler+0x40>)
 80073d2:	21ff      	movs	r1, #255	; 0xff
 80073d4:	0409      	lsls	r1, r1, #16
 80073d6:	430a      	orrs	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <xPortStartScheduler+0x40>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <xPortStartScheduler+0x40>)
 80073e0:	21ff      	movs	r1, #255	; 0xff
 80073e2:	0609      	lsls	r1, r1, #24
 80073e4:	430a      	orrs	r2, r1
 80073e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073e8:	f000 f898 	bl	800751c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073ec:	4b07      	ldr	r3, [pc, #28]	; (800740c <xPortStartScheduler+0x44>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80073f2:	f7ff ffcd 	bl	8007390 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073f6:	f7fe ffc1 	bl	800637c <vTaskSwitchContext>
	prvTaskExitError();
 80073fa:	f7ff ffab 	bl	8007354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	0018      	movs	r0, r3
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	e000ed20 	.word	0xe000ed20
 800740c:	20000010 	.word	0x20000010

08007410 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <vPortYield+0x1c>)
 8007416:	2280      	movs	r2, #128	; 0x80
 8007418:	0552      	lsls	r2, r2, #21
 800741a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800741c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007420:	f3bf 8f6f 	isb	sy
}
 8007424:	46c0      	nop			; (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	e000ed04 	.word	0xe000ed04

08007430 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007434:	b672      	cpsid	i
	uxCriticalNesting++;
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <vPortEnterCritical+0x20>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	4b04      	ldr	r3, [pc, #16]	; (8007450 <vPortEnterCritical+0x20>)
 800743e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007440:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007444:	f3bf 8f6f 	isb	sy
}
 8007448:	46c0      	nop			; (mov r8, r8)
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	20000010 	.word	0x20000010

08007454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <vPortExitCritical+0x2c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <vPortExitCritical+0x10>
 8007460:	b672      	cpsid	i
 8007462:	e7fe      	b.n	8007462 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <vPortExitCritical+0x2c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <vPortExitCritical+0x2c>)
 800746c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800746e:	4b04      	ldr	r3, [pc, #16]	; (8007480 <vPortExitCritical+0x2c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d100      	bne.n	8007478 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007476:	b662      	cpsie	i
	}
}
 8007478:	46c0      	nop			; (mov r8, r8)
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	20000010 	.word	0x20000010

08007484 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007484:	f3ef 8010 	mrs	r0, PRIMASK
 8007488:	b672      	cpsid	i
 800748a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	0018      	movs	r0, r3

08007490 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007490:	f380 8810 	msr	PRIMASK, r0
 8007494:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007496:	46c0      	nop			; (mov r8, r8)
	...

080074a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074a0:	f3ef 8009 	mrs	r0, PSP
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <pxCurrentTCBConst>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	3820      	subs	r0, #32
 80074aa:	6010      	str	r0, [r2, #0]
 80074ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80074ae:	4644      	mov	r4, r8
 80074b0:	464d      	mov	r5, r9
 80074b2:	4656      	mov	r6, sl
 80074b4:	465f      	mov	r7, fp
 80074b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80074b8:	b508      	push	{r3, lr}
 80074ba:	b672      	cpsid	i
 80074bc:	f7fe ff5e 	bl	800637c <vTaskSwitchContext>
 80074c0:	b662      	cpsie	i
 80074c2:	bc0c      	pop	{r2, r3}
 80074c4:	6811      	ldr	r1, [r2, #0]
 80074c6:	6808      	ldr	r0, [r1, #0]
 80074c8:	3010      	adds	r0, #16
 80074ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80074cc:	46a0      	mov	r8, r4
 80074ce:	46a9      	mov	r9, r5
 80074d0:	46b2      	mov	sl, r6
 80074d2:	46bb      	mov	fp, r7
 80074d4:	f380 8809 	msr	PSP, r0
 80074d8:	3820      	subs	r0, #32
 80074da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80074dc:	4718      	bx	r3
 80074de:	46c0      	nop			; (mov r8, r8)

080074e0 <pxCurrentTCBConst>:
 80074e0:	200009b0 	.word	0x200009b0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80074e4:	46c0      	nop			; (mov r8, r8)
 80074e6:	46c0      	nop			; (mov r8, r8)

080074e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ee:	f7ff ffc9 	bl	8007484 <ulSetInterruptMaskFromISR>
 80074f2:	0003      	movs	r3, r0
 80074f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074f6:	f7fe fe91 	bl	800621c <xTaskIncrementTick>
 80074fa:	1e03      	subs	r3, r0, #0
 80074fc:	d003      	beq.n	8007506 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <xPortSysTickHandler+0x30>)
 8007500:	2280      	movs	r2, #128	; 0x80
 8007502:	0552      	lsls	r2, r2, #21
 8007504:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	0018      	movs	r0, r3
 800750a:	f7ff ffc1 	bl	8007490 <vClearInterruptMaskFromISR>
}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	46bd      	mov	sp, r7
 8007512:	b002      	add	sp, #8
 8007514:	bd80      	pop	{r7, pc}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <vPortSetupTimerInterrupt+0x34>)
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <vPortSetupTimerInterrupt+0x38>)
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <vPortSetupTimerInterrupt+0x3c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	22fa      	movs	r2, #250	; 0xfa
 8007532:	0091      	lsls	r1, r2, #2
 8007534:	0018      	movs	r0, r3
 8007536:	f7f8 fde7 	bl	8000108 <__udivsi3>
 800753a:	0003      	movs	r3, r0
 800753c:	001a      	movs	r2, r3
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <vPortSetupTimerInterrupt+0x40>)
 8007540:	3a01      	subs	r2, #1
 8007542:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007544:	4b02      	ldr	r3, [pc, #8]	; (8007550 <vPortSetupTimerInterrupt+0x34>)
 8007546:	2207      	movs	r2, #7
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	e000e010 	.word	0xe000e010
 8007554:	e000e018 	.word	0xe000e018
 8007558:	20000004 	.word	0x20000004
 800755c:	e000e014 	.word	0xe000e014

08007560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800756c:	f7fe fdb0 	bl	80060d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007570:	4b4b      	ldr	r3, [pc, #300]	; (80076a0 <pvPortMalloc+0x140>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007578:	f000 f8ec 	bl	8007754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800757c:	4b49      	ldr	r3, [pc, #292]	; (80076a4 <pvPortMalloc+0x144>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4013      	ands	r3, r2
 8007584:	d000      	beq.n	8007588 <pvPortMalloc+0x28>
 8007586:	e07e      	b.n	8007686 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d012      	beq.n	80075b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800758e:	2208      	movs	r2, #8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	189b      	adds	r3, r3, r2
 8007594:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2207      	movs	r2, #7
 800759a:	4013      	ands	r3, r2
 800759c:	d00a      	beq.n	80075b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2207      	movs	r2, #7
 80075a2:	4393      	bics	r3, r2
 80075a4:	3308      	adds	r3, #8
 80075a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2207      	movs	r2, #7
 80075ac:	4013      	ands	r3, r2
 80075ae:	d001      	beq.n	80075b4 <pvPortMalloc+0x54>
 80075b0:	b672      	cpsid	i
 80075b2:	e7fe      	b.n	80075b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d065      	beq.n	8007686 <pvPortMalloc+0x126>
 80075ba:	4b3b      	ldr	r3, [pc, #236]	; (80076a8 <pvPortMalloc+0x148>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d860      	bhi.n	8007686 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <pvPortMalloc+0x14c>)
 80075c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80075c8:	4b38      	ldr	r3, [pc, #224]	; (80076ac <pvPortMalloc+0x14c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075ce:	e004      	b.n	80075da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <pvPortMalloc+0x8c>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f1      	bne.n	80075d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075ec:	4b2c      	ldr	r3, [pc, #176]	; (80076a0 <pvPortMalloc+0x140>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d047      	beq.n	8007686 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2208      	movs	r2, #8
 80075fc:	189b      	adds	r3, r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	2308      	movs	r3, #8
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	429a      	cmp	r2, r3
 8007616:	d916      	bls.n	8007646 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	18d3      	adds	r3, r2, r3
 800761e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2207      	movs	r2, #7
 8007624:	4013      	ands	r3, r2
 8007626:	d001      	beq.n	800762c <pvPortMalloc+0xcc>
 8007628:	b672      	cpsid	i
 800762a:	e7fe      	b.n	800762a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	0018      	movs	r0, r3
 8007642:	f000 f8e7 	bl	8007814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007646:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <pvPortMalloc+0x148>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	1ad2      	subs	r2, r2, r3
 8007650:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <pvPortMalloc+0x148>)
 8007652:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007654:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <pvPortMalloc+0x148>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <pvPortMalloc+0x150>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d203      	bcs.n	8007668 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007660:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <pvPortMalloc+0x148>)
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <pvPortMalloc+0x150>)
 8007666:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <pvPortMalloc+0x144>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	431a      	orrs	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <pvPortMalloc+0x154>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <pvPortMalloc+0x154>)
 8007684:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007686:	f7fe fd2f 	bl	80060e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2207      	movs	r2, #7
 800768e:	4013      	ands	r3, r2
 8007690:	d001      	beq.n	8007696 <pvPortMalloc+0x136>
 8007692:	b672      	cpsid	i
 8007694:	e7fe      	b.n	8007694 <pvPortMalloc+0x134>
	return pvReturn;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	0018      	movs	r0, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	b006      	add	sp, #24
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20001be4 	.word	0x20001be4
 80076a4:	20001bf8 	.word	0x20001bf8
 80076a8:	20001be8 	.word	0x20001be8
 80076ac:	20001bdc 	.word	0x20001bdc
 80076b0:	20001bec 	.word	0x20001bec
 80076b4:	20001bf0 	.word	0x20001bf0

080076b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d03a      	beq.n	8007740 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ca:	2308      	movs	r3, #8
 80076cc:	425b      	negs	r3, r3
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	18d3      	adds	r3, r2, r3
 80076d2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <vPortFree+0x90>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4013      	ands	r3, r2
 80076e2:	d101      	bne.n	80076e8 <vPortFree+0x30>
 80076e4:	b672      	cpsid	i
 80076e6:	e7fe      	b.n	80076e6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <vPortFree+0x3c>
 80076f0:	b672      	cpsid	i
 80076f2:	e7fe      	b.n	80076f2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	4b13      	ldr	r3, [pc, #76]	; (8007748 <vPortFree+0x90>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4013      	ands	r3, r2
 80076fe:	d01f      	beq.n	8007740 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11b      	bne.n	8007740 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	4b0e      	ldr	r3, [pc, #56]	; (8007748 <vPortFree+0x90>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	43db      	mvns	r3, r3
 8007712:	401a      	ands	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007718:	f7fe fcda 	bl	80060d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <vPortFree+0x94>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	18d2      	adds	r2, r2, r3
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <vPortFree+0x94>)
 8007728:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	0018      	movs	r0, r3
 800772e:	f000 f871 	bl	8007814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007732:	4b07      	ldr	r3, [pc, #28]	; (8007750 <vPortFree+0x98>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	4b05      	ldr	r3, [pc, #20]	; (8007750 <vPortFree+0x98>)
 800773a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800773c:	f7fe fcd4 	bl	80060e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007740:	46c0      	nop			; (mov r8, r8)
 8007742:	46bd      	mov	sp, r7
 8007744:	b004      	add	sp, #16
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20001bf8 	.word	0x20001bf8
 800774c:	20001be8 	.word	0x20001be8
 8007750:	20001bf4 	.word	0x20001bf4

08007754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800775a:	23c0      	movs	r3, #192	; 0xc0
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007760:	4b26      	ldr	r3, [pc, #152]	; (80077fc <prvHeapInit+0xa8>)
 8007762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2207      	movs	r2, #7
 8007768:	4013      	ands	r3, r2
 800776a:	d00c      	beq.n	8007786 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3307      	adds	r3, #7
 8007770:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2207      	movs	r2, #7
 8007776:	4393      	bics	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	4b1e      	ldr	r3, [pc, #120]	; (80077fc <prvHeapInit+0xa8>)
 8007782:	18d3      	adds	r3, r2, r3
 8007784:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800778a:	4b1d      	ldr	r3, [pc, #116]	; (8007800 <prvHeapInit+0xac>)
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007790:	4b1b      	ldr	r3, [pc, #108]	; (8007800 <prvHeapInit+0xac>)
 8007792:	2200      	movs	r2, #0
 8007794:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	18d3      	adds	r3, r2, r3
 800779c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800779e:	2208      	movs	r2, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2207      	movs	r2, #7
 80077aa:	4393      	bics	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4b14      	ldr	r3, [pc, #80]	; (8007804 <prvHeapInit+0xb0>)
 80077b2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <prvHeapInit+0xb0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2200      	movs	r2, #0
 80077ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <prvHeapInit+0xb0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	1ad2      	subs	r2, r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <prvHeapInit+0xb0>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <prvHeapInit+0xb4>)
 80077e0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <prvHeapInit+0xb8>)
 80077e8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <prvHeapInit+0xbc>)
 80077ec:	2280      	movs	r2, #128	; 0x80
 80077ee:	0612      	lsls	r2, r2, #24
 80077f0:	601a      	str	r2, [r3, #0]
}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b004      	add	sp, #16
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	20000fdc 	.word	0x20000fdc
 8007800:	20001bdc 	.word	0x20001bdc
 8007804:	20001be4 	.word	0x20001be4
 8007808:	20001bec 	.word	0x20001bec
 800780c:	20001be8 	.word	0x20001be8
 8007810:	20001bf8 	.word	0x20001bf8

08007814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800781c:	4b27      	ldr	r3, [pc, #156]	; (80078bc <prvInsertBlockIntoFreeList+0xa8>)
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e002      	b.n	8007828 <prvInsertBlockIntoFreeList+0x14>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	429a      	cmp	r2, r3
 8007830:	d8f7      	bhi.n	8007822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	18d3      	adds	r3, r2, r3
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d108      	bne.n	8007856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	18d2      	adds	r2, r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	18d2      	adds	r2, r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d118      	bne.n	800789c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <prvInsertBlockIntoFreeList+0xac>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d00d      	beq.n	8007892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	18d2      	adds	r2, r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e008      	b.n	80078a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <prvInsertBlockIntoFreeList+0xac>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e003      	b.n	80078a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d002      	beq.n	80078b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b004      	add	sp, #16
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	20001bdc 	.word	0x20001bdc
 80078c0:	20001be4 	.word	0x20001be4

080078c4 <__libc_init_array>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	2600      	movs	r6, #0
 80078c8:	4d0c      	ldr	r5, [pc, #48]	; (80078fc <__libc_init_array+0x38>)
 80078ca:	4c0d      	ldr	r4, [pc, #52]	; (8007900 <__libc_init_array+0x3c>)
 80078cc:	1b64      	subs	r4, r4, r5
 80078ce:	10a4      	asrs	r4, r4, #2
 80078d0:	42a6      	cmp	r6, r4
 80078d2:	d109      	bne.n	80078e8 <__libc_init_array+0x24>
 80078d4:	2600      	movs	r6, #0
 80078d6:	f000 f8f9 	bl	8007acc <_init>
 80078da:	4d0a      	ldr	r5, [pc, #40]	; (8007904 <__libc_init_array+0x40>)
 80078dc:	4c0a      	ldr	r4, [pc, #40]	; (8007908 <__libc_init_array+0x44>)
 80078de:	1b64      	subs	r4, r4, r5
 80078e0:	10a4      	asrs	r4, r4, #2
 80078e2:	42a6      	cmp	r6, r4
 80078e4:	d105      	bne.n	80078f2 <__libc_init_array+0x2e>
 80078e6:	bd70      	pop	{r4, r5, r6, pc}
 80078e8:	00b3      	lsls	r3, r6, #2
 80078ea:	58eb      	ldr	r3, [r5, r3]
 80078ec:	4798      	blx	r3
 80078ee:	3601      	adds	r6, #1
 80078f0:	e7ee      	b.n	80078d0 <__libc_init_array+0xc>
 80078f2:	00b3      	lsls	r3, r6, #2
 80078f4:	58eb      	ldr	r3, [r5, r3]
 80078f6:	4798      	blx	r3
 80078f8:	3601      	adds	r6, #1
 80078fa:	e7f2      	b.n	80078e2 <__libc_init_array+0x1e>
 80078fc:	08007d74 	.word	0x08007d74
 8007900:	08007d74 	.word	0x08007d74
 8007904:	08007d74 	.word	0x08007d74
 8007908:	08007d78 	.word	0x08007d78

0800790c <__retarget_lock_acquire_recursive>:
 800790c:	4770      	bx	lr

0800790e <__retarget_lock_release_recursive>:
 800790e:	4770      	bx	lr

08007910 <memcpy>:
 8007910:	2300      	movs	r3, #0
 8007912:	b510      	push	{r4, lr}
 8007914:	429a      	cmp	r2, r3
 8007916:	d100      	bne.n	800791a <memcpy+0xa>
 8007918:	bd10      	pop	{r4, pc}
 800791a:	5ccc      	ldrb	r4, [r1, r3]
 800791c:	54c4      	strb	r4, [r0, r3]
 800791e:	3301      	adds	r3, #1
 8007920:	e7f8      	b.n	8007914 <memcpy+0x4>

08007922 <memset>:
 8007922:	0003      	movs	r3, r0
 8007924:	1882      	adds	r2, r0, r2
 8007926:	4293      	cmp	r3, r2
 8007928:	d100      	bne.n	800792c <memset+0xa>
 800792a:	4770      	bx	lr
 800792c:	7019      	strb	r1, [r3, #0]
 800792e:	3301      	adds	r3, #1
 8007930:	e7f9      	b.n	8007926 <memset+0x4>

08007932 <cleanup_glue>:
 8007932:	b570      	push	{r4, r5, r6, lr}
 8007934:	000d      	movs	r5, r1
 8007936:	6809      	ldr	r1, [r1, #0]
 8007938:	0004      	movs	r4, r0
 800793a:	2900      	cmp	r1, #0
 800793c:	d001      	beq.n	8007942 <cleanup_glue+0x10>
 800793e:	f7ff fff8 	bl	8007932 <cleanup_glue>
 8007942:	0029      	movs	r1, r5
 8007944:	0020      	movs	r0, r4
 8007946:	f000 f877 	bl	8007a38 <_free_r>
 800794a:	bd70      	pop	{r4, r5, r6, pc}

0800794c <_reclaim_reent>:
 800794c:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <_reclaim_reent+0xc8>)
 800794e:	b570      	push	{r4, r5, r6, lr}
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	0004      	movs	r4, r0
 8007954:	4283      	cmp	r3, r0
 8007956:	d049      	beq.n	80079ec <_reclaim_reent+0xa0>
 8007958:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <_reclaim_reent+0x28>
 800795e:	2500      	movs	r5, #0
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	42ab      	cmp	r3, r5
 8007964:	d147      	bne.n	80079f6 <_reclaim_reent+0xaa>
 8007966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	2900      	cmp	r1, #0
 800796c:	d002      	beq.n	8007974 <_reclaim_reent+0x28>
 800796e:	0020      	movs	r0, r4
 8007970:	f000 f862 	bl	8007a38 <_free_r>
 8007974:	6961      	ldr	r1, [r4, #20]
 8007976:	2900      	cmp	r1, #0
 8007978:	d002      	beq.n	8007980 <_reclaim_reent+0x34>
 800797a:	0020      	movs	r0, r4
 800797c:	f000 f85c 	bl	8007a38 <_free_r>
 8007980:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007982:	2900      	cmp	r1, #0
 8007984:	d002      	beq.n	800798c <_reclaim_reent+0x40>
 8007986:	0020      	movs	r0, r4
 8007988:	f000 f856 	bl	8007a38 <_free_r>
 800798c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800798e:	2900      	cmp	r1, #0
 8007990:	d002      	beq.n	8007998 <_reclaim_reent+0x4c>
 8007992:	0020      	movs	r0, r4
 8007994:	f000 f850 	bl	8007a38 <_free_r>
 8007998:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800799a:	2900      	cmp	r1, #0
 800799c:	d002      	beq.n	80079a4 <_reclaim_reent+0x58>
 800799e:	0020      	movs	r0, r4
 80079a0:	f000 f84a 	bl	8007a38 <_free_r>
 80079a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80079a6:	2900      	cmp	r1, #0
 80079a8:	d002      	beq.n	80079b0 <_reclaim_reent+0x64>
 80079aa:	0020      	movs	r0, r4
 80079ac:	f000 f844 	bl	8007a38 <_free_r>
 80079b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80079b2:	2900      	cmp	r1, #0
 80079b4:	d002      	beq.n	80079bc <_reclaim_reent+0x70>
 80079b6:	0020      	movs	r0, r4
 80079b8:	f000 f83e 	bl	8007a38 <_free_r>
 80079bc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80079be:	2900      	cmp	r1, #0
 80079c0:	d002      	beq.n	80079c8 <_reclaim_reent+0x7c>
 80079c2:	0020      	movs	r0, r4
 80079c4:	f000 f838 	bl	8007a38 <_free_r>
 80079c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ca:	2900      	cmp	r1, #0
 80079cc:	d002      	beq.n	80079d4 <_reclaim_reent+0x88>
 80079ce:	0020      	movs	r0, r4
 80079d0:	f000 f832 	bl	8007a38 <_free_r>
 80079d4:	69a3      	ldr	r3, [r4, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d008      	beq.n	80079ec <_reclaim_reent+0xa0>
 80079da:	0020      	movs	r0, r4
 80079dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079de:	4798      	blx	r3
 80079e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079e2:	2900      	cmp	r1, #0
 80079e4:	d002      	beq.n	80079ec <_reclaim_reent+0xa0>
 80079e6:	0020      	movs	r0, r4
 80079e8:	f7ff ffa3 	bl	8007932 <cleanup_glue>
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
 80079ee:	5949      	ldr	r1, [r1, r5]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d108      	bne.n	8007a06 <_reclaim_reent+0xba>
 80079f4:	3504      	adds	r5, #4
 80079f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079f8:	68d9      	ldr	r1, [r3, #12]
 80079fa:	2d80      	cmp	r5, #128	; 0x80
 80079fc:	d1f7      	bne.n	80079ee <_reclaim_reent+0xa2>
 80079fe:	0020      	movs	r0, r4
 8007a00:	f000 f81a 	bl	8007a38 <_free_r>
 8007a04:	e7af      	b.n	8007966 <_reclaim_reent+0x1a>
 8007a06:	680e      	ldr	r6, [r1, #0]
 8007a08:	0020      	movs	r0, r4
 8007a0a:	f000 f815 	bl	8007a38 <_free_r>
 8007a0e:	0031      	movs	r1, r6
 8007a10:	e7ee      	b.n	80079f0 <_reclaim_reent+0xa4>
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	20000014 	.word	0x20000014

08007a18 <__malloc_lock>:
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	4802      	ldr	r0, [pc, #8]	; (8007a24 <__malloc_lock+0xc>)
 8007a1c:	f7ff ff76 	bl	800790c <__retarget_lock_acquire_recursive>
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	20001bfc 	.word	0x20001bfc

08007a28 <__malloc_unlock>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4802      	ldr	r0, [pc, #8]	; (8007a34 <__malloc_unlock+0xc>)
 8007a2c:	f7ff ff6f 	bl	800790e <__retarget_lock_release_recursive>
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	20001bfc 	.word	0x20001bfc

08007a38 <_free_r>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	0005      	movs	r5, r0
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	d010      	beq.n	8007a62 <_free_r+0x2a>
 8007a40:	1f0c      	subs	r4, r1, #4
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da00      	bge.n	8007a4a <_free_r+0x12>
 8007a48:	18e4      	adds	r4, r4, r3
 8007a4a:	0028      	movs	r0, r5
 8007a4c:	f7ff ffe4 	bl	8007a18 <__malloc_lock>
 8007a50:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <_free_r+0x90>)
 8007a52:	6813      	ldr	r3, [r2, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <_free_r+0x2c>
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	6014      	str	r4, [r2, #0]
 8007a5c:	0028      	movs	r0, r5
 8007a5e:	f7ff ffe3 	bl	8007a28 <__malloc_unlock>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	d908      	bls.n	8007a7a <_free_r+0x42>
 8007a68:	6821      	ldr	r1, [r4, #0]
 8007a6a:	1860      	adds	r0, r4, r1
 8007a6c:	4283      	cmp	r3, r0
 8007a6e:	d1f3      	bne.n	8007a58 <_free_r+0x20>
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	1841      	adds	r1, r0, r1
 8007a76:	6021      	str	r1, [r4, #0]
 8007a78:	e7ee      	b.n	8007a58 <_free_r+0x20>
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <_free_r+0x4e>
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	d9f9      	bls.n	8007a7a <_free_r+0x42>
 8007a86:	6811      	ldr	r1, [r2, #0]
 8007a88:	1850      	adds	r0, r2, r1
 8007a8a:	42a0      	cmp	r0, r4
 8007a8c:	d10b      	bne.n	8007aa6 <_free_r+0x6e>
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	1809      	adds	r1, r1, r0
 8007a92:	1850      	adds	r0, r2, r1
 8007a94:	6011      	str	r1, [r2, #0]
 8007a96:	4283      	cmp	r3, r0
 8007a98:	d1e0      	bne.n	8007a5c <_free_r+0x24>
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	1841      	adds	r1, r0, r1
 8007aa0:	6011      	str	r1, [r2, #0]
 8007aa2:	6053      	str	r3, [r2, #4]
 8007aa4:	e7da      	b.n	8007a5c <_free_r+0x24>
 8007aa6:	42a0      	cmp	r0, r4
 8007aa8:	d902      	bls.n	8007ab0 <_free_r+0x78>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	e7d5      	b.n	8007a5c <_free_r+0x24>
 8007ab0:	6821      	ldr	r1, [r4, #0]
 8007ab2:	1860      	adds	r0, r4, r1
 8007ab4:	4283      	cmp	r3, r0
 8007ab6:	d103      	bne.n	8007ac0 <_free_r+0x88>
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	1841      	adds	r1, r0, r1
 8007abe:	6021      	str	r1, [r4, #0]
 8007ac0:	6063      	str	r3, [r4, #4]
 8007ac2:	6054      	str	r4, [r2, #4]
 8007ac4:	e7ca      	b.n	8007a5c <_free_r+0x24>
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	20001c00 	.word	0x20001c00

08007acc <_init>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr

08007ad8 <_fini>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ade:	bc08      	pop	{r3}
 8007ae0:	469e      	mov	lr, r3
 8007ae2:	4770      	bx	lr
