
FreeRTOS_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de7c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800df40  0800df40  0001df40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e68c  0800e68c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e68c  0800e68c  0001e68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e694  0800e694  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e694  0800e694  0001e694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e698  0800e698  0001e698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e69c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bac  200001e4  0800e880  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d90  0800e880  00022d90  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002334a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f3  00000000  00000000  00043556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  00047750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bd0  00000000  00000000  000494b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a77  00000000  00000000  0004b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2db  00000000  00000000  00050aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1453  00000000  00000000  0006edda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012022d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc0  00000000  00000000  00120280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800df24 	.word	0x0800df24

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800df24 	.word	0x0800df24

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f95f 	bl	8001700 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f8af 	bl	80015b0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f951 	bl	8001700 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f947 	bl	8001700 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f8d7 	bl	8001634 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f8cd 	bl	8001634 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f002 f86c 	bl	80025e4 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f002 f867 	bl	80025e4 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_fdiv>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	0245      	lsls	r5, r0, #9
 800068a:	b5c0      	push	{r6, r7, lr}
 800068c:	0047      	lsls	r7, r0, #1
 800068e:	1c0c      	adds	r4, r1, #0
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	0e3f      	lsrs	r7, r7, #24
 8000694:	0fc6      	lsrs	r6, r0, #31
 8000696:	2f00      	cmp	r7, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fdiv+0x1c>
 800069a:	e070      	b.n	800077e <__aeabi_fdiv+0xfe>
 800069c:	2fff      	cmp	r7, #255	; 0xff
 800069e:	d100      	bne.n	80006a2 <__aeabi_fdiv+0x22>
 80006a0:	e075      	b.n	800078e <__aeabi_fdiv+0x10e>
 80006a2:	00eb      	lsls	r3, r5, #3
 80006a4:	2580      	movs	r5, #128	; 0x80
 80006a6:	04ed      	lsls	r5, r5, #19
 80006a8:	431d      	orrs	r5, r3
 80006aa:	2300      	movs	r3, #0
 80006ac:	4699      	mov	r9, r3
 80006ae:	469a      	mov	sl, r3
 80006b0:	3f7f      	subs	r7, #127	; 0x7f
 80006b2:	0260      	lsls	r0, r4, #9
 80006b4:	0a43      	lsrs	r3, r0, #9
 80006b6:	4698      	mov	r8, r3
 80006b8:	0063      	lsls	r3, r4, #1
 80006ba:	0e1b      	lsrs	r3, r3, #24
 80006bc:	0fe4      	lsrs	r4, r4, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d04e      	beq.n	8000760 <__aeabi_fdiv+0xe0>
 80006c2:	2bff      	cmp	r3, #255	; 0xff
 80006c4:	d046      	beq.n	8000754 <__aeabi_fdiv+0xd4>
 80006c6:	4642      	mov	r2, r8
 80006c8:	00d0      	lsls	r0, r2, #3
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	04d2      	lsls	r2, r2, #19
 80006ce:	4302      	orrs	r2, r0
 80006d0:	4690      	mov	r8, r2
 80006d2:	2200      	movs	r2, #0
 80006d4:	3b7f      	subs	r3, #127	; 0x7f
 80006d6:	0031      	movs	r1, r6
 80006d8:	1aff      	subs	r7, r7, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	4061      	eors	r1, r4
 80006de:	b2c9      	uxtb	r1, r1
 80006e0:	4313      	orrs	r3, r2
 80006e2:	2b0f      	cmp	r3, #15
 80006e4:	d900      	bls.n	80006e8 <__aeabi_fdiv+0x68>
 80006e6:	e0b5      	b.n	8000854 <__aeabi_fdiv+0x1d4>
 80006e8:	486e      	ldr	r0, [pc, #440]	; (80008a4 <__aeabi_fdiv+0x224>)
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	58c3      	ldr	r3, [r0, r3]
 80006ee:	469f      	mov	pc, r3
 80006f0:	2300      	movs	r3, #0
 80006f2:	4698      	mov	r8, r3
 80006f4:	0026      	movs	r6, r4
 80006f6:	4645      	mov	r5, r8
 80006f8:	4692      	mov	sl, r2
 80006fa:	4653      	mov	r3, sl
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d100      	bne.n	8000702 <__aeabi_fdiv+0x82>
 8000700:	e089      	b.n	8000816 <__aeabi_fdiv+0x196>
 8000702:	2b03      	cmp	r3, #3
 8000704:	d100      	bne.n	8000708 <__aeabi_fdiv+0x88>
 8000706:	e09e      	b.n	8000846 <__aeabi_fdiv+0x1c6>
 8000708:	2b01      	cmp	r3, #1
 800070a:	d018      	beq.n	800073e <__aeabi_fdiv+0xbe>
 800070c:	003b      	movs	r3, r7
 800070e:	337f      	adds	r3, #127	; 0x7f
 8000710:	2b00      	cmp	r3, #0
 8000712:	dd69      	ble.n	80007e8 <__aeabi_fdiv+0x168>
 8000714:	076a      	lsls	r2, r5, #29
 8000716:	d004      	beq.n	8000722 <__aeabi_fdiv+0xa2>
 8000718:	220f      	movs	r2, #15
 800071a:	402a      	ands	r2, r5
 800071c:	2a04      	cmp	r2, #4
 800071e:	d000      	beq.n	8000722 <__aeabi_fdiv+0xa2>
 8000720:	3504      	adds	r5, #4
 8000722:	012a      	lsls	r2, r5, #4
 8000724:	d503      	bpl.n	800072e <__aeabi_fdiv+0xae>
 8000726:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <__aeabi_fdiv+0x228>)
 8000728:	401d      	ands	r5, r3
 800072a:	003b      	movs	r3, r7
 800072c:	3380      	adds	r3, #128	; 0x80
 800072e:	2bfe      	cmp	r3, #254	; 0xfe
 8000730:	dd00      	ble.n	8000734 <__aeabi_fdiv+0xb4>
 8000732:	e070      	b.n	8000816 <__aeabi_fdiv+0x196>
 8000734:	01ad      	lsls	r5, r5, #6
 8000736:	0a6d      	lsrs	r5, r5, #9
 8000738:	b2d8      	uxtb	r0, r3
 800073a:	e002      	b.n	8000742 <__aeabi_fdiv+0xc2>
 800073c:	000e      	movs	r6, r1
 800073e:	2000      	movs	r0, #0
 8000740:	2500      	movs	r5, #0
 8000742:	05c0      	lsls	r0, r0, #23
 8000744:	4328      	orrs	r0, r5
 8000746:	07f6      	lsls	r6, r6, #31
 8000748:	4330      	orrs	r0, r6
 800074a:	bce0      	pop	{r5, r6, r7}
 800074c:	46ba      	mov	sl, r7
 800074e:	46b1      	mov	r9, r6
 8000750:	46a8      	mov	r8, r5
 8000752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000754:	4643      	mov	r3, r8
 8000756:	2b00      	cmp	r3, #0
 8000758:	d13f      	bne.n	80007da <__aeabi_fdiv+0x15a>
 800075a:	2202      	movs	r2, #2
 800075c:	3fff      	subs	r7, #255	; 0xff
 800075e:	e003      	b.n	8000768 <__aeabi_fdiv+0xe8>
 8000760:	4643      	mov	r3, r8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d12d      	bne.n	80007c2 <__aeabi_fdiv+0x142>
 8000766:	2201      	movs	r2, #1
 8000768:	0031      	movs	r1, r6
 800076a:	464b      	mov	r3, r9
 800076c:	4061      	eors	r1, r4
 800076e:	b2c9      	uxtb	r1, r1
 8000770:	4313      	orrs	r3, r2
 8000772:	2b0f      	cmp	r3, #15
 8000774:	d834      	bhi.n	80007e0 <__aeabi_fdiv+0x160>
 8000776:	484d      	ldr	r0, [pc, #308]	; (80008ac <__aeabi_fdiv+0x22c>)
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	58c3      	ldr	r3, [r0, r3]
 800077c:	469f      	mov	pc, r3
 800077e:	2d00      	cmp	r5, #0
 8000780:	d113      	bne.n	80007aa <__aeabi_fdiv+0x12a>
 8000782:	2304      	movs	r3, #4
 8000784:	4699      	mov	r9, r3
 8000786:	3b03      	subs	r3, #3
 8000788:	2700      	movs	r7, #0
 800078a:	469a      	mov	sl, r3
 800078c:	e791      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d105      	bne.n	800079e <__aeabi_fdiv+0x11e>
 8000792:	2308      	movs	r3, #8
 8000794:	4699      	mov	r9, r3
 8000796:	3b06      	subs	r3, #6
 8000798:	27ff      	movs	r7, #255	; 0xff
 800079a:	469a      	mov	sl, r3
 800079c:	e789      	b.n	80006b2 <__aeabi_fdiv+0x32>
 800079e:	230c      	movs	r3, #12
 80007a0:	4699      	mov	r9, r3
 80007a2:	3b09      	subs	r3, #9
 80007a4:	27ff      	movs	r7, #255	; 0xff
 80007a6:	469a      	mov	sl, r3
 80007a8:	e783      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007aa:	0028      	movs	r0, r5
 80007ac:	f001 fefc 	bl	80025a8 <__clzsi2>
 80007b0:	2776      	movs	r7, #118	; 0x76
 80007b2:	1f43      	subs	r3, r0, #5
 80007b4:	409d      	lsls	r5, r3
 80007b6:	2300      	movs	r3, #0
 80007b8:	427f      	negs	r7, r7
 80007ba:	4699      	mov	r9, r3
 80007bc:	469a      	mov	sl, r3
 80007be:	1a3f      	subs	r7, r7, r0
 80007c0:	e777      	b.n	80006b2 <__aeabi_fdiv+0x32>
 80007c2:	4640      	mov	r0, r8
 80007c4:	f001 fef0 	bl	80025a8 <__clzsi2>
 80007c8:	4642      	mov	r2, r8
 80007ca:	1f43      	subs	r3, r0, #5
 80007cc:	409a      	lsls	r2, r3
 80007ce:	2376      	movs	r3, #118	; 0x76
 80007d0:	425b      	negs	r3, r3
 80007d2:	4690      	mov	r8, r2
 80007d4:	1a1b      	subs	r3, r3, r0
 80007d6:	2200      	movs	r2, #0
 80007d8:	e77d      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007da:	23ff      	movs	r3, #255	; 0xff
 80007dc:	2203      	movs	r2, #3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fdiv+0x56>
 80007e0:	000e      	movs	r6, r1
 80007e2:	20ff      	movs	r0, #255	; 0xff
 80007e4:	2500      	movs	r5, #0
 80007e6:	e7ac      	b.n	8000742 <__aeabi_fdiv+0xc2>
 80007e8:	2001      	movs	r0, #1
 80007ea:	1ac0      	subs	r0, r0, r3
 80007ec:	281b      	cmp	r0, #27
 80007ee:	dca6      	bgt.n	800073e <__aeabi_fdiv+0xbe>
 80007f0:	379e      	adds	r7, #158	; 0x9e
 80007f2:	002a      	movs	r2, r5
 80007f4:	40bd      	lsls	r5, r7
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e6b      	subs	r3, r5, #1
 80007fa:	419d      	sbcs	r5, r3
 80007fc:	4315      	orrs	r5, r2
 80007fe:	076b      	lsls	r3, r5, #29
 8000800:	d004      	beq.n	800080c <__aeabi_fdiv+0x18c>
 8000802:	230f      	movs	r3, #15
 8000804:	402b      	ands	r3, r5
 8000806:	2b04      	cmp	r3, #4
 8000808:	d000      	beq.n	800080c <__aeabi_fdiv+0x18c>
 800080a:	3504      	adds	r5, #4
 800080c:	016b      	lsls	r3, r5, #5
 800080e:	d544      	bpl.n	800089a <__aeabi_fdiv+0x21a>
 8000810:	2001      	movs	r0, #1
 8000812:	2500      	movs	r5, #0
 8000814:	e795      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000816:	20ff      	movs	r0, #255	; 0xff
 8000818:	2500      	movs	r5, #0
 800081a:	e792      	b.n	8000742 <__aeabi_fdiv+0xc2>
 800081c:	2580      	movs	r5, #128	; 0x80
 800081e:	2600      	movs	r6, #0
 8000820:	20ff      	movs	r0, #255	; 0xff
 8000822:	03ed      	lsls	r5, r5, #15
 8000824:	e78d      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000826:	2300      	movs	r3, #0
 8000828:	4698      	mov	r8, r3
 800082a:	2080      	movs	r0, #128	; 0x80
 800082c:	03c0      	lsls	r0, r0, #15
 800082e:	4205      	tst	r5, r0
 8000830:	d009      	beq.n	8000846 <__aeabi_fdiv+0x1c6>
 8000832:	4643      	mov	r3, r8
 8000834:	4203      	tst	r3, r0
 8000836:	d106      	bne.n	8000846 <__aeabi_fdiv+0x1c6>
 8000838:	4645      	mov	r5, r8
 800083a:	4305      	orrs	r5, r0
 800083c:	026d      	lsls	r5, r5, #9
 800083e:	0026      	movs	r6, r4
 8000840:	20ff      	movs	r0, #255	; 0xff
 8000842:	0a6d      	lsrs	r5, r5, #9
 8000844:	e77d      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	03c0      	lsls	r0, r0, #15
 800084a:	4305      	orrs	r5, r0
 800084c:	026d      	lsls	r5, r5, #9
 800084e:	20ff      	movs	r0, #255	; 0xff
 8000850:	0a6d      	lsrs	r5, r5, #9
 8000852:	e776      	b.n	8000742 <__aeabi_fdiv+0xc2>
 8000854:	4642      	mov	r2, r8
 8000856:	016b      	lsls	r3, r5, #5
 8000858:	0150      	lsls	r0, r2, #5
 800085a:	4283      	cmp	r3, r0
 800085c:	d219      	bcs.n	8000892 <__aeabi_fdiv+0x212>
 800085e:	221b      	movs	r2, #27
 8000860:	2500      	movs	r5, #0
 8000862:	3f01      	subs	r7, #1
 8000864:	2601      	movs	r6, #1
 8000866:	001c      	movs	r4, r3
 8000868:	006d      	lsls	r5, r5, #1
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2c00      	cmp	r4, #0
 800086e:	db01      	blt.n	8000874 <__aeabi_fdiv+0x1f4>
 8000870:	4298      	cmp	r0, r3
 8000872:	d801      	bhi.n	8000878 <__aeabi_fdiv+0x1f8>
 8000874:	1a1b      	subs	r3, r3, r0
 8000876:	4335      	orrs	r5, r6
 8000878:	3a01      	subs	r2, #1
 800087a:	2a00      	cmp	r2, #0
 800087c:	d1f3      	bne.n	8000866 <__aeabi_fdiv+0x1e6>
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	4193      	sbcs	r3, r2
 8000882:	431d      	orrs	r5, r3
 8000884:	003b      	movs	r3, r7
 8000886:	337f      	adds	r3, #127	; 0x7f
 8000888:	000e      	movs	r6, r1
 800088a:	2b00      	cmp	r3, #0
 800088c:	dd00      	ble.n	8000890 <__aeabi_fdiv+0x210>
 800088e:	e741      	b.n	8000714 <__aeabi_fdiv+0x94>
 8000890:	e7aa      	b.n	80007e8 <__aeabi_fdiv+0x168>
 8000892:	221a      	movs	r2, #26
 8000894:	2501      	movs	r5, #1
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	e7e4      	b.n	8000864 <__aeabi_fdiv+0x1e4>
 800089a:	01ad      	lsls	r5, r5, #6
 800089c:	2000      	movs	r0, #0
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	e74f      	b.n	8000742 <__aeabi_fdiv+0xc2>
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	0800dff4 	.word	0x0800dff4
 80008a8:	f7ffffff 	.word	0xf7ffffff
 80008ac:	0800e034 	.word	0x0800e034

080008b0 <__aeabi_i2f>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d013      	beq.n	80008de <__aeabi_i2f+0x2e>
 80008b6:	17c3      	asrs	r3, r0, #31
 80008b8:	18c6      	adds	r6, r0, r3
 80008ba:	405e      	eors	r6, r3
 80008bc:	0fc4      	lsrs	r4, r0, #31
 80008be:	0030      	movs	r0, r6
 80008c0:	f001 fe72 	bl	80025a8 <__clzsi2>
 80008c4:	239e      	movs	r3, #158	; 0x9e
 80008c6:	0005      	movs	r5, r0
 80008c8:	1a1b      	subs	r3, r3, r0
 80008ca:	2b96      	cmp	r3, #150	; 0x96
 80008cc:	dc0f      	bgt.n	80008ee <__aeabi_i2f+0x3e>
 80008ce:	2808      	cmp	r0, #8
 80008d0:	dd01      	ble.n	80008d6 <__aeabi_i2f+0x26>
 80008d2:	3d08      	subs	r5, #8
 80008d4:	40ae      	lsls	r6, r5
 80008d6:	0276      	lsls	r6, r6, #9
 80008d8:	0a76      	lsrs	r6, r6, #9
 80008da:	b2d8      	uxtb	r0, r3
 80008dc:	e002      	b.n	80008e4 <__aeabi_i2f+0x34>
 80008de:	2400      	movs	r4, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	2600      	movs	r6, #0
 80008e4:	05c0      	lsls	r0, r0, #23
 80008e6:	4330      	orrs	r0, r6
 80008e8:	07e4      	lsls	r4, r4, #31
 80008ea:	4320      	orrs	r0, r4
 80008ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ee:	2b99      	cmp	r3, #153	; 0x99
 80008f0:	dd0c      	ble.n	800090c <__aeabi_i2f+0x5c>
 80008f2:	2205      	movs	r2, #5
 80008f4:	0031      	movs	r1, r6
 80008f6:	1a12      	subs	r2, r2, r0
 80008f8:	40d1      	lsrs	r1, r2
 80008fa:	000a      	movs	r2, r1
 80008fc:	0001      	movs	r1, r0
 80008fe:	0030      	movs	r0, r6
 8000900:	311b      	adds	r1, #27
 8000902:	4088      	lsls	r0, r1
 8000904:	1e41      	subs	r1, r0, #1
 8000906:	4188      	sbcs	r0, r1
 8000908:	4302      	orrs	r2, r0
 800090a:	0016      	movs	r6, r2
 800090c:	2d05      	cmp	r5, #5
 800090e:	dc12      	bgt.n	8000936 <__aeabi_i2f+0x86>
 8000910:	0031      	movs	r1, r6
 8000912:	4f0d      	ldr	r7, [pc, #52]	; (8000948 <__aeabi_i2f+0x98>)
 8000914:	4039      	ands	r1, r7
 8000916:	0772      	lsls	r2, r6, #29
 8000918:	d009      	beq.n	800092e <__aeabi_i2f+0x7e>
 800091a:	200f      	movs	r0, #15
 800091c:	4030      	ands	r0, r6
 800091e:	2804      	cmp	r0, #4
 8000920:	d005      	beq.n	800092e <__aeabi_i2f+0x7e>
 8000922:	3104      	adds	r1, #4
 8000924:	014a      	lsls	r2, r1, #5
 8000926:	d502      	bpl.n	800092e <__aeabi_i2f+0x7e>
 8000928:	239f      	movs	r3, #159	; 0x9f
 800092a:	4039      	ands	r1, r7
 800092c:	1b5b      	subs	r3, r3, r5
 800092e:	0189      	lsls	r1, r1, #6
 8000930:	0a4e      	lsrs	r6, r1, #9
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	e7d6      	b.n	80008e4 <__aeabi_i2f+0x34>
 8000936:	1f6a      	subs	r2, r5, #5
 8000938:	4096      	lsls	r6, r2
 800093a:	0031      	movs	r1, r6
 800093c:	4f02      	ldr	r7, [pc, #8]	; (8000948 <__aeabi_i2f+0x98>)
 800093e:	4039      	ands	r1, r7
 8000940:	0772      	lsls	r2, r6, #29
 8000942:	d0f4      	beq.n	800092e <__aeabi_i2f+0x7e>
 8000944:	e7e9      	b.n	800091a <__aeabi_i2f+0x6a>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	fbffffff 	.word	0xfbffffff

0800094c <__aeabi_dadd>:
 800094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094e:	464f      	mov	r7, r9
 8000950:	4646      	mov	r6, r8
 8000952:	46d6      	mov	lr, sl
 8000954:	000d      	movs	r5, r1
 8000956:	0004      	movs	r4, r0
 8000958:	b5c0      	push	{r6, r7, lr}
 800095a:	001f      	movs	r7, r3
 800095c:	0011      	movs	r1, r2
 800095e:	0328      	lsls	r0, r5, #12
 8000960:	0f62      	lsrs	r2, r4, #29
 8000962:	0a40      	lsrs	r0, r0, #9
 8000964:	4310      	orrs	r0, r2
 8000966:	007a      	lsls	r2, r7, #1
 8000968:	0d52      	lsrs	r2, r2, #21
 800096a:	00e3      	lsls	r3, r4, #3
 800096c:	033c      	lsls	r4, r7, #12
 800096e:	4691      	mov	r9, r2
 8000970:	0a64      	lsrs	r4, r4, #9
 8000972:	0ffa      	lsrs	r2, r7, #31
 8000974:	0f4f      	lsrs	r7, r1, #29
 8000976:	006e      	lsls	r6, r5, #1
 8000978:	4327      	orrs	r7, r4
 800097a:	4692      	mov	sl, r2
 800097c:	46b8      	mov	r8, r7
 800097e:	0d76      	lsrs	r6, r6, #21
 8000980:	0fed      	lsrs	r5, r5, #31
 8000982:	00c9      	lsls	r1, r1, #3
 8000984:	4295      	cmp	r5, r2
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x3e>
 8000988:	e099      	b.n	8000abe <__aeabi_dadd+0x172>
 800098a:	464c      	mov	r4, r9
 800098c:	1b34      	subs	r4, r6, r4
 800098e:	46a4      	mov	ip, r4
 8000990:	2c00      	cmp	r4, #0
 8000992:	dc00      	bgt.n	8000996 <__aeabi_dadd+0x4a>
 8000994:	e07c      	b.n	8000a90 <__aeabi_dadd+0x144>
 8000996:	464a      	mov	r2, r9
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_dadd+0x52>
 800099c:	e0b8      	b.n	8000b10 <__aeabi_dadd+0x1c4>
 800099e:	4ac5      	ldr	r2, [pc, #788]	; (8000cb4 <__aeabi_dadd+0x368>)
 80009a0:	4296      	cmp	r6, r2
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x5a>
 80009a4:	e11c      	b.n	8000be0 <__aeabi_dadd+0x294>
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	003c      	movs	r4, r7
 80009aa:	0412      	lsls	r2, r2, #16
 80009ac:	4314      	orrs	r4, r2
 80009ae:	46a0      	mov	r8, r4
 80009b0:	4662      	mov	r2, ip
 80009b2:	2a38      	cmp	r2, #56	; 0x38
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_dadd+0x6c>
 80009b6:	e161      	b.n	8000c7c <__aeabi_dadd+0x330>
 80009b8:	2a1f      	cmp	r2, #31
 80009ba:	dd00      	ble.n	80009be <__aeabi_dadd+0x72>
 80009bc:	e1cc      	b.n	8000d58 <__aeabi_dadd+0x40c>
 80009be:	4664      	mov	r4, ip
 80009c0:	2220      	movs	r2, #32
 80009c2:	1b12      	subs	r2, r2, r4
 80009c4:	4644      	mov	r4, r8
 80009c6:	4094      	lsls	r4, r2
 80009c8:	000f      	movs	r7, r1
 80009ca:	46a1      	mov	r9, r4
 80009cc:	4664      	mov	r4, ip
 80009ce:	4091      	lsls	r1, r2
 80009d0:	40e7      	lsrs	r7, r4
 80009d2:	464c      	mov	r4, r9
 80009d4:	1e4a      	subs	r2, r1, #1
 80009d6:	4191      	sbcs	r1, r2
 80009d8:	433c      	orrs	r4, r7
 80009da:	4642      	mov	r2, r8
 80009dc:	4321      	orrs	r1, r4
 80009de:	4664      	mov	r4, ip
 80009e0:	40e2      	lsrs	r2, r4
 80009e2:	1a80      	subs	r0, r0, r2
 80009e4:	1a5c      	subs	r4, r3, r1
 80009e6:	42a3      	cmp	r3, r4
 80009e8:	419b      	sbcs	r3, r3
 80009ea:	425f      	negs	r7, r3
 80009ec:	1bc7      	subs	r7, r0, r7
 80009ee:	023b      	lsls	r3, r7, #8
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_dadd+0xa8>
 80009f2:	e0d0      	b.n	8000b96 <__aeabi_dadd+0x24a>
 80009f4:	027f      	lsls	r7, r7, #9
 80009f6:	0a7f      	lsrs	r7, r7, #9
 80009f8:	2f00      	cmp	r7, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0xb2>
 80009fc:	e0ff      	b.n	8000bfe <__aeabi_dadd+0x2b2>
 80009fe:	0038      	movs	r0, r7
 8000a00:	f001 fdd2 	bl	80025a8 <__clzsi2>
 8000a04:	0001      	movs	r1, r0
 8000a06:	3908      	subs	r1, #8
 8000a08:	2320      	movs	r3, #32
 8000a0a:	0022      	movs	r2, r4
 8000a0c:	1a5b      	subs	r3, r3, r1
 8000a0e:	408f      	lsls	r7, r1
 8000a10:	40da      	lsrs	r2, r3
 8000a12:	408c      	lsls	r4, r1
 8000a14:	4317      	orrs	r7, r2
 8000a16:	42b1      	cmp	r1, r6
 8000a18:	da00      	bge.n	8000a1c <__aeabi_dadd+0xd0>
 8000a1a:	e0ff      	b.n	8000c1c <__aeabi_dadd+0x2d0>
 8000a1c:	1b89      	subs	r1, r1, r6
 8000a1e:	1c4b      	adds	r3, r1, #1
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dd00      	ble.n	8000a26 <__aeabi_dadd+0xda>
 8000a24:	e0a8      	b.n	8000b78 <__aeabi_dadd+0x22c>
 8000a26:	2220      	movs	r2, #32
 8000a28:	0039      	movs	r1, r7
 8000a2a:	1ad2      	subs	r2, r2, r3
 8000a2c:	0020      	movs	r0, r4
 8000a2e:	4094      	lsls	r4, r2
 8000a30:	4091      	lsls	r1, r2
 8000a32:	40d8      	lsrs	r0, r3
 8000a34:	1e62      	subs	r2, r4, #1
 8000a36:	4194      	sbcs	r4, r2
 8000a38:	40df      	lsrs	r7, r3
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	430c      	orrs	r4, r1
 8000a40:	0763      	lsls	r3, r4, #29
 8000a42:	d009      	beq.n	8000a58 <__aeabi_dadd+0x10c>
 8000a44:	230f      	movs	r3, #15
 8000a46:	4023      	ands	r3, r4
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d005      	beq.n	8000a58 <__aeabi_dadd+0x10c>
 8000a4c:	1d23      	adds	r3, r4, #4
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	41a4      	sbcs	r4, r4
 8000a52:	4264      	negs	r4, r4
 8000a54:	193f      	adds	r7, r7, r4
 8000a56:	001c      	movs	r4, r3
 8000a58:	023b      	lsls	r3, r7, #8
 8000a5a:	d400      	bmi.n	8000a5e <__aeabi_dadd+0x112>
 8000a5c:	e09e      	b.n	8000b9c <__aeabi_dadd+0x250>
 8000a5e:	4b95      	ldr	r3, [pc, #596]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000a60:	3601      	adds	r6, #1
 8000a62:	429e      	cmp	r6, r3
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x11c>
 8000a66:	e0b7      	b.n	8000bd8 <__aeabi_dadd+0x28c>
 8000a68:	4a93      	ldr	r2, [pc, #588]	; (8000cb8 <__aeabi_dadd+0x36c>)
 8000a6a:	08e4      	lsrs	r4, r4, #3
 8000a6c:	4017      	ands	r7, r2
 8000a6e:	077b      	lsls	r3, r7, #29
 8000a70:	0571      	lsls	r1, r6, #21
 8000a72:	027f      	lsls	r7, r7, #9
 8000a74:	4323      	orrs	r3, r4
 8000a76:	0b3f      	lsrs	r7, r7, #12
 8000a78:	0d4a      	lsrs	r2, r1, #21
 8000a7a:	0512      	lsls	r2, r2, #20
 8000a7c:	433a      	orrs	r2, r7
 8000a7e:	07ed      	lsls	r5, r5, #31
 8000a80:	432a      	orrs	r2, r5
 8000a82:	0018      	movs	r0, r3
 8000a84:	0011      	movs	r1, r2
 8000a86:	bce0      	pop	{r5, r6, r7}
 8000a88:	46ba      	mov	sl, r7
 8000a8a:	46b1      	mov	r9, r6
 8000a8c:	46a8      	mov	r8, r5
 8000a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d04b      	beq.n	8000b2c <__aeabi_dadd+0x1e0>
 8000a94:	464c      	mov	r4, r9
 8000a96:	1ba4      	subs	r4, r4, r6
 8000a98:	46a4      	mov	ip, r4
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d000      	beq.n	8000aa0 <__aeabi_dadd+0x154>
 8000a9e:	e123      	b.n	8000ce8 <__aeabi_dadd+0x39c>
 8000aa0:	0004      	movs	r4, r0
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x15c>
 8000aa6:	e1af      	b.n	8000e08 <__aeabi_dadd+0x4bc>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	1e54      	subs	r4, r2, #1
 8000aac:	2a01      	cmp	r2, #1
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x166>
 8000ab0:	e215      	b.n	8000ede <__aeabi_dadd+0x592>
 8000ab2:	4d80      	ldr	r5, [pc, #512]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000ab4:	45ac      	cmp	ip, r5
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x16e>
 8000ab8:	e1c8      	b.n	8000e4c <__aeabi_dadd+0x500>
 8000aba:	46a4      	mov	ip, r4
 8000abc:	e11b      	b.n	8000cf6 <__aeabi_dadd+0x3aa>
 8000abe:	464a      	mov	r2, r9
 8000ac0:	1ab2      	subs	r2, r6, r2
 8000ac2:	4694      	mov	ip, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	dc00      	bgt.n	8000aca <__aeabi_dadd+0x17e>
 8000ac8:	e0ac      	b.n	8000c24 <__aeabi_dadd+0x2d8>
 8000aca:	464a      	mov	r2, r9
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d043      	beq.n	8000b58 <__aeabi_dadd+0x20c>
 8000ad0:	4a78      	ldr	r2, [pc, #480]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000ad2:	4296      	cmp	r6, r2
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x18c>
 8000ad6:	e1af      	b.n	8000e38 <__aeabi_dadd+0x4ec>
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	003c      	movs	r4, r7
 8000adc:	0412      	lsls	r2, r2, #16
 8000ade:	4314      	orrs	r4, r2
 8000ae0:	46a0      	mov	r8, r4
 8000ae2:	4662      	mov	r2, ip
 8000ae4:	2a38      	cmp	r2, #56	; 0x38
 8000ae6:	dc67      	bgt.n	8000bb8 <__aeabi_dadd+0x26c>
 8000ae8:	2a1f      	cmp	r2, #31
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_dadd+0x1a2>
 8000aec:	e15f      	b.n	8000dae <__aeabi_dadd+0x462>
 8000aee:	4647      	mov	r7, r8
 8000af0:	3a20      	subs	r2, #32
 8000af2:	40d7      	lsrs	r7, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	2a20      	cmp	r2, #32
 8000af8:	d005      	beq.n	8000b06 <__aeabi_dadd+0x1ba>
 8000afa:	4664      	mov	r4, ip
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	1b12      	subs	r2, r2, r4
 8000b00:	4644      	mov	r4, r8
 8000b02:	4094      	lsls	r4, r2
 8000b04:	4321      	orrs	r1, r4
 8000b06:	1e4a      	subs	r2, r1, #1
 8000b08:	4191      	sbcs	r1, r2
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	433c      	orrs	r4, r7
 8000b0e:	e057      	b.n	8000bc0 <__aeabi_dadd+0x274>
 8000b10:	003a      	movs	r2, r7
 8000b12:	430a      	orrs	r2, r1
 8000b14:	d100      	bne.n	8000b18 <__aeabi_dadd+0x1cc>
 8000b16:	e105      	b.n	8000d24 <__aeabi_dadd+0x3d8>
 8000b18:	0022      	movs	r2, r4
 8000b1a:	3a01      	subs	r2, #1
 8000b1c:	2c01      	cmp	r4, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x1d6>
 8000b20:	e182      	b.n	8000e28 <__aeabi_dadd+0x4dc>
 8000b22:	4c64      	ldr	r4, [pc, #400]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000b24:	45a4      	cmp	ip, r4
 8000b26:	d05b      	beq.n	8000be0 <__aeabi_dadd+0x294>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	e741      	b.n	80009b0 <__aeabi_dadd+0x64>
 8000b2c:	4c63      	ldr	r4, [pc, #396]	; (8000cbc <__aeabi_dadd+0x370>)
 8000b2e:	1c77      	adds	r7, r6, #1
 8000b30:	4227      	tst	r7, r4
 8000b32:	d000      	beq.n	8000b36 <__aeabi_dadd+0x1ea>
 8000b34:	e0c4      	b.n	8000cc0 <__aeabi_dadd+0x374>
 8000b36:	0004      	movs	r4, r0
 8000b38:	431c      	orrs	r4, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_dadd+0x1f4>
 8000b3e:	e169      	b.n	8000e14 <__aeabi_dadd+0x4c8>
 8000b40:	2c00      	cmp	r4, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x1fa>
 8000b44:	e1bf      	b.n	8000ec6 <__aeabi_dadd+0x57a>
 8000b46:	4644      	mov	r4, r8
 8000b48:	430c      	orrs	r4, r1
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x202>
 8000b4c:	e1d0      	b.n	8000ef0 <__aeabi_dadd+0x5a4>
 8000b4e:	0742      	lsls	r2, r0, #29
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	08c0      	lsrs	r0, r0, #3
 8000b56:	e029      	b.n	8000bac <__aeabi_dadd+0x260>
 8000b58:	003a      	movs	r2, r7
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_dadd+0x214>
 8000b5e:	e170      	b.n	8000e42 <__aeabi_dadd+0x4f6>
 8000b60:	4662      	mov	r2, ip
 8000b62:	4664      	mov	r4, ip
 8000b64:	3a01      	subs	r2, #1
 8000b66:	2c01      	cmp	r4, #1
 8000b68:	d100      	bne.n	8000b6c <__aeabi_dadd+0x220>
 8000b6a:	e0e0      	b.n	8000d2e <__aeabi_dadd+0x3e2>
 8000b6c:	4c51      	ldr	r4, [pc, #324]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x228>
 8000b72:	e161      	b.n	8000e38 <__aeabi_dadd+0x4ec>
 8000b74:	4694      	mov	ip, r2
 8000b76:	e7b4      	b.n	8000ae2 <__aeabi_dadd+0x196>
 8000b78:	003a      	movs	r2, r7
 8000b7a:	391f      	subs	r1, #31
 8000b7c:	40ca      	lsrs	r2, r1
 8000b7e:	0011      	movs	r1, r2
 8000b80:	2b20      	cmp	r3, #32
 8000b82:	d003      	beq.n	8000b8c <__aeabi_dadd+0x240>
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	409f      	lsls	r7, r3
 8000b8a:	433c      	orrs	r4, r7
 8000b8c:	1e63      	subs	r3, r4, #1
 8000b8e:	419c      	sbcs	r4, r3
 8000b90:	2700      	movs	r7, #0
 8000b92:	2600      	movs	r6, #0
 8000b94:	430c      	orrs	r4, r1
 8000b96:	0763      	lsls	r3, r4, #29
 8000b98:	d000      	beq.n	8000b9c <__aeabi_dadd+0x250>
 8000b9a:	e753      	b.n	8000a44 <__aeabi_dadd+0xf8>
 8000b9c:	46b4      	mov	ip, r6
 8000b9e:	08e4      	lsrs	r4, r4, #3
 8000ba0:	077b      	lsls	r3, r7, #29
 8000ba2:	4323      	orrs	r3, r4
 8000ba4:	08f8      	lsrs	r0, r7, #3
 8000ba6:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000ba8:	4594      	cmp	ip, r2
 8000baa:	d01d      	beq.n	8000be8 <__aeabi_dadd+0x29c>
 8000bac:	4662      	mov	r2, ip
 8000bae:	0307      	lsls	r7, r0, #12
 8000bb0:	0552      	lsls	r2, r2, #21
 8000bb2:	0b3f      	lsrs	r7, r7, #12
 8000bb4:	0d52      	lsrs	r2, r2, #21
 8000bb6:	e760      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000bb8:	4644      	mov	r4, r8
 8000bba:	430c      	orrs	r4, r1
 8000bbc:	1e62      	subs	r2, r4, #1
 8000bbe:	4194      	sbcs	r4, r2
 8000bc0:	18e4      	adds	r4, r4, r3
 8000bc2:	429c      	cmp	r4, r3
 8000bc4:	419b      	sbcs	r3, r3
 8000bc6:	425f      	negs	r7, r3
 8000bc8:	183f      	adds	r7, r7, r0
 8000bca:	023b      	lsls	r3, r7, #8
 8000bcc:	d5e3      	bpl.n	8000b96 <__aeabi_dadd+0x24a>
 8000bce:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000bd0:	3601      	adds	r6, #1
 8000bd2:	429e      	cmp	r6, r3
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dadd+0x28c>
 8000bd6:	e0b5      	b.n	8000d44 <__aeabi_dadd+0x3f8>
 8000bd8:	0032      	movs	r2, r6
 8000bda:	2700      	movs	r7, #0
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e74c      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000be0:	0742      	lsls	r2, r0, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	001a      	movs	r2, r3
 8000bea:	4302      	orrs	r2, r0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x2a4>
 8000bee:	e1e1      	b.n	8000fb4 <__aeabi_dadd+0x668>
 8000bf0:	2780      	movs	r7, #128	; 0x80
 8000bf2:	033f      	lsls	r7, r7, #12
 8000bf4:	4307      	orrs	r7, r0
 8000bf6:	033f      	lsls	r7, r7, #12
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000bfa:	0b3f      	lsrs	r7, r7, #12
 8000bfc:	e73d      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f001 fcd2 	bl	80025a8 <__clzsi2>
 8000c04:	0001      	movs	r1, r0
 8000c06:	3118      	adds	r1, #24
 8000c08:	291f      	cmp	r1, #31
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_dadd+0x2c2>
 8000c0c:	e6fc      	b.n	8000a08 <__aeabi_dadd+0xbc>
 8000c0e:	3808      	subs	r0, #8
 8000c10:	4084      	lsls	r4, r0
 8000c12:	0027      	movs	r7, r4
 8000c14:	2400      	movs	r4, #0
 8000c16:	42b1      	cmp	r1, r6
 8000c18:	db00      	blt.n	8000c1c <__aeabi_dadd+0x2d0>
 8000c1a:	e6ff      	b.n	8000a1c <__aeabi_dadd+0xd0>
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <__aeabi_dadd+0x36c>)
 8000c1e:	1a76      	subs	r6, r6, r1
 8000c20:	4017      	ands	r7, r2
 8000c22:	e70d      	b.n	8000a40 <__aeabi_dadd+0xf4>
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d02f      	beq.n	8000c88 <__aeabi_dadd+0x33c>
 8000c28:	464a      	mov	r2, r9
 8000c2a:	1b92      	subs	r2, r2, r6
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dadd+0x2e8>
 8000c32:	e0ad      	b.n	8000d90 <__aeabi_dadd+0x444>
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <__aeabi_dadd+0x368>)
 8000c36:	4591      	cmp	r9, r2
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dadd+0x2f0>
 8000c3a:	e10f      	b.n	8000e5c <__aeabi_dadd+0x510>
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0412      	lsls	r2, r2, #16
 8000c40:	4310      	orrs	r0, r2
 8000c42:	4662      	mov	r2, ip
 8000c44:	2a38      	cmp	r2, #56	; 0x38
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dadd+0x2fe>
 8000c48:	e10f      	b.n	8000e6a <__aeabi_dadd+0x51e>
 8000c4a:	2a1f      	cmp	r2, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0x304>
 8000c4e:	e180      	b.n	8000f52 <__aeabi_dadd+0x606>
 8000c50:	4664      	mov	r4, ip
 8000c52:	2220      	movs	r2, #32
 8000c54:	001e      	movs	r6, r3
 8000c56:	1b12      	subs	r2, r2, r4
 8000c58:	4667      	mov	r7, ip
 8000c5a:	0004      	movs	r4, r0
 8000c5c:	4093      	lsls	r3, r2
 8000c5e:	4094      	lsls	r4, r2
 8000c60:	40fe      	lsrs	r6, r7
 8000c62:	1e5a      	subs	r2, r3, #1
 8000c64:	4193      	sbcs	r3, r2
 8000c66:	40f8      	lsrs	r0, r7
 8000c68:	4334      	orrs	r4, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	4480      	add	r8, r0
 8000c6e:	1864      	adds	r4, r4, r1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	41bf      	sbcs	r7, r7
 8000c74:	427f      	negs	r7, r7
 8000c76:	464e      	mov	r6, r9
 8000c78:	4447      	add	r7, r8
 8000c7a:	e7a6      	b.n	8000bca <__aeabi_dadd+0x27e>
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	0011      	movs	r1, r2
 8000c82:	1e4a      	subs	r2, r1, #1
 8000c84:	4191      	sbcs	r1, r2
 8000c86:	e6ad      	b.n	80009e4 <__aeabi_dadd+0x98>
 8000c88:	4c0c      	ldr	r4, [pc, #48]	; (8000cbc <__aeabi_dadd+0x370>)
 8000c8a:	1c72      	adds	r2, r6, #1
 8000c8c:	4222      	tst	r2, r4
 8000c8e:	d000      	beq.n	8000c92 <__aeabi_dadd+0x346>
 8000c90:	e0a1      	b.n	8000dd6 <__aeabi_dadd+0x48a>
 8000c92:	0002      	movs	r2, r0
 8000c94:	431a      	orrs	r2, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x350>
 8000c9a:	e0fa      	b.n	8000e92 <__aeabi_dadd+0x546>
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x356>
 8000ca0:	e145      	b.n	8000f2e <__aeabi_dadd+0x5e2>
 8000ca2:	003a      	movs	r2, r7
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	d000      	beq.n	8000caa <__aeabi_dadd+0x35e>
 8000ca8:	e146      	b.n	8000f38 <__aeabi_dadd+0x5ec>
 8000caa:	0742      	lsls	r2, r0, #29
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	08c0      	lsrs	r0, r0, #3
 8000cb2:	e77b      	b.n	8000bac <__aeabi_dadd+0x260>
 8000cb4:	000007ff 	.word	0x000007ff
 8000cb8:	ff7fffff 	.word	0xff7fffff
 8000cbc:	000007fe 	.word	0x000007fe
 8000cc0:	4647      	mov	r7, r8
 8000cc2:	1a5c      	subs	r4, r3, r1
 8000cc4:	1bc2      	subs	r2, r0, r7
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	41bf      	sbcs	r7, r7
 8000cca:	427f      	negs	r7, r7
 8000ccc:	46b9      	mov	r9, r7
 8000cce:	0017      	movs	r7, r2
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1abf      	subs	r7, r7, r2
 8000cd4:	023a      	lsls	r2, r7, #8
 8000cd6:	d500      	bpl.n	8000cda <__aeabi_dadd+0x38e>
 8000cd8:	e08d      	b.n	8000df6 <__aeabi_dadd+0x4aa>
 8000cda:	0023      	movs	r3, r4
 8000cdc:	433b      	orrs	r3, r7
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x396>
 8000ce0:	e68a      	b.n	80009f8 <__aeabi_dadd+0xac>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	2500      	movs	r5, #0
 8000ce6:	e761      	b.n	8000bac <__aeabi_dadd+0x260>
 8000ce8:	4cb4      	ldr	r4, [pc, #720]	; (8000fbc <__aeabi_dadd+0x670>)
 8000cea:	45a1      	cmp	r9, r4
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dadd+0x3a4>
 8000cee:	e0ad      	b.n	8000e4c <__aeabi_dadd+0x500>
 8000cf0:	2480      	movs	r4, #128	; 0x80
 8000cf2:	0424      	lsls	r4, r4, #16
 8000cf4:	4320      	orrs	r0, r4
 8000cf6:	4664      	mov	r4, ip
 8000cf8:	2c38      	cmp	r4, #56	; 0x38
 8000cfa:	dc3d      	bgt.n	8000d78 <__aeabi_dadd+0x42c>
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	2c1f      	cmp	r4, #31
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_dadd+0x3b8>
 8000d02:	e0b7      	b.n	8000e74 <__aeabi_dadd+0x528>
 8000d04:	2520      	movs	r5, #32
 8000d06:	001e      	movs	r6, r3
 8000d08:	1b2d      	subs	r5, r5, r4
 8000d0a:	0004      	movs	r4, r0
 8000d0c:	40ab      	lsls	r3, r5
 8000d0e:	40ac      	lsls	r4, r5
 8000d10:	40d6      	lsrs	r6, r2
 8000d12:	40d0      	lsrs	r0, r2
 8000d14:	4642      	mov	r2, r8
 8000d16:	1e5d      	subs	r5, r3, #1
 8000d18:	41ab      	sbcs	r3, r5
 8000d1a:	4334      	orrs	r4, r6
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	4690      	mov	r8, r2
 8000d20:	4323      	orrs	r3, r4
 8000d22:	e02c      	b.n	8000d7e <__aeabi_dadd+0x432>
 8000d24:	0742      	lsls	r2, r0, #29
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	08c0      	lsrs	r0, r0, #3
 8000d2c:	e73b      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000d2e:	185c      	adds	r4, r3, r1
 8000d30:	429c      	cmp	r4, r3
 8000d32:	419b      	sbcs	r3, r3
 8000d34:	4440      	add	r0, r8
 8000d36:	425b      	negs	r3, r3
 8000d38:	18c7      	adds	r7, r0, r3
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	023b      	lsls	r3, r7, #8
 8000d3e:	d400      	bmi.n	8000d42 <__aeabi_dadd+0x3f6>
 8000d40:	e729      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000d42:	2602      	movs	r6, #2
 8000d44:	4a9e      	ldr	r2, [pc, #632]	; (8000fc0 <__aeabi_dadd+0x674>)
 8000d46:	0863      	lsrs	r3, r4, #1
 8000d48:	4017      	ands	r7, r2
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4014      	ands	r4, r2
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	07fb      	lsls	r3, r7, #31
 8000d52:	431c      	orrs	r4, r3
 8000d54:	087f      	lsrs	r7, r7, #1
 8000d56:	e673      	b.n	8000a40 <__aeabi_dadd+0xf4>
 8000d58:	4644      	mov	r4, r8
 8000d5a:	3a20      	subs	r2, #32
 8000d5c:	40d4      	lsrs	r4, r2
 8000d5e:	4662      	mov	r2, ip
 8000d60:	2a20      	cmp	r2, #32
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x424>
 8000d64:	4667      	mov	r7, ip
 8000d66:	2240      	movs	r2, #64	; 0x40
 8000d68:	1bd2      	subs	r2, r2, r7
 8000d6a:	4647      	mov	r7, r8
 8000d6c:	4097      	lsls	r7, r2
 8000d6e:	4339      	orrs	r1, r7
 8000d70:	1e4a      	subs	r2, r1, #1
 8000d72:	4191      	sbcs	r1, r2
 8000d74:	4321      	orrs	r1, r4
 8000d76:	e635      	b.n	80009e4 <__aeabi_dadd+0x98>
 8000d78:	4303      	orrs	r3, r0
 8000d7a:	1e58      	subs	r0, r3, #1
 8000d7c:	4183      	sbcs	r3, r0
 8000d7e:	1acc      	subs	r4, r1, r3
 8000d80:	42a1      	cmp	r1, r4
 8000d82:	41bf      	sbcs	r7, r7
 8000d84:	4643      	mov	r3, r8
 8000d86:	427f      	negs	r7, r7
 8000d88:	4655      	mov	r5, sl
 8000d8a:	464e      	mov	r6, r9
 8000d8c:	1bdf      	subs	r7, r3, r7
 8000d8e:	e62e      	b.n	80009ee <__aeabi_dadd+0xa2>
 8000d90:	0002      	movs	r2, r0
 8000d92:	431a      	orrs	r2, r3
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0x44c>
 8000d96:	e0bd      	b.n	8000f14 <__aeabi_dadd+0x5c8>
 8000d98:	4662      	mov	r2, ip
 8000d9a:	4664      	mov	r4, ip
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	2c01      	cmp	r4, #1
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dadd+0x458>
 8000da2:	e0e5      	b.n	8000f70 <__aeabi_dadd+0x624>
 8000da4:	4c85      	ldr	r4, [pc, #532]	; (8000fbc <__aeabi_dadd+0x670>)
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d058      	beq.n	8000e5c <__aeabi_dadd+0x510>
 8000daa:	4694      	mov	ip, r2
 8000dac:	e749      	b.n	8000c42 <__aeabi_dadd+0x2f6>
 8000dae:	4664      	mov	r4, ip
 8000db0:	2220      	movs	r2, #32
 8000db2:	1b12      	subs	r2, r2, r4
 8000db4:	4644      	mov	r4, r8
 8000db6:	4094      	lsls	r4, r2
 8000db8:	000f      	movs	r7, r1
 8000dba:	46a1      	mov	r9, r4
 8000dbc:	4664      	mov	r4, ip
 8000dbe:	4091      	lsls	r1, r2
 8000dc0:	40e7      	lsrs	r7, r4
 8000dc2:	464c      	mov	r4, r9
 8000dc4:	1e4a      	subs	r2, r1, #1
 8000dc6:	4191      	sbcs	r1, r2
 8000dc8:	433c      	orrs	r4, r7
 8000dca:	4642      	mov	r2, r8
 8000dcc:	430c      	orrs	r4, r1
 8000dce:	4661      	mov	r1, ip
 8000dd0:	40ca      	lsrs	r2, r1
 8000dd2:	1880      	adds	r0, r0, r2
 8000dd4:	e6f4      	b.n	8000bc0 <__aeabi_dadd+0x274>
 8000dd6:	4c79      	ldr	r4, [pc, #484]	; (8000fbc <__aeabi_dadd+0x670>)
 8000dd8:	42a2      	cmp	r2, r4
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x492>
 8000ddc:	e6fd      	b.n	8000bda <__aeabi_dadd+0x28e>
 8000dde:	1859      	adds	r1, r3, r1
 8000de0:	4299      	cmp	r1, r3
 8000de2:	419b      	sbcs	r3, r3
 8000de4:	4440      	add	r0, r8
 8000de6:	425f      	negs	r7, r3
 8000de8:	19c7      	adds	r7, r0, r7
 8000dea:	07fc      	lsls	r4, r7, #31
 8000dec:	0849      	lsrs	r1, r1, #1
 8000dee:	0016      	movs	r6, r2
 8000df0:	430c      	orrs	r4, r1
 8000df2:	087f      	lsrs	r7, r7, #1
 8000df4:	e6cf      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000df6:	1acc      	subs	r4, r1, r3
 8000df8:	42a1      	cmp	r1, r4
 8000dfa:	41bf      	sbcs	r7, r7
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	427f      	negs	r7, r7
 8000e00:	1a18      	subs	r0, r3, r0
 8000e02:	4655      	mov	r5, sl
 8000e04:	1bc7      	subs	r7, r0, r7
 8000e06:	e5f7      	b.n	80009f8 <__aeabi_dadd+0xac>
 8000e08:	08c9      	lsrs	r1, r1, #3
 8000e0a:	077b      	lsls	r3, r7, #29
 8000e0c:	4655      	mov	r5, sl
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	08f8      	lsrs	r0, r7, #3
 8000e12:	e6c8      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d000      	beq.n	8000e1a <__aeabi_dadd+0x4ce>
 8000e18:	e081      	b.n	8000f1e <__aeabi_dadd+0x5d2>
 8000e1a:	4643      	mov	r3, r8
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	d115      	bne.n	8000e4c <__aeabi_dadd+0x500>
 8000e20:	2080      	movs	r0, #128	; 0x80
 8000e22:	2500      	movs	r5, #0
 8000e24:	0300      	lsls	r0, r0, #12
 8000e26:	e6e3      	b.n	8000bf0 <__aeabi_dadd+0x2a4>
 8000e28:	1a5c      	subs	r4, r3, r1
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	419b      	sbcs	r3, r3
 8000e2e:	1bc7      	subs	r7, r0, r7
 8000e30:	425b      	negs	r3, r3
 8000e32:	2601      	movs	r6, #1
 8000e34:	1aff      	subs	r7, r7, r3
 8000e36:	e5da      	b.n	80009ee <__aeabi_dadd+0xa2>
 8000e38:	0742      	lsls	r2, r0, #29
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	08c0      	lsrs	r0, r0, #3
 8000e40:	e6d2      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000e42:	0742      	lsls	r2, r0, #29
 8000e44:	08db      	lsrs	r3, r3, #3
 8000e46:	4313      	orrs	r3, r2
 8000e48:	08c0      	lsrs	r0, r0, #3
 8000e4a:	e6ac      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4642      	mov	r2, r8
 8000e50:	08c9      	lsrs	r1, r1, #3
 8000e52:	075b      	lsls	r3, r3, #29
 8000e54:	4655      	mov	r5, sl
 8000e56:	430b      	orrs	r3, r1
 8000e58:	08d0      	lsrs	r0, r2, #3
 8000e5a:	e6c5      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	4642      	mov	r2, r8
 8000e60:	075b      	lsls	r3, r3, #29
 8000e62:	08c9      	lsrs	r1, r1, #3
 8000e64:	430b      	orrs	r3, r1
 8000e66:	08d0      	lsrs	r0, r2, #3
 8000e68:	e6be      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	001c      	movs	r4, r3
 8000e6e:	1e63      	subs	r3, r4, #1
 8000e70:	419c      	sbcs	r4, r3
 8000e72:	e6fc      	b.n	8000c6e <__aeabi_dadd+0x322>
 8000e74:	0002      	movs	r2, r0
 8000e76:	3c20      	subs	r4, #32
 8000e78:	40e2      	lsrs	r2, r4
 8000e7a:	0014      	movs	r4, r2
 8000e7c:	4662      	mov	r2, ip
 8000e7e:	2a20      	cmp	r2, #32
 8000e80:	d003      	beq.n	8000e8a <__aeabi_dadd+0x53e>
 8000e82:	2540      	movs	r5, #64	; 0x40
 8000e84:	1aad      	subs	r5, r5, r2
 8000e86:	40a8      	lsls	r0, r5
 8000e88:	4303      	orrs	r3, r0
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	4183      	sbcs	r3, r0
 8000e8e:	4323      	orrs	r3, r4
 8000e90:	e775      	b.n	8000d7e <__aeabi_dadd+0x432>
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d0e2      	beq.n	8000e5c <__aeabi_dadd+0x510>
 8000e96:	003a      	movs	r2, r7
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	d0cd      	beq.n	8000e38 <__aeabi_dadd+0x4ec>
 8000e9c:	0742      	lsls	r2, r0, #29
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	08c0      	lsrs	r0, r0, #3
 8000ea6:	0312      	lsls	r2, r2, #12
 8000ea8:	4210      	tst	r0, r2
 8000eaa:	d006      	beq.n	8000eba <__aeabi_dadd+0x56e>
 8000eac:	08fc      	lsrs	r4, r7, #3
 8000eae:	4214      	tst	r4, r2
 8000eb0:	d103      	bne.n	8000eba <__aeabi_dadd+0x56e>
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	08cb      	lsrs	r3, r1, #3
 8000eb6:	077a      	lsls	r2, r7, #29
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	0f5a      	lsrs	r2, r3, #29
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	0752      	lsls	r2, r2, #29
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	e690      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000ec6:	4643      	mov	r3, r8
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x582>
 8000ecc:	e709      	b.n	8000ce2 <__aeabi_dadd+0x396>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	08c9      	lsrs	r1, r1, #3
 8000ed4:	075b      	lsls	r3, r3, #29
 8000ed6:	4655      	mov	r5, sl
 8000ed8:	430b      	orrs	r3, r1
 8000eda:	08d0      	lsrs	r0, r2, #3
 8000edc:	e666      	b.n	8000bac <__aeabi_dadd+0x260>
 8000ede:	1acc      	subs	r4, r1, r3
 8000ee0:	42a1      	cmp	r1, r4
 8000ee2:	4189      	sbcs	r1, r1
 8000ee4:	1a3f      	subs	r7, r7, r0
 8000ee6:	4249      	negs	r1, r1
 8000ee8:	4655      	mov	r5, sl
 8000eea:	2601      	movs	r6, #1
 8000eec:	1a7f      	subs	r7, r7, r1
 8000eee:	e57e      	b.n	80009ee <__aeabi_dadd+0xa2>
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	1a5c      	subs	r4, r3, r1
 8000ef4:	1a87      	subs	r7, r0, r2
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	4192      	sbcs	r2, r2
 8000efa:	4252      	negs	r2, r2
 8000efc:	1abf      	subs	r7, r7, r2
 8000efe:	023a      	lsls	r2, r7, #8
 8000f00:	d53d      	bpl.n	8000f7e <__aeabi_dadd+0x632>
 8000f02:	1acc      	subs	r4, r1, r3
 8000f04:	42a1      	cmp	r1, r4
 8000f06:	4189      	sbcs	r1, r1
 8000f08:	4643      	mov	r3, r8
 8000f0a:	4249      	negs	r1, r1
 8000f0c:	1a1f      	subs	r7, r3, r0
 8000f0e:	4655      	mov	r5, sl
 8000f10:	1a7f      	subs	r7, r7, r1
 8000f12:	e595      	b.n	8000a40 <__aeabi_dadd+0xf4>
 8000f14:	077b      	lsls	r3, r7, #29
 8000f16:	08c9      	lsrs	r1, r1, #3
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	08f8      	lsrs	r0, r7, #3
 8000f1c:	e643      	b.n	8000ba6 <__aeabi_dadd+0x25a>
 8000f1e:	4644      	mov	r4, r8
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	430c      	orrs	r4, r1
 8000f24:	d130      	bne.n	8000f88 <__aeabi_dadd+0x63c>
 8000f26:	0742      	lsls	r2, r0, #29
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	08c0      	lsrs	r0, r0, #3
 8000f2c:	e65c      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000f2e:	077b      	lsls	r3, r7, #29
 8000f30:	08c9      	lsrs	r1, r1, #3
 8000f32:	430b      	orrs	r3, r1
 8000f34:	08f8      	lsrs	r0, r7, #3
 8000f36:	e639      	b.n	8000bac <__aeabi_dadd+0x260>
 8000f38:	185c      	adds	r4, r3, r1
 8000f3a:	429c      	cmp	r4, r3
 8000f3c:	419b      	sbcs	r3, r3
 8000f3e:	4440      	add	r0, r8
 8000f40:	425b      	negs	r3, r3
 8000f42:	18c7      	adds	r7, r0, r3
 8000f44:	023b      	lsls	r3, r7, #8
 8000f46:	d400      	bmi.n	8000f4a <__aeabi_dadd+0x5fe>
 8000f48:	e625      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <__aeabi_dadd+0x674>)
 8000f4c:	2601      	movs	r6, #1
 8000f4e:	401f      	ands	r7, r3
 8000f50:	e621      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000f52:	0004      	movs	r4, r0
 8000f54:	3a20      	subs	r2, #32
 8000f56:	40d4      	lsrs	r4, r2
 8000f58:	4662      	mov	r2, ip
 8000f5a:	2a20      	cmp	r2, #32
 8000f5c:	d004      	beq.n	8000f68 <__aeabi_dadd+0x61c>
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	4666      	mov	r6, ip
 8000f62:	1b92      	subs	r2, r2, r6
 8000f64:	4090      	lsls	r0, r2
 8000f66:	4303      	orrs	r3, r0
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	4193      	sbcs	r3, r2
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	e67e      	b.n	8000c6e <__aeabi_dadd+0x322>
 8000f70:	185c      	adds	r4, r3, r1
 8000f72:	428c      	cmp	r4, r1
 8000f74:	4189      	sbcs	r1, r1
 8000f76:	4440      	add	r0, r8
 8000f78:	4249      	negs	r1, r1
 8000f7a:	1847      	adds	r7, r0, r1
 8000f7c:	e6dd      	b.n	8000d3a <__aeabi_dadd+0x3ee>
 8000f7e:	0023      	movs	r3, r4
 8000f80:	433b      	orrs	r3, r7
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0x63a>
 8000f84:	e6ad      	b.n	8000ce2 <__aeabi_dadd+0x396>
 8000f86:	e606      	b.n	8000b96 <__aeabi_dadd+0x24a>
 8000f88:	0744      	lsls	r4, r0, #29
 8000f8a:	4323      	orrs	r3, r4
 8000f8c:	2480      	movs	r4, #128	; 0x80
 8000f8e:	08c0      	lsrs	r0, r0, #3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	4220      	tst	r0, r4
 8000f94:	d008      	beq.n	8000fa8 <__aeabi_dadd+0x65c>
 8000f96:	4642      	mov	r2, r8
 8000f98:	08d6      	lsrs	r6, r2, #3
 8000f9a:	4226      	tst	r6, r4
 8000f9c:	d104      	bne.n	8000fa8 <__aeabi_dadd+0x65c>
 8000f9e:	4655      	mov	r5, sl
 8000fa0:	0030      	movs	r0, r6
 8000fa2:	08cb      	lsrs	r3, r1, #3
 8000fa4:	0751      	lsls	r1, r2, #29
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	0f5a      	lsrs	r2, r3, #29
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	0752      	lsls	r2, r2, #29
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	e619      	b.n	8000be8 <__aeabi_dadd+0x29c>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4a01      	ldr	r2, [pc, #4]	; (8000fbc <__aeabi_dadd+0x670>)
 8000fb8:	001f      	movs	r7, r3
 8000fba:	e55e      	b.n	8000a7a <__aeabi_dadd+0x12e>
 8000fbc:	000007ff 	.word	0x000007ff
 8000fc0:	ff7fffff 	.word	0xff7fffff

08000fc4 <__aeabi_ddiv>:
 8000fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc6:	4657      	mov	r7, sl
 8000fc8:	464e      	mov	r6, r9
 8000fca:	4645      	mov	r5, r8
 8000fcc:	46de      	mov	lr, fp
 8000fce:	b5e0      	push	{r5, r6, r7, lr}
 8000fd0:	4681      	mov	r9, r0
 8000fd2:	0005      	movs	r5, r0
 8000fd4:	030c      	lsls	r4, r1, #12
 8000fd6:	0048      	lsls	r0, r1, #1
 8000fd8:	4692      	mov	sl, r2
 8000fda:	001f      	movs	r7, r3
 8000fdc:	b085      	sub	sp, #20
 8000fde:	0b24      	lsrs	r4, r4, #12
 8000fe0:	0d40      	lsrs	r0, r0, #21
 8000fe2:	0fce      	lsrs	r6, r1, #31
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d100      	bne.n	8000fea <__aeabi_ddiv+0x26>
 8000fe8:	e156      	b.n	8001298 <__aeabi_ddiv+0x2d4>
 8000fea:	4bd4      	ldr	r3, [pc, #848]	; (800133c <__aeabi_ddiv+0x378>)
 8000fec:	4298      	cmp	r0, r3
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_ddiv+0x2e>
 8000ff0:	e172      	b.n	80012d8 <__aeabi_ddiv+0x314>
 8000ff2:	0f6b      	lsrs	r3, r5, #29
 8000ff4:	00e4      	lsls	r4, r4, #3
 8000ff6:	431c      	orrs	r4, r3
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	4323      	orrs	r3, r4
 8000ffe:	4698      	mov	r8, r3
 8001000:	4bcf      	ldr	r3, [pc, #828]	; (8001340 <__aeabi_ddiv+0x37c>)
 8001002:	00ed      	lsls	r5, r5, #3
 8001004:	469b      	mov	fp, r3
 8001006:	2300      	movs	r3, #0
 8001008:	4699      	mov	r9, r3
 800100a:	4483      	add	fp, r0
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	033c      	lsls	r4, r7, #12
 8001010:	007b      	lsls	r3, r7, #1
 8001012:	4650      	mov	r0, sl
 8001014:	0b24      	lsrs	r4, r4, #12
 8001016:	0d5b      	lsrs	r3, r3, #21
 8001018:	0fff      	lsrs	r7, r7, #31
 800101a:	2b00      	cmp	r3, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_ddiv+0x5c>
 800101e:	e11f      	b.n	8001260 <__aeabi_ddiv+0x29c>
 8001020:	4ac6      	ldr	r2, [pc, #792]	; (800133c <__aeabi_ddiv+0x378>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d100      	bne.n	8001028 <__aeabi_ddiv+0x64>
 8001026:	e162      	b.n	80012ee <__aeabi_ddiv+0x32a>
 8001028:	49c5      	ldr	r1, [pc, #788]	; (8001340 <__aeabi_ddiv+0x37c>)
 800102a:	0f42      	lsrs	r2, r0, #29
 800102c:	468c      	mov	ip, r1
 800102e:	00e4      	lsls	r4, r4, #3
 8001030:	4659      	mov	r1, fp
 8001032:	4314      	orrs	r4, r2
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	4463      	add	r3, ip
 8001038:	0412      	lsls	r2, r2, #16
 800103a:	1acb      	subs	r3, r1, r3
 800103c:	4314      	orrs	r4, r2
 800103e:	469b      	mov	fp, r3
 8001040:	00c2      	lsls	r2, r0, #3
 8001042:	2000      	movs	r0, #0
 8001044:	0033      	movs	r3, r6
 8001046:	407b      	eors	r3, r7
 8001048:	469a      	mov	sl, r3
 800104a:	464b      	mov	r3, r9
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d827      	bhi.n	80010a0 <__aeabi_ddiv+0xdc>
 8001050:	49bc      	ldr	r1, [pc, #752]	; (8001344 <__aeabi_ddiv+0x380>)
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	58cb      	ldr	r3, [r1, r3]
 8001056:	469f      	mov	pc, r3
 8001058:	46b2      	mov	sl, r6
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d016      	beq.n	800108e <__aeabi_ddiv+0xca>
 8001060:	2b03      	cmp	r3, #3
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0xa2>
 8001064:	e28e      	b.n	8001584 <__aeabi_ddiv+0x5c0>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d000      	beq.n	800106c <__aeabi_ddiv+0xa8>
 800106a:	e0d9      	b.n	8001220 <__aeabi_ddiv+0x25c>
 800106c:	2300      	movs	r3, #0
 800106e:	2400      	movs	r4, #0
 8001070:	2500      	movs	r5, #0
 8001072:	4652      	mov	r2, sl
 8001074:	051b      	lsls	r3, r3, #20
 8001076:	4323      	orrs	r3, r4
 8001078:	07d2      	lsls	r2, r2, #31
 800107a:	4313      	orrs	r3, r2
 800107c:	0028      	movs	r0, r5
 800107e:	0019      	movs	r1, r3
 8001080:	b005      	add	sp, #20
 8001082:	bcf0      	pop	{r4, r5, r6, r7}
 8001084:	46bb      	mov	fp, r7
 8001086:	46b2      	mov	sl, r6
 8001088:	46a9      	mov	r9, r5
 800108a:	46a0      	mov	r8, r4
 800108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108e:	2400      	movs	r4, #0
 8001090:	2500      	movs	r5, #0
 8001092:	4baa      	ldr	r3, [pc, #680]	; (800133c <__aeabi_ddiv+0x378>)
 8001094:	e7ed      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001096:	46ba      	mov	sl, r7
 8001098:	46a0      	mov	r8, r4
 800109a:	0015      	movs	r5, r2
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	e7dc      	b.n	800105a <__aeabi_ddiv+0x96>
 80010a0:	4544      	cmp	r4, r8
 80010a2:	d200      	bcs.n	80010a6 <__aeabi_ddiv+0xe2>
 80010a4:	e1c7      	b.n	8001436 <__aeabi_ddiv+0x472>
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0xe6>
 80010a8:	e1c2      	b.n	8001430 <__aeabi_ddiv+0x46c>
 80010aa:	2301      	movs	r3, #1
 80010ac:	425b      	negs	r3, r3
 80010ae:	469c      	mov	ip, r3
 80010b0:	002e      	movs	r6, r5
 80010b2:	4640      	mov	r0, r8
 80010b4:	2500      	movs	r5, #0
 80010b6:	44e3      	add	fp, ip
 80010b8:	0223      	lsls	r3, r4, #8
 80010ba:	0e14      	lsrs	r4, r2, #24
 80010bc:	431c      	orrs	r4, r3
 80010be:	0c1b      	lsrs	r3, r3, #16
 80010c0:	4699      	mov	r9, r3
 80010c2:	0423      	lsls	r3, r4, #16
 80010c4:	0c1f      	lsrs	r7, r3, #16
 80010c6:	0212      	lsls	r2, r2, #8
 80010c8:	4649      	mov	r1, r9
 80010ca:	9200      	str	r2, [sp, #0]
 80010cc:	9701      	str	r7, [sp, #4]
 80010ce:	f7ff f8bd 	bl	800024c <__aeabi_uidivmod>
 80010d2:	0002      	movs	r2, r0
 80010d4:	437a      	muls	r2, r7
 80010d6:	040b      	lsls	r3, r1, #16
 80010d8:	0c31      	lsrs	r1, r6, #16
 80010da:	4680      	mov	r8, r0
 80010dc:	4319      	orrs	r1, r3
 80010de:	428a      	cmp	r2, r1
 80010e0:	d907      	bls.n	80010f2 <__aeabi_ddiv+0x12e>
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	469c      	mov	ip, r3
 80010e8:	1909      	adds	r1, r1, r4
 80010ea:	44e0      	add	r8, ip
 80010ec:	428c      	cmp	r4, r1
 80010ee:	d800      	bhi.n	80010f2 <__aeabi_ddiv+0x12e>
 80010f0:	e207      	b.n	8001502 <__aeabi_ddiv+0x53e>
 80010f2:	1a88      	subs	r0, r1, r2
 80010f4:	4649      	mov	r1, r9
 80010f6:	f7ff f8a9 	bl	800024c <__aeabi_uidivmod>
 80010fa:	0409      	lsls	r1, r1, #16
 80010fc:	468c      	mov	ip, r1
 80010fe:	0431      	lsls	r1, r6, #16
 8001100:	4666      	mov	r6, ip
 8001102:	9a01      	ldr	r2, [sp, #4]
 8001104:	0c09      	lsrs	r1, r1, #16
 8001106:	4342      	muls	r2, r0
 8001108:	0003      	movs	r3, r0
 800110a:	4331      	orrs	r1, r6
 800110c:	428a      	cmp	r2, r1
 800110e:	d904      	bls.n	800111a <__aeabi_ddiv+0x156>
 8001110:	1909      	adds	r1, r1, r4
 8001112:	3b01      	subs	r3, #1
 8001114:	428c      	cmp	r4, r1
 8001116:	d800      	bhi.n	800111a <__aeabi_ddiv+0x156>
 8001118:	e1ed      	b.n	80014f6 <__aeabi_ddiv+0x532>
 800111a:	1a88      	subs	r0, r1, r2
 800111c:	4642      	mov	r2, r8
 800111e:	0412      	lsls	r2, r2, #16
 8001120:	431a      	orrs	r2, r3
 8001122:	4690      	mov	r8, r2
 8001124:	4641      	mov	r1, r8
 8001126:	9b00      	ldr	r3, [sp, #0]
 8001128:	040e      	lsls	r6, r1, #16
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	001f      	movs	r7, r3
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	9b00      	ldr	r3, [sp, #0]
 8001132:	0c36      	lsrs	r6, r6, #16
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	0c19      	lsrs	r1, r3, #16
 8001138:	000b      	movs	r3, r1
 800113a:	4373      	muls	r3, r6
 800113c:	0c12      	lsrs	r2, r2, #16
 800113e:	437e      	muls	r6, r7
 8001140:	9103      	str	r1, [sp, #12]
 8001142:	4351      	muls	r1, r2
 8001144:	437a      	muls	r2, r7
 8001146:	0c1f      	lsrs	r7, r3, #16
 8001148:	46bc      	mov	ip, r7
 800114a:	1876      	adds	r6, r6, r1
 800114c:	4466      	add	r6, ip
 800114e:	42b1      	cmp	r1, r6
 8001150:	d903      	bls.n	800115a <__aeabi_ddiv+0x196>
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	468c      	mov	ip, r1
 8001158:	4462      	add	r2, ip
 800115a:	0c31      	lsrs	r1, r6, #16
 800115c:	188a      	adds	r2, r1, r2
 800115e:	0431      	lsls	r1, r6, #16
 8001160:	041e      	lsls	r6, r3, #16
 8001162:	0c36      	lsrs	r6, r6, #16
 8001164:	198e      	adds	r6, r1, r6
 8001166:	4290      	cmp	r0, r2
 8001168:	d302      	bcc.n	8001170 <__aeabi_ddiv+0x1ac>
 800116a:	d112      	bne.n	8001192 <__aeabi_ddiv+0x1ce>
 800116c:	42b5      	cmp	r5, r6
 800116e:	d210      	bcs.n	8001192 <__aeabi_ddiv+0x1ce>
 8001170:	4643      	mov	r3, r8
 8001172:	1e59      	subs	r1, r3, #1
 8001174:	9b00      	ldr	r3, [sp, #0]
 8001176:	469c      	mov	ip, r3
 8001178:	4465      	add	r5, ip
 800117a:	001f      	movs	r7, r3
 800117c:	429d      	cmp	r5, r3
 800117e:	419b      	sbcs	r3, r3
 8001180:	425b      	negs	r3, r3
 8001182:	191b      	adds	r3, r3, r4
 8001184:	18c0      	adds	r0, r0, r3
 8001186:	4284      	cmp	r4, r0
 8001188:	d200      	bcs.n	800118c <__aeabi_ddiv+0x1c8>
 800118a:	e1a0      	b.n	80014ce <__aeabi_ddiv+0x50a>
 800118c:	d100      	bne.n	8001190 <__aeabi_ddiv+0x1cc>
 800118e:	e19b      	b.n	80014c8 <__aeabi_ddiv+0x504>
 8001190:	4688      	mov	r8, r1
 8001192:	1bae      	subs	r6, r5, r6
 8001194:	42b5      	cmp	r5, r6
 8001196:	41ad      	sbcs	r5, r5
 8001198:	1a80      	subs	r0, r0, r2
 800119a:	426d      	negs	r5, r5
 800119c:	1b40      	subs	r0, r0, r5
 800119e:	4284      	cmp	r4, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x1e0>
 80011a2:	e1d5      	b.n	8001550 <__aeabi_ddiv+0x58c>
 80011a4:	4649      	mov	r1, r9
 80011a6:	f7ff f851 	bl	800024c <__aeabi_uidivmod>
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	040b      	lsls	r3, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0c31      	lsrs	r1, r6, #16
 80011b2:	0005      	movs	r5, r0
 80011b4:	4319      	orrs	r1, r3
 80011b6:	428a      	cmp	r2, r1
 80011b8:	d900      	bls.n	80011bc <__aeabi_ddiv+0x1f8>
 80011ba:	e16c      	b.n	8001496 <__aeabi_ddiv+0x4d2>
 80011bc:	1a88      	subs	r0, r1, r2
 80011be:	4649      	mov	r1, r9
 80011c0:	f7ff f844 	bl	800024c <__aeabi_uidivmod>
 80011c4:	9a01      	ldr	r2, [sp, #4]
 80011c6:	0436      	lsls	r6, r6, #16
 80011c8:	4342      	muls	r2, r0
 80011ca:	0409      	lsls	r1, r1, #16
 80011cc:	0c36      	lsrs	r6, r6, #16
 80011ce:	0003      	movs	r3, r0
 80011d0:	430e      	orrs	r6, r1
 80011d2:	42b2      	cmp	r2, r6
 80011d4:	d900      	bls.n	80011d8 <__aeabi_ddiv+0x214>
 80011d6:	e153      	b.n	8001480 <__aeabi_ddiv+0x4bc>
 80011d8:	9803      	ldr	r0, [sp, #12]
 80011da:	1ab6      	subs	r6, r6, r2
 80011dc:	0002      	movs	r2, r0
 80011de:	042d      	lsls	r5, r5, #16
 80011e0:	431d      	orrs	r5, r3
 80011e2:	9f02      	ldr	r7, [sp, #8]
 80011e4:	042b      	lsls	r3, r5, #16
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	435a      	muls	r2, r3
 80011ea:	437b      	muls	r3, r7
 80011ec:	469c      	mov	ip, r3
 80011ee:	0c29      	lsrs	r1, r5, #16
 80011f0:	4348      	muls	r0, r1
 80011f2:	0c13      	lsrs	r3, r2, #16
 80011f4:	4484      	add	ip, r0
 80011f6:	4463      	add	r3, ip
 80011f8:	4379      	muls	r1, r7
 80011fa:	4298      	cmp	r0, r3
 80011fc:	d903      	bls.n	8001206 <__aeabi_ddiv+0x242>
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	0240      	lsls	r0, r0, #9
 8001202:	4684      	mov	ip, r0
 8001204:	4461      	add	r1, ip
 8001206:	0c18      	lsrs	r0, r3, #16
 8001208:	0412      	lsls	r2, r2, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	0c12      	lsrs	r2, r2, #16
 800120e:	1841      	adds	r1, r0, r1
 8001210:	189b      	adds	r3, r3, r2
 8001212:	428e      	cmp	r6, r1
 8001214:	d200      	bcs.n	8001218 <__aeabi_ddiv+0x254>
 8001216:	e0ff      	b.n	8001418 <__aeabi_ddiv+0x454>
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x258>
 800121a:	e0fa      	b.n	8001412 <__aeabi_ddiv+0x44e>
 800121c:	2301      	movs	r3, #1
 800121e:	431d      	orrs	r5, r3
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <__aeabi_ddiv+0x384>)
 8001222:	445a      	add	r2, fp
 8001224:	2a00      	cmp	r2, #0
 8001226:	dc00      	bgt.n	800122a <__aeabi_ddiv+0x266>
 8001228:	e0aa      	b.n	8001380 <__aeabi_ddiv+0x3bc>
 800122a:	076b      	lsls	r3, r5, #29
 800122c:	d000      	beq.n	8001230 <__aeabi_ddiv+0x26c>
 800122e:	e13d      	b.n	80014ac <__aeabi_ddiv+0x4e8>
 8001230:	08ed      	lsrs	r5, r5, #3
 8001232:	4643      	mov	r3, r8
 8001234:	01db      	lsls	r3, r3, #7
 8001236:	d506      	bpl.n	8001246 <__aeabi_ddiv+0x282>
 8001238:	4642      	mov	r2, r8
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <__aeabi_ddiv+0x388>)
 800123c:	401a      	ands	r2, r3
 800123e:	4690      	mov	r8, r2
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	00d2      	lsls	r2, r2, #3
 8001244:	445a      	add	r2, fp
 8001246:	4b42      	ldr	r3, [pc, #264]	; (8001350 <__aeabi_ddiv+0x38c>)
 8001248:	429a      	cmp	r2, r3
 800124a:	dd00      	ble.n	800124e <__aeabi_ddiv+0x28a>
 800124c:	e71f      	b.n	800108e <__aeabi_ddiv+0xca>
 800124e:	4643      	mov	r3, r8
 8001250:	075b      	lsls	r3, r3, #29
 8001252:	431d      	orrs	r5, r3
 8001254:	4643      	mov	r3, r8
 8001256:	0552      	lsls	r2, r2, #21
 8001258:	025c      	lsls	r4, r3, #9
 800125a:	0b24      	lsrs	r4, r4, #12
 800125c:	0d53      	lsrs	r3, r2, #21
 800125e:	e708      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001260:	4652      	mov	r2, sl
 8001262:	4322      	orrs	r2, r4
 8001264:	d100      	bne.n	8001268 <__aeabi_ddiv+0x2a4>
 8001266:	e07b      	b.n	8001360 <__aeabi_ddiv+0x39c>
 8001268:	2c00      	cmp	r4, #0
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x2aa>
 800126c:	e0fa      	b.n	8001464 <__aeabi_ddiv+0x4a0>
 800126e:	0020      	movs	r0, r4
 8001270:	f001 f99a 	bl	80025a8 <__clzsi2>
 8001274:	0002      	movs	r2, r0
 8001276:	3a0b      	subs	r2, #11
 8001278:	231d      	movs	r3, #29
 800127a:	0001      	movs	r1, r0
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	4652      	mov	r2, sl
 8001280:	3908      	subs	r1, #8
 8001282:	40da      	lsrs	r2, r3
 8001284:	408c      	lsls	r4, r1
 8001286:	4314      	orrs	r4, r2
 8001288:	4652      	mov	r2, sl
 800128a:	408a      	lsls	r2, r1
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <__aeabi_ddiv+0x390>)
 800128e:	4458      	add	r0, fp
 8001290:	469b      	mov	fp, r3
 8001292:	4483      	add	fp, r0
 8001294:	2000      	movs	r0, #0
 8001296:	e6d5      	b.n	8001044 <__aeabi_ddiv+0x80>
 8001298:	464b      	mov	r3, r9
 800129a:	4323      	orrs	r3, r4
 800129c:	4698      	mov	r8, r3
 800129e:	d044      	beq.n	800132a <__aeabi_ddiv+0x366>
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_ddiv+0x2e2>
 80012a4:	e0ce      	b.n	8001444 <__aeabi_ddiv+0x480>
 80012a6:	0020      	movs	r0, r4
 80012a8:	f001 f97e 	bl	80025a8 <__clzsi2>
 80012ac:	0001      	movs	r1, r0
 80012ae:	0002      	movs	r2, r0
 80012b0:	390b      	subs	r1, #11
 80012b2:	231d      	movs	r3, #29
 80012b4:	1a5b      	subs	r3, r3, r1
 80012b6:	4649      	mov	r1, r9
 80012b8:	0010      	movs	r0, r2
 80012ba:	40d9      	lsrs	r1, r3
 80012bc:	3808      	subs	r0, #8
 80012be:	4084      	lsls	r4, r0
 80012c0:	000b      	movs	r3, r1
 80012c2:	464d      	mov	r5, r9
 80012c4:	4323      	orrs	r3, r4
 80012c6:	4698      	mov	r8, r3
 80012c8:	4085      	lsls	r5, r0
 80012ca:	4823      	ldr	r0, [pc, #140]	; (8001358 <__aeabi_ddiv+0x394>)
 80012cc:	1a83      	subs	r3, r0, r2
 80012ce:	469b      	mov	fp, r3
 80012d0:	2300      	movs	r3, #0
 80012d2:	4699      	mov	r9, r3
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	e69a      	b.n	800100e <__aeabi_ddiv+0x4a>
 80012d8:	464b      	mov	r3, r9
 80012da:	4323      	orrs	r3, r4
 80012dc:	4698      	mov	r8, r3
 80012de:	d11d      	bne.n	800131c <__aeabi_ddiv+0x358>
 80012e0:	2308      	movs	r3, #8
 80012e2:	4699      	mov	r9, r3
 80012e4:	3b06      	subs	r3, #6
 80012e6:	2500      	movs	r5, #0
 80012e8:	4683      	mov	fp, r0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	e68f      	b.n	800100e <__aeabi_ddiv+0x4a>
 80012ee:	4652      	mov	r2, sl
 80012f0:	4322      	orrs	r2, r4
 80012f2:	d109      	bne.n	8001308 <__aeabi_ddiv+0x344>
 80012f4:	2302      	movs	r3, #2
 80012f6:	4649      	mov	r1, r9
 80012f8:	4319      	orrs	r1, r3
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <__aeabi_ddiv+0x398>)
 80012fc:	4689      	mov	r9, r1
 80012fe:	469c      	mov	ip, r3
 8001300:	2400      	movs	r4, #0
 8001302:	2002      	movs	r0, #2
 8001304:	44e3      	add	fp, ip
 8001306:	e69d      	b.n	8001044 <__aeabi_ddiv+0x80>
 8001308:	2303      	movs	r3, #3
 800130a:	464a      	mov	r2, r9
 800130c:	431a      	orrs	r2, r3
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <__aeabi_ddiv+0x398>)
 8001310:	4691      	mov	r9, r2
 8001312:	469c      	mov	ip, r3
 8001314:	4652      	mov	r2, sl
 8001316:	2003      	movs	r0, #3
 8001318:	44e3      	add	fp, ip
 800131a:	e693      	b.n	8001044 <__aeabi_ddiv+0x80>
 800131c:	230c      	movs	r3, #12
 800131e:	4699      	mov	r9, r3
 8001320:	3b09      	subs	r3, #9
 8001322:	46a0      	mov	r8, r4
 8001324:	4683      	mov	fp, r0
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	e671      	b.n	800100e <__aeabi_ddiv+0x4a>
 800132a:	2304      	movs	r3, #4
 800132c:	4699      	mov	r9, r3
 800132e:	2300      	movs	r3, #0
 8001330:	469b      	mov	fp, r3
 8001332:	3301      	adds	r3, #1
 8001334:	2500      	movs	r5, #0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	e669      	b.n	800100e <__aeabi_ddiv+0x4a>
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff
 8001340:	fffffc01 	.word	0xfffffc01
 8001344:	0800e074 	.word	0x0800e074
 8001348:	000003ff 	.word	0x000003ff
 800134c:	feffffff 	.word	0xfeffffff
 8001350:	000007fe 	.word	0x000007fe
 8001354:	000003f3 	.word	0x000003f3
 8001358:	fffffc0d 	.word	0xfffffc0d
 800135c:	fffff801 	.word	0xfffff801
 8001360:	4649      	mov	r1, r9
 8001362:	2301      	movs	r3, #1
 8001364:	4319      	orrs	r1, r3
 8001366:	4689      	mov	r9, r1
 8001368:	2400      	movs	r4, #0
 800136a:	2001      	movs	r0, #1
 800136c:	e66a      	b.n	8001044 <__aeabi_ddiv+0x80>
 800136e:	2300      	movs	r3, #0
 8001370:	2480      	movs	r4, #128	; 0x80
 8001372:	469a      	mov	sl, r3
 8001374:	2500      	movs	r5, #0
 8001376:	4b8a      	ldr	r3, [pc, #552]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	e67a      	b.n	8001072 <__aeabi_ddiv+0xae>
 800137c:	2501      	movs	r5, #1
 800137e:	426d      	negs	r5, r5
 8001380:	2301      	movs	r3, #1
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	2b38      	cmp	r3, #56	; 0x38
 8001386:	dd00      	ble.n	800138a <__aeabi_ddiv+0x3c6>
 8001388:	e670      	b.n	800106c <__aeabi_ddiv+0xa8>
 800138a:	2b1f      	cmp	r3, #31
 800138c:	dc00      	bgt.n	8001390 <__aeabi_ddiv+0x3cc>
 800138e:	e0bf      	b.n	8001510 <__aeabi_ddiv+0x54c>
 8001390:	211f      	movs	r1, #31
 8001392:	4249      	negs	r1, r1
 8001394:	1a8a      	subs	r2, r1, r2
 8001396:	4641      	mov	r1, r8
 8001398:	40d1      	lsrs	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	2b20      	cmp	r3, #32
 800139e:	d004      	beq.n	80013aa <__aeabi_ddiv+0x3e6>
 80013a0:	4641      	mov	r1, r8
 80013a2:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <__aeabi_ddiv+0x5e0>)
 80013a4:	445b      	add	r3, fp
 80013a6:	4099      	lsls	r1, r3
 80013a8:	430d      	orrs	r5, r1
 80013aa:	1e6b      	subs	r3, r5, #1
 80013ac:	419d      	sbcs	r5, r3
 80013ae:	2307      	movs	r3, #7
 80013b0:	432a      	orrs	r2, r5
 80013b2:	001d      	movs	r5, r3
 80013b4:	2400      	movs	r4, #0
 80013b6:	4015      	ands	r5, r2
 80013b8:	4213      	tst	r3, r2
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x3fa>
 80013bc:	e0d4      	b.n	8001568 <__aeabi_ddiv+0x5a4>
 80013be:	210f      	movs	r1, #15
 80013c0:	2300      	movs	r3, #0
 80013c2:	4011      	ands	r1, r2
 80013c4:	2904      	cmp	r1, #4
 80013c6:	d100      	bne.n	80013ca <__aeabi_ddiv+0x406>
 80013c8:	e0cb      	b.n	8001562 <__aeabi_ddiv+0x59e>
 80013ca:	1d11      	adds	r1, r2, #4
 80013cc:	4291      	cmp	r1, r2
 80013ce:	4192      	sbcs	r2, r2
 80013d0:	4252      	negs	r2, r2
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	000a      	movs	r2, r1
 80013d6:	0219      	lsls	r1, r3, #8
 80013d8:	d400      	bmi.n	80013dc <__aeabi_ddiv+0x418>
 80013da:	e0c2      	b.n	8001562 <__aeabi_ddiv+0x59e>
 80013dc:	2301      	movs	r3, #1
 80013de:	2400      	movs	r4, #0
 80013e0:	2500      	movs	r5, #0
 80013e2:	e646      	b.n	8001072 <__aeabi_ddiv+0xae>
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	4641      	mov	r1, r8
 80013e8:	031b      	lsls	r3, r3, #12
 80013ea:	4219      	tst	r1, r3
 80013ec:	d008      	beq.n	8001400 <__aeabi_ddiv+0x43c>
 80013ee:	421c      	tst	r4, r3
 80013f0:	d106      	bne.n	8001400 <__aeabi_ddiv+0x43c>
 80013f2:	431c      	orrs	r4, r3
 80013f4:	0324      	lsls	r4, r4, #12
 80013f6:	46ba      	mov	sl, r7
 80013f8:	0015      	movs	r5, r2
 80013fa:	4b69      	ldr	r3, [pc, #420]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 80013fc:	0b24      	lsrs	r4, r4, #12
 80013fe:	e638      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001400:	2480      	movs	r4, #128	; 0x80
 8001402:	4643      	mov	r3, r8
 8001404:	0324      	lsls	r4, r4, #12
 8001406:	431c      	orrs	r4, r3
 8001408:	0324      	lsls	r4, r4, #12
 800140a:	46b2      	mov	sl, r6
 800140c:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 800140e:	0b24      	lsrs	r4, r4, #12
 8001410:	e62f      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_ddiv+0x454>
 8001416:	e703      	b.n	8001220 <__aeabi_ddiv+0x25c>
 8001418:	19a6      	adds	r6, r4, r6
 800141a:	1e68      	subs	r0, r5, #1
 800141c:	42a6      	cmp	r6, r4
 800141e:	d200      	bcs.n	8001422 <__aeabi_ddiv+0x45e>
 8001420:	e08d      	b.n	800153e <__aeabi_ddiv+0x57a>
 8001422:	428e      	cmp	r6, r1
 8001424:	d200      	bcs.n	8001428 <__aeabi_ddiv+0x464>
 8001426:	e0a3      	b.n	8001570 <__aeabi_ddiv+0x5ac>
 8001428:	d100      	bne.n	800142c <__aeabi_ddiv+0x468>
 800142a:	e0b3      	b.n	8001594 <__aeabi_ddiv+0x5d0>
 800142c:	0005      	movs	r5, r0
 800142e:	e6f5      	b.n	800121c <__aeabi_ddiv+0x258>
 8001430:	42aa      	cmp	r2, r5
 8001432:	d900      	bls.n	8001436 <__aeabi_ddiv+0x472>
 8001434:	e639      	b.n	80010aa <__aeabi_ddiv+0xe6>
 8001436:	4643      	mov	r3, r8
 8001438:	07de      	lsls	r6, r3, #31
 800143a:	0858      	lsrs	r0, r3, #1
 800143c:	086b      	lsrs	r3, r5, #1
 800143e:	431e      	orrs	r6, r3
 8001440:	07ed      	lsls	r5, r5, #31
 8001442:	e639      	b.n	80010b8 <__aeabi_ddiv+0xf4>
 8001444:	4648      	mov	r0, r9
 8001446:	f001 f8af 	bl	80025a8 <__clzsi2>
 800144a:	0001      	movs	r1, r0
 800144c:	0002      	movs	r2, r0
 800144e:	3115      	adds	r1, #21
 8001450:	3220      	adds	r2, #32
 8001452:	291c      	cmp	r1, #28
 8001454:	dc00      	bgt.n	8001458 <__aeabi_ddiv+0x494>
 8001456:	e72c      	b.n	80012b2 <__aeabi_ddiv+0x2ee>
 8001458:	464b      	mov	r3, r9
 800145a:	3808      	subs	r0, #8
 800145c:	4083      	lsls	r3, r0
 800145e:	2500      	movs	r5, #0
 8001460:	4698      	mov	r8, r3
 8001462:	e732      	b.n	80012ca <__aeabi_ddiv+0x306>
 8001464:	f001 f8a0 	bl	80025a8 <__clzsi2>
 8001468:	0003      	movs	r3, r0
 800146a:	001a      	movs	r2, r3
 800146c:	3215      	adds	r2, #21
 800146e:	3020      	adds	r0, #32
 8001470:	2a1c      	cmp	r2, #28
 8001472:	dc00      	bgt.n	8001476 <__aeabi_ddiv+0x4b2>
 8001474:	e700      	b.n	8001278 <__aeabi_ddiv+0x2b4>
 8001476:	4654      	mov	r4, sl
 8001478:	3b08      	subs	r3, #8
 800147a:	2200      	movs	r2, #0
 800147c:	409c      	lsls	r4, r3
 800147e:	e705      	b.n	800128c <__aeabi_ddiv+0x2c8>
 8001480:	1936      	adds	r6, r6, r4
 8001482:	3b01      	subs	r3, #1
 8001484:	42b4      	cmp	r4, r6
 8001486:	d900      	bls.n	800148a <__aeabi_ddiv+0x4c6>
 8001488:	e6a6      	b.n	80011d8 <__aeabi_ddiv+0x214>
 800148a:	42b2      	cmp	r2, r6
 800148c:	d800      	bhi.n	8001490 <__aeabi_ddiv+0x4cc>
 800148e:	e6a3      	b.n	80011d8 <__aeabi_ddiv+0x214>
 8001490:	1e83      	subs	r3, r0, #2
 8001492:	1936      	adds	r6, r6, r4
 8001494:	e6a0      	b.n	80011d8 <__aeabi_ddiv+0x214>
 8001496:	1909      	adds	r1, r1, r4
 8001498:	3d01      	subs	r5, #1
 800149a:	428c      	cmp	r4, r1
 800149c:	d900      	bls.n	80014a0 <__aeabi_ddiv+0x4dc>
 800149e:	e68d      	b.n	80011bc <__aeabi_ddiv+0x1f8>
 80014a0:	428a      	cmp	r2, r1
 80014a2:	d800      	bhi.n	80014a6 <__aeabi_ddiv+0x4e2>
 80014a4:	e68a      	b.n	80011bc <__aeabi_ddiv+0x1f8>
 80014a6:	1e85      	subs	r5, r0, #2
 80014a8:	1909      	adds	r1, r1, r4
 80014aa:	e687      	b.n	80011bc <__aeabi_ddiv+0x1f8>
 80014ac:	230f      	movs	r3, #15
 80014ae:	402b      	ands	r3, r5
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d100      	bne.n	80014b6 <__aeabi_ddiv+0x4f2>
 80014b4:	e6bc      	b.n	8001230 <__aeabi_ddiv+0x26c>
 80014b6:	2305      	movs	r3, #5
 80014b8:	425b      	negs	r3, r3
 80014ba:	42ab      	cmp	r3, r5
 80014bc:	419b      	sbcs	r3, r3
 80014be:	3504      	adds	r5, #4
 80014c0:	425b      	negs	r3, r3
 80014c2:	08ed      	lsrs	r5, r5, #3
 80014c4:	4498      	add	r8, r3
 80014c6:	e6b4      	b.n	8001232 <__aeabi_ddiv+0x26e>
 80014c8:	42af      	cmp	r7, r5
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x50a>
 80014cc:	e660      	b.n	8001190 <__aeabi_ddiv+0x1cc>
 80014ce:	4282      	cmp	r2, r0
 80014d0:	d804      	bhi.n	80014dc <__aeabi_ddiv+0x518>
 80014d2:	d000      	beq.n	80014d6 <__aeabi_ddiv+0x512>
 80014d4:	e65c      	b.n	8001190 <__aeabi_ddiv+0x1cc>
 80014d6:	42ae      	cmp	r6, r5
 80014d8:	d800      	bhi.n	80014dc <__aeabi_ddiv+0x518>
 80014da:	e659      	b.n	8001190 <__aeabi_ddiv+0x1cc>
 80014dc:	2302      	movs	r3, #2
 80014de:	425b      	negs	r3, r3
 80014e0:	469c      	mov	ip, r3
 80014e2:	9b00      	ldr	r3, [sp, #0]
 80014e4:	44e0      	add	r8, ip
 80014e6:	469c      	mov	ip, r3
 80014e8:	4465      	add	r5, ip
 80014ea:	429d      	cmp	r5, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	425b      	negs	r3, r3
 80014f0:	191b      	adds	r3, r3, r4
 80014f2:	18c0      	adds	r0, r0, r3
 80014f4:	e64d      	b.n	8001192 <__aeabi_ddiv+0x1ce>
 80014f6:	428a      	cmp	r2, r1
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x538>
 80014fa:	e60e      	b.n	800111a <__aeabi_ddiv+0x156>
 80014fc:	1e83      	subs	r3, r0, #2
 80014fe:	1909      	adds	r1, r1, r4
 8001500:	e60b      	b.n	800111a <__aeabi_ddiv+0x156>
 8001502:	428a      	cmp	r2, r1
 8001504:	d800      	bhi.n	8001508 <__aeabi_ddiv+0x544>
 8001506:	e5f4      	b.n	80010f2 <__aeabi_ddiv+0x12e>
 8001508:	1e83      	subs	r3, r0, #2
 800150a:	4698      	mov	r8, r3
 800150c:	1909      	adds	r1, r1, r4
 800150e:	e5f0      	b.n	80010f2 <__aeabi_ddiv+0x12e>
 8001510:	4925      	ldr	r1, [pc, #148]	; (80015a8 <__aeabi_ddiv+0x5e4>)
 8001512:	0028      	movs	r0, r5
 8001514:	4459      	add	r1, fp
 8001516:	408d      	lsls	r5, r1
 8001518:	4642      	mov	r2, r8
 800151a:	408a      	lsls	r2, r1
 800151c:	1e69      	subs	r1, r5, #1
 800151e:	418d      	sbcs	r5, r1
 8001520:	4641      	mov	r1, r8
 8001522:	40d8      	lsrs	r0, r3
 8001524:	40d9      	lsrs	r1, r3
 8001526:	4302      	orrs	r2, r0
 8001528:	432a      	orrs	r2, r5
 800152a:	000b      	movs	r3, r1
 800152c:	0751      	lsls	r1, r2, #29
 800152e:	d100      	bne.n	8001532 <__aeabi_ddiv+0x56e>
 8001530:	e751      	b.n	80013d6 <__aeabi_ddiv+0x412>
 8001532:	210f      	movs	r1, #15
 8001534:	4011      	ands	r1, r2
 8001536:	2904      	cmp	r1, #4
 8001538:	d000      	beq.n	800153c <__aeabi_ddiv+0x578>
 800153a:	e746      	b.n	80013ca <__aeabi_ddiv+0x406>
 800153c:	e74b      	b.n	80013d6 <__aeabi_ddiv+0x412>
 800153e:	0005      	movs	r5, r0
 8001540:	428e      	cmp	r6, r1
 8001542:	d000      	beq.n	8001546 <__aeabi_ddiv+0x582>
 8001544:	e66a      	b.n	800121c <__aeabi_ddiv+0x258>
 8001546:	9a00      	ldr	r2, [sp, #0]
 8001548:	4293      	cmp	r3, r2
 800154a:	d000      	beq.n	800154e <__aeabi_ddiv+0x58a>
 800154c:	e666      	b.n	800121c <__aeabi_ddiv+0x258>
 800154e:	e667      	b.n	8001220 <__aeabi_ddiv+0x25c>
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <__aeabi_ddiv+0x5e8>)
 8001552:	445a      	add	r2, fp
 8001554:	2a00      	cmp	r2, #0
 8001556:	dc00      	bgt.n	800155a <__aeabi_ddiv+0x596>
 8001558:	e710      	b.n	800137c <__aeabi_ddiv+0x3b8>
 800155a:	2301      	movs	r3, #1
 800155c:	2500      	movs	r5, #0
 800155e:	4498      	add	r8, r3
 8001560:	e667      	b.n	8001232 <__aeabi_ddiv+0x26e>
 8001562:	075d      	lsls	r5, r3, #29
 8001564:	025b      	lsls	r3, r3, #9
 8001566:	0b1c      	lsrs	r4, r3, #12
 8001568:	08d2      	lsrs	r2, r2, #3
 800156a:	2300      	movs	r3, #0
 800156c:	4315      	orrs	r5, r2
 800156e:	e580      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001570:	9800      	ldr	r0, [sp, #0]
 8001572:	3d02      	subs	r5, #2
 8001574:	0042      	lsls	r2, r0, #1
 8001576:	4282      	cmp	r2, r0
 8001578:	41bf      	sbcs	r7, r7
 800157a:	427f      	negs	r7, r7
 800157c:	193c      	adds	r4, r7, r4
 800157e:	1936      	adds	r6, r6, r4
 8001580:	9200      	str	r2, [sp, #0]
 8001582:	e7dd      	b.n	8001540 <__aeabi_ddiv+0x57c>
 8001584:	2480      	movs	r4, #128	; 0x80
 8001586:	4643      	mov	r3, r8
 8001588:	0324      	lsls	r4, r4, #12
 800158a:	431c      	orrs	r4, r3
 800158c:	0324      	lsls	r4, r4, #12
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__aeabi_ddiv+0x5dc>)
 8001590:	0b24      	lsrs	r4, r4, #12
 8001592:	e56e      	b.n	8001072 <__aeabi_ddiv+0xae>
 8001594:	9a00      	ldr	r2, [sp, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d3ea      	bcc.n	8001570 <__aeabi_ddiv+0x5ac>
 800159a:	0005      	movs	r5, r0
 800159c:	e7d3      	b.n	8001546 <__aeabi_ddiv+0x582>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff
 80015a4:	0000043e 	.word	0x0000043e
 80015a8:	0000041e 	.word	0x0000041e
 80015ac:	000003ff 	.word	0x000003ff

080015b0 <__eqdf2>:
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	464e      	mov	r6, r9
 80015b4:	4645      	mov	r5, r8
 80015b6:	46de      	mov	lr, fp
 80015b8:	4657      	mov	r7, sl
 80015ba:	4690      	mov	r8, r2
 80015bc:	b5e0      	push	{r5, r6, r7, lr}
 80015be:	0017      	movs	r7, r2
 80015c0:	031a      	lsls	r2, r3, #12
 80015c2:	0b12      	lsrs	r2, r2, #12
 80015c4:	0005      	movs	r5, r0
 80015c6:	4684      	mov	ip, r0
 80015c8:	4819      	ldr	r0, [pc, #100]	; (8001630 <__eqdf2+0x80>)
 80015ca:	030e      	lsls	r6, r1, #12
 80015cc:	004c      	lsls	r4, r1, #1
 80015ce:	4691      	mov	r9, r2
 80015d0:	005a      	lsls	r2, r3, #1
 80015d2:	0fdb      	lsrs	r3, r3, #31
 80015d4:	469b      	mov	fp, r3
 80015d6:	0b36      	lsrs	r6, r6, #12
 80015d8:	0d64      	lsrs	r4, r4, #21
 80015da:	0fc9      	lsrs	r1, r1, #31
 80015dc:	0d52      	lsrs	r2, r2, #21
 80015de:	4284      	cmp	r4, r0
 80015e0:	d019      	beq.n	8001616 <__eqdf2+0x66>
 80015e2:	4282      	cmp	r2, r0
 80015e4:	d010      	beq.n	8001608 <__eqdf2+0x58>
 80015e6:	2001      	movs	r0, #1
 80015e8:	4294      	cmp	r4, r2
 80015ea:	d10e      	bne.n	800160a <__eqdf2+0x5a>
 80015ec:	454e      	cmp	r6, r9
 80015ee:	d10c      	bne.n	800160a <__eqdf2+0x5a>
 80015f0:	2001      	movs	r0, #1
 80015f2:	45c4      	cmp	ip, r8
 80015f4:	d109      	bne.n	800160a <__eqdf2+0x5a>
 80015f6:	4559      	cmp	r1, fp
 80015f8:	d017      	beq.n	800162a <__eqdf2+0x7a>
 80015fa:	2c00      	cmp	r4, #0
 80015fc:	d105      	bne.n	800160a <__eqdf2+0x5a>
 80015fe:	0030      	movs	r0, r6
 8001600:	4328      	orrs	r0, r5
 8001602:	1e43      	subs	r3, r0, #1
 8001604:	4198      	sbcs	r0, r3
 8001606:	e000      	b.n	800160a <__eqdf2+0x5a>
 8001608:	2001      	movs	r0, #1
 800160a:	bcf0      	pop	{r4, r5, r6, r7}
 800160c:	46bb      	mov	fp, r7
 800160e:	46b2      	mov	sl, r6
 8001610:	46a9      	mov	r9, r5
 8001612:	46a0      	mov	r8, r4
 8001614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001616:	0033      	movs	r3, r6
 8001618:	2001      	movs	r0, #1
 800161a:	432b      	orrs	r3, r5
 800161c:	d1f5      	bne.n	800160a <__eqdf2+0x5a>
 800161e:	42a2      	cmp	r2, r4
 8001620:	d1f3      	bne.n	800160a <__eqdf2+0x5a>
 8001622:	464b      	mov	r3, r9
 8001624:	433b      	orrs	r3, r7
 8001626:	d1f0      	bne.n	800160a <__eqdf2+0x5a>
 8001628:	e7e2      	b.n	80015f0 <__eqdf2+0x40>
 800162a:	2000      	movs	r0, #0
 800162c:	e7ed      	b.n	800160a <__eqdf2+0x5a>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	000007ff 	.word	0x000007ff

08001634 <__gedf2>:
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	4647      	mov	r7, r8
 8001638:	46ce      	mov	lr, r9
 800163a:	0004      	movs	r4, r0
 800163c:	0018      	movs	r0, r3
 800163e:	0016      	movs	r6, r2
 8001640:	031b      	lsls	r3, r3, #12
 8001642:	0b1b      	lsrs	r3, r3, #12
 8001644:	4d2d      	ldr	r5, [pc, #180]	; (80016fc <__gedf2+0xc8>)
 8001646:	004a      	lsls	r2, r1, #1
 8001648:	4699      	mov	r9, r3
 800164a:	b580      	push	{r7, lr}
 800164c:	0043      	lsls	r3, r0, #1
 800164e:	030f      	lsls	r7, r1, #12
 8001650:	46a4      	mov	ip, r4
 8001652:	46b0      	mov	r8, r6
 8001654:	0b3f      	lsrs	r7, r7, #12
 8001656:	0d52      	lsrs	r2, r2, #21
 8001658:	0fc9      	lsrs	r1, r1, #31
 800165a:	0d5b      	lsrs	r3, r3, #21
 800165c:	0fc0      	lsrs	r0, r0, #31
 800165e:	42aa      	cmp	r2, r5
 8001660:	d021      	beq.n	80016a6 <__gedf2+0x72>
 8001662:	42ab      	cmp	r3, r5
 8001664:	d013      	beq.n	800168e <__gedf2+0x5a>
 8001666:	2a00      	cmp	r2, #0
 8001668:	d122      	bne.n	80016b0 <__gedf2+0x7c>
 800166a:	433c      	orrs	r4, r7
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <__gedf2+0x42>
 8001670:	464d      	mov	r5, r9
 8001672:	432e      	orrs	r6, r5
 8001674:	d022      	beq.n	80016bc <__gedf2+0x88>
 8001676:	2c00      	cmp	r4, #0
 8001678:	d010      	beq.n	800169c <__gedf2+0x68>
 800167a:	4281      	cmp	r1, r0
 800167c:	d022      	beq.n	80016c4 <__gedf2+0x90>
 800167e:	2002      	movs	r0, #2
 8001680:	3901      	subs	r1, #1
 8001682:	4008      	ands	r0, r1
 8001684:	3801      	subs	r0, #1
 8001686:	bcc0      	pop	{r6, r7}
 8001688:	46b9      	mov	r9, r7
 800168a:	46b0      	mov	r8, r6
 800168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168e:	464d      	mov	r5, r9
 8001690:	432e      	orrs	r6, r5
 8001692:	d129      	bne.n	80016e8 <__gedf2+0xb4>
 8001694:	2a00      	cmp	r2, #0
 8001696:	d1f0      	bne.n	800167a <__gedf2+0x46>
 8001698:	433c      	orrs	r4, r7
 800169a:	d1ee      	bne.n	800167a <__gedf2+0x46>
 800169c:	2800      	cmp	r0, #0
 800169e:	d1f2      	bne.n	8001686 <__gedf2+0x52>
 80016a0:	2001      	movs	r0, #1
 80016a2:	4240      	negs	r0, r0
 80016a4:	e7ef      	b.n	8001686 <__gedf2+0x52>
 80016a6:	003d      	movs	r5, r7
 80016a8:	4325      	orrs	r5, r4
 80016aa:	d11d      	bne.n	80016e8 <__gedf2+0xb4>
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d0ee      	beq.n	800168e <__gedf2+0x5a>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e2      	bne.n	800167a <__gedf2+0x46>
 80016b4:	464c      	mov	r4, r9
 80016b6:	4326      	orrs	r6, r4
 80016b8:	d1df      	bne.n	800167a <__gedf2+0x46>
 80016ba:	e7e0      	b.n	800167e <__gedf2+0x4a>
 80016bc:	2000      	movs	r0, #0
 80016be:	2c00      	cmp	r4, #0
 80016c0:	d0e1      	beq.n	8001686 <__gedf2+0x52>
 80016c2:	e7dc      	b.n	800167e <__gedf2+0x4a>
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dc0a      	bgt.n	80016de <__gedf2+0xaa>
 80016c8:	dbe8      	blt.n	800169c <__gedf2+0x68>
 80016ca:	454f      	cmp	r7, r9
 80016cc:	d8d7      	bhi.n	800167e <__gedf2+0x4a>
 80016ce:	d00e      	beq.n	80016ee <__gedf2+0xba>
 80016d0:	2000      	movs	r0, #0
 80016d2:	454f      	cmp	r7, r9
 80016d4:	d2d7      	bcs.n	8001686 <__gedf2+0x52>
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d0e2      	beq.n	80016a0 <__gedf2+0x6c>
 80016da:	0008      	movs	r0, r1
 80016dc:	e7d3      	b.n	8001686 <__gedf2+0x52>
 80016de:	4243      	negs	r3, r0
 80016e0:	4158      	adcs	r0, r3
 80016e2:	0040      	lsls	r0, r0, #1
 80016e4:	3801      	subs	r0, #1
 80016e6:	e7ce      	b.n	8001686 <__gedf2+0x52>
 80016e8:	2002      	movs	r0, #2
 80016ea:	4240      	negs	r0, r0
 80016ec:	e7cb      	b.n	8001686 <__gedf2+0x52>
 80016ee:	45c4      	cmp	ip, r8
 80016f0:	d8c5      	bhi.n	800167e <__gedf2+0x4a>
 80016f2:	2000      	movs	r0, #0
 80016f4:	45c4      	cmp	ip, r8
 80016f6:	d2c6      	bcs.n	8001686 <__gedf2+0x52>
 80016f8:	e7ed      	b.n	80016d6 <__gedf2+0xa2>
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	000007ff 	.word	0x000007ff

08001700 <__ledf2>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	4647      	mov	r7, r8
 8001704:	46ce      	mov	lr, r9
 8001706:	0004      	movs	r4, r0
 8001708:	0018      	movs	r0, r3
 800170a:	0016      	movs	r6, r2
 800170c:	031b      	lsls	r3, r3, #12
 800170e:	0b1b      	lsrs	r3, r3, #12
 8001710:	4d2c      	ldr	r5, [pc, #176]	; (80017c4 <__ledf2+0xc4>)
 8001712:	004a      	lsls	r2, r1, #1
 8001714:	4699      	mov	r9, r3
 8001716:	b580      	push	{r7, lr}
 8001718:	0043      	lsls	r3, r0, #1
 800171a:	030f      	lsls	r7, r1, #12
 800171c:	46a4      	mov	ip, r4
 800171e:	46b0      	mov	r8, r6
 8001720:	0b3f      	lsrs	r7, r7, #12
 8001722:	0d52      	lsrs	r2, r2, #21
 8001724:	0fc9      	lsrs	r1, r1, #31
 8001726:	0d5b      	lsrs	r3, r3, #21
 8001728:	0fc0      	lsrs	r0, r0, #31
 800172a:	42aa      	cmp	r2, r5
 800172c:	d00d      	beq.n	800174a <__ledf2+0x4a>
 800172e:	42ab      	cmp	r3, r5
 8001730:	d010      	beq.n	8001754 <__ledf2+0x54>
 8001732:	2a00      	cmp	r2, #0
 8001734:	d127      	bne.n	8001786 <__ledf2+0x86>
 8001736:	433c      	orrs	r4, r7
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <__ledf2+0x60>
 800173c:	464d      	mov	r5, r9
 800173e:	432e      	orrs	r6, r5
 8001740:	d10e      	bne.n	8001760 <__ledf2+0x60>
 8001742:	2000      	movs	r0, #0
 8001744:	2c00      	cmp	r4, #0
 8001746:	d015      	beq.n	8001774 <__ledf2+0x74>
 8001748:	e00e      	b.n	8001768 <__ledf2+0x68>
 800174a:	003d      	movs	r5, r7
 800174c:	4325      	orrs	r5, r4
 800174e:	d110      	bne.n	8001772 <__ledf2+0x72>
 8001750:	4293      	cmp	r3, r2
 8001752:	d118      	bne.n	8001786 <__ledf2+0x86>
 8001754:	464d      	mov	r5, r9
 8001756:	432e      	orrs	r6, r5
 8001758:	d10b      	bne.n	8001772 <__ledf2+0x72>
 800175a:	2a00      	cmp	r2, #0
 800175c:	d102      	bne.n	8001764 <__ledf2+0x64>
 800175e:	433c      	orrs	r4, r7
 8001760:	2c00      	cmp	r4, #0
 8001762:	d00b      	beq.n	800177c <__ledf2+0x7c>
 8001764:	4281      	cmp	r1, r0
 8001766:	d014      	beq.n	8001792 <__ledf2+0x92>
 8001768:	2002      	movs	r0, #2
 800176a:	3901      	subs	r1, #1
 800176c:	4008      	ands	r0, r1
 800176e:	3801      	subs	r0, #1
 8001770:	e000      	b.n	8001774 <__ledf2+0x74>
 8001772:	2002      	movs	r0, #2
 8001774:	bcc0      	pop	{r6, r7}
 8001776:	46b9      	mov	r9, r7
 8001778:	46b0      	mov	r8, r6
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	2800      	cmp	r0, #0
 800177e:	d1f9      	bne.n	8001774 <__ledf2+0x74>
 8001780:	2001      	movs	r0, #1
 8001782:	4240      	negs	r0, r0
 8001784:	e7f6      	b.n	8001774 <__ledf2+0x74>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ec      	bne.n	8001764 <__ledf2+0x64>
 800178a:	464c      	mov	r4, r9
 800178c:	4326      	orrs	r6, r4
 800178e:	d1e9      	bne.n	8001764 <__ledf2+0x64>
 8001790:	e7ea      	b.n	8001768 <__ledf2+0x68>
 8001792:	429a      	cmp	r2, r3
 8001794:	dd04      	ble.n	80017a0 <__ledf2+0xa0>
 8001796:	4243      	negs	r3, r0
 8001798:	4158      	adcs	r0, r3
 800179a:	0040      	lsls	r0, r0, #1
 800179c:	3801      	subs	r0, #1
 800179e:	e7e9      	b.n	8001774 <__ledf2+0x74>
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbeb      	blt.n	800177c <__ledf2+0x7c>
 80017a4:	454f      	cmp	r7, r9
 80017a6:	d8df      	bhi.n	8001768 <__ledf2+0x68>
 80017a8:	d006      	beq.n	80017b8 <__ledf2+0xb8>
 80017aa:	2000      	movs	r0, #0
 80017ac:	454f      	cmp	r7, r9
 80017ae:	d2e1      	bcs.n	8001774 <__ledf2+0x74>
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d0e5      	beq.n	8001780 <__ledf2+0x80>
 80017b4:	0008      	movs	r0, r1
 80017b6:	e7dd      	b.n	8001774 <__ledf2+0x74>
 80017b8:	45c4      	cmp	ip, r8
 80017ba:	d8d5      	bhi.n	8001768 <__ledf2+0x68>
 80017bc:	2000      	movs	r0, #0
 80017be:	45c4      	cmp	ip, r8
 80017c0:	d2d8      	bcs.n	8001774 <__ledf2+0x74>
 80017c2:	e7f5      	b.n	80017b0 <__ledf2+0xb0>
 80017c4:	000007ff 	.word	0x000007ff

080017c8 <__aeabi_dmul>:
 80017c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ca:	4657      	mov	r7, sl
 80017cc:	464e      	mov	r6, r9
 80017ce:	4645      	mov	r5, r8
 80017d0:	46de      	mov	lr, fp
 80017d2:	b5e0      	push	{r5, r6, r7, lr}
 80017d4:	4698      	mov	r8, r3
 80017d6:	030c      	lsls	r4, r1, #12
 80017d8:	004b      	lsls	r3, r1, #1
 80017da:	0006      	movs	r6, r0
 80017dc:	4692      	mov	sl, r2
 80017de:	b087      	sub	sp, #28
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	0d5b      	lsrs	r3, r3, #21
 80017e4:	0fcf      	lsrs	r7, r1, #31
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d100      	bne.n	80017ec <__aeabi_dmul+0x24>
 80017ea:	e15c      	b.n	8001aa6 <__aeabi_dmul+0x2de>
 80017ec:	4ad9      	ldr	r2, [pc, #868]	; (8001b54 <__aeabi_dmul+0x38c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d100      	bne.n	80017f4 <__aeabi_dmul+0x2c>
 80017f2:	e175      	b.n	8001ae0 <__aeabi_dmul+0x318>
 80017f4:	0f42      	lsrs	r2, r0, #29
 80017f6:	00e4      	lsls	r4, r4, #3
 80017f8:	4314      	orrs	r4, r2
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0412      	lsls	r2, r2, #16
 80017fe:	4314      	orrs	r4, r2
 8001800:	4ad5      	ldr	r2, [pc, #852]	; (8001b58 <__aeabi_dmul+0x390>)
 8001802:	00c5      	lsls	r5, r0, #3
 8001804:	4694      	mov	ip, r2
 8001806:	4463      	add	r3, ip
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	4699      	mov	r9, r3
 800180e:	469b      	mov	fp, r3
 8001810:	4643      	mov	r3, r8
 8001812:	4642      	mov	r2, r8
 8001814:	031e      	lsls	r6, r3, #12
 8001816:	0fd2      	lsrs	r2, r2, #31
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4650      	mov	r0, sl
 800181c:	4690      	mov	r8, r2
 800181e:	0b36      	lsrs	r6, r6, #12
 8001820:	0d5b      	lsrs	r3, r3, #21
 8001822:	d100      	bne.n	8001826 <__aeabi_dmul+0x5e>
 8001824:	e120      	b.n	8001a68 <__aeabi_dmul+0x2a0>
 8001826:	4acb      	ldr	r2, [pc, #812]	; (8001b54 <__aeabi_dmul+0x38c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d100      	bne.n	800182e <__aeabi_dmul+0x66>
 800182c:	e162      	b.n	8001af4 <__aeabi_dmul+0x32c>
 800182e:	49ca      	ldr	r1, [pc, #808]	; (8001b58 <__aeabi_dmul+0x390>)
 8001830:	0f42      	lsrs	r2, r0, #29
 8001832:	468c      	mov	ip, r1
 8001834:	9900      	ldr	r1, [sp, #0]
 8001836:	4463      	add	r3, ip
 8001838:	00f6      	lsls	r6, r6, #3
 800183a:	468c      	mov	ip, r1
 800183c:	4316      	orrs	r6, r2
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	449c      	add	ip, r3
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	4663      	mov	r3, ip
 8001846:	4316      	orrs	r6, r2
 8001848:	00c2      	lsls	r2, r0, #3
 800184a:	2000      	movs	r0, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	9900      	ldr	r1, [sp, #0]
 8001850:	4643      	mov	r3, r8
 8001852:	3101      	adds	r1, #1
 8001854:	468c      	mov	ip, r1
 8001856:	4649      	mov	r1, r9
 8001858:	407b      	eors	r3, r7
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	290f      	cmp	r1, #15
 800185e:	d826      	bhi.n	80018ae <__aeabi_dmul+0xe6>
 8001860:	4bbe      	ldr	r3, [pc, #760]	; (8001b5c <__aeabi_dmul+0x394>)
 8001862:	0089      	lsls	r1, r1, #2
 8001864:	5859      	ldr	r1, [r3, r1]
 8001866:	468f      	mov	pc, r1
 8001868:	4643      	mov	r3, r8
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	0034      	movs	r4, r6
 800186e:	0015      	movs	r5, r2
 8001870:	4683      	mov	fp, r0
 8001872:	465b      	mov	r3, fp
 8001874:	2b02      	cmp	r3, #2
 8001876:	d016      	beq.n	80018a6 <__aeabi_dmul+0xde>
 8001878:	2b03      	cmp	r3, #3
 800187a:	d100      	bne.n	800187e <__aeabi_dmul+0xb6>
 800187c:	e203      	b.n	8001c86 <__aeabi_dmul+0x4be>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d000      	beq.n	8001884 <__aeabi_dmul+0xbc>
 8001882:	e0cd      	b.n	8001a20 <__aeabi_dmul+0x258>
 8001884:	2200      	movs	r2, #0
 8001886:	2400      	movs	r4, #0
 8001888:	2500      	movs	r5, #0
 800188a:	9b01      	ldr	r3, [sp, #4]
 800188c:	0512      	lsls	r2, r2, #20
 800188e:	4322      	orrs	r2, r4
 8001890:	07db      	lsls	r3, r3, #31
 8001892:	431a      	orrs	r2, r3
 8001894:	0028      	movs	r0, r5
 8001896:	0011      	movs	r1, r2
 8001898:	b007      	add	sp, #28
 800189a:	bcf0      	pop	{r4, r5, r6, r7}
 800189c:	46bb      	mov	fp, r7
 800189e:	46b2      	mov	sl, r6
 80018a0:	46a9      	mov	r9, r5
 80018a2:	46a0      	mov	r8, r4
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	2400      	movs	r4, #0
 80018a8:	2500      	movs	r5, #0
 80018aa:	4aaa      	ldr	r2, [pc, #680]	; (8001b54 <__aeabi_dmul+0x38c>)
 80018ac:	e7ed      	b.n	800188a <__aeabi_dmul+0xc2>
 80018ae:	0c28      	lsrs	r0, r5, #16
 80018b0:	042d      	lsls	r5, r5, #16
 80018b2:	0c2d      	lsrs	r5, r5, #16
 80018b4:	002b      	movs	r3, r5
 80018b6:	0c11      	lsrs	r1, r2, #16
 80018b8:	0412      	lsls	r2, r2, #16
 80018ba:	0c12      	lsrs	r2, r2, #16
 80018bc:	4353      	muls	r3, r2
 80018be:	4698      	mov	r8, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	002f      	movs	r7, r5
 80018c4:	4343      	muls	r3, r0
 80018c6:	4699      	mov	r9, r3
 80018c8:	434f      	muls	r7, r1
 80018ca:	444f      	add	r7, r9
 80018cc:	46bb      	mov	fp, r7
 80018ce:	4647      	mov	r7, r8
 80018d0:	000b      	movs	r3, r1
 80018d2:	0c3f      	lsrs	r7, r7, #16
 80018d4:	46ba      	mov	sl, r7
 80018d6:	4343      	muls	r3, r0
 80018d8:	44da      	add	sl, fp
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	45d1      	cmp	r9, sl
 80018de:	d904      	bls.n	80018ea <__aeabi_dmul+0x122>
 80018e0:	2780      	movs	r7, #128	; 0x80
 80018e2:	027f      	lsls	r7, r7, #9
 80018e4:	46b9      	mov	r9, r7
 80018e6:	444b      	add	r3, r9
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	4653      	mov	r3, sl
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	469b      	mov	fp, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	041f      	lsls	r7, r3, #16
 80018f4:	4643      	mov	r3, r8
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	4698      	mov	r8, r3
 80018fc:	003b      	movs	r3, r7
 80018fe:	4443      	add	r3, r8
 8001900:	9304      	str	r3, [sp, #16]
 8001902:	0c33      	lsrs	r3, r6, #16
 8001904:	0436      	lsls	r6, r6, #16
 8001906:	0c36      	lsrs	r6, r6, #16
 8001908:	4698      	mov	r8, r3
 800190a:	0033      	movs	r3, r6
 800190c:	4343      	muls	r3, r0
 800190e:	4699      	mov	r9, r3
 8001910:	4643      	mov	r3, r8
 8001912:	4343      	muls	r3, r0
 8001914:	002f      	movs	r7, r5
 8001916:	469a      	mov	sl, r3
 8001918:	4643      	mov	r3, r8
 800191a:	4377      	muls	r7, r6
 800191c:	435d      	muls	r5, r3
 800191e:	0c38      	lsrs	r0, r7, #16
 8001920:	444d      	add	r5, r9
 8001922:	1945      	adds	r5, r0, r5
 8001924:	45a9      	cmp	r9, r5
 8001926:	d903      	bls.n	8001930 <__aeabi_dmul+0x168>
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	4699      	mov	r9, r3
 800192e:	44ca      	add	sl, r9
 8001930:	043f      	lsls	r7, r7, #16
 8001932:	0c28      	lsrs	r0, r5, #16
 8001934:	0c3f      	lsrs	r7, r7, #16
 8001936:	042d      	lsls	r5, r5, #16
 8001938:	19ed      	adds	r5, r5, r7
 800193a:	0c27      	lsrs	r7, r4, #16
 800193c:	0424      	lsls	r4, r4, #16
 800193e:	0c24      	lsrs	r4, r4, #16
 8001940:	0003      	movs	r3, r0
 8001942:	0020      	movs	r0, r4
 8001944:	4350      	muls	r0, r2
 8001946:	437a      	muls	r2, r7
 8001948:	4691      	mov	r9, r2
 800194a:	003a      	movs	r2, r7
 800194c:	4453      	add	r3, sl
 800194e:	9305      	str	r3, [sp, #20]
 8001950:	0c03      	lsrs	r3, r0, #16
 8001952:	469a      	mov	sl, r3
 8001954:	434a      	muls	r2, r1
 8001956:	4361      	muls	r1, r4
 8001958:	4449      	add	r1, r9
 800195a:	4451      	add	r1, sl
 800195c:	44ab      	add	fp, r5
 800195e:	4589      	cmp	r9, r1
 8001960:	d903      	bls.n	800196a <__aeabi_dmul+0x1a2>
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	4699      	mov	r9, r3
 8001968:	444a      	add	r2, r9
 800196a:	0400      	lsls	r0, r0, #16
 800196c:	0c0b      	lsrs	r3, r1, #16
 800196e:	0c00      	lsrs	r0, r0, #16
 8001970:	0409      	lsls	r1, r1, #16
 8001972:	1809      	adds	r1, r1, r0
 8001974:	0020      	movs	r0, r4
 8001976:	4699      	mov	r9, r3
 8001978:	4643      	mov	r3, r8
 800197a:	4370      	muls	r0, r6
 800197c:	435c      	muls	r4, r3
 800197e:	437e      	muls	r6, r7
 8001980:	435f      	muls	r7, r3
 8001982:	0c03      	lsrs	r3, r0, #16
 8001984:	4698      	mov	r8, r3
 8001986:	19a4      	adds	r4, r4, r6
 8001988:	4444      	add	r4, r8
 800198a:	444a      	add	r2, r9
 800198c:	9703      	str	r7, [sp, #12]
 800198e:	42a6      	cmp	r6, r4
 8001990:	d904      	bls.n	800199c <__aeabi_dmul+0x1d4>
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	4698      	mov	r8, r3
 8001998:	4447      	add	r7, r8
 800199a:	9703      	str	r7, [sp, #12]
 800199c:	0423      	lsls	r3, r4, #16
 800199e:	9e02      	ldr	r6, [sp, #8]
 80019a0:	469a      	mov	sl, r3
 80019a2:	9b05      	ldr	r3, [sp, #20]
 80019a4:	445e      	add	r6, fp
 80019a6:	4698      	mov	r8, r3
 80019a8:	42ae      	cmp	r6, r5
 80019aa:	41ad      	sbcs	r5, r5
 80019ac:	1876      	adds	r6, r6, r1
 80019ae:	428e      	cmp	r6, r1
 80019b0:	4189      	sbcs	r1, r1
 80019b2:	0400      	lsls	r0, r0, #16
 80019b4:	0c00      	lsrs	r0, r0, #16
 80019b6:	4450      	add	r0, sl
 80019b8:	4440      	add	r0, r8
 80019ba:	426d      	negs	r5, r5
 80019bc:	1947      	adds	r7, r0, r5
 80019be:	46b8      	mov	r8, r7
 80019c0:	4693      	mov	fp, r2
 80019c2:	4249      	negs	r1, r1
 80019c4:	4689      	mov	r9, r1
 80019c6:	44c3      	add	fp, r8
 80019c8:	44d9      	add	r9, fp
 80019ca:	4298      	cmp	r0, r3
 80019cc:	4180      	sbcs	r0, r0
 80019ce:	45a8      	cmp	r8, r5
 80019d0:	41ad      	sbcs	r5, r5
 80019d2:	4593      	cmp	fp, r2
 80019d4:	4192      	sbcs	r2, r2
 80019d6:	4589      	cmp	r9, r1
 80019d8:	4189      	sbcs	r1, r1
 80019da:	426d      	negs	r5, r5
 80019dc:	4240      	negs	r0, r0
 80019de:	4328      	orrs	r0, r5
 80019e0:	0c24      	lsrs	r4, r4, #16
 80019e2:	4252      	negs	r2, r2
 80019e4:	4249      	negs	r1, r1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	9b03      	ldr	r3, [sp, #12]
 80019ea:	1900      	adds	r0, r0, r4
 80019ec:	1880      	adds	r0, r0, r2
 80019ee:	18c7      	adds	r7, r0, r3
 80019f0:	464b      	mov	r3, r9
 80019f2:	0ddc      	lsrs	r4, r3, #23
 80019f4:	9b04      	ldr	r3, [sp, #16]
 80019f6:	0275      	lsls	r5, r6, #9
 80019f8:	431d      	orrs	r5, r3
 80019fa:	1e6a      	subs	r2, r5, #1
 80019fc:	4195      	sbcs	r5, r2
 80019fe:	464b      	mov	r3, r9
 8001a00:	0df6      	lsrs	r6, r6, #23
 8001a02:	027f      	lsls	r7, r7, #9
 8001a04:	4335      	orrs	r5, r6
 8001a06:	025a      	lsls	r2, r3, #9
 8001a08:	433c      	orrs	r4, r7
 8001a0a:	4315      	orrs	r5, r2
 8001a0c:	01fb      	lsls	r3, r7, #7
 8001a0e:	d400      	bmi.n	8001a12 <__aeabi_dmul+0x24a>
 8001a10:	e11c      	b.n	8001c4c <__aeabi_dmul+0x484>
 8001a12:	2101      	movs	r1, #1
 8001a14:	086a      	lsrs	r2, r5, #1
 8001a16:	400d      	ands	r5, r1
 8001a18:	4315      	orrs	r5, r2
 8001a1a:	07e2      	lsls	r2, r4, #31
 8001a1c:	4315      	orrs	r5, r2
 8001a1e:	0864      	lsrs	r4, r4, #1
 8001a20:	494f      	ldr	r1, [pc, #316]	; (8001b60 <__aeabi_dmul+0x398>)
 8001a22:	4461      	add	r1, ip
 8001a24:	2900      	cmp	r1, #0
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_dmul+0x262>
 8001a28:	e0b0      	b.n	8001b8c <__aeabi_dmul+0x3c4>
 8001a2a:	076b      	lsls	r3, r5, #29
 8001a2c:	d009      	beq.n	8001a42 <__aeabi_dmul+0x27a>
 8001a2e:	220f      	movs	r2, #15
 8001a30:	402a      	ands	r2, r5
 8001a32:	2a04      	cmp	r2, #4
 8001a34:	d005      	beq.n	8001a42 <__aeabi_dmul+0x27a>
 8001a36:	1d2a      	adds	r2, r5, #4
 8001a38:	42aa      	cmp	r2, r5
 8001a3a:	41ad      	sbcs	r5, r5
 8001a3c:	426d      	negs	r5, r5
 8001a3e:	1964      	adds	r4, r4, r5
 8001a40:	0015      	movs	r5, r2
 8001a42:	01e3      	lsls	r3, r4, #7
 8001a44:	d504      	bpl.n	8001a50 <__aeabi_dmul+0x288>
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <__aeabi_dmul+0x39c>)
 8001a4a:	00c9      	lsls	r1, r1, #3
 8001a4c:	4014      	ands	r4, r2
 8001a4e:	4461      	add	r1, ip
 8001a50:	4a45      	ldr	r2, [pc, #276]	; (8001b68 <__aeabi_dmul+0x3a0>)
 8001a52:	4291      	cmp	r1, r2
 8001a54:	dd00      	ble.n	8001a58 <__aeabi_dmul+0x290>
 8001a56:	e726      	b.n	80018a6 <__aeabi_dmul+0xde>
 8001a58:	0762      	lsls	r2, r4, #29
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	0264      	lsls	r4, r4, #9
 8001a5e:	0549      	lsls	r1, r1, #21
 8001a60:	4315      	orrs	r5, r2
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	0d4a      	lsrs	r2, r1, #21
 8001a66:	e710      	b.n	800188a <__aeabi_dmul+0xc2>
 8001a68:	4652      	mov	r2, sl
 8001a6a:	4332      	orrs	r2, r6
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dmul+0x2a8>
 8001a6e:	e07f      	b.n	8001b70 <__aeabi_dmul+0x3a8>
 8001a70:	2e00      	cmp	r6, #0
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dmul+0x2ae>
 8001a74:	e0dc      	b.n	8001c30 <__aeabi_dmul+0x468>
 8001a76:	0030      	movs	r0, r6
 8001a78:	f000 fd96 	bl	80025a8 <__clzsi2>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	3a0b      	subs	r2, #11
 8001a80:	231d      	movs	r3, #29
 8001a82:	0001      	movs	r1, r0
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	4652      	mov	r2, sl
 8001a88:	3908      	subs	r1, #8
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	408e      	lsls	r6, r1
 8001a8e:	4316      	orrs	r6, r2
 8001a90:	4652      	mov	r2, sl
 8001a92:	408a      	lsls	r2, r1
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	4935      	ldr	r1, [pc, #212]	; (8001b6c <__aeabi_dmul+0x3a4>)
 8001a98:	1a18      	subs	r0, r3, r0
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	468c      	mov	ip, r1
 8001a9e:	4463      	add	r3, ip
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	e6d3      	b.n	800184e <__aeabi_dmul+0x86>
 8001aa6:	0025      	movs	r5, r4
 8001aa8:	4305      	orrs	r5, r0
 8001aaa:	d04a      	beq.n	8001b42 <__aeabi_dmul+0x37a>
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dmul+0x2ea>
 8001ab0:	e0b0      	b.n	8001c14 <__aeabi_dmul+0x44c>
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	f000 fd78 	bl	80025a8 <__clzsi2>
 8001ab8:	0001      	movs	r1, r0
 8001aba:	0002      	movs	r2, r0
 8001abc:	390b      	subs	r1, #11
 8001abe:	231d      	movs	r3, #29
 8001ac0:	0010      	movs	r0, r2
 8001ac2:	1a5b      	subs	r3, r3, r1
 8001ac4:	0031      	movs	r1, r6
 8001ac6:	0035      	movs	r5, r6
 8001ac8:	3808      	subs	r0, #8
 8001aca:	4084      	lsls	r4, r0
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	4085      	lsls	r5, r0
 8001ad0:	430c      	orrs	r4, r1
 8001ad2:	4826      	ldr	r0, [pc, #152]	; (8001b6c <__aeabi_dmul+0x3a4>)
 8001ad4:	1a83      	subs	r3, r0, r2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	4699      	mov	r9, r3
 8001adc:	469b      	mov	fp, r3
 8001ade:	e697      	b.n	8001810 <__aeabi_dmul+0x48>
 8001ae0:	0005      	movs	r5, r0
 8001ae2:	4325      	orrs	r5, r4
 8001ae4:	d126      	bne.n	8001b34 <__aeabi_dmul+0x36c>
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2302      	movs	r3, #2
 8001aec:	2400      	movs	r4, #0
 8001aee:	4691      	mov	r9, r2
 8001af0:	469b      	mov	fp, r3
 8001af2:	e68d      	b.n	8001810 <__aeabi_dmul+0x48>
 8001af4:	4652      	mov	r2, sl
 8001af6:	9b00      	ldr	r3, [sp, #0]
 8001af8:	4332      	orrs	r2, r6
 8001afa:	d110      	bne.n	8001b1e <__aeabi_dmul+0x356>
 8001afc:	4915      	ldr	r1, [pc, #84]	; (8001b54 <__aeabi_dmul+0x38c>)
 8001afe:	2600      	movs	r6, #0
 8001b00:	468c      	mov	ip, r1
 8001b02:	4463      	add	r3, ip
 8001b04:	4649      	mov	r1, r9
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	4319      	orrs	r1, r3
 8001b0c:	4689      	mov	r9, r1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	e69d      	b.n	800184e <__aeabi_dmul+0x86>
 8001b12:	465b      	mov	r3, fp
 8001b14:	9701      	str	r7, [sp, #4]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d000      	beq.n	8001b1c <__aeabi_dmul+0x354>
 8001b1a:	e6ad      	b.n	8001878 <__aeabi_dmul+0xb0>
 8001b1c:	e6c3      	b.n	80018a6 <__aeabi_dmul+0xde>
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <__aeabi_dmul+0x38c>)
 8001b20:	2003      	movs	r0, #3
 8001b22:	4694      	mov	ip, r2
 8001b24:	4463      	add	r3, ip
 8001b26:	464a      	mov	r2, r9
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	4691      	mov	r9, r2
 8001b30:	4652      	mov	r2, sl
 8001b32:	e68c      	b.n	800184e <__aeabi_dmul+0x86>
 8001b34:	220c      	movs	r2, #12
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2303      	movs	r3, #3
 8001b3a:	0005      	movs	r5, r0
 8001b3c:	4691      	mov	r9, r2
 8001b3e:	469b      	mov	fp, r3
 8001b40:	e666      	b.n	8001810 <__aeabi_dmul+0x48>
 8001b42:	2304      	movs	r3, #4
 8001b44:	4699      	mov	r9, r3
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	469b      	mov	fp, r3
 8001b50:	e65e      	b.n	8001810 <__aeabi_dmul+0x48>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	fffffc01 	.word	0xfffffc01
 8001b5c:	0800e0b4 	.word	0x0800e0b4
 8001b60:	000003ff 	.word	0x000003ff
 8001b64:	feffffff 	.word	0xfeffffff
 8001b68:	000007fe 	.word	0x000007fe
 8001b6c:	fffffc0d 	.word	0xfffffc0d
 8001b70:	4649      	mov	r1, r9
 8001b72:	2301      	movs	r3, #1
 8001b74:	4319      	orrs	r1, r3
 8001b76:	4689      	mov	r9, r1
 8001b78:	2600      	movs	r6, #0
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	e667      	b.n	800184e <__aeabi_dmul+0x86>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2480      	movs	r4, #128	; 0x80
 8001b82:	2500      	movs	r5, #0
 8001b84:	4a43      	ldr	r2, [pc, #268]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	0324      	lsls	r4, r4, #12
 8001b8a:	e67e      	b.n	800188a <__aeabi_dmul+0xc2>
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	1a40      	subs	r0, r0, r1
 8001b90:	2838      	cmp	r0, #56	; 0x38
 8001b92:	dd00      	ble.n	8001b96 <__aeabi_dmul+0x3ce>
 8001b94:	e676      	b.n	8001884 <__aeabi_dmul+0xbc>
 8001b96:	281f      	cmp	r0, #31
 8001b98:	dd5b      	ble.n	8001c52 <__aeabi_dmul+0x48a>
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	0023      	movs	r3, r4
 8001b9e:	4252      	negs	r2, r2
 8001ba0:	1a51      	subs	r1, r2, r1
 8001ba2:	40cb      	lsrs	r3, r1
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	2820      	cmp	r0, #32
 8001ba8:	d003      	beq.n	8001bb2 <__aeabi_dmul+0x3ea>
 8001baa:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <__aeabi_dmul+0x4d0>)
 8001bac:	4462      	add	r2, ip
 8001bae:	4094      	lsls	r4, r2
 8001bb0:	4325      	orrs	r5, r4
 8001bb2:	1e6a      	subs	r2, r5, #1
 8001bb4:	4195      	sbcs	r5, r2
 8001bb6:	002a      	movs	r2, r5
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	2107      	movs	r1, #7
 8001bbc:	000d      	movs	r5, r1
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	4015      	ands	r5, r2
 8001bc2:	4211      	tst	r1, r2
 8001bc4:	d05b      	beq.n	8001c7e <__aeabi_dmul+0x4b6>
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4011      	ands	r1, r2
 8001bcc:	2904      	cmp	r1, #4
 8001bce:	d053      	beq.n	8001c78 <__aeabi_dmul+0x4b0>
 8001bd0:	1d11      	adds	r1, r2, #4
 8001bd2:	4291      	cmp	r1, r2
 8001bd4:	4192      	sbcs	r2, r2
 8001bd6:	4252      	negs	r2, r2
 8001bd8:	18a4      	adds	r4, r4, r2
 8001bda:	000a      	movs	r2, r1
 8001bdc:	0223      	lsls	r3, r4, #8
 8001bde:	d54b      	bpl.n	8001c78 <__aeabi_dmul+0x4b0>
 8001be0:	2201      	movs	r2, #1
 8001be2:	2400      	movs	r4, #0
 8001be4:	2500      	movs	r5, #0
 8001be6:	e650      	b.n	800188a <__aeabi_dmul+0xc2>
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	421c      	tst	r4, r3
 8001bee:	d009      	beq.n	8001c04 <__aeabi_dmul+0x43c>
 8001bf0:	421e      	tst	r6, r3
 8001bf2:	d107      	bne.n	8001c04 <__aeabi_dmul+0x43c>
 8001bf4:	4333      	orrs	r3, r6
 8001bf6:	031c      	lsls	r4, r3, #12
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	0015      	movs	r5, r2
 8001bfc:	0b24      	lsrs	r4, r4, #12
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	e642      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4314      	orrs	r4, r2
 8001c0a:	0324      	lsls	r4, r4, #12
 8001c0c:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001c0e:	0b24      	lsrs	r4, r4, #12
 8001c10:	9701      	str	r7, [sp, #4]
 8001c12:	e63a      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c14:	f000 fcc8 	bl	80025a8 <__clzsi2>
 8001c18:	0001      	movs	r1, r0
 8001c1a:	0002      	movs	r2, r0
 8001c1c:	3115      	adds	r1, #21
 8001c1e:	3220      	adds	r2, #32
 8001c20:	291c      	cmp	r1, #28
 8001c22:	dc00      	bgt.n	8001c26 <__aeabi_dmul+0x45e>
 8001c24:	e74b      	b.n	8001abe <__aeabi_dmul+0x2f6>
 8001c26:	0034      	movs	r4, r6
 8001c28:	3808      	subs	r0, #8
 8001c2a:	2500      	movs	r5, #0
 8001c2c:	4084      	lsls	r4, r0
 8001c2e:	e750      	b.n	8001ad2 <__aeabi_dmul+0x30a>
 8001c30:	f000 fcba 	bl	80025a8 <__clzsi2>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	3215      	adds	r2, #21
 8001c3a:	3020      	adds	r0, #32
 8001c3c:	2a1c      	cmp	r2, #28
 8001c3e:	dc00      	bgt.n	8001c42 <__aeabi_dmul+0x47a>
 8001c40:	e71e      	b.n	8001a80 <__aeabi_dmul+0x2b8>
 8001c42:	4656      	mov	r6, sl
 8001c44:	3b08      	subs	r3, #8
 8001c46:	2200      	movs	r2, #0
 8001c48:	409e      	lsls	r6, r3
 8001c4a:	e723      	b.n	8001a94 <__aeabi_dmul+0x2cc>
 8001c4c:	9b00      	ldr	r3, [sp, #0]
 8001c4e:	469c      	mov	ip, r3
 8001c50:	e6e6      	b.n	8001a20 <__aeabi_dmul+0x258>
 8001c52:	4912      	ldr	r1, [pc, #72]	; (8001c9c <__aeabi_dmul+0x4d4>)
 8001c54:	0022      	movs	r2, r4
 8001c56:	4461      	add	r1, ip
 8001c58:	002e      	movs	r6, r5
 8001c5a:	408d      	lsls	r5, r1
 8001c5c:	408a      	lsls	r2, r1
 8001c5e:	40c6      	lsrs	r6, r0
 8001c60:	1e69      	subs	r1, r5, #1
 8001c62:	418d      	sbcs	r5, r1
 8001c64:	4332      	orrs	r2, r6
 8001c66:	432a      	orrs	r2, r5
 8001c68:	40c4      	lsrs	r4, r0
 8001c6a:	0753      	lsls	r3, r2, #29
 8001c6c:	d0b6      	beq.n	8001bdc <__aeabi_dmul+0x414>
 8001c6e:	210f      	movs	r1, #15
 8001c70:	4011      	ands	r1, r2
 8001c72:	2904      	cmp	r1, #4
 8001c74:	d1ac      	bne.n	8001bd0 <__aeabi_dmul+0x408>
 8001c76:	e7b1      	b.n	8001bdc <__aeabi_dmul+0x414>
 8001c78:	0765      	lsls	r5, r4, #29
 8001c7a:	0264      	lsls	r4, r4, #9
 8001c7c:	0b24      	lsrs	r4, r4, #12
 8001c7e:	08d2      	lsrs	r2, r2, #3
 8001c80:	4315      	orrs	r5, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	e601      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	0312      	lsls	r2, r2, #12
 8001c8a:	4314      	orrs	r4, r2
 8001c8c:	0324      	lsls	r4, r4, #12
 8001c8e:	4a01      	ldr	r2, [pc, #4]	; (8001c94 <__aeabi_dmul+0x4cc>)
 8001c90:	0b24      	lsrs	r4, r4, #12
 8001c92:	e5fa      	b.n	800188a <__aeabi_dmul+0xc2>
 8001c94:	000007ff 	.word	0x000007ff
 8001c98:	0000043e 	.word	0x0000043e
 8001c9c:	0000041e 	.word	0x0000041e

08001ca0 <__aeabi_dsub>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	4657      	mov	r7, sl
 8001ca4:	464e      	mov	r6, r9
 8001ca6:	4645      	mov	r5, r8
 8001ca8:	46de      	mov	lr, fp
 8001caa:	b5e0      	push	{r5, r6, r7, lr}
 8001cac:	001e      	movs	r6, r3
 8001cae:	0017      	movs	r7, r2
 8001cb0:	004a      	lsls	r2, r1, #1
 8001cb2:	030b      	lsls	r3, r1, #12
 8001cb4:	0d52      	lsrs	r2, r2, #21
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	4690      	mov	r8, r2
 8001cba:	0f42      	lsrs	r2, r0, #29
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	0fcd      	lsrs	r5, r1, #31
 8001cc0:	4ccd      	ldr	r4, [pc, #820]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001cc2:	0331      	lsls	r1, r6, #12
 8001cc4:	00c3      	lsls	r3, r0, #3
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	0070      	lsls	r0, r6, #1
 8001cca:	0f7a      	lsrs	r2, r7, #29
 8001ccc:	0a49      	lsrs	r1, r1, #9
 8001cce:	00ff      	lsls	r7, r7, #3
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	46b9      	mov	r9, r7
 8001cd4:	0d40      	lsrs	r0, r0, #21
 8001cd6:	0ff6      	lsrs	r6, r6, #31
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	42a0      	cmp	r0, r4
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dsub+0x40>
 8001cde:	e0b1      	b.n	8001e44 <__aeabi_dsub+0x1a4>
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4056      	eors	r6, r2
 8001ce4:	46b3      	mov	fp, r6
 8001ce6:	42b5      	cmp	r5, r6
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x4c>
 8001cea:	e088      	b.n	8001dfe <__aeabi_dsub+0x15e>
 8001cec:	4642      	mov	r2, r8
 8001cee:	1a12      	subs	r2, r2, r0
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	dc00      	bgt.n	8001cf6 <__aeabi_dsub+0x56>
 8001cf4:	e0ae      	b.n	8001e54 <__aeabi_dsub+0x1b4>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x5c>
 8001cfa:	e0c1      	b.n	8001e80 <__aeabi_dsub+0x1e0>
 8001cfc:	48be      	ldr	r0, [pc, #760]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001cfe:	4580      	cmp	r8, r0
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dsub+0x64>
 8001d02:	e151      	b.n	8001fa8 <__aeabi_dsub+0x308>
 8001d04:	2080      	movs	r0, #128	; 0x80
 8001d06:	0400      	lsls	r0, r0, #16
 8001d08:	4301      	orrs	r1, r0
 8001d0a:	2a38      	cmp	r2, #56	; 0x38
 8001d0c:	dd00      	ble.n	8001d10 <__aeabi_dsub+0x70>
 8001d0e:	e17b      	b.n	8002008 <__aeabi_dsub+0x368>
 8001d10:	2a1f      	cmp	r2, #31
 8001d12:	dd00      	ble.n	8001d16 <__aeabi_dsub+0x76>
 8001d14:	e1ee      	b.n	80020f4 <__aeabi_dsub+0x454>
 8001d16:	2020      	movs	r0, #32
 8001d18:	003e      	movs	r6, r7
 8001d1a:	1a80      	subs	r0, r0, r2
 8001d1c:	000c      	movs	r4, r1
 8001d1e:	40d6      	lsrs	r6, r2
 8001d20:	40d1      	lsrs	r1, r2
 8001d22:	4087      	lsls	r7, r0
 8001d24:	4662      	mov	r2, ip
 8001d26:	4084      	lsls	r4, r0
 8001d28:	1a52      	subs	r2, r2, r1
 8001d2a:	1e78      	subs	r0, r7, #1
 8001d2c:	4187      	sbcs	r7, r0
 8001d2e:	4694      	mov	ip, r2
 8001d30:	4334      	orrs	r4, r6
 8001d32:	4327      	orrs	r7, r4
 8001d34:	1bdc      	subs	r4, r3, r7
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	419b      	sbcs	r3, r3
 8001d3a:	4662      	mov	r2, ip
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4699      	mov	r9, r3
 8001d42:	464b      	mov	r3, r9
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	d400      	bmi.n	8001d4a <__aeabi_dsub+0xaa>
 8001d48:	e118      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	0258      	lsls	r0, r3, #9
 8001d4e:	0a43      	lsrs	r3, r0, #9
 8001d50:	4699      	mov	r9, r3
 8001d52:	464b      	mov	r3, r9
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0xba>
 8001d58:	e137      	b.n	8001fca <__aeabi_dsub+0x32a>
 8001d5a:	4648      	mov	r0, r9
 8001d5c:	f000 fc24 	bl	80025a8 <__clzsi2>
 8001d60:	0001      	movs	r1, r0
 8001d62:	3908      	subs	r1, #8
 8001d64:	2320      	movs	r3, #32
 8001d66:	0022      	movs	r2, r4
 8001d68:	4648      	mov	r0, r9
 8001d6a:	1a5b      	subs	r3, r3, r1
 8001d6c:	40da      	lsrs	r2, r3
 8001d6e:	4088      	lsls	r0, r1
 8001d70:	408c      	lsls	r4, r1
 8001d72:	4643      	mov	r3, r8
 8001d74:	4310      	orrs	r0, r2
 8001d76:	4588      	cmp	r8, r1
 8001d78:	dd00      	ble.n	8001d7c <__aeabi_dsub+0xdc>
 8001d7a:	e136      	b.n	8001fea <__aeabi_dsub+0x34a>
 8001d7c:	1ac9      	subs	r1, r1, r3
 8001d7e:	1c4b      	adds	r3, r1, #1
 8001d80:	2b1f      	cmp	r3, #31
 8001d82:	dd00      	ble.n	8001d86 <__aeabi_dsub+0xe6>
 8001d84:	e0ea      	b.n	8001f5c <__aeabi_dsub+0x2bc>
 8001d86:	2220      	movs	r2, #32
 8001d88:	0026      	movs	r6, r4
 8001d8a:	1ad2      	subs	r2, r2, r3
 8001d8c:	0001      	movs	r1, r0
 8001d8e:	4094      	lsls	r4, r2
 8001d90:	40de      	lsrs	r6, r3
 8001d92:	40d8      	lsrs	r0, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	4091      	lsls	r1, r2
 8001d98:	1e62      	subs	r2, r4, #1
 8001d9a:	4194      	sbcs	r4, r2
 8001d9c:	4681      	mov	r9, r0
 8001d9e:	4698      	mov	r8, r3
 8001da0:	4331      	orrs	r1, r6
 8001da2:	430c      	orrs	r4, r1
 8001da4:	0763      	lsls	r3, r4, #29
 8001da6:	d009      	beq.n	8001dbc <__aeabi_dsub+0x11c>
 8001da8:	230f      	movs	r3, #15
 8001daa:	4023      	ands	r3, r4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d005      	beq.n	8001dbc <__aeabi_dsub+0x11c>
 8001db0:	1d23      	adds	r3, r4, #4
 8001db2:	42a3      	cmp	r3, r4
 8001db4:	41a4      	sbcs	r4, r4
 8001db6:	4264      	negs	r4, r4
 8001db8:	44a1      	add	r9, r4
 8001dba:	001c      	movs	r4, r3
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	d400      	bmi.n	8001dc4 <__aeabi_dsub+0x124>
 8001dc2:	e0de      	b.n	8001f82 <__aeabi_dsub+0x2e2>
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001dc8:	3101      	adds	r1, #1
 8001dca:	4299      	cmp	r1, r3
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x130>
 8001dce:	e0e7      	b.n	8001fa0 <__aeabi_dsub+0x300>
 8001dd0:	464b      	mov	r3, r9
 8001dd2:	488a      	ldr	r0, [pc, #552]	; (8001ffc <__aeabi_dsub+0x35c>)
 8001dd4:	08e4      	lsrs	r4, r4, #3
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	0018      	movs	r0, r3
 8001dda:	0549      	lsls	r1, r1, #21
 8001ddc:	075b      	lsls	r3, r3, #29
 8001dde:	0240      	lsls	r0, r0, #9
 8001de0:	4323      	orrs	r3, r4
 8001de2:	0d4a      	lsrs	r2, r1, #21
 8001de4:	0b04      	lsrs	r4, r0, #12
 8001de6:	0512      	lsls	r2, r2, #20
 8001de8:	07ed      	lsls	r5, r5, #31
 8001dea:	4322      	orrs	r2, r4
 8001dec:	432a      	orrs	r2, r5
 8001dee:	0018      	movs	r0, r3
 8001df0:	0011      	movs	r1, r2
 8001df2:	bcf0      	pop	{r4, r5, r6, r7}
 8001df4:	46bb      	mov	fp, r7
 8001df6:	46b2      	mov	sl, r6
 8001df8:	46a9      	mov	r9, r5
 8001dfa:	46a0      	mov	r8, r4
 8001dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfe:	4642      	mov	r2, r8
 8001e00:	1a12      	subs	r2, r2, r0
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	dd52      	ble.n	8001eac <__aeabi_dsub+0x20c>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x16c>
 8001e0a:	e09c      	b.n	8001f46 <__aeabi_dsub+0x2a6>
 8001e0c:	45a0      	cmp	r8, r4
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x172>
 8001e10:	e0ca      	b.n	8001fa8 <__aeabi_dsub+0x308>
 8001e12:	2080      	movs	r0, #128	; 0x80
 8001e14:	0400      	lsls	r0, r0, #16
 8001e16:	4301      	orrs	r1, r0
 8001e18:	2a38      	cmp	r2, #56	; 0x38
 8001e1a:	dd00      	ble.n	8001e1e <__aeabi_dsub+0x17e>
 8001e1c:	e149      	b.n	80020b2 <__aeabi_dsub+0x412>
 8001e1e:	2a1f      	cmp	r2, #31
 8001e20:	dc00      	bgt.n	8001e24 <__aeabi_dsub+0x184>
 8001e22:	e197      	b.n	8002154 <__aeabi_dsub+0x4b4>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x19a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	1e62      	subs	r2, r4, #1
 8001e3e:	4194      	sbcs	r4, r2
 8001e40:	4334      	orrs	r4, r6
 8001e42:	e13a      	b.n	80020ba <__aeabi_dsub+0x41a>
 8001e44:	000a      	movs	r2, r1
 8001e46:	433a      	orrs	r2, r7
 8001e48:	d028      	beq.n	8001e9c <__aeabi_dsub+0x1fc>
 8001e4a:	46b3      	mov	fp, r6
 8001e4c:	42b5      	cmp	r5, r6
 8001e4e:	d02b      	beq.n	8001ea8 <__aeabi_dsub+0x208>
 8001e50:	4a6b      	ldr	r2, [pc, #428]	; (8002000 <__aeabi_dsub+0x360>)
 8001e52:	4442      	add	r2, r8
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d05d      	beq.n	8001f14 <__aeabi_dsub+0x274>
 8001e58:	4642      	mov	r2, r8
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	1a82      	subs	r2, r0, r2
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x1c4>
 8001e62:	e0f5      	b.n	8002050 <__aeabi_dsub+0x3b0>
 8001e64:	4665      	mov	r5, ip
 8001e66:	431d      	orrs	r5, r3
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x1cc>
 8001e6a:	e19c      	b.n	80021a6 <__aeabi_dsub+0x506>
 8001e6c:	1e55      	subs	r5, r2, #1
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x1d4>
 8001e72:	e1fb      	b.n	800226c <__aeabi_dsub+0x5cc>
 8001e74:	4c60      	ldr	r4, [pc, #384]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x1dc>
 8001e7a:	e1bd      	b.n	80021f8 <__aeabi_dsub+0x558>
 8001e7c:	002a      	movs	r2, r5
 8001e7e:	e0f0      	b.n	8002062 <__aeabi_dsub+0x3c2>
 8001e80:	0008      	movs	r0, r1
 8001e82:	4338      	orrs	r0, r7
 8001e84:	d100      	bne.n	8001e88 <__aeabi_dsub+0x1e8>
 8001e86:	e0c3      	b.n	8002010 <__aeabi_dsub+0x370>
 8001e88:	1e50      	subs	r0, r2, #1
 8001e8a:	2a01      	cmp	r2, #1
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x1f0>
 8001e8e:	e1a8      	b.n	80021e2 <__aeabi_dsub+0x542>
 8001e90:	4c59      	ldr	r4, [pc, #356]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x1f8>
 8001e96:	e087      	b.n	8001fa8 <__aeabi_dsub+0x308>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	e736      	b.n	8001d0a <__aeabi_dsub+0x6a>
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4056      	eors	r6, r2
 8001ea0:	46b3      	mov	fp, r6
 8001ea2:	42b5      	cmp	r5, r6
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_dsub+0x208>
 8001ea6:	e721      	b.n	8001cec <__aeabi_dsub+0x4c>
 8001ea8:	4a55      	ldr	r2, [pc, #340]	; (8002000 <__aeabi_dsub+0x360>)
 8001eaa:	4442      	add	r2, r8
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x212>
 8001eb0:	e0b5      	b.n	800201e <__aeabi_dsub+0x37e>
 8001eb2:	4642      	mov	r2, r8
 8001eb4:	4644      	mov	r4, r8
 8001eb6:	1a82      	subs	r2, r0, r2
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d100      	bne.n	8001ebe <__aeabi_dsub+0x21e>
 8001ebc:	e138      	b.n	8002130 <__aeabi_dsub+0x490>
 8001ebe:	4e4e      	ldr	r6, [pc, #312]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001ec0:	42b0      	cmp	r0, r6
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x226>
 8001ec4:	e1de      	b.n	8002284 <__aeabi_dsub+0x5e4>
 8001ec6:	2680      	movs	r6, #128	; 0x80
 8001ec8:	4664      	mov	r4, ip
 8001eca:	0436      	lsls	r6, r6, #16
 8001ecc:	4334      	orrs	r4, r6
 8001ece:	46a4      	mov	ip, r4
 8001ed0:	2a38      	cmp	r2, #56	; 0x38
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x236>
 8001ed4:	e196      	b.n	8002204 <__aeabi_dsub+0x564>
 8001ed6:	2a1f      	cmp	r2, #31
 8001ed8:	dd00      	ble.n	8001edc <__aeabi_dsub+0x23c>
 8001eda:	e224      	b.n	8002326 <__aeabi_dsub+0x686>
 8001edc:	2620      	movs	r6, #32
 8001ede:	1ab4      	subs	r4, r6, r2
 8001ee0:	46a2      	mov	sl, r4
 8001ee2:	4664      	mov	r4, ip
 8001ee4:	4656      	mov	r6, sl
 8001ee6:	40b4      	lsls	r4, r6
 8001ee8:	46a1      	mov	r9, r4
 8001eea:	001c      	movs	r4, r3
 8001eec:	464e      	mov	r6, r9
 8001eee:	40d4      	lsrs	r4, r2
 8001ef0:	4326      	orrs	r6, r4
 8001ef2:	0034      	movs	r4, r6
 8001ef4:	4656      	mov	r6, sl
 8001ef6:	40b3      	lsls	r3, r6
 8001ef8:	1e5e      	subs	r6, r3, #1
 8001efa:	41b3      	sbcs	r3, r6
 8001efc:	431c      	orrs	r4, r3
 8001efe:	4663      	mov	r3, ip
 8001f00:	40d3      	lsrs	r3, r2
 8001f02:	18c9      	adds	r1, r1, r3
 8001f04:	19e4      	adds	r4, r4, r7
 8001f06:	42bc      	cmp	r4, r7
 8001f08:	41bf      	sbcs	r7, r7
 8001f0a:	427f      	negs	r7, r7
 8001f0c:	46b9      	mov	r9, r7
 8001f0e:	4680      	mov	r8, r0
 8001f10:	4489      	add	r9, r1
 8001f12:	e0d8      	b.n	80020c6 <__aeabi_dsub+0x426>
 8001f14:	4640      	mov	r0, r8
 8001f16:	4c3b      	ldr	r4, [pc, #236]	; (8002004 <__aeabi_dsub+0x364>)
 8001f18:	3001      	adds	r0, #1
 8001f1a:	4220      	tst	r0, r4
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x280>
 8001f1e:	e0b4      	b.n	800208a <__aeabi_dsub+0x3ea>
 8001f20:	4640      	mov	r0, r8
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x288>
 8001f26:	e144      	b.n	80021b2 <__aeabi_dsub+0x512>
 8001f28:	4660      	mov	r0, ip
 8001f2a:	4318      	orrs	r0, r3
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x290>
 8001f2e:	e190      	b.n	8002252 <__aeabi_dsub+0x5b2>
 8001f30:	0008      	movs	r0, r1
 8001f32:	4338      	orrs	r0, r7
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x298>
 8001f36:	e1aa      	b.n	800228e <__aeabi_dsub+0x5ee>
 8001f38:	4661      	mov	r1, ip
 8001f3a:	08db      	lsrs	r3, r3, #3
 8001f3c:	0749      	lsls	r1, r1, #29
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	4661      	mov	r1, ip
 8001f42:	08cc      	lsrs	r4, r1, #3
 8001f44:	e027      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8001f46:	0008      	movs	r0, r1
 8001f48:	4338      	orrs	r0, r7
 8001f4a:	d061      	beq.n	8002010 <__aeabi_dsub+0x370>
 8001f4c:	1e50      	subs	r0, r2, #1
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x2b4>
 8001f52:	e139      	b.n	80021c8 <__aeabi_dsub+0x528>
 8001f54:	42a2      	cmp	r2, r4
 8001f56:	d027      	beq.n	8001fa8 <__aeabi_dsub+0x308>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	e75d      	b.n	8001e18 <__aeabi_dsub+0x178>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	391f      	subs	r1, #31
 8001f60:	40ca      	lsrs	r2, r1
 8001f62:	0011      	movs	r1, r2
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d003      	beq.n	8001f70 <__aeabi_dsub+0x2d0>
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4098      	lsls	r0, r3
 8001f6e:	4304      	orrs	r4, r0
 8001f70:	1e63      	subs	r3, r4, #1
 8001f72:	419c      	sbcs	r4, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	4699      	mov	r9, r3
 8001f78:	4698      	mov	r8, r3
 8001f7a:	430c      	orrs	r4, r1
 8001f7c:	0763      	lsls	r3, r4, #29
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x2e2>
 8001f80:	e712      	b.n	8001da8 <__aeabi_dsub+0x108>
 8001f82:	464b      	mov	r3, r9
 8001f84:	464a      	mov	r2, r9
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	075b      	lsls	r3, r3, #29
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	08d4      	lsrs	r4, r2, #3
 8001f8e:	4642      	mov	r2, r8
 8001f90:	4919      	ldr	r1, [pc, #100]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001f92:	428a      	cmp	r2, r1
 8001f94:	d00e      	beq.n	8001fb4 <__aeabi_dsub+0x314>
 8001f96:	0324      	lsls	r4, r4, #12
 8001f98:	0552      	lsls	r2, r2, #21
 8001f9a:	0b24      	lsrs	r4, r4, #12
 8001f9c:	0d52      	lsrs	r2, r2, #21
 8001f9e:	e722      	b.n	8001de6 <__aeabi_dsub+0x146>
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e71e      	b.n	8001de6 <__aeabi_dsub+0x146>
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	4662      	mov	r2, ip
 8001fac:	0752      	lsls	r2, r2, #29
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	4662      	mov	r2, ip
 8001fb2:	08d4      	lsrs	r4, r2, #3
 8001fb4:	001a      	movs	r2, r3
 8001fb6:	4322      	orrs	r2, r4
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x31c>
 8001fba:	e1fc      	b.n	80023b6 <__aeabi_dsub+0x716>
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	0312      	lsls	r2, r2, #12
 8001fc0:	4314      	orrs	r4, r2
 8001fc2:	0324      	lsls	r4, r4, #12
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <__aeabi_dsub+0x358>)
 8001fc6:	0b24      	lsrs	r4, r4, #12
 8001fc8:	e70d      	b.n	8001de6 <__aeabi_dsub+0x146>
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f000 faec 	bl	80025a8 <__clzsi2>
 8001fd0:	0001      	movs	r1, r0
 8001fd2:	3118      	adds	r1, #24
 8001fd4:	291f      	cmp	r1, #31
 8001fd6:	dc00      	bgt.n	8001fda <__aeabi_dsub+0x33a>
 8001fd8:	e6c4      	b.n	8001d64 <__aeabi_dsub+0xc4>
 8001fda:	3808      	subs	r0, #8
 8001fdc:	4084      	lsls	r4, r0
 8001fde:	4643      	mov	r3, r8
 8001fe0:	0020      	movs	r0, r4
 8001fe2:	2400      	movs	r4, #0
 8001fe4:	4588      	cmp	r8, r1
 8001fe6:	dc00      	bgt.n	8001fea <__aeabi_dsub+0x34a>
 8001fe8:	e6c8      	b.n	8001d7c <__aeabi_dsub+0xdc>
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__aeabi_dsub+0x35c>)
 8001fec:	1a5b      	subs	r3, r3, r1
 8001fee:	4010      	ands	r0, r2
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	4681      	mov	r9, r0
 8001ff4:	e6d6      	b.n	8001da4 <__aeabi_dsub+0x104>
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	000007ff 	.word	0x000007ff
 8001ffc:	ff7fffff 	.word	0xff7fffff
 8002000:	fffff801 	.word	0xfffff801
 8002004:	000007fe 	.word	0x000007fe
 8002008:	430f      	orrs	r7, r1
 800200a:	1e7a      	subs	r2, r7, #1
 800200c:	4197      	sbcs	r7, r2
 800200e:	e691      	b.n	8001d34 <__aeabi_dsub+0x94>
 8002010:	4661      	mov	r1, ip
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	0749      	lsls	r1, r1, #29
 8002016:	430b      	orrs	r3, r1
 8002018:	4661      	mov	r1, ip
 800201a:	08cc      	lsrs	r4, r1, #3
 800201c:	e7b8      	b.n	8001f90 <__aeabi_dsub+0x2f0>
 800201e:	4640      	mov	r0, r8
 8002020:	4cd3      	ldr	r4, [pc, #844]	; (8002370 <__aeabi_dsub+0x6d0>)
 8002022:	3001      	adds	r0, #1
 8002024:	4220      	tst	r0, r4
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x38a>
 8002028:	e0a2      	b.n	8002170 <__aeabi_dsub+0x4d0>
 800202a:	4640      	mov	r0, r8
 800202c:	2800      	cmp	r0, #0
 800202e:	d000      	beq.n	8002032 <__aeabi_dsub+0x392>
 8002030:	e101      	b.n	8002236 <__aeabi_dsub+0x596>
 8002032:	4660      	mov	r0, ip
 8002034:	4318      	orrs	r0, r3
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x39a>
 8002038:	e15e      	b.n	80022f8 <__aeabi_dsub+0x658>
 800203a:	0008      	movs	r0, r1
 800203c:	4338      	orrs	r0, r7
 800203e:	d000      	beq.n	8002042 <__aeabi_dsub+0x3a2>
 8002040:	e15f      	b.n	8002302 <__aeabi_dsub+0x662>
 8002042:	4661      	mov	r1, ip
 8002044:	08db      	lsrs	r3, r3, #3
 8002046:	0749      	lsls	r1, r1, #29
 8002048:	430b      	orrs	r3, r1
 800204a:	4661      	mov	r1, ip
 800204c:	08cc      	lsrs	r4, r1, #3
 800204e:	e7a2      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8002050:	4dc8      	ldr	r5, [pc, #800]	; (8002374 <__aeabi_dsub+0x6d4>)
 8002052:	42a8      	cmp	r0, r5
 8002054:	d100      	bne.n	8002058 <__aeabi_dsub+0x3b8>
 8002056:	e0cf      	b.n	80021f8 <__aeabi_dsub+0x558>
 8002058:	2580      	movs	r5, #128	; 0x80
 800205a:	4664      	mov	r4, ip
 800205c:	042d      	lsls	r5, r5, #16
 800205e:	432c      	orrs	r4, r5
 8002060:	46a4      	mov	ip, r4
 8002062:	2a38      	cmp	r2, #56	; 0x38
 8002064:	dc56      	bgt.n	8002114 <__aeabi_dsub+0x474>
 8002066:	2a1f      	cmp	r2, #31
 8002068:	dd00      	ble.n	800206c <__aeabi_dsub+0x3cc>
 800206a:	e0d1      	b.n	8002210 <__aeabi_dsub+0x570>
 800206c:	2520      	movs	r5, #32
 800206e:	001e      	movs	r6, r3
 8002070:	1aad      	subs	r5, r5, r2
 8002072:	4664      	mov	r4, ip
 8002074:	40ab      	lsls	r3, r5
 8002076:	40ac      	lsls	r4, r5
 8002078:	40d6      	lsrs	r6, r2
 800207a:	1e5d      	subs	r5, r3, #1
 800207c:	41ab      	sbcs	r3, r5
 800207e:	4334      	orrs	r4, r6
 8002080:	4323      	orrs	r3, r4
 8002082:	4664      	mov	r4, ip
 8002084:	40d4      	lsrs	r4, r2
 8002086:	1b09      	subs	r1, r1, r4
 8002088:	e049      	b.n	800211e <__aeabi_dsub+0x47e>
 800208a:	4660      	mov	r0, ip
 800208c:	1bdc      	subs	r4, r3, r7
 800208e:	1a46      	subs	r6, r0, r1
 8002090:	42a3      	cmp	r3, r4
 8002092:	4180      	sbcs	r0, r0
 8002094:	4240      	negs	r0, r0
 8002096:	4681      	mov	r9, r0
 8002098:	0030      	movs	r0, r6
 800209a:	464e      	mov	r6, r9
 800209c:	1b80      	subs	r0, r0, r6
 800209e:	4681      	mov	r9, r0
 80020a0:	0200      	lsls	r0, r0, #8
 80020a2:	d476      	bmi.n	8002192 <__aeabi_dsub+0x4f2>
 80020a4:	464b      	mov	r3, r9
 80020a6:	4323      	orrs	r3, r4
 80020a8:	d000      	beq.n	80020ac <__aeabi_dsub+0x40c>
 80020aa:	e652      	b.n	8001d52 <__aeabi_dsub+0xb2>
 80020ac:	2400      	movs	r4, #0
 80020ae:	2500      	movs	r5, #0
 80020b0:	e771      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 80020b2:	4339      	orrs	r1, r7
 80020b4:	000c      	movs	r4, r1
 80020b6:	1e62      	subs	r2, r4, #1
 80020b8:	4194      	sbcs	r4, r2
 80020ba:	18e4      	adds	r4, r4, r3
 80020bc:	429c      	cmp	r4, r3
 80020be:	419b      	sbcs	r3, r3
 80020c0:	425b      	negs	r3, r3
 80020c2:	4463      	add	r3, ip
 80020c4:	4699      	mov	r9, r3
 80020c6:	464b      	mov	r3, r9
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	d400      	bmi.n	80020ce <__aeabi_dsub+0x42e>
 80020cc:	e756      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 80020ce:	2301      	movs	r3, #1
 80020d0:	469c      	mov	ip, r3
 80020d2:	4ba8      	ldr	r3, [pc, #672]	; (8002374 <__aeabi_dsub+0x6d4>)
 80020d4:	44e0      	add	r8, ip
 80020d6:	4598      	cmp	r8, r3
 80020d8:	d038      	beq.n	800214c <__aeabi_dsub+0x4ac>
 80020da:	464b      	mov	r3, r9
 80020dc:	48a6      	ldr	r0, [pc, #664]	; (8002378 <__aeabi_dsub+0x6d8>)
 80020de:	2201      	movs	r2, #1
 80020e0:	4003      	ands	r3, r0
 80020e2:	0018      	movs	r0, r3
 80020e4:	0863      	lsrs	r3, r4, #1
 80020e6:	4014      	ands	r4, r2
 80020e8:	431c      	orrs	r4, r3
 80020ea:	07c3      	lsls	r3, r0, #31
 80020ec:	431c      	orrs	r4, r3
 80020ee:	0843      	lsrs	r3, r0, #1
 80020f0:	4699      	mov	r9, r3
 80020f2:	e657      	b.n	8001da4 <__aeabi_dsub+0x104>
 80020f4:	0010      	movs	r0, r2
 80020f6:	000e      	movs	r6, r1
 80020f8:	3820      	subs	r0, #32
 80020fa:	40c6      	lsrs	r6, r0
 80020fc:	2a20      	cmp	r2, #32
 80020fe:	d004      	beq.n	800210a <__aeabi_dsub+0x46a>
 8002100:	2040      	movs	r0, #64	; 0x40
 8002102:	1a82      	subs	r2, r0, r2
 8002104:	4091      	lsls	r1, r2
 8002106:	430f      	orrs	r7, r1
 8002108:	46b9      	mov	r9, r7
 800210a:	464f      	mov	r7, r9
 800210c:	1e7a      	subs	r2, r7, #1
 800210e:	4197      	sbcs	r7, r2
 8002110:	4337      	orrs	r7, r6
 8002112:	e60f      	b.n	8001d34 <__aeabi_dsub+0x94>
 8002114:	4662      	mov	r2, ip
 8002116:	431a      	orrs	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	4193      	sbcs	r3, r2
 800211e:	1afc      	subs	r4, r7, r3
 8002120:	42a7      	cmp	r7, r4
 8002122:	41bf      	sbcs	r7, r7
 8002124:	427f      	negs	r7, r7
 8002126:	1bcb      	subs	r3, r1, r7
 8002128:	4699      	mov	r9, r3
 800212a:	465d      	mov	r5, fp
 800212c:	4680      	mov	r8, r0
 800212e:	e608      	b.n	8001d42 <__aeabi_dsub+0xa2>
 8002130:	4666      	mov	r6, ip
 8002132:	431e      	orrs	r6, r3
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x498>
 8002136:	e0be      	b.n	80022b6 <__aeabi_dsub+0x616>
 8002138:	1e56      	subs	r6, r2, #1
 800213a:	2a01      	cmp	r2, #1
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x4a0>
 800213e:	e109      	b.n	8002354 <__aeabi_dsub+0x6b4>
 8002140:	4c8c      	ldr	r4, [pc, #560]	; (8002374 <__aeabi_dsub+0x6d4>)
 8002142:	42a2      	cmp	r2, r4
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x4a8>
 8002146:	e119      	b.n	800237c <__aeabi_dsub+0x6dc>
 8002148:	0032      	movs	r2, r6
 800214a:	e6c1      	b.n	8001ed0 <__aeabi_dsub+0x230>
 800214c:	4642      	mov	r2, r8
 800214e:	2400      	movs	r4, #0
 8002150:	2300      	movs	r3, #0
 8002152:	e648      	b.n	8001de6 <__aeabi_dsub+0x146>
 8002154:	2020      	movs	r0, #32
 8002156:	000c      	movs	r4, r1
 8002158:	1a80      	subs	r0, r0, r2
 800215a:	003e      	movs	r6, r7
 800215c:	4087      	lsls	r7, r0
 800215e:	4084      	lsls	r4, r0
 8002160:	40d6      	lsrs	r6, r2
 8002162:	1e78      	subs	r0, r7, #1
 8002164:	4187      	sbcs	r7, r0
 8002166:	40d1      	lsrs	r1, r2
 8002168:	4334      	orrs	r4, r6
 800216a:	433c      	orrs	r4, r7
 800216c:	448c      	add	ip, r1
 800216e:	e7a4      	b.n	80020ba <__aeabi_dsub+0x41a>
 8002170:	4a80      	ldr	r2, [pc, #512]	; (8002374 <__aeabi_dsub+0x6d4>)
 8002172:	4290      	cmp	r0, r2
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x4d8>
 8002176:	e0e9      	b.n	800234c <__aeabi_dsub+0x6ac>
 8002178:	19df      	adds	r7, r3, r7
 800217a:	429f      	cmp	r7, r3
 800217c:	419b      	sbcs	r3, r3
 800217e:	4461      	add	r1, ip
 8002180:	425b      	negs	r3, r3
 8002182:	18c9      	adds	r1, r1, r3
 8002184:	07cc      	lsls	r4, r1, #31
 8002186:	087f      	lsrs	r7, r7, #1
 8002188:	084b      	lsrs	r3, r1, #1
 800218a:	4699      	mov	r9, r3
 800218c:	4680      	mov	r8, r0
 800218e:	433c      	orrs	r4, r7
 8002190:	e6f4      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8002192:	1afc      	subs	r4, r7, r3
 8002194:	42a7      	cmp	r7, r4
 8002196:	41bf      	sbcs	r7, r7
 8002198:	4663      	mov	r3, ip
 800219a:	427f      	negs	r7, r7
 800219c:	1ac9      	subs	r1, r1, r3
 800219e:	1bcb      	subs	r3, r1, r7
 80021a0:	4699      	mov	r9, r3
 80021a2:	465d      	mov	r5, fp
 80021a4:	e5d5      	b.n	8001d52 <__aeabi_dsub+0xb2>
 80021a6:	08ff      	lsrs	r7, r7, #3
 80021a8:	074b      	lsls	r3, r1, #29
 80021aa:	465d      	mov	r5, fp
 80021ac:	433b      	orrs	r3, r7
 80021ae:	08cc      	lsrs	r4, r1, #3
 80021b0:	e6ee      	b.n	8001f90 <__aeabi_dsub+0x2f0>
 80021b2:	4662      	mov	r2, ip
 80021b4:	431a      	orrs	r2, r3
 80021b6:	d000      	beq.n	80021ba <__aeabi_dsub+0x51a>
 80021b8:	e082      	b.n	80022c0 <__aeabi_dsub+0x620>
 80021ba:	000b      	movs	r3, r1
 80021bc:	433b      	orrs	r3, r7
 80021be:	d11b      	bne.n	80021f8 <__aeabi_dsub+0x558>
 80021c0:	2480      	movs	r4, #128	; 0x80
 80021c2:	2500      	movs	r5, #0
 80021c4:	0324      	lsls	r4, r4, #12
 80021c6:	e6f9      	b.n	8001fbc <__aeabi_dsub+0x31c>
 80021c8:	19dc      	adds	r4, r3, r7
 80021ca:	429c      	cmp	r4, r3
 80021cc:	419b      	sbcs	r3, r3
 80021ce:	4461      	add	r1, ip
 80021d0:	4689      	mov	r9, r1
 80021d2:	425b      	negs	r3, r3
 80021d4:	4499      	add	r9, r3
 80021d6:	464b      	mov	r3, r9
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	d444      	bmi.n	8002266 <__aeabi_dsub+0x5c6>
 80021dc:	2301      	movs	r3, #1
 80021de:	4698      	mov	r8, r3
 80021e0:	e6cc      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 80021e2:	1bdc      	subs	r4, r3, r7
 80021e4:	4662      	mov	r2, ip
 80021e6:	42a3      	cmp	r3, r4
 80021e8:	419b      	sbcs	r3, r3
 80021ea:	1a51      	subs	r1, r2, r1
 80021ec:	425b      	negs	r3, r3
 80021ee:	1acb      	subs	r3, r1, r3
 80021f0:	4699      	mov	r9, r3
 80021f2:	2301      	movs	r3, #1
 80021f4:	4698      	mov	r8, r3
 80021f6:	e5a4      	b.n	8001d42 <__aeabi_dsub+0xa2>
 80021f8:	08ff      	lsrs	r7, r7, #3
 80021fa:	074b      	lsls	r3, r1, #29
 80021fc:	465d      	mov	r5, fp
 80021fe:	433b      	orrs	r3, r7
 8002200:	08cc      	lsrs	r4, r1, #3
 8002202:	e6d7      	b.n	8001fb4 <__aeabi_dsub+0x314>
 8002204:	4662      	mov	r2, ip
 8002206:	431a      	orrs	r2, r3
 8002208:	0014      	movs	r4, r2
 800220a:	1e63      	subs	r3, r4, #1
 800220c:	419c      	sbcs	r4, r3
 800220e:	e679      	b.n	8001f04 <__aeabi_dsub+0x264>
 8002210:	0015      	movs	r5, r2
 8002212:	4664      	mov	r4, ip
 8002214:	3d20      	subs	r5, #32
 8002216:	40ec      	lsrs	r4, r5
 8002218:	46a0      	mov	r8, r4
 800221a:	2a20      	cmp	r2, #32
 800221c:	d005      	beq.n	800222a <__aeabi_dsub+0x58a>
 800221e:	2540      	movs	r5, #64	; 0x40
 8002220:	4664      	mov	r4, ip
 8002222:	1aaa      	subs	r2, r5, r2
 8002224:	4094      	lsls	r4, r2
 8002226:	4323      	orrs	r3, r4
 8002228:	469a      	mov	sl, r3
 800222a:	4654      	mov	r4, sl
 800222c:	1e63      	subs	r3, r4, #1
 800222e:	419c      	sbcs	r4, r3
 8002230:	4643      	mov	r3, r8
 8002232:	4323      	orrs	r3, r4
 8002234:	e773      	b.n	800211e <__aeabi_dsub+0x47e>
 8002236:	4662      	mov	r2, ip
 8002238:	431a      	orrs	r2, r3
 800223a:	d023      	beq.n	8002284 <__aeabi_dsub+0x5e4>
 800223c:	000a      	movs	r2, r1
 800223e:	433a      	orrs	r2, r7
 8002240:	d000      	beq.n	8002244 <__aeabi_dsub+0x5a4>
 8002242:	e0a0      	b.n	8002386 <__aeabi_dsub+0x6e6>
 8002244:	4662      	mov	r2, ip
 8002246:	08db      	lsrs	r3, r3, #3
 8002248:	0752      	lsls	r2, r2, #29
 800224a:	4313      	orrs	r3, r2
 800224c:	4662      	mov	r2, ip
 800224e:	08d4      	lsrs	r4, r2, #3
 8002250:	e6b0      	b.n	8001fb4 <__aeabi_dsub+0x314>
 8002252:	000b      	movs	r3, r1
 8002254:	433b      	orrs	r3, r7
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x5ba>
 8002258:	e728      	b.n	80020ac <__aeabi_dsub+0x40c>
 800225a:	08ff      	lsrs	r7, r7, #3
 800225c:	074b      	lsls	r3, r1, #29
 800225e:	465d      	mov	r5, fp
 8002260:	433b      	orrs	r3, r7
 8002262:	08cc      	lsrs	r4, r1, #3
 8002264:	e697      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8002266:	2302      	movs	r3, #2
 8002268:	4698      	mov	r8, r3
 800226a:	e736      	b.n	80020da <__aeabi_dsub+0x43a>
 800226c:	1afc      	subs	r4, r7, r3
 800226e:	42a7      	cmp	r7, r4
 8002270:	41bf      	sbcs	r7, r7
 8002272:	4663      	mov	r3, ip
 8002274:	427f      	negs	r7, r7
 8002276:	1ac9      	subs	r1, r1, r3
 8002278:	1bcb      	subs	r3, r1, r7
 800227a:	4699      	mov	r9, r3
 800227c:	2301      	movs	r3, #1
 800227e:	465d      	mov	r5, fp
 8002280:	4698      	mov	r8, r3
 8002282:	e55e      	b.n	8001d42 <__aeabi_dsub+0xa2>
 8002284:	074b      	lsls	r3, r1, #29
 8002286:	08ff      	lsrs	r7, r7, #3
 8002288:	433b      	orrs	r3, r7
 800228a:	08cc      	lsrs	r4, r1, #3
 800228c:	e692      	b.n	8001fb4 <__aeabi_dsub+0x314>
 800228e:	1bdc      	subs	r4, r3, r7
 8002290:	4660      	mov	r0, ip
 8002292:	42a3      	cmp	r3, r4
 8002294:	41b6      	sbcs	r6, r6
 8002296:	1a40      	subs	r0, r0, r1
 8002298:	4276      	negs	r6, r6
 800229a:	1b80      	subs	r0, r0, r6
 800229c:	4681      	mov	r9, r0
 800229e:	0200      	lsls	r0, r0, #8
 80022a0:	d560      	bpl.n	8002364 <__aeabi_dsub+0x6c4>
 80022a2:	1afc      	subs	r4, r7, r3
 80022a4:	42a7      	cmp	r7, r4
 80022a6:	41bf      	sbcs	r7, r7
 80022a8:	4663      	mov	r3, ip
 80022aa:	427f      	negs	r7, r7
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	1bcb      	subs	r3, r1, r7
 80022b0:	4699      	mov	r9, r3
 80022b2:	465d      	mov	r5, fp
 80022b4:	e576      	b.n	8001da4 <__aeabi_dsub+0x104>
 80022b6:	08ff      	lsrs	r7, r7, #3
 80022b8:	074b      	lsls	r3, r1, #29
 80022ba:	433b      	orrs	r3, r7
 80022bc:	08cc      	lsrs	r4, r1, #3
 80022be:	e667      	b.n	8001f90 <__aeabi_dsub+0x2f0>
 80022c0:	000a      	movs	r2, r1
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	433a      	orrs	r2, r7
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x62a>
 80022c8:	e66f      	b.n	8001faa <__aeabi_dsub+0x30a>
 80022ca:	4662      	mov	r2, ip
 80022cc:	0752      	lsls	r2, r2, #29
 80022ce:	4313      	orrs	r3, r2
 80022d0:	4662      	mov	r2, ip
 80022d2:	08d4      	lsrs	r4, r2, #3
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	0312      	lsls	r2, r2, #12
 80022d8:	4214      	tst	r4, r2
 80022da:	d007      	beq.n	80022ec <__aeabi_dsub+0x64c>
 80022dc:	08c8      	lsrs	r0, r1, #3
 80022de:	4210      	tst	r0, r2
 80022e0:	d104      	bne.n	80022ec <__aeabi_dsub+0x64c>
 80022e2:	465d      	mov	r5, fp
 80022e4:	0004      	movs	r4, r0
 80022e6:	08fb      	lsrs	r3, r7, #3
 80022e8:	0749      	lsls	r1, r1, #29
 80022ea:	430b      	orrs	r3, r1
 80022ec:	0f5a      	lsrs	r2, r3, #29
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	0752      	lsls	r2, r2, #29
 80022f4:	4313      	orrs	r3, r2
 80022f6:	e65d      	b.n	8001fb4 <__aeabi_dsub+0x314>
 80022f8:	074b      	lsls	r3, r1, #29
 80022fa:	08ff      	lsrs	r7, r7, #3
 80022fc:	433b      	orrs	r3, r7
 80022fe:	08cc      	lsrs	r4, r1, #3
 8002300:	e649      	b.n	8001f96 <__aeabi_dsub+0x2f6>
 8002302:	19dc      	adds	r4, r3, r7
 8002304:	429c      	cmp	r4, r3
 8002306:	419b      	sbcs	r3, r3
 8002308:	4461      	add	r1, ip
 800230a:	4689      	mov	r9, r1
 800230c:	425b      	negs	r3, r3
 800230e:	4499      	add	r9, r3
 8002310:	464b      	mov	r3, r9
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	d400      	bmi.n	8002318 <__aeabi_dsub+0x678>
 8002316:	e631      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8002318:	464a      	mov	r2, r9
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <__aeabi_dsub+0x6d8>)
 800231c:	401a      	ands	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	4691      	mov	r9, r2
 8002322:	4698      	mov	r8, r3
 8002324:	e62a      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 8002326:	0016      	movs	r6, r2
 8002328:	4664      	mov	r4, ip
 800232a:	3e20      	subs	r6, #32
 800232c:	40f4      	lsrs	r4, r6
 800232e:	46a0      	mov	r8, r4
 8002330:	2a20      	cmp	r2, #32
 8002332:	d005      	beq.n	8002340 <__aeabi_dsub+0x6a0>
 8002334:	2640      	movs	r6, #64	; 0x40
 8002336:	4664      	mov	r4, ip
 8002338:	1ab2      	subs	r2, r6, r2
 800233a:	4094      	lsls	r4, r2
 800233c:	4323      	orrs	r3, r4
 800233e:	469a      	mov	sl, r3
 8002340:	4654      	mov	r4, sl
 8002342:	1e63      	subs	r3, r4, #1
 8002344:	419c      	sbcs	r4, r3
 8002346:	4643      	mov	r3, r8
 8002348:	431c      	orrs	r4, r3
 800234a:	e5db      	b.n	8001f04 <__aeabi_dsub+0x264>
 800234c:	0002      	movs	r2, r0
 800234e:	2400      	movs	r4, #0
 8002350:	2300      	movs	r3, #0
 8002352:	e548      	b.n	8001de6 <__aeabi_dsub+0x146>
 8002354:	19dc      	adds	r4, r3, r7
 8002356:	42bc      	cmp	r4, r7
 8002358:	41bf      	sbcs	r7, r7
 800235a:	4461      	add	r1, ip
 800235c:	4689      	mov	r9, r1
 800235e:	427f      	negs	r7, r7
 8002360:	44b9      	add	r9, r7
 8002362:	e738      	b.n	80021d6 <__aeabi_dsub+0x536>
 8002364:	464b      	mov	r3, r9
 8002366:	4323      	orrs	r3, r4
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x6cc>
 800236a:	e69f      	b.n	80020ac <__aeabi_dsub+0x40c>
 800236c:	e606      	b.n	8001f7c <__aeabi_dsub+0x2dc>
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	000007fe 	.word	0x000007fe
 8002374:	000007ff 	.word	0x000007ff
 8002378:	ff7fffff 	.word	0xff7fffff
 800237c:	08ff      	lsrs	r7, r7, #3
 800237e:	074b      	lsls	r3, r1, #29
 8002380:	433b      	orrs	r3, r7
 8002382:	08cc      	lsrs	r4, r1, #3
 8002384:	e616      	b.n	8001fb4 <__aeabi_dsub+0x314>
 8002386:	4662      	mov	r2, ip
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	0752      	lsls	r2, r2, #29
 800238c:	4313      	orrs	r3, r2
 800238e:	4662      	mov	r2, ip
 8002390:	08d4      	lsrs	r4, r2, #3
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	0312      	lsls	r2, r2, #12
 8002396:	4214      	tst	r4, r2
 8002398:	d007      	beq.n	80023aa <__aeabi_dsub+0x70a>
 800239a:	08c8      	lsrs	r0, r1, #3
 800239c:	4210      	tst	r0, r2
 800239e:	d104      	bne.n	80023aa <__aeabi_dsub+0x70a>
 80023a0:	465d      	mov	r5, fp
 80023a2:	0004      	movs	r4, r0
 80023a4:	08fb      	lsrs	r3, r7, #3
 80023a6:	0749      	lsls	r1, r1, #29
 80023a8:	430b      	orrs	r3, r1
 80023aa:	0f5a      	lsrs	r2, r3, #29
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	0752      	lsls	r2, r2, #29
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	4313      	orrs	r3, r2
 80023b4:	e5fe      	b.n	8001fb4 <__aeabi_dsub+0x314>
 80023b6:	2300      	movs	r3, #0
 80023b8:	4a01      	ldr	r2, [pc, #4]	; (80023c0 <__aeabi_dsub+0x720>)
 80023ba:	001c      	movs	r4, r3
 80023bc:	e513      	b.n	8001de6 <__aeabi_dsub+0x146>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	000007ff 	.word	0x000007ff

080023c4 <__aeabi_dcmpun>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	0005      	movs	r5, r0
 80023c8:	480c      	ldr	r0, [pc, #48]	; (80023fc <__aeabi_dcmpun+0x38>)
 80023ca:	031c      	lsls	r4, r3, #12
 80023cc:	0016      	movs	r6, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	030a      	lsls	r2, r1, #12
 80023d2:	0049      	lsls	r1, r1, #1
 80023d4:	0b12      	lsrs	r2, r2, #12
 80023d6:	0d49      	lsrs	r1, r1, #21
 80023d8:	0b24      	lsrs	r4, r4, #12
 80023da:	0d5b      	lsrs	r3, r3, #21
 80023dc:	4281      	cmp	r1, r0
 80023de:	d008      	beq.n	80023f2 <__aeabi_dcmpun+0x2e>
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <__aeabi_dcmpun+0x38>)
 80023e2:	2000      	movs	r0, #0
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d103      	bne.n	80023f0 <__aeabi_dcmpun+0x2c>
 80023e8:	0020      	movs	r0, r4
 80023ea:	4330      	orrs	r0, r6
 80023ec:	1e43      	subs	r3, r0, #1
 80023ee:	4198      	sbcs	r0, r3
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	2001      	movs	r0, #1
 80023f4:	432a      	orrs	r2, r5
 80023f6:	d1fb      	bne.n	80023f0 <__aeabi_dcmpun+0x2c>
 80023f8:	e7f2      	b.n	80023e0 <__aeabi_dcmpun+0x1c>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	000007ff 	.word	0x000007ff

08002400 <__aeabi_d2iz>:
 8002400:	000a      	movs	r2, r1
 8002402:	b530      	push	{r4, r5, lr}
 8002404:	4c13      	ldr	r4, [pc, #76]	; (8002454 <__aeabi_d2iz+0x54>)
 8002406:	0053      	lsls	r3, r2, #1
 8002408:	0309      	lsls	r1, r1, #12
 800240a:	0005      	movs	r5, r0
 800240c:	0b09      	lsrs	r1, r1, #12
 800240e:	2000      	movs	r0, #0
 8002410:	0d5b      	lsrs	r3, r3, #21
 8002412:	0fd2      	lsrs	r2, r2, #31
 8002414:	42a3      	cmp	r3, r4
 8002416:	dd04      	ble.n	8002422 <__aeabi_d2iz+0x22>
 8002418:	480f      	ldr	r0, [pc, #60]	; (8002458 <__aeabi_d2iz+0x58>)
 800241a:	4283      	cmp	r3, r0
 800241c:	dd02      	ble.n	8002424 <__aeabi_d2iz+0x24>
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <__aeabi_d2iz+0x5c>)
 8002420:	18d0      	adds	r0, r2, r3
 8002422:	bd30      	pop	{r4, r5, pc}
 8002424:	2080      	movs	r0, #128	; 0x80
 8002426:	0340      	lsls	r0, r0, #13
 8002428:	4301      	orrs	r1, r0
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <__aeabi_d2iz+0x60>)
 800242c:	1ac0      	subs	r0, r0, r3
 800242e:	281f      	cmp	r0, #31
 8002430:	dd08      	ble.n	8002444 <__aeabi_d2iz+0x44>
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <__aeabi_d2iz+0x64>)
 8002434:	1ac3      	subs	r3, r0, r3
 8002436:	40d9      	lsrs	r1, r3
 8002438:	000b      	movs	r3, r1
 800243a:	4258      	negs	r0, r3
 800243c:	2a00      	cmp	r2, #0
 800243e:	d1f0      	bne.n	8002422 <__aeabi_d2iz+0x22>
 8002440:	0018      	movs	r0, r3
 8002442:	e7ee      	b.n	8002422 <__aeabi_d2iz+0x22>
 8002444:	4c08      	ldr	r4, [pc, #32]	; (8002468 <__aeabi_d2iz+0x68>)
 8002446:	40c5      	lsrs	r5, r0
 8002448:	46a4      	mov	ip, r4
 800244a:	4463      	add	r3, ip
 800244c:	4099      	lsls	r1, r3
 800244e:	000b      	movs	r3, r1
 8002450:	432b      	orrs	r3, r5
 8002452:	e7f2      	b.n	800243a <__aeabi_d2iz+0x3a>
 8002454:	000003fe 	.word	0x000003fe
 8002458:	0000041d 	.word	0x0000041d
 800245c:	7fffffff 	.word	0x7fffffff
 8002460:	00000433 	.word	0x00000433
 8002464:	00000413 	.word	0x00000413
 8002468:	fffffbed 	.word	0xfffffbed

0800246c <__aeabi_i2d>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	2800      	cmp	r0, #0
 8002470:	d016      	beq.n	80024a0 <__aeabi_i2d+0x34>
 8002472:	17c3      	asrs	r3, r0, #31
 8002474:	18c5      	adds	r5, r0, r3
 8002476:	405d      	eors	r5, r3
 8002478:	0fc4      	lsrs	r4, r0, #31
 800247a:	0028      	movs	r0, r5
 800247c:	f000 f894 	bl	80025a8 <__clzsi2>
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <__aeabi_i2d+0x5c>)
 8002482:	1a12      	subs	r2, r2, r0
 8002484:	280a      	cmp	r0, #10
 8002486:	dc16      	bgt.n	80024b6 <__aeabi_i2d+0x4a>
 8002488:	0003      	movs	r3, r0
 800248a:	002e      	movs	r6, r5
 800248c:	3315      	adds	r3, #21
 800248e:	409e      	lsls	r6, r3
 8002490:	230b      	movs	r3, #11
 8002492:	1a18      	subs	r0, r3, r0
 8002494:	40c5      	lsrs	r5, r0
 8002496:	0552      	lsls	r2, r2, #21
 8002498:	032d      	lsls	r5, r5, #12
 800249a:	0b2d      	lsrs	r5, r5, #12
 800249c:	0d53      	lsrs	r3, r2, #21
 800249e:	e003      	b.n	80024a8 <__aeabi_i2d+0x3c>
 80024a0:	2400      	movs	r4, #0
 80024a2:	2300      	movs	r3, #0
 80024a4:	2500      	movs	r5, #0
 80024a6:	2600      	movs	r6, #0
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	432b      	orrs	r3, r5
 80024ac:	07e4      	lsls	r4, r4, #31
 80024ae:	4323      	orrs	r3, r4
 80024b0:	0030      	movs	r0, r6
 80024b2:	0019      	movs	r1, r3
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
 80024b6:	380b      	subs	r0, #11
 80024b8:	4085      	lsls	r5, r0
 80024ba:	0552      	lsls	r2, r2, #21
 80024bc:	032d      	lsls	r5, r5, #12
 80024be:	2600      	movs	r6, #0
 80024c0:	0b2d      	lsrs	r5, r5, #12
 80024c2:	0d53      	lsrs	r3, r2, #21
 80024c4:	e7f0      	b.n	80024a8 <__aeabi_i2d+0x3c>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	0000041e 	.word	0x0000041e

080024cc <__aeabi_ui2d>:
 80024cc:	b510      	push	{r4, lr}
 80024ce:	1e04      	subs	r4, r0, #0
 80024d0:	d010      	beq.n	80024f4 <__aeabi_ui2d+0x28>
 80024d2:	f000 f869 	bl	80025a8 <__clzsi2>
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <__aeabi_ui2d+0x48>)
 80024d8:	1a1b      	subs	r3, r3, r0
 80024da:	280a      	cmp	r0, #10
 80024dc:	dc11      	bgt.n	8002502 <__aeabi_ui2d+0x36>
 80024de:	220b      	movs	r2, #11
 80024e0:	0021      	movs	r1, r4
 80024e2:	1a12      	subs	r2, r2, r0
 80024e4:	40d1      	lsrs	r1, r2
 80024e6:	3015      	adds	r0, #21
 80024e8:	030a      	lsls	r2, r1, #12
 80024ea:	055b      	lsls	r3, r3, #21
 80024ec:	4084      	lsls	r4, r0
 80024ee:	0b12      	lsrs	r2, r2, #12
 80024f0:	0d5b      	lsrs	r3, r3, #21
 80024f2:	e001      	b.n	80024f8 <__aeabi_ui2d+0x2c>
 80024f4:	2300      	movs	r3, #0
 80024f6:	2200      	movs	r2, #0
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	4313      	orrs	r3, r2
 80024fc:	0020      	movs	r0, r4
 80024fe:	0019      	movs	r1, r3
 8002500:	bd10      	pop	{r4, pc}
 8002502:	0022      	movs	r2, r4
 8002504:	380b      	subs	r0, #11
 8002506:	4082      	lsls	r2, r0
 8002508:	055b      	lsls	r3, r3, #21
 800250a:	0312      	lsls	r2, r2, #12
 800250c:	2400      	movs	r4, #0
 800250e:	0b12      	lsrs	r2, r2, #12
 8002510:	0d5b      	lsrs	r3, r3, #21
 8002512:	e7f1      	b.n	80024f8 <__aeabi_ui2d+0x2c>
 8002514:	0000041e 	.word	0x0000041e

08002518 <__aeabi_f2d>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	0043      	lsls	r3, r0, #1
 800251c:	0246      	lsls	r6, r0, #9
 800251e:	0fc4      	lsrs	r4, r0, #31
 8002520:	20fe      	movs	r0, #254	; 0xfe
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	1c59      	adds	r1, r3, #1
 8002526:	0a75      	lsrs	r5, r6, #9
 8002528:	4208      	tst	r0, r1
 800252a:	d00c      	beq.n	8002546 <__aeabi_f2d+0x2e>
 800252c:	22e0      	movs	r2, #224	; 0xe0
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4694      	mov	ip, r2
 8002532:	076d      	lsls	r5, r5, #29
 8002534:	0b36      	lsrs	r6, r6, #12
 8002536:	4463      	add	r3, ip
 8002538:	051b      	lsls	r3, r3, #20
 800253a:	4333      	orrs	r3, r6
 800253c:	07e4      	lsls	r4, r4, #31
 800253e:	4323      	orrs	r3, r4
 8002540:	0028      	movs	r0, r5
 8002542:	0019      	movs	r1, r3
 8002544:	bd70      	pop	{r4, r5, r6, pc}
 8002546:	2b00      	cmp	r3, #0
 8002548:	d114      	bne.n	8002574 <__aeabi_f2d+0x5c>
 800254a:	2d00      	cmp	r5, #0
 800254c:	d01b      	beq.n	8002586 <__aeabi_f2d+0x6e>
 800254e:	0028      	movs	r0, r5
 8002550:	f000 f82a 	bl	80025a8 <__clzsi2>
 8002554:	280a      	cmp	r0, #10
 8002556:	dc1c      	bgt.n	8002592 <__aeabi_f2d+0x7a>
 8002558:	230b      	movs	r3, #11
 800255a:	002e      	movs	r6, r5
 800255c:	1a1b      	subs	r3, r3, r0
 800255e:	40de      	lsrs	r6, r3
 8002560:	0003      	movs	r3, r0
 8002562:	3315      	adds	r3, #21
 8002564:	409d      	lsls	r5, r3
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <__aeabi_f2d+0x88>)
 8002568:	0336      	lsls	r6, r6, #12
 800256a:	1a12      	subs	r2, r2, r0
 800256c:	0552      	lsls	r2, r2, #21
 800256e:	0b36      	lsrs	r6, r6, #12
 8002570:	0d53      	lsrs	r3, r2, #21
 8002572:	e7e1      	b.n	8002538 <__aeabi_f2d+0x20>
 8002574:	2d00      	cmp	r5, #0
 8002576:	d009      	beq.n	800258c <__aeabi_f2d+0x74>
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	0b36      	lsrs	r6, r6, #12
 800257c:	0312      	lsls	r2, r2, #12
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <__aeabi_f2d+0x8c>)
 8002580:	076d      	lsls	r5, r5, #29
 8002582:	4316      	orrs	r6, r2
 8002584:	e7d8      	b.n	8002538 <__aeabi_f2d+0x20>
 8002586:	2300      	movs	r3, #0
 8002588:	2600      	movs	r6, #0
 800258a:	e7d5      	b.n	8002538 <__aeabi_f2d+0x20>
 800258c:	2600      	movs	r6, #0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <__aeabi_f2d+0x8c>)
 8002590:	e7d2      	b.n	8002538 <__aeabi_f2d+0x20>
 8002592:	0003      	movs	r3, r0
 8002594:	3b0b      	subs	r3, #11
 8002596:	409d      	lsls	r5, r3
 8002598:	002e      	movs	r6, r5
 800259a:	2500      	movs	r5, #0
 800259c:	e7e3      	b.n	8002566 <__aeabi_f2d+0x4e>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	00000389 	.word	0x00000389
 80025a4:	000007ff 	.word	0x000007ff

080025a8 <__clzsi2>:
 80025a8:	211c      	movs	r1, #28
 80025aa:	2301      	movs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	4298      	cmp	r0, r3
 80025b0:	d301      	bcc.n	80025b6 <__clzsi2+0xe>
 80025b2:	0c00      	lsrs	r0, r0, #16
 80025b4:	3910      	subs	r1, #16
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	4298      	cmp	r0, r3
 80025ba:	d301      	bcc.n	80025c0 <__clzsi2+0x18>
 80025bc:	0a00      	lsrs	r0, r0, #8
 80025be:	3908      	subs	r1, #8
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d301      	bcc.n	80025ca <__clzsi2+0x22>
 80025c6:	0900      	lsrs	r0, r0, #4
 80025c8:	3904      	subs	r1, #4
 80025ca:	a202      	add	r2, pc, #8	; (adr r2, 80025d4 <__clzsi2+0x2c>)
 80025cc:	5c10      	ldrb	r0, [r2, r0]
 80025ce:	1840      	adds	r0, r0, r1
 80025d0:	4770      	bx	lr
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	02020304 	.word	0x02020304
 80025d8:	01010101 	.word	0x01010101
	...

080025e4 <__clzdi2>:
 80025e4:	b510      	push	{r4, lr}
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d103      	bne.n	80025f2 <__clzdi2+0xe>
 80025ea:	f7ff ffdd 	bl	80025a8 <__clzsi2>
 80025ee:	3020      	adds	r0, #32
 80025f0:	e002      	b.n	80025f8 <__clzdi2+0x14>
 80025f2:	0008      	movs	r0, r1
 80025f4:	f7ff ffd8 	bl	80025a8 <__clzsi2>
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)

080025fc <lis3dh_init>:
/* Main Example --------------------------------------------------------------*/

static stmdev_ctx_t dev_ctx;

accel_state_t lis3dh_init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <lis3dh_init+0xa4>)
 8002602:	4a28      	ldr	r2, [pc, #160]	; (80026a4 <lis3dh_init+0xa8>)
 8002604:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <lis3dh_init+0xa4>)
 8002608:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <lis3dh_init+0xac>)
 800260a:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <lis3dh_init+0xa4>)
 800260e:	4a27      	ldr	r2, [pc, #156]	; (80026ac <lis3dh_init+0xb0>)
 8002610:	60da      	str	r2, [r3, #12]
  /* Check device ID */
  lis3dh_device_id_get(&dev_ctx, &whoamI);
 8002612:	4a27      	ldr	r2, [pc, #156]	; (80026b0 <lis3dh_init+0xb4>)
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <lis3dh_init+0xa4>)
 8002616:	0011      	movs	r1, r2
 8002618:	0018      	movs	r0, r3
 800261a:	f000 faf6 	bl	8002c0a <lis3dh_device_id_get>

  if (whoamI != LIS3DH_ID)
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <lis3dh_init+0xb4>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b33      	cmp	r3, #51	; 0x33
 8002624:	d014      	beq.n	8002650 <lis3dh_init+0x54>
  {
    sprintf((char *)tx_buffer, "ERROR! Accelerometer not found %d\n", whoamI);
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <lis3dh_init+0xb4>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	001a      	movs	r2, r3
 800262c:	4921      	ldr	r1, [pc, #132]	; (80026b4 <lis3dh_init+0xb8>)
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <lis3dh_init+0xbc>)
 8002630:	0018      	movs	r0, r3
 8002632:	f009 fb03 	bl	800bc3c <siprintf>
    tx_com(tx_buffer, strlen((char const *)tx_buffer));
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <lis3dh_init+0xbc>)
 8002638:	0018      	movs	r0, r3
 800263a:	f7fd fd65 	bl	8000108 <strlen>
 800263e:	0003      	movs	r3, r0
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <lis3dh_init+0xbc>)
 8002644:	0011      	movs	r1, r2
 8002646:	0018      	movs	r0, r3
 8002648:	f000 f928 	bl	800289c <tx_com>
    while (1)
    {
      return ACC_ERROR;
 800264c:	2302      	movs	r3, #2
 800264e:	e023      	b.n	8002698 <lis3dh_init+0x9c>
    }
  }

  /*  Enable Block Data Update */
  lis3dh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <lis3dh_init+0xa4>)
 8002652:	2101      	movs	r1, #1
 8002654:	0018      	movs	r0, r3
 8002656:	f000 fa57 	bl	8002b08 <lis3dh_block_data_update_set>
  /* Set Output Data Rate to 10 hz */
  lis3dh_data_rate_set(&dev_ctx, LIS3DH_ODR_10Hz);
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <lis3dh_init+0xa4>)
 800265c:	2102      	movs	r1, #2
 800265e:	0018      	movs	r0, r3
 8002660:	f000 f9f4 	bl	8002a4c <lis3dh_data_rate_set>
  /* Set full scale to 2 g */
  lis3dh_full_scale_set(&dev_ctx, LIS3DH_2g);
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <lis3dh_init+0xa4>)
 8002666:	2100      	movs	r1, #0
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fa1d 	bl	8002aa8 <lis3dh_full_scale_set>
  /* Set operating mode to high resolution */
  lis3dh_operating_mode_set(&dev_ctx, LIS3DH_HR_12bit);
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <lis3dh_init+0xa4>)
 8002670:	2100      	movs	r1, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f000 f981 	bl	800297a <lis3dh_operating_mode_set>
  /* Set FIFO watermark to 25 samples */
  lis3dh_fifo_watermark_set(&dev_ctx, 25);
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <lis3dh_init+0xa4>)
 800267a:	2119      	movs	r1, #25
 800267c:	0018      	movs	r0, r3
 800267e:	f000 fb06 	bl	8002c8e <lis3dh_fifo_watermark_set>
  /* Set FIFO mode to Stream mode: Accumulate samples and
   * override old data */
  lis3dh_fifo_mode_set(&dev_ctx, LIS3DH_DYNAMIC_STREAM_MODE);
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <lis3dh_init+0xa4>)
 8002684:	2102      	movs	r1, #2
 8002686:	0018      	movs	r0, r3
 8002688:	f000 fb31 	bl	8002cee <lis3dh_fifo_mode_set>
  /* Enable FIFO */
  lis3dh_fifo_set(&dev_ctx, PROPERTY_ENABLE);
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <lis3dh_init+0xa4>)
 800268e:	2101      	movs	r1, #1
 8002690:	0018      	movs	r0, r3
 8002692:	f000 facc 	bl	8002c2e <lis3dh_fifo_set>

  return ACC_RUNNING;
 8002696:	2301      	movs	r3, #1
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	20000600 	.word	0x20000600
 80026a4:	080027c5 	.word	0x080027c5
 80026a8:	08002829 	.word	0x08002829
 80026ac:	20000610 	.word	0x20000610
 80026b0:	20000214 	.word	0x20000214
 80026b4:	0800df40 	.word	0x0800df40
 80026b8:	20000218 	.word	0x20000218

080026bc <lis3dh_is_samples_ready>:

bool lis3dh_is_samples_ready(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  uint8_t flags;
  /* Check if FIFO level over threshold */
  lis3dh_fifo_fth_flag_get(&dev_ctx, &flags);
 80026c2:	1dfa      	adds	r2, r7, #7
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <lis3dh_is_samples_ready+0x28>)
 80026c6:	0011      	movs	r1, r2
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fb59 	bl	8002d80 <lis3dh_fifo_fth_flag_get>

  if (flags) return true;
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <lis3dh_is_samples_ready+0x1e>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <lis3dh_is_samples_ready+0x20>
  else return false;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000600 	.word	0x20000600

080026e8 <lis3dh_read_fifo>:

void lis3dh_read_fifo(void)
{
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af04      	add	r7, sp, #16
  uint8_t num;
  /* Read number of sample in FIFO */
  lis3dh_fifo_data_level_get(&dev_ctx, &num);
 80026ee:	230f      	movs	r3, #15
 80026f0:	18fa      	adds	r2, r7, r3
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <lis3dh_read_fifo+0xc8>)
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fb27 	bl	8002d4a <lis3dh_fifo_data_level_get>

  while (num-- > 0)
 80026fc:	e04a      	b.n	8002794 <lis3dh_read_fifo+0xac>
  {
  /* Read XL samples */
  lis3dh_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80026fe:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <lis3dh_read_fifo+0xcc>)
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <lis3dh_read_fifo+0xc8>)
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fa2d 	bl	8002b64 <lis3dh_acceleration_raw_get>
  acceleration_mg[0] =
      lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <lis3dh_read_fifo+0xcc>)
 800270c:	2200      	movs	r2, #0
 800270e:	5e9b      	ldrsh	r3, [r3, r2]
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f91b 	bl	800294c <lis3dh_from_fs2_hr_to_mg>
 8002716:	1c02      	adds	r2, r0, #0
  acceleration_mg[0] =
 8002718:	4b27      	ldr	r3, [pc, #156]	; (80027b8 <lis3dh_read_fifo+0xd0>)
 800271a:	601a      	str	r2, [r3, #0]
  acceleration_mg[1] =
      lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <lis3dh_read_fifo+0xcc>)
 800271e:	2202      	movs	r2, #2
 8002720:	5e9b      	ldrsh	r3, [r3, r2]
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f912 	bl	800294c <lis3dh_from_fs2_hr_to_mg>
 8002728:	1c02      	adds	r2, r0, #0
  acceleration_mg[1] =
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <lis3dh_read_fifo+0xd0>)
 800272c:	605a      	str	r2, [r3, #4]
  acceleration_mg[2] =
      lis3dh_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 800272e:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <lis3dh_read_fifo+0xcc>)
 8002730:	2204      	movs	r2, #4
 8002732:	5e9b      	ldrsh	r3, [r3, r2]
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f909 	bl	800294c <lis3dh_from_fs2_hr_to_mg>
 800273a:	1c02      	adds	r2, r0, #0
  acceleration_mg[2] =
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <lis3dh_read_fifo+0xd0>)
 800273e:	609a      	str	r2, [r3, #8]
  sprintf((char *)tx_buffer,
          "Acceleration [mg]:%5.0f\t%5.0f\t%5.0f\r\n",
          acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <lis3dh_read_fifo+0xd0>)
 8002742:	681b      	ldr	r3, [r3, #0]
  sprintf((char *)tx_buffer,
 8002744:	1c18      	adds	r0, r3, #0
 8002746:	f7ff fee7 	bl	8002518 <__aeabi_f2d>
 800274a:	6038      	str	r0, [r7, #0]
 800274c:	6079      	str	r1, [r7, #4]
          acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <lis3dh_read_fifo+0xd0>)
 8002750:	685b      	ldr	r3, [r3, #4]
  sprintf((char *)tx_buffer,
 8002752:	1c18      	adds	r0, r3, #0
 8002754:	f7ff fee0 	bl	8002518 <__aeabi_f2d>
 8002758:	0004      	movs	r4, r0
 800275a:	000d      	movs	r5, r1
          acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <lis3dh_read_fifo+0xd0>)
 800275e:	689b      	ldr	r3, [r3, #8]
  sprintf((char *)tx_buffer,
 8002760:	1c18      	adds	r0, r3, #0
 8002762:	f7ff fed9 	bl	8002518 <__aeabi_f2d>
 8002766:	0002      	movs	r2, r0
 8002768:	000b      	movs	r3, r1
 800276a:	4914      	ldr	r1, [pc, #80]	; (80027bc <lis3dh_read_fifo+0xd4>)
 800276c:	4814      	ldr	r0, [pc, #80]	; (80027c0 <lis3dh_read_fifo+0xd8>)
 800276e:	9202      	str	r2, [sp, #8]
 8002770:	9303      	str	r3, [sp, #12]
 8002772:	9400      	str	r4, [sp, #0]
 8002774:	9501      	str	r5, [sp, #4]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f009 fa5f 	bl	800bc3c <siprintf>
  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <lis3dh_read_fifo+0xd8>)
 8002780:	0018      	movs	r0, r3
 8002782:	f7fd fcc1 	bl	8000108 <strlen>
 8002786:	0003      	movs	r3, r0
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <lis3dh_read_fifo+0xd8>)
 800278c:	0011      	movs	r1, r2
 800278e:	0018      	movs	r0, r3
 8002790:	f000 f884 	bl	800289c <tx_com>
  while (num-- > 0)
 8002794:	200f      	movs	r0, #15
 8002796:	183b      	adds	r3, r7, r0
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	b2d1      	uxtb	r1, r2
 800279e:	183a      	adds	r2, r7, r0
 80027a0:	7011      	strb	r1, [r2, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ab      	bne.n	80026fe <lis3dh_read_fifo+0x16>
  }
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bdb0      	pop	{r4, r5, r7, pc}
 80027b0:	20000600 	.word	0x20000600
 80027b4:	20000200 	.word	0x20000200
 80027b8:	20000208 	.word	0x20000208
 80027bc:	0800df64 	.word	0x0800df64
 80027c0:	20000218 	.word	0x20000218

080027c4 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	0008      	movs	r0, r1
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	0019      	movs	r1, r3
 80027d2:	240b      	movs	r4, #11
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	1c02      	adds	r2, r0, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	2508      	movs	r5, #8
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	1c0a      	adds	r2, r1, #0
 80027e0:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <platform_write+0x60>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	2101      	movs	r1, #1
 80027e8:	0018      	movs	r0, r3
 80027ea:	f001 fb53 	bl	8003e94 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80027ee:	23fa      	movs	r3, #250	; 0xfa
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	1939      	adds	r1, r7, r4
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f002 fb62 	bl	8004ec0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, bufp, len, 1000);
 80027fc:	23fa      	movs	r3, #250	; 0xfa
 80027fe:	009c      	lsls	r4, r3, #2
 8002800:	197b      	adds	r3, r7, r5
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	0023      	movs	r3, r4
 800280a:	f002 fb59 	bl	8004ec0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <platform_write+0x60>)
 8002810:	2201      	movs	r2, #1
 8002812:	2101      	movs	r1, #1
 8002814:	0018      	movs	r0, r3
 8002816:	f001 fb3d 	bl	8003e94 <HAL_GPIO_WritePin>

  return 0;
 800281a:	2300      	movs	r3, #0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bdb0      	pop	{r4, r5, r7, pc}
 8002824:	50000400 	.word	0x50000400

08002828 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	0008      	movs	r0, r1
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	0019      	movs	r1, r3
 8002836:	240b      	movs	r4, #11
 8002838:	193b      	adds	r3, r7, r4
 800283a:	1c02      	adds	r2, r0, #0
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	2508      	movs	r5, #8
 8002840:	197b      	adds	r3, r7, r5
 8002842:	1c0a      	adds	r2, r1, #0
 8002844:	801a      	strh	r2, [r3, #0]
  reg |= 0xC0;
 8002846:	193b      	adds	r3, r7, r4
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	4252      	negs	r2, r2
 800284e:	4313      	orrs	r3, r2
 8002850:	b2da      	uxtb	r2, r3
 8002852:	193b      	adds	r3, r7, r4
 8002854:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <platform_read+0x70>)
 8002858:	2200      	movs	r2, #0
 800285a:	2101      	movs	r1, #1
 800285c:	0018      	movs	r0, r3
 800285e:	f001 fb19 	bl	8003e94 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8002862:	23fa      	movs	r3, #250	; 0xfa
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	1939      	adds	r1, r7, r4
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f002 fb28 	bl	8004ec0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8002870:	23fa      	movs	r3, #250	; 0xfa
 8002872:	009c      	lsls	r4, r3, #2
 8002874:	197b      	adds	r3, r7, r5
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	0023      	movs	r3, r4
 800287e:	f002 fc77 	bl	8005170 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <platform_read+0x70>)
 8002884:	2201      	movs	r2, #1
 8002886:	2101      	movs	r1, #1
 8002888:	0018      	movs	r0, r3
 800288a:	f001 fb03 	bl	8003e94 <HAL_GPIO_WritePin>
  return 0;
 800288e:	2300      	movs	r3, #0
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bdb0      	pop	{r4, r5, r7, pc}
 8002898:	50000400 	.word	0x50000400

0800289c <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	000a      	movs	r2, r1
 80028a6:	1cbb      	adds	r3, r7, #2
 80028a8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 80028aa:	23fa      	movs	r3, #250	; 0xfa
 80028ac:	009c      	lsls	r4, r3, #2
 80028ae:	1cbb      	adds	r3, r7, #2
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4803      	ldr	r0, [pc, #12]	; (80028c4 <tx_com+0x28>)
 80028b6:	0023      	movs	r3, r4
 80028b8:	f003 fd64 	bl	8006384 <HAL_UART_Transmit>
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b003      	add	sp, #12
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	20000674 	.word	0x20000674

080028c8 <lis3dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis3dh_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	0008      	movs	r0, r1
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	0019      	movs	r1, r3
 80028d6:	260b      	movs	r6, #11
 80028d8:	19bb      	adds	r3, r7, r6
 80028da:	1c02      	adds	r2, r0, #0
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	2508      	movs	r5, #8
 80028e0:	197b      	adds	r3, r7, r5
 80028e2:	1c0a      	adds	r2, r1, #0
 80028e4:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	685c      	ldr	r4, [r3, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	68d8      	ldr	r0, [r3, #12]
 80028ee:	197b      	adds	r3, r7, r5
 80028f0:	881d      	ldrh	r5, [r3, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	19bb      	adds	r3, r7, r6
 80028f6:	7819      	ldrb	r1, [r3, #0]
 80028f8:	002b      	movs	r3, r5
 80028fa:	47a0      	blx	r4
 80028fc:	0003      	movs	r3, r0
 80028fe:	617b      	str	r3, [r7, #20]

  return ret;
 8002900:	697b      	ldr	r3, [r7, #20]
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b007      	add	sp, #28
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800290a <lis3dh_write_reg>:
  *
  */
int32_t __weak lis3dh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800290a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	0008      	movs	r0, r1
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	0019      	movs	r1, r3
 8002918:	260b      	movs	r6, #11
 800291a:	19bb      	adds	r3, r7, r6
 800291c:	1c02      	adds	r2, r0, #0
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	2508      	movs	r5, #8
 8002922:	197b      	adds	r3, r7, r5
 8002924:	1c0a      	adds	r2, r1, #0
 8002926:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681c      	ldr	r4, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68d8      	ldr	r0, [r3, #12]
 8002930:	197b      	adds	r3, r7, r5
 8002932:	881d      	ldrh	r5, [r3, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	19bb      	adds	r3, r7, r6
 8002938:	7819      	ldrb	r1, [r3, #0]
 800293a:	002b      	movs	r3, r5
 800293c:	47a0      	blx	r4
 800293e:	0003      	movs	r3, r0
 8002940:	617b      	str	r3, [r7, #20]

  return ret;
 8002942:	697b      	ldr	r3, [r7, #20]
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b007      	add	sp, #28
 800294a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800294c <lis3dh_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis3dh_from_fs2_hr_to_mg(int16_t lsb)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	0002      	movs	r2, r0
 8002954:	1dbb      	adds	r3, r7, #6
 8002956:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	2200      	movs	r2, #0
 800295c:	5e9b      	ldrsh	r3, [r3, r2]
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd ffa6 	bl	80008b0 <__aeabi_i2f>
 8002964:	1c03      	adds	r3, r0, #0
 8002966:	2183      	movs	r1, #131	; 0x83
 8002968:	05c9      	lsls	r1, r1, #23
 800296a:	1c18      	adds	r0, r3, #0
 800296c:	f7fd fe88 	bl	8000680 <__aeabi_fdiv>
 8002970:	1c03      	adds	r3, r0, #0
}
 8002972:	1c18      	adds	r0, r3, #0
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}

0800297a <lis3dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_operating_mode_set(stmdev_ctx_t *ctx,
                                  lis3dh_op_md_t val)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	000a      	movs	r2, r1
 8002984:	1cfb      	adds	r3, r7, #3
 8002986:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1,
 8002988:	2310      	movs	r3, #16
 800298a:	18fa      	adds	r2, r7, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	2301      	movs	r3, #1
 8002990:	2120      	movs	r1, #32
 8002992:	f7ff ff99 	bl	80028c8 <lis3dh_read_reg>
 8002996:	0003      	movs	r3, r0
 8002998:	617b      	str	r3, [r7, #20]
                        (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d108      	bne.n	80029b2 <lis3dh_operating_mode_set+0x38>
  {
    ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4,
 80029a0:	230c      	movs	r3, #12
 80029a2:	18fa      	adds	r2, r7, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	2301      	movs	r3, #1
 80029a8:	2123      	movs	r1, #35	; 0x23
 80029aa:	f7ff ff8d 	bl	80028c8 <lis3dh_read_reg>
 80029ae:	0003      	movs	r3, r0
 80029b0:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d138      	bne.n	8002a2a <lis3dh_operating_mode_set+0xb0>
  {
    if (val == LIS3DH_HR_12bit)
 80029b8:	1cfb      	adds	r3, r7, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <lis3dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 80029c0:	2310      	movs	r3, #16
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	2108      	movs	r1, #8
 80029c8:	438a      	bics	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 80029cc:	230c      	movs	r3, #12
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	2108      	movs	r1, #8
 80029d4:	430a      	orrs	r2, r1
 80029d6:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_NM_10bit)
 80029d8:	1cfb      	adds	r3, r7, #3
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10b      	bne.n	80029f8 <lis3dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 80029e0:	2310      	movs	r3, #16
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	2108      	movs	r1, #8
 80029e8:	438a      	bics	r2, r1
 80029ea:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 80029ec:	230c      	movs	r3, #12
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	2108      	movs	r1, #8
 80029f4:	438a      	bics	r2, r1
 80029f6:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS3DH_LP_8bit)
 80029f8:	1cfb      	adds	r3, r7, #3
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d10b      	bne.n	8002a18 <lis3dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 8002a00:	2310      	movs	r3, #16
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	2108      	movs	r1, #8
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	2108      	movs	r1, #8
 8002a14:	438a      	bics	r2, r1
 8002a16:	701a      	strb	r2, [r3, #0]
    }

    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002a18:	2310      	movs	r3, #16
 8002a1a:	18fa      	adds	r2, r7, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	2301      	movs	r3, #1
 8002a20:	2120      	movs	r1, #32
 8002a22:	f7ff ff72 	bl	800290a <lis3dh_write_reg>
 8002a26:	0003      	movs	r3, r0
 8002a28:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <lis3dh_operating_mode_set+0xc8>
  {
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002a30:	230c      	movs	r3, #12
 8002a32:	18fa      	adds	r2, r7, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	2301      	movs	r3, #1
 8002a38:	2123      	movs	r1, #35	; 0x23
 8002a3a:	f7ff ff66 	bl	800290a <lis3dh_write_reg>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002a42:	697b      	ldr	r3, [r7, #20]
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b006      	add	sp, #24
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <lis3dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_data_rate_set(stmdev_ctx_t *ctx, lis3dh_odr_t val)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	000a      	movs	r2, r1
 8002a56:	1cfb      	adds	r3, r7, #3
 8002a58:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002a5a:	2408      	movs	r4, #8
 8002a5c:	193a      	adds	r2, r7, r4
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	2301      	movs	r3, #1
 8002a62:	2120      	movs	r1, #32
 8002a64:	f7ff ff30 	bl	80028c8 <lis3dh_read_reg>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d115      	bne.n	8002a9e <lis3dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8002a72:	1cfb      	adds	r3, r7, #3
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	220f      	movs	r2, #15
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	0110      	lsls	r0, r2, #4
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	210f      	movs	r1, #15
 8002a84:	400a      	ands	r2, r1
 8002a86:	1c11      	adds	r1, r2, #0
 8002a88:	1c02      	adds	r2, r0, #0
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002a8e:	193a      	adds	r2, r7, r4
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	2301      	movs	r3, #1
 8002a94:	2120      	movs	r1, #32
 8002a96:	f7ff ff38 	bl	800290a <lis3dh_write_reg>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b005      	add	sp, #20
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <lis3dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_full_scale_set(stmdev_ctx_t *ctx, lis3dh_fs_t val)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	000a      	movs	r2, r1
 8002ab2:	1cfb      	adds	r3, r7, #3
 8002ab4:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002ab6:	2408      	movs	r4, #8
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	2301      	movs	r3, #1
 8002abe:	2123      	movs	r1, #35	; 0x23
 8002ac0:	f7ff ff02 	bl	80028c8 <lis3dh_read_reg>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d117      	bne.n	8002afe <lis3dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8002ace:	1cfb      	adds	r3, r7, #3
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2103      	movs	r1, #3
 8002adc:	400a      	ands	r2, r1
 8002ade:	0110      	lsls	r0, r2, #4
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	2130      	movs	r1, #48	; 0x30
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	1c11      	adds	r1, r2, #0
 8002ae8:	1c02      	adds	r2, r0, #0
 8002aea:	430a      	orrs	r2, r1
 8002aec:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002aee:	193a      	adds	r2, r7, r4
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	2123      	movs	r1, #35	; 0x23
 8002af6:	f7ff ff08 	bl	800290a <lis3dh_write_reg>
 8002afa:	0003      	movs	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b005      	add	sp, #20
 8002b06:	bd90      	pop	{r4, r7, pc}

08002b08 <lis3dh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	000a      	movs	r2, r1
 8002b12:	1cfb      	adds	r3, r7, #3
 8002b14:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002b16:	2408      	movs	r4, #8
 8002b18:	193a      	adds	r2, r7, r4
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	2123      	movs	r1, #35	; 0x23
 8002b20:	f7ff fed2 	bl	80028c8 <lis3dh_read_reg>
 8002b24:	0003      	movs	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d115      	bne.n	8002b5a <lis3dh_block_data_update_set+0x52>
  {
    ctrl_reg4.bdu = val;
 8002b2e:	1cfb      	adds	r3, r7, #3
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	01d0      	lsls	r0, r2, #7
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	217f      	movs	r1, #127	; 0x7f
 8002b40:	400a      	ands	r2, r1
 8002b42:	1c11      	adds	r1, r2, #0
 8002b44:	1c02      	adds	r2, r0, #0
 8002b46:	430a      	orrs	r2, r1
 8002b48:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 8002b4a:	193a      	adds	r2, r7, r4
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	2123      	movs	r1, #35	; 0x23
 8002b52:	f7ff feda 	bl	800290a <lis3dh_write_reg>
 8002b56:	0003      	movs	r3, r0
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b005      	add	sp, #20
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <lis3dh_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_OUT_X_L, buff, 6);
 8002b6e:	240c      	movs	r4, #12
 8002b70:	193a      	adds	r2, r7, r4
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	2306      	movs	r3, #6
 8002b76:	2128      	movs	r1, #40	; 0x28
 8002b78:	f7ff fea6 	bl	80028c8 <lis3dh_read_reg>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002b80:	0021      	movs	r1, r4
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	785b      	ldrb	r3, [r3, #1]
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	5e9b      	ldrsh	r3, [r3, r2]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	18d3      	adds	r3, r2, r3
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	78da      	ldrb	r2, [r3, #3]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3302      	adds	r3, #2
 8002bb0:	b212      	sxth	r2, r2
 8002bb2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	2200      	movs	r2, #0
 8002bba:	5e9b      	ldrsh	r3, [r3, r2]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	789b      	ldrb	r3, [r3, #2]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	18d3      	adds	r3, r2, r3
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	b212      	sxth	r2, r2
 8002bd2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	795a      	ldrb	r2, [r3, #5]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	b212      	sxth	r2, r2
 8002bde:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	3304      	adds	r3, #4
 8002be4:	2200      	movs	r2, #0
 8002be6:	5e9b      	ldrsh	r3, [r3, r2]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	791b      	ldrb	r3, [r3, #4]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	18d3      	adds	r3, r2, r3
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	b212      	sxth	r2, r2
 8002bfe:	801a      	strh	r2, [r3, #0]

  return ret;
 8002c00:	697b      	ldr	r3, [r7, #20]
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b007      	add	sp, #28
 8002c08:	bd90      	pop	{r4, r7, pc}

08002c0a <lis3dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_WHO_AM_I, buff, 1);
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f7ff fe54 	bl	80028c8 <lis3dh_read_reg>
 8002c20:	0003      	movs	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]

  return ret;
 8002c24:	68fb      	ldr	r3, [r7, #12]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <lis3dh_fifo_set>:
  * @param  val      change the values of fifo_en in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c2e:	b590      	push	{r4, r7, lr}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	000a      	movs	r2, r1
 8002c38:	1cfb      	adds	r3, r7, #3
 8002c3a:	701a      	strb	r2, [r3, #0]
  lis3dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002c3c:	2408      	movs	r4, #8
 8002c3e:	193a      	adds	r2, r7, r4
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	2301      	movs	r3, #1
 8002c44:	2124      	movs	r1, #36	; 0x24
 8002c46:	f7ff fe3f 	bl	80028c8 <lis3dh_read_reg>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d117      	bne.n	8002c84 <lis3dh_fifo_set+0x56>
  {
    ctrl_reg5.fifo_en = val;
 8002c54:	1cfb      	adds	r3, r7, #3
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	2101      	movs	r1, #1
 8002c62:	400a      	ands	r2, r1
 8002c64:	0190      	lsls	r0, r2, #6
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	438a      	bics	r2, r1
 8002c6c:	1c11      	adds	r1, r2, #0
 8002c6e:	1c02      	adds	r2, r0, #0
 8002c70:	430a      	orrs	r2, r1
 8002c72:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8002c74:	193a      	adds	r2, r7, r4
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2124      	movs	r1, #36	; 0x24
 8002c7c:	f7ff fe45 	bl	800290a <lis3dh_write_reg>
 8002c80:	0003      	movs	r3, r0
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002c84:	68fb      	ldr	r3, [r7, #12]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b005      	add	sp, #20
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <lis3dh_fifo_watermark_set>:
  * @param  val      change the values of fth in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_watermark_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	000a      	movs	r2, r1
 8002c98:	1cfb      	adds	r3, r7, #3
 8002c9a:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002c9c:	2408      	movs	r4, #8
 8002c9e:	193a      	adds	r2, r7, r4
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	212e      	movs	r1, #46	; 0x2e
 8002ca6:	f7ff fe0f 	bl	80028c8 <lis3dh_read_reg>
 8002caa:	0003      	movs	r3, r0
 8002cac:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d117      	bne.n	8002ce4 <lis3dh_fifo_watermark_set+0x56>
  {
    fifo_ctrl_reg.fth = val;
 8002cb4:	1cfb      	adds	r3, r7, #3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	221f      	movs	r2, #31
 8002cba:	4013      	ands	r3, r2
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	211f      	movs	r1, #31
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	211f      	movs	r1, #31
 8002cca:	438a      	bics	r2, r1
 8002ccc:	1c11      	adds	r1, r2, #0
 8002cce:	1c02      	adds	r2, r0, #0
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002cd4:	193a      	adds	r2, r7, r4
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	212e      	movs	r1, #46	; 0x2e
 8002cdc:	f7ff fe15 	bl	800290a <lis3dh_write_reg>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b005      	add	sp, #20
 8002cec:	bd90      	pop	{r4, r7, pc}

08002cee <lis3dh_fifo_mode_set>:
  * @param  val      change the values of fm in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_mode_set(stmdev_ctx_t *ctx, lis3dh_fm_t val)
{
 8002cee:	b590      	push	{r4, r7, lr}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	000a      	movs	r2, r1
 8002cf8:	1cfb      	adds	r3, r7, #3
 8002cfa:	701a      	strb	r2, [r3, #0]
  lis3dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002cfc:	2408      	movs	r4, #8
 8002cfe:	193a      	adds	r2, r7, r4
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	2301      	movs	r3, #1
 8002d04:	212e      	movs	r1, #46	; 0x2e
 8002d06:	f7ff fddf 	bl	80028c8 <lis3dh_read_reg>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <lis3dh_fifo_mode_set+0x52>
  {
    fifo_ctrl_reg.fm = (uint8_t)val;
 8002d14:	1cfb      	adds	r3, r7, #3
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	0190      	lsls	r0, r2, #6
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	213f      	movs	r1, #63	; 0x3f
 8002d26:	400a      	ands	r2, r1
 8002d28:	1c11      	adds	r1, r2, #0
 8002d2a:	1c02      	adds	r2, r0, #0
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
    ret = lis3dh_write_reg(ctx, LIS3DH_FIFO_CTRL_REG,
 8002d30:	193a      	adds	r2, r7, r4
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	2301      	movs	r3, #1
 8002d36:	212e      	movs	r1, #46	; 0x2e
 8002d38:	f7ff fde7 	bl	800290a <lis3dh_write_reg>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 8002d40:	68fb      	ldr	r3, [r7, #12]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b005      	add	sp, #20
 8002d48:	bd90      	pop	{r4, r7, pc}

08002d4a <lis3dh_fifo_data_level_get>:
  * @param  val      change the values of fss in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_data_level_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002d4a:	b590      	push	{r4, r7, lr}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 8002d54:	2408      	movs	r4, #8
 8002d56:	193a      	adds	r2, r7, r4
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	212f      	movs	r1, #47	; 0x2f
 8002d5e:	f7ff fdb3 	bl	80028c8 <lis3dh_read_reg>
 8002d62:	0003      	movs	r3, r0
 8002d64:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.fss;
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	06db      	lsls	r3, r3, #27
 8002d6c:	0edb      	lsrs	r3, r3, #27
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	001a      	movs	r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	701a      	strb	r2, [r3, #0]

  return ret;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b005      	add	sp, #20
 8002d7e:	bd90      	pop	{r4, r7, pc}

08002d80 <lis3dh_fifo_fth_flag_get>:
  * @param  val      change the values of wtm in reg FIFO_SRC_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3dh_fifo_fth_flag_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  lis3dh_fifo_src_reg_t fifo_src_reg;
  int32_t ret;

  ret = lis3dh_read_reg(ctx, LIS3DH_FIFO_SRC_REG,
 8002d8a:	2408      	movs	r4, #8
 8002d8c:	193a      	adds	r2, r7, r4
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	2301      	movs	r3, #1
 8002d92:	212f      	movs	r1, #47	; 0x2f
 8002d94:	f7ff fd98 	bl	80028c8 <lis3dh_read_reg>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_src_reg, 1);
  *val = (uint8_t)fifo_src_reg.wtm;
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	0fdb      	lsrs	r3, r3, #31
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	001a      	movs	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	701a      	strb	r2, [r3, #0]

  return ret;
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b005      	add	sp, #20
 8002db4:	bd90      	pop	{r4, r7, pc}
	...

08002db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dbc:	f000 fd50 	bl	8003860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc0:	f000 f860 	bl	8002e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc4:	f000 f932 	bl	800302c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002dc8:	f000 f8e2 	bl	8002f90 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002dcc:	f000 f8a2 	bl	8002f14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8002dd0:	491b      	ldr	r1, [pc, #108]	; (8002e40 <main+0x88>)
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <main+0x8c>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f003 fb70 	bl	80064bc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ddc:	f005 fb80 	bl	80084e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <main+0x90>)
 8002de2:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <main+0x94>)
 8002de4:	2100      	movs	r1, #0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f005 fbc2 	bl	8008570 <osThreadNew>
 8002dec:	0002      	movs	r2, r0
 8002dee:	4b18      	ldr	r3, [pc, #96]	; (8002e50 <main+0x98>)
 8002df0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  blinkingRatioThreadHandle = osThreadNew(ChangeBlinkingRatioThread, NULL, &blinkingRatioTask_attributes);
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <main+0x9c>)
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <main+0xa0>)
 8002df6:	2100      	movs	r1, #0
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f005 fbb9 	bl	8008570 <osThreadNew>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <main+0xa4>)
 8002e02:	601a      	str	r2, [r3, #0]
  toggleLEDThreadHandle = osThreadNew(ToggleLEDThread, NULL, &toggleLEDTask_attributes);
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <main+0xa8>)
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <main+0xac>)
 8002e08:	2100      	movs	r1, #0
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f005 fbb0 	bl	8008570 <osThreadNew>
 8002e10:	0002      	movs	r2, r0
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <main+0xb0>)
 8002e14:	601a      	str	r2, [r3, #0]
  sendByteOverUartHandle = osThreadNew(SendBytOverUartThread, NULL, &sendByteOverUartTask_attributes);
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <main+0xb4>)
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <main+0xb8>)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f005 fba7 	bl	8008570 <osThreadNew>
 8002e22:	0002      	movs	r2, r0
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <main+0xbc>)
 8002e26:	601a      	str	r2, [r3, #0]
  accelServiceHandle = osThreadNew(AccelServiceThread, NULL, &accelServiceTask_attributes);
 8002e28:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <main+0xc0>)
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <main+0xc4>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f005 fb9e 	bl	8008570 <osThreadNew>
 8002e34:	0002      	movs	r2, r0
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <main+0xc8>)
 8002e38:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002e3a:	f005 fb73 	bl	8008524 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <main+0x86>
 8002e40:	20000718 	.word	0x20000718
 8002e44:	20000674 	.word	0x20000674
 8002e48:	0800e0f4 	.word	0x0800e0f4
 8002e4c:	08003309 	.word	0x08003309
 8002e50:	20000708 	.word	0x20000708
 8002e54:	0800e118 	.word	0x0800e118
 8002e58:	080031dd 	.word	0x080031dd
 8002e5c:	2000070c 	.word	0x2000070c
 8002e60:	0800e13c 	.word	0x0800e13c
 8002e64:	08003191 	.word	0x08003191
 8002e68:	20000710 	.word	0x20000710
 8002e6c:	0800e160 	.word	0x0800e160
 8002e70:	080031f9 	.word	0x080031f9
 8002e74:	20000714 	.word	0x20000714
 8002e78:	0800e184 	.word	0x0800e184
 8002e7c:	080032e9 	.word	0x080032e9
 8002e80:	2000071c 	.word	0x2000071c

08002e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b093      	sub	sp, #76	; 0x4c
 8002e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e8a:	2410      	movs	r4, #16
 8002e8c:	193b      	adds	r3, r7, r4
 8002e8e:	0018      	movs	r0, r3
 8002e90:	2338      	movs	r3, #56	; 0x38
 8002e92:	001a      	movs	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f008 f93d 	bl	800b114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e9a:	003b      	movs	r3, r7
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	2310      	movs	r3, #16
 8002ea0:	001a      	movs	r2, r3
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	f008 f936 	bl	800b114 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f001 f85d 	bl	8003f6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb8:	193b      	adds	r3, r7, r4
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	0052      	lsls	r2, r2, #1
 8002ebe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f001 f895 	bl	8004004 <HAL_RCC_OscConfig>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d001      	beq.n	8002ee2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002ede:	f000 fa2f 	bl	8003340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee2:	003b      	movs	r3, r7
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ee8:	003b      	movs	r3, r7
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eee:	003b      	movs	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ef4:	003b      	movs	r3, r7
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002efa:	003b      	movs	r3, r7
 8002efc:	2100      	movs	r1, #0
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 fb9a 	bl	8004638 <HAL_RCC_ClockConfig>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002f08:	f000 fa1a 	bl	8003340 <Error_Handler>
  }
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b013      	add	sp, #76	; 0x4c
 8002f12:	bd90      	pop	{r4, r7, pc}

08002f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <MX_SPI1_Init+0x78>)
 8002f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f20:	2282      	movs	r2, #130	; 0x82
 8002f22:	0052      	lsls	r2, r2, #1
 8002f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f2e:	22e0      	movs	r2, #224	; 0xe0
 8002f30:	00d2      	lsls	r2, r2, #3
 8002f32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f36:	2202      	movs	r2, #2
 8002f38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f62:	2207      	movs	r2, #7
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <MX_SPI1_Init+0x74>)
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 feeb 	bl	8004d50 <HAL_SPI_Init>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f7e:	f000 f9df 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000610 	.word	0x20000610
 8002f8c:	40013000 	.word	0x40013000

08002f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002f96:	4a24      	ldr	r2, [pc, #144]	; (8003028 <MX_USART2_UART_Init+0x98>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002f9c:	22e1      	movs	r2, #225	; 0xe1
 8002f9e:	0252      	lsls	r2, r2, #9
 8002fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b18      	ldr	r3, [pc, #96]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc6:	4b17      	ldr	r3, [pc, #92]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd2:	4b14      	ldr	r3, [pc, #80]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f003 f97c 	bl	80062d8 <HAL_UART_Init>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002fe4:	f000 f9ac 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002fea:	2100      	movs	r1, #0
 8002fec:	0018      	movs	r0, r3
 8002fee:	f005 f90d 	bl	800820c <HAL_UARTEx_SetTxFifoThreshold>
 8002ff2:	1e03      	subs	r3, r0, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ff6:	f000 f9a3 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <MX_USART2_UART_Init+0x94>)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f005 f944 	bl	800828c <HAL_UARTEx_SetRxFifoThreshold>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003008:	f000 f99a 	bl	8003340 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <MX_USART2_UART_Init+0x94>)
 800300e:	0018      	movs	r0, r3
 8003010:	f005 f8c2 	bl	8008198 <HAL_UARTEx_DisableFifoMode>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d001      	beq.n	800301c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003018:	f000 f992 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	20000674 	.word	0x20000674
 8003028:	40004400 	.word	0x40004400

0800302c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b08b      	sub	sp, #44	; 0x2c
 8003030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003032:	2414      	movs	r4, #20
 8003034:	193b      	adds	r3, r7, r4
 8003036:	0018      	movs	r0, r3
 8003038:	2314      	movs	r3, #20
 800303a:	001a      	movs	r2, r3
 800303c:	2100      	movs	r1, #0
 800303e:	f008 f869 	bl	800b114 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	4b40      	ldr	r3, [pc, #256]	; (8003144 <MX_GPIO_Init+0x118>)
 8003044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <MX_GPIO_Init+0x118>)
 8003048:	2104      	movs	r1, #4
 800304a:	430a      	orrs	r2, r1
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <MX_GPIO_Init+0x118>)
 8003050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003052:	2204      	movs	r2, #4
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <MX_GPIO_Init+0x118>)
 800305c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <MX_GPIO_Init+0x118>)
 8003060:	2120      	movs	r1, #32
 8003062:	430a      	orrs	r2, r1
 8003064:	635a      	str	r2, [r3, #52]	; 0x34
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <MX_GPIO_Init+0x118>)
 8003068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306a:	2220      	movs	r2, #32
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <MX_GPIO_Init+0x118>)
 8003074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <MX_GPIO_Init+0x118>)
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	635a      	str	r2, [r3, #52]	; 0x34
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <MX_GPIO_Init+0x118>)
 8003080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <MX_GPIO_Init+0x118>)
 800308c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <MX_GPIO_Init+0x118>)
 8003090:	2102      	movs	r1, #2
 8003092:	430a      	orrs	r2, r1
 8003094:	635a      	str	r2, [r3, #52]	; 0x34
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <MX_GPIO_Init+0x118>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	2202      	movs	r2, #2
 800309c:	4013      	ands	r3, r2
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80030a2:	23a0      	movs	r3, #160	; 0xa0
 80030a4:	05db      	lsls	r3, r3, #23
 80030a6:	2200      	movs	r2, #0
 80030a8:	2120      	movs	r1, #32
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fef2 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <MX_GPIO_Init+0x11c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	2101      	movs	r1, #1
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 feec 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	0192      	lsls	r2, r2, #6
 80030c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	2284      	movs	r2, #132	; 0x84
 80030c8:	0392      	lsls	r2, r2, #14
 80030ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <MX_GPIO_Init+0x120>)
 80030d6:	0019      	movs	r1, r3
 80030d8:	0010      	movs	r0, r2
 80030da:	f000 fd77 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	2220      	movs	r2, #32
 80030e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	2201      	movs	r2, #1
 80030e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	2202      	movs	r2, #2
 80030f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80030f6:	193a      	adds	r2, r7, r4
 80030f8:	23a0      	movs	r3, #160	; 0xa0
 80030fa:	05db      	lsls	r3, r3, #23
 80030fc:	0011      	movs	r1, r2
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 fd64 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003104:	0021      	movs	r1, r4
 8003106:	187b      	adds	r3, r7, r1
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310c:	187b      	adds	r3, r7, r1
 800310e:	2201      	movs	r2, #1
 8003110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800311e:	187b      	adds	r3, r7, r1
 8003120:	4a09      	ldr	r2, [pc, #36]	; (8003148 <MX_GPIO_Init+0x11c>)
 8003122:	0019      	movs	r1, r3
 8003124:	0010      	movs	r0, r2
 8003126:	f000 fd51 	bl	8003bcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	2103      	movs	r1, #3
 800312e:	2007      	movs	r0, #7
 8003130:	f000 fc5a 	bl	80039e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003134:	2007      	movs	r0, #7
 8003136:	f000 fc6c 	bl	8003a12 <HAL_NVIC_EnableIRQ>

}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	b00b      	add	sp, #44	; 0x2c
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	40021000 	.word	0x40021000
 8003148:	50000400 	.word	0x50000400
 800314c:	50000800 	.word	0x50000800

08003150 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	0002      	movs	r2, r0
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 800315c:	1dbb      	adds	r3, r7, #6
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	2380      	movs	r3, #128	; 0x80
 8003162:	019b      	lsls	r3, r3, #6
 8003164:	429a      	cmp	r2, r3
 8003166:	d10b      	bne.n	8003180 <HAL_GPIO_EXTI_Falling_Callback+0x30>
  {
    osThreadFlagsSet(blinkingRatioThreadHandle, BIT_1);
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2102      	movs	r1, #2
 800316e:	0018      	movs	r0, r3
 8003170:	f005 fa94 	bl	800869c <osThreadFlagsSet>
    osThreadFlagsSet(sendByteOverUartHandle, BIT_1);
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2102      	movs	r1, #2
 800317a:	0018      	movs	r0, r3
 800317c:	f005 fa8e 	bl	800869c <osThreadFlagsSet>

  }
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}
 8003188:	2000070c 	.word	0x2000070c
 800318c:	20000714 	.word	0x20000714

08003190 <ToggleLEDThread>:

void ToggleLEDThread(void * argument)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    osDelay(blinking_ratio);
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <ToggleLEDThread+0x20>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0018      	movs	r0, r3
 800319e:	f005 fb47 	bl	8008830 <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80031a2:	23a0      	movs	r3, #160	; 0xa0
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	2120      	movs	r1, #32
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 fe90 	bl	8003ece <HAL_GPIO_TogglePin>
    osDelay(blinking_ratio);
 80031ae:	e7f3      	b.n	8003198 <ToggleLEDThread+0x8>
 80031b0:	20000000 	.word	0x20000000

080031b4 <ChangeBlinkingRatio>:
  }
}

void ChangeBlinkingRatio(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  if (blinking_ratio == 250)
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <ChangeBlinkingRatio+0x24>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2bfa      	cmp	r3, #250	; 0xfa
 80031be:	d104      	bne.n	80031ca <ChangeBlinkingRatio+0x16>
    blinking_ratio = 1000;
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <ChangeBlinkingRatio+0x24>)
 80031c2:	22fa      	movs	r2, #250	; 0xfa
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	601a      	str	r2, [r3, #0]
  else
    blinking_ratio = 250;
}
 80031c8:	e002      	b.n	80031d0 <ChangeBlinkingRatio+0x1c>
    blinking_ratio = 250;
 80031ca:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <ChangeBlinkingRatio+0x24>)
 80031cc:	22fa      	movs	r2, #250	; 0xfa
 80031ce:	601a      	str	r2, [r3, #0]
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	20000000 	.word	0x20000000

080031dc <ChangeBlinkingRatioThread>:

void ChangeBlinkingRatioThread(void * argument)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  (void) argument;
  for(;;)
  {
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 80031e4:	2301      	movs	r3, #1
 80031e6:	425b      	negs	r3, r3
 80031e8:	001a      	movs	r2, r3
 80031ea:	2100      	movs	r1, #0
 80031ec:	2002      	movs	r0, #2
 80031ee:	f005 fa9f 	bl	8008730 <osThreadFlagsWait>

    ChangeBlinkingRatio();
 80031f2:	f7ff ffdf 	bl	80031b4 <ChangeBlinkingRatio>
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 80031f6:	e7f5      	b.n	80031e4 <ChangeBlinkingRatioThread+0x8>

080031f8 <SendBytOverUartThread>:
const uint8_t button_press_str[] = "Button pressed\r\n";
const uint8_t data_rec_str[] = "received sth\r\n";
const uint8_t data_rec_e_str[] = "received e\r\n";

void SendBytOverUartThread(void *argument)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  (void) argument;
  uint32_t events = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8003204:	2301      	movs	r3, #1
 8003206:	425b      	negs	r3, r3
 8003208:	001a      	movs	r2, r3
 800320a:	2100      	movs	r1, #0
 800320c:	2003      	movs	r0, #3
 800320e:	f005 fa8f 	bl	8008730 <osThreadFlagsWait>
 8003212:	0003      	movs	r3, r0
 8003214:	60fb      	str	r3, [r7, #12]

    switch (events)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d003      	beq.n	8003224 <SendBytOverUartThread+0x2c>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d014      	beq.n	800324c <SendBytOverUartThread+0x54>
        break;
      case BIT_1:
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
        break;
      default:
        break;
 8003222:	e01b      	b.n	800325c <SendBytOverUartThread+0x64>
        if (rec_character == 'e')
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <SendBytOverUartThread+0x68>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b65      	cmp	r3, #101	; 0x65
 800322a:	d107      	bne.n	800323c <SendBytOverUartThread+0x44>
          HAL_UART_Transmit(&huart2, data_rec_e_str, sizeof(data_rec_e_str), 500);
 800322c:	23fa      	movs	r3, #250	; 0xfa
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	490c      	ldr	r1, [pc, #48]	; (8003264 <SendBytOverUartThread+0x6c>)
 8003232:	480d      	ldr	r0, [pc, #52]	; (8003268 <SendBytOverUartThread+0x70>)
 8003234:	220d      	movs	r2, #13
 8003236:	f003 f8a5 	bl	8006384 <HAL_UART_Transmit>
        break;
 800323a:	e00f      	b.n	800325c <SendBytOverUartThread+0x64>
          HAL_UART_Transmit(&huart2, data_rec_str, sizeof(data_rec_str), 500);
 800323c:	23fa      	movs	r3, #250	; 0xfa
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	490a      	ldr	r1, [pc, #40]	; (800326c <SendBytOverUartThread+0x74>)
 8003242:	4809      	ldr	r0, [pc, #36]	; (8003268 <SendBytOverUartThread+0x70>)
 8003244:	220f      	movs	r2, #15
 8003246:	f003 f89d 	bl	8006384 <HAL_UART_Transmit>
        break;
 800324a:	e007      	b.n	800325c <SendBytOverUartThread+0x64>
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
 800324c:	23fa      	movs	r3, #250	; 0xfa
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4907      	ldr	r1, [pc, #28]	; (8003270 <SendBytOverUartThread+0x78>)
 8003252:	4805      	ldr	r0, [pc, #20]	; (8003268 <SendBytOverUartThread+0x70>)
 8003254:	2211      	movs	r2, #17
 8003256:	f003 f895 	bl	8006384 <HAL_UART_Transmit>
        break;
 800325a:	46c0      	nop			; (mov r8, r8)
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 800325c:	e7d2      	b.n	8003204 <SendBytOverUartThread+0xc>
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	20000718 	.word	0x20000718
 8003264:	0800e1cc 	.word	0x0800e1cc
 8003268:	20000674 	.word	0x20000674
 800326c:	0800e1bc 	.word	0x0800e1bc
 8003270:	0800e1a8 	.word	0x0800e1a8

08003274 <HAL_UART_RxCpltCallback>:
    }
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_UART_RxCpltCallback+0x34>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10b      	bne.n	800329e <HAL_UART_RxCpltCallback+0x2a>
  {
    osThreadFlagsSet(sendByteOverUartHandle, BIT_0);
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_UART_RxCpltCallback+0x38>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	0018      	movs	r0, r3
 800328e:	f005 fa05 	bl	800869c <osThreadFlagsSet>
    HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 8003292:	4907      	ldr	r1, [pc, #28]	; (80032b0 <HAL_UART_RxCpltCallback+0x3c>)
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_UART_RxCpltCallback+0x40>)
 8003296:	2201      	movs	r2, #1
 8003298:	0018      	movs	r0, r3
 800329a:	f003 f90f 	bl	80064bc <HAL_UART_Receive_IT>
  }
}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	40004400 	.word	0x40004400
 80032ac:	20000714 	.word	0x20000714
 80032b0:	20000718 	.word	0x20000718
 80032b4:	20000674 	.word	0x20000674

080032b8 <AccelMachineState>:

void AccelMachineState(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  switch (accel_state)
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <AccelMachineState+0x2c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10a      	bne.n	80032da <AccelMachineState+0x22>
  {
  case ACC_RUNNING:
    if (lis3dh_is_samples_ready())
 80032c4:	f7ff f9fa 	bl	80026bc <lis3dh_is_samples_ready>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d002      	beq.n	80032d2 <AccelMachineState+0x1a>
      lis3dh_read_fifo();
 80032cc:	f7ff fa0c 	bl	80026e8 <lis3dh_read_fifo>
    else
      osDelay(100);
  break;
 80032d0:	e004      	b.n	80032dc <AccelMachineState+0x24>
      osDelay(100);
 80032d2:	2064      	movs	r0, #100	; 0x64
 80032d4:	f005 faac 	bl	8008830 <osDelay>
  break;
 80032d8:	e000      	b.n	80032dc <AccelMachineState+0x24>
  case ACC_INIT:
  case ACC_ERROR:
  default:
  break;
 80032da:	46c0      	nop			; (mov r8, r8)
  }
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000720 	.word	0x20000720

080032e8 <AccelServiceThread>:

void AccelServiceThread(void *argument)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  (void) argument;
  accel_state = lis3dh_init();
 80032f0:	f7ff f984 	bl	80025fc <lis3dh_init>
 80032f4:	0003      	movs	r3, r0
 80032f6:	001a      	movs	r2, r3
 80032f8:	4b02      	ldr	r3, [pc, #8]	; (8003304 <AccelServiceThread+0x1c>)
 80032fa:	701a      	strb	r2, [r3, #0]
  for (;;)
  {
    AccelMachineState();
 80032fc:	f7ff ffdc 	bl	80032b8 <AccelMachineState>
 8003300:	e7fc      	b.n	80032fc <AccelServiceThread+0x14>
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	20000720 	.word	0x20000720

08003308 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003310:	23fa      	movs	r3, #250	; 0xfa
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	0018      	movs	r0, r3
 8003316:	f005 fa8b 	bl	8008830 <osDelay>
 800331a:	e7f9      	b.n	8003310 <StartDefaultTask+0x8>

0800331c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800332e:	f000 fab7 	bl	80038a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	40001000 	.word	0x40001000

08003340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003348:	e7fe      	b.n	8003348 <Error_Handler+0x8>
	...

0800334c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_MspInit+0x50>)
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_MspInit+0x50>)
 8003358:	2101      	movs	r1, #1
 800335a:	430a      	orrs	r2, r1
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_MspInit+0x50>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_MspInit+0x50>)
 800336c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_MspInit+0x50>)
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	0549      	lsls	r1, r1, #21
 8003374:	430a      	orrs	r2, r1
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_MspInit+0x50>)
 800337a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	055b      	lsls	r3, r3, #21
 8003380:	4013      	ands	r3, r2
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003386:	2302      	movs	r3, #2
 8003388:	425b      	negs	r3, r3
 800338a:	2200      	movs	r2, #0
 800338c:	2103      	movs	r1, #3
 800338e:	0018      	movs	r0, r3
 8003390:	f000 fb2a 	bl	80039e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b08b      	sub	sp, #44	; 0x2c
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	2414      	movs	r4, #20
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	0018      	movs	r0, r3
 80033ae:	2314      	movs	r3, #20
 80033b0:	001a      	movs	r2, r3
 80033b2:	2100      	movs	r1, #0
 80033b4:	f007 feae 	bl	800b114 <memset>
  if(hspi->Instance==SPI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	; (800343c <HAL_SPI_MspInit+0x9c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d138      	bne.n	8003434 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HAL_SPI_MspInit+0xa0>)
 80033c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033c6:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_SPI_MspInit+0xa0>)
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	0149      	lsls	r1, r1, #5
 80033cc:	430a      	orrs	r2, r1
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_SPI_MspInit+0xa0>)
 80033d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d4:	2380      	movs	r3, #128	; 0x80
 80033d6:	015b      	lsls	r3, r3, #5
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <HAL_SPI_MspInit+0xa0>)
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_SPI_MspInit+0xa0>)
 80033e4:	2101      	movs	r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_SPI_MspInit+0xa0>)
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80033f6:	0021      	movs	r1, r4
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	22c2      	movs	r2, #194	; 0xc2
 80033fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2202      	movs	r2, #2
 8003402:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	187b      	adds	r3, r7, r1
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2200      	movs	r2, #0
 800340e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	187a      	adds	r2, r7, r1
 8003418:	23a0      	movs	r3, #160	; 0xa0
 800341a:	05db      	lsls	r3, r3, #23
 800341c:	0011      	movs	r1, r2
 800341e:	0018      	movs	r0, r3
 8003420:	f000 fbd4 	bl	8003bcc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2103      	movs	r1, #3
 8003428:	2019      	movs	r0, #25
 800342a:	f000 fadd 	bl	80039e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800342e:	2019      	movs	r0, #25
 8003430:	f000 faef 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b00b      	add	sp, #44	; 0x2c
 800343a:	bd90      	pop	{r4, r7, pc}
 800343c:	40013000 	.word	0x40013000
 8003440:	40021000 	.word	0x40021000

08003444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b097      	sub	sp, #92	; 0x5c
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	2344      	movs	r3, #68	; 0x44
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	0018      	movs	r0, r3
 8003452:	2314      	movs	r3, #20
 8003454:	001a      	movs	r2, r3
 8003456:	2100      	movs	r1, #0
 8003458:	f007 fe5c 	bl	800b114 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800345c:	2410      	movs	r4, #16
 800345e:	193b      	adds	r3, r7, r4
 8003460:	0018      	movs	r0, r3
 8003462:	2334      	movs	r3, #52	; 0x34
 8003464:	001a      	movs	r2, r3
 8003466:	2100      	movs	r1, #0
 8003468:	f007 fe54 	bl	800b114 <memset>
  if(huart->Instance==USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_UART_MspInit+0xc8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d146      	bne.n	8003504 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003476:	193b      	adds	r3, r7, r4
 8003478:	2202      	movs	r2, #2
 800347a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800347c:	193b      	adds	r3, r7, r4
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003482:	193b      	adds	r3, r7, r4
 8003484:	0018      	movs	r0, r3
 8003486:	f001 faab 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800348e:	f7ff ff57 	bl	8003340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <HAL_UART_MspInit+0xcc>)
 8003494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_UART_MspInit+0xcc>)
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	0289      	lsls	r1, r1, #10
 800349c:	430a      	orrs	r2, r1
 800349e:	63da      	str	r2, [r3, #60]	; 0x3c
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_UART_MspInit+0xcc>)
 80034a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	029b      	lsls	r3, r3, #10
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_UART_MspInit+0xcc>)
 80034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_UART_MspInit+0xcc>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	430a      	orrs	r2, r1
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <HAL_UART_MspInit+0xcc>)
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	2201      	movs	r2, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80034c6:	2144      	movs	r1, #68	; 0x44
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	220c      	movs	r2, #12
 80034cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	187b      	adds	r3, r7, r1
 80034d0:	2202      	movs	r2, #2
 80034d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	2201      	movs	r2, #1
 80034d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	2200      	movs	r2, #0
 80034de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80034e0:	187b      	adds	r3, r7, r1
 80034e2:	2201      	movs	r2, #1
 80034e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	187a      	adds	r2, r7, r1
 80034e8:	23a0      	movs	r3, #160	; 0xa0
 80034ea:	05db      	lsls	r3, r3, #23
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fb6c 	bl	8003bcc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2103      	movs	r1, #3
 80034f8:	201c      	movs	r0, #28
 80034fa:	f000 fa75 	bl	80039e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034fe:	201c      	movs	r0, #28
 8003500:	f000 fa87 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b017      	add	sp, #92	; 0x5c
 800350a:	bd90      	pop	{r4, r7, pc}
 800350c:	40004400 	.word	0x40004400
 8003510:	40021000 	.word	0x40021000

08003514 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800351c:	232b      	movs	r3, #43	; 0x2b
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003524:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_InitTick+0xf0>)
 8003526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_InitTick+0xf0>)
 800352a:	2110      	movs	r1, #16
 800352c:	430a      	orrs	r2, r1
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003530:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_InitTick+0xf0>)
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	2210      	movs	r2, #16
 8003536:	4013      	ands	r3, r2
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800353c:	230c      	movs	r3, #12
 800353e:	18fa      	adds	r2, r7, r3
 8003540:	2410      	movs	r4, #16
 8003542:	193b      	adds	r3, r7, r4
 8003544:	0011      	movs	r1, r2
 8003546:	0018      	movs	r0, r3
 8003548:	f001 fa20 	bl	800498c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800354c:	193b      	adds	r3, r7, r4
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003558:	f001 fa02 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 800355c:	0003      	movs	r3, r0
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003560:	e004      	b.n	800356c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003562:	f001 f9fd 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8003566:	0003      	movs	r3, r0
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	4926      	ldr	r1, [pc, #152]	; (8003608 <HAL_InitTick+0xf4>)
 8003570:	0018      	movs	r0, r3
 8003572:	f7fc fde5 	bl	8000140 <__udivsi3>
 8003576:	0003      	movs	r3, r0
 8003578:	3b01      	subs	r3, #1
 800357a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_InitTick+0xf8>)
 800357e:	4a24      	ldr	r2, [pc, #144]	; (8003610 <HAL_InitTick+0xfc>)
 8003580:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_InitTick+0xf8>)
 8003584:	4a23      	ldr	r2, [pc, #140]	; (8003614 <HAL_InitTick+0x100>)
 8003586:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003588:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_InitTick+0xf8>)
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800358e:	4b1f      	ldr	r3, [pc, #124]	; (800360c <HAL_InitTick+0xf8>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <HAL_InitTick+0xf8>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_InitTick+0xf8>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035a0:	252b      	movs	r5, #43	; 0x2b
 80035a2:	197c      	adds	r4, r7, r5
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_InitTick+0xf8>)
 80035a6:	0018      	movs	r0, r3
 80035a8:	f002 fbf0 	bl	8005d8c <HAL_TIM_Base_Init>
 80035ac:	0003      	movs	r3, r0
 80035ae:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80035b0:	197b      	adds	r3, r7, r5
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d11e      	bne.n	80035f6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80035b8:	197c      	adds	r4, r7, r5
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_InitTick+0xf8>)
 80035bc:	0018      	movs	r0, r3
 80035be:	f002 fc45 	bl	8005e4c <HAL_TIM_Base_Start_IT>
 80035c2:	0003      	movs	r3, r0
 80035c4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80035c6:	197b      	adds	r3, r7, r5
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d113      	bne.n	80035f6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80035ce:	2011      	movs	r0, #17
 80035d0:	f000 fa1f 	bl	8003a12 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d809      	bhi.n	80035ee <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	0019      	movs	r1, r3
 80035e0:	2011      	movs	r0, #17
 80035e2:	f000 fa01 	bl	80039e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <HAL_InitTick+0x104>)
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e003      	b.n	80035f6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80035ee:	232b      	movs	r3, #43	; 0x2b
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80035f6:	232b      	movs	r3, #43	; 0x2b
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	781b      	ldrb	r3, [r3, #0]
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b00c      	add	sp, #48	; 0x30
 8003602:	bdb0      	pop	{r4, r5, r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	000f4240 	.word	0x000f4240
 800360c:	20000724 	.word	0x20000724
 8003610:	40001000 	.word	0x40001000
 8003614:	000003e7 	.word	0x000003e7
 8003618:	20000008 	.word	0x20000008

0800361c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <NMI_Handler+0x4>

08003622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003626:	e7fe      	b.n	8003626 <HardFault_Handler+0x4>

08003628 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	019b      	lsls	r3, r3, #6
 8003630:	0018      	movs	r0, r3
 8003632:	f000 fc67 	bl	8003f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003642:	0018      	movs	r0, r3
 8003644:	f002 fc5e 	bl	8005f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	20000724 	.word	0x20000724

08003654 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <SPI1_IRQHandler+0x14>)
 800365a:	0018      	movs	r0, r3
 800365c:	f002 f8a6 	bl	80057ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	20000610 	.word	0x20000610

0800366c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <USART2_IRQHandler+0x14>)
 8003672:	0018      	movs	r0, r3
 8003674:	f002 ff80 	bl	8006578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	20000674 	.word	0x20000674

08003684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  return 1;
 8003688:	2301      	movs	r3, #1
}
 800368a:	0018      	movs	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_kill>:

int _kill(int pid, int sig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800369a:	f007 fc03 	bl	800aea4 <__errno>
 800369e:	0003      	movs	r3, r0
 80036a0:	2216      	movs	r2, #22
 80036a2:	601a      	str	r2, [r3, #0]
  return -1;
 80036a4:	2301      	movs	r3, #1
 80036a6:	425b      	negs	r3, r3
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_exit>:

void _exit (int status)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036b8:	2301      	movs	r3, #1
 80036ba:	425a      	negs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0011      	movs	r1, r2
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ffe5 	bl	8003690 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036c6:	e7fe      	b.n	80036c6 <_exit+0x16>

080036c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e00a      	b.n	80036f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036da:	e000      	b.n	80036de <_read+0x16>
 80036dc:	bf00      	nop
 80036de:	0001      	movs	r1, r0
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	60ba      	str	r2, [r7, #8]
 80036e6:	b2ca      	uxtb	r2, r1
 80036e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	3301      	adds	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	dbf0      	blt.n	80036da <_read+0x12>
  }

  return len;
 80036f8:	687b      	ldr	r3, [r7, #4]
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b006      	add	sp, #24
 8003700:	bd80      	pop	{r7, pc}

08003702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b086      	sub	sp, #24
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e009      	b.n	8003728 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	60ba      	str	r2, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	0018      	movs	r0, r3
 800371e:	e000      	b.n	8003722 <_write+0x20>
 8003720:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3301      	adds	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	429a      	cmp	r2, r3
 800372e:	dbf1      	blt.n	8003714 <_write+0x12>
  }
  return len;
 8003730:	687b      	ldr	r3, [r7, #4]
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b006      	add	sp, #24
 8003738:	bd80      	pop	{r7, pc}

0800373a <_close>:

int _close(int file)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003742:	2301      	movs	r3, #1
 8003744:	425b      	negs	r3, r3
}
 8003746:	0018      	movs	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	b002      	add	sp, #8
 800374c:	bd80      	pop	{r7, pc}

0800374e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	0192      	lsls	r2, r2, #6
 800375e:	605a      	str	r2, [r3, #4]
  return 0;
 8003760:	2300      	movs	r3, #0
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <_isatty>:

int _isatty(int file)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003772:	2301      	movs	r3, #1
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}

0800377c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <_sbrk+0x5c>)
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <_sbrk+0x60>)
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <_sbrk+0x64>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_sbrk+0x64>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <_sbrk+0x68>)
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	18d3      	adds	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d207      	bcs.n	80037d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c4:	f007 fb6e 	bl	800aea4 <__errno>
 80037c8:	0003      	movs	r3, r0
 80037ca:	220c      	movs	r2, #12
 80037cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ce:	2301      	movs	r3, #1
 80037d0:	425b      	negs	r3, r3
 80037d2:	e009      	b.n	80037e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	18d2      	adds	r2, r2, r3
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <_sbrk+0x64>)
 80037e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b006      	add	sp, #24
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20009000 	.word	0x20009000
 80037f4:	00000400 	.word	0x00000400
 80037f8:	20000770 	.word	0x20000770
 80037fc:	20002d90 	.word	0x20002d90

08003800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800380c:	480d      	ldr	r0, [pc, #52]	; (8003844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800380e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003810:	f7ff fff6 	bl	8003800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003814:	480c      	ldr	r0, [pc, #48]	; (8003848 <LoopForever+0x6>)
  ldr r1, =_edata
 8003816:	490d      	ldr	r1, [pc, #52]	; (800384c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003818:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <LoopForever+0xe>)
  movs r3, #0
 800381a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800381c:	e002      	b.n	8003824 <LoopCopyDataInit>

0800381e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800381e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003822:	3304      	adds	r3, #4

08003824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003828:	d3f9      	bcc.n	800381e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800382c:	4c0a      	ldr	r4, [pc, #40]	; (8003858 <LoopForever+0x16>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003830:	e001      	b.n	8003836 <LoopFillZerobss>

08003832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003834:	3204      	adds	r2, #4

08003836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003838:	d3fb      	bcc.n	8003832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800383a:	f007 fc3b 	bl	800b0b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800383e:	f7ff fabb 	bl	8002db8 <main>

08003842 <LoopForever>:

LoopForever:
  b LoopForever
 8003842:	e7fe      	b.n	8003842 <LoopForever>
  ldr   r0, =_estack
 8003844:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800384c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003850:	0800e69c 	.word	0x0800e69c
  ldr r2, =_sbss
 8003854:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003858:	20002d90 	.word	0x20002d90

0800385c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800385c:	e7fe      	b.n	800385c <ADC1_COMP_IRQHandler>
	...

08003860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_Init+0x3c>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_Init+0x3c>)
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	0049      	lsls	r1, r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387a:	2003      	movs	r0, #3
 800387c:	f7ff fe4a 	bl	8003514 <HAL_InitTick>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d003      	beq.n	800388c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e001      	b.n	8003890 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800388c:	f7ff fd5e 	bl	800334c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	781b      	ldrb	r3, [r3, #0]
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40022000 	.word	0x40022000

080038a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_IncTick+0x1c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	001a      	movs	r2, r3
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_IncTick+0x20>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	18d2      	adds	r2, r2, r3
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_IncTick+0x20>)
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	2000000c 	.word	0x2000000c
 80038c0:	20000774 	.word	0x20000774

080038c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  return uwTick;
 80038c8:	4b02      	ldr	r3, [pc, #8]	; (80038d4 <HAL_GetTick+0x10>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	20000774 	.word	0x20000774

080038d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	0002      	movs	r2, r0
 80038e0:	1dfb      	adds	r3, r7, #7
 80038e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ea:	d809      	bhi.n	8003900 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	001a      	movs	r2, r3
 80038f2:	231f      	movs	r3, #31
 80038f4:	401a      	ands	r2, r3
 80038f6:	4b04      	ldr	r3, [pc, #16]	; (8003908 <__NVIC_EnableIRQ+0x30>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	4091      	lsls	r1, r2
 80038fc:	000a      	movs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	0002      	movs	r2, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b7f      	cmp	r3, #127	; 0x7f
 8003920:	d828      	bhi.n	8003974 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003922:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <__NVIC_SetPriority+0xd4>)
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b25b      	sxtb	r3, r3
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	33c0      	adds	r3, #192	; 0xc0
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	589b      	ldr	r3, [r3, r2]
 8003932:	1dfa      	adds	r2, r7, #7
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	0011      	movs	r1, r2
 8003938:	2203      	movs	r2, #3
 800393a:	400a      	ands	r2, r1
 800393c:	00d2      	lsls	r2, r2, #3
 800393e:	21ff      	movs	r1, #255	; 0xff
 8003940:	4091      	lsls	r1, r2
 8003942:	000a      	movs	r2, r1
 8003944:	43d2      	mvns	r2, r2
 8003946:	401a      	ands	r2, r3
 8003948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	22ff      	movs	r2, #255	; 0xff
 8003950:	401a      	ands	r2, r3
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	0018      	movs	r0, r3
 8003958:	2303      	movs	r3, #3
 800395a:	4003      	ands	r3, r0
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003960:	481f      	ldr	r0, [pc, #124]	; (80039e0 <__NVIC_SetPriority+0xd4>)
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	430a      	orrs	r2, r1
 800396c:	33c0      	adds	r3, #192	; 0xc0
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003972:	e031      	b.n	80039d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003974:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <__NVIC_SetPriority+0xd8>)
 8003976:	1dfb      	adds	r3, r7, #7
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	0019      	movs	r1, r3
 800397c:	230f      	movs	r3, #15
 800397e:	400b      	ands	r3, r1
 8003980:	3b08      	subs	r3, #8
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3306      	adds	r3, #6
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	18d3      	adds	r3, r2, r3
 800398a:	3304      	adds	r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	1dfa      	adds	r2, r7, #7
 8003990:	7812      	ldrb	r2, [r2, #0]
 8003992:	0011      	movs	r1, r2
 8003994:	2203      	movs	r2, #3
 8003996:	400a      	ands	r2, r1
 8003998:	00d2      	lsls	r2, r2, #3
 800399a:	21ff      	movs	r1, #255	; 0xff
 800399c:	4091      	lsls	r1, r2
 800399e:	000a      	movs	r2, r1
 80039a0:	43d2      	mvns	r2, r2
 80039a2:	401a      	ands	r2, r3
 80039a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	401a      	ands	r2, r3
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	2303      	movs	r3, #3
 80039b6:	4003      	ands	r3, r0
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	4809      	ldr	r0, [pc, #36]	; (80039e4 <__NVIC_SetPriority+0xd8>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	001c      	movs	r4, r3
 80039c4:	230f      	movs	r3, #15
 80039c6:	4023      	ands	r3, r4
 80039c8:	3b08      	subs	r3, #8
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	430a      	orrs	r2, r1
 80039ce:	3306      	adds	r3, #6
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	18c3      	adds	r3, r0, r3
 80039d4:	3304      	adds	r3, #4
 80039d6:	601a      	str	r2, [r3, #0]
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b003      	add	sp, #12
 80039de:	bd90      	pop	{r4, r7, pc}
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	210f      	movs	r1, #15
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	1c02      	adds	r2, r0, #0
 80039f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b25b      	sxtb	r3, r3
 8003a02:	0011      	movs	r1, r2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff ff81 	bl	800390c <__NVIC_SetPriority>
}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	b004      	add	sp, #16
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	0002      	movs	r2, r0
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ff57 	bl	80038d8 <__NVIC_EnableIRQ>
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e050      	b.n	8003ae8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2225      	movs	r2, #37	; 0x25
 8003a4a:	5c9b      	ldrb	r3, [r3, r2]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d008      	beq.n	8003a64 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2204      	movs	r2, #4
 8003a56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e041      	b.n	8003ae8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	210e      	movs	r1, #14
 8003a70:	438a      	bics	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	491c      	ldr	r1, [pc, #112]	; (8003af0 <HAL_DMA_Abort+0xbc>)
 8003a80:	400a      	ands	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	438a      	bics	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003a94:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_DMA_Abort+0xc0>)
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	221c      	movs	r2, #28
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_DMA_Abort+0xc0>)
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ab2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <HAL_DMA_Abort+0xbc>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ad4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2225      	movs	r2, #37	; 0x25
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2224      	movs	r2, #36	; 0x24
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffffeff 	.word	0xfffffeff
 8003af4:	40020000 	.word	0x40020000

08003af8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	210f      	movs	r1, #15
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2225      	movs	r2, #37	; 0x25
 8003b0c:	5c9b      	ldrb	r3, [r3, r2]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d006      	beq.n	8003b22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b1a:	187b      	adds	r3, r7, r1
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	e049      	b.n	8003bb6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	210e      	movs	r1, #14
 8003b2e:	438a      	bics	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	438a      	bics	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4c:	491d      	ldr	r1, [pc, #116]	; (8003bc4 <HAL_DMA_Abort_IT+0xcc>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_DMA_Abort_IT+0xd0>)
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	221c      	movs	r2, #28
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2201      	movs	r2, #1
 8003b60:	409a      	lsls	r2, r3
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_DMA_Abort_IT+0xd0>)
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b84:	490f      	ldr	r1, [pc, #60]	; (8003bc4 <HAL_DMA_Abort_IT+0xcc>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2225      	movs	r2, #37	; 0x25
 8003b98:	2101      	movs	r1, #1
 8003b9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d004      	beq.n	8003bb6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	0010      	movs	r0, r2
 8003bb4:	4798      	blx	r3
    }
  }
  return status;
 8003bb6:	230f      	movs	r3, #15
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	781b      	ldrb	r3, [r3, #0]
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b004      	add	sp, #16
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	fffffeff 	.word	0xfffffeff
 8003bc8:	40020000 	.word	0x40020000

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bda:	e147      	b.n	8003e6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2101      	movs	r1, #1
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4091      	lsls	r1, r2
 8003be6:	000a      	movs	r2, r1
 8003be8:	4013      	ands	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d100      	bne.n	8003bf4 <HAL_GPIO_Init+0x28>
 8003bf2:	e138      	b.n	8003e66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d005      	beq.n	8003c0c <HAL_GPIO_Init+0x40>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2203      	movs	r2, #3
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d130      	bne.n	8003c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	43da      	mvns	r2, r3
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	0013      	movs	r3, r2
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c42:	2201      	movs	r2, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
 8003c48:	0013      	movs	r3, r2
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	2201      	movs	r2, #1
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	0013      	movs	r3, r2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2203      	movs	r2, #3
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d017      	beq.n	8003caa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0013      	movs	r3, r2
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d123      	bne.n	8003cfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	08da      	lsrs	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3208      	adds	r2, #8
 8003cbe:	0092      	lsls	r2, r2, #2
 8003cc0:	58d3      	ldr	r3, [r2, r3]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2207      	movs	r2, #7
 8003cc8:	4013      	ands	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	220f      	movs	r2, #15
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	0013      	movs	r3, r2
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2107      	movs	r1, #7
 8003ce2:	400b      	ands	r3, r1
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	0013      	movs	r3, r2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	6939      	ldr	r1, [r7, #16]
 8003cfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	0013      	movs	r3, r2
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	401a      	ands	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	0013      	movs	r3, r2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	23c0      	movs	r3, #192	; 0xc0
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d100      	bne.n	8003d40 <HAL_GPIO_Init+0x174>
 8003d3e:	e092      	b.n	8003e66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d40:	4a50      	ldr	r2, [pc, #320]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3318      	adds	r3, #24
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	589b      	ldr	r3, [r3, r2]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4013      	ands	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	220f      	movs	r2, #15
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	05db      	lsls	r3, r3, #23
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d013      	beq.n	8003d96 <HAL_GPIO_Init+0x1ca>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a45      	ldr	r2, [pc, #276]	; (8003e88 <HAL_GPIO_Init+0x2bc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00d      	beq.n	8003d92 <HAL_GPIO_Init+0x1c6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a44      	ldr	r2, [pc, #272]	; (8003e8c <HAL_GPIO_Init+0x2c0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <HAL_GPIO_Init+0x1c2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a43      	ldr	r2, [pc, #268]	; (8003e90 <HAL_GPIO_Init+0x2c4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_GPIO_Init+0x1be>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x1cc>
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_Init+0x1cc>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_Init+0x1cc>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_Init+0x1cc>
 8003d96:	2300      	movs	r3, #0
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	00d2      	lsls	r2, r2, #3
 8003da0:	4093      	lsls	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003da8:	4936      	ldr	r1, [pc, #216]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	3318      	adds	r3, #24
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003db6:	4b33      	ldr	r3, [pc, #204]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	035b      	lsls	r3, r3, #13
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dda:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003de0:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	43da      	mvns	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	039b      	lsls	r3, r3, #14
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003e0c:	2384      	movs	r3, #132	; 0x84
 8003e0e:	58d3      	ldr	r3, [r2, r3]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	4013      	ands	r3, r2
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e30:	4914      	ldr	r1, [pc, #80]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003e32:	2284      	movs	r2, #132	; 0x84
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e38:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	58d3      	ldr	r3, [r2, r3]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	4013      	ands	r3, r2
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e5e:	4909      	ldr	r1, [pc, #36]	; (8003e84 <HAL_GPIO_Init+0x2b8>)
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	40da      	lsrs	r2, r3
 8003e74:	1e13      	subs	r3, r2, #0
 8003e76:	d000      	beq.n	8003e7a <HAL_GPIO_Init+0x2ae>
 8003e78:	e6b0      	b.n	8003bdc <HAL_GPIO_Init+0x10>
  }
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b006      	add	sp, #24
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021800 	.word	0x40021800
 8003e88:	50000400 	.word	0x50000400
 8003e8c:	50000800 	.word	0x50000800
 8003e90:	50000c00 	.word	0x50000c00

08003e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	0008      	movs	r0, r1
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	1cbb      	adds	r3, r7, #2
 8003ea2:	1c02      	adds	r2, r0, #0
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	1c7b      	adds	r3, r7, #1
 8003ea8:	1c0a      	adds	r2, r1, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eac:	1c7b      	adds	r3, r7, #1
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d004      	beq.n	8003ebe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eb4:	1cbb      	adds	r3, r7, #2
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ebe:	1cbb      	adds	r3, r7, #2
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b002      	add	sp, #8
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	000a      	movs	r2, r1
 8003ed8:	1cbb      	adds	r3, r7, #2
 8003eda:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ee2:	1cbb      	adds	r3, r7, #2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	041a      	lsls	r2, r3, #16
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	1cb9      	adds	r1, r7, #2
 8003ef2:	8809      	ldrh	r1, [r1, #0]
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	619a      	str	r2, [r3, #24]
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b004      	add	sp, #16
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	0002      	movs	r2, r0
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	1dba      	adds	r2, r7, #6
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d008      	beq.n	8003f2e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f1e:	1dba      	adds	r2, r7, #6
 8003f20:	8812      	ldrh	r2, [r2, #0]
 8003f22:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003f24:	1dbb      	adds	r3, r7, #6
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 f815 	bl	8003f58 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	1dba      	adds	r2, r7, #6
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	4013      	ands	r3, r2
 8003f38:	d008      	beq.n	8003f4c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f3c:	1dba      	adds	r2, r7, #6
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003f42:	1dbb      	adds	r3, r7, #6
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff f902 	bl	8003150 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021800 	.word	0x40021800

08003f58 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	0002      	movs	r2, r0
 8003f60:	1dbb      	adds	r3, r7, #6
 8003f62:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b002      	add	sp, #8
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d11f      	bne.n	8003fd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003f90:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	0013      	movs	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	189b      	adds	r3, r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4912      	ldr	r1, [pc, #72]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7fc f8ce 	bl	8000140 <__udivsi3>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003faa:	e008      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e001      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e009      	b.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d0ed      	beq.n	8003fac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b004      	add	sp, #16
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	fffff9ff 	.word	0xfffff9ff
 8003fe4:	20000004 	.word	0x20000004
 8003fe8:	000f4240 	.word	0x000f4240

08003fec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	23e0      	movs	r3, #224	; 0xe0
 8003ff6:	01db      	lsls	r3, r3, #7
 8003ff8:	4013      	ands	r3, r2
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e2fe      	b.n	8004614 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x1e>
 8004020:	e07c      	b.n	800411c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004022:	4bc3      	ldr	r3, [pc, #780]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2238      	movs	r2, #56	; 0x38
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800402c:	4bc0      	ldr	r3, [pc, #768]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2203      	movs	r2, #3
 8004032:	4013      	ands	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b10      	cmp	r3, #16
 800403a:	d102      	bne.n	8004042 <HAL_RCC_OscConfig+0x3e>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b03      	cmp	r3, #3
 8004040:	d002      	beq.n	8004048 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d10b      	bne.n	8004060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	4bb9      	ldr	r3, [pc, #740]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	029b      	lsls	r3, r3, #10
 8004050:	4013      	ands	r3, r2
 8004052:	d062      	beq.n	800411a <HAL_RCC_OscConfig+0x116>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d15e      	bne.n	800411a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e2d9      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	2380      	movs	r3, #128	; 0x80
 8004066:	025b      	lsls	r3, r3, #9
 8004068:	429a      	cmp	r2, r3
 800406a:	d107      	bne.n	800407c <HAL_RCC_OscConfig+0x78>
 800406c:	4bb0      	ldr	r3, [pc, #704]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4baf      	ldr	r3, [pc, #700]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	0249      	lsls	r1, r1, #9
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e020      	b.n	80040be <HAL_RCC_OscConfig+0xba>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	23a0      	movs	r3, #160	; 0xa0
 8004082:	02db      	lsls	r3, r3, #11
 8004084:	429a      	cmp	r2, r3
 8004086:	d10e      	bne.n	80040a6 <HAL_RCC_OscConfig+0xa2>
 8004088:	4ba9      	ldr	r3, [pc, #676]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4ba8      	ldr	r3, [pc, #672]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	02c9      	lsls	r1, r1, #11
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4ba6      	ldr	r3, [pc, #664]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4ba5      	ldr	r3, [pc, #660]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	0249      	lsls	r1, r1, #9
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e00b      	b.n	80040be <HAL_RCC_OscConfig+0xba>
 80040a6:	4ba2      	ldr	r3, [pc, #648]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4ba1      	ldr	r3, [pc, #644]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040ac:	49a1      	ldr	r1, [pc, #644]	; (8004334 <HAL_RCC_OscConfig+0x330>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	4b9f      	ldr	r3, [pc, #636]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b9e      	ldr	r3, [pc, #632]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040b8:	499f      	ldr	r1, [pc, #636]	; (8004338 <HAL_RCC_OscConfig+0x334>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d014      	beq.n	80040f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7ff fbfd 	bl	80038c4 <HAL_GetTick>
 80040ca:	0003      	movs	r3, r0
 80040cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7ff fbf8 	bl	80038c4 <HAL_GetTick>
 80040d4:	0002      	movs	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e298      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040e2:	4b93      	ldr	r3, [pc, #588]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	2380      	movs	r3, #128	; 0x80
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	4013      	ands	r3, r2
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xcc>
 80040ee:	e015      	b.n	800411c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7ff fbe8 	bl	80038c4 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fa:	f7ff fbe3 	bl	80038c4 <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b64      	cmp	r3, #100	; 0x64
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e283      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800410c:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	029b      	lsls	r3, r3, #10
 8004114:	4013      	ands	r3, r2
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0xf6>
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2202      	movs	r2, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d100      	bne.n	8004128 <HAL_RCC_OscConfig+0x124>
 8004126:	e099      	b.n	800425c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004128:	4b81      	ldr	r3, [pc, #516]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2238      	movs	r2, #56	; 0x38
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004132:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2203      	movs	r2, #3
 8004138:	4013      	ands	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b10      	cmp	r3, #16
 8004140:	d102      	bne.n	8004148 <HAL_RCC_OscConfig+0x144>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d002      	beq.n	800414e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d135      	bne.n	80041ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414e:	4b78      	ldr	r3, [pc, #480]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4013      	ands	r3, r2
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x162>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e256      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b72      	ldr	r3, [pc, #456]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a74      	ldr	r2, [pc, #464]	; (800433c <HAL_RCC_OscConfig+0x338>)
 800416c:	4013      	ands	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d112      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004182:	4b6b      	ldr	r3, [pc, #428]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6e      	ldr	r2, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x33c>)
 8004188:	4013      	ands	r3, r2
 800418a:	0019      	movs	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004196:	4b66      	ldr	r3, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0adb      	lsrs	r3, r3, #11
 800419c:	2207      	movs	r2, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	4a68      	ldr	r2, [pc, #416]	; (8004344 <HAL_RCC_OscConfig+0x340>)
 80041a2:	40da      	lsrs	r2, r3
 80041a4:	4b68      	ldr	r3, [pc, #416]	; (8004348 <HAL_RCC_OscConfig+0x344>)
 80041a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_OscConfig+0x348>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff f9b1 	bl	8003514 <HAL_InitTick>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d051      	beq.n	800425a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e22c      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d030      	beq.n	8004224 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5e      	ldr	r2, [pc, #376]	; (8004340 <HAL_RCC_OscConfig+0x33c>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	4b57      	ldr	r3, [pc, #348]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80041d6:	4b56      	ldr	r3, [pc, #344]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b55      	ldr	r3, [pc, #340]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041dc:	2180      	movs	r1, #128	; 0x80
 80041de:	0049      	lsls	r1, r1, #1
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7ff fb6e 	bl	80038c4 <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ee:	f7ff fb69 	bl	80038c4 <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e209      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004200:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4013      	ands	r3, r2
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b48      	ldr	r3, [pc, #288]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a4a      	ldr	r2, [pc, #296]	; (800433c <HAL_RCC_OscConfig+0x338>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	e01b      	b.n	800425c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004224:	4b42      	ldr	r3, [pc, #264]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800422a:	4949      	ldr	r1, [pc, #292]	; (8004350 <HAL_RCC_OscConfig+0x34c>)
 800422c:	400a      	ands	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7ff fb48 	bl	80038c4 <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423a:	f7ff fb43 	bl	80038c4 <HAL_GetTick>
 800423e:	0002      	movs	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1e3      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424c:	4b38      	ldr	r3, [pc, #224]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4013      	ands	r3, r2
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x236>
 8004258:	e000      	b.n	800425c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	4013      	ands	r3, r2
 8004264:	d047      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004266:	4b32      	ldr	r3, [pc, #200]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2238      	movs	r2, #56	; 0x38
 800426c:	4013      	ands	r3, r2
 800426e:	2b18      	cmp	r3, #24
 8004270:	d10a      	bne.n	8004288 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004272:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	2202      	movs	r2, #2
 8004278:	4013      	ands	r3, r2
 800427a:	d03c      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d138      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e1c5      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d019      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004294:	4b26      	ldr	r3, [pc, #152]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004296:	2101      	movs	r1, #1
 8004298:	430a      	orrs	r2, r1
 800429a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7ff fb12 	bl	80038c4 <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a6:	f7ff fb0d 	bl	80038c4 <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1ad      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d0f1      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2a2>
 80042c2:	e018      	b.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042c4:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	438a      	bics	r2, r1
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7ff faf8 	bl	80038c4 <HAL_GetTick>
 80042d4:	0003      	movs	r3, r0
 80042d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7ff faf3 	bl	80038c4 <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e193      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f0:	2202      	movs	r2, #2
 80042f2:	4013      	ands	r3, r2
 80042f4:	d1f1      	bne.n	80042da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4013      	ands	r3, r2
 80042fe:	d100      	bne.n	8004302 <HAL_RCC_OscConfig+0x2fe>
 8004300:	e0c6      	b.n	8004490 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004302:	231f      	movs	r3, #31
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2238      	movs	r2, #56	; 0x38
 8004310:	4013      	ands	r3, r2
 8004312:	2b20      	cmp	r3, #32
 8004314:	d11e      	bne.n	8004354 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x31e>
 8004320:	e0b6      	b.n	8004490 <HAL_RCC_OscConfig+0x48c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d000      	beq.n	800432c <HAL_RCC_OscConfig+0x328>
 800432a:	e0b1      	b.n	8004490 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e171      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
 8004330:	40021000 	.word	0x40021000
 8004334:	fffeffff 	.word	0xfffeffff
 8004338:	fffbffff 	.word	0xfffbffff
 800433c:	ffff80ff 	.word	0xffff80ff
 8004340:	ffffc7ff 	.word	0xffffc7ff
 8004344:	00f42400 	.word	0x00f42400
 8004348:	20000004 	.word	0x20000004
 800434c:	20000008 	.word	0x20000008
 8004350:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004354:	4bb1      	ldr	r3, [pc, #708]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	055b      	lsls	r3, r3, #21
 800435c:	4013      	ands	r3, r2
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x360>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x362>
 8004364:	2300      	movs	r3, #0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d011      	beq.n	800438e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	4bac      	ldr	r3, [pc, #688]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800436c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800436e:	4bab      	ldr	r3, [pc, #684]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	0549      	lsls	r1, r1, #21
 8004374:	430a      	orrs	r2, r1
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c
 8004378:	4ba8      	ldr	r3, [pc, #672]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800437a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	055b      	lsls	r3, r3, #21
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004386:	231f      	movs	r3, #31
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438e:	4ba4      	ldr	r3, [pc, #656]	; (8004620 <HAL_RCC_OscConfig+0x61c>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4013      	ands	r3, r2
 8004398:	d11a      	bne.n	80043d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439a:	4ba1      	ldr	r3, [pc, #644]	; (8004620 <HAL_RCC_OscConfig+0x61c>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4ba0      	ldr	r3, [pc, #640]	; (8004620 <HAL_RCC_OscConfig+0x61c>)
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	0049      	lsls	r1, r1, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043a8:	f7ff fa8c 	bl	80038c4 <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7ff fa87 	bl	80038c4 <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e127      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c4:	4b96      	ldr	r3, [pc, #600]	; (8004620 <HAL_RCC_OscConfig+0x61c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <HAL_RCC_OscConfig+0x3e2>
 80043d8:	4b90      	ldr	r3, [pc, #576]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80043da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043dc:	4b8f      	ldr	r3, [pc, #572]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80043de:	2101      	movs	r1, #1
 80043e0:	430a      	orrs	r2, r1
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x41c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x404>
 80043ee:	4b8b      	ldr	r3, [pc, #556]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80043f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f2:	4b8a      	ldr	r3, [pc, #552]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80043f4:	2104      	movs	r1, #4
 80043f6:	430a      	orrs	r2, r1
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80043fa:	4b88      	ldr	r3, [pc, #544]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80043fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043fe:	4b87      	ldr	r3, [pc, #540]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004400:	2101      	movs	r1, #1
 8004402:	430a      	orrs	r2, r1
 8004404:	65da      	str	r2, [r3, #92]	; 0x5c
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0x41c>
 8004408:	4b84      	ldr	r3, [pc, #528]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800440a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800440c:	4b83      	ldr	r3, [pc, #524]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800440e:	2101      	movs	r1, #1
 8004410:	438a      	bics	r2, r1
 8004412:	65da      	str	r2, [r3, #92]	; 0x5c
 8004414:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004418:	4b80      	ldr	r3, [pc, #512]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800441a:	2104      	movs	r1, #4
 800441c:	438a      	bics	r2, r1
 800441e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d014      	beq.n	8004452 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7ff fa4c 	bl	80038c4 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004430:	e009      	b.n	8004446 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7ff fa47 	bl	80038c4 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	4a79      	ldr	r2, [pc, #484]	; (8004624 <HAL_RCC_OscConfig+0x620>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0e6      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004446:	4b75      	ldr	r3, [pc, #468]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	2202      	movs	r2, #2
 800444c:	4013      	ands	r3, r2
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x42e>
 8004450:	e013      	b.n	800447a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7ff fa37 	bl	80038c4 <HAL_GetTick>
 8004456:	0003      	movs	r3, r0
 8004458:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800445a:	e009      	b.n	8004470 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7ff fa32 	bl	80038c4 <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	4a6f      	ldr	r2, [pc, #444]	; (8004624 <HAL_RCC_OscConfig+0x620>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0d1      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	4b6a      	ldr	r3, [pc, #424]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800447a:	231f      	movs	r3, #31
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004484:	4b65      	ldr	r3, [pc, #404]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004488:	4b64      	ldr	r3, [pc, #400]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800448a:	4967      	ldr	r1, [pc, #412]	; (8004628 <HAL_RCC_OscConfig+0x624>)
 800448c:	400a      	ands	r2, r1
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d100      	bne.n	800449a <HAL_RCC_OscConfig+0x496>
 8004498:	e0bb      	b.n	8004612 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449a:	4b60      	ldr	r3, [pc, #384]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2238      	movs	r2, #56	; 0x38
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d100      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4a4>
 80044a6:	e07b      	b.n	80045a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d156      	bne.n	800455e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b5a      	ldr	r3, [pc, #360]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80044b6:	495d      	ldr	r1, [pc, #372]	; (800462c <HAL_RCC_OscConfig+0x628>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7ff fa02 	bl	80038c4 <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7ff f9fd 	bl	80038c4 <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e09d      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	049b      	lsls	r3, r3, #18
 80044e0:	4013      	ands	r3, r2
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e4:	4b4d      	ldr	r3, [pc, #308]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a51      	ldr	r2, [pc, #324]	; (8004630 <HAL_RCC_OscConfig+0x62c>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	431a      	orrs	r2, r3
 8004512:	4b42      	ldr	r3, [pc, #264]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004514:	430a      	orrs	r2, r1
 8004516:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b40      	ldr	r3, [pc, #256]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	0449      	lsls	r1, r1, #17
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004526:	4b3d      	ldr	r3, [pc, #244]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	4b3c      	ldr	r3, [pc, #240]	; (800461c <HAL_RCC_OscConfig+0x618>)
 800452c:	2180      	movs	r1, #128	; 0x80
 800452e:	0549      	lsls	r1, r1, #21
 8004530:	430a      	orrs	r2, r1
 8004532:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7ff f9c6 	bl	80038c4 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7ff f9c1 	bl	80038c4 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e061      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004550:	4b32      	ldr	r3, [pc, #200]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	049b      	lsls	r3, r3, #18
 8004558:	4013      	ands	r3, r2
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x53a>
 800455c:	e059      	b.n	8004612 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b2f      	ldr	r3, [pc, #188]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004564:	4931      	ldr	r1, [pc, #196]	; (800462c <HAL_RCC_OscConfig+0x628>)
 8004566:	400a      	ands	r2, r1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7ff f9ab 	bl	80038c4 <HAL_GetTick>
 800456e:	0003      	movs	r3, r0
 8004570:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7ff f9a6 	bl	80038c4 <HAL_GetTick>
 8004578:	0002      	movs	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e046      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004586:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	049b      	lsls	r3, r3, #18
 800458e:	4013      	ands	r3, r2
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x618>)
 8004598:	4926      	ldr	r1, [pc, #152]	; (8004634 <HAL_RCC_OscConfig+0x630>)
 800459a:	400a      	ands	r2, r1
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e038      	b.n	8004612 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e033      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045ac:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_RCC_OscConfig+0x618>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2203      	movs	r2, #3
 80045b6:	401a      	ands	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d126      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2270      	movs	r2, #112	; 0x70
 80045c4:	401a      	ands	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d11f      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	23fe      	movs	r3, #254	; 0xfe
 80045d2:	01db      	lsls	r3, r3, #7
 80045d4:	401a      	ands	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d116      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	23f8      	movs	r3, #248	; 0xf8
 80045e4:	039b      	lsls	r3, r3, #14
 80045e6:	401a      	ands	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10e      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	23e0      	movs	r3, #224	; 0xe0
 80045f4:	051b      	lsls	r3, r3, #20
 80045f6:	401a      	ands	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	0f5b      	lsrs	r3, r3, #29
 8004604:	075a      	lsls	r2, r3, #29
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b008      	add	sp, #32
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	40007000 	.word	0x40007000
 8004624:	00001388 	.word	0x00001388
 8004628:	efffffff 	.word	0xefffffff
 800462c:	feffffff 	.word	0xfeffffff
 8004630:	11c1808c 	.word	0x11c1808c
 8004634:	eefefffc 	.word	0xeefefffc

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0e9      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b76      	ldr	r3, [pc, #472]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2207      	movs	r2, #7
 8004652:	4013      	ands	r3, r2
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d91e      	bls.n	8004698 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b73      	ldr	r3, [pc, #460]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2207      	movs	r2, #7
 8004660:	4393      	bics	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	4b70      	ldr	r3, [pc, #448]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800466c:	f7ff f92a 	bl	80038c4 <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004674:	e009      	b.n	800468a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004676:	f7ff f925 	bl	80038c4 <HAL_GetTick>
 800467a:	0002      	movs	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	4a6a      	ldr	r2, [pc, #424]	; (800482c <HAL_RCC_ClockConfig+0x1f4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0ca      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800468a:	4b67      	ldr	r3, [pc, #412]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2207      	movs	r2, #7
 8004690:	4013      	ands	r3, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d1ee      	bne.n	8004676 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2202      	movs	r2, #2
 800469e:	4013      	ands	r3, r2
 80046a0:	d015      	beq.n	80046ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2204      	movs	r2, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	d006      	beq.n	80046ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046ac:	4b60      	ldr	r3, [pc, #384]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b5f      	ldr	r3, [pc, #380]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046b2:	21e0      	movs	r1, #224	; 0xe0
 80046b4:	01c9      	lsls	r1, r1, #7
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ba:	4b5d      	ldr	r3, [pc, #372]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4a5d      	ldr	r2, [pc, #372]	; (8004834 <HAL_RCC_ClockConfig+0x1fc>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4b59      	ldr	r3, [pc, #356]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d057      	beq.n	8004788 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	4013      	ands	r3, r2
 80046ea:	d12b      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e097      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f8:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	049b      	lsls	r3, r3, #18
 8004700:	4013      	ands	r3, r2
 8004702:	d11f      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e08b      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004710:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4013      	ands	r3, r2
 800471a:	d113      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e07f      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d106      	bne.n	8004736 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004728:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 800472a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d108      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e074      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004736:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	2202      	movs	r2, #2
 800473c:	4013      	ands	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e06d      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004744:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2207      	movs	r2, #7
 800474a:	4393      	bics	r3, r2
 800474c:	0019      	movs	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004758:	f7ff f8b4 	bl	80038c4 <HAL_GetTick>
 800475c:	0003      	movs	r3, r0
 800475e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004760:	e009      	b.n	8004776 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004762:	f7ff f8af 	bl	80038c4 <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	4a2f      	ldr	r2, [pc, #188]	; (800482c <HAL_RCC_ClockConfig+0x1f4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e054      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2238      	movs	r2, #56	; 0x38
 800477c:	401a      	ands	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	429a      	cmp	r2, r3
 8004786:	d1ec      	bne.n	8004762 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2207      	movs	r2, #7
 800478e:	4013      	ands	r3, r2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d21e      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2207      	movs	r2, #7
 800479c:	4393      	bics	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047a8:	f7ff f88c 	bl	80038c4 <HAL_GetTick>
 80047ac:	0003      	movs	r3, r0
 80047ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047b0:	e009      	b.n	80047c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b2:	f7ff f887 	bl	80038c4 <HAL_GetTick>
 80047b6:	0002      	movs	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	4a1b      	ldr	r2, [pc, #108]	; (800482c <HAL_RCC_ClockConfig+0x1f4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e02c      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2207      	movs	r2, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2204      	movs	r2, #4
 80047da:	4013      	ands	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_RCC_ClockConfig+0x200>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047f2:	f000 f829 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 80047f6:	0001      	movs	r1, r0
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	220f      	movs	r2, #15
 8004800:	401a      	ands	r2, r3
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <HAL_RCC_ClockConfig+0x204>)
 8004804:	0092      	lsls	r2, r2, #2
 8004806:	58d3      	ldr	r3, [r2, r3]
 8004808:	221f      	movs	r2, #31
 800480a:	4013      	ands	r3, r2
 800480c:	000a      	movs	r2, r1
 800480e:	40da      	lsrs	r2, r3
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x208>)
 8004812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_ClockConfig+0x20c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0018      	movs	r0, r3
 800481a:	f7fe fe7b 	bl	8003514 <HAL_InitTick>
 800481e:	0003      	movs	r3, r0
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40022000 	.word	0x40022000
 800482c:	00001388 	.word	0x00001388
 8004830:	40021000 	.word	0x40021000
 8004834:	fffff0ff 	.word	0xfffff0ff
 8004838:	ffff8fff 	.word	0xffff8fff
 800483c:	0800e1dc 	.word	0x0800e1dc
 8004840:	20000004 	.word	0x20000004
 8004844:	20000008 	.word	0x20000008

08004848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800484e:	4b3c      	ldr	r3, [pc, #240]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2238      	movs	r2, #56	; 0x38
 8004854:	4013      	ands	r3, r2
 8004856:	d10f      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004858:	4b39      	ldr	r3, [pc, #228]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0adb      	lsrs	r3, r3, #11
 800485e:	2207      	movs	r2, #7
 8004860:	4013      	ands	r3, r2
 8004862:	2201      	movs	r2, #1
 8004864:	409a      	lsls	r2, r3
 8004866:	0013      	movs	r3, r2
 8004868:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	4835      	ldr	r0, [pc, #212]	; (8004944 <HAL_RCC_GetSysClockFreq+0xfc>)
 800486e:	f7fb fc67 	bl	8000140 <__udivsi3>
 8004872:	0003      	movs	r3, r0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e05d      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2238      	movs	r2, #56	; 0x38
 800487e:	4013      	ands	r3, r2
 8004880:	2b08      	cmp	r3, #8
 8004882:	d102      	bne.n	800488a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004884:	4b30      	ldr	r3, [pc, #192]	; (8004948 <HAL_RCC_GetSysClockFreq+0x100>)
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e054      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2238      	movs	r2, #56	; 0x38
 8004890:	4013      	ands	r3, r2
 8004892:	2b10      	cmp	r3, #16
 8004894:	d138      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004896:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2203      	movs	r2, #3
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a0:	4b27      	ldr	r3, [pc, #156]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	2207      	movs	r2, #7
 80048a8:	4013      	ands	r3, r2
 80048aa:	3301      	adds	r3, #1
 80048ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4824      	ldr	r0, [pc, #144]	; (8004948 <HAL_RCC_GetSysClockFreq+0x100>)
 80048b8:	f7fb fc42 	bl	8000140 <__udivsi3>
 80048bc:	0003      	movs	r3, r0
 80048be:	0019      	movs	r1, r3
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	227f      	movs	r2, #127	; 0x7f
 80048c8:	4013      	ands	r3, r2
 80048ca:	434b      	muls	r3, r1
 80048cc:	617b      	str	r3, [r7, #20]
        break;
 80048ce:	e00d      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	481c      	ldr	r0, [pc, #112]	; (8004944 <HAL_RCC_GetSysClockFreq+0xfc>)
 80048d4:	f7fb fc34 	bl	8000140 <__udivsi3>
 80048d8:	0003      	movs	r3, r0
 80048da:	0019      	movs	r1, r3
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	227f      	movs	r2, #127	; 0x7f
 80048e4:	4013      	ands	r3, r2
 80048e6:	434b      	muls	r3, r1
 80048e8:	617b      	str	r3, [r7, #20]
        break;
 80048ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0f5b      	lsrs	r3, r3, #29
 80048f2:	2207      	movs	r2, #7
 80048f4:	4013      	ands	r3, r2
 80048f6:	3301      	adds	r3, #1
 80048f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	f7fb fc1f 	bl	8000140 <__udivsi3>
 8004902:	0003      	movs	r3, r0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e015      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2238      	movs	r2, #56	; 0x38
 800490e:	4013      	ands	r3, r2
 8004910:	2b20      	cmp	r3, #32
 8004912:	d103      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e00b      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2238      	movs	r2, #56	; 0x38
 8004922:	4013      	ands	r3, r2
 8004924:	2b18      	cmp	r3, #24
 8004926:	d103      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004928:	23fa      	movs	r3, #250	; 0xfa
 800492a:	01db      	lsls	r3, r3, #7
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e001      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004934:	693b      	ldr	r3, [r7, #16]
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b006      	add	sp, #24
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	40021000 	.word	0x40021000
 8004944:	00f42400 	.word	0x00f42400
 8004948:	007a1200 	.word	0x007a1200

0800494c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b02      	ldr	r3, [pc, #8]	; (800495c <HAL_RCC_GetHCLKFreq+0x10>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	20000004 	.word	0x20000004

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004964:	f7ff fff2 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8004968:	0004      	movs	r4, r0
 800496a:	f7ff fb3f 	bl	8003fec <LL_RCC_GetAPB1Prescaler>
 800496e:	0003      	movs	r3, r0
 8004970:	0b1a      	lsrs	r2, r3, #12
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004974:	0092      	lsls	r2, r2, #2
 8004976:	58d3      	ldr	r3, [r2, r3]
 8004978:	221f      	movs	r2, #31
 800497a:	4013      	ands	r3, r2
 800497c:	40dc      	lsrs	r4, r3
 800497e:	0023      	movs	r3, r4
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	bdb0      	pop	{r4, r5, r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	0800e21c 	.word	0x0800e21c

0800498c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2207      	movs	r2, #7
 800499a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800499c:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_RCC_GetClockConfig+0x4c>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2207      	movs	r2, #7
 80049a2:	401a      	ands	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <HAL_RCC_GetClockConfig+0x4c>)
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	23f0      	movs	r3, #240	; 0xf0
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	401a      	ands	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80049b6:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_RCC_GetClockConfig+0x4c>)
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	23e0      	movs	r3, #224	; 0xe0
 80049bc:	01db      	lsls	r3, r3, #7
 80049be:	401a      	ands	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCC_GetClockConfig+0x50>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2207      	movs	r2, #7
 80049ca:	401a      	ands	r2, r3
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40022000 	.word	0x40022000

080049e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80049e8:	2313      	movs	r3, #19
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049f0:	2312      	movs	r3, #18
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	4013      	ands	r3, r2
 8004a02:	d100      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004a04:	e0a3      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a06:	2011      	movs	r0, #17
 8004a08:	183b      	adds	r3, r7, r0
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a0e:	4bc3      	ldr	r3, [pc, #780]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	055b      	lsls	r3, r3, #21
 8004a16:	4013      	ands	r3, r2
 8004a18:	d110      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1a:	4bc0      	ldr	r3, [pc, #768]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1e:	4bbf      	ldr	r3, [pc, #764]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	0549      	lsls	r1, r1, #21
 8004a24:	430a      	orrs	r2, r1
 8004a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a28:	4bbc      	ldr	r3, [pc, #752]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	055b      	lsls	r3, r3, #21
 8004a30:	4013      	ands	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a36:	183b      	adds	r3, r7, r0
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a3c:	4bb8      	ldr	r3, [pc, #736]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4bb7      	ldr	r3, [pc, #732]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	0049      	lsls	r1, r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a4a:	f7fe ff3b 	bl	80038c4 <HAL_GetTick>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a52:	e00b      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a54:	f7fe ff36 	bl	80038c4 <HAL_GetTick>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d904      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a62:	2313      	movs	r3, #19
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	2203      	movs	r2, #3
 8004a68:	701a      	strb	r2, [r3, #0]
        break;
 8004a6a:	e005      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a6c:	4bac      	ldr	r3, [pc, #688]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	d0ed      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a78:	2313      	movs	r3, #19
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d154      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a82:	4ba6      	ldr	r3, [pc, #664]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a86:	23c0      	movs	r3, #192	; 0xc0
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d019      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d014      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a9e:	4b9f      	ldr	r3, [pc, #636]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	4aa0      	ldr	r2, [pc, #640]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004aa8:	4b9c      	ldr	r3, [pc, #624]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aac:	4b9b      	ldr	r3, [pc, #620]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	0249      	lsls	r1, r1, #9
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab6:	4b99      	ldr	r3, [pc, #612]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aba:	4b98      	ldr	r3, [pc, #608]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004abc:	499a      	ldr	r1, [pc, #616]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ac2:	4b96      	ldr	r3, [pc, #600]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2201      	movs	r2, #1
 8004acc:	4013      	ands	r3, r2
 8004ace:	d016      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fe fef8 	bl	80038c4 <HAL_GetTick>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fe fef3 	bl	80038c4 <HAL_GetTick>
 8004ade:	0002      	movs	r2, r0
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	4a91      	ldr	r2, [pc, #580]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d904      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004aea:	2313      	movs	r3, #19
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	2203      	movs	r2, #3
 8004af0:	701a      	strb	r2, [r3, #0]
            break;
 8004af2:	e004      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af4:	4b89      	ldr	r3, [pc, #548]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af8:	2202      	movs	r2, #2
 8004afa:	4013      	ands	r3, r2
 8004afc:	d0ed      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004afe:	2313      	movs	r3, #19
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b08:	4b84      	ldr	r3, [pc, #528]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	4a85      	ldr	r2, [pc, #532]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b16:	4b81      	ldr	r3, [pc, #516]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b1c:	e00c      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b1e:	2312      	movs	r3, #18
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	2213      	movs	r2, #19
 8004b24:	18ba      	adds	r2, r7, r2
 8004b26:	7812      	ldrb	r2, [r2, #0]
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e005      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2c:	2312      	movs	r3, #18
 8004b2e:	18fb      	adds	r3, r7, r3
 8004b30:	2213      	movs	r2, #19
 8004b32:	18ba      	adds	r2, r7, r2
 8004b34:	7812      	ldrb	r2, [r2, #0]
 8004b36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b38:	2311      	movs	r3, #17
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b46:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b48:	4979      	ldr	r1, [pc, #484]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	d009      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	4393      	bics	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	4b6d      	ldr	r3, [pc, #436]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2202      	movs	r2, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d009      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b76:	4b69      	ldr	r3, [pc, #420]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	4393      	bics	r3, r2
 8004b7e:	0019      	movs	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	4b65      	ldr	r3, [pc, #404]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b86:	430a      	orrs	r2, r1
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	4013      	ands	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b94:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	4a66      	ldr	r2, [pc, #408]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	4a5f      	ldr	r2, [pc, #380]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	4b56      	ldr	r3, [pc, #344]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bd4:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	0019      	movs	r1, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004be4:	430a      	orrs	r2, r1
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2220      	movs	r2, #32
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	4a52      	ldr	r2, [pc, #328]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	4b46      	ldr	r3, [pc, #280]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c02:	430a      	orrs	r2, r1
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	01db      	lsls	r3, r3, #7
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d015      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c12:	4b42      	ldr	r3, [pc, #264]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	0899      	lsrs	r1, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c20:	430a      	orrs	r2, r1
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	05db      	lsls	r3, r3, #23
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c36:	2180      	movs	r1, #128	; 0x80
 8004c38:	0249      	lsls	r1, r1, #9
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	031b      	lsls	r3, r3, #12
 8004c46:	4013      	ands	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	2240      	movs	r2, #64	; 0x40
 8004c50:	4393      	bics	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c58:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	039b      	lsls	r3, r3, #14
 8004c66:	4013      	ands	r3, r2
 8004c68:	d016      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	4a35      	ldr	r2, [pc, #212]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	0019      	movs	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	03db      	lsls	r3, r3, #15
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d106      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c90:	2180      	movs	r1, #128	; 0x80
 8004c92:	0449      	lsls	r1, r1, #17
 8004c94:	430a      	orrs	r2, r1
 8004c96:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	; 0x80
 8004c9e:	03db      	lsls	r3, r3, #15
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d016      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	045b      	lsls	r3, r3, #17
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cc6:	68da      	ldr	r2, [r3, #12]
 8004cc8:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cca:	2180      	movs	r1, #128	; 0x80
 8004ccc:	0449      	lsls	r1, r1, #17
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d016      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	01db      	lsls	r3, r3, #7
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d106      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	0249      	lsls	r1, r1, #9
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d0c:	2312      	movs	r3, #18
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	781b      	ldrb	r3, [r3, #0]
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b006      	add	sp, #24
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40007000 	.word	0x40007000
 8004d24:	fffffcff 	.word	0xfffffcff
 8004d28:	fffeffff 	.word	0xfffeffff
 8004d2c:	00001388 	.word	0x00001388
 8004d30:	efffffff 	.word	0xefffffff
 8004d34:	fffff3ff 	.word	0xfffff3ff
 8004d38:	fff3ffff 	.word	0xfff3ffff
 8004d3c:	ffcfffff 	.word	0xffcfffff
 8004d40:	ffffcfff 	.word	0xffffcfff
 8004d44:	ffbfffff 	.word	0xffbfffff
 8004d48:	feffffff 	.word	0xfeffffff
 8004d4c:	ffff3fff 	.word	0xffff3fff

08004d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0a8      	b.n	8004eb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	2382      	movs	r3, #130	; 0x82
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d009      	beq.n	8004d8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	61da      	str	r2, [r3, #28]
 8004d7c:	e005      	b.n	8004d8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	225d      	movs	r2, #93	; 0x5d
 8004d94:	5c9b      	ldrb	r3, [r3, r2]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	225c      	movs	r2, #92	; 0x5c
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7fe fafa 	bl	80033a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	225d      	movs	r2, #93	; 0x5d
 8004db0:	2102      	movs	r1, #2
 8004db2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2140      	movs	r1, #64	; 0x40
 8004dc0:	438a      	bics	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	23e0      	movs	r3, #224	; 0xe0
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d902      	bls.n	8004dd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e002      	b.n	8004ddc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	015b      	lsls	r3, r3, #5
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	23f0      	movs	r3, #240	; 0xf0
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d008      	beq.n	8004dfa <HAL_SPI_Init+0xaa>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	23e0      	movs	r3, #224	; 0xe0
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	2382      	movs	r3, #130	; 0x82
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	401a      	ands	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6899      	ldr	r1, [r3, #8]
 8004e08:	2384      	movs	r3, #132	; 0x84
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	400b      	ands	r3, r1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2102      	movs	r1, #2
 8004e16:	400b      	ands	r3, r1
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	400b      	ands	r3, r1
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	400b      	ands	r3, r1
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69db      	ldr	r3, [r3, #28]
 8004e34:	2138      	movs	r1, #56	; 0x38
 8004e36:	400b      	ands	r3, r1
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	400b      	ands	r3, r1
 8004e42:	431a      	orrs	r2, r3
 8004e44:	0011      	movs	r1, r2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	401a      	ands	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	2204      	movs	r2, #4
 8004e60:	401a      	ands	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2110      	movs	r1, #16
 8004e68:	400b      	ands	r3, r1
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	2108      	movs	r1, #8
 8004e72:	400b      	ands	r3, r1
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	23f0      	movs	r3, #240	; 0xf0
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	400b      	ands	r3, r1
 8004e80:	431a      	orrs	r2, r3
 8004e82:	0011      	movs	r1, r2
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	015b      	lsls	r3, r3, #5
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4907      	ldr	r1, [pc, #28]	; (8004ebc <HAL_SPI_Init+0x16c>)
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	225d      	movs	r2, #93	; 0x5d
 8004eae:	2101      	movs	r1, #1
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	fffff7ff 	.word	0xfffff7ff

08004ec0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ed0:	231f      	movs	r3, #31
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	225c      	movs	r2, #92	; 0x5c
 8004edc:	5c9b      	ldrb	r3, [r3, r2]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_SPI_Transmit+0x26>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e140      	b.n	8005168 <HAL_SPI_Transmit+0x2a8>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	225c      	movs	r2, #92	; 0x5c
 8004eea:	2101      	movs	r1, #1
 8004eec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eee:	f7fe fce9 	bl	80038c4 <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ef6:	2316      	movs	r3, #22
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	1dba      	adds	r2, r7, #6
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	225d      	movs	r2, #93	; 0x5d
 8004f04:	5c9b      	ldrb	r3, [r3, r2]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d004      	beq.n	8004f16 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004f0c:	231f      	movs	r3, #31
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2202      	movs	r2, #2
 8004f12:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f14:	e11d      	b.n	8005152 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_SPI_Transmit+0x64>
 8004f1c:	1dbb      	adds	r3, r7, #6
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004f24:	231f      	movs	r3, #31
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	2201      	movs	r2, #1
 8004f2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f2c:	e111      	b.n	8005152 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	225d      	movs	r2, #93	; 0x5d
 8004f32:	2103      	movs	r1, #3
 8004f34:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1dba      	adds	r2, r7, #6
 8004f46:	8812      	ldrh	r2, [r2, #0]
 8004f48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1dba      	adds	r2, r7, #6
 8004f4e:	8812      	ldrh	r2, [r2, #0]
 8004f50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2244      	movs	r2, #68	; 0x44
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2246      	movs	r2, #70	; 0x46
 8004f64:	2100      	movs	r1, #0
 8004f66:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d110      	bne.n	8004fa2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2140      	movs	r1, #64	; 0x40
 8004f8c:	438a      	bics	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	01c9      	lsls	r1, r1, #7
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2240      	movs	r2, #64	; 0x40
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d007      	beq.n	8004fc0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2140      	movs	r1, #64	; 0x40
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	23e0      	movs	r3, #224	; 0xe0
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d94e      	bls.n	800506a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <HAL_SPI_Transmit+0x11e>
 8004fd4:	2316      	movs	r3, #22
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d13f      	bne.n	800505e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005002:	e02c      	b.n	800505e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2202      	movs	r2, #2
 800500c:	4013      	ands	r3, r2
 800500e:	2b02      	cmp	r3, #2
 8005010:	d112      	bne.n	8005038 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	881a      	ldrh	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005036:	e012      	b.n	800505e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005038:	f7fe fc44 	bl	80038c4 <HAL_GetTick>
 800503c:	0002      	movs	r2, r0
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d802      	bhi.n	800504e <HAL_SPI_Transmit+0x18e>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	d102      	bne.n	8005054 <HAL_SPI_Transmit+0x194>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005054:	231f      	movs	r3, #31
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	2203      	movs	r2, #3
 800505a:	701a      	strb	r2, [r3, #0]
          goto error;
 800505c:	e079      	b.n	8005152 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1cd      	bne.n	8005004 <HAL_SPI_Transmit+0x144>
 8005068:	e04f      	b.n	800510a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_SPI_Transmit+0x1bc>
 8005072:	2316      	movs	r3, #22
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d141      	bne.n	8005100 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	330c      	adds	r3, #12
 8005086:	7812      	ldrb	r2, [r2, #0]
 8005088:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80050a2:	e02d      	b.n	8005100 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2202      	movs	r2, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d113      	bne.n	80050da <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050d8:	e012      	b.n	8005100 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050da:	f7fe fbf3 	bl	80038c4 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d802      	bhi.n	80050f0 <HAL_SPI_Transmit+0x230>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	d102      	bne.n	80050f6 <HAL_SPI_Transmit+0x236>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80050f6:	231f      	movs	r3, #31
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	2203      	movs	r2, #3
 80050fc:	701a      	strb	r2, [r3, #0]
          goto error;
 80050fe:	e028      	b.n	8005152 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cc      	bne.n	80050a4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 fdf5 	bl	8005d00 <SPI_EndRxTxTransaction>
 8005116:	1e03      	subs	r3, r0, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10a      	bne.n	800513e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005146:	231f      	movs	r3, #31
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e000      	b.n	8005152 <HAL_SPI_Transmit+0x292>
  }

error:
 8005150:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	225d      	movs	r2, #93	; 0x5d
 8005156:	2101      	movs	r1, #1
 8005158:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	225c      	movs	r2, #92	; 0x5c
 800515e:	2100      	movs	r1, #0
 8005160:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005162:	231f      	movs	r3, #31
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	781b      	ldrb	r3, [r3, #0]
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b008      	add	sp, #32
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	1dbb      	adds	r3, r7, #6
 800517e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005180:	2317      	movs	r3, #23
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	2382      	movs	r3, #130	; 0x82
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	429a      	cmp	r2, r3
 8005192:	d113      	bne.n	80051bc <HAL_SPI_Receive+0x4c>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10f      	bne.n	80051bc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	225d      	movs	r2, #93	; 0x5d
 80051a0:	2104      	movs	r1, #4
 80051a2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051a4:	1dbb      	adds	r3, r7, #6
 80051a6:	881c      	ldrh	r4, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	0023      	movs	r3, r4
 80051b4:	f000 f928 	bl	8005408 <HAL_SPI_TransmitReceive>
 80051b8:	0003      	movs	r3, r0
 80051ba:	e11c      	b.n	80053f6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	225c      	movs	r2, #92	; 0x5c
 80051c0:	5c9b      	ldrb	r3, [r3, r2]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_SPI_Receive+0x5a>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e115      	b.n	80053f6 <HAL_SPI_Receive+0x286>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	225c      	movs	r2, #92	; 0x5c
 80051ce:	2101      	movs	r1, #1
 80051d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d2:	f7fe fb77 	bl	80038c4 <HAL_GetTick>
 80051d6:	0003      	movs	r3, r0
 80051d8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	225d      	movs	r2, #93	; 0x5d
 80051de:	5c9b      	ldrb	r3, [r3, r2]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d004      	beq.n	80051f0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80051e6:	2317      	movs	r3, #23
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80051ee:	e0f7      	b.n	80053e0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_SPI_Receive+0x8e>
 80051f6:	1dbb      	adds	r3, r7, #6
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d104      	bne.n	8005208 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80051fe:	2317      	movs	r3, #23
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
    goto error;
 8005206:	e0eb      	b.n	80053e0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	225d      	movs	r2, #93	; 0x5d
 800520c:	2104      	movs	r1, #4
 800520e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1dba      	adds	r2, r7, #6
 8005220:	2144      	movs	r1, #68	; 0x44
 8005222:	8812      	ldrh	r2, [r2, #0]
 8005224:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1dba      	adds	r2, r7, #6
 800522a:	2146      	movs	r1, #70	; 0x46
 800522c:	8812      	ldrh	r2, [r2, #0]
 800522e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	23e0      	movs	r3, #224	; 0xe0
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	429a      	cmp	r2, r3
 8005258:	d908      	bls.n	800526c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4966      	ldr	r1, [pc, #408]	; (8005400 <HAL_SPI_Receive+0x290>)
 8005266:	400a      	ands	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	e008      	b.n	800527e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	0149      	lsls	r1, r1, #5
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	429a      	cmp	r2, r3
 8005288:	d10f      	bne.n	80052aa <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2140      	movs	r1, #64	; 0x40
 8005296:	438a      	bics	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4957      	ldr	r1, [pc, #348]	; (8005404 <HAL_SPI_Receive+0x294>)
 80052a6:	400a      	ands	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2240      	movs	r2, #64	; 0x40
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d007      	beq.n	80052c8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2140      	movs	r1, #64	; 0x40
 80052c4:	430a      	orrs	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	23e0      	movs	r3, #224	; 0xe0
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d900      	bls.n	80052d6 <HAL_SPI_Receive+0x166>
 80052d4:	e069      	b.n	80053aa <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052d6:	e031      	b.n	800533c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2201      	movs	r2, #1
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d117      	bne.n	8005316 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	001a      	movs	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2246      	movs	r2, #70	; 0x46
 8005306:	5a9b      	ldrh	r3, [r3, r2]
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b299      	uxth	r1, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2246      	movs	r2, #70	; 0x46
 8005312:	5299      	strh	r1, [r3, r2]
 8005314:	e012      	b.n	800533c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005316:	f7fe fad5 	bl	80038c4 <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d802      	bhi.n	800532c <HAL_SPI_Receive+0x1bc>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	d102      	bne.n	8005332 <HAL_SPI_Receive+0x1c2>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005332:	2317      	movs	r3, #23
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	2203      	movs	r2, #3
 8005338:	701a      	strb	r2, [r3, #0]
          goto error;
 800533a:	e051      	b.n	80053e0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2246      	movs	r2, #70	; 0x46
 8005340:	5a9b      	ldrh	r3, [r3, r2]
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1c7      	bne.n	80052d8 <HAL_SPI_Receive+0x168>
 8005348:	e035      	b.n	80053b6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	2b01      	cmp	r3, #1
 8005356:	d115      	bne.n	8005384 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	b292      	uxth	r2, r2
 8005364:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	1c9a      	adds	r2, r3, #2
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2246      	movs	r2, #70	; 0x46
 8005374:	5a9b      	ldrh	r3, [r3, r2]
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b299      	uxth	r1, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2246      	movs	r2, #70	; 0x46
 8005380:	5299      	strh	r1, [r3, r2]
 8005382:	e012      	b.n	80053aa <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005384:	f7fe fa9e 	bl	80038c4 <HAL_GetTick>
 8005388:	0002      	movs	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d802      	bhi.n	800539a <HAL_SPI_Receive+0x22a>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	d102      	bne.n	80053a0 <HAL_SPI_Receive+0x230>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d104      	bne.n	80053aa <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80053a0:	2317      	movs	r3, #23
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	2203      	movs	r2, #3
 80053a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80053a8:	e01a      	b.n	80053e0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2246      	movs	r2, #70	; 0x46
 80053ae:	5a9b      	ldrh	r3, [r3, r2]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1c9      	bne.n	800534a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	0018      	movs	r0, r3
 80053be:	f000 fc41 	bl	8005c44 <SPI_EndRxTransaction>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80053d4:	2317      	movs	r3, #23
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e000      	b.n	80053e0 <HAL_SPI_Receive+0x270>
  }

error :
 80053de:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	225d      	movs	r2, #93	; 0x5d
 80053e4:	2101      	movs	r1, #1
 80053e6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	225c      	movs	r2, #92	; 0x5c
 80053ec:	2100      	movs	r1, #0
 80053ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80053f0:	2317      	movs	r3, #23
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	781b      	ldrb	r3, [r3, #0]
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b007      	add	sp, #28
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	ffffefff 	.word	0xffffefff
 8005404:	ffffbfff 	.word	0xffffbfff

08005408 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	001a      	movs	r2, r3
 8005416:	1cbb      	adds	r3, r7, #2
 8005418:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800541a:	2301      	movs	r3, #1
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800541e:	2323      	movs	r3, #35	; 0x23
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	225c      	movs	r2, #92	; 0x5c
 800542a:	5c9b      	ldrb	r3, [r3, r2]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x2c>
 8005430:	2302      	movs	r3, #2
 8005432:	e1b5      	b.n	80057a0 <HAL_SPI_TransmitReceive+0x398>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	225c      	movs	r2, #92	; 0x5c
 8005438:	2101      	movs	r1, #1
 800543a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800543c:	f7fe fa42 	bl	80038c4 <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005444:	201b      	movs	r0, #27
 8005446:	183b      	adds	r3, r7, r0
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	215d      	movs	r1, #93	; 0x5d
 800544c:	5c52      	ldrb	r2, [r2, r1]
 800544e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005456:	2312      	movs	r3, #18
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	1cba      	adds	r2, r7, #2
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005460:	183b      	adds	r3, r7, r0
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d011      	beq.n	800548c <HAL_SPI_TransmitReceive+0x84>
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	2382      	movs	r3, #130	; 0x82
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	429a      	cmp	r2, r3
 8005470:	d107      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x7a>
 800547a:	183b      	adds	r3, r7, r0
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d004      	beq.n	800548c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005482:	2323      	movs	r3, #35	; 0x23
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2202      	movs	r2, #2
 8005488:	701a      	strb	r2, [r3, #0]
    goto error;
 800548a:	e17e      	b.n	800578a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x98>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x98>
 8005498:	1cbb      	adds	r3, r7, #2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80054a0:	2323      	movs	r3, #35	; 0x23
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2201      	movs	r2, #1
 80054a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80054a8:	e16f      	b.n	800578a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	225d      	movs	r2, #93	; 0x5d
 80054ae:	5c9b      	ldrb	r3, [r3, r2]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d003      	beq.n	80054be <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	225d      	movs	r2, #93	; 0x5d
 80054ba:	2105      	movs	r1, #5
 80054bc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1cba      	adds	r2, r7, #2
 80054ce:	2146      	movs	r1, #70	; 0x46
 80054d0:	8812      	ldrh	r2, [r2, #0]
 80054d2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1cba      	adds	r2, r7, #2
 80054d8:	2144      	movs	r1, #68	; 0x44
 80054da:	8812      	ldrh	r2, [r2, #0]
 80054dc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1cba      	adds	r2, r7, #2
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1cba      	adds	r2, r7, #2
 80054f0:	8812      	ldrh	r2, [r2, #0]
 80054f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	23e0      	movs	r3, #224	; 0xe0
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	429a      	cmp	r2, r3
 800550a:	d908      	bls.n	800551e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	49a4      	ldr	r1, [pc, #656]	; (80057a8 <HAL_SPI_TransmitReceive+0x3a0>)
 8005518:	400a      	ands	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
 800551c:	e008      	b.n	8005530 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	0149      	lsls	r1, r1, #5
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2240      	movs	r2, #64	; 0x40
 8005538:	4013      	ands	r3, r2
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d007      	beq.n	800554e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2140      	movs	r1, #64	; 0x40
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	23e0      	movs	r3, #224	; 0xe0
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	429a      	cmp	r2, r3
 8005558:	d800      	bhi.n	800555c <HAL_SPI_TransmitReceive+0x154>
 800555a:	e07f      	b.n	800565c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x168>
 8005564:	2312      	movs	r3, #18
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d000      	beq.n	8005570 <HAL_SPI_TransmitReceive+0x168>
 800556e:	e069      	b.n	8005644 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	881a      	ldrh	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005594:	e056      	b.n	8005644 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2202      	movs	r2, #2
 800559e:	4013      	ands	r3, r2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d11b      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1d4>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x1d4>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d113      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	1c9a      	adds	r2, r3, #2
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d11c      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x21c>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2246      	movs	r2, #70	; 0x46
 80055ee:	5a9b      	ldrh	r3, [r3, r2]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	1c9a      	adds	r2, r3, #2
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2246      	movs	r2, #70	; 0x46
 8005612:	5a9b      	ldrh	r3, [r3, r2]
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b299      	uxth	r1, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2246      	movs	r2, #70	; 0x46
 800561e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005624:	f7fe f94e 	bl	80038c4 <HAL_GetTick>
 8005628:	0002      	movs	r2, r0
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	429a      	cmp	r2, r3
 8005632:	d807      	bhi.n	8005644 <HAL_SPI_TransmitReceive+0x23c>
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	3301      	adds	r3, #1
 8005638:	d004      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800563a:	2323      	movs	r3, #35	; 0x23
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
        goto error;
 8005642:	e0a2      	b.n	800578a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1a3      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x18e>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2246      	movs	r2, #70	; 0x46
 8005652:	5a9b      	ldrh	r3, [r3, r2]
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19d      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x18e>
 800565a:	e085      	b.n	8005768 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x268>
 8005664:	2312      	movs	r3, #18
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d000      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x268>
 800566e:	e070      	b.n	8005752 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005696:	e05c      	b.n	8005752 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2202      	movs	r2, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d11c      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x2d8>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d017      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x2d8>
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d114      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d11e      	bne.n	800572c <HAL_SPI_TransmitReceive+0x324>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2246      	movs	r2, #70	; 0x46
 80056f2:	5a9b      	ldrh	r3, [r3, r2]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	001a      	movs	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2246      	movs	r2, #70	; 0x46
 800571a:	5a9b      	ldrh	r3, [r3, r2]
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b299      	uxth	r1, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2246      	movs	r2, #70	; 0x46
 8005726:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005728:	2301      	movs	r3, #1
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800572c:	f7fe f8ca 	bl	80038c4 <HAL_GetTick>
 8005730:	0002      	movs	r2, r0
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005738:	429a      	cmp	r2, r3
 800573a:	d802      	bhi.n	8005742 <HAL_SPI_TransmitReceive+0x33a>
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	3301      	adds	r3, #1
 8005740:	d102      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x340>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005748:	2323      	movs	r3, #35	; 0x23
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	2203      	movs	r2, #3
 800574e:	701a      	strb	r2, [r3, #0]
        goto error;
 8005750:	e01b      	b.n	800578a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d19d      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x290>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2246      	movs	r2, #70	; 0x46
 8005760:	5a9b      	ldrh	r3, [r3, r2]
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d197      	bne.n	8005698 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	0018      	movs	r0, r3
 8005770:	f000 fac6 	bl	8005d00 <SPI_EndRxTxTransaction>
 8005774:	1e03      	subs	r3, r0, #0
 8005776:	d007      	beq.n	8005788 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005778:	2323      	movs	r3, #35	; 0x23
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	2201      	movs	r2, #1
 800577e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	661a      	str	r2, [r3, #96]	; 0x60
 8005786:	e000      	b.n	800578a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005788:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	225d      	movs	r2, #93	; 0x5d
 800578e:	2101      	movs	r1, #1
 8005790:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	225c      	movs	r2, #92	; 0x5c
 8005796:	2100      	movs	r1, #0
 8005798:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800579a:	2323      	movs	r3, #35	; 0x23
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b00a      	add	sp, #40	; 0x28
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	ffffefff 	.word	0xffffefff

080057ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	001a      	movs	r2, r3
 80057ca:	2301      	movs	r3, #1
 80057cc:	4013      	ands	r3, r2
 80057ce:	d10f      	bne.n	80057f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2201      	movs	r2, #1
 80057d4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057d6:	d00b      	beq.n	80057f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	001a      	movs	r2, r3
 80057de:	2301      	movs	r3, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	d005      	beq.n	80057f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	0010      	movs	r0, r2
 80057ec:	4798      	blx	r3
    return;
 80057ee:	e0d5      	b.n	800599c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	001a      	movs	r2, r3
 80057f6:	2301      	movs	r3, #1
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00b      	beq.n	8005814 <HAL_SPI_IRQHandler+0x68>
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	09db      	lsrs	r3, r3, #7
 8005800:	001a      	movs	r2, r3
 8005802:	2301      	movs	r3, #1
 8005804:	4013      	ands	r3, r2
 8005806:	d005      	beq.n	8005814 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	0010      	movs	r0, r2
 8005810:	4798      	blx	r3
    return;
 8005812:	e0c3      	b.n	800599c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	001a      	movs	r2, r3
 800581a:	2301      	movs	r3, #1
 800581c:	4013      	ands	r3, r2
 800581e:	d10c      	bne.n	800583a <HAL_SPI_IRQHandler+0x8e>
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	099b      	lsrs	r3, r3, #6
 8005824:	001a      	movs	r2, r3
 8005826:	2301      	movs	r3, #1
 8005828:	4013      	ands	r3, r2
 800582a:	d106      	bne.n	800583a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	001a      	movs	r2, r3
 8005832:	2301      	movs	r3, #1
 8005834:	4013      	ands	r3, r2
 8005836:	d100      	bne.n	800583a <HAL_SPI_IRQHandler+0x8e>
 8005838:	e0b0      	b.n	800599c <HAL_SPI_IRQHandler+0x1f0>
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	001a      	movs	r2, r3
 8005840:	2301      	movs	r3, #1
 8005842:	4013      	ands	r3, r2
 8005844:	d100      	bne.n	8005848 <HAL_SPI_IRQHandler+0x9c>
 8005846:	e0a9      	b.n	800599c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	001a      	movs	r2, r3
 800584e:	2301      	movs	r3, #1
 8005850:	4013      	ands	r3, r2
 8005852:	d023      	beq.n	800589c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	225d      	movs	r2, #93	; 0x5d
 8005858:	5c9b      	ldrb	r3, [r3, r2]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b03      	cmp	r3, #3
 800585e:	d011      	beq.n	8005884 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	2204      	movs	r2, #4
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	e00b      	b.n	800589c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
        return;
 800589a:	e07f      	b.n	800599c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	001a      	movs	r2, r3
 80058a2:	2301      	movs	r3, #1
 80058a4:	4013      	ands	r3, r2
 80058a6:	d014      	beq.n	80058d2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ac:	2201      	movs	r2, #1
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2140      	movs	r1, #64	; 0x40
 80058cc:	438a      	bics	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	001a      	movs	r2, r3
 80058d8:	2301      	movs	r3, #1
 80058da:	4013      	ands	r3, r2
 80058dc:	d00c      	beq.n	80058f8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058e2:	2208      	movs	r2, #8
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d04c      	beq.n	800599a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	21e0      	movs	r1, #224	; 0xe0
 800590c:	438a      	bics	r2, r1
 800590e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	225d      	movs	r2, #93	; 0x5d
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2202      	movs	r2, #2
 800591c:	4013      	ands	r3, r2
 800591e:	d103      	bne.n	8005928 <HAL_SPI_IRQHandler+0x17c>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	2201      	movs	r2, #1
 8005924:	4013      	ands	r3, r2
 8005926:	d032      	beq.n	800598e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2103      	movs	r1, #3
 8005934:	438a      	bics	r2, r1
 8005936:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <HAL_SPI_IRQHandler+0x1f8>)
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	0018      	movs	r0, r3
 800594e:	f7fe f8d3 	bl	8003af8 <HAL_DMA_Abort_IT>
 8005952:	1e03      	subs	r3, r0, #0
 8005954:	d005      	beq.n	8005962 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595a:	2240      	movs	r2, #64	; 0x40
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596e:	4a0d      	ldr	r2, [pc, #52]	; (80059a4 <HAL_SPI_IRQHandler+0x1f8>)
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	0018      	movs	r0, r3
 8005978:	f7fe f8be 	bl	8003af8 <HAL_DMA_Abort_IT>
 800597c:	1e03      	subs	r3, r0, #0
 800597e:	d00b      	beq.n	8005998 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	2240      	movs	r2, #64	; 0x40
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800598c:	e004      	b.n	8005998 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0018      	movs	r0, r3
 8005992:	f000 f809 	bl	80059a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005996:	e000      	b.n	800599a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005998:	46c0      	nop			; (mov r8, r8)
    return;
 800599a:	46c0      	nop			; (mov r8, r8)
  }
}
 800599c:	46bd      	mov	sp, r7
 800599e:	b008      	add	sp, #32
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	080059b9 	.word	0x080059b9

080059a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b002      	add	sp, #8
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2246      	movs	r2, #70	; 0x46
 80059ca:	2100      	movs	r1, #0
 80059cc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f7ff ffe6 	bl	80059a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b004      	add	sp, #16
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	1dfb      	adds	r3, r7, #7
 80059f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80059f4:	f7fd ff66 	bl	80038c4 <HAL_GetTick>
 80059f8:	0002      	movs	r2, r0
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	18d3      	adds	r3, r2, r3
 8005a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a04:	f7fd ff5e 	bl	80038c4 <HAL_GetTick>
 8005a08:	0003      	movs	r3, r0
 8005a0a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a0c:	4b3a      	ldr	r3, [pc, #232]	; (8005af8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	015b      	lsls	r3, r3, #5
 8005a12:	0d1b      	lsrs	r3, r3, #20
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	4353      	muls	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a1a:	e058      	b.n	8005ace <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	d055      	beq.n	8005ace <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a22:	f7fd ff4f 	bl	80038c4 <HAL_GetTick>
 8005a26:	0002      	movs	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d902      	bls.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d142      	bne.n	8005abe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	21e0      	movs	r1, #224	; 0xe0
 8005a44:	438a      	bics	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	2382      	movs	r3, #130	; 0x82
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d113      	bne.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d005      	beq.n	8005a6c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d107      	bne.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2140      	movs	r1, #64	; 0x40
 8005a78:	438a      	bics	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	019b      	lsls	r3, r3, #6
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d110      	bne.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	491a      	ldr	r1, [pc, #104]	; (8005afc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005a94:	400a      	ands	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	0189      	lsls	r1, r1, #6
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	225d      	movs	r2, #93	; 0x5d
 8005aae:	2101      	movs	r1, #1
 8005ab0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	225c      	movs	r2, #92	; 0x5c
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e017      	b.n	8005aee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	425a      	negs	r2, r3
 8005ade:	4153      	adcs	r3, r2
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	1dfb      	adds	r3, r7, #7
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d197      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b008      	add	sp, #32
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	20000004 	.word	0x20000004
 8005afc:	ffffdfff 	.word	0xffffdfff

08005b00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b0e:	2317      	movs	r3, #23
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b16:	f7fd fed5 	bl	80038c4 <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	18d3      	adds	r3, r2, r3
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b26:	f7fd fecd 	bl	80038c4 <HAL_GetTick>
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b36:	4b41      	ldr	r3, [pc, #260]	; (8005c3c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	0013      	movs	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	00da      	lsls	r2, r3, #3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	0d1b      	lsrs	r3, r3, #20
 8005b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b48:	4353      	muls	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b4c:	e068      	b.n	8005c20 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	23c0      	movs	r3, #192	; 0xc0
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d10a      	bne.n	8005b6e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	2117      	movs	r1, #23
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	d055      	beq.n	8005c20 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b74:	f7fd fea6 	bl	80038c4 <HAL_GetTick>
 8005b78:	0002      	movs	r2, r0
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d902      	bls.n	8005b8a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d142      	bne.n	8005c10 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	21e0      	movs	r1, #224	; 0xe0
 8005b96:	438a      	bics	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	2382      	movs	r3, #130	; 0x82
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d113      	bne.n	8005bce <SPI_WaitFifoStateUntilTimeout+0xce>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d005      	beq.n	8005bbe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d107      	bne.n	8005bce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2140      	movs	r1, #64	; 0x40
 8005bca:	438a      	bics	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	019b      	lsls	r3, r3, #6
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d110      	bne.n	8005bfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4916      	ldr	r1, [pc, #88]	; (8005c40 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005be6:	400a      	ands	r2, r1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2180      	movs	r1, #128	; 0x80
 8005bf6:	0189      	lsls	r1, r1, #6
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	225d      	movs	r2, #93	; 0x5d
 8005c00:	2101      	movs	r1, #1
 8005c02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	225c      	movs	r2, #92	; 0x5c
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e010      	b.n	8005c32 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d18e      	bne.n	8005b4e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b00a      	add	sp, #40	; 0x28
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	20000004 	.word	0x20000004
 8005c40:	ffffdfff 	.word	0xffffdfff

08005c44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	2382      	movs	r3, #130	; 0x82
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d113      	bne.n	8005c84 <SPI_EndRxTransaction+0x40>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d005      	beq.n	8005c74 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d107      	bne.n	8005c84 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2140      	movs	r1, #64	; 0x40
 8005c80:	438a      	bics	r2, r1
 8005c82:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	0013      	movs	r3, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	f7ff fea7 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005c96:	1e03      	subs	r3, r0, #0
 8005c98:	d007      	beq.n	8005caa <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e026      	b.n	8005cf8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	2382      	movs	r3, #130	; 0x82
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d11f      	bne.n	8005cf6 <SPI_EndRxTransaction+0xb2>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d005      	beq.n	8005cce <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d113      	bne.n	8005cf6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	23c0      	movs	r3, #192	; 0xc0
 8005cd2:	00d9      	lsls	r1, r3, #3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	0013      	movs	r3, r2
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f7ff ff0f 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005ce2:	1e03      	subs	r3, r0, #0
 8005ce4:	d007      	beq.n	8005cf6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cea:	2220      	movs	r2, #32
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e000      	b.n	8005cf8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b004      	add	sp, #16
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	23c0      	movs	r3, #192	; 0xc0
 8005d10:	0159      	lsls	r1, r3, #5
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	0013      	movs	r3, r2
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f7ff fef0 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005d20:	1e03      	subs	r3, r0, #0
 8005d22:	d007      	beq.n	8005d34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d28:	2220      	movs	r2, #32
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e027      	b.n	8005d84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	0013      	movs	r3, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	f7ff fe4f 	bl	80059e4 <SPI_WaitFlagStateUntilTimeout>
 8005d46:	1e03      	subs	r3, r0, #0
 8005d48:	d007      	beq.n	8005d5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	2220      	movs	r2, #32
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e014      	b.n	8005d84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	23c0      	movs	r3, #192	; 0xc0
 8005d5e:	00d9      	lsls	r1, r3, #3
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	0013      	movs	r3, r2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f7ff fec9 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005d6e:	1e03      	subs	r3, r0, #0
 8005d70:	d007      	beq.n	8005d82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	2220      	movs	r2, #32
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e000      	b.n	8005d84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e04a      	b.n	8005e34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	223d      	movs	r2, #61	; 0x3d
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d107      	bne.n	8005dba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	223c      	movs	r2, #60	; 0x3c
 8005dae:	2100      	movs	r1, #0
 8005db0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 f841 	bl	8005e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	223d      	movs	r2, #61	; 0x3d
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	0019      	movs	r1, r3
 8005dcc:	0010      	movs	r0, r2
 8005dce:	f000 f9eb 	bl	80061a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2248      	movs	r2, #72	; 0x48
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	223e      	movs	r2, #62	; 0x3e
 8005dde:	2101      	movs	r1, #1
 8005de0:	5499      	strb	r1, [r3, r2]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	223f      	movs	r2, #63	; 0x3f
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2240      	movs	r2, #64	; 0x40
 8005dee:	2101      	movs	r1, #1
 8005df0:	5499      	strb	r1, [r3, r2]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2241      	movs	r2, #65	; 0x41
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2242      	movs	r2, #66	; 0x42
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2243      	movs	r2, #67	; 0x43
 8005e06:	2101      	movs	r1, #1
 8005e08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2244      	movs	r2, #68	; 0x44
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2245      	movs	r2, #69	; 0x45
 8005e16:	2101      	movs	r1, #1
 8005e18:	5499      	strb	r1, [r3, r2]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2246      	movs	r2, #70	; 0x46
 8005e1e:	2101      	movs	r1, #1
 8005e20:	5499      	strb	r1, [r3, r2]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2247      	movs	r2, #71	; 0x47
 8005e26:	2101      	movs	r1, #1
 8005e28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	223d      	movs	r2, #61	; 0x3d
 8005e2e:	2101      	movs	r1, #1
 8005e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b002      	add	sp, #8
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e44:	46c0      	nop			; (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	223d      	movs	r2, #61	; 0x3d
 8005e58:	5c9b      	ldrb	r3, [r3, r2]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d001      	beq.n	8005e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e042      	b.n	8005eea <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	223d      	movs	r2, #61	; 0x3d
 8005e68:	2102      	movs	r1, #2
 8005e6a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2101      	movs	r1, #1
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1c      	ldr	r2, [pc, #112]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x5a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	05db      	lsls	r3, r3, #23
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x5a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <HAL_TIM_Base_Start_IT+0xac>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0x5a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a16      	ldr	r2, [pc, #88]	; (8005efc <HAL_TIM_Base_Start_IT+0xb0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d116      	bne.n	8005ed4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <HAL_TIM_Base_Start_IT+0xb4>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b06      	cmp	r3, #6
 8005eb6:	d016      	beq.n	8005ee6 <HAL_TIM_Base_Start_IT+0x9a>
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	025b      	lsls	r3, r3, #9
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d011      	beq.n	8005ee6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2101      	movs	r1, #1
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	e008      	b.n	8005ee6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2101      	movs	r1, #1
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e000      	b.n	8005ee8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	0018      	movs	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b004      	add	sp, #16
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	00010007 	.word	0x00010007

08005f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2202      	movs	r2, #2
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d124      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d11d      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	4252      	negs	r2, r2
 8005f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	4013      	ands	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 f916 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e007      	b.n	8005f5e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0018      	movs	r0, r3
 8005f52:	f000 f909 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0018      	movs	r0, r3
 8005f5a:	f000 f915 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d125      	bne.n	8005fbe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d11e      	bne.n	8005fbe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2205      	movs	r2, #5
 8005f86:	4252      	negs	r2, r2
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	23c0      	movs	r3, #192	; 0xc0
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f000 f8e9 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8005fa6:	e007      	b.n	8005fb8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 f8dc 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 f8e8 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d124      	bne.n	8006016 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d11d      	bne.n	8006016 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2209      	movs	r2, #9
 8005fe0:	4252      	negs	r2, r2
 8005fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f000 f8bd 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8005ffe:	e007      	b.n	8006010 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 f8b0 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f8bc 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2210      	movs	r2, #16
 800601e:	4013      	ands	r3, r2
 8006020:	2b10      	cmp	r3, #16
 8006022:	d125      	bne.n	8006070 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	2210      	movs	r2, #16
 800602c:	4013      	ands	r3, r2
 800602e:	2b10      	cmp	r3, #16
 8006030:	d11e      	bne.n	8006070 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2211      	movs	r2, #17
 8006038:	4252      	negs	r2, r2
 800603a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2208      	movs	r2, #8
 8006040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	23c0      	movs	r3, #192	; 0xc0
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4013      	ands	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	0018      	movs	r0, r3
 8006054:	f000 f890 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8006058:	e007      	b.n	800606a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	0018      	movs	r0, r3
 800605e:	f000 f883 	bl	8006168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f88f 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2201      	movs	r2, #1
 8006078:	4013      	ands	r3, r2
 800607a:	2b01      	cmp	r3, #1
 800607c:	d10f      	bne.n	800609e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	4013      	ands	r3, r2
 8006088:	2b01      	cmp	r3, #1
 800608a:	d108      	bne.n	800609e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2202      	movs	r2, #2
 8006092:	4252      	negs	r2, r2
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f7fd f93f 	bl	800331c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2280      	movs	r2, #128	; 0x80
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d10f      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b80      	cmp	r3, #128	; 0x80
 80060b8:	d108      	bne.n	80060cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2281      	movs	r2, #129	; 0x81
 80060c0:	4252      	negs	r2, r2
 80060c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0018      	movs	r0, r3
 80060c8:	f000 f8f6 	bl	80062b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	401a      	ands	r2, r3
 80060d8:	2380      	movs	r3, #128	; 0x80
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	429a      	cmp	r2, r3
 80060de:	d10e      	bne.n	80060fe <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2280      	movs	r2, #128	; 0x80
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d107      	bne.n	80060fe <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_TIM_IRQHandler+0x260>)
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 f8e5 	bl	80062c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	4013      	ands	r3, r2
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	d10f      	bne.n	800612c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	4013      	ands	r3, r2
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d108      	bne.n	800612c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2241      	movs	r2, #65	; 0x41
 8006120:	4252      	negs	r2, r2
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0018      	movs	r0, r3
 8006128:	f000 f836 	bl	8006198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2220      	movs	r2, #32
 8006134:	4013      	ands	r3, r2
 8006136:	2b20      	cmp	r3, #32
 8006138:	d10f      	bne.n	800615a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	4013      	ands	r3, r2
 8006144:	2b20      	cmp	r3, #32
 8006146:	d108      	bne.n	800615a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2221      	movs	r2, #33	; 0x21
 800614e:	4252      	negs	r2, r2
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0018      	movs	r0, r3
 8006156:	f000 f8a7 	bl	80062a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	46bd      	mov	sp, r7
 800615e:	b002      	add	sp, #8
 8006160:	bd80      	pop	{r7, pc}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	fffffeff 	.word	0xfffffeff

08006168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	46bd      	mov	sp, r7
 8006194:	b002      	add	sp, #8
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a34      	ldr	r2, [pc, #208]	; (800628c <TIM_Base_SetConfig+0xe4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d008      	beq.n	80061d2 <TIM_Base_SetConfig+0x2a>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	05db      	lsls	r3, r3, #23
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d003      	beq.n	80061d2 <TIM_Base_SetConfig+0x2a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a30      	ldr	r2, [pc, #192]	; (8006290 <TIM_Base_SetConfig+0xe8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d108      	bne.n	80061e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2270      	movs	r2, #112	; 0x70
 80061d6:	4393      	bics	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a29      	ldr	r2, [pc, #164]	; (800628c <TIM_Base_SetConfig+0xe4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <TIM_Base_SetConfig+0x76>
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	05db      	lsls	r3, r3, #23
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d013      	beq.n	800621e <TIM_Base_SetConfig+0x76>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a25      	ldr	r2, [pc, #148]	; (8006290 <TIM_Base_SetConfig+0xe8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00f      	beq.n	800621e <TIM_Base_SetConfig+0x76>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a24      	ldr	r2, [pc, #144]	; (8006294 <TIM_Base_SetConfig+0xec>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_Base_SetConfig+0x76>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a23      	ldr	r2, [pc, #140]	; (8006298 <TIM_Base_SetConfig+0xf0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <TIM_Base_SetConfig+0x76>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a22      	ldr	r2, [pc, #136]	; (800629c <TIM_Base_SetConfig+0xf4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_Base_SetConfig+0x76>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a21      	ldr	r2, [pc, #132]	; (80062a0 <TIM_Base_SetConfig+0xf8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d108      	bne.n	8006230 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4a20      	ldr	r2, [pc, #128]	; (80062a4 <TIM_Base_SetConfig+0xfc>)
 8006222:	4013      	ands	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2280      	movs	r2, #128	; 0x80
 8006234:	4393      	bics	r3, r2
 8006236:	001a      	movs	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a0c      	ldr	r2, [pc, #48]	; (800628c <TIM_Base_SetConfig+0xe4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_Base_SetConfig+0xce>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <TIM_Base_SetConfig+0xf0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <TIM_Base_SetConfig+0xce>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a0c      	ldr	r2, [pc, #48]	; (800629c <TIM_Base_SetConfig+0xf4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_Base_SetConfig+0xce>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <TIM_Base_SetConfig+0xf8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d103      	bne.n	800627e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691a      	ldr	r2, [r3, #16]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	615a      	str	r2, [r3, #20]
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b004      	add	sp, #16
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	40002000 	.word	0x40002000
 8006298:	40014000 	.word	0x40014000
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800
 80062a4:	fffffcff 	.word	0xfffffcff

080062a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b002      	add	sp, #8
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	46bd      	mov	sp, r7
 80062c4:	b002      	add	sp, #8
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d0:	46c0      	nop			; (mov r8, r8)
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b002      	add	sp, #8
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e046      	b.n	8006378 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2288      	movs	r2, #136	; 0x88
 80062ee:	589b      	ldr	r3, [r3, r2]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d107      	bne.n	8006304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2284      	movs	r2, #132	; 0x84
 80062f8:	2100      	movs	r1, #0
 80062fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0018      	movs	r0, r3
 8006300:	f7fd f8a0 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2288      	movs	r2, #136	; 0x88
 8006308:	2124      	movs	r1, #36	; 0x24
 800630a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2101      	movs	r1, #1
 8006318:	438a      	bics	r2, r1
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fc6c 	bl	8006bfc <UART_SetConfig>
 8006324:	0003      	movs	r3, r0
 8006326:	2b01      	cmp	r3, #1
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e024      	b.n	8006378 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 ff1d 	bl	8007178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	490d      	ldr	r1, [pc, #52]	; (8006380 <HAL_UART_Init+0xa8>)
 800634a:	400a      	ands	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	212a      	movs	r1, #42	; 0x2a
 800635a:	438a      	bics	r2, r1
 800635c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2101      	movs	r1, #1
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0018      	movs	r0, r3
 8006372:	f000 ffb5 	bl	80072e0 <UART_CheckIdleState>
 8006376:	0003      	movs	r3, r0
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b002      	add	sp, #8
 800637e:	bd80      	pop	{r7, pc}
 8006380:	ffffb7ff 	.word	0xffffb7ff

08006384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	1dbb      	adds	r3, r7, #6
 8006392:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2288      	movs	r2, #136	; 0x88
 8006398:	589b      	ldr	r3, [r3, r2]
 800639a:	2b20      	cmp	r3, #32
 800639c:	d000      	beq.n	80063a0 <HAL_UART_Transmit+0x1c>
 800639e:	e088      	b.n	80064b2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_UART_Transmit+0x2a>
 80063a6:	1dbb      	adds	r3, r7, #6
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e080      	b.n	80064b4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	015b      	lsls	r3, r3, #5
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d109      	bne.n	80063d2 <HAL_UART_Transmit+0x4e>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4013      	ands	r3, r2
 80063cc:	d001      	beq.n	80063d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e070      	b.n	80064b4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2290      	movs	r2, #144	; 0x90
 80063d6:	2100      	movs	r1, #0
 80063d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2288      	movs	r2, #136	; 0x88
 80063de:	2121      	movs	r1, #33	; 0x21
 80063e0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e2:	f7fd fa6f 	bl	80038c4 <HAL_GetTick>
 80063e6:	0003      	movs	r3, r0
 80063e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1dba      	adds	r2, r7, #6
 80063ee:	2154      	movs	r1, #84	; 0x54
 80063f0:	8812      	ldrh	r2, [r2, #0]
 80063f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1dba      	adds	r2, r7, #6
 80063f8:	2156      	movs	r1, #86	; 0x56
 80063fa:	8812      	ldrh	r2, [r2, #0]
 80063fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	2380      	movs	r3, #128	; 0x80
 8006404:	015b      	lsls	r3, r3, #5
 8006406:	429a      	cmp	r2, r3
 8006408:	d108      	bne.n	800641c <HAL_UART_Transmit+0x98>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	e003      	b.n	8006424 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006420:	2300      	movs	r3, #0
 8006422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006424:	e02c      	b.n	8006480 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	0013      	movs	r3, r2
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	f000 ffa2 	bl	800737c <UART_WaitOnFlagUntilTimeout>
 8006438:	1e03      	subs	r3, r0, #0
 800643a:	d001      	beq.n	8006440 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e039      	b.n	80064b4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	001a      	movs	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	05d2      	lsls	r2, r2, #23
 8006452:	0dd2      	lsrs	r2, r2, #23
 8006454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3302      	adds	r3, #2
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e007      	b.n	800646e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2256      	movs	r2, #86	; 0x56
 8006472:	5a9b      	ldrh	r3, [r3, r2]
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b299      	uxth	r1, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2256      	movs	r2, #86	; 0x56
 800647e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2256      	movs	r2, #86	; 0x56
 8006484:	5a9b      	ldrh	r3, [r3, r2]
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1cc      	bne.n	8006426 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	0013      	movs	r3, r2
 8006496:	2200      	movs	r2, #0
 8006498:	2140      	movs	r1, #64	; 0x40
 800649a:	f000 ff6f 	bl	800737c <UART_WaitOnFlagUntilTimeout>
 800649e:	1e03      	subs	r3, r0, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e006      	b.n	80064b4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2288      	movs	r2, #136	; 0x88
 80064aa:	2120      	movs	r1, #32
 80064ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e000      	b.n	80064b4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80064b2:	2302      	movs	r3, #2
  }
}
 80064b4:	0018      	movs	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b008      	add	sp, #32
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	1dbb      	adds	r3, r7, #6
 80064c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	228c      	movs	r2, #140	; 0x8c
 80064ce:	589b      	ldr	r3, [r3, r2]
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d14a      	bne.n	800656a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_UART_Receive_IT+0x26>
 80064da:	1dbb      	adds	r3, r7, #6
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e042      	b.n	800656c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	015b      	lsls	r3, r3, #5
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d109      	bne.n	8006506 <HAL_UART_Receive_IT+0x4a>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2201      	movs	r2, #1
 80064fe:	4013      	ands	r3, r2
 8006500:	d001      	beq.n	8006506 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e032      	b.n	800656c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a18      	ldr	r2, [pc, #96]	; (8006574 <HAL_UART_Receive_IT+0xb8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d020      	beq.n	8006558 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	4013      	ands	r3, r2
 8006522:	d019      	beq.n	8006558 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006524:	f3ef 8310 	mrs	r3, PRIMASK
 8006528:	613b      	str	r3, [r7, #16]
  return(result);
 800652a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	2301      	movs	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	04c9      	lsls	r1, r1, #19
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f383 8810 	msr	PRIMASK, r3
}
 8006556:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006558:	1dbb      	adds	r3, r7, #6
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0018      	movs	r0, r3
 8006562:	f000 ffd3 	bl	800750c <UART_Start_Receive_IT>
 8006566:	0003      	movs	r3, r0
 8006568:	e000      	b.n	800656c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b008      	add	sp, #32
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40008000 	.word	0x40008000

08006578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006578:	b5b0      	push	{r4, r5, r7, lr}
 800657a:	b0aa      	sub	sp, #168	; 0xa8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	22a4      	movs	r2, #164	; 0xa4
 8006588:	18b9      	adds	r1, r7, r2
 800658a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	20a0      	movs	r0, #160	; 0xa0
 8006594:	1839      	adds	r1, r7, r0
 8006596:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	249c      	movs	r4, #156	; 0x9c
 80065a0:	1939      	adds	r1, r7, r4
 80065a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065a4:	0011      	movs	r1, r2
 80065a6:	18bb      	adds	r3, r7, r2
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4aa2      	ldr	r2, [pc, #648]	; (8006834 <HAL_UART_IRQHandler+0x2bc>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	2298      	movs	r2, #152	; 0x98
 80065b0:	18bd      	adds	r5, r7, r2
 80065b2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80065b4:	18bb      	adds	r3, r7, r2
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d11a      	bne.n	80065f2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2220      	movs	r2, #32
 80065c2:	4013      	ands	r3, r2
 80065c4:	d015      	beq.n	80065f2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065c6:	183b      	adds	r3, r7, r0
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2220      	movs	r2, #32
 80065cc:	4013      	ands	r3, r2
 80065ce:	d105      	bne.n	80065dc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065d0:	193b      	adds	r3, r7, r4
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	2380      	movs	r3, #128	; 0x80
 80065d6:	055b      	lsls	r3, r3, #21
 80065d8:	4013      	ands	r3, r2
 80065da:	d00a      	beq.n	80065f2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d100      	bne.n	80065e6 <HAL_UART_IRQHandler+0x6e>
 80065e4:	e2dc      	b.n	8006ba0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	0010      	movs	r0, r2
 80065ee:	4798      	blx	r3
      }
      return;
 80065f0:	e2d6      	b.n	8006ba0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065f2:	2398      	movs	r3, #152	; 0x98
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d100      	bne.n	80065fe <HAL_UART_IRQHandler+0x86>
 80065fc:	e122      	b.n	8006844 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065fe:	239c      	movs	r3, #156	; 0x9c
 8006600:	18fb      	adds	r3, r7, r3
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a8c      	ldr	r2, [pc, #560]	; (8006838 <HAL_UART_IRQHandler+0x2c0>)
 8006606:	4013      	ands	r3, r2
 8006608:	d106      	bne.n	8006618 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800660a:	23a0      	movs	r3, #160	; 0xa0
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a8a      	ldr	r2, [pc, #552]	; (800683c <HAL_UART_IRQHandler+0x2c4>)
 8006612:	4013      	ands	r3, r2
 8006614:	d100      	bne.n	8006618 <HAL_UART_IRQHandler+0xa0>
 8006616:	e115      	b.n	8006844 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006618:	23a4      	movs	r3, #164	; 0xa4
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2201      	movs	r2, #1
 8006620:	4013      	ands	r3, r2
 8006622:	d012      	beq.n	800664a <HAL_UART_IRQHandler+0xd2>
 8006624:	23a0      	movs	r3, #160	; 0xa0
 8006626:	18fb      	adds	r3, r7, r3
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	2380      	movs	r3, #128	; 0x80
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	4013      	ands	r3, r2
 8006630:	d00b      	beq.n	800664a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2201      	movs	r2, #1
 8006638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2290      	movs	r2, #144	; 0x90
 800663e:	589b      	ldr	r3, [r3, r2]
 8006640:	2201      	movs	r2, #1
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2190      	movs	r1, #144	; 0x90
 8006648:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800664a:	23a4      	movs	r3, #164	; 0xa4
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2202      	movs	r2, #2
 8006652:	4013      	ands	r3, r2
 8006654:	d011      	beq.n	800667a <HAL_UART_IRQHandler+0x102>
 8006656:	239c      	movs	r3, #156	; 0x9c
 8006658:	18fb      	adds	r3, r7, r3
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	4013      	ands	r3, r2
 8006660:	d00b      	beq.n	800667a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2202      	movs	r2, #2
 8006668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2290      	movs	r2, #144	; 0x90
 800666e:	589b      	ldr	r3, [r3, r2]
 8006670:	2204      	movs	r2, #4
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2190      	movs	r1, #144	; 0x90
 8006678:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800667a:	23a4      	movs	r3, #164	; 0xa4
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2204      	movs	r2, #4
 8006682:	4013      	ands	r3, r2
 8006684:	d011      	beq.n	80066aa <HAL_UART_IRQHandler+0x132>
 8006686:	239c      	movs	r3, #156	; 0x9c
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2201      	movs	r2, #1
 800668e:	4013      	ands	r3, r2
 8006690:	d00b      	beq.n	80066aa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2204      	movs	r2, #4
 8006698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2290      	movs	r2, #144	; 0x90
 800669e:	589b      	ldr	r3, [r3, r2]
 80066a0:	2202      	movs	r2, #2
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2190      	movs	r1, #144	; 0x90
 80066a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066aa:	23a4      	movs	r3, #164	; 0xa4
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2208      	movs	r2, #8
 80066b2:	4013      	ands	r3, r2
 80066b4:	d017      	beq.n	80066e6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066b6:	23a0      	movs	r3, #160	; 0xa0
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2220      	movs	r2, #32
 80066be:	4013      	ands	r3, r2
 80066c0:	d105      	bne.n	80066ce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066c2:	239c      	movs	r3, #156	; 0x9c
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5b      	ldr	r2, [pc, #364]	; (8006838 <HAL_UART_IRQHandler+0x2c0>)
 80066ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066cc:	d00b      	beq.n	80066e6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2208      	movs	r2, #8
 80066d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2290      	movs	r2, #144	; 0x90
 80066da:	589b      	ldr	r3, [r3, r2]
 80066dc:	2208      	movs	r2, #8
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2190      	movs	r1, #144	; 0x90
 80066e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066e6:	23a4      	movs	r3, #164	; 0xa4
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	4013      	ands	r3, r2
 80066f2:	d013      	beq.n	800671c <HAL_UART_IRQHandler+0x1a4>
 80066f4:	23a0      	movs	r3, #160	; 0xa0
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	04db      	lsls	r3, r3, #19
 80066fe:	4013      	ands	r3, r2
 8006700:	d00c      	beq.n	800671c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	0112      	lsls	r2, r2, #4
 800670a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2290      	movs	r2, #144	; 0x90
 8006710:	589b      	ldr	r3, [r3, r2]
 8006712:	2220      	movs	r2, #32
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2190      	movs	r1, #144	; 0x90
 800671a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2290      	movs	r2, #144	; 0x90
 8006720:	589b      	ldr	r3, [r3, r2]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d100      	bne.n	8006728 <HAL_UART_IRQHandler+0x1b0>
 8006726:	e23d      	b.n	8006ba4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006728:	23a4      	movs	r3, #164	; 0xa4
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2220      	movs	r2, #32
 8006730:	4013      	ands	r3, r2
 8006732:	d015      	beq.n	8006760 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006734:	23a0      	movs	r3, #160	; 0xa0
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2220      	movs	r2, #32
 800673c:	4013      	ands	r3, r2
 800673e:	d106      	bne.n	800674e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006740:	239c      	movs	r3, #156	; 0x9c
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	055b      	lsls	r3, r3, #21
 800674a:	4013      	ands	r3, r2
 800674c:	d008      	beq.n	8006760 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	0010      	movs	r0, r2
 800675e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2290      	movs	r2, #144	; 0x90
 8006764:	589b      	ldr	r3, [r3, r2]
 8006766:	2194      	movs	r1, #148	; 0x94
 8006768:	187a      	adds	r2, r7, r1
 800676a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2240      	movs	r2, #64	; 0x40
 8006774:	4013      	ands	r3, r2
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d004      	beq.n	8006784 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800677a:	187b      	adds	r3, r7, r1
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2228      	movs	r2, #40	; 0x28
 8006780:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006782:	d04c      	beq.n	800681e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	0018      	movs	r0, r3
 8006788:	f000 ffe4 	bl	8007754 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2240      	movs	r2, #64	; 0x40
 8006794:	4013      	ands	r3, r2
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d13c      	bne.n	8006814 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679a:	f3ef 8310 	mrs	r3, PRIMASK
 800679e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80067a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	2090      	movs	r0, #144	; 0x90
 80067a4:	183a      	adds	r2, r7, r0
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	2301      	movs	r3, #1
 80067aa:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ae:	f383 8810 	msr	PRIMASK, r3
}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2140      	movs	r1, #64	; 0x40
 80067c0:	438a      	bics	r2, r1
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	183b      	adds	r3, r7, r0
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067cc:	f383 8810 	msr	PRIMASK, r3
}
 80067d0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2280      	movs	r2, #128	; 0x80
 80067d6:	589b      	ldr	r3, [r3, r2]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d016      	beq.n	800680a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2280      	movs	r2, #128	; 0x80
 80067e0:	589b      	ldr	r3, [r3, r2]
 80067e2:	4a17      	ldr	r2, [pc, #92]	; (8006840 <HAL_UART_IRQHandler+0x2c8>)
 80067e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	589b      	ldr	r3, [r3, r2]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7fd f983 	bl	8003af8 <HAL_DMA_Abort_IT>
 80067f2:	1e03      	subs	r3, r0, #0
 80067f4:	d01c      	beq.n	8006830 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2280      	movs	r2, #128	; 0x80
 80067fa:	589b      	ldr	r3, [r3, r2]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	2180      	movs	r1, #128	; 0x80
 8006802:	5852      	ldr	r2, [r2, r1]
 8006804:	0010      	movs	r0, r2
 8006806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	e012      	b.n	8006830 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f000 f9e1 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	e00d      	b.n	8006830 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	0018      	movs	r0, r3
 8006818:	f000 f9dc 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e008      	b.n	8006830 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 f9d7 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2290      	movs	r2, #144	; 0x90
 800682a:	2100      	movs	r1, #0
 800682c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800682e:	e1b9      	b.n	8006ba4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	46c0      	nop			; (mov r8, r8)
    return;
 8006832:	e1b7      	b.n	8006ba4 <HAL_UART_IRQHandler+0x62c>
 8006834:	0000080f 	.word	0x0000080f
 8006838:	10000001 	.word	0x10000001
 800683c:	04000120 	.word	0x04000120
 8006840:	08007821 	.word	0x08007821

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d000      	beq.n	800684e <HAL_UART_IRQHandler+0x2d6>
 800684c:	e13e      	b.n	8006acc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800684e:	23a4      	movs	r3, #164	; 0xa4
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2210      	movs	r2, #16
 8006856:	4013      	ands	r3, r2
 8006858:	d100      	bne.n	800685c <HAL_UART_IRQHandler+0x2e4>
 800685a:	e137      	b.n	8006acc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800685c:	23a0      	movs	r3, #160	; 0xa0
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2210      	movs	r2, #16
 8006864:	4013      	ands	r3, r2
 8006866:	d100      	bne.n	800686a <HAL_UART_IRQHandler+0x2f2>
 8006868:	e130      	b.n	8006acc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2240      	movs	r2, #64	; 0x40
 800687a:	4013      	ands	r3, r2
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d000      	beq.n	8006882 <HAL_UART_IRQHandler+0x30a>
 8006880:	e0a4      	b.n	80069cc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2280      	movs	r2, #128	; 0x80
 8006886:	589b      	ldr	r3, [r3, r2]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	217e      	movs	r1, #126	; 0x7e
 800688e:	187b      	adds	r3, r7, r1
 8006890:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006892:	187b      	adds	r3, r7, r1
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d100      	bne.n	800689c <HAL_UART_IRQHandler+0x324>
 800689a:	e185      	b.n	8006ba8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	225c      	movs	r2, #92	; 0x5c
 80068a0:	5a9b      	ldrh	r3, [r3, r2]
 80068a2:	187a      	adds	r2, r7, r1
 80068a4:	8812      	ldrh	r2, [r2, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d300      	bcc.n	80068ac <HAL_UART_IRQHandler+0x334>
 80068aa:	e17d      	b.n	8006ba8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	187a      	adds	r2, r7, r1
 80068b0:	215e      	movs	r1, #94	; 0x5e
 80068b2:	8812      	ldrh	r2, [r2, #0]
 80068b4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2280      	movs	r2, #128	; 0x80
 80068ba:	589b      	ldr	r3, [r3, r2]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2220      	movs	r2, #32
 80068c2:	4013      	ands	r3, r2
 80068c4:	d170      	bne.n	80069a8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80068d0:	2301      	movs	r3, #1
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d6:	f383 8810 	msr	PRIMASK, r3
}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	49b4      	ldr	r1, [pc, #720]	; (8006bb8 <HAL_UART_IRQHandler+0x640>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f383 8810 	msr	PRIMASK, r3
}
 80068f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f8:	f3ef 8310 	mrs	r3, PRIMASK
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006900:	677b      	str	r3, [r7, #116]	; 0x74
 8006902:	2301      	movs	r3, #1
 8006904:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006908:	f383 8810 	msr	PRIMASK, r3
}
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2101      	movs	r1, #1
 800691a:	438a      	bics	r2, r1
 800691c:	609a      	str	r2, [r3, #8]
 800691e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006920:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006924:	f383 8810 	msr	PRIMASK, r3
}
 8006928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800692a:	f3ef 8310 	mrs	r3, PRIMASK
 800692e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006930:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006932:	673b      	str	r3, [r7, #112]	; 0x70
 8006934:	2301      	movs	r3, #1
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693a:	f383 8810 	msr	PRIMASK, r3
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2140      	movs	r1, #64	; 0x40
 800694c:	438a      	bics	r2, r1
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006952:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	f383 8810 	msr	PRIMASK, r3
}
 800695a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	228c      	movs	r2, #140	; 0x8c
 8006960:	2120      	movs	r1, #32
 8006962:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696a:	f3ef 8310 	mrs	r3, PRIMASK
 800696e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006970:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006974:	2301      	movs	r3, #1
 8006976:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800697a:	f383 8810 	msr	PRIMASK, r3
}
 800697e:	46c0      	nop			; (mov r8, r8)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2110      	movs	r1, #16
 800698c:	438a      	bics	r2, r1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006992:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006996:	f383 8810 	msr	PRIMASK, r3
}
 800699a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2280      	movs	r2, #128	; 0x80
 80069a0:	589b      	ldr	r3, [r3, r2]
 80069a2:	0018      	movs	r0, r3
 80069a4:	f7fd f846 	bl	8003a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	225c      	movs	r2, #92	; 0x5c
 80069b2:	5a9a      	ldrh	r2, [r3, r2]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	215e      	movs	r1, #94	; 0x5e
 80069b8:	5a5b      	ldrh	r3, [r3, r1]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0011      	movs	r1, r2
 80069c4:	0018      	movs	r0, r3
 80069c6:	f000 f90d 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069ca:	e0ed      	b.n	8006ba8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	225c      	movs	r2, #92	; 0x5c
 80069d0:	5a99      	ldrh	r1, [r3, r2]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	225e      	movs	r2, #94	; 0x5e
 80069d6:	5a9b      	ldrh	r3, [r3, r2]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	208e      	movs	r0, #142	; 0x8e
 80069dc:	183b      	adds	r3, r7, r0
 80069de:	1a8a      	subs	r2, r1, r2
 80069e0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	225e      	movs	r2, #94	; 0x5e
 80069e6:	5a9b      	ldrh	r3, [r3, r2]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d100      	bne.n	80069f0 <HAL_UART_IRQHandler+0x478>
 80069ee:	e0dd      	b.n	8006bac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80069f0:	183b      	adds	r3, r7, r0
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d100      	bne.n	80069fa <HAL_UART_IRQHandler+0x482>
 80069f8:	e0d8      	b.n	8006bac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069fa:	f3ef 8310 	mrs	r3, PRIMASK
 80069fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a02:	2488      	movs	r4, #136	; 0x88
 8006a04:	193a      	adds	r2, r7, r4
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	2301      	movs	r3, #1
 8006a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f383 8810 	msr	PRIMASK, r3
}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4967      	ldr	r1, [pc, #412]	; (8006bbc <HAL_UART_IRQHandler+0x644>)
 8006a20:	400a      	ands	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	193b      	adds	r3, r7, r4
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a32:	f3ef 8310 	mrs	r3, PRIMASK
 8006a36:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a3a:	2484      	movs	r4, #132	; 0x84
 8006a3c:	193a      	adds	r2, r7, r4
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	2301      	movs	r3, #1
 8006a42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	495a      	ldr	r1, [pc, #360]	; (8006bc0 <HAL_UART_IRQHandler+0x648>)
 8006a58:	400a      	ands	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	228c      	movs	r2, #140	; 0x8c
 8006a6e:	2120      	movs	r1, #32
 8006a70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a86:	2480      	movs	r4, #128	; 0x80
 8006a88:	193a      	adds	r2, r7, r4
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a92:	f383 8810 	msr	PRIMASK, r3
}
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2110      	movs	r1, #16
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	193b      	adds	r3, r7, r4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	f383 8810 	msr	PRIMASK, r3
}
 8006ab4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006abc:	183b      	adds	r3, r7, r0
 8006abe:	881a      	ldrh	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0011      	movs	r1, r2
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 f88d 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006aca:	e06f      	b.n	8006bac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006acc:	23a4      	movs	r3, #164	; 0xa4
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	2380      	movs	r3, #128	; 0x80
 8006ad4:	035b      	lsls	r3, r3, #13
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d010      	beq.n	8006afc <HAL_UART_IRQHandler+0x584>
 8006ada:	239c      	movs	r3, #156	; 0x9c
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	2380      	movs	r3, #128	; 0x80
 8006ae2:	03db      	lsls	r3, r3, #15
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2280      	movs	r2, #128	; 0x80
 8006aee:	0352      	lsls	r2, r2, #13
 8006af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f001 fb37 	bl	8008168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006afa:	e05a      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006afc:	23a4      	movs	r3, #164	; 0xa4
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2280      	movs	r2, #128	; 0x80
 8006b04:	4013      	ands	r3, r2
 8006b06:	d016      	beq.n	8006b36 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b08:	23a0      	movs	r3, #160	; 0xa0
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2280      	movs	r2, #128	; 0x80
 8006b10:	4013      	ands	r3, r2
 8006b12:	d106      	bne.n	8006b22 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b14:	239c      	movs	r3, #156	; 0x9c
 8006b16:	18fb      	adds	r3, r7, r3
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	2380      	movs	r3, #128	; 0x80
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d042      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	0010      	movs	r0, r2
 8006b32:	4798      	blx	r3
    }
    return;
 8006b34:	e03c      	b.n	8006bb0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b36:	23a4      	movs	r3, #164	; 0xa4
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2240      	movs	r2, #64	; 0x40
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d00a      	beq.n	8006b58 <HAL_UART_IRQHandler+0x5e0>
 8006b42:	23a0      	movs	r3, #160	; 0xa0
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2240      	movs	r2, #64	; 0x40
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 fe7c 	bl	800784e <UART_EndTransmit_IT>
    return;
 8006b56:	e02c      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b58:	23a4      	movs	r3, #164	; 0xa4
 8006b5a:	18fb      	adds	r3, r7, r3
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	4013      	ands	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <HAL_UART_IRQHandler+0x606>
 8006b66:	23a0      	movs	r3, #160	; 0xa0
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	05db      	lsls	r3, r3, #23
 8006b70:	4013      	ands	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f001 fb06 	bl	8008188 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b7c:	e019      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b7e:	23a4      	movs	r3, #164	; 0xa4
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	2380      	movs	r3, #128	; 0x80
 8006b86:	045b      	lsls	r3, r3, #17
 8006b88:	4013      	ands	r3, r2
 8006b8a:	d012      	beq.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
 8006b8c:	23a0      	movs	r3, #160	; 0xa0
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	da0d      	bge.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f001 faed 	bl	8008178 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b9e:	e008      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
      return;
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	e006      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
    return;
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	e004      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
      return;
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	e002      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
      return;
 8006bac:	46c0      	nop			; (mov r8, r8)
 8006bae:	e000      	b.n	8006bb2 <HAL_UART_IRQHandler+0x63a>
    return;
 8006bb0:	46c0      	nop			; (mov r8, r8)
  }
}
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b02a      	add	sp, #168	; 0xa8
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006bb8:	fffffeff 	.word	0xfffffeff
 8006bbc:	fffffedf 	.word	0xfffffedf
 8006bc0:	effffffe 	.word	0xeffffffe

08006bc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bcc:	46c0      	nop			; (mov r8, r8)
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	b002      	add	sp, #8
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b002      	add	sp, #8
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	000a      	movs	r2, r1
 8006bee:	1cbb      	adds	r3, r7, #2
 8006bf0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b002      	add	sp, #8
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	b5b0      	push	{r4, r5, r7, lr}
 8006bfe:	b090      	sub	sp, #64	; 0x40
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c04:	231a      	movs	r3, #26
 8006c06:	2220      	movs	r2, #32
 8006c08:	189b      	adds	r3, r3, r2
 8006c0a:	19db      	adds	r3, r3, r7
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4aaf      	ldr	r2, [pc, #700]	; (8006eec <UART_SetConfig+0x2f0>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	0019      	movs	r1, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4aaa      	ldr	r2, [pc, #680]	; (8006ef0 <UART_SetConfig+0x2f4>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	0018      	movs	r0, r3
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	68d9      	ldr	r1, [r3, #12]
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	0003      	movs	r3, r0
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4aa4      	ldr	r2, [pc, #656]	; (8006ef4 <UART_SetConfig+0x2f8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	4a9f      	ldr	r2, [pc, #636]	; (8006ef8 <UART_SetConfig+0x2fc>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	220f      	movs	r2, #15
 8006c90:	4393      	bics	r3, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	0003      	movs	r3, r0
 8006c9e:	430b      	orrs	r3, r1
 8006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a95      	ldr	r2, [pc, #596]	; (8006efc <UART_SetConfig+0x300>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d131      	bne.n	8006d10 <UART_SetConfig+0x114>
 8006cac:	4b94      	ldr	r3, [pc, #592]	; (8006f00 <UART_SetConfig+0x304>)
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d01d      	beq.n	8006cf4 <UART_SetConfig+0xf8>
 8006cb8:	d823      	bhi.n	8006d02 <UART_SetConfig+0x106>
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d00c      	beq.n	8006cd8 <UART_SetConfig+0xdc>
 8006cbe:	d820      	bhi.n	8006d02 <UART_SetConfig+0x106>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <UART_SetConfig+0xce>
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d00e      	beq.n	8006ce6 <UART_SetConfig+0xea>
 8006cc8:	e01b      	b.n	8006d02 <UART_SetConfig+0x106>
 8006cca:	231b      	movs	r3, #27
 8006ccc:	2220      	movs	r2, #32
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	19db      	adds	r3, r3, r7
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	e0b4      	b.n	8006e42 <UART_SetConfig+0x246>
 8006cd8:	231b      	movs	r3, #27
 8006cda:	2220      	movs	r2, #32
 8006cdc:	189b      	adds	r3, r3, r2
 8006cde:	19db      	adds	r3, r3, r7
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e0ad      	b.n	8006e42 <UART_SetConfig+0x246>
 8006ce6:	231b      	movs	r3, #27
 8006ce8:	2220      	movs	r2, #32
 8006cea:	189b      	adds	r3, r3, r2
 8006cec:	19db      	adds	r3, r3, r7
 8006cee:	2204      	movs	r2, #4
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e0a6      	b.n	8006e42 <UART_SetConfig+0x246>
 8006cf4:	231b      	movs	r3, #27
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	189b      	adds	r3, r3, r2
 8006cfa:	19db      	adds	r3, r3, r7
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	701a      	strb	r2, [r3, #0]
 8006d00:	e09f      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d02:	231b      	movs	r3, #27
 8006d04:	2220      	movs	r2, #32
 8006d06:	189b      	adds	r3, r3, r2
 8006d08:	19db      	adds	r3, r3, r7
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e098      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a7b      	ldr	r2, [pc, #492]	; (8006f04 <UART_SetConfig+0x308>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d131      	bne.n	8006d7e <UART_SetConfig+0x182>
 8006d1a:	4b79      	ldr	r3, [pc, #484]	; (8006f00 <UART_SetConfig+0x304>)
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	220c      	movs	r2, #12
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b0c      	cmp	r3, #12
 8006d24:	d01d      	beq.n	8006d62 <UART_SetConfig+0x166>
 8006d26:	d823      	bhi.n	8006d70 <UART_SetConfig+0x174>
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d00c      	beq.n	8006d46 <UART_SetConfig+0x14a>
 8006d2c:	d820      	bhi.n	8006d70 <UART_SetConfig+0x174>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <UART_SetConfig+0x13c>
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d00e      	beq.n	8006d54 <UART_SetConfig+0x158>
 8006d36:	e01b      	b.n	8006d70 <UART_SetConfig+0x174>
 8006d38:	231b      	movs	r3, #27
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	189b      	adds	r3, r3, r2
 8006d3e:	19db      	adds	r3, r3, r7
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e07d      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d46:	231b      	movs	r3, #27
 8006d48:	2220      	movs	r2, #32
 8006d4a:	189b      	adds	r3, r3, r2
 8006d4c:	19db      	adds	r3, r3, r7
 8006d4e:	2202      	movs	r2, #2
 8006d50:	701a      	strb	r2, [r3, #0]
 8006d52:	e076      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d54:	231b      	movs	r3, #27
 8006d56:	2220      	movs	r2, #32
 8006d58:	189b      	adds	r3, r3, r2
 8006d5a:	19db      	adds	r3, r3, r7
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e06f      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d62:	231b      	movs	r3, #27
 8006d64:	2220      	movs	r2, #32
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	19db      	adds	r3, r3, r7
 8006d6a:	2208      	movs	r2, #8
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e068      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d70:	231b      	movs	r3, #27
 8006d72:	2220      	movs	r2, #32
 8006d74:	189b      	adds	r3, r3, r2
 8006d76:	19db      	adds	r3, r3, r7
 8006d78:	2210      	movs	r2, #16
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e061      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a61      	ldr	r2, [pc, #388]	; (8006f08 <UART_SetConfig+0x30c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d106      	bne.n	8006d96 <UART_SetConfig+0x19a>
 8006d88:	231b      	movs	r3, #27
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	189b      	adds	r3, r3, r2
 8006d8e:	19db      	adds	r3, r3, r7
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	e055      	b.n	8006e42 <UART_SetConfig+0x246>
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a5c      	ldr	r2, [pc, #368]	; (8006f0c <UART_SetConfig+0x310>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d106      	bne.n	8006dae <UART_SetConfig+0x1b2>
 8006da0:	231b      	movs	r3, #27
 8006da2:	2220      	movs	r2, #32
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	19db      	adds	r3, r3, r7
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	e049      	b.n	8006e42 <UART_SetConfig+0x246>
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a50      	ldr	r2, [pc, #320]	; (8006ef4 <UART_SetConfig+0x2f8>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d13e      	bne.n	8006e36 <UART_SetConfig+0x23a>
 8006db8:	4b51      	ldr	r3, [pc, #324]	; (8006f00 <UART_SetConfig+0x304>)
 8006dba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dbc:	23c0      	movs	r3, #192	; 0xc0
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	22c0      	movs	r2, #192	; 0xc0
 8006dc4:	0112      	lsls	r2, r2, #4
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d027      	beq.n	8006e1a <UART_SetConfig+0x21e>
 8006dca:	22c0      	movs	r2, #192	; 0xc0
 8006dcc:	0112      	lsls	r2, r2, #4
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d82a      	bhi.n	8006e28 <UART_SetConfig+0x22c>
 8006dd2:	2280      	movs	r2, #128	; 0x80
 8006dd4:	0112      	lsls	r2, r2, #4
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d011      	beq.n	8006dfe <UART_SetConfig+0x202>
 8006dda:	2280      	movs	r2, #128	; 0x80
 8006ddc:	0112      	lsls	r2, r2, #4
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d822      	bhi.n	8006e28 <UART_SetConfig+0x22c>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d004      	beq.n	8006df0 <UART_SetConfig+0x1f4>
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	00d2      	lsls	r2, r2, #3
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <UART_SetConfig+0x210>
 8006dee:	e01b      	b.n	8006e28 <UART_SetConfig+0x22c>
 8006df0:	231b      	movs	r3, #27
 8006df2:	2220      	movs	r2, #32
 8006df4:	189b      	adds	r3, r3, r2
 8006df6:	19db      	adds	r3, r3, r7
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e021      	b.n	8006e42 <UART_SetConfig+0x246>
 8006dfe:	231b      	movs	r3, #27
 8006e00:	2220      	movs	r2, #32
 8006e02:	189b      	adds	r3, r3, r2
 8006e04:	19db      	adds	r3, r3, r7
 8006e06:	2202      	movs	r2, #2
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e01a      	b.n	8006e42 <UART_SetConfig+0x246>
 8006e0c:	231b      	movs	r3, #27
 8006e0e:	2220      	movs	r2, #32
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	19db      	adds	r3, r3, r7
 8006e14:	2204      	movs	r2, #4
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e013      	b.n	8006e42 <UART_SetConfig+0x246>
 8006e1a:	231b      	movs	r3, #27
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	19db      	adds	r3, r3, r7
 8006e22:	2208      	movs	r2, #8
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e00c      	b.n	8006e42 <UART_SetConfig+0x246>
 8006e28:	231b      	movs	r3, #27
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	189b      	adds	r3, r3, r2
 8006e2e:	19db      	adds	r3, r3, r7
 8006e30:	2210      	movs	r2, #16
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	e005      	b.n	8006e42 <UART_SetConfig+0x246>
 8006e36:	231b      	movs	r3, #27
 8006e38:	2220      	movs	r2, #32
 8006e3a:	189b      	adds	r3, r3, r2
 8006e3c:	19db      	adds	r3, r3, r7
 8006e3e:	2210      	movs	r2, #16
 8006e40:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <UART_SetConfig+0x2f8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d000      	beq.n	8006e4e <UART_SetConfig+0x252>
 8006e4c:	e0a9      	b.n	8006fa2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e4e:	231b      	movs	r3, #27
 8006e50:	2220      	movs	r2, #32
 8006e52:	189b      	adds	r3, r3, r2
 8006e54:	19db      	adds	r3, r3, r7
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d015      	beq.n	8006e88 <UART_SetConfig+0x28c>
 8006e5c:	dc18      	bgt.n	8006e90 <UART_SetConfig+0x294>
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d00d      	beq.n	8006e7e <UART_SetConfig+0x282>
 8006e62:	dc15      	bgt.n	8006e90 <UART_SetConfig+0x294>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <UART_SetConfig+0x272>
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d005      	beq.n	8006e78 <UART_SetConfig+0x27c>
 8006e6c:	e010      	b.n	8006e90 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6e:	f7fd fd77 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8006e72:	0003      	movs	r3, r0
 8006e74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e76:	e014      	b.n	8006ea2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <UART_SetConfig+0x314>)
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e7c:	e011      	b.n	8006ea2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fd fce3 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 8006e82:	0003      	movs	r3, r0
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e86:	e00c      	b.n	8006ea2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	021b      	lsls	r3, r3, #8
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e8e:	e008      	b.n	8006ea2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e94:	231a      	movs	r3, #26
 8006e96:	2220      	movs	r2, #32
 8006e98:	189b      	adds	r3, r3, r2
 8006e9a:	19db      	adds	r3, r3, r7
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	701a      	strb	r2, [r3, #0]
        break;
 8006ea0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d100      	bne.n	8006eaa <UART_SetConfig+0x2ae>
 8006ea8:	e14b      	b.n	8007142 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eae:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <UART_SetConfig+0x318>)
 8006eb0:	0052      	lsls	r2, r2, #1
 8006eb2:	5ad3      	ldrh	r3, [r2, r3]
 8006eb4:	0019      	movs	r1, r3
 8006eb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006eb8:	f7f9 f942 	bl	8000140 <__udivsi3>
 8006ebc:	0003      	movs	r3, r0
 8006ebe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	189b      	adds	r3, r3, r2
 8006eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d305      	bcc.n	8006edc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d91d      	bls.n	8006f18 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006edc:	231a      	movs	r3, #26
 8006ede:	2220      	movs	r2, #32
 8006ee0:	189b      	adds	r3, r3, r2
 8006ee2:	19db      	adds	r3, r3, r7
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e12b      	b.n	8007142 <UART_SetConfig+0x546>
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	cfff69f3 	.word	0xcfff69f3
 8006ef0:	ffffcfff 	.word	0xffffcfff
 8006ef4:	40008000 	.word	0x40008000
 8006ef8:	11fff4ff 	.word	0x11fff4ff
 8006efc:	40013800 	.word	0x40013800
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40004400 	.word	0x40004400
 8006f08:	40004800 	.word	0x40004800
 8006f0c:	40004c00 	.word	0x40004c00
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	0800e23c 	.word	0x0800e23c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f24:	4b92      	ldr	r3, [pc, #584]	; (8007170 <UART_SetConfig+0x574>)
 8006f26:	0052      	lsls	r2, r2, #1
 8006f28:	5ad3      	ldrh	r3, [r2, r3]
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	69b8      	ldr	r0, [r7, #24]
 8006f36:	69f9      	ldr	r1, [r7, #28]
 8006f38:	f7f9 fab6 	bl	80004a8 <__aeabi_uldivmod>
 8006f3c:	0002      	movs	r2, r0
 8006f3e:	000b      	movs	r3, r1
 8006f40:	0e11      	lsrs	r1, r2, #24
 8006f42:	021d      	lsls	r5, r3, #8
 8006f44:	430d      	orrs	r5, r1
 8006f46:	0214      	lsls	r4, r2, #8
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	60bb      	str	r3, [r7, #8]
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68b8      	ldr	r0, [r7, #8]
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	1900      	adds	r0, r0, r4
 8006f5a:	4169      	adcs	r1, r5
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f7f9 fa9d 	bl	80004a8 <__aeabi_uldivmod>
 8006f6e:	0002      	movs	r2, r0
 8006f70:	000b      	movs	r3, r1
 8006f72:	0013      	movs	r3, r2
 8006f74:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f78:	23c0      	movs	r3, #192	; 0xc0
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d309      	bcc.n	8006f94 <UART_SetConfig+0x398>
 8006f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	035b      	lsls	r3, r3, #13
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d204      	bcs.n	8006f94 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	e0d6      	b.n	8007142 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006f94:	231a      	movs	r3, #26
 8006f96:	2220      	movs	r2, #32
 8006f98:	189b      	adds	r3, r3, r2
 8006f9a:	19db      	adds	r3, r3, r7
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	e0cf      	b.n	8007142 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	2380      	movs	r3, #128	; 0x80
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d000      	beq.n	8006fb0 <UART_SetConfig+0x3b4>
 8006fae:	e070      	b.n	8007092 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006fb0:	231b      	movs	r3, #27
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	189b      	adds	r3, r3, r2
 8006fb6:	19db      	adds	r3, r3, r7
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d015      	beq.n	8006fea <UART_SetConfig+0x3ee>
 8006fbe:	dc18      	bgt.n	8006ff2 <UART_SetConfig+0x3f6>
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d00d      	beq.n	8006fe0 <UART_SetConfig+0x3e4>
 8006fc4:	dc15      	bgt.n	8006ff2 <UART_SetConfig+0x3f6>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <UART_SetConfig+0x3d4>
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d005      	beq.n	8006fda <UART_SetConfig+0x3de>
 8006fce:	e010      	b.n	8006ff2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd fcc6 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fd8:	e014      	b.n	8007004 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fda:	4b66      	ldr	r3, [pc, #408]	; (8007174 <UART_SetConfig+0x578>)
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fde:	e011      	b.n	8007004 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe0:	f7fd fc32 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 8006fe4:	0003      	movs	r3, r0
 8006fe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fe8:	e00c      	b.n	8007004 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	021b      	lsls	r3, r3, #8
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff0:	e008      	b.n	8007004 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006ff6:	231a      	movs	r3, #26
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	19db      	adds	r3, r3, r7
 8006ffe:	2201      	movs	r2, #1
 8007000:	701a      	strb	r2, [r3, #0]
        break;
 8007002:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	2b00      	cmp	r3, #0
 8007008:	d100      	bne.n	800700c <UART_SetConfig+0x410>
 800700a:	e09a      	b.n	8007142 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007010:	4b57      	ldr	r3, [pc, #348]	; (8007170 <UART_SetConfig+0x574>)
 8007012:	0052      	lsls	r2, r2, #1
 8007014:	5ad3      	ldrh	r3, [r2, r3]
 8007016:	0019      	movs	r1, r3
 8007018:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800701a:	f7f9 f891 	bl	8000140 <__udivsi3>
 800701e:	0003      	movs	r3, r0
 8007020:	005a      	lsls	r2, r3, #1
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	18d2      	adds	r2, r2, r3
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	0019      	movs	r1, r3
 8007030:	0010      	movs	r0, r2
 8007032:	f7f9 f885 	bl	8000140 <__udivsi3>
 8007036:	0003      	movs	r3, r0
 8007038:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	2b0f      	cmp	r3, #15
 800703e:	d921      	bls.n	8007084 <UART_SetConfig+0x488>
 8007040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007042:	2380      	movs	r3, #128	; 0x80
 8007044:	025b      	lsls	r3, r3, #9
 8007046:	429a      	cmp	r2, r3
 8007048:	d21c      	bcs.n	8007084 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	b29a      	uxth	r2, r3
 800704e:	200e      	movs	r0, #14
 8007050:	2420      	movs	r4, #32
 8007052:	1903      	adds	r3, r0, r4
 8007054:	19db      	adds	r3, r3, r7
 8007056:	210f      	movs	r1, #15
 8007058:	438a      	bics	r2, r1
 800705a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	b29b      	uxth	r3, r3
 8007062:	2207      	movs	r2, #7
 8007064:	4013      	ands	r3, r2
 8007066:	b299      	uxth	r1, r3
 8007068:	1903      	adds	r3, r0, r4
 800706a:	19db      	adds	r3, r3, r7
 800706c:	1902      	adds	r2, r0, r4
 800706e:	19d2      	adds	r2, r2, r7
 8007070:	8812      	ldrh	r2, [r2, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	1902      	adds	r2, r0, r4
 800707c:	19d2      	adds	r2, r2, r7
 800707e:	8812      	ldrh	r2, [r2, #0]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	e05e      	b.n	8007142 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007084:	231a      	movs	r3, #26
 8007086:	2220      	movs	r2, #32
 8007088:	189b      	adds	r3, r3, r2
 800708a:	19db      	adds	r3, r3, r7
 800708c:	2201      	movs	r2, #1
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	e057      	b.n	8007142 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007092:	231b      	movs	r3, #27
 8007094:	2220      	movs	r2, #32
 8007096:	189b      	adds	r3, r3, r2
 8007098:	19db      	adds	r3, r3, r7
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d015      	beq.n	80070cc <UART_SetConfig+0x4d0>
 80070a0:	dc18      	bgt.n	80070d4 <UART_SetConfig+0x4d8>
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d00d      	beq.n	80070c2 <UART_SetConfig+0x4c6>
 80070a6:	dc15      	bgt.n	80070d4 <UART_SetConfig+0x4d8>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <UART_SetConfig+0x4b6>
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d005      	beq.n	80070bc <UART_SetConfig+0x4c0>
 80070b0:	e010      	b.n	80070d4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b2:	f7fd fc55 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 80070b6:	0003      	movs	r3, r0
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ba:	e014      	b.n	80070e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070bc:	4b2d      	ldr	r3, [pc, #180]	; (8007174 <UART_SetConfig+0x578>)
 80070be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070c0:	e011      	b.n	80070e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070c2:	f7fd fbc1 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 80070c6:	0003      	movs	r3, r0
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070ca:	e00c      	b.n	80070e6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070cc:	2380      	movs	r3, #128	; 0x80
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070d2:	e008      	b.n	80070e6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80070d8:	231a      	movs	r3, #26
 80070da:	2220      	movs	r2, #32
 80070dc:	189b      	adds	r3, r3, r2
 80070de:	19db      	adds	r3, r3, r7
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
        break;
 80070e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02a      	beq.n	8007142 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f0:	4b1f      	ldr	r3, [pc, #124]	; (8007170 <UART_SetConfig+0x574>)
 80070f2:	0052      	lsls	r2, r2, #1
 80070f4:	5ad3      	ldrh	r3, [r2, r3]
 80070f6:	0019      	movs	r1, r3
 80070f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070fa:	f7f9 f821 	bl	8000140 <__udivsi3>
 80070fe:	0003      	movs	r3, r0
 8007100:	001a      	movs	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	18d2      	adds	r2, r2, r3
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	0019      	movs	r1, r3
 8007110:	0010      	movs	r0, r2
 8007112:	f7f9 f815 	bl	8000140 <__udivsi3>
 8007116:	0003      	movs	r3, r0
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	2b0f      	cmp	r3, #15
 800711e:	d90a      	bls.n	8007136 <UART_SetConfig+0x53a>
 8007120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007122:	2380      	movs	r3, #128	; 0x80
 8007124:	025b      	lsls	r3, r3, #9
 8007126:	429a      	cmp	r2, r3
 8007128:	d205      	bcs.n	8007136 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	b29a      	uxth	r2, r3
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60da      	str	r2, [r3, #12]
 8007134:	e005      	b.n	8007142 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007136:	231a      	movs	r3, #26
 8007138:	2220      	movs	r2, #32
 800713a:	189b      	adds	r3, r3, r2
 800713c:	19db      	adds	r3, r3, r7
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	226a      	movs	r2, #106	; 0x6a
 8007146:	2101      	movs	r1, #1
 8007148:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	2268      	movs	r2, #104	; 0x68
 800714e:	2101      	movs	r1, #1
 8007150:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	2200      	movs	r2, #0
 8007156:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	2200      	movs	r2, #0
 800715c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800715e:	231a      	movs	r3, #26
 8007160:	2220      	movs	r2, #32
 8007162:	189b      	adds	r3, r3, r2
 8007164:	19db      	adds	r3, r3, r7
 8007166:	781b      	ldrb	r3, [r3, #0]
}
 8007168:	0018      	movs	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	b010      	add	sp, #64	; 0x40
 800716e:	bdb0      	pop	{r4, r5, r7, pc}
 8007170:	0800e23c 	.word	0x0800e23c
 8007174:	00f42400 	.word	0x00f42400

08007178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	2201      	movs	r2, #1
 8007186:	4013      	ands	r3, r2
 8007188:	d00b      	beq.n	80071a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	4a4a      	ldr	r2, [pc, #296]	; (80072bc <UART_AdvFeatureConfig+0x144>)
 8007192:	4013      	ands	r3, r2
 8007194:	0019      	movs	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	2202      	movs	r2, #2
 80071a8:	4013      	ands	r3, r2
 80071aa:	d00b      	beq.n	80071c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4a43      	ldr	r2, [pc, #268]	; (80072c0 <UART_AdvFeatureConfig+0x148>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	0019      	movs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	2204      	movs	r2, #4
 80071ca:	4013      	ands	r3, r2
 80071cc:	d00b      	beq.n	80071e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	4a3b      	ldr	r2, [pc, #236]	; (80072c4 <UART_AdvFeatureConfig+0x14c>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	0019      	movs	r1, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	2208      	movs	r2, #8
 80071ec:	4013      	ands	r3, r2
 80071ee:	d00b      	beq.n	8007208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	4a34      	ldr	r2, [pc, #208]	; (80072c8 <UART_AdvFeatureConfig+0x150>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	0019      	movs	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	2210      	movs	r2, #16
 800720e:	4013      	ands	r3, r2
 8007210:	d00b      	beq.n	800722a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	4a2c      	ldr	r2, [pc, #176]	; (80072cc <UART_AdvFeatureConfig+0x154>)
 800721a:	4013      	ands	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	2220      	movs	r2, #32
 8007230:	4013      	ands	r3, r2
 8007232:	d00b      	beq.n	800724c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	4a25      	ldr	r2, [pc, #148]	; (80072d0 <UART_AdvFeatureConfig+0x158>)
 800723c:	4013      	ands	r3, r2
 800723e:	0019      	movs	r1, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	4013      	ands	r3, r2
 8007254:	d01d      	beq.n	8007292 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	4a1d      	ldr	r2, [pc, #116]	; (80072d4 <UART_AdvFeatureConfig+0x15c>)
 800725e:	4013      	ands	r3, r2
 8007260:	0019      	movs	r1, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	035b      	lsls	r3, r3, #13
 8007276:	429a      	cmp	r2, r3
 8007278:	d10b      	bne.n	8007292 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <UART_AdvFeatureConfig+0x160>)
 8007282:	4013      	ands	r3, r2
 8007284:	0019      	movs	r1, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	2280      	movs	r2, #128	; 0x80
 8007298:	4013      	ands	r3, r2
 800729a:	d00b      	beq.n	80072b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <UART_AdvFeatureConfig+0x164>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	0019      	movs	r1, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
  }
}
 80072b4:	46c0      	nop			; (mov r8, r8)
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b002      	add	sp, #8
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	fffdffff 	.word	0xfffdffff
 80072c0:	fffeffff 	.word	0xfffeffff
 80072c4:	fffbffff 	.word	0xfffbffff
 80072c8:	ffff7fff 	.word	0xffff7fff
 80072cc:	ffffefff 	.word	0xffffefff
 80072d0:	ffffdfff 	.word	0xffffdfff
 80072d4:	ffefffff 	.word	0xffefffff
 80072d8:	ff9fffff 	.word	0xff9fffff
 80072dc:	fff7ffff 	.word	0xfff7ffff

080072e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2290      	movs	r2, #144	; 0x90
 80072ec:	2100      	movs	r1, #0
 80072ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072f0:	f7fc fae8 	bl	80038c4 <HAL_GetTick>
 80072f4:	0003      	movs	r3, r0
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2208      	movs	r2, #8
 8007300:	4013      	ands	r3, r2
 8007302:	2b08      	cmp	r3, #8
 8007304:	d10c      	bne.n	8007320 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2280      	movs	r2, #128	; 0x80
 800730a:	0391      	lsls	r1, r2, #14
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <UART_CheckIdleState+0x98>)
 8007310:	9200      	str	r2, [sp, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	f000 f832 	bl	800737c <UART_WaitOnFlagUntilTimeout>
 8007318:	1e03      	subs	r3, r0, #0
 800731a:	d001      	beq.n	8007320 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e026      	b.n	800736e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2204      	movs	r2, #4
 8007328:	4013      	ands	r3, r2
 800732a:	2b04      	cmp	r3, #4
 800732c:	d10c      	bne.n	8007348 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2280      	movs	r2, #128	; 0x80
 8007332:	03d1      	lsls	r1, r2, #15
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4a10      	ldr	r2, [pc, #64]	; (8007378 <UART_CheckIdleState+0x98>)
 8007338:	9200      	str	r2, [sp, #0]
 800733a:	2200      	movs	r2, #0
 800733c:	f000 f81e 	bl	800737c <UART_WaitOnFlagUntilTimeout>
 8007340:	1e03      	subs	r3, r0, #0
 8007342:	d001      	beq.n	8007348 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e012      	b.n	800736e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2288      	movs	r2, #136	; 0x88
 800734c:	2120      	movs	r1, #32
 800734e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	228c      	movs	r2, #140	; 0x8c
 8007354:	2120      	movs	r1, #32
 8007356:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2284      	movs	r2, #132	; 0x84
 8007368:	2100      	movs	r1, #0
 800736a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	0018      	movs	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	b004      	add	sp, #16
 8007374:	bd80      	pop	{r7, pc}
 8007376:	46c0      	nop			; (mov r8, r8)
 8007378:	01ffffff 	.word	0x01ffffff

0800737c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b094      	sub	sp, #80	; 0x50
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	1dfb      	adds	r3, r7, #7
 800738a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738c:	e0a7      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007390:	3301      	adds	r3, #1
 8007392:	d100      	bne.n	8007396 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007394:	e0a3      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007396:	f7fc fa95 	bl	80038c4 <HAL_GetTick>
 800739a:	0002      	movs	r2, r0
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <UART_WaitOnFlagUntilTimeout+0x30>
 80073a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d13f      	bne.n	800742c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ac:	f3ef 8310 	mrs	r3, PRIMASK
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
 80073b6:	2301      	movs	r3, #1
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	f383 8810 	msr	PRIMASK, r3
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	494e      	ldr	r1, [pc, #312]	; (8007508 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80073ce:	400a      	ands	r2, r1
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f383 8810 	msr	PRIMASK, r3
}
 80073dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073de:	f3ef 8310 	mrs	r3, PRIMASK
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e6:	643b      	str	r3, [r7, #64]	; 0x40
 80073e8:	2301      	movs	r3, #1
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	f383 8810 	msr	PRIMASK, r3
}
 80073f2:	46c0      	nop			; (mov r8, r8)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2101      	movs	r1, #1
 8007400:	438a      	bics	r2, r1
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	f383 8810 	msr	PRIMASK, r3
}
 800740e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2288      	movs	r2, #136	; 0x88
 8007414:	2120      	movs	r1, #32
 8007416:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	228c      	movs	r2, #140	; 0x8c
 800741c:	2120      	movs	r1, #32
 800741e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2284      	movs	r2, #132	; 0x84
 8007424:	2100      	movs	r1, #0
 8007426:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e069      	b.n	8007500 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2204      	movs	r2, #4
 8007434:	4013      	ands	r3, r2
 8007436:	d052      	beq.n	80074de <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	2380      	movs	r3, #128	; 0x80
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	401a      	ands	r2, r3
 8007444:	2380      	movs	r3, #128	; 0x80
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	429a      	cmp	r2, r3
 800744a:	d148      	bne.n	80074de <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2280      	movs	r2, #128	; 0x80
 8007452:	0112      	lsls	r2, r2, #4
 8007454:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007456:	f3ef 8310 	mrs	r3, PRIMASK
 800745a:	613b      	str	r3, [r7, #16]
  return(result);
 800745c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f383 8810 	msr	PRIMASK, r3
}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4924      	ldr	r1, [pc, #144]	; (8007508 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007478:	400a      	ands	r2, r1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800747e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f383 8810 	msr	PRIMASK, r3
}
 8007486:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007488:	f3ef 8310 	mrs	r3, PRIMASK
 800748c:	61fb      	str	r3, [r7, #28]
  return(result);
 800748e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007490:	64bb      	str	r3, [r7, #72]	; 0x48
 8007492:	2301      	movs	r3, #1
 8007494:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f383 8810 	msr	PRIMASK, r3
}
 800749c:	46c0      	nop			; (mov r8, r8)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2101      	movs	r1, #1
 80074aa:	438a      	bics	r2, r1
 80074ac:	609a      	str	r2, [r3, #8]
 80074ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	f383 8810 	msr	PRIMASK, r3
}
 80074b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2288      	movs	r2, #136	; 0x88
 80074be:	2120      	movs	r1, #32
 80074c0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	228c      	movs	r2, #140	; 0x8c
 80074c6:	2120      	movs	r1, #32
 80074c8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2290      	movs	r2, #144	; 0x90
 80074ce:	2120      	movs	r1, #32
 80074d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2284      	movs	r2, #132	; 0x84
 80074d6:	2100      	movs	r1, #0
 80074d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e010      	b.n	8007500 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	4013      	ands	r3, r2
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	425a      	negs	r2, r3
 80074ee:	4153      	adcs	r3, r2
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	001a      	movs	r2, r3
 80074f4:	1dfb      	adds	r3, r7, #7
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d100      	bne.n	80074fe <UART_WaitOnFlagUntilTimeout+0x182>
 80074fc:	e747      	b.n	800738e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	0018      	movs	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	b014      	add	sp, #80	; 0x50
 8007506:	bd80      	pop	{r7, pc}
 8007508:	fffffe5f 	.word	0xfffffe5f

0800750c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b098      	sub	sp, #96	; 0x60
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	1dbb      	adds	r3, r7, #6
 8007518:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1dba      	adds	r2, r7, #6
 8007524:	215c      	movs	r1, #92	; 0x5c
 8007526:	8812      	ldrh	r2, [r2, #0]
 8007528:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1dba      	adds	r2, r7, #6
 800752e:	215e      	movs	r1, #94	; 0x5e
 8007530:	8812      	ldrh	r2, [r2, #0]
 8007532:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	689a      	ldr	r2, [r3, #8]
 800753e:	2380      	movs	r3, #128	; 0x80
 8007540:	015b      	lsls	r3, r3, #5
 8007542:	429a      	cmp	r2, r3
 8007544:	d10d      	bne.n	8007562 <UART_Start_Receive_IT+0x56>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <UART_Start_Receive_IT+0x4c>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2260      	movs	r2, #96	; 0x60
 8007552:	497b      	ldr	r1, [pc, #492]	; (8007740 <UART_Start_Receive_IT+0x234>)
 8007554:	5299      	strh	r1, [r3, r2]
 8007556:	e02e      	b.n	80075b6 <UART_Start_Receive_IT+0xaa>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2260      	movs	r2, #96	; 0x60
 800755c:	21ff      	movs	r1, #255	; 0xff
 800755e:	5299      	strh	r1, [r3, r2]
 8007560:	e029      	b.n	80075b6 <UART_Start_Receive_IT+0xaa>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10d      	bne.n	8007586 <UART_Start_Receive_IT+0x7a>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d104      	bne.n	800757c <UART_Start_Receive_IT+0x70>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2260      	movs	r2, #96	; 0x60
 8007576:	21ff      	movs	r1, #255	; 0xff
 8007578:	5299      	strh	r1, [r3, r2]
 800757a:	e01c      	b.n	80075b6 <UART_Start_Receive_IT+0xaa>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2260      	movs	r2, #96	; 0x60
 8007580:	217f      	movs	r1, #127	; 0x7f
 8007582:	5299      	strh	r1, [r3, r2]
 8007584:	e017      	b.n	80075b6 <UART_Start_Receive_IT+0xaa>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	2380      	movs	r3, #128	; 0x80
 800758c:	055b      	lsls	r3, r3, #21
 800758e:	429a      	cmp	r2, r3
 8007590:	d10d      	bne.n	80075ae <UART_Start_Receive_IT+0xa2>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <UART_Start_Receive_IT+0x98>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2260      	movs	r2, #96	; 0x60
 800759e:	217f      	movs	r1, #127	; 0x7f
 80075a0:	5299      	strh	r1, [r3, r2]
 80075a2:	e008      	b.n	80075b6 <UART_Start_Receive_IT+0xaa>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2260      	movs	r2, #96	; 0x60
 80075a8:	213f      	movs	r1, #63	; 0x3f
 80075aa:	5299      	strh	r1, [r3, r2]
 80075ac:	e003      	b.n	80075b6 <UART_Start_Receive_IT+0xaa>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2260      	movs	r2, #96	; 0x60
 80075b2:	2100      	movs	r1, #0
 80075b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2290      	movs	r2, #144	; 0x90
 80075ba:	2100      	movs	r1, #0
 80075bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	228c      	movs	r2, #140	; 0x8c
 80075c2:	2122      	movs	r1, #34	; 0x22
 80075c4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80075cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d0:	2301      	movs	r3, #1
 80075d2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d6:	f383 8810 	msr	PRIMASK, r3
}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2101      	movs	r1, #1
 80075e8:	430a      	orrs	r2, r1
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ee:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f2:	f383 8810 	msr	PRIMASK, r3
}
 80075f6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	059b      	lsls	r3, r3, #22
 8007600:	429a      	cmp	r2, r3
 8007602:	d150      	bne.n	80076a6 <UART_Start_Receive_IT+0x19a>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2268      	movs	r2, #104	; 0x68
 8007608:	5a9b      	ldrh	r3, [r3, r2]
 800760a:	1dba      	adds	r2, r7, #6
 800760c:	8812      	ldrh	r2, [r2, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d349      	bcc.n	80076a6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	2380      	movs	r3, #128	; 0x80
 8007618:	015b      	lsls	r3, r3, #5
 800761a:	429a      	cmp	r2, r3
 800761c:	d107      	bne.n	800762e <UART_Start_Receive_IT+0x122>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d103      	bne.n	800762e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4a46      	ldr	r2, [pc, #280]	; (8007744 <UART_Start_Receive_IT+0x238>)
 800762a:	675a      	str	r2, [r3, #116]	; 0x74
 800762c:	e002      	b.n	8007634 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a45      	ldr	r2, [pc, #276]	; (8007748 <UART_Start_Receive_IT+0x23c>)
 8007632:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d019      	beq.n	8007670 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763c:	f3ef 8310 	mrs	r3, PRIMASK
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007644:	65bb      	str	r3, [r7, #88]	; 0x58
 8007646:	2301      	movs	r3, #1
 8007648:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	f383 8810 	msr	PRIMASK, r3
}
 8007650:	46c0      	nop			; (mov r8, r8)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	0049      	lsls	r1, r1, #1
 8007660:	430a      	orrs	r2, r1
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007666:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	f383 8810 	msr	PRIMASK, r3
}
 800766e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007670:	f3ef 8310 	mrs	r3, PRIMASK
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007678:	657b      	str	r3, [r7, #84]	; 0x54
 800767a:	2301      	movs	r3, #1
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	f383 8810 	msr	PRIMASK, r3
}
 8007684:	46c0      	nop			; (mov r8, r8)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2180      	movs	r1, #128	; 0x80
 8007692:	0549      	lsls	r1, r1, #21
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800769a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	e047      	b.n	8007736 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	015b      	lsls	r3, r3, #5
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d107      	bne.n	80076c2 <UART_Start_Receive_IT+0x1b6>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4a23      	ldr	r2, [pc, #140]	; (800774c <UART_Start_Receive_IT+0x240>)
 80076be:	675a      	str	r2, [r3, #116]	; 0x74
 80076c0:	e002      	b.n	80076c8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a22      	ldr	r2, [pc, #136]	; (8007750 <UART_Start_Receive_IT+0x244>)
 80076c6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d019      	beq.n	8007704 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d0:	f3ef 8310 	mrs	r3, PRIMASK
 80076d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80076d6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076da:	2301      	movs	r3, #1
 80076dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f383 8810 	msr	PRIMASK, r3
}
 80076e4:	46c0      	nop			; (mov r8, r8)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2190      	movs	r1, #144	; 0x90
 80076f2:	0049      	lsls	r1, r1, #1
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	f383 8810 	msr	PRIMASK, r3
}
 8007702:	e018      	b.n	8007736 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007704:	f3ef 8310 	mrs	r3, PRIMASK
 8007708:	613b      	str	r3, [r7, #16]
  return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800770c:	653b      	str	r3, [r7, #80]	; 0x50
 800770e:	2301      	movs	r3, #1
 8007710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	46c0      	nop			; (mov r8, r8)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2120      	movs	r1, #32
 8007726:	430a      	orrs	r2, r1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	f383 8810 	msr	PRIMASK, r3
}
 8007734:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	0018      	movs	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	b018      	add	sp, #96	; 0x60
 800773e:	bd80      	pop	{r7, pc}
 8007740:	000001ff 	.word	0x000001ff
 8007744:	08007e7d 	.word	0x08007e7d
 8007748:	08007b91 	.word	0x08007b91
 800774c:	08007a1d 	.word	0x08007a1d
 8007750:	080078a9 	.word	0x080078a9

08007754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08e      	sub	sp, #56	; 0x38
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775c:	f3ef 8310 	mrs	r3, PRIMASK
 8007760:	617b      	str	r3, [r7, #20]
  return(result);
 8007762:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	2301      	movs	r3, #1
 8007768:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	f383 8810 	msr	PRIMASK, r3
}
 8007770:	46c0      	nop			; (mov r8, r8)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4926      	ldr	r1, [pc, #152]	; (8007818 <UART_EndRxTransfer+0xc4>)
 800777e:	400a      	ands	r2, r1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007784:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f383 8810 	msr	PRIMASK, r3
}
 800778c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800778e:	f3ef 8310 	mrs	r3, PRIMASK
 8007792:	623b      	str	r3, [r7, #32]
  return(result);
 8007794:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007796:	633b      	str	r3, [r7, #48]	; 0x30
 8007798:	2301      	movs	r3, #1
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	f383 8810 	msr	PRIMASK, r3
}
 80077a2:	46c0      	nop			; (mov r8, r8)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	491b      	ldr	r1, [pc, #108]	; (800781c <UART_EndRxTransfer+0xc8>)
 80077b0:	400a      	ands	r2, r1
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ba:	f383 8810 	msr	PRIMASK, r3
}
 80077be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d118      	bne.n	80077fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c8:	f3ef 8310 	mrs	r3, PRIMASK
 80077cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d2:	2301      	movs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f383 8810 	msr	PRIMASK, r3
}
 80077dc:	46c0      	nop			; (mov r8, r8)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2110      	movs	r1, #16
 80077ea:	438a      	bics	r2, r1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f383 8810 	msr	PRIMASK, r3
}
 80077f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	228c      	movs	r2, #140	; 0x8c
 80077fe:	2120      	movs	r1, #32
 8007800:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800780e:	46c0      	nop			; (mov r8, r8)
 8007810:	46bd      	mov	sp, r7
 8007812:	b00e      	add	sp, #56	; 0x38
 8007814:	bd80      	pop	{r7, pc}
 8007816:	46c0      	nop			; (mov r8, r8)
 8007818:	fffffedf 	.word	0xfffffedf
 800781c:	effffffe 	.word	0xeffffffe

08007820 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	225e      	movs	r2, #94	; 0x5e
 8007832:	2100      	movs	r1, #0
 8007834:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2256      	movs	r2, #86	; 0x56
 800783a:	2100      	movs	r1, #0
 800783c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	0018      	movs	r0, r3
 8007842:	f7ff f9c7 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	46bd      	mov	sp, r7
 800784a:	b004      	add	sp, #16
 800784c:	bd80      	pop	{r7, pc}

0800784e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b086      	sub	sp, #24
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	60bb      	str	r3, [r7, #8]
  return(result);
 800785c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	2301      	movs	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f383 8810 	msr	PRIMASK, r3
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2140      	movs	r1, #64	; 0x40
 8007878:	438a      	bics	r2, r1
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f383 8810 	msr	PRIMASK, r3
}
 8007886:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2288      	movs	r2, #136	; 0x88
 800788c:	2120      	movs	r1, #32
 800788e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	0018      	movs	r0, r3
 800789a:	f7ff f993 	bl	8006bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	46bd      	mov	sp, r7
 80078a2:	b006      	add	sp, #24
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b090      	sub	sp, #64	; 0x40
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078b0:	203e      	movs	r0, #62	; 0x3e
 80078b2:	183b      	adds	r3, r7, r0
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	2160      	movs	r1, #96	; 0x60
 80078b8:	5a52      	ldrh	r2, [r2, r1]
 80078ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	228c      	movs	r2, #140	; 0x8c
 80078c0:	589b      	ldr	r3, [r3, r2]
 80078c2:	2b22      	cmp	r3, #34	; 0x22
 80078c4:	d000      	beq.n	80078c8 <UART_RxISR_8BIT+0x20>
 80078c6:	e09a      	b.n	80079fe <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078ce:	213c      	movs	r1, #60	; 0x3c
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078d4:	187b      	adds	r3, r7, r1
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	183b      	adds	r3, r7, r0
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	b2d9      	uxtb	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	400a      	ands	r2, r1
 80078e6:	b2d2      	uxtb	r2, r2
 80078e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	225e      	movs	r2, #94	; 0x5e
 80078f8:	5a9b      	ldrh	r3, [r3, r2]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b299      	uxth	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	225e      	movs	r2, #94	; 0x5e
 8007904:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	225e      	movs	r2, #94	; 0x5e
 800790a:	5a9b      	ldrh	r3, [r3, r2]
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d000      	beq.n	8007914 <UART_RxISR_8BIT+0x6c>
 8007912:	e07c      	b.n	8007a0e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007914:	f3ef 8310 	mrs	r3, PRIMASK
 8007918:	61bb      	str	r3, [r7, #24]
  return(result);
 800791a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800791c:	63bb      	str	r3, [r7, #56]	; 0x38
 800791e:	2301      	movs	r3, #1
 8007920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f383 8810 	msr	PRIMASK, r3
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4938      	ldr	r1, [pc, #224]	; (8007a18 <UART_RxISR_8BIT+0x170>)
 8007936:	400a      	ands	r2, r1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	f383 8810 	msr	PRIMASK, r3
}
 8007944:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007946:	f3ef 8310 	mrs	r3, PRIMASK
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
 8007950:	2301      	movs	r3, #1
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2101      	movs	r1, #1
 8007968:	438a      	bics	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	f383 8810 	msr	PRIMASK, r3
}
 8007976:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	228c      	movs	r2, #140	; 0x8c
 800797c:	2120      	movs	r1, #32
 800797e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d12f      	bne.n	80079f4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799a:	f3ef 8310 	mrs	r3, PRIMASK
 800799e:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a2:	633b      	str	r3, [r7, #48]	; 0x30
 80079a4:	2301      	movs	r3, #1
 80079a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f383 8810 	msr	PRIMASK, r3
}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2110      	movs	r1, #16
 80079bc:	438a      	bics	r2, r1
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f383 8810 	msr	PRIMASK, r3
}
 80079ca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	2210      	movs	r2, #16
 80079d4:	4013      	ands	r3, r2
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d103      	bne.n	80079e2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2210      	movs	r2, #16
 80079e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	225c      	movs	r2, #92	; 0x5c
 80079e6:	5a9a      	ldrh	r2, [r3, r2]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	0011      	movs	r1, r2
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7ff f8f9 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079f2:	e00c      	b.n	8007a0e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	0018      	movs	r0, r3
 80079f8:	f7fb fc3c 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 80079fc:	e007      	b.n	8007a0e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2108      	movs	r1, #8
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	619a      	str	r2, [r3, #24]
}
 8007a0e:	46c0      	nop			; (mov r8, r8)
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b010      	add	sp, #64	; 0x40
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	fffffedf 	.word	0xfffffedf

08007a1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b090      	sub	sp, #64	; 0x40
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a24:	203e      	movs	r0, #62	; 0x3e
 8007a26:	183b      	adds	r3, r7, r0
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	2160      	movs	r1, #96	; 0x60
 8007a2c:	5a52      	ldrh	r2, [r2, r1]
 8007a2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	228c      	movs	r2, #140	; 0x8c
 8007a34:	589b      	ldr	r3, [r3, r2]
 8007a36:	2b22      	cmp	r3, #34	; 0x22
 8007a38:	d000      	beq.n	8007a3c <UART_RxISR_16BIT+0x20>
 8007a3a:	e09a      	b.n	8007b72 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a42:	213c      	movs	r1, #60	; 0x3c
 8007a44:	187b      	adds	r3, r7, r1
 8007a46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a4e:	187b      	adds	r3, r7, r1
 8007a50:	183a      	adds	r2, r7, r0
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	8812      	ldrh	r2, [r2, #0]
 8007a56:	4013      	ands	r3, r2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	225e      	movs	r2, #94	; 0x5e
 8007a6c:	5a9b      	ldrh	r3, [r3, r2]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b299      	uxth	r1, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	225e      	movs	r2, #94	; 0x5e
 8007a78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	225e      	movs	r2, #94	; 0x5e
 8007a7e:	5a9b      	ldrh	r3, [r3, r2]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d000      	beq.n	8007a88 <UART_RxISR_16BIT+0x6c>
 8007a86:	e07c      	b.n	8007b82 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a88:	f3ef 8310 	mrs	r3, PRIMASK
 8007a8c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
 8007a92:	2301      	movs	r3, #1
 8007a94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f383 8810 	msr	PRIMASK, r3
}
 8007a9c:	46c0      	nop			; (mov r8, r8)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4938      	ldr	r1, [pc, #224]	; (8007b8c <UART_RxISR_16BIT+0x170>)
 8007aaa:	400a      	ands	r2, r1
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f383 8810 	msr	PRIMASK, r3
}
 8007ab8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aba:	f3ef 8310 	mrs	r3, PRIMASK
 8007abe:	623b      	str	r3, [r7, #32]
  return(result);
 8007ac0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	f383 8810 	msr	PRIMASK, r3
}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2101      	movs	r1, #1
 8007adc:	438a      	bics	r2, r1
 8007ade:	609a      	str	r2, [r3, #8]
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f383 8810 	msr	PRIMASK, r3
}
 8007aea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	228c      	movs	r2, #140	; 0x8c
 8007af0:	2120      	movs	r1, #32
 8007af2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d12f      	bne.n	8007b68 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b12:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b14:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b18:	2301      	movs	r3, #1
 8007b1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f383 8810 	msr	PRIMASK, r3
}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2110      	movs	r1, #16
 8007b30:	438a      	bics	r2, r1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f383 8810 	msr	PRIMASK, r3
}
 8007b3e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	2210      	movs	r2, #16
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b10      	cmp	r3, #16
 8007b4c:	d103      	bne.n	8007b56 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2210      	movs	r2, #16
 8007b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	225c      	movs	r2, #92	; 0x5c
 8007b5a:	5a9a      	ldrh	r2, [r3, r2]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	0011      	movs	r1, r2
 8007b60:	0018      	movs	r0, r3
 8007b62:	f7ff f83f 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b66:	e00c      	b.n	8007b82 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	f7fb fb82 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 8007b70:	e007      	b.n	8007b82 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	699a      	ldr	r2, [r3, #24]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2108      	movs	r1, #8
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	619a      	str	r2, [r3, #24]
}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b010      	add	sp, #64	; 0x40
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	fffffedf 	.word	0xfffffedf

08007b90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b09c      	sub	sp, #112	; 0x70
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b98:	236a      	movs	r3, #106	; 0x6a
 8007b9a:	18fb      	adds	r3, r7, r3
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	2160      	movs	r1, #96	; 0x60
 8007ba0:	5a52      	ldrh	r2, [r2, r1]
 8007ba2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	228c      	movs	r2, #140	; 0x8c
 8007bc0:	589b      	ldr	r3, [r3, r2]
 8007bc2:	2b22      	cmp	r3, #34	; 0x22
 8007bc4:	d000      	beq.n	8007bc8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007bc6:	e144      	b.n	8007e52 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bc8:	235e      	movs	r3, #94	; 0x5e
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	2168      	movs	r1, #104	; 0x68
 8007bd0:	5a52      	ldrh	r2, [r2, r1]
 8007bd2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bd4:	e0eb      	b.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bdc:	215c      	movs	r1, #92	; 0x5c
 8007bde:	187b      	adds	r3, r7, r1
 8007be0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007be2:	187b      	adds	r3, r7, r1
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	236a      	movs	r3, #106	; 0x6a
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b2d9      	uxtb	r1, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	400a      	ands	r2, r1
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	225e      	movs	r2, #94	; 0x5e
 8007c08:	5a9b      	ldrh	r3, [r3, r2]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b299      	uxth	r1, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	225e      	movs	r2, #94	; 0x5e
 8007c14:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c20:	2207      	movs	r2, #7
 8007c22:	4013      	ands	r3, r2
 8007c24:	d049      	beq.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c28:	2201      	movs	r2, #1
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	d010      	beq.n	8007c50 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	4013      	ands	r3, r2
 8007c36:	d00b      	beq.n	8007c50 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2290      	movs	r2, #144	; 0x90
 8007c44:	589b      	ldr	r3, [r3, r2]
 8007c46:	2201      	movs	r2, #1
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2190      	movs	r1, #144	; 0x90
 8007c4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c52:	2202      	movs	r2, #2
 8007c54:	4013      	ands	r3, r2
 8007c56:	d00f      	beq.n	8007c78 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	d00b      	beq.n	8007c78 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2202      	movs	r2, #2
 8007c66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2290      	movs	r2, #144	; 0x90
 8007c6c:	589b      	ldr	r3, [r3, r2]
 8007c6e:	2204      	movs	r2, #4
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2190      	movs	r1, #144	; 0x90
 8007c76:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	d00f      	beq.n	8007ca0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007c80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c82:	2201      	movs	r2, #1
 8007c84:	4013      	ands	r3, r2
 8007c86:	d00b      	beq.n	8007ca0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2290      	movs	r2, #144	; 0x90
 8007c94:	589b      	ldr	r3, [r3, r2]
 8007c96:	2202      	movs	r2, #2
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2190      	movs	r1, #144	; 0x90
 8007c9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2290      	movs	r2, #144	; 0x90
 8007ca4:	589b      	ldr	r3, [r3, r2]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7fe ff91 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2290      	movs	r2, #144	; 0x90
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	225e      	movs	r2, #94	; 0x5e
 8007cbe:	5a9b      	ldrh	r3, [r3, r2]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d173      	bne.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	f383 8810 	msr	PRIMASK, r3
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4961      	ldr	r1, [pc, #388]	; (8007e6c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007ce8:	400a      	ands	r2, r1
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	f383 8810 	msr	PRIMASK, r3
}
 8007cf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d00:	657b      	str	r3, [r7, #84]	; 0x54
 8007d02:	2301      	movs	r3, #1
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d08:	f383 8810 	msr	PRIMASK, r3
}
 8007d0c:	46c0      	nop			; (mov r8, r8)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4955      	ldr	r1, [pc, #340]	; (8007e70 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007d1a:	400a      	ands	r2, r1
 8007d1c:	609a      	str	r2, [r3, #8]
 8007d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d24:	f383 8810 	msr	PRIMASK, r3
}
 8007d28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	228c      	movs	r2, #140	; 0x8c
 8007d2e:	2120      	movs	r1, #32
 8007d30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d12f      	bne.n	8007da6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d50:	623b      	str	r3, [r7, #32]
  return(result);
 8007d52:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d54:	653b      	str	r3, [r7, #80]	; 0x50
 8007d56:	2301      	movs	r3, #1
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	f383 8810 	msr	PRIMASK, r3
}
 8007d60:	46c0      	nop			; (mov r8, r8)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2110      	movs	r1, #16
 8007d6e:	438a      	bics	r2, r1
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	f383 8810 	msr	PRIMASK, r3
}
 8007d7c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	2210      	movs	r2, #16
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d103      	bne.n	8007d94 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2210      	movs	r2, #16
 8007d92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	225c      	movs	r2, #92	; 0x5c
 8007d98:	5a9a      	ldrh	r2, [r3, r2]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	0011      	movs	r1, r2
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f7fe ff20 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
 8007da4:	e003      	b.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	0018      	movs	r0, r3
 8007daa:	f7fb fa63 	bl	8003274 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dae:	235e      	movs	r3, #94	; 0x5e
 8007db0:	18fb      	adds	r3, r7, r3
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dba:	2220      	movs	r2, #32
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d000      	beq.n	8007dc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007dc0:	e709      	b.n	8007bd6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dc2:	204e      	movs	r0, #78	; 0x4e
 8007dc4:	183b      	adds	r3, r7, r0
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	215e      	movs	r1, #94	; 0x5e
 8007dca:	5a52      	ldrh	r2, [r2, r1]
 8007dcc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dce:	0001      	movs	r1, r0
 8007dd0:	187b      	adds	r3, r7, r1
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d044      	beq.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2268      	movs	r2, #104	; 0x68
 8007ddc:	5a9b      	ldrh	r3, [r3, r2]
 8007dde:	187a      	adds	r2, r7, r1
 8007de0:	8812      	ldrh	r2, [r2, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d23d      	bcs.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de6:	f3ef 8310 	mrs	r3, PRIMASK
 8007dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007df0:	2301      	movs	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f383 8810 	msr	PRIMASK, r3
}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	491b      	ldr	r1, [pc, #108]	; (8007e74 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007e08:	400a      	ands	r2, r1
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f383 8810 	msr	PRIMASK, r3
}
 8007e16:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a17      	ldr	r2, [pc, #92]	; (8007e78 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007e1c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e22:	617b      	str	r3, [r7, #20]
  return(result);
 8007e24:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e26:	647b      	str	r3, [r7, #68]	; 0x44
 8007e28:	2301      	movs	r3, #1
 8007e2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f383 8810 	msr	PRIMASK, r3
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2120      	movs	r1, #32
 8007e40:	430a      	orrs	r2, r1
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f383 8810 	msr	PRIMASK, r3
}
 8007e4e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e50:	e007      	b.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2108      	movs	r1, #8
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	619a      	str	r2, [r3, #24]
}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	46bd      	mov	sp, r7
 8007e66:	b01c      	add	sp, #112	; 0x70
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	fffffeff 	.word	0xfffffeff
 8007e70:	effffffe 	.word	0xeffffffe
 8007e74:	efffffff 	.word	0xefffffff
 8007e78:	080078a9 	.word	0x080078a9

08007e7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b09e      	sub	sp, #120	; 0x78
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e84:	2372      	movs	r3, #114	; 0x72
 8007e86:	18fb      	adds	r3, r7, r3
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	2160      	movs	r1, #96	; 0x60
 8007e8c:	5a52      	ldrh	r2, [r2, r1]
 8007e8e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	228c      	movs	r2, #140	; 0x8c
 8007eac:	589b      	ldr	r3, [r3, r2]
 8007eae:	2b22      	cmp	r3, #34	; 0x22
 8007eb0:	d000      	beq.n	8007eb4 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007eb2:	e144      	b.n	800813e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007eb4:	2366      	movs	r3, #102	; 0x66
 8007eb6:	18fb      	adds	r3, r7, r3
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	2168      	movs	r1, #104	; 0x68
 8007ebc:	5a52      	ldrh	r2, [r2, r1]
 8007ebe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ec0:	e0eb      	b.n	800809a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec8:	2164      	movs	r1, #100	; 0x64
 8007eca:	187b      	adds	r3, r7, r1
 8007ecc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	2272      	movs	r2, #114	; 0x72
 8007ed8:	18ba      	adds	r2, r7, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	8812      	ldrh	r2, [r2, #0]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ee4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eea:	1c9a      	adds	r2, r3, #2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	225e      	movs	r2, #94	; 0x5e
 8007ef4:	5a9b      	ldrh	r3, [r3, r2]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b299      	uxth	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	225e      	movs	r2, #94	; 0x5e
 8007f00:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f0c:	2207      	movs	r2, #7
 8007f0e:	4013      	ands	r3, r2
 8007f10:	d049      	beq.n	8007fa6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f14:	2201      	movs	r2, #1
 8007f16:	4013      	ands	r3, r2
 8007f18:	d010      	beq.n	8007f3c <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007f1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f1c:	2380      	movs	r3, #128	; 0x80
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	4013      	ands	r3, r2
 8007f22:	d00b      	beq.n	8007f3c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2290      	movs	r2, #144	; 0x90
 8007f30:	589b      	ldr	r3, [r3, r2]
 8007f32:	2201      	movs	r2, #1
 8007f34:	431a      	orrs	r2, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2190      	movs	r1, #144	; 0x90
 8007f3a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f3e:	2202      	movs	r2, #2
 8007f40:	4013      	ands	r3, r2
 8007f42:	d00f      	beq.n	8007f64 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f46:	2201      	movs	r2, #1
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d00b      	beq.n	8007f64 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2202      	movs	r2, #2
 8007f52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2290      	movs	r2, #144	; 0x90
 8007f58:	589b      	ldr	r3, [r3, r2]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2190      	movs	r1, #144	; 0x90
 8007f62:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f66:	2204      	movs	r2, #4
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d00f      	beq.n	8007f8c <UART_RxISR_16BIT_FIFOEN+0x110>
 8007f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f6e:	2201      	movs	r2, #1
 8007f70:	4013      	ands	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2290      	movs	r2, #144	; 0x90
 8007f80:	589b      	ldr	r3, [r3, r2]
 8007f82:	2202      	movs	r2, #2
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2190      	movs	r1, #144	; 0x90
 8007f8a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2290      	movs	r2, #144	; 0x90
 8007f90:	589b      	ldr	r3, [r3, r2]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7fe fe1b 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2290      	movs	r2, #144	; 0x90
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	225e      	movs	r2, #94	; 0x5e
 8007faa:	5a9b      	ldrh	r3, [r3, r2]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d173      	bne.n	800809a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc2:	f383 8810 	msr	PRIMASK, r3
}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4961      	ldr	r1, [pc, #388]	; (8008158 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007fd4:	400a      	ands	r2, r1
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fde:	f383 8810 	msr	PRIMASK, r3
}
 8007fe2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fee:	2301      	movs	r3, #1
 8007ff0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff4:	f383 8810 	msr	PRIMASK, r3
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4955      	ldr	r1, [pc, #340]	; (800815c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008006:	400a      	ands	r2, r1
 8008008:	609a      	str	r2, [r3, #8]
 800800a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800800c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008010:	f383 8810 	msr	PRIMASK, r3
}
 8008014:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	228c      	movs	r2, #140	; 0x8c
 800801a:	2120      	movs	r1, #32
 800801c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d12f      	bne.n	8008092 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008038:	f3ef 8310 	mrs	r3, PRIMASK
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008040:	657b      	str	r3, [r7, #84]	; 0x54
 8008042:	2301      	movs	r3, #1
 8008044:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	f383 8810 	msr	PRIMASK, r3
}
 800804c:	46c0      	nop			; (mov r8, r8)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2110      	movs	r1, #16
 800805a:	438a      	bics	r2, r1
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008060:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	f383 8810 	msr	PRIMASK, r3
}
 8008068:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	2210      	movs	r2, #16
 8008072:	4013      	ands	r3, r2
 8008074:	2b10      	cmp	r3, #16
 8008076:	d103      	bne.n	8008080 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2210      	movs	r2, #16
 800807e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	225c      	movs	r2, #92	; 0x5c
 8008084:	5a9a      	ldrh	r2, [r3, r2]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	0011      	movs	r1, r2
 800808a:	0018      	movs	r0, r3
 800808c:	f7fe fdaa 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
 8008090:	e003      	b.n	800809a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0018      	movs	r0, r3
 8008096:	f7fb f8ed 	bl	8003274 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800809a:	2366      	movs	r3, #102	; 0x66
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <UART_RxISR_16BIT_FIFOEN+0x232>
 80080a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a6:	2220      	movs	r2, #32
 80080a8:	4013      	ands	r3, r2
 80080aa:	d000      	beq.n	80080ae <UART_RxISR_16BIT_FIFOEN+0x232>
 80080ac:	e709      	b.n	8007ec2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080ae:	2052      	movs	r0, #82	; 0x52
 80080b0:	183b      	adds	r3, r7, r0
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	215e      	movs	r1, #94	; 0x5e
 80080b6:	5a52      	ldrh	r2, [r2, r1]
 80080b8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ba:	0001      	movs	r1, r0
 80080bc:	187b      	adds	r3, r7, r1
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d044      	beq.n	800814e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2268      	movs	r2, #104	; 0x68
 80080c8:	5a9b      	ldrh	r3, [r3, r2]
 80080ca:	187a      	adds	r2, r7, r1
 80080cc:	8812      	ldrh	r2, [r2, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d23d      	bcs.n	800814e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080d2:	f3ef 8310 	mrs	r3, PRIMASK
 80080d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80080d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080dc:	2301      	movs	r3, #1
 80080de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f383 8810 	msr	PRIMASK, r3
}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689a      	ldr	r2, [r3, #8]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	491b      	ldr	r1, [pc, #108]	; (8008160 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80080f4:	400a      	ands	r2, r1
 80080f6:	609a      	str	r2, [r3, #8]
 80080f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f383 8810 	msr	PRIMASK, r3
}
 8008102:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a17      	ldr	r2, [pc, #92]	; (8008164 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8008108:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800810a:	f3ef 8310 	mrs	r3, PRIMASK
 800810e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008110:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008112:	64bb      	str	r3, [r7, #72]	; 0x48
 8008114:	2301      	movs	r3, #1
 8008116:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f383 8810 	msr	PRIMASK, r3
}
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2120      	movs	r1, #32
 800812c:	430a      	orrs	r2, r1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008132:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	f383 8810 	msr	PRIMASK, r3
}
 800813a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800813c:	e007      	b.n	800814e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	699a      	ldr	r2, [r3, #24]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2108      	movs	r1, #8
 800814a:	430a      	orrs	r2, r1
 800814c:	619a      	str	r2, [r3, #24]
}
 800814e:	46c0      	nop			; (mov r8, r8)
 8008150:	46bd      	mov	sp, r7
 8008152:	b01e      	add	sp, #120	; 0x78
 8008154:	bd80      	pop	{r7, pc}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	fffffeff 	.word	0xfffffeff
 800815c:	effffffe 	.word	0xeffffffe
 8008160:	efffffff 	.word	0xefffffff
 8008164:	08007a1d 	.word	0x08007a1d

08008168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008170:	46c0      	nop			; (mov r8, r8)
 8008172:	46bd      	mov	sp, r7
 8008174:	b002      	add	sp, #8
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008180:	46c0      	nop			; (mov r8, r8)
 8008182:	46bd      	mov	sp, r7
 8008184:	b002      	add	sp, #8
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46bd      	mov	sp, r7
 8008194:	b002      	add	sp, #8
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2284      	movs	r2, #132	; 0x84
 80081a4:	5c9b      	ldrb	r3, [r3, r2]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <HAL_UARTEx_DisableFifoMode+0x16>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e027      	b.n	80081fe <HAL_UARTEx_DisableFifoMode+0x66>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2284      	movs	r2, #132	; 0x84
 80081b2:	2101      	movs	r1, #1
 80081b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2288      	movs	r2, #136	; 0x88
 80081ba:	2124      	movs	r1, #36	; 0x24
 80081bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2101      	movs	r1, #1
 80081d2:	438a      	bics	r2, r1
 80081d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4a0b      	ldr	r2, [pc, #44]	; (8008208 <HAL_UARTEx_DisableFifoMode+0x70>)
 80081da:	4013      	ands	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2288      	movs	r2, #136	; 0x88
 80081f0:	2120      	movs	r1, #32
 80081f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2284      	movs	r2, #132	; 0x84
 80081f8:	2100      	movs	r1, #0
 80081fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	0018      	movs	r0, r3
 8008200:	46bd      	mov	sp, r7
 8008202:	b004      	add	sp, #16
 8008204:	bd80      	pop	{r7, pc}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	dfffffff 	.word	0xdfffffff

0800820c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2284      	movs	r2, #132	; 0x84
 800821a:	5c9b      	ldrb	r3, [r3, r2]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008220:	2302      	movs	r3, #2
 8008222:	e02e      	b.n	8008282 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2284      	movs	r2, #132	; 0x84
 8008228:	2101      	movs	r1, #1
 800822a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2288      	movs	r2, #136	; 0x88
 8008230:	2124      	movs	r1, #36	; 0x24
 8008232:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2101      	movs	r1, #1
 8008248:	438a      	bics	r2, r1
 800824a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	08d9      	lsrs	r1, r3, #3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	0018      	movs	r0, r3
 8008264:	f000 f854 	bl	8008310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2288      	movs	r2, #136	; 0x88
 8008274:	2120      	movs	r1, #32
 8008276:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2284      	movs	r2, #132	; 0x84
 800827c:	2100      	movs	r1, #0
 800827e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	0018      	movs	r0, r3
 8008284:	46bd      	mov	sp, r7
 8008286:	b004      	add	sp, #16
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2284      	movs	r2, #132	; 0x84
 800829a:	5c9b      	ldrb	r3, [r3, r2]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e02f      	b.n	8008304 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2284      	movs	r2, #132	; 0x84
 80082a8:	2101      	movs	r1, #1
 80082aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2288      	movs	r2, #136	; 0x88
 80082b0:	2124      	movs	r1, #36	; 0x24
 80082b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2101      	movs	r1, #1
 80082c8:	438a      	bics	r2, r1
 80082ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	4a0e      	ldr	r2, [pc, #56]	; (800830c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	0019      	movs	r1, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 f813 	bl	8008310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2288      	movs	r2, #136	; 0x88
 80082f6:	2120      	movs	r1, #32
 80082f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2284      	movs	r2, #132	; 0x84
 80082fe:	2100      	movs	r1, #0
 8008300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	0018      	movs	r0, r3
 8008306:	46bd      	mov	sp, r7
 8008308:	b004      	add	sp, #16
 800830a:	bd80      	pop	{r7, pc}
 800830c:	f1ffffff 	.word	0xf1ffffff

08008310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800831c:	2b00      	cmp	r3, #0
 800831e:	d108      	bne.n	8008332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	226a      	movs	r2, #106	; 0x6a
 8008324:	2101      	movs	r1, #1
 8008326:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2268      	movs	r2, #104	; 0x68
 800832c:	2101      	movs	r1, #1
 800832e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008330:	e043      	b.n	80083ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008332:	260f      	movs	r6, #15
 8008334:	19bb      	adds	r3, r7, r6
 8008336:	2208      	movs	r2, #8
 8008338:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800833a:	200e      	movs	r0, #14
 800833c:	183b      	adds	r3, r7, r0
 800833e:	2208      	movs	r2, #8
 8008340:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	0e5b      	lsrs	r3, r3, #25
 800834a:	b2da      	uxtb	r2, r3
 800834c:	240d      	movs	r4, #13
 800834e:	193b      	adds	r3, r7, r4
 8008350:	2107      	movs	r1, #7
 8008352:	400a      	ands	r2, r1
 8008354:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	0f5b      	lsrs	r3, r3, #29
 800835e:	b2da      	uxtb	r2, r3
 8008360:	250c      	movs	r5, #12
 8008362:	197b      	adds	r3, r7, r5
 8008364:	2107      	movs	r1, #7
 8008366:	400a      	ands	r2, r1
 8008368:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800836a:	183b      	adds	r3, r7, r0
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	197a      	adds	r2, r7, r5
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	4914      	ldr	r1, [pc, #80]	; (80083c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008374:	5c8a      	ldrb	r2, [r1, r2]
 8008376:	435a      	muls	r2, r3
 8008378:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800837a:	197b      	adds	r3, r7, r5
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	4a12      	ldr	r2, [pc, #72]	; (80083c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008380:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008382:	0019      	movs	r1, r3
 8008384:	f7f7 ff66 	bl	8000254 <__divsi3>
 8008388:	0003      	movs	r3, r0
 800838a:	b299      	uxth	r1, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	226a      	movs	r2, #106	; 0x6a
 8008390:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008392:	19bb      	adds	r3, r7, r6
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	193a      	adds	r2, r7, r4
 8008398:	7812      	ldrb	r2, [r2, #0]
 800839a:	490a      	ldr	r1, [pc, #40]	; (80083c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800839c:	5c8a      	ldrb	r2, [r1, r2]
 800839e:	435a      	muls	r2, r3
 80083a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80083a2:	193b      	adds	r3, r7, r4
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	4a08      	ldr	r2, [pc, #32]	; (80083c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80083a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083aa:	0019      	movs	r1, r3
 80083ac:	f7f7 ff52 	bl	8000254 <__divsi3>
 80083b0:	0003      	movs	r3, r0
 80083b2:	b299      	uxth	r1, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2268      	movs	r2, #104	; 0x68
 80083b8:	5299      	strh	r1, [r3, r2]
}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	46bd      	mov	sp, r7
 80083be:	b005      	add	sp, #20
 80083c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	0800e254 	.word	0x0800e254
 80083c8:	0800e25c 	.word	0x0800e25c

080083cc <__NVIC_SetPriority>:
{
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	0002      	movs	r2, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	1dfb      	adds	r3, r7, #7
 80083d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80083da:	1dfb      	adds	r3, r7, #7
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b7f      	cmp	r3, #127	; 0x7f
 80083e0:	d828      	bhi.n	8008434 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083e2:	4a2f      	ldr	r2, [pc, #188]	; (80084a0 <__NVIC_SetPriority+0xd4>)
 80083e4:	1dfb      	adds	r3, r7, #7
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b25b      	sxtb	r3, r3
 80083ea:	089b      	lsrs	r3, r3, #2
 80083ec:	33c0      	adds	r3, #192	; 0xc0
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	589b      	ldr	r3, [r3, r2]
 80083f2:	1dfa      	adds	r2, r7, #7
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	0011      	movs	r1, r2
 80083f8:	2203      	movs	r2, #3
 80083fa:	400a      	ands	r2, r1
 80083fc:	00d2      	lsls	r2, r2, #3
 80083fe:	21ff      	movs	r1, #255	; 0xff
 8008400:	4091      	lsls	r1, r2
 8008402:	000a      	movs	r2, r1
 8008404:	43d2      	mvns	r2, r2
 8008406:	401a      	ands	r2, r3
 8008408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	019b      	lsls	r3, r3, #6
 800840e:	22ff      	movs	r2, #255	; 0xff
 8008410:	401a      	ands	r2, r3
 8008412:	1dfb      	adds	r3, r7, #7
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	0018      	movs	r0, r3
 8008418:	2303      	movs	r3, #3
 800841a:	4003      	ands	r3, r0
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008420:	481f      	ldr	r0, [pc, #124]	; (80084a0 <__NVIC_SetPriority+0xd4>)
 8008422:	1dfb      	adds	r3, r7, #7
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b25b      	sxtb	r3, r3
 8008428:	089b      	lsrs	r3, r3, #2
 800842a:	430a      	orrs	r2, r1
 800842c:	33c0      	adds	r3, #192	; 0xc0
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	501a      	str	r2, [r3, r0]
}
 8008432:	e031      	b.n	8008498 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008434:	4a1b      	ldr	r2, [pc, #108]	; (80084a4 <__NVIC_SetPriority+0xd8>)
 8008436:	1dfb      	adds	r3, r7, #7
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	0019      	movs	r1, r3
 800843c:	230f      	movs	r3, #15
 800843e:	400b      	ands	r3, r1
 8008440:	3b08      	subs	r3, #8
 8008442:	089b      	lsrs	r3, r3, #2
 8008444:	3306      	adds	r3, #6
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	18d3      	adds	r3, r2, r3
 800844a:	3304      	adds	r3, #4
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	1dfa      	adds	r2, r7, #7
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	0011      	movs	r1, r2
 8008454:	2203      	movs	r2, #3
 8008456:	400a      	ands	r2, r1
 8008458:	00d2      	lsls	r2, r2, #3
 800845a:	21ff      	movs	r1, #255	; 0xff
 800845c:	4091      	lsls	r1, r2
 800845e:	000a      	movs	r2, r1
 8008460:	43d2      	mvns	r2, r2
 8008462:	401a      	ands	r2, r3
 8008464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	019b      	lsls	r3, r3, #6
 800846a:	22ff      	movs	r2, #255	; 0xff
 800846c:	401a      	ands	r2, r3
 800846e:	1dfb      	adds	r3, r7, #7
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	0018      	movs	r0, r3
 8008474:	2303      	movs	r3, #3
 8008476:	4003      	ands	r3, r0
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800847c:	4809      	ldr	r0, [pc, #36]	; (80084a4 <__NVIC_SetPriority+0xd8>)
 800847e:	1dfb      	adds	r3, r7, #7
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	001c      	movs	r4, r3
 8008484:	230f      	movs	r3, #15
 8008486:	4023      	ands	r3, r4
 8008488:	3b08      	subs	r3, #8
 800848a:	089b      	lsrs	r3, r3, #2
 800848c:	430a      	orrs	r2, r1
 800848e:	3306      	adds	r3, #6
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	18c3      	adds	r3, r0, r3
 8008494:	3304      	adds	r3, #4
 8008496:	601a      	str	r2, [r3, #0]
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b003      	add	sp, #12
 800849e:	bd90      	pop	{r4, r7, pc}
 80084a0:	e000e100 	.word	0xe000e100
 80084a4:	e000ed00 	.word	0xe000ed00

080084a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <SysTick_Handler+0x1c>)
 80084ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80084b0:	f001 fc88 	bl	8009dc4 <xTaskGetSchedulerState>
 80084b4:	0003      	movs	r3, r0
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d001      	beq.n	80084be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084ba:	f002 fb05 	bl	800aac8 <xPortSysTickHandler>
  }
}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	e000e010 	.word	0xe000e010

080084c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084cc:	2305      	movs	r3, #5
 80084ce:	425b      	negs	r3, r3
 80084d0:	2100      	movs	r1, #0
 80084d2:	0018      	movs	r0, r3
 80084d4:	f7ff ff7a 	bl	80083cc <__NVIC_SetPriority>
#endif
}
 80084d8:	46c0      	nop			; (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084e6:	f3ef 8305 	mrs	r3, IPSR
 80084ea:	603b      	str	r3, [r7, #0]
  return(result);
 80084ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084f2:	2306      	movs	r3, #6
 80084f4:	425b      	negs	r3, r3
 80084f6:	607b      	str	r3, [r7, #4]
 80084f8:	e00c      	b.n	8008514 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <osKernelInitialize+0x40>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <osKernelInitialize+0x40>)
 8008504:	2201      	movs	r2, #1
 8008506:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008508:	2300      	movs	r3, #0
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	e002      	b.n	8008514 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800850e:	2301      	movs	r3, #1
 8008510:	425b      	negs	r3, r3
 8008512:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008514:	687b      	ldr	r3, [r7, #4]
}
 8008516:	0018      	movs	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	b002      	add	sp, #8
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	20000778 	.word	0x20000778

08008524 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800852a:	f3ef 8305 	mrs	r3, IPSR
 800852e:	603b      	str	r3, [r7, #0]
  return(result);
 8008530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008536:	2306      	movs	r3, #6
 8008538:	425b      	negs	r3, r3
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	e010      	b.n	8008560 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800853e:	4b0b      	ldr	r3, [pc, #44]	; (800856c <osKernelStart+0x48>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d109      	bne.n	800855a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008546:	f7ff ffbf 	bl	80084c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800854a:	4b08      	ldr	r3, [pc, #32]	; (800856c <osKernelStart+0x48>)
 800854c:	2202      	movs	r2, #2
 800854e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008550:	f001 f84e 	bl	80095f0 <vTaskStartScheduler>
      stat = osOK;
 8008554:	2300      	movs	r3, #0
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	e002      	b.n	8008560 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800855a:	2301      	movs	r3, #1
 800855c:	425b      	negs	r3, r3
 800855e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008560:	687b      	ldr	r3, [r7, #4]
}
 8008562:	0018      	movs	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	b002      	add	sp, #8
 8008568:	bd80      	pop	{r7, pc}
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	20000778 	.word	0x20000778

08008570 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008570:	b5b0      	push	{r4, r5, r7, lr}
 8008572:	b08e      	sub	sp, #56	; 0x38
 8008574:	af04      	add	r7, sp, #16
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008580:	f3ef 8305 	mrs	r3, IPSR
 8008584:	617b      	str	r3, [r7, #20]
  return(result);
 8008586:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008588:	2b00      	cmp	r3, #0
 800858a:	d000      	beq.n	800858e <osThreadNew+0x1e>
 800858c:	e081      	b.n	8008692 <osThreadNew+0x122>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d100      	bne.n	8008596 <osThreadNew+0x26>
 8008594:	e07d      	b.n	8008692 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8008596:	2380      	movs	r3, #128	; 0x80
 8008598:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800859a:	2318      	movs	r3, #24
 800859c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80085a2:	2301      	movs	r3, #1
 80085a4:	425b      	negs	r3, r3
 80085a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d044      	beq.n	8008638 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <osThreadNew+0x4c>
        name = attr->name;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <osThreadNew+0x70>
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b38      	cmp	r3, #56	; 0x38
 80085d4:	d804      	bhi.n	80085e0 <osThreadNew+0x70>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	4013      	ands	r3, r2
 80085de:	d001      	beq.n	80085e4 <osThreadNew+0x74>
        return (NULL);
 80085e0:	2300      	movs	r3, #0
 80085e2:	e057      	b.n	8008694 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	089b      	lsrs	r3, r3, #2
 80085f2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00e      	beq.n	800861a <osThreadNew+0xaa>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	2bbb      	cmp	r3, #187	; 0xbb
 8008602:	d90a      	bls.n	800861a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008608:	2b00      	cmp	r3, #0
 800860a:	d006      	beq.n	800861a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <osThreadNew+0xaa>
        mem = 1;
 8008614:	2301      	movs	r3, #1
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	e010      	b.n	800863c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10c      	bne.n	800863c <osThreadNew+0xcc>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d108      	bne.n	800863c <osThreadNew+0xcc>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d104      	bne.n	800863c <osThreadNew+0xcc>
          mem = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	e001      	b.n	800863c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d112      	bne.n	8008668 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800864a:	68bd      	ldr	r5, [r7, #8]
 800864c:	6a3c      	ldr	r4, [r7, #32]
 800864e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	9201      	str	r2, [sp, #4]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	002b      	movs	r3, r5
 800865c:	0022      	movs	r2, r4
 800865e:	f000 fe08 	bl	8009272 <xTaskCreateStatic>
 8008662:	0003      	movs	r3, r0
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	e014      	b.n	8008692 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d111      	bne.n	8008692 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	b29a      	uxth	r2, r3
 8008672:	68bc      	ldr	r4, [r7, #8]
 8008674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	2310      	movs	r3, #16
 800867a:	18fb      	adds	r3, r7, r3
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	0023      	movs	r3, r4
 8008684:	f000 fe39 	bl	80092fa <xTaskCreate>
 8008688:	0003      	movs	r3, r0
 800868a:	2b01      	cmp	r3, #1
 800868c:	d001      	beq.n	8008692 <osThreadNew+0x122>
            hTask = NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008692:	693b      	ldr	r3, [r7, #16]
}
 8008694:	0018      	movs	r0, r3
 8008696:	46bd      	mov	sp, r7
 8008698:	b00a      	add	sp, #40	; 0x28
 800869a:	bdb0      	pop	{r4, r5, r7, pc}

0800869c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b088      	sub	sp, #32
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <osThreadFlagsSet+0x1a>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da03      	bge.n	80086be <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80086b6:	2304      	movs	r3, #4
 80086b8:	425b      	negs	r3, r3
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e031      	b.n	8008722 <osThreadFlagsSet+0x86>
  }
  else {
    rflags = (uint32_t)osError;
 80086be:	2301      	movs	r3, #1
 80086c0:	425b      	negs	r3, r3
 80086c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086c4:	f3ef 8305 	mrs	r3, IPSR
 80086c8:	613b      	str	r3, [r7, #16]
  return(result);
 80086ca:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01b      	beq.n	8008708 <osThreadFlagsSet+0x6c>
      yield = pdFALSE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6978      	ldr	r0, [r7, #20]
 80086d8:	2308      	movs	r3, #8
 80086da:	18fb      	adds	r3, r7, r3
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2300      	movs	r3, #0
 80086e0:	2201      	movs	r2, #1
 80086e2:	f001 fcdb 	bl	800a09c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80086e6:	230c      	movs	r3, #12
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	6978      	ldr	r0, [r7, #20]
 80086ec:	2200      	movs	r2, #0
 80086ee:	9200      	str	r2, [sp, #0]
 80086f0:	2200      	movs	r2, #0
 80086f2:	2100      	movs	r1, #0
 80086f4:	f001 fcd2 	bl	800a09c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d011      	beq.n	8008722 <osThreadFlagsSet+0x86>
 80086fe:	4b0b      	ldr	r3, [pc, #44]	; (800872c <osThreadFlagsSet+0x90>)
 8008700:	2280      	movs	r2, #128	; 0x80
 8008702:	0552      	lsls	r2, r2, #21
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e00c      	b.n	8008722 <osThreadFlagsSet+0x86>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	2300      	movs	r3, #0
 800870e:	2201      	movs	r2, #1
 8008710:	f001 fc28 	bl	8009f64 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008714:	230c      	movs	r3, #12
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	f001 fc21 	bl	8009f64 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008722:	68fb      	ldr	r3, [r7, #12]
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b006      	add	sp, #24
 800872a:	bd80      	pop	{r7, pc}
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b08c      	sub	sp, #48	; 0x30
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800873c:	f3ef 8305 	mrs	r3, IPSR
 8008740:	617b      	str	r3, [r7, #20]
  return(result);
 8008742:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008744:	2b00      	cmp	r3, #0
 8008746:	d003      	beq.n	8008750 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008748:	2306      	movs	r3, #6
 800874a:	425b      	negs	r3, r3
 800874c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800874e:	e06a      	b.n	8008826 <osThreadFlagsWait+0xf6>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	da03      	bge.n	800875e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8008756:	2304      	movs	r3, #4
 8008758:	425b      	negs	r3, r3
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875c:	e063      	b.n	8008826 <osThreadFlagsWait+0xf6>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2202      	movs	r2, #2
 8008762:	4013      	ands	r3, r2
 8008764:	d002      	beq.n	800876c <osThreadFlagsWait+0x3c>
      clear = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	62bb      	str	r3, [r7, #40]	; 0x28
 800876a:	e001      	b.n	8008770 <osThreadFlagsWait+0x40>
    } else {
      clear = flags;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008778:	f001 f830 	bl	80097dc <xTaskGetTickCount>
 800877c:	0003      	movs	r3, r0
 800877e:	623b      	str	r3, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	2210      	movs	r2, #16
 8008784:	18ba      	adds	r2, r7, r2
 8008786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008788:	2000      	movs	r0, #0
 800878a:	f001 fb93 	bl	8009eb4 <xTaskNotifyWait>
 800878e:	0003      	movs	r3, r0
 8008790:	61fb      	str	r3, [r7, #28]

      if (rval == pdPASS) {
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d135      	bne.n	8008804 <osThreadFlagsWait+0xd4>
        rflags &= flags;
 8008798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4013      	ands	r3, r2
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a4:	4313      	orrs	r3, r2
 80087a6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2201      	movs	r2, #1
 80087ac:	4013      	ands	r3, r2
 80087ae:	d00c      	beq.n	80087ca <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b4:	4013      	ands	r3, r2
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d031      	beq.n	8008820 <osThreadFlagsWait+0xf0>
            break;
          } else {
            if (timeout == 0U) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10e      	bne.n	80087e0 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80087c2:	2303      	movs	r3, #3
 80087c4:	425b      	negs	r3, r3
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80087c8:	e02d      	b.n	8008826 <osThreadFlagsWait+0xf6>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ce:	4013      	ands	r3, r2
 80087d0:	d128      	bne.n	8008824 <osThreadFlagsWait+0xf4>
            break;
          } else {
            if (timeout == 0U) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 80087d8:	2303      	movs	r3, #3
 80087da:	425b      	negs	r3, r3
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80087de:	e022      	b.n	8008826 <osThreadFlagsWait+0xf6>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80087e0:	f000 fffc 	bl	80097dc <xTaskGetTickCount>
 80087e4:	0002      	movs	r2, r0
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d902      	bls.n	80087fa <osThreadFlagsWait+0xca>
          tout  = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	627b      	str	r3, [r7, #36]	; 0x24
 80087f8:	e00e      	b.n	8008818 <osThreadFlagsWait+0xe8>
        } else {
          tout -= td;
 80087fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
 8008802:	e009      	b.n	8008818 <osThreadFlagsWait+0xe8>
        }
      }
      else {
        if (timeout == 0) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <osThreadFlagsWait+0xe2>
          rflags = (uint32_t)osErrorResource;
 800880a:	2303      	movs	r3, #3
 800880c:	425b      	negs	r3, r3
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008810:	e002      	b.n	8008818 <osThreadFlagsWait+0xe8>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008812:	2302      	movs	r3, #2
 8008814:	425b      	negs	r3, r3
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1b0      	bne.n	8008780 <osThreadFlagsWait+0x50>
 800881e:	e002      	b.n	8008826 <osThreadFlagsWait+0xf6>
            break;
 8008820:	46c0      	nop			; (mov r8, r8)
 8008822:	e000      	b.n	8008826 <osThreadFlagsWait+0xf6>
            break;
 8008824:	46c0      	nop			; (mov r8, r8)
  }

  /* Return flags before clearing */
  return (rflags);
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b00c      	add	sp, #48	; 0x30
 800882e:	bd80      	pop	{r7, pc}

08008830 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008838:	f3ef 8305 	mrs	r3, IPSR
 800883c:	60bb      	str	r3, [r7, #8]
  return(result);
 800883e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <osDelay+0x1c>
    stat = osErrorISR;
 8008844:	2306      	movs	r3, #6
 8008846:	425b      	negs	r3, r3
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	e008      	b.n	800885e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800884c:	2300      	movs	r3, #0
 800884e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <osDelay+0x2e>
      vTaskDelay(ticks);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	0018      	movs	r0, r3
 800885a:	f000 fea3 	bl	80095a4 <vTaskDelay>
    }
  }

  return (stat);
 800885e:	68fb      	ldr	r3, [r7, #12]
}
 8008860:	0018      	movs	r0, r3
 8008862:	46bd      	mov	sp, r7
 8008864:	b004      	add	sp, #16
 8008866:	bd80      	pop	{r7, pc}

08008868 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4a06      	ldr	r2, [pc, #24]	; (8008890 <vApplicationGetIdleTaskMemory+0x28>)
 8008878:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	4a05      	ldr	r2, [pc, #20]	; (8008894 <vApplicationGetIdleTaskMemory+0x2c>)
 800887e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2280      	movs	r2, #128	; 0x80
 8008884:	601a      	str	r2, [r3, #0]
}
 8008886:	46c0      	nop			; (mov r8, r8)
 8008888:	46bd      	mov	sp, r7
 800888a:	b004      	add	sp, #16
 800888c:	bd80      	pop	{r7, pc}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	2000077c 	.word	0x2000077c
 8008894:	20000838 	.word	0x20000838

08008898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a06      	ldr	r2, [pc, #24]	; (80088c0 <vApplicationGetTimerTaskMemory+0x28>)
 80088a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	4a05      	ldr	r2, [pc, #20]	; (80088c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80088ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2280      	movs	r2, #128	; 0x80
 80088b4:	0052      	lsls	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
}
 80088b8:	46c0      	nop			; (mov r8, r8)
 80088ba:	46bd      	mov	sp, r7
 80088bc:	b004      	add	sp, #16
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000a38 	.word	0x20000a38
 80088c4:	20000af4 	.word	0x20000af4

080088c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3308      	adds	r3, #8
 80088d4:	001a      	movs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	4252      	negs	r2, r2
 80088e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3308      	adds	r3, #8
 80088e6:	001a      	movs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3308      	adds	r3, #8
 80088f0:	001a      	movs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088fc:	46c0      	nop			; (mov r8, r8)
 80088fe:	46bd      	mov	sp, r7
 8008900:	b002      	add	sp, #8
 8008902:	bd80      	pop	{r7, pc}

08008904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	46bd      	mov	sp, r7
 8008916:	b002      	add	sp, #8
 8008918:	bd80      	pop	{r7, pc}

0800891a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	46bd      	mov	sp, r7
 800895a:	b004      	add	sp, #16
 800895c:	bd80      	pop	{r7, pc}

0800895e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	3301      	adds	r3, #1
 8008972:	d103      	bne.n	800897c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	60fb      	str	r3, [r7, #12]
 800897a:	e00c      	b.n	8008996 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	3308      	adds	r3, #8
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e002      	b.n	800898a <vListInsert+0x2c>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d2f6      	bcs.n	8008984 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	601a      	str	r2, [r3, #0]
}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	46bd      	mov	sp, r7
 80089c6:	b004      	add	sp, #16
 80089c8:	bd80      	pop	{r7, pc}

080089ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6892      	ldr	r2, [r2, #8]
 80089e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6852      	ldr	r2, [r2, #4]
 80089ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d103      	bne.n	80089fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	689a      	ldr	r2, [r3, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	1e5a      	subs	r2, r3, #1
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b004      	add	sp, #16
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <xQueueGenericReset+0x18>
 8008a2e:	b672      	cpsid	i
 8008a30:	e7fe      	b.n	8008a30 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008a32:	f001 ffed 	bl	800aa10 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	434b      	muls	r3, r1
 8008a44:	18d2      	adds	r2, r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a60:	1e59      	subs	r1, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	434b      	muls	r3, r1
 8008a68:	18d2      	adds	r2, r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2244      	movs	r2, #68	; 0x44
 8008a72:	21ff      	movs	r1, #255	; 0xff
 8008a74:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2245      	movs	r2, #69	; 0x45
 8008a7a:	21ff      	movs	r1, #255	; 0xff
 8008a7c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10d      	bne.n	8008aa0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d013      	beq.n	8008ab4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3310      	adds	r3, #16
 8008a90:	0018      	movs	r0, r3
 8008a92:	f000 ffff 	bl	8009a94 <xTaskRemoveFromEventList>
 8008a96:	1e03      	subs	r3, r0, #0
 8008a98:	d00c      	beq.n	8008ab4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a9a:	f001 ffa9 	bl	800a9f0 <vPortYield>
 8008a9e:	e009      	b.n	8008ab4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3310      	adds	r3, #16
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff ff0f 	bl	80088c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3324      	adds	r3, #36	; 0x24
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7ff ff0a 	bl	80088c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ab4:	f001 ffbe 	bl	800aa34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ab8:	2301      	movs	r3, #1
}
 8008aba:	0018      	movs	r0, r3
 8008abc:	46bd      	mov	sp, r7
 8008abe:	b004      	add	sp, #16
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ac2:	b590      	push	{r4, r7, lr}
 8008ac4:	b089      	sub	sp, #36	; 0x24
 8008ac6:	af02      	add	r7, sp, #8
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	60b9      	str	r1, [r7, #8]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <xQueueGenericCreateStatic+0x18>
 8008ad6:	b672      	cpsid	i
 8008ad8:	e7fe      	b.n	8008ad8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <xQueueGenericCreateStatic+0x22>
 8008ae0:	b672      	cpsid	i
 8008ae2:	e7fe      	b.n	8008ae2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <xQueueGenericCreateStatic+0x2e>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <xQueueGenericCreateStatic+0x32>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <xQueueGenericCreateStatic+0x34>
 8008af4:	2300      	movs	r3, #0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <xQueueGenericCreateStatic+0x3c>
 8008afa:	b672      	cpsid	i
 8008afc:	e7fe      	b.n	8008afc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <xQueueGenericCreateStatic+0x48>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueGenericCreateStatic+0x4c>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueGenericCreateStatic+0x4e>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <xQueueGenericCreateStatic+0x56>
 8008b14:	b672      	cpsid	i
 8008b16:	e7fe      	b.n	8008b16 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b18:	2350      	movs	r3, #80	; 0x50
 8008b1a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b50      	cmp	r3, #80	; 0x50
 8008b20:	d001      	beq.n	8008b26 <xQueueGenericCreateStatic+0x64>
 8008b22:	b672      	cpsid	i
 8008b24:	e7fe      	b.n	8008b24 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b26:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2246      	movs	r2, #70	; 0x46
 8008b36:	2101      	movs	r1, #1
 8008b38:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b3a:	2328      	movs	r3, #40	; 0x28
 8008b3c:	18fb      	adds	r3, r7, r3
 8008b3e:	781c      	ldrb	r4, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	0023      	movs	r3, r4
 8008b4c:	f000 f805 	bl	8008b5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b50:	697b      	ldr	r3, [r7, #20]
	}
 8008b52:	0018      	movs	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b007      	add	sp, #28
 8008b58:	bd90      	pop	{r4, r7, pc}

08008b5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	607a      	str	r2, [r7, #4]
 8008b66:	001a      	movs	r2, r3
 8008b68:	1cfb      	adds	r3, r7, #3
 8008b6a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d103      	bne.n	8008b7a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	69ba      	ldr	r2, [r7, #24]
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e002      	b.n	8008b80 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2101      	movs	r1, #1
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7ff ff42 	bl	8008a1a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	1cfa      	adds	r2, r7, #3
 8008b9a:	214c      	movs	r1, #76	; 0x4c
 8008b9c:	7812      	ldrb	r2, [r2, #0]
 8008b9e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ba0:	46c0      	nop			; (mov r8, r8)
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b004      	add	sp, #16
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <xQueueGenericSend+0x20>
 8008bc4:	b672      	cpsid	i
 8008bc6:	e7fe      	b.n	8008bc6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d103      	bne.n	8008bd6 <xQueueGenericSend+0x2e>
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <xQueueGenericSend+0x32>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <xQueueGenericSend+0x34>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <xQueueGenericSend+0x3c>
 8008be0:	b672      	cpsid	i
 8008be2:	e7fe      	b.n	8008be2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d103      	bne.n	8008bf2 <xQueueGenericSend+0x4a>
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d101      	bne.n	8008bf6 <xQueueGenericSend+0x4e>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <xQueueGenericSend+0x50>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <xQueueGenericSend+0x58>
 8008bfc:	b672      	cpsid	i
 8008bfe:	e7fe      	b.n	8008bfe <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c00:	f001 f8e0 	bl	8009dc4 <xTaskGetSchedulerState>
 8008c04:	1e03      	subs	r3, r0, #0
 8008c06:	d102      	bne.n	8008c0e <xQueueGenericSend+0x66>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <xQueueGenericSend+0x6a>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueGenericSend+0x6c>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <xQueueGenericSend+0x74>
 8008c18:	b672      	cpsid	i
 8008c1a:	e7fe      	b.n	8008c1a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c1c:	f001 fef8 	bl	800aa10 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d302      	bcc.n	8008c32 <xQueueGenericSend+0x8a>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d11e      	bne.n	8008c70 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	68b9      	ldr	r1, [r7, #8]
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f000 f9a2 	bl	8008f82 <prvCopyDataToQueue>
 8008c3e:	0003      	movs	r3, r0
 8008c40:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f000 ff20 	bl	8009a94 <xTaskRemoveFromEventList>
 8008c54:	1e03      	subs	r3, r0, #0
 8008c56:	d007      	beq.n	8008c68 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c58:	f001 feca 	bl	800a9f0 <vPortYield>
 8008c5c:	e004      	b.n	8008c68 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c64:	f001 fec4 	bl	800a9f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c68:	f001 fee4 	bl	800aa34 <vPortExitCritical>
				return pdPASS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e05b      	b.n	8008d28 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c76:	f001 fedd 	bl	800aa34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e054      	b.n	8008d28 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c84:	2314      	movs	r3, #20
 8008c86:	18fb      	adds	r3, r7, r3
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f000 ff5f 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c92:	f001 fecf 	bl	800aa34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c96:	f000 fd09 	bl	80096ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c9a:	f001 feb9 	bl	800aa10 <vPortEnterCritical>
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	2244      	movs	r2, #68	; 0x44
 8008ca2:	5c9b      	ldrb	r3, [r3, r2]
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	d103      	bne.n	8008cb2 <xQueueGenericSend+0x10a>
 8008caa:	6a3b      	ldr	r3, [r7, #32]
 8008cac:	2244      	movs	r2, #68	; 0x44
 8008cae:	2100      	movs	r1, #0
 8008cb0:	5499      	strb	r1, [r3, r2]
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	2245      	movs	r2, #69	; 0x45
 8008cb6:	5c9b      	ldrb	r3, [r3, r2]
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	3301      	adds	r3, #1
 8008cbc:	d103      	bne.n	8008cc6 <xQueueGenericSend+0x11e>
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	2245      	movs	r2, #69	; 0x45
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	5499      	strb	r1, [r3, r2]
 8008cc6:	f001 feb5 	bl	800aa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cca:	1d3a      	adds	r2, r7, #4
 8008ccc:	2314      	movs	r3, #20
 8008cce:	18fb      	adds	r3, r7, r3
 8008cd0:	0011      	movs	r1, r2
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f000 ff4e 	bl	8009b74 <xTaskCheckForTimeOut>
 8008cd8:	1e03      	subs	r3, r0, #0
 8008cda:	d11e      	bne.n	8008d1a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f000 fa54 	bl	800918c <prvIsQueueFull>
 8008ce4:	1e03      	subs	r3, r0, #0
 8008ce6:	d011      	beq.n	8008d0c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	3310      	adds	r3, #16
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	0011      	movs	r1, r2
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	f000 fe8b 	bl	8009a0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f000 f9d3 	bl	80090a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cfe:	f000 fce1 	bl	80096c4 <xTaskResumeAll>
 8008d02:	1e03      	subs	r3, r0, #0
 8008d04:	d18a      	bne.n	8008c1c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008d06:	f001 fe73 	bl	800a9f0 <vPortYield>
 8008d0a:	e787      	b.n	8008c1c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f000 f9c8 	bl	80090a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d14:	f000 fcd6 	bl	80096c4 <xTaskResumeAll>
 8008d18:	e780      	b.n	8008c1c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	0018      	movs	r0, r3
 8008d1e:	f000 f9c1 	bl	80090a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d22:	f000 fccf 	bl	80096c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d28:	0018      	movs	r0, r3
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	b00a      	add	sp, #40	; 0x28
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b08b      	sub	sp, #44	; 0x2c
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008d42:	6a3b      	ldr	r3, [r7, #32]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d101      	bne.n	8008d4c <xQueueGenericSendFromISR+0x1c>
 8008d48:	b672      	cpsid	i
 8008d4a:	e7fe      	b.n	8008d4a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <xQueueGenericSendFromISR+0x2a>
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <xQueueGenericSendFromISR+0x2e>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueGenericSendFromISR+0x30>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <xQueueGenericSendFromISR+0x38>
 8008d64:	b672      	cpsid	i
 8008d66:	e7fe      	b.n	8008d66 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d103      	bne.n	8008d76 <xQueueGenericSendFromISR+0x46>
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <xQueueGenericSendFromISR+0x4a>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e000      	b.n	8008d7c <xQueueGenericSendFromISR+0x4c>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <xQueueGenericSendFromISR+0x54>
 8008d80:	b672      	cpsid	i
 8008d82:	e7fe      	b.n	8008d82 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d84:	f001 fe6e 	bl	800aa64 <ulSetInterruptMaskFromISR>
 8008d88:	0003      	movs	r3, r0
 8008d8a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d302      	bcc.n	8008d9e <xQueueGenericSendFromISR+0x6e>
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d131      	bne.n	8008e02 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d9e:	241b      	movs	r4, #27
 8008da0:	193b      	adds	r3, r7, r4
 8008da2:	6a3a      	ldr	r2, [r7, #32]
 8008da4:	2145      	movs	r1, #69	; 0x45
 8008da6:	5c52      	ldrb	r2, [r2, r1]
 8008da8:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	0018      	movs	r0, r3
 8008db8:	f000 f8e3 	bl	8008f82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dbc:	193b      	adds	r3, r7, r4
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	b25b      	sxtb	r3, r3
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	d111      	bne.n	8008dea <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d016      	beq.n	8008dfc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f000 fe5e 	bl	8009a94 <xTaskRemoveFromEventList>
 8008dd8:	1e03      	subs	r3, r0, #0
 8008dda:	d00f      	beq.n	8008dfc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00c      	beq.n	8008dfc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e008      	b.n	8008dfc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dea:	231b      	movs	r3, #27
 8008dec:	18fb      	adds	r3, r7, r3
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	3301      	adds	r3, #1
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	b259      	sxtb	r1, r3
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	2245      	movs	r2, #69	; 0x45
 8008dfa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8008e00:	e001      	b.n	8008e06 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f001 fe31 	bl	800aa70 <vClearInterruptMaskFromISR>

	return xReturn;
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e10:	0018      	movs	r0, r3
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b00b      	add	sp, #44	; 0x2c
 8008e16:	bd90      	pop	{r4, r7, pc}

08008e18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	; 0x28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <xQueueReceive+0x1e>
 8008e32:	b672      	cpsid	i
 8008e34:	e7fe      	b.n	8008e34 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d103      	bne.n	8008e44 <xQueueReceive+0x2c>
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <xQueueReceive+0x30>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <xQueueReceive+0x32>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <xQueueReceive+0x3a>
 8008e4e:	b672      	cpsid	i
 8008e50:	e7fe      	b.n	8008e50 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e52:	f000 ffb7 	bl	8009dc4 <xTaskGetSchedulerState>
 8008e56:	1e03      	subs	r3, r0, #0
 8008e58:	d102      	bne.n	8008e60 <xQueueReceive+0x48>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <xQueueReceive+0x4c>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <xQueueReceive+0x4e>
 8008e64:	2300      	movs	r3, #0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <xQueueReceive+0x56>
 8008e6a:	b672      	cpsid	i
 8008e6c:	e7fe      	b.n	8008e6c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e6e:	f001 fdcf 	bl	800aa10 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d01a      	beq.n	8008eb4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	0011      	movs	r1, r2
 8008e84:	0018      	movs	r0, r3
 8008e86:	f000 f8e7 	bl	8009058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d008      	beq.n	8008eac <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	3310      	adds	r3, #16
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f000 fdf8 	bl	8009a94 <xTaskRemoveFromEventList>
 8008ea4:	1e03      	subs	r3, r0, #0
 8008ea6:	d001      	beq.n	8008eac <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ea8:	f001 fda2 	bl	800a9f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eac:	f001 fdc2 	bl	800aa34 <vPortExitCritical>
				return pdPASS;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e062      	b.n	8008f7a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008eba:	f001 fdbb 	bl	800aa34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e05b      	b.n	8008f7a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ec8:	2314      	movs	r3, #20
 8008eca:	18fb      	adds	r3, r7, r3
 8008ecc:	0018      	movs	r0, r3
 8008ece:	f000 fe3d 	bl	8009b4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ed6:	f001 fdad 	bl	800aa34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eda:	f000 fbe7 	bl	80096ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ede:	f001 fd97 	bl	800aa10 <vPortEnterCritical>
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	2244      	movs	r2, #68	; 0x44
 8008ee6:	5c9b      	ldrb	r3, [r3, r2]
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	3301      	adds	r3, #1
 8008eec:	d103      	bne.n	8008ef6 <xQueueReceive+0xde>
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	2244      	movs	r2, #68	; 0x44
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	5499      	strb	r1, [r3, r2]
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	2245      	movs	r2, #69	; 0x45
 8008efa:	5c9b      	ldrb	r3, [r3, r2]
 8008efc:	b25b      	sxtb	r3, r3
 8008efe:	3301      	adds	r3, #1
 8008f00:	d103      	bne.n	8008f0a <xQueueReceive+0xf2>
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	2245      	movs	r2, #69	; 0x45
 8008f06:	2100      	movs	r1, #0
 8008f08:	5499      	strb	r1, [r3, r2]
 8008f0a:	f001 fd93 	bl	800aa34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f0e:	1d3a      	adds	r2, r7, #4
 8008f10:	2314      	movs	r3, #20
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	0011      	movs	r1, r2
 8008f16:	0018      	movs	r0, r3
 8008f18:	f000 fe2c 	bl	8009b74 <xTaskCheckForTimeOut>
 8008f1c:	1e03      	subs	r3, r0, #0
 8008f1e:	d11e      	bne.n	8008f5e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	0018      	movs	r0, r3
 8008f24:	f000 f91c 	bl	8009160 <prvIsQueueEmpty>
 8008f28:	1e03      	subs	r3, r0, #0
 8008f2a:	d011      	beq.n	8008f50 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	3324      	adds	r3, #36	; 0x24
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	0011      	movs	r1, r2
 8008f34:	0018      	movs	r0, r3
 8008f36:	f000 fd69 	bl	8009a0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 f8b1 	bl	80090a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f42:	f000 fbbf 	bl	80096c4 <xTaskResumeAll>
 8008f46:	1e03      	subs	r3, r0, #0
 8008f48:	d191      	bne.n	8008e6e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008f4a:	f001 fd51 	bl	800a9f0 <vPortYield>
 8008f4e:	e78e      	b.n	8008e6e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	0018      	movs	r0, r3
 8008f54:	f000 f8a6 	bl	80090a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f58:	f000 fbb4 	bl	80096c4 <xTaskResumeAll>
 8008f5c:	e787      	b.n	8008e6e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	0018      	movs	r0, r3
 8008f62:	f000 f89f 	bl	80090a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f66:	f000 fbad 	bl	80096c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f000 f8f7 	bl	8009160 <prvIsQueueEmpty>
 8008f72:	1e03      	subs	r3, r0, #0
 8008f74:	d100      	bne.n	8008f78 <xQueueReceive+0x160>
 8008f76:	e77a      	b.n	8008e6e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b00a      	add	sp, #40	; 0x28
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10e      	bne.n	8008fbe <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d14e      	bne.n	8009046 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	0018      	movs	r0, r3
 8008fae:	f000 ff25 	bl	8009dfc <xTaskPriorityDisinherit>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	609a      	str	r2, [r3, #8]
 8008fbc:	e043      	b.n	8009046 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d119      	bne.n	8008ff8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6858      	ldr	r0, [r3, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	0019      	movs	r1, r3
 8008fd0:	f002 f897 	bl	800b102 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fdc:	18d2      	adds	r2, r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d32b      	bcc.n	8009046 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]
 8008ff6:	e026      	b.n	8009046 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	68d8      	ldr	r0, [r3, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	0019      	movs	r1, r3
 8009004:	f002 f87d 	bl	800b102 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009010:	425b      	negs	r3, r3
 8009012:	18d2      	adds	r2, r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d207      	bcs.n	8009034 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902c:	425b      	negs	r3, r3
 800902e:	18d2      	adds	r2, r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d105      	bne.n	8009046 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	3b01      	subs	r3, #1
 8009044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800904e:	697b      	ldr	r3, [r7, #20]
}
 8009050:	0018      	movs	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	b006      	add	sp, #24
 8009056:	bd80      	pop	{r7, pc}

08009058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	2b00      	cmp	r3, #0
 8009068:	d018      	beq.n	800909c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	18d2      	adds	r2, r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	429a      	cmp	r2, r3
 8009082:	d303      	bcc.n	800908c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68d9      	ldr	r1, [r3, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	0018      	movs	r0, r3
 8009098:	f002 f833 	bl	800b102 <memcpy>
	}
}
 800909c:	46c0      	nop			; (mov r8, r8)
 800909e:	46bd      	mov	sp, r7
 80090a0:	b002      	add	sp, #8
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090ac:	f001 fcb0 	bl	800aa10 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090b0:	230f      	movs	r3, #15
 80090b2:	18fb      	adds	r3, r7, r3
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	2145      	movs	r1, #69	; 0x45
 80090b8:	5c52      	ldrb	r2, [r2, r1]
 80090ba:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090bc:	e013      	b.n	80090e6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d016      	beq.n	80090f4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3324      	adds	r3, #36	; 0x24
 80090ca:	0018      	movs	r0, r3
 80090cc:	f000 fce2 	bl	8009a94 <xTaskRemoveFromEventList>
 80090d0:	1e03      	subs	r3, r0, #0
 80090d2:	d001      	beq.n	80090d8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090d4:	f000 fd9e 	bl	8009c14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090d8:	210f      	movs	r1, #15
 80090da:	187b      	adds	r3, r7, r1
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	3b01      	subs	r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	187b      	adds	r3, r7, r1
 80090e4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090e6:	230f      	movs	r3, #15
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	b25b      	sxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dce5      	bgt.n	80090be <prvUnlockQueue+0x1a>
 80090f2:	e000      	b.n	80090f6 <prvUnlockQueue+0x52>
					break;
 80090f4:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2245      	movs	r2, #69	; 0x45
 80090fa:	21ff      	movs	r1, #255	; 0xff
 80090fc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80090fe:	f001 fc99 	bl	800aa34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009102:	f001 fc85 	bl	800aa10 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009106:	230e      	movs	r3, #14
 8009108:	18fb      	adds	r3, r7, r3
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	2144      	movs	r1, #68	; 0x44
 800910e:	5c52      	ldrb	r2, [r2, r1]
 8009110:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009112:	e013      	b.n	800913c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d016      	beq.n	800914a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3310      	adds	r3, #16
 8009120:	0018      	movs	r0, r3
 8009122:	f000 fcb7 	bl	8009a94 <xTaskRemoveFromEventList>
 8009126:	1e03      	subs	r3, r0, #0
 8009128:	d001      	beq.n	800912e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800912a:	f000 fd73 	bl	8009c14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800912e:	210e      	movs	r1, #14
 8009130:	187b      	adds	r3, r7, r1
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	3b01      	subs	r3, #1
 8009136:	b2da      	uxtb	r2, r3
 8009138:	187b      	adds	r3, r7, r1
 800913a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800913c:	230e      	movs	r3, #14
 800913e:	18fb      	adds	r3, r7, r3
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	b25b      	sxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	dce5      	bgt.n	8009114 <prvUnlockQueue+0x70>
 8009148:	e000      	b.n	800914c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800914a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2244      	movs	r2, #68	; 0x44
 8009150:	21ff      	movs	r1, #255	; 0xff
 8009152:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009154:	f001 fc6e 	bl	800aa34 <vPortExitCritical>
}
 8009158:	46c0      	nop			; (mov r8, r8)
 800915a:	46bd      	mov	sp, r7
 800915c:	b004      	add	sp, #16
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009168:	f001 fc52 	bl	800aa10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	2b00      	cmp	r3, #0
 8009172:	d102      	bne.n	800917a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e001      	b.n	800917e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800917e:	f001 fc59 	bl	800aa34 <vPortExitCritical>

	return xReturn;
 8009182:	68fb      	ldr	r3, [r7, #12]
}
 8009184:	0018      	movs	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	b004      	add	sp, #16
 800918a:	bd80      	pop	{r7, pc}

0800918c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009194:	f001 fc3c 	bl	800aa10 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d102      	bne.n	80091aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e001      	b.n	80091ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091ae:	f001 fc41 	bl	800aa34 <vPortExitCritical>

	return xReturn;
 80091b2:	68fb      	ldr	r3, [r7, #12]
}
 80091b4:	0018      	movs	r0, r3
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b004      	add	sp, #16
 80091ba:	bd80      	pop	{r7, pc}

080091bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	e015      	b.n	80091f8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <vQueueAddToRegistry+0x4c>)
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	00d2      	lsls	r2, r2, #3
 80091d2:	58d3      	ldr	r3, [r2, r3]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091d8:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <vQueueAddToRegistry+0x4c>)
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	00d2      	lsls	r2, r2, #3
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091e2:	4a09      	ldr	r2, [pc, #36]	; (8009208 <vQueueAddToRegistry+0x4c>)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	18d3      	adds	r3, r2, r3
 80091ea:	3304      	adds	r3, #4
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80091f0:	e006      	b.n	8009200 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	3301      	adds	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b07      	cmp	r3, #7
 80091fc:	d9e6      	bls.n	80091cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	46c0      	nop			; (mov r8, r8)
 8009202:	46bd      	mov	sp, r7
 8009204:	b004      	add	sp, #16
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20000ef4 	.word	0x20000ef4

0800920c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800921c:	f001 fbf8 	bl	800aa10 <vPortEnterCritical>
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2244      	movs	r2, #68	; 0x44
 8009224:	5c9b      	ldrb	r3, [r3, r2]
 8009226:	b25b      	sxtb	r3, r3
 8009228:	3301      	adds	r3, #1
 800922a:	d103      	bne.n	8009234 <vQueueWaitForMessageRestricted+0x28>
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2244      	movs	r2, #68	; 0x44
 8009230:	2100      	movs	r1, #0
 8009232:	5499      	strb	r1, [r3, r2]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2245      	movs	r2, #69	; 0x45
 8009238:	5c9b      	ldrb	r3, [r3, r2]
 800923a:	b25b      	sxtb	r3, r3
 800923c:	3301      	adds	r3, #1
 800923e:	d103      	bne.n	8009248 <vQueueWaitForMessageRestricted+0x3c>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2245      	movs	r2, #69	; 0x45
 8009244:	2100      	movs	r1, #0
 8009246:	5499      	strb	r1, [r3, r2]
 8009248:	f001 fbf4 	bl	800aa34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	3324      	adds	r3, #36	; 0x24
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	0018      	movs	r0, r3
 800925e:	f000 fbf3 	bl	8009a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	0018      	movs	r0, r3
 8009266:	f7ff ff1d 	bl	80090a4 <prvUnlockQueue>
	}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	46bd      	mov	sp, r7
 800926e:	b006      	add	sp, #24
 8009270:	bd80      	pop	{r7, pc}

08009272 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009272:	b590      	push	{r4, r7, lr}
 8009274:	b08d      	sub	sp, #52	; 0x34
 8009276:	af04      	add	r7, sp, #16
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <xTaskCreateStatic+0x18>
 8009286:	b672      	cpsid	i
 8009288:	e7fe      	b.n	8009288 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <xTaskCreateStatic+0x22>
 8009290:	b672      	cpsid	i
 8009292:	e7fe      	b.n	8009292 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009294:	23bc      	movs	r3, #188	; 0xbc
 8009296:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2bbc      	cmp	r3, #188	; 0xbc
 800929c:	d001      	beq.n	80092a2 <xTaskCreateStatic+0x30>
 800929e:	b672      	cpsid	i
 80092a0:	e7fe      	b.n	80092a0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092a2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d020      	beq.n	80092ec <xTaskCreateStatic+0x7a>
 80092aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01d      	beq.n	80092ec <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	22b9      	movs	r2, #185	; 0xb9
 80092be:	2102      	movs	r1, #2
 80092c0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092c2:	683c      	ldr	r4, [r7, #0]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	2300      	movs	r3, #0
 80092cc:	9303      	str	r3, [sp, #12]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	9302      	str	r3, [sp, #8]
 80092d2:	2318      	movs	r3, #24
 80092d4:	18fb      	adds	r3, r7, r3
 80092d6:	9301      	str	r3, [sp, #4]
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	0023      	movs	r3, r4
 80092de:	f000 f859 	bl	8009394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	0018      	movs	r0, r3
 80092e6:	f000 f8f5 	bl	80094d4 <prvAddNewTaskToReadyList>
 80092ea:	e001      	b.n	80092f0 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 80092ec:	2300      	movs	r3, #0
 80092ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092f0:	69bb      	ldr	r3, [r7, #24]
	}
 80092f2:	0018      	movs	r0, r3
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b009      	add	sp, #36	; 0x24
 80092f8:	bd90      	pop	{r4, r7, pc}

080092fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092fa:	b590      	push	{r4, r7, lr}
 80092fc:	b08d      	sub	sp, #52	; 0x34
 80092fe:	af04      	add	r7, sp, #16
 8009300:	60f8      	str	r0, [r7, #12]
 8009302:	60b9      	str	r1, [r7, #8]
 8009304:	603b      	str	r3, [r7, #0]
 8009306:	1dbb      	adds	r3, r7, #6
 8009308:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800930a:	1dbb      	adds	r3, r7, #6
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	0018      	movs	r0, r3
 8009312:	f001 fc15 	bl	800ab40 <pvPortMalloc>
 8009316:	0003      	movs	r3, r0
 8009318:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d010      	beq.n	8009342 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009320:	20bc      	movs	r0, #188	; 0xbc
 8009322:	f001 fc0d 	bl	800ab40 <pvPortMalloc>
 8009326:	0003      	movs	r3, r0
 8009328:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	631a      	str	r2, [r3, #48]	; 0x30
 8009336:	e006      	b.n	8009346 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	0018      	movs	r0, r3
 800933c:	f001 fcac 	bl	800ac98 <vPortFree>
 8009340:	e001      	b.n	8009346 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01a      	beq.n	8009382 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	22b9      	movs	r2, #185	; 0xb9
 8009350:	2100      	movs	r1, #0
 8009352:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009354:	1dbb      	adds	r3, r7, #6
 8009356:	881a      	ldrh	r2, [r3, #0]
 8009358:	683c      	ldr	r4, [r7, #0]
 800935a:	68b9      	ldr	r1, [r7, #8]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	2300      	movs	r3, #0
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	9302      	str	r3, [sp, #8]
 8009366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	0023      	movs	r3, r4
 8009370:	f000 f810 	bl	8009394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	0018      	movs	r0, r3
 8009378:	f000 f8ac 	bl	80094d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800937c:	2301      	movs	r3, #1
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	e002      	b.n	8009388 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009382:	2301      	movs	r3, #1
 8009384:	425b      	negs	r3, r3
 8009386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009388:	69bb      	ldr	r3, [r7, #24]
	}
 800938a:	0018      	movs	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	b009      	add	sp, #36	; 0x24
 8009390:	bd90      	pop	{r4, r7, pc}
	...

08009394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	001a      	movs	r2, r3
 80093ac:	21a5      	movs	r1, #165	; 0xa5
 80093ae:	f001 feb1 	bl	800b114 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4942      	ldr	r1, [pc, #264]	; (80094c4 <prvInitialiseNewTask+0x130>)
 80093ba:	468c      	mov	ip, r1
 80093bc:	4463      	add	r3, ip
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	18d3      	adds	r3, r2, r3
 80093c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2207      	movs	r2, #7
 80093c8:	4393      	bics	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2207      	movs	r2, #7
 80093d0:	4013      	ands	r3, r2
 80093d2:	d001      	beq.n	80093d8 <prvInitialiseNewTask+0x44>
 80093d4:	b672      	cpsid	i
 80093d6:	e7fe      	b.n	80093d6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d020      	beq.n	8009420 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	e013      	b.n	800940c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	18d3      	adds	r3, r2, r3
 80093ea:	7818      	ldrb	r0, [r3, #0]
 80093ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ee:	2134      	movs	r1, #52	; 0x34
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	18d3      	adds	r3, r2, r3
 80093f4:	185b      	adds	r3, r3, r1
 80093f6:	1c02      	adds	r2, r0, #0
 80093f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	18d3      	adds	r3, r2, r3
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d006      	beq.n	8009414 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	3301      	adds	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b0f      	cmp	r3, #15
 8009410:	d9e8      	bls.n	80093e4 <prvInitialiseNewTask+0x50>
 8009412:	e000      	b.n	8009416 <prvInitialiseNewTask+0x82>
			{
				break;
 8009414:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	2243      	movs	r2, #67	; 0x43
 800941a:	2100      	movs	r1, #0
 800941c:	5499      	strb	r1, [r3, r2]
 800941e:	e003      	b.n	8009428 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	2234      	movs	r2, #52	; 0x34
 8009424:	2100      	movs	r1, #0
 8009426:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009428:	6a3b      	ldr	r3, [r7, #32]
 800942a:	2b37      	cmp	r3, #55	; 0x37
 800942c:	d901      	bls.n	8009432 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800942e:	2337      	movs	r3, #55	; 0x37
 8009430:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	6a3a      	ldr	r2, [r7, #32]
 8009436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	6a3a      	ldr	r2, [r7, #32]
 800943c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009440:	2200      	movs	r2, #0
 8009442:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	3304      	adds	r3, #4
 8009448:	0018      	movs	r0, r3
 800944a:	f7ff fa5b 	bl	8008904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	3318      	adds	r3, #24
 8009452:	0018      	movs	r0, r3
 8009454:	f7ff fa56 	bl	8008904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800945c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	2238      	movs	r2, #56	; 0x38
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800946c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	22b4      	movs	r2, #180	; 0xb4
 8009472:	2100      	movs	r1, #0
 8009474:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	22b8      	movs	r2, #184	; 0xb8
 800947a:	2100      	movs	r1, #0
 800947c:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	3354      	adds	r3, #84	; 0x54
 8009482:	2260      	movs	r2, #96	; 0x60
 8009484:	2100      	movs	r1, #0
 8009486:	0018      	movs	r0, r3
 8009488:	f001 fe44 	bl	800b114 <memset>
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	4a0e      	ldr	r2, [pc, #56]	; (80094c8 <prvInitialiseNewTask+0x134>)
 8009490:	659a      	str	r2, [r3, #88]	; 0x58
 8009492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009494:	4a0d      	ldr	r2, [pc, #52]	; (80094cc <prvInitialiseNewTask+0x138>)
 8009496:	65da      	str	r2, [r3, #92]	; 0x5c
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	4a0d      	ldr	r2, [pc, #52]	; (80094d0 <prvInitialiseNewTask+0x13c>)
 800949c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	0018      	movs	r0, r3
 80094a6:	f001 fa19 	bl	800a8dc <pxPortInitialiseStack>
 80094aa:	0002      	movs	r2, r0
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094bc:	46c0      	nop			; (mov r8, r8)
 80094be:	46bd      	mov	sp, r7
 80094c0:	b006      	add	sp, #24
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	3fffffff 	.word	0x3fffffff
 80094c8:	0800e2d4 	.word	0x0800e2d4
 80094cc:	0800e2f4 	.word	0x0800e2f4
 80094d0:	0800e2b4 	.word	0x0800e2b4

080094d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094dc:	f001 fa98 	bl	800aa10 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094e0:	4b2a      	ldr	r3, [pc, #168]	; (800958c <prvAddNewTaskToReadyList+0xb8>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	4b29      	ldr	r3, [pc, #164]	; (800958c <prvAddNewTaskToReadyList+0xb8>)
 80094e8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80094ea:	4b29      	ldr	r3, [pc, #164]	; (8009590 <prvAddNewTaskToReadyList+0xbc>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094f2:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvAddNewTaskToReadyList+0xbc>)
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094f8:	4b24      	ldr	r3, [pc, #144]	; (800958c <prvAddNewTaskToReadyList+0xb8>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d110      	bne.n	8009522 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009500:	f000 fba2 	bl	8009c48 <prvInitialiseTaskLists>
 8009504:	e00d      	b.n	8009522 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009506:	4b23      	ldr	r3, [pc, #140]	; (8009594 <prvAddNewTaskToReadyList+0xc0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800950e:	4b20      	ldr	r3, [pc, #128]	; (8009590 <prvAddNewTaskToReadyList+0xbc>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	429a      	cmp	r2, r3
 800951a:	d802      	bhi.n	8009522 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800951c:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <prvAddNewTaskToReadyList+0xbc>)
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009522:	4b1d      	ldr	r3, [pc, #116]	; (8009598 <prvAddNewTaskToReadyList+0xc4>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <prvAddNewTaskToReadyList+0xc4>)
 800952a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800952c:	4b1a      	ldr	r3, [pc, #104]	; (8009598 <prvAddNewTaskToReadyList+0xc4>)
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009538:	4b18      	ldr	r3, [pc, #96]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d903      	bls.n	8009548 <prvAddNewTaskToReadyList+0x74>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	4b15      	ldr	r3, [pc, #84]	; (800959c <prvAddNewTaskToReadyList+0xc8>)
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800954c:	0013      	movs	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	189b      	adds	r3, r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4a12      	ldr	r2, [pc, #72]	; (80095a0 <prvAddNewTaskToReadyList+0xcc>)
 8009556:	189a      	adds	r2, r3, r2
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3304      	adds	r3, #4
 800955c:	0019      	movs	r1, r3
 800955e:	0010      	movs	r0, r2
 8009560:	f7ff f9db 	bl	800891a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009564:	f001 fa66 	bl	800aa34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <prvAddNewTaskToReadyList+0xc0>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d008      	beq.n	8009582 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <prvAddNewTaskToReadyList+0xbc>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	429a      	cmp	r2, r3
 800957c:	d201      	bcs.n	8009582 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800957e:	f001 fa37 	bl	800a9f0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009582:	46c0      	nop			; (mov r8, r8)
 8009584:	46bd      	mov	sp, r7
 8009586:	b002      	add	sp, #8
 8009588:	bd80      	pop	{r7, pc}
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	20001408 	.word	0x20001408
 8009590:	20000f34 	.word	0x20000f34
 8009594:	20001414 	.word	0x20001414
 8009598:	20001424 	.word	0x20001424
 800959c:	20001410 	.word	0x20001410
 80095a0:	20000f38 	.word	0x20000f38

080095a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d010      	beq.n	80095d8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <vTaskDelay+0x48>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <vTaskDelay+0x1e>
 80095be:	b672      	cpsid	i
 80095c0:	e7fe      	b.n	80095c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80095c2:	f000 f873 	bl	80096ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2100      	movs	r1, #0
 80095ca:	0018      	movs	r0, r3
 80095cc:	f000 fe20 	bl	800a210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095d0:	f000 f878 	bl	80096c4 <xTaskResumeAll>
 80095d4:	0003      	movs	r3, r0
 80095d6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80095de:	f001 fa07 	bl	800a9f0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	46bd      	mov	sp, r7
 80095e6:	b004      	add	sp, #16
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	20001430 	.word	0x20001430

080095f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095f0:	b590      	push	{r4, r7, lr}
 80095f2:	b089      	sub	sp, #36	; 0x24
 80095f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095fe:	003a      	movs	r2, r7
 8009600:	1d39      	adds	r1, r7, #4
 8009602:	2308      	movs	r3, #8
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	0018      	movs	r0, r3
 8009608:	f7ff f92e 	bl	8008868 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800960c:	683c      	ldr	r4, [r7, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	491e      	ldr	r1, [pc, #120]	; (800968c <vTaskStartScheduler+0x9c>)
 8009614:	481e      	ldr	r0, [pc, #120]	; (8009690 <vTaskStartScheduler+0xa0>)
 8009616:	9202      	str	r2, [sp, #8]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	2300      	movs	r3, #0
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	2300      	movs	r3, #0
 8009620:	0022      	movs	r2, r4
 8009622:	f7ff fe26 	bl	8009272 <xTaskCreateStatic>
 8009626:	0002      	movs	r2, r0
 8009628:	4b1a      	ldr	r3, [pc, #104]	; (8009694 <vTaskStartScheduler+0xa4>)
 800962a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800962c:	4b19      	ldr	r3, [pc, #100]	; (8009694 <vTaskStartScheduler+0xa4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009634:	2301      	movs	r3, #1
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e001      	b.n	800963e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d103      	bne.n	800964c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8009644:	f000 fe38 	bl	800a2b8 <xTimerCreateTimerTask>
 8009648:	0003      	movs	r3, r0
 800964a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d113      	bne.n	800967a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8009652:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009654:	4b10      	ldr	r3, [pc, #64]	; (8009698 <vTaskStartScheduler+0xa8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3354      	adds	r3, #84	; 0x54
 800965a:	001a      	movs	r2, r3
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <vTaskStartScheduler+0xac>)
 800965e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009660:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <vTaskStartScheduler+0xb0>)
 8009662:	2201      	movs	r2, #1
 8009664:	4252      	negs	r2, r2
 8009666:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009668:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <vTaskStartScheduler+0xb4>)
 800966a:	2201      	movs	r2, #1
 800966c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <vTaskStartScheduler+0xb8>)
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009674:	f001 f998 	bl	800a9a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009678:	e004      	b.n	8009684 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	d101      	bne.n	8009684 <vTaskStartScheduler+0x94>
 8009680:	b672      	cpsid	i
 8009682:	e7fe      	b.n	8009682 <vTaskStartScheduler+0x92>
}
 8009684:	46c0      	nop			; (mov r8, r8)
 8009686:	46bd      	mov	sp, r7
 8009688:	b005      	add	sp, #20
 800968a:	bd90      	pop	{r4, r7, pc}
 800968c:	0800dfdc 	.word	0x0800dfdc
 8009690:	08009c29 	.word	0x08009c29
 8009694:	2000142c 	.word	0x2000142c
 8009698:	20000f34 	.word	0x20000f34
 800969c:	20000014 	.word	0x20000014
 80096a0:	20001428 	.word	0x20001428
 80096a4:	20001414 	.word	0x20001414
 80096a8:	2000140c 	.word	0x2000140c

080096ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80096b0:	4b03      	ldr	r3, [pc, #12]	; (80096c0 <vTaskSuspendAll+0x14>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <vTaskSuspendAll+0x14>)
 80096b8:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20001430 	.word	0x20001430

080096c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096d2:	4b3a      	ldr	r3, [pc, #232]	; (80097bc <xTaskResumeAll+0xf8>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <xTaskResumeAll+0x1a>
 80096da:	b672      	cpsid	i
 80096dc:	e7fe      	b.n	80096dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096de:	f001 f997 	bl	800aa10 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096e2:	4b36      	ldr	r3, [pc, #216]	; (80097bc <xTaskResumeAll+0xf8>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	1e5a      	subs	r2, r3, #1
 80096e8:	4b34      	ldr	r3, [pc, #208]	; (80097bc <xTaskResumeAll+0xf8>)
 80096ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ec:	4b33      	ldr	r3, [pc, #204]	; (80097bc <xTaskResumeAll+0xf8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d15b      	bne.n	80097ac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096f4:	4b32      	ldr	r3, [pc, #200]	; (80097c0 <xTaskResumeAll+0xfc>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d057      	beq.n	80097ac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096fc:	e02f      	b.n	800975e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fe:	4b31      	ldr	r3, [pc, #196]	; (80097c4 <xTaskResumeAll+0x100>)
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3318      	adds	r3, #24
 800970a:	0018      	movs	r0, r3
 800970c:	f7ff f95d 	bl	80089ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3304      	adds	r3, #4
 8009714:	0018      	movs	r0, r3
 8009716:	f7ff f958 	bl	80089ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4b2a      	ldr	r3, [pc, #168]	; (80097c8 <xTaskResumeAll+0x104>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d903      	bls.n	800972e <xTaskResumeAll+0x6a>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972a:	4b27      	ldr	r3, [pc, #156]	; (80097c8 <xTaskResumeAll+0x104>)
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009732:	0013      	movs	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	189b      	adds	r3, r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4a24      	ldr	r2, [pc, #144]	; (80097cc <xTaskResumeAll+0x108>)
 800973c:	189a      	adds	r2, r3, r2
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3304      	adds	r3, #4
 8009742:	0019      	movs	r1, r3
 8009744:	0010      	movs	r0, r2
 8009746:	f7ff f8e8 	bl	800891a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974e:	4b20      	ldr	r3, [pc, #128]	; (80097d0 <xTaskResumeAll+0x10c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009754:	429a      	cmp	r2, r3
 8009756:	d302      	bcc.n	800975e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8009758:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <xTaskResumeAll+0x110>)
 800975a:	2201      	movs	r2, #1
 800975c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800975e:	4b19      	ldr	r3, [pc, #100]	; (80097c4 <xTaskResumeAll+0x100>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1cb      	bne.n	80096fe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800976c:	f000 fb0c 	bl	8009d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009770:	4b19      	ldr	r3, [pc, #100]	; (80097d8 <xTaskResumeAll+0x114>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00f      	beq.n	800979c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800977c:	f000 f83c 	bl	80097f8 <xTaskIncrementTick>
 8009780:	1e03      	subs	r3, r0, #0
 8009782:	d002      	beq.n	800978a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8009784:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <xTaskResumeAll+0x110>)
 8009786:	2201      	movs	r2, #1
 8009788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3b01      	subs	r3, #1
 800978e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f2      	bne.n	800977c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8009796:	4b10      	ldr	r3, [pc, #64]	; (80097d8 <xTaskResumeAll+0x114>)
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <xTaskResumeAll+0x110>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d003      	beq.n	80097ac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097a4:	2301      	movs	r3, #1
 80097a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097a8:	f001 f922 	bl	800a9f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ac:	f001 f942 	bl	800aa34 <vPortExitCritical>

	return xAlreadyYielded;
 80097b0:	68bb      	ldr	r3, [r7, #8]
}
 80097b2:	0018      	movs	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b004      	add	sp, #16
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	20001430 	.word	0x20001430
 80097c0:	20001408 	.word	0x20001408
 80097c4:	200013c8 	.word	0x200013c8
 80097c8:	20001410 	.word	0x20001410
 80097cc:	20000f38 	.word	0x20000f38
 80097d0:	20000f34 	.word	0x20000f34
 80097d4:	2000141c 	.word	0x2000141c
 80097d8:	20001418 	.word	0x20001418

080097dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097e2:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <xTaskGetTickCount+0x18>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097e8:	687b      	ldr	r3, [r7, #4]
}
 80097ea:	0018      	movs	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b002      	add	sp, #8
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	2000140c 	.word	0x2000140c

080097f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097fe:	2300      	movs	r3, #0
 8009800:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009802:	4b4a      	ldr	r3, [pc, #296]	; (800992c <xTaskIncrementTick+0x134>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d000      	beq.n	800980c <xTaskIncrementTick+0x14>
 800980a:	e084      	b.n	8009916 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800980c:	4b48      	ldr	r3, [pc, #288]	; (8009930 <xTaskIncrementTick+0x138>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009814:	4b46      	ldr	r3, [pc, #280]	; (8009930 <xTaskIncrementTick+0x138>)
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d117      	bne.n	8009850 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8009820:	4b44      	ldr	r3, [pc, #272]	; (8009934 <xTaskIncrementTick+0x13c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <xTaskIncrementTick+0x36>
 800982a:	b672      	cpsid	i
 800982c:	e7fe      	b.n	800982c <xTaskIncrementTick+0x34>
 800982e:	4b41      	ldr	r3, [pc, #260]	; (8009934 <xTaskIncrementTick+0x13c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	4b40      	ldr	r3, [pc, #256]	; (8009938 <xTaskIncrementTick+0x140>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	4b3e      	ldr	r3, [pc, #248]	; (8009934 <xTaskIncrementTick+0x13c>)
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	4b3e      	ldr	r3, [pc, #248]	; (8009938 <xTaskIncrementTick+0x140>)
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	4b3e      	ldr	r3, [pc, #248]	; (800993c <xTaskIncrementTick+0x144>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	4b3c      	ldr	r3, [pc, #240]	; (800993c <xTaskIncrementTick+0x144>)
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	f000 fa9c 	bl	8009d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009850:	4b3b      	ldr	r3, [pc, #236]	; (8009940 <xTaskIncrementTick+0x148>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d349      	bcc.n	80098ee <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800985a:	4b36      	ldr	r3, [pc, #216]	; (8009934 <xTaskIncrementTick+0x13c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d104      	bne.n	800986e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009864:	4b36      	ldr	r3, [pc, #216]	; (8009940 <xTaskIncrementTick+0x148>)
 8009866:	2201      	movs	r2, #1
 8009868:	4252      	negs	r2, r2
 800986a:	601a      	str	r2, [r3, #0]
					break;
 800986c:	e03f      	b.n	80098ee <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986e:	4b31      	ldr	r3, [pc, #196]	; (8009934 <xTaskIncrementTick+0x13c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d203      	bcs.n	800988e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <xTaskIncrementTick+0x148>)
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800988c:	e02f      	b.n	80098ee <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	3304      	adds	r3, #4
 8009892:	0018      	movs	r0, r3
 8009894:	f7ff f899 	bl	80089ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	3318      	adds	r3, #24
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7ff f890 	bl	80089ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ae:	4b25      	ldr	r3, [pc, #148]	; (8009944 <xTaskIncrementTick+0x14c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d903      	bls.n	80098be <xTaskIncrementTick+0xc6>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ba:	4b22      	ldr	r3, [pc, #136]	; (8009944 <xTaskIncrementTick+0x14c>)
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c2:	0013      	movs	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	189b      	adds	r3, r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	4a1f      	ldr	r2, [pc, #124]	; (8009948 <xTaskIncrementTick+0x150>)
 80098cc:	189a      	adds	r2, r3, r2
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	3304      	adds	r3, #4
 80098d2:	0019      	movs	r1, r3
 80098d4:	0010      	movs	r0, r2
 80098d6:	f7ff f820 	bl	800891a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098de:	4b1b      	ldr	r3, [pc, #108]	; (800994c <xTaskIncrementTick+0x154>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d3b8      	bcc.n	800985a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80098e8:	2301      	movs	r3, #1
 80098ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098ec:	e7b5      	b.n	800985a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098ee:	4b17      	ldr	r3, [pc, #92]	; (800994c <xTaskIncrementTick+0x154>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	4914      	ldr	r1, [pc, #80]	; (8009948 <xTaskIncrementTick+0x150>)
 80098f6:	0013      	movs	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	189b      	adds	r3, r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	585b      	ldr	r3, [r3, r1]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d901      	bls.n	8009908 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009908:	4b11      	ldr	r3, [pc, #68]	; (8009950 <xTaskIncrementTick+0x158>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d007      	beq.n	8009920 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	e004      	b.n	8009920 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009916:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <xTaskIncrementTick+0x15c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <xTaskIncrementTick+0x15c>)
 800991e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009920:	697b      	ldr	r3, [r7, #20]
}
 8009922:	0018      	movs	r0, r3
 8009924:	46bd      	mov	sp, r7
 8009926:	b006      	add	sp, #24
 8009928:	bd80      	pop	{r7, pc}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	20001430 	.word	0x20001430
 8009930:	2000140c 	.word	0x2000140c
 8009934:	200013c0 	.word	0x200013c0
 8009938:	200013c4 	.word	0x200013c4
 800993c:	20001420 	.word	0x20001420
 8009940:	20001428 	.word	0x20001428
 8009944:	20001410 	.word	0x20001410
 8009948:	20000f38 	.word	0x20000f38
 800994c:	20000f34 	.word	0x20000f34
 8009950:	2000141c 	.word	0x2000141c
 8009954:	20001418 	.word	0x20001418

08009958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800995e:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <vTaskSwitchContext+0x9c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009966:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <vTaskSwitchContext+0xa0>)
 8009968:	2201      	movs	r2, #1
 800996a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800996c:	e03d      	b.n	80099ea <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800996e:	4b22      	ldr	r3, [pc, #136]	; (80099f8 <vTaskSwitchContext+0xa0>)
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009974:	4b21      	ldr	r3, [pc, #132]	; (80099fc <vTaskSwitchContext+0xa4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	607b      	str	r3, [r7, #4]
 800997a:	e007      	b.n	800998c <vTaskSwitchContext+0x34>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <vTaskSwitchContext+0x2e>
 8009982:	b672      	cpsid	i
 8009984:	e7fe      	b.n	8009984 <vTaskSwitchContext+0x2c>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3b01      	subs	r3, #1
 800998a:	607b      	str	r3, [r7, #4]
 800998c:	491c      	ldr	r1, [pc, #112]	; (8009a00 <vTaskSwitchContext+0xa8>)
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	0013      	movs	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	189b      	adds	r3, r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	585b      	ldr	r3, [r3, r1]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ee      	beq.n	800997c <vTaskSwitchContext+0x24>
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	0013      	movs	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	189b      	adds	r3, r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4a15      	ldr	r2, [pc, #84]	; (8009a00 <vTaskSwitchContext+0xa8>)
 80099aa:	189b      	adds	r3, r3, r2
 80099ac:	603b      	str	r3, [r7, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	605a      	str	r2, [r3, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	3308      	adds	r3, #8
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d104      	bne.n	80099ce <vTaskSwitchContext+0x76>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	605a      	str	r2, [r3, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <vTaskSwitchContext+0xac>)
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	4b08      	ldr	r3, [pc, #32]	; (80099fc <vTaskSwitchContext+0xa4>)
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <vTaskSwitchContext+0xac>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3354      	adds	r3, #84	; 0x54
 80099e4:	001a      	movs	r2, r3
 80099e6:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <vTaskSwitchContext+0xb0>)
 80099e8:	601a      	str	r2, [r3, #0]
}
 80099ea:	46c0      	nop			; (mov r8, r8)
 80099ec:	46bd      	mov	sp, r7
 80099ee:	b002      	add	sp, #8
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	20001430 	.word	0x20001430
 80099f8:	2000141c 	.word	0x2000141c
 80099fc:	20001410 	.word	0x20001410
 8009a00:	20000f38 	.word	0x20000f38
 8009a04:	20000f34 	.word	0x20000f34
 8009a08:	20000014 	.word	0x20000014

08009a0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <vTaskPlaceOnEventList+0x14>
 8009a1c:	b672      	cpsid	i
 8009a1e:	e7fe      	b.n	8009a1e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a20:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <vTaskPlaceOnEventList+0x38>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3318      	adds	r3, #24
 8009a26:	001a      	movs	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	0011      	movs	r1, r2
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f7fe ff96 	bl	800895e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2101      	movs	r1, #1
 8009a36:	0018      	movs	r0, r3
 8009a38:	f000 fbea 	bl	800a210 <prvAddCurrentTaskToDelayedList>
}
 8009a3c:	46c0      	nop			; (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000f34 	.word	0x20000f34

08009a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <vTaskPlaceOnEventListRestricted+0x16>
 8009a5a:	b672      	cpsid	i
 8009a5c:	e7fe      	b.n	8009a5c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a5e:	4b0c      	ldr	r3, [pc, #48]	; (8009a90 <vTaskPlaceOnEventListRestricted+0x48>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3318      	adds	r3, #24
 8009a64:	001a      	movs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	0011      	movs	r1, r2
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7fe ff55 	bl	800891a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8009a76:	2301      	movs	r3, #1
 8009a78:	425b      	negs	r3, r3
 8009a7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	0011      	movs	r1, r2
 8009a82:	0018      	movs	r0, r3
 8009a84:	f000 fbc4 	bl	800a210 <prvAddCurrentTaskToDelayedList>
	}
 8009a88:	46c0      	nop			; (mov r8, r8)
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	b004      	add	sp, #16
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20000f34 	.word	0x20000f34

08009a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <xTaskRemoveFromEventList+0x1a>
 8009aaa:	b672      	cpsid	i
 8009aac:	e7fe      	b.n	8009aac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	3318      	adds	r3, #24
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	f7fe ff89 	bl	80089ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab8:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <xTaskRemoveFromEventList+0xa0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d11d      	bne.n	8009afc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7fe ff80 	bl	80089ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ace:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <xTaskRemoveFromEventList+0xa4>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d903      	bls.n	8009ade <xTaskRemoveFromEventList+0x4a>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ada:	4b17      	ldr	r3, [pc, #92]	; (8009b38 <xTaskRemoveFromEventList+0xa4>)
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae2:	0013      	movs	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4a14      	ldr	r2, [pc, #80]	; (8009b3c <xTaskRemoveFromEventList+0xa8>)
 8009aec:	189a      	adds	r2, r3, r2
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	3304      	adds	r3, #4
 8009af2:	0019      	movs	r1, r3
 8009af4:	0010      	movs	r0, r2
 8009af6:	f7fe ff10 	bl	800891a <vListInsertEnd>
 8009afa:	e007      	b.n	8009b0c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	3318      	adds	r3, #24
 8009b00:	001a      	movs	r2, r3
 8009b02:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <xTaskRemoveFromEventList+0xac>)
 8009b04:	0011      	movs	r1, r2
 8009b06:	0018      	movs	r0, r3
 8009b08:	f7fe ff07 	bl	800891a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <xTaskRemoveFromEventList+0xb0>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d905      	bls.n	8009b26 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b1e:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <xTaskRemoveFromEventList+0xb4>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	e001      	b.n	8009b2a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
}
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	b004      	add	sp, #16
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20001430 	.word	0x20001430
 8009b38:	20001410 	.word	0x20001410
 8009b3c:	20000f38 	.word	0x20000f38
 8009b40:	200013c8 	.word	0x200013c8
 8009b44:	20000f34 	.word	0x20000f34
 8009b48:	2000141c 	.word	0x2000141c

08009b4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b54:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <vTaskInternalSetTimeOutState+0x20>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b5c:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <vTaskInternalSetTimeOutState+0x24>)
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	605a      	str	r2, [r3, #4]
}
 8009b64:	46c0      	nop			; (mov r8, r8)
 8009b66:	46bd      	mov	sp, r7
 8009b68:	b002      	add	sp, #8
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20001420 	.word	0x20001420
 8009b70:	2000140c 	.word	0x2000140c

08009b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <xTaskCheckForTimeOut+0x14>
 8009b84:	b672      	cpsid	i
 8009b86:	e7fe      	b.n	8009b86 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <xTaskCheckForTimeOut+0x1e>
 8009b8e:	b672      	cpsid	i
 8009b90:	e7fe      	b.n	8009b90 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009b92:	f000 ff3d 	bl	800aa10 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b96:	4b1d      	ldr	r3, [pc, #116]	; (8009c0c <xTaskCheckForTimeOut+0x98>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3301      	adds	r3, #1
 8009bac:	d102      	bne.n	8009bb4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	e024      	b.n	8009bfe <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <xTaskCheckForTimeOut+0x9c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d007      	beq.n	8009bd0 <xTaskCheckForTimeOut+0x5c>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d302      	bcc.n	8009bd0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	e016      	b.n	8009bfe <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d20c      	bcs.n	8009bf4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	1ad2      	subs	r2, r2, r3
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0018      	movs	r0, r3
 8009bea:	f7ff ffaf 	bl	8009b4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e004      	b.n	8009bfe <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009bfe:	f000 ff19 	bl	800aa34 <vPortExitCritical>

	return xReturn;
 8009c02:	697b      	ldr	r3, [r7, #20]
}
 8009c04:	0018      	movs	r0, r3
 8009c06:	46bd      	mov	sp, r7
 8009c08:	b006      	add	sp, #24
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	2000140c 	.word	0x2000140c
 8009c10:	20001420 	.word	0x20001420

08009c14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c18:	4b02      	ldr	r3, [pc, #8]	; (8009c24 <vTaskMissedYield+0x10>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
}
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	2000141c 	.word	0x2000141c

08009c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c30:	f000 f84e 	bl	8009cd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c34:	4b03      	ldr	r3, [pc, #12]	; (8009c44 <prvIdleTask+0x1c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d9f9      	bls.n	8009c30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c3c:	f000 fed8 	bl	800a9f0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009c40:	e7f6      	b.n	8009c30 <prvIdleTask+0x8>
 8009c42:	46c0      	nop			; (mov r8, r8)
 8009c44:	20000f38 	.word	0x20000f38

08009c48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c4e:	2300      	movs	r3, #0
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	e00c      	b.n	8009c6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	0013      	movs	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4a14      	ldr	r2, [pc, #80]	; (8009cb0 <prvInitialiseTaskLists+0x68>)
 8009c60:	189b      	adds	r3, r3, r2
 8009c62:	0018      	movs	r0, r3
 8009c64:	f7fe fe30 	bl	80088c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b37      	cmp	r3, #55	; 0x37
 8009c72:	d9ef      	bls.n	8009c54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <prvInitialiseTaskLists+0x6c>)
 8009c76:	0018      	movs	r0, r3
 8009c78:	f7fe fe26 	bl	80088c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c7c:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <prvInitialiseTaskLists+0x70>)
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7fe fe22 	bl	80088c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c84:	4b0d      	ldr	r3, [pc, #52]	; (8009cbc <prvInitialiseTaskLists+0x74>)
 8009c86:	0018      	movs	r0, r3
 8009c88:	f7fe fe1e 	bl	80088c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	; (8009cc0 <prvInitialiseTaskLists+0x78>)
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f7fe fe1a 	bl	80088c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c94:	4b0b      	ldr	r3, [pc, #44]	; (8009cc4 <prvInitialiseTaskLists+0x7c>)
 8009c96:	0018      	movs	r0, r3
 8009c98:	f7fe fe16 	bl	80088c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <prvInitialiseTaskLists+0x80>)
 8009c9e:	4a05      	ldr	r2, [pc, #20]	; (8009cb4 <prvInitialiseTaskLists+0x6c>)
 8009ca0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ca2:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <prvInitialiseTaskLists+0x84>)
 8009ca4:	4a04      	ldr	r2, [pc, #16]	; (8009cb8 <prvInitialiseTaskLists+0x70>)
 8009ca6:	601a      	str	r2, [r3, #0]
}
 8009ca8:	46c0      	nop			; (mov r8, r8)
 8009caa:	46bd      	mov	sp, r7
 8009cac:	b002      	add	sp, #8
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20000f38 	.word	0x20000f38
 8009cb4:	20001398 	.word	0x20001398
 8009cb8:	200013ac 	.word	0x200013ac
 8009cbc:	200013c8 	.word	0x200013c8
 8009cc0:	200013dc 	.word	0x200013dc
 8009cc4:	200013f4 	.word	0x200013f4
 8009cc8:	200013c0 	.word	0x200013c0
 8009ccc:	200013c4 	.word	0x200013c4

08009cd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd6:	e01a      	b.n	8009d0e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009cd8:	f000 fe9a 	bl	800aa10 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <prvCheckTasksWaitingTermination+0x50>)
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f7fe fe6e 	bl	80089ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cee:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <prvCheckTasksWaitingTermination+0x54>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	1e5a      	subs	r2, r3, #1
 8009cf4:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <prvCheckTasksWaitingTermination+0x54>)
 8009cf6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <prvCheckTasksWaitingTermination+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	1e5a      	subs	r2, r3, #1
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <prvCheckTasksWaitingTermination+0x58>)
 8009d00:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009d02:	f000 fe97 	bl	800aa34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	0018      	movs	r0, r3
 8009d0a:	f000 f80f 	bl	8009d2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d0e:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <prvCheckTasksWaitingTermination+0x58>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e0      	bne.n	8009cd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	46c0      	nop			; (mov r8, r8)
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	b002      	add	sp, #8
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	200013dc 	.word	0x200013dc
 8009d24:	20001408 	.word	0x20001408
 8009d28:	200013f0 	.word	0x200013f0

08009d2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3354      	adds	r3, #84	; 0x54
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f001 ff07 	bl	800bb4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	22b9      	movs	r2, #185	; 0xb9
 8009d42:	5c9b      	ldrb	r3, [r3, r2]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f000 ffa3 	bl	800ac98 <vPortFree>
				vPortFree( pxTCB );
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	0018      	movs	r0, r3
 8009d56:	f000 ff9f 	bl	800ac98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d5a:	e010      	b.n	8009d7e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	22b9      	movs	r2, #185	; 0xb9
 8009d60:	5c9b      	ldrb	r3, [r3, r2]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d104      	bne.n	8009d70 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	0018      	movs	r0, r3
 8009d6a:	f000 ff95 	bl	800ac98 <vPortFree>
	}
 8009d6e:	e006      	b.n	8009d7e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	22b9      	movs	r2, #185	; 0xb9
 8009d74:	5c9b      	ldrb	r3, [r3, r2]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d001      	beq.n	8009d7e <prvDeleteTCB+0x52>
 8009d7a:	b672      	cpsid	i
 8009d7c:	e7fe      	b.n	8009d7c <prvDeleteTCB+0x50>
	}
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	46bd      	mov	sp, r7
 8009d82:	b002      	add	sp, #8
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d8e:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <prvResetNextTaskUnblockTime+0x34>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d98:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <prvResetNextTaskUnblockTime+0x38>)
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	4252      	negs	r2, r2
 8009d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009da0:	e008      	b.n	8009db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da2:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <prvResetNextTaskUnblockTime+0x34>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	4b03      	ldr	r3, [pc, #12]	; (8009dc0 <prvResetNextTaskUnblockTime+0x38>)
 8009db2:	601a      	str	r2, [r3, #0]
}
 8009db4:	46c0      	nop			; (mov r8, r8)
 8009db6:	46bd      	mov	sp, r7
 8009db8:	b002      	add	sp, #8
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200013c0 	.word	0x200013c0
 8009dc0:	20001428 	.word	0x20001428

08009dc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009dca:	4b0a      	ldr	r3, [pc, #40]	; (8009df4 <xTaskGetSchedulerState+0x30>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d102      	bne.n	8009dd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	607b      	str	r3, [r7, #4]
 8009dd6:	e008      	b.n	8009dea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <xTaskGetSchedulerState+0x34>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d102      	bne.n	8009de6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009de0:	2302      	movs	r3, #2
 8009de2:	607b      	str	r3, [r7, #4]
 8009de4:	e001      	b.n	8009dea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009de6:	2300      	movs	r3, #0
 8009de8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dea:	687b      	ldr	r3, [r7, #4]
	}
 8009dec:	0018      	movs	r0, r3
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b002      	add	sp, #8
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20001414 	.word	0x20001414
 8009df8:	20001430 	.word	0x20001430

08009dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d044      	beq.n	8009e9c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e12:	4b25      	ldr	r3, [pc, #148]	; (8009ea8 <xTaskPriorityDisinherit+0xac>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d001      	beq.n	8009e20 <xTaskPriorityDisinherit+0x24>
 8009e1c:	b672      	cpsid	i
 8009e1e:	e7fe      	b.n	8009e1e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <xTaskPriorityDisinherit+0x30>
 8009e28:	b672      	cpsid	i
 8009e2a:	e7fe      	b.n	8009e2a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e30:	1e5a      	subs	r2, r3, #1
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d02c      	beq.n	8009e9c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d128      	bne.n	8009e9c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f7fe fdbb 	bl	80089ca <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	2238      	movs	r2, #56	; 0x38
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4b0f      	ldr	r3, [pc, #60]	; (8009eac <xTaskPriorityDisinherit+0xb0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <xTaskPriorityDisinherit+0x80>
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e78:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <xTaskPriorityDisinherit+0xb0>)
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e80:	0013      	movs	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	189b      	adds	r3, r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4a09      	ldr	r2, [pc, #36]	; (8009eb0 <xTaskPriorityDisinherit+0xb4>)
 8009e8a:	189a      	adds	r2, r3, r2
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	0019      	movs	r1, r3
 8009e92:	0010      	movs	r0, r2
 8009e94:	f7fe fd41 	bl	800891a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
	}
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	b004      	add	sp, #16
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	20000f34 	.word	0x20000f34
 8009eac:	20001410 	.word	0x20001410
 8009eb0:	20000f38 	.word	0x20000f38

08009eb4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009ec2:	f000 fda5 	bl	800aa10 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009ec6:	4b26      	ldr	r3, [pc, #152]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	22b8      	movs	r2, #184	; 0xb8
 8009ecc:	5c9b      	ldrb	r3, [r3, r2]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d017      	beq.n	8009f04 <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009ed4:	4b22      	ldr	r3, [pc, #136]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	22b4      	movs	r2, #180	; 0xb4
 8009eda:	589a      	ldr	r2, [r3, r2]
 8009edc:	68f9      	ldr	r1, [r7, #12]
 8009ede:	43c9      	mvns	r1, r1
 8009ee0:	400a      	ands	r2, r1
 8009ee2:	21b4      	movs	r1, #180	; 0xb4
 8009ee4:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	22b8      	movs	r2, #184	; 0xb8
 8009eec:	2101      	movs	r1, #1
 8009eee:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2101      	movs	r1, #1
 8009efa:	0018      	movs	r0, r3
 8009efc:	f000 f988 	bl	800a210 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009f00:	f000 fd76 	bl	800a9f0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f04:	f000 fd96 	bl	800aa34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009f08:	f000 fd82 	bl	800aa10 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	22b4      	movs	r2, #180	; 0xb4
 8009f18:	589a      	ldr	r2, [r3, r2]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009f1e:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	22b8      	movs	r2, #184	; 0xb8
 8009f24:	5c9b      	ldrb	r3, [r3, r2]
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d002      	beq.n	8009f32 <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	617b      	str	r3, [r7, #20]
 8009f30:	e00a      	b.n	8009f48 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009f32:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	22b4      	movs	r2, #180	; 0xb4
 8009f38:	589a      	ldr	r2, [r3, r2]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	43c9      	mvns	r1, r1
 8009f3e:	400a      	ands	r2, r1
 8009f40:	21b4      	movs	r1, #180	; 0xb4
 8009f42:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8009f44:	2301      	movs	r3, #1
 8009f46:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <xTaskNotifyWait+0xac>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	22b8      	movs	r2, #184	; 0xb8
 8009f4e:	2100      	movs	r1, #0
 8009f50:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8009f52:	f000 fd6f 	bl	800aa34 <vPortExitCritical>

		return xReturn;
 8009f56:	697b      	ldr	r3, [r7, #20]
	}
 8009f58:	0018      	movs	r0, r3
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	b006      	add	sp, #24
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000f34 	.word	0x20000f34

08009f64 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	1dfb      	adds	r3, r7, #7
 8009f72:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009f74:	2301      	movs	r3, #1
 8009f76:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <xTaskGenericNotify+0x1e>
 8009f7e:	b672      	cpsid	i
 8009f80:	e7fe      	b.n	8009f80 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 8009f86:	f000 fd43 	bl	800aa10 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d004      	beq.n	8009f9a <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	22b4      	movs	r2, #180	; 0xb4
 8009f94:	589a      	ldr	r2, [r3, r2]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009f9a:	2317      	movs	r3, #23
 8009f9c:	18fb      	adds	r3, r7, r3
 8009f9e:	69ba      	ldr	r2, [r7, #24]
 8009fa0:	21b8      	movs	r1, #184	; 0xb8
 8009fa2:	5c52      	ldrb	r2, [r2, r1]
 8009fa4:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	22b8      	movs	r2, #184	; 0xb8
 8009faa:	2102      	movs	r1, #2
 8009fac:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 8009fae:	1dfb      	adds	r3, r7, #7
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d827      	bhi.n	800a006 <xTaskGenericNotify+0xa2>
 8009fb6:	009a      	lsls	r2, r3, #2
 8009fb8:	4b34      	ldr	r3, [pc, #208]	; (800a08c <xTaskGenericNotify+0x128>)
 8009fba:	18d3      	adds	r3, r2, r3
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	22b4      	movs	r2, #180	; 0xb4
 8009fc4:	589a      	ldr	r2, [r3, r2]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	431a      	orrs	r2, r3
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	21b4      	movs	r1, #180	; 0xb4
 8009fce:	505a      	str	r2, [r3, r1]
					break;
 8009fd0:	e023      	b.n	800a01a <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	22b4      	movs	r2, #180	; 0xb4
 8009fd6:	589b      	ldr	r3, [r3, r2]
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	21b4      	movs	r1, #180	; 0xb4
 8009fde:	505a      	str	r2, [r3, r1]
					break;
 8009fe0:	e01b      	b.n	800a01a <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	21b4      	movs	r1, #180	; 0xb4
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	505a      	str	r2, [r3, r1]
					break;
 8009fea:	e016      	b.n	800a01a <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009fec:	2317      	movs	r3, #23
 8009fee:	18fb      	adds	r3, r7, r3
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d004      	beq.n	800a000 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	21b4      	movs	r1, #180	; 0xb4
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ffe:	e00c      	b.n	800a01a <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 800a000:	2300      	movs	r3, #0
 800a002:	61fb      	str	r3, [r7, #28]
					break;
 800a004:	e009      	b.n	800a01a <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	22b4      	movs	r2, #180	; 0xb4
 800a00a:	589b      	ldr	r3, [r3, r2]
 800a00c:	3301      	adds	r3, #1
 800a00e:	d003      	beq.n	800a018 <xTaskGenericNotify+0xb4>
 800a010:	b672      	cpsid	i
 800a012:	e7fe      	b.n	800a012 <xTaskGenericNotify+0xae>
					break;
 800a014:	46c0      	nop			; (mov r8, r8)
 800a016:	e000      	b.n	800a01a <xTaskGenericNotify+0xb6>

					break;
 800a018:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a01a:	2317      	movs	r3, #23
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d12b      	bne.n	800a07c <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	3304      	adds	r3, #4
 800a028:	0018      	movs	r0, r3
 800a02a:	f7fe fcce 	bl	80089ca <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a032:	4b17      	ldr	r3, [pc, #92]	; (800a090 <xTaskGenericNotify+0x12c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d903      	bls.n	800a042 <xTaskGenericNotify+0xde>
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03e:	4b14      	ldr	r3, [pc, #80]	; (800a090 <xTaskGenericNotify+0x12c>)
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	0013      	movs	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	189b      	adds	r3, r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4a11      	ldr	r2, [pc, #68]	; (800a094 <xTaskGenericNotify+0x130>)
 800a050:	189a      	adds	r2, r3, r2
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	3304      	adds	r3, #4
 800a056:	0019      	movs	r1, r3
 800a058:	0010      	movs	r0, r2
 800a05a:	f7fe fc5e 	bl	800891a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <xTaskGenericNotify+0x106>
 800a066:	b672      	cpsid	i
 800a068:	e7fe      	b.n	800a068 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06e:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <xTaskGenericNotify+0x134>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	429a      	cmp	r2, r3
 800a076:	d901      	bls.n	800a07c <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a078:	f000 fcba 	bl	800a9f0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a07c:	f000 fcda 	bl	800aa34 <vPortExitCritical>

		return xReturn;
 800a080:	69fb      	ldr	r3, [r7, #28]
	}
 800a082:	0018      	movs	r0, r3
 800a084:	46bd      	mov	sp, r7
 800a086:	b008      	add	sp, #32
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	46c0      	nop			; (mov r8, r8)
 800a08c:	0800e264 	.word	0x0800e264
 800a090:	20001410 	.word	0x20001410
 800a094:	20000f38 	.word	0x20000f38
 800a098:	20000f34 	.word	0x20000f34

0800a09c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	1dfb      	adds	r3, r7, #7
 800a0aa:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <xTaskGenericNotifyFromISR+0x1e>
 800a0b6:	b672      	cpsid	i
 800a0b8:	e7fe      	b.n	800a0b8 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0be:	f000 fcd1 	bl	800aa64 <ulSetInterruptMaskFromISR>
 800a0c2:	0003      	movs	r3, r0
 800a0c4:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d004      	beq.n	800a0d6 <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	22b4      	movs	r2, #180	; 0xb4
 800a0d0:	589a      	ldr	r2, [r3, r2]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a0d6:	2313      	movs	r3, #19
 800a0d8:	18fb      	adds	r3, r7, r3
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	21b8      	movs	r1, #184	; 0xb8
 800a0de:	5c52      	ldrb	r2, [r2, r1]
 800a0e0:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	22b8      	movs	r2, #184	; 0xb8
 800a0e6:	2102      	movs	r1, #2
 800a0e8:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800a0ea:	1dfb      	adds	r3, r7, #7
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d827      	bhi.n	800a142 <xTaskGenericNotifyFromISR+0xa6>
 800a0f2:	009a      	lsls	r2, r3, #2
 800a0f4:	4b3f      	ldr	r3, [pc, #252]	; (800a1f4 <xTaskGenericNotifyFromISR+0x158>)
 800a0f6:	18d3      	adds	r3, r2, r3
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	22b4      	movs	r2, #180	; 0xb4
 800a100:	589a      	ldr	r2, [r3, r2]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	431a      	orrs	r2, r3
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	21b4      	movs	r1, #180	; 0xb4
 800a10a:	505a      	str	r2, [r3, r1]
					break;
 800a10c:	e023      	b.n	800a156 <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	22b4      	movs	r2, #180	; 0xb4
 800a112:	589b      	ldr	r3, [r3, r2]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	21b4      	movs	r1, #180	; 0xb4
 800a11a:	505a      	str	r2, [r3, r1]
					break;
 800a11c:	e01b      	b.n	800a156 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	21b4      	movs	r1, #180	; 0xb4
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	505a      	str	r2, [r3, r1]
					break;
 800a126:	e016      	b.n	800a156 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a128:	2313      	movs	r3, #19
 800a12a:	18fb      	adds	r3, r7, r3
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d004      	beq.n	800a13c <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	21b4      	movs	r1, #180	; 0xb4
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a13a:	e00c      	b.n	800a156 <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]
					break;
 800a140:	e009      	b.n	800a156 <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	22b4      	movs	r2, #180	; 0xb4
 800a146:	589b      	ldr	r3, [r3, r2]
 800a148:	3301      	adds	r3, #1
 800a14a:	d003      	beq.n	800a154 <xTaskGenericNotifyFromISR+0xb8>
 800a14c:	b672      	cpsid	i
 800a14e:	e7fe      	b.n	800a14e <xTaskGenericNotifyFromISR+0xb2>
					break;
 800a150:	46c0      	nop			; (mov r8, r8)
 800a152:	e000      	b.n	800a156 <xTaskGenericNotifyFromISR+0xba>
					break;
 800a154:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a156:	2313      	movs	r3, #19
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d13f      	bne.n	800a1e0 <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <xTaskGenericNotifyFromISR+0xd0>
 800a168:	b672      	cpsid	i
 800a16a:	e7fe      	b.n	800a16a <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a16c:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <xTaskGenericNotifyFromISR+0x15c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d11d      	bne.n	800a1b0 <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	3304      	adds	r3, #4
 800a178:	0018      	movs	r0, r3
 800a17a:	f7fe fc26 	bl	80089ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	4b1e      	ldr	r3, [pc, #120]	; (800a1fc <xTaskGenericNotifyFromISR+0x160>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d903      	bls.n	800a192 <xTaskGenericNotifyFromISR+0xf6>
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18e:	4b1b      	ldr	r3, [pc, #108]	; (800a1fc <xTaskGenericNotifyFromISR+0x160>)
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	0013      	movs	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	189b      	adds	r3, r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a18      	ldr	r2, [pc, #96]	; (800a200 <xTaskGenericNotifyFromISR+0x164>)
 800a1a0:	189a      	adds	r2, r3, r2
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	0019      	movs	r1, r3
 800a1a8:	0010      	movs	r0, r2
 800a1aa:	f7fe fbb6 	bl	800891a <vListInsertEnd>
 800a1ae:	e007      	b.n	800a1c0 <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	3318      	adds	r3, #24
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <xTaskGenericNotifyFromISR+0x168>)
 800a1b8:	0011      	movs	r1, r2
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7fe fbad 	bl	800891a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c4:	4b10      	ldr	r3, [pc, #64]	; (800a208 <xTaskGenericNotifyFromISR+0x16c>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d908      	bls.n	800a1e0 <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <xTaskGenericNotifyFromISR+0x170>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	f000 fc44 	bl	800aa70 <vClearInterruptMaskFromISR>

		return xReturn;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
	}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b008      	add	sp, #32
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	0800e278 	.word	0x0800e278
 800a1f8:	20001430 	.word	0x20001430
 800a1fc:	20001410 	.word	0x20001410
 800a200:	20000f38 	.word	0x20000f38
 800a204:	200013c8 	.word	0x200013c8
 800a208:	20000f34 	.word	0x20000f34
 800a20c:	2000141c 	.word	0x2000141c

0800a210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a21a:	4b21      	ldr	r3, [pc, #132]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a220:	4b20      	ldr	r3, [pc, #128]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3304      	adds	r3, #4
 800a226:	0018      	movs	r0, r3
 800a228:	f7fe fbcf 	bl	80089ca <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3301      	adds	r3, #1
 800a230:	d10b      	bne.n	800a24a <prvAddCurrentTaskToDelayedList+0x3a>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d008      	beq.n	800a24a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a238:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1d1a      	adds	r2, r3, #4
 800a23e:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a240:	0011      	movs	r1, r2
 800a242:	0018      	movs	r0, r3
 800a244:	f7fe fb69 	bl	800891a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a248:	e026      	b.n	800a298 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	18d3      	adds	r3, r2, r3
 800a250:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d209      	bcs.n	800a276 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a262:	4b12      	ldr	r3, [pc, #72]	; (800a2ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3304      	adds	r3, #4
 800a26c:	0019      	movs	r1, r3
 800a26e:	0010      	movs	r0, r2
 800a270:	f7fe fb75 	bl	800895e <vListInsert>
}
 800a274:	e010      	b.n	800a298 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3304      	adds	r3, #4
 800a280:	0019      	movs	r1, r3
 800a282:	0010      	movs	r0, r2
 800a284:	f7fe fb6b 	bl	800895e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d202      	bcs.n	800a298 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a292:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	601a      	str	r2, [r3, #0]
}
 800a298:	46c0      	nop			; (mov r8, r8)
 800a29a:	46bd      	mov	sp, r7
 800a29c:	b004      	add	sp, #16
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	2000140c 	.word	0x2000140c
 800a2a4:	20000f34 	.word	0x20000f34
 800a2a8:	200013f4 	.word	0x200013f4
 800a2ac:	200013c4 	.word	0x200013c4
 800a2b0:	200013c0 	.word	0x200013c0
 800a2b4:	20001428 	.word	0x20001428

0800a2b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2b8:	b590      	push	{r4, r7, lr}
 800a2ba:	b089      	sub	sp, #36	; 0x24
 800a2bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2c2:	f000 fac9 	bl	800a858 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2c6:	4b17      	ldr	r3, [pc, #92]	; (800a324 <xTimerCreateTimerTask+0x6c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d020      	beq.n	800a310 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2d6:	003a      	movs	r2, r7
 800a2d8:	1d39      	adds	r1, r7, #4
 800a2da:	2308      	movs	r3, #8
 800a2dc:	18fb      	adds	r3, r7, r3
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f7fe fada 	bl	8008898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2e4:	683c      	ldr	r4, [r7, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	490f      	ldr	r1, [pc, #60]	; (800a328 <xTimerCreateTimerTask+0x70>)
 800a2ec:	480f      	ldr	r0, [pc, #60]	; (800a32c <xTimerCreateTimerTask+0x74>)
 800a2ee:	9202      	str	r2, [sp, #8]
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	0022      	movs	r2, r4
 800a2fa:	f7fe ffba 	bl	8009272 <xTaskCreateStatic>
 800a2fe:	0002      	movs	r2, r0
 800a300:	4b0b      	ldr	r3, [pc, #44]	; (800a330 <xTimerCreateTimerTask+0x78>)
 800a302:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a304:	4b0a      	ldr	r3, [pc, #40]	; (800a330 <xTimerCreateTimerTask+0x78>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a30c:	2301      	movs	r3, #1
 800a30e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <xTimerCreateTimerTask+0x62>
 800a316:	b672      	cpsid	i
 800a318:	e7fe      	b.n	800a318 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800a31a:	68fb      	ldr	r3, [r7, #12]
}
 800a31c:	0018      	movs	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	b005      	add	sp, #20
 800a322:	bd90      	pop	{r4, r7, pc}
 800a324:	20001464 	.word	0x20001464
 800a328:	0800dfe4 	.word	0x0800dfe4
 800a32c:	0800a451 	.word	0x0800a451
 800a330:	20001468 	.word	0x20001468

0800a334 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b08b      	sub	sp, #44	; 0x2c
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a342:	2300      	movs	r3, #0
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <xTimerGenericCommand+0x1c>
 800a34c:	b672      	cpsid	i
 800a34e:	e7fe      	b.n	800a34e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a350:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <xTimerGenericCommand+0x90>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d030      	beq.n	800a3ba <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a358:	2414      	movs	r4, #20
 800a35a:	193b      	adds	r3, r7, r4
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a360:	193b      	adds	r3, r7, r4
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a366:	193b      	adds	r3, r7, r4
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b05      	cmp	r3, #5
 800a370:	dc19      	bgt.n	800a3a6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a372:	f7ff fd27 	bl	8009dc4 <xTaskGetSchedulerState>
 800a376:	0003      	movs	r3, r0
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d109      	bne.n	800a390 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a37c:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <xTimerGenericCommand+0x90>)
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a382:	1939      	adds	r1, r7, r4
 800a384:	2300      	movs	r3, #0
 800a386:	f7fe fc0f 	bl	8008ba8 <xQueueGenericSend>
 800a38a:	0003      	movs	r3, r0
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
 800a38e:	e014      	b.n	800a3ba <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <xTimerGenericCommand+0x90>)
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	2314      	movs	r3, #20
 800a396:	18f9      	adds	r1, r7, r3
 800a398:	2300      	movs	r3, #0
 800a39a:	2200      	movs	r2, #0
 800a39c:	f7fe fc04 	bl	8008ba8 <xQueueGenericSend>
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a4:	e009      	b.n	800a3ba <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <xTimerGenericCommand+0x90>)
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	2314      	movs	r3, #20
 800a3ae:	18f9      	adds	r1, r7, r3
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f7fe fcbd 	bl	8008d30 <xQueueGenericSendFromISR>
 800a3b6:	0003      	movs	r3, r0
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b00b      	add	sp, #44	; 0x2c
 800a3c2:	bd90      	pop	{r4, r7, pc}
 800a3c4:	20001464 	.word	0x20001464

0800a3c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d2:	4b1e      	ldr	r3, [pc, #120]	; (800a44c <prvProcessExpiredTimer+0x84>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f7fe faf2 	bl	80089ca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2228      	movs	r2, #40	; 0x28
 800a3ea:	5c9b      	ldrb	r3, [r3, r2]
 800a3ec:	001a      	movs	r2, r3
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	d019      	beq.n	800a428 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	18d1      	adds	r1, r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f000 f8c3 	bl	800a58c <prvInsertTimerInActiveList>
 800a406:	1e03      	subs	r3, r0, #0
 800a408:	d017      	beq.n	800a43a <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	2300      	movs	r3, #0
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	2100      	movs	r1, #0
 800a416:	f7ff ff8d 	bl	800a334 <xTimerGenericCommand>
 800a41a:	0003      	movs	r3, r0
 800a41c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <prvProcessExpiredTimer+0x72>
 800a424:	b672      	cpsid	i
 800a426:	e7fe      	b.n	800a426 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2228      	movs	r2, #40	; 0x28
 800a42c:	5c9b      	ldrb	r3, [r3, r2]
 800a42e:	2201      	movs	r2, #1
 800a430:	4393      	bics	r3, r2
 800a432:	b2d9      	uxtb	r1, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2228      	movs	r2, #40	; 0x28
 800a438:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a1b      	ldr	r3, [r3, #32]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	0010      	movs	r0, r2
 800a442:	4798      	blx	r3
}
 800a444:	46c0      	nop			; (mov r8, r8)
 800a446:	46bd      	mov	sp, r7
 800a448:	b004      	add	sp, #16
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	2000145c 	.word	0x2000145c

0800a450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a458:	2308      	movs	r3, #8
 800a45a:	18fb      	adds	r3, r7, r3
 800a45c:	0018      	movs	r0, r3
 800a45e:	f000 f853 	bl	800a508 <prvGetNextExpireTime>
 800a462:	0003      	movs	r3, r0
 800a464:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	0011      	movs	r1, r2
 800a46c:	0018      	movs	r0, r3
 800a46e:	f000 f803 	bl	800a478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a472:	f000 f8cd 	bl	800a610 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a476:	e7ef      	b.n	800a458 <prvTimerTask+0x8>

0800a478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a482:	f7ff f913 	bl	80096ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a486:	2308      	movs	r3, #8
 800a488:	18fb      	adds	r3, r7, r3
 800a48a:	0018      	movs	r0, r3
 800a48c:	f000 f85e 	bl	800a54c <prvSampleTimeNow>
 800a490:	0003      	movs	r3, r0
 800a492:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d12b      	bne.n	800a4f2 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10c      	bne.n	800a4ba <prvProcessTimerOrBlockTask+0x42>
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d808      	bhi.n	800a4ba <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a4a8:	f7ff f90c 	bl	80096c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	0011      	movs	r1, r2
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f7ff ff88 	bl	800a3c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4b8:	e01d      	b.n	800a4f6 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d008      	beq.n	800a4d2 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4c0:	4b0f      	ldr	r3, [pc, #60]	; (800a500 <prvProcessTimerOrBlockTask+0x88>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <prvProcessTimerOrBlockTask+0x56>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e000      	b.n	800a4d0 <prvProcessTimerOrBlockTask+0x58>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <prvProcessTimerOrBlockTask+0x8c>)
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	0019      	movs	r1, r3
 800a4e0:	f7fe fe94 	bl	800920c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4e4:	f7ff f8ee 	bl	80096c4 <xTaskResumeAll>
 800a4e8:	1e03      	subs	r3, r0, #0
 800a4ea:	d104      	bne.n	800a4f6 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800a4ec:	f000 fa80 	bl	800a9f0 <vPortYield>
}
 800a4f0:	e001      	b.n	800a4f6 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800a4f2:	f7ff f8e7 	bl	80096c4 <xTaskResumeAll>
}
 800a4f6:	46c0      	nop			; (mov r8, r8)
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	b004      	add	sp, #16
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	20001460 	.word	0x20001460
 800a504:	20001464 	.word	0x20001464

0800a508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a510:	4b0d      	ldr	r3, [pc, #52]	; (800a548 <prvGetNextExpireTime+0x40>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <prvGetNextExpireTime+0x16>
 800a51a:	2201      	movs	r2, #1
 800a51c:	e000      	b.n	800a520 <prvGetNextExpireTime+0x18>
 800a51e:	2200      	movs	r2, #0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d105      	bne.n	800a538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <prvGetNextExpireTime+0x40>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	e001      	b.n	800a53c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a53c:	68fb      	ldr	r3, [r7, #12]
}
 800a53e:	0018      	movs	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	b004      	add	sp, #16
 800a544:	bd80      	pop	{r7, pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	2000145c 	.word	0x2000145c

0800a54c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a554:	f7ff f942 	bl	80097dc <xTaskGetTickCount>
 800a558:	0003      	movs	r3, r0
 800a55a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <prvSampleTimeNow+0x3c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	429a      	cmp	r2, r3
 800a564:	d205      	bcs.n	800a572 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a566:	f000 f919 	bl	800a79c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	e002      	b.n	800a578 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a578:	4b03      	ldr	r3, [pc, #12]	; (800a588 <prvSampleTimeNow+0x3c>)
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a57e:	68fb      	ldr	r3, [r7, #12]
}
 800a580:	0018      	movs	r0, r3
 800a582:	46bd      	mov	sp, r7
 800a584:	b004      	add	sp, #16
 800a586:	bd80      	pop	{r7, pc}
 800a588:	2000146c 	.word	0x2000146c

0800a58c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d812      	bhi.n	800a5d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d302      	bcc.n	800a5c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e01b      	b.n	800a5fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5c6:	4b10      	ldr	r3, [pc, #64]	; (800a608 <prvInsertTimerInActiveList+0x7c>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	0019      	movs	r1, r3
 800a5d0:	0010      	movs	r0, r2
 800a5d2:	f7fe f9c4 	bl	800895e <vListInsert>
 800a5d6:	e012      	b.n	800a5fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d206      	bcs.n	800a5ee <prvInsertTimerInActiveList+0x62>
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d302      	bcc.n	800a5ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e007      	b.n	800a5fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5ee:	4b07      	ldr	r3, [pc, #28]	; (800a60c <prvInsertTimerInActiveList+0x80>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	f7fe f9b0 	bl	800895e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5fe:	697b      	ldr	r3, [r7, #20]
}
 800a600:	0018      	movs	r0, r3
 800a602:	46bd      	mov	sp, r7
 800a604:	b006      	add	sp, #24
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20001460 	.word	0x20001460
 800a60c:	2000145c 	.word	0x2000145c

0800a610 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b08d      	sub	sp, #52	; 0x34
 800a614:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a616:	e0ac      	b.n	800a772 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a618:	2208      	movs	r2, #8
 800a61a:	18bb      	adds	r3, r7, r2
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da0f      	bge.n	800a642 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a622:	18bb      	adds	r3, r7, r2
 800a624:	3304      	adds	r3, #4
 800a626:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <prvProcessReceivedCommands+0x22>
 800a62e:	b672      	cpsid	i
 800a630:	e7fe      	b.n	800a630 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a638:	6858      	ldr	r0, [r3, #4]
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	0019      	movs	r1, r3
 800a640:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a642:	2208      	movs	r2, #8
 800a644:	18bb      	adds	r3, r7, r2
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	da00      	bge.n	800a64e <prvProcessReceivedCommands+0x3e>
 800a64c:	e090      	b.n	800a770 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a64e:	18bb      	adds	r3, r7, r2
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	3304      	adds	r3, #4
 800a660:	0018      	movs	r0, r3
 800a662:	f7fe f9b2 	bl	80089ca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a666:	1d3b      	adds	r3, r7, #4
 800a668:	0018      	movs	r0, r3
 800a66a:	f7ff ff6f 	bl	800a54c <prvSampleTimeNow>
 800a66e:	0003      	movs	r3, r0
 800a670:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800a672:	2308      	movs	r3, #8
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b09      	cmp	r3, #9
 800a67a:	d900      	bls.n	800a67e <prvProcessReceivedCommands+0x6e>
 800a67c:	e079      	b.n	800a772 <prvProcessReceivedCommands+0x162>
 800a67e:	009a      	lsls	r2, r3, #2
 800a680:	4b44      	ldr	r3, [pc, #272]	; (800a794 <prvProcessReceivedCommands+0x184>)
 800a682:	18d3      	adds	r3, r2, r3
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	2228      	movs	r2, #40	; 0x28
 800a68c:	5c9b      	ldrb	r3, [r3, r2]
 800a68e:	2201      	movs	r2, #1
 800a690:	4313      	orrs	r3, r2
 800a692:	b2d9      	uxtb	r1, r3
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	2228      	movs	r2, #40	; 0x28
 800a698:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a69a:	2408      	movs	r4, #8
 800a69c:	193b      	adds	r3, r7, r4
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	18d1      	adds	r1, r2, r3
 800a6a6:	193b      	adds	r3, r7, r4
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	69fa      	ldr	r2, [r7, #28]
 800a6ac:	6a38      	ldr	r0, [r7, #32]
 800a6ae:	f7ff ff6d 	bl	800a58c <prvInsertTimerInActiveList>
 800a6b2:	1e03      	subs	r3, r0, #0
 800a6b4:	d05d      	beq.n	800a772 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	6a3a      	ldr	r2, [r7, #32]
 800a6bc:	0010      	movs	r0, r2
 800a6be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	2228      	movs	r2, #40	; 0x28
 800a6c4:	5c9b      	ldrb	r3, [r3, r2]
 800a6c6:	001a      	movs	r2, r3
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	d051      	beq.n	800a772 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6ce:	193b      	adds	r3, r7, r4
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	18d2      	adds	r2, r2, r3
 800a6d8:	6a38      	ldr	r0, [r7, #32]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	f7ff fe27 	bl	800a334 <xTimerGenericCommand>
 800a6e6:	0003      	movs	r3, r0
 800a6e8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d140      	bne.n	800a772 <prvProcessReceivedCommands+0x162>
 800a6f0:	b672      	cpsid	i
 800a6f2:	e7fe      	b.n	800a6f2 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	2228      	movs	r2, #40	; 0x28
 800a6f8:	5c9b      	ldrb	r3, [r3, r2]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	4393      	bics	r3, r2
 800a6fe:	b2d9      	uxtb	r1, r3
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	2228      	movs	r2, #40	; 0x28
 800a704:	5499      	strb	r1, [r3, r2]
					break;
 800a706:	e034      	b.n	800a772 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	2228      	movs	r2, #40	; 0x28
 800a70c:	5c9b      	ldrb	r3, [r3, r2]
 800a70e:	2201      	movs	r2, #1
 800a710:	4313      	orrs	r3, r2
 800a712:	b2d9      	uxtb	r1, r3
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	2228      	movs	r2, #40	; 0x28
 800a718:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a71a:	2308      	movs	r3, #8
 800a71c:	18fb      	adds	r3, r7, r3
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	6a3b      	ldr	r3, [r7, #32]
 800a722:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <prvProcessReceivedCommands+0x120>
 800a72c:	b672      	cpsid	i
 800a72e:	e7fe      	b.n	800a72e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	699a      	ldr	r2, [r3, #24]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	18d1      	adds	r1, r2, r3
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	6a38      	ldr	r0, [r7, #32]
 800a73e:	f7ff ff25 	bl	800a58c <prvInsertTimerInActiveList>
					break;
 800a742:	e016      	b.n	800a772 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	2228      	movs	r2, #40	; 0x28
 800a748:	5c9b      	ldrb	r3, [r3, r2]
 800a74a:	001a      	movs	r2, r3
 800a74c:	2302      	movs	r3, #2
 800a74e:	4013      	ands	r3, r2
 800a750:	d104      	bne.n	800a75c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	0018      	movs	r0, r3
 800a756:	f000 fa9f 	bl	800ac98 <vPortFree>
 800a75a:	e00a      	b.n	800a772 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	2228      	movs	r2, #40	; 0x28
 800a760:	5c9b      	ldrb	r3, [r3, r2]
 800a762:	2201      	movs	r2, #1
 800a764:	4393      	bics	r3, r2
 800a766:	b2d9      	uxtb	r1, r3
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	2228      	movs	r2, #40	; 0x28
 800a76c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a76e:	e000      	b.n	800a772 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a770:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a772:	4b09      	ldr	r3, [pc, #36]	; (800a798 <prvProcessReceivedCommands+0x188>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2208      	movs	r2, #8
 800a778:	18b9      	adds	r1, r7, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	0018      	movs	r0, r3
 800a77e:	f7fe fb4b 	bl	8008e18 <xQueueReceive>
 800a782:	1e03      	subs	r3, r0, #0
 800a784:	d000      	beq.n	800a788 <prvProcessReceivedCommands+0x178>
 800a786:	e747      	b.n	800a618 <prvProcessReceivedCommands+0x8>
	}
}
 800a788:	46c0      	nop			; (mov r8, r8)
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	46bd      	mov	sp, r7
 800a78e:	b00b      	add	sp, #44	; 0x2c
 800a790:	bd90      	pop	{r4, r7, pc}
 800a792:	46c0      	nop			; (mov r8, r8)
 800a794:	0800e28c 	.word	0x0800e28c
 800a798:	20001464 	.word	0x20001464

0800a79c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7a2:	e041      	b.n	800a828 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7a4:	4b2a      	ldr	r3, [pc, #168]	; (800a850 <prvSwitchTimerLists+0xb4>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ae:	4b28      	ldr	r3, [pc, #160]	; (800a850 <prvSwitchTimerLists+0xb4>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f7fe f904 	bl	80089ca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	0010      	movs	r0, r2
 800a7ca:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2228      	movs	r2, #40	; 0x28
 800a7d0:	5c9b      	ldrb	r3, [r3, r2]
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	d026      	beq.n	800a828 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	18d3      	adds	r3, r2, r3
 800a7e2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d90e      	bls.n	800a80a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7f8:	4b15      	ldr	r3, [pc, #84]	; (800a850 <prvSwitchTimerLists+0xb4>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3304      	adds	r3, #4
 800a800:	0019      	movs	r1, r3
 800a802:	0010      	movs	r0, r2
 800a804:	f7fe f8ab 	bl	800895e <vListInsert>
 800a808:	e00e      	b.n	800a828 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	2300      	movs	r3, #0
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	2300      	movs	r3, #0
 800a814:	2100      	movs	r1, #0
 800a816:	f7ff fd8d 	bl	800a334 <xTimerGenericCommand>
 800a81a:	0003      	movs	r3, r0
 800a81c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <prvSwitchTimerLists+0x8c>
 800a824:	b672      	cpsid	i
 800a826:	e7fe      	b.n	800a826 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <prvSwitchTimerLists+0xb4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1b8      	bne.n	800a7a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a832:	4b07      	ldr	r3, [pc, #28]	; (800a850 <prvSwitchTimerLists+0xb4>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a838:	4b06      	ldr	r3, [pc, #24]	; (800a854 <prvSwitchTimerLists+0xb8>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	4b04      	ldr	r3, [pc, #16]	; (800a850 <prvSwitchTimerLists+0xb4>)
 800a83e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <prvSwitchTimerLists+0xb8>)
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	601a      	str	r2, [r3, #0]
}
 800a846:	46c0      	nop			; (mov r8, r8)
 800a848:	46bd      	mov	sp, r7
 800a84a:	b006      	add	sp, #24
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	2000145c 	.word	0x2000145c
 800a854:	20001460 	.word	0x20001460

0800a858 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a85e:	f000 f8d7 	bl	800aa10 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a862:	4b16      	ldr	r3, [pc, #88]	; (800a8bc <prvCheckForValidListAndQueue+0x64>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d123      	bne.n	800a8b2 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <prvCheckForValidListAndQueue+0x68>)
 800a86c:	0018      	movs	r0, r3
 800a86e:	f7fe f82b 	bl	80088c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <prvCheckForValidListAndQueue+0x6c>)
 800a874:	0018      	movs	r0, r3
 800a876:	f7fe f827 	bl	80088c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a87a:	4b13      	ldr	r3, [pc, #76]	; (800a8c8 <prvCheckForValidListAndQueue+0x70>)
 800a87c:	4a10      	ldr	r2, [pc, #64]	; (800a8c0 <prvCheckForValidListAndQueue+0x68>)
 800a87e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a880:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <prvCheckForValidListAndQueue+0x74>)
 800a882:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <prvCheckForValidListAndQueue+0x6c>)
 800a884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a886:	4b12      	ldr	r3, [pc, #72]	; (800a8d0 <prvCheckForValidListAndQueue+0x78>)
 800a888:	4a12      	ldr	r2, [pc, #72]	; (800a8d4 <prvCheckForValidListAndQueue+0x7c>)
 800a88a:	2100      	movs	r1, #0
 800a88c:	9100      	str	r1, [sp, #0]
 800a88e:	2110      	movs	r1, #16
 800a890:	200a      	movs	r0, #10
 800a892:	f7fe f916 	bl	8008ac2 <xQueueGenericCreateStatic>
 800a896:	0002      	movs	r2, r0
 800a898:	4b08      	ldr	r3, [pc, #32]	; (800a8bc <prvCheckForValidListAndQueue+0x64>)
 800a89a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a89c:	4b07      	ldr	r3, [pc, #28]	; (800a8bc <prvCheckForValidListAndQueue+0x64>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d006      	beq.n	800a8b2 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <prvCheckForValidListAndQueue+0x64>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a0b      	ldr	r2, [pc, #44]	; (800a8d8 <prvCheckForValidListAndQueue+0x80>)
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	f7fe fc85 	bl	80091bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8b2:	f000 f8bf 	bl	800aa34 <vPortExitCritical>
}
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20001464 	.word	0x20001464
 800a8c0:	20001434 	.word	0x20001434
 800a8c4:	20001448 	.word	0x20001448
 800a8c8:	2000145c 	.word	0x2000145c
 800a8cc:	20001460 	.word	0x20001460
 800a8d0:	20001510 	.word	0x20001510
 800a8d4:	20001470 	.word	0x20001470
 800a8d8:	0800dfec 	.word	0x0800dfec

0800a8dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2280      	movs	r2, #128	; 0x80
 800a8f2:	0452      	lsls	r2, r2, #17
 800a8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b04      	subs	r3, #4
 800a8fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3b04      	subs	r3, #4
 800a906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <pxPortInitialiseStack+0x50>)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3b14      	subs	r3, #20
 800a912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3b20      	subs	r3, #32
 800a91e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a920:	68fb      	ldr	r3, [r7, #12]
}
 800a922:	0018      	movs	r0, r3
 800a924:	46bd      	mov	sp, r7
 800a926:	b004      	add	sp, #16
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	46c0      	nop			; (mov r8, r8)
 800a92c:	0800a931 	.word	0x0800a931

0800a930 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a936:	2300      	movs	r3, #0
 800a938:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a93a:	4b08      	ldr	r3, [pc, #32]	; (800a95c <prvTaskExitError+0x2c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3301      	adds	r3, #1
 800a940:	d001      	beq.n	800a946 <prvTaskExitError+0x16>
 800a942:	b672      	cpsid	i
 800a944:	e7fe      	b.n	800a944 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a946:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a948:	46c0      	nop			; (mov r8, r8)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0fc      	beq.n	800a94a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a950:	46c0      	nop			; (mov r8, r8)
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	46bd      	mov	sp, r7
 800a956:	b002      	add	sp, #8
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	46c0      	nop			; (mov r8, r8)
 800a95c:	20000010 	.word	0x20000010

0800a960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a964:	46c0      	nop			; (mov r8, r8)
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	0000      	movs	r0, r0
 800a96c:	0000      	movs	r0, r0
	...

0800a970 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a970:	4a0b      	ldr	r2, [pc, #44]	; (800a9a0 <pxCurrentTCBConst2>)
 800a972:	6813      	ldr	r3, [r2, #0]
 800a974:	6818      	ldr	r0, [r3, #0]
 800a976:	3020      	adds	r0, #32
 800a978:	f380 8809 	msr	PSP, r0
 800a97c:	2002      	movs	r0, #2
 800a97e:	f380 8814 	msr	CONTROL, r0
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a988:	46ae      	mov	lr, r5
 800a98a:	bc08      	pop	{r3}
 800a98c:	bc04      	pop	{r2}
 800a98e:	b662      	cpsie	i
 800a990:	4718      	bx	r3
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	46c0      	nop			; (mov r8, r8)
 800a996:	46c0      	nop			; (mov r8, r8)
 800a998:	46c0      	nop			; (mov r8, r8)
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	46c0      	nop			; (mov r8, r8)
 800a99e:	46c0      	nop			; (mov r8, r8)

0800a9a0 <pxCurrentTCBConst2>:
 800a9a0:	20000f34 	.word	0x20000f34
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a9a4:	46c0      	nop			; (mov r8, r8)
 800a9a6:	46c0      	nop			; (mov r8, r8)

0800a9a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9ac:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <xPortStartScheduler+0x40>)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	4b0d      	ldr	r3, [pc, #52]	; (800a9e8 <xPortStartScheduler+0x40>)
 800a9b2:	21ff      	movs	r1, #255	; 0xff
 800a9b4:	0409      	lsls	r1, r1, #16
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9ba:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <xPortStartScheduler+0x40>)
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <xPortStartScheduler+0x40>)
 800a9c0:	21ff      	movs	r1, #255	; 0xff
 800a9c2:	0609      	lsls	r1, r1, #24
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9c8:	f000 f898 	bl	800aafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <xPortStartScheduler+0x44>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a9d2:	f7ff ffcd 	bl	800a970 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9d6:	f7fe ffbf 	bl	8009958 <vTaskSwitchContext>
	prvTaskExitError();
 800a9da:	f7ff ffa9 	bl	800a930 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	46c0      	nop			; (mov r8, r8)
 800a9e8:	e000ed20 	.word	0xe000ed20
 800a9ec:	20000010 	.word	0x20000010

0800a9f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9f4:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <vPortYield+0x1c>)
 800a9f6:	2280      	movs	r2, #128	; 0x80
 800a9f8:	0552      	lsls	r2, r2, #21
 800a9fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a9fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800aa00:	f3bf 8f6f 	isb	sy
}
 800aa04:	46c0      	nop			; (mov r8, r8)
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	46c0      	nop			; (mov r8, r8)
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800aa14:	b672      	cpsid	i
	uxCriticalNesting++;
 800aa16:	4b06      	ldr	r3, [pc, #24]	; (800aa30 <vPortEnterCritical+0x20>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <vPortEnterCritical+0x20>)
 800aa1e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800aa20:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800aa24:	f3bf 8f6f 	isb	sy
}
 800aa28:	46c0      	nop			; (mov r8, r8)
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	46c0      	nop			; (mov r8, r8)
 800aa30:	20000010 	.word	0x20000010

0800aa34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa38:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <vPortExitCritical+0x2c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <vPortExitCritical+0x10>
 800aa40:	b672      	cpsid	i
 800aa42:	e7fe      	b.n	800aa42 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800aa44:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <vPortExitCritical+0x2c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	4b05      	ldr	r3, [pc, #20]	; (800aa60 <vPortExitCritical+0x2c>)
 800aa4c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800aa4e:	4b04      	ldr	r3, [pc, #16]	; (800aa60 <vPortExitCritical+0x2c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d100      	bne.n	800aa58 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800aa56:	b662      	cpsie	i
	}
}
 800aa58:	46c0      	nop			; (mov r8, r8)
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	20000010 	.word	0x20000010

0800aa64 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800aa64:	f3ef 8010 	mrs	r0, PRIMASK
 800aa68:	b672      	cpsid	i
 800aa6a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800aa6c:	46c0      	nop			; (mov r8, r8)
 800aa6e:	0018      	movs	r0, r3

0800aa70 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800aa70:	f380 8810 	msr	PRIMASK, r0
 800aa74:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800aa76:	46c0      	nop			; (mov r8, r8)
	...

0800aa80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa80:	f3ef 8009 	mrs	r0, PSP
 800aa84:	4b0e      	ldr	r3, [pc, #56]	; (800aac0 <pxCurrentTCBConst>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	3820      	subs	r0, #32
 800aa8a:	6010      	str	r0, [r2, #0]
 800aa8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aa8e:	4644      	mov	r4, r8
 800aa90:	464d      	mov	r5, r9
 800aa92:	4656      	mov	r6, sl
 800aa94:	465f      	mov	r7, fp
 800aa96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aa98:	b508      	push	{r3, lr}
 800aa9a:	b672      	cpsid	i
 800aa9c:	f7fe ff5c 	bl	8009958 <vTaskSwitchContext>
 800aaa0:	b662      	cpsie	i
 800aaa2:	bc0c      	pop	{r2, r3}
 800aaa4:	6811      	ldr	r1, [r2, #0]
 800aaa6:	6808      	ldr	r0, [r1, #0]
 800aaa8:	3010      	adds	r0, #16
 800aaaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800aaac:	46a0      	mov	r8, r4
 800aaae:	46a9      	mov	r9, r5
 800aab0:	46b2      	mov	sl, r6
 800aab2:	46bb      	mov	fp, r7
 800aab4:	f380 8809 	msr	PSP, r0
 800aab8:	3820      	subs	r0, #32
 800aaba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800aabc:	4718      	bx	r3
 800aabe:	46c0      	nop			; (mov r8, r8)

0800aac0 <pxCurrentTCBConst>:
 800aac0:	20000f34 	.word	0x20000f34
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800aac4:	46c0      	nop			; (mov r8, r8)
 800aac6:	46c0      	nop			; (mov r8, r8)

0800aac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800aace:	f7ff ffc9 	bl	800aa64 <ulSetInterruptMaskFromISR>
 800aad2:	0003      	movs	r3, r0
 800aad4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aad6:	f7fe fe8f 	bl	80097f8 <xTaskIncrementTick>
 800aada:	1e03      	subs	r3, r0, #0
 800aadc:	d003      	beq.n	800aae6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <xPortSysTickHandler+0x30>)
 800aae0:	2280      	movs	r2, #128	; 0x80
 800aae2:	0552      	lsls	r2, r2, #21
 800aae4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	0018      	movs	r0, r3
 800aaea:	f7ff ffc1 	bl	800aa70 <vClearInterruptMaskFromISR>
}
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b002      	add	sp, #8
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	46c0      	nop			; (mov r8, r8)
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <vPortSetupTimerInterrupt+0x38>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <vPortSetupTimerInterrupt+0x3c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	22fa      	movs	r2, #250	; 0xfa
 800ab12:	0091      	lsls	r1, r2, #2
 800ab14:	0018      	movs	r0, r3
 800ab16:	f7f5 fb13 	bl	8000140 <__udivsi3>
 800ab1a:	0003      	movs	r3, r0
 800ab1c:	001a      	movs	r2, r3
 800ab1e:	4b07      	ldr	r3, [pc, #28]	; (800ab3c <vPortSetupTimerInterrupt+0x40>)
 800ab20:	3a01      	subs	r2, #1
 800ab22:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab26:	2207      	movs	r2, #7
 800ab28:	601a      	str	r2, [r3, #0]
}
 800ab2a:	46c0      	nop			; (mov r8, r8)
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	e000e010 	.word	0xe000e010
 800ab34:	e000e018 	.word	0xe000e018
 800ab38:	20000004 	.word	0x20000004
 800ab3c:	e000e014 	.word	0xe000e014

0800ab40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800ab4c:	f7fe fdae 	bl	80096ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab50:	4b4b      	ldr	r3, [pc, #300]	; (800ac80 <pvPortMalloc+0x140>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab58:	f000 f8ec 	bl	800ad34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab5c:	4b49      	ldr	r3, [pc, #292]	; (800ac84 <pvPortMalloc+0x144>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	4013      	ands	r3, r2
 800ab64:	d000      	beq.n	800ab68 <pvPortMalloc+0x28>
 800ab66:	e07e      	b.n	800ac66 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d012      	beq.n	800ab94 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800ab6e:	2208      	movs	r2, #8
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2207      	movs	r2, #7
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	d00a      	beq.n	800ab94 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2207      	movs	r2, #7
 800ab82:	4393      	bics	r3, r2
 800ab84:	3308      	adds	r3, #8
 800ab86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2207      	movs	r2, #7
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	d001      	beq.n	800ab94 <pvPortMalloc+0x54>
 800ab90:	b672      	cpsid	i
 800ab92:	e7fe      	b.n	800ab92 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d065      	beq.n	800ac66 <pvPortMalloc+0x126>
 800ab9a:	4b3b      	ldr	r3, [pc, #236]	; (800ac88 <pvPortMalloc+0x148>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d860      	bhi.n	800ac66 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aba4:	4b39      	ldr	r3, [pc, #228]	; (800ac8c <pvPortMalloc+0x14c>)
 800aba6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800aba8:	4b38      	ldr	r3, [pc, #224]	; (800ac8c <pvPortMalloc+0x14c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abae:	e004      	b.n	800abba <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d903      	bls.n	800abcc <pvPortMalloc+0x8c>
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f1      	bne.n	800abb0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abcc:	4b2c      	ldr	r3, [pc, #176]	; (800ac80 <pvPortMalloc+0x140>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d047      	beq.n	800ac66 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2208      	movs	r2, #8
 800abdc:	189b      	adds	r3, r3, r2
 800abde:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	2308      	movs	r3, #8
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d916      	bls.n	800ac26 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	18d3      	adds	r3, r2, r3
 800abfe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2207      	movs	r2, #7
 800ac04:	4013      	ands	r3, r2
 800ac06:	d001      	beq.n	800ac0c <pvPortMalloc+0xcc>
 800ac08:	b672      	cpsid	i
 800ac0a:	e7fe      	b.n	800ac0a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	1ad2      	subs	r2, r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	0018      	movs	r0, r3
 800ac22:	f000 f8e7 	bl	800adf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac26:	4b18      	ldr	r3, [pc, #96]	; (800ac88 <pvPortMalloc+0x148>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	1ad2      	subs	r2, r2, r3
 800ac30:	4b15      	ldr	r3, [pc, #84]	; (800ac88 <pvPortMalloc+0x148>)
 800ac32:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac34:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <pvPortMalloc+0x148>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <pvPortMalloc+0x150>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d203      	bcs.n	800ac48 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac40:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <pvPortMalloc+0x148>)
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	4b12      	ldr	r3, [pc, #72]	; (800ac90 <pvPortMalloc+0x150>)
 800ac46:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <pvPortMalloc+0x144>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	431a      	orrs	r2, r3
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <pvPortMalloc+0x154>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	1c5a      	adds	r2, r3, #1
 800ac62:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <pvPortMalloc+0x154>)
 800ac64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac66:	f7fe fd2d 	bl	80096c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2207      	movs	r2, #7
 800ac6e:	4013      	ands	r3, r2
 800ac70:	d001      	beq.n	800ac76 <pvPortMalloc+0x136>
 800ac72:	b672      	cpsid	i
 800ac74:	e7fe      	b.n	800ac74 <pvPortMalloc+0x134>
	return pvReturn;
 800ac76:	68fb      	ldr	r3, [r7, #12]
}
 800ac78:	0018      	movs	r0, r3
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	b006      	add	sp, #24
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20002d68 	.word	0x20002d68
 800ac84:	20002d7c 	.word	0x20002d7c
 800ac88:	20002d6c 	.word	0x20002d6c
 800ac8c:	20002d60 	.word	0x20002d60
 800ac90:	20002d70 	.word	0x20002d70
 800ac94:	20002d74 	.word	0x20002d74

0800ac98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d03a      	beq.n	800ad20 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acaa:	2308      	movs	r3, #8
 800acac:	425b      	negs	r3, r3
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	18d3      	adds	r3, r2, r3
 800acb2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	4b1a      	ldr	r3, [pc, #104]	; (800ad28 <vPortFree+0x90>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4013      	ands	r3, r2
 800acc2:	d101      	bne.n	800acc8 <vPortFree+0x30>
 800acc4:	b672      	cpsid	i
 800acc6:	e7fe      	b.n	800acc6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <vPortFree+0x3c>
 800acd0:	b672      	cpsid	i
 800acd2:	e7fe      	b.n	800acd2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <vPortFree+0x90>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4013      	ands	r3, r2
 800acde:	d01f      	beq.n	800ad20 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d11b      	bne.n	800ad20 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <vPortFree+0x90>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	43db      	mvns	r3, r3
 800acf2:	401a      	ands	r2, r3
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800acf8:	f7fe fcd8 	bl	80096ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <vPortFree+0x94>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	18d2      	adds	r2, r2, r3
 800ad06:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <vPortFree+0x94>)
 800ad08:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	f000 f871 	bl	800adf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <vPortFree+0x98>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	1c5a      	adds	r2, r3, #1
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <vPortFree+0x98>)
 800ad1a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800ad1c:	f7fe fcd2 	bl	80096c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad20:	46c0      	nop			; (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b004      	add	sp, #16
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20002d7c 	.word	0x20002d7c
 800ad2c:	20002d6c 	.word	0x20002d6c
 800ad30:	20002d78 	.word	0x20002d78

0800ad34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad3a:	23c0      	movs	r3, #192	; 0xc0
 800ad3c:	015b      	lsls	r3, r3, #5
 800ad3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad40:	4b26      	ldr	r3, [pc, #152]	; (800addc <prvHeapInit+0xa8>)
 800ad42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2207      	movs	r2, #7
 800ad48:	4013      	ands	r3, r2
 800ad4a:	d00c      	beq.n	800ad66 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3307      	adds	r3, #7
 800ad50:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2207      	movs	r2, #7
 800ad56:	4393      	bics	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	1ad2      	subs	r2, r2, r3
 800ad60:	4b1e      	ldr	r3, [pc, #120]	; (800addc <prvHeapInit+0xa8>)
 800ad62:	18d3      	adds	r3, r2, r3
 800ad64:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad6a:	4b1d      	ldr	r3, [pc, #116]	; (800ade0 <prvHeapInit+0xac>)
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad70:	4b1b      	ldr	r3, [pc, #108]	; (800ade0 <prvHeapInit+0xac>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	18d3      	adds	r3, r2, r3
 800ad7c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad7e:	2208      	movs	r2, #8
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2207      	movs	r2, #7
 800ad8a:	4393      	bics	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4b14      	ldr	r3, [pc, #80]	; (800ade4 <prvHeapInit+0xb0>)
 800ad92:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800ad94:	4b13      	ldr	r3, [pc, #76]	; (800ade4 <prvHeapInit+0xb0>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad9c:	4b11      	ldr	r3, [pc, #68]	; (800ade4 <prvHeapInit+0xb0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	1ad2      	subs	r2, r2, r3
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adb2:	4b0c      	ldr	r3, [pc, #48]	; (800ade4 <prvHeapInit+0xb0>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <prvHeapInit+0xb4>)
 800adc0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	4b09      	ldr	r3, [pc, #36]	; (800adec <prvHeapInit+0xb8>)
 800adc8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adca:	4b09      	ldr	r3, [pc, #36]	; (800adf0 <prvHeapInit+0xbc>)
 800adcc:	2280      	movs	r2, #128	; 0x80
 800adce:	0612      	lsls	r2, r2, #24
 800add0:	601a      	str	r2, [r3, #0]
}
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	46bd      	mov	sp, r7
 800add6:	b004      	add	sp, #16
 800add8:	bd80      	pop	{r7, pc}
 800adda:	46c0      	nop			; (mov r8, r8)
 800addc:	20001560 	.word	0x20001560
 800ade0:	20002d60 	.word	0x20002d60
 800ade4:	20002d68 	.word	0x20002d68
 800ade8:	20002d70 	.word	0x20002d70
 800adec:	20002d6c 	.word	0x20002d6c
 800adf0:	20002d7c 	.word	0x20002d7c

0800adf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800adfc:	4b27      	ldr	r3, [pc, #156]	; (800ae9c <prvInsertBlockIntoFreeList+0xa8>)
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e002      	b.n	800ae08 <prvInsertBlockIntoFreeList+0x14>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d8f7      	bhi.n	800ae02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	18d3      	adds	r3, r2, r3
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d108      	bne.n	800ae36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	18d2      	adds	r2, r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	18d2      	adds	r2, r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d118      	bne.n	800ae7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4b14      	ldr	r3, [pc, #80]	; (800aea0 <prvInsertBlockIntoFreeList+0xac>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d00d      	beq.n	800ae72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	18d2      	adds	r2, r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	e008      	b.n	800ae84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <prvInsertBlockIntoFreeList+0xac>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
 800ae7a:	e003      	b.n	800ae84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d002      	beq.n	800ae92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	46bd      	mov	sp, r7
 800ae96:	b004      	add	sp, #16
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	46c0      	nop			; (mov r8, r8)
 800ae9c:	20002d60 	.word	0x20002d60
 800aea0:	20002d68 	.word	0x20002d68

0800aea4 <__errno>:
 800aea4:	4b01      	ldr	r3, [pc, #4]	; (800aeac <__errno+0x8>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	4770      	bx	lr
 800aeaa:	46c0      	nop			; (mov r8, r8)
 800aeac:	20000014 	.word	0x20000014

0800aeb0 <std>:
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	0004      	movs	r4, r0
 800aeb6:	6003      	str	r3, [r0, #0]
 800aeb8:	6043      	str	r3, [r0, #4]
 800aeba:	6083      	str	r3, [r0, #8]
 800aebc:	8181      	strh	r1, [r0, #12]
 800aebe:	6643      	str	r3, [r0, #100]	; 0x64
 800aec0:	0019      	movs	r1, r3
 800aec2:	81c2      	strh	r2, [r0, #14]
 800aec4:	6103      	str	r3, [r0, #16]
 800aec6:	6143      	str	r3, [r0, #20]
 800aec8:	6183      	str	r3, [r0, #24]
 800aeca:	2208      	movs	r2, #8
 800aecc:	305c      	adds	r0, #92	; 0x5c
 800aece:	f000 f921 	bl	800b114 <memset>
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <std+0x38>)
 800aed4:	6224      	str	r4, [r4, #32]
 800aed6:	6263      	str	r3, [r4, #36]	; 0x24
 800aed8:	4b04      	ldr	r3, [pc, #16]	; (800aeec <std+0x3c>)
 800aeda:	62a3      	str	r3, [r4, #40]	; 0x28
 800aedc:	4b04      	ldr	r3, [pc, #16]	; (800aef0 <std+0x40>)
 800aede:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aee0:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <std+0x44>)
 800aee2:	6323      	str	r3, [r4, #48]	; 0x30
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	0800bc7d 	.word	0x0800bc7d
 800aeec:	0800bca5 	.word	0x0800bca5
 800aef0:	0800bcdd 	.word	0x0800bcdd
 800aef4:	0800bd09 	.word	0x0800bd09

0800aef8 <_cleanup_r>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	4902      	ldr	r1, [pc, #8]	; (800af04 <_cleanup_r+0xc>)
 800aefc:	f000 f8ba 	bl	800b074 <_fwalk_reent>
 800af00:	bd10      	pop	{r4, pc}
 800af02:	46c0      	nop			; (mov r8, r8)
 800af04:	0800cbc5 	.word	0x0800cbc5

0800af08 <__sfmoreglue>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	2568      	movs	r5, #104	; 0x68
 800af0c:	1e4a      	subs	r2, r1, #1
 800af0e:	4355      	muls	r5, r2
 800af10:	000e      	movs	r6, r1
 800af12:	0029      	movs	r1, r5
 800af14:	3174      	adds	r1, #116	; 0x74
 800af16:	f000 f927 	bl	800b168 <_malloc_r>
 800af1a:	1e04      	subs	r4, r0, #0
 800af1c:	d008      	beq.n	800af30 <__sfmoreglue+0x28>
 800af1e:	2100      	movs	r1, #0
 800af20:	002a      	movs	r2, r5
 800af22:	6001      	str	r1, [r0, #0]
 800af24:	6046      	str	r6, [r0, #4]
 800af26:	300c      	adds	r0, #12
 800af28:	60a0      	str	r0, [r4, #8]
 800af2a:	3268      	adds	r2, #104	; 0x68
 800af2c:	f000 f8f2 	bl	800b114 <memset>
 800af30:	0020      	movs	r0, r4
 800af32:	bd70      	pop	{r4, r5, r6, pc}

0800af34 <__sfp_lock_acquire>:
 800af34:	b510      	push	{r4, lr}
 800af36:	4802      	ldr	r0, [pc, #8]	; (800af40 <__sfp_lock_acquire+0xc>)
 800af38:	f000 f8e1 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800af3c:	bd10      	pop	{r4, pc}
 800af3e:	46c0      	nop			; (mov r8, r8)
 800af40:	20002d81 	.word	0x20002d81

0800af44 <__sfp_lock_release>:
 800af44:	b510      	push	{r4, lr}
 800af46:	4802      	ldr	r0, [pc, #8]	; (800af50 <__sfp_lock_release+0xc>)
 800af48:	f000 f8da 	bl	800b100 <__retarget_lock_release_recursive>
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	20002d81 	.word	0x20002d81

0800af54 <__sinit_lock_acquire>:
 800af54:	b510      	push	{r4, lr}
 800af56:	4802      	ldr	r0, [pc, #8]	; (800af60 <__sinit_lock_acquire+0xc>)
 800af58:	f000 f8d1 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	46c0      	nop			; (mov r8, r8)
 800af60:	20002d82 	.word	0x20002d82

0800af64 <__sinit_lock_release>:
 800af64:	b510      	push	{r4, lr}
 800af66:	4802      	ldr	r0, [pc, #8]	; (800af70 <__sinit_lock_release+0xc>)
 800af68:	f000 f8ca 	bl	800b100 <__retarget_lock_release_recursive>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	46c0      	nop			; (mov r8, r8)
 800af70:	20002d82 	.word	0x20002d82

0800af74 <__sinit>:
 800af74:	b513      	push	{r0, r1, r4, lr}
 800af76:	0004      	movs	r4, r0
 800af78:	f7ff ffec 	bl	800af54 <__sinit_lock_acquire>
 800af7c:	69a3      	ldr	r3, [r4, #24]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <__sinit+0x14>
 800af82:	f7ff ffef 	bl	800af64 <__sinit_lock_release>
 800af86:	bd13      	pop	{r0, r1, r4, pc}
 800af88:	64a3      	str	r3, [r4, #72]	; 0x48
 800af8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800af8c:	6523      	str	r3, [r4, #80]	; 0x50
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <__sinit+0x68>)
 800af90:	4a13      	ldr	r2, [pc, #76]	; (800afe0 <__sinit+0x6c>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	62a2      	str	r2, [r4, #40]	; 0x28
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	42a3      	cmp	r3, r4
 800af9a:	d101      	bne.n	800afa0 <__sinit+0x2c>
 800af9c:	2301      	movs	r3, #1
 800af9e:	61a3      	str	r3, [r4, #24]
 800afa0:	0020      	movs	r0, r4
 800afa2:	f000 f81f 	bl	800afe4 <__sfp>
 800afa6:	6060      	str	r0, [r4, #4]
 800afa8:	0020      	movs	r0, r4
 800afaa:	f000 f81b 	bl	800afe4 <__sfp>
 800afae:	60a0      	str	r0, [r4, #8]
 800afb0:	0020      	movs	r0, r4
 800afb2:	f000 f817 	bl	800afe4 <__sfp>
 800afb6:	2200      	movs	r2, #0
 800afb8:	2104      	movs	r1, #4
 800afba:	60e0      	str	r0, [r4, #12]
 800afbc:	6860      	ldr	r0, [r4, #4]
 800afbe:	f7ff ff77 	bl	800aeb0 <std>
 800afc2:	2201      	movs	r2, #1
 800afc4:	2109      	movs	r1, #9
 800afc6:	68a0      	ldr	r0, [r4, #8]
 800afc8:	f7ff ff72 	bl	800aeb0 <std>
 800afcc:	2202      	movs	r2, #2
 800afce:	2112      	movs	r1, #18
 800afd0:	68e0      	ldr	r0, [r4, #12]
 800afd2:	f7ff ff6d 	bl	800aeb0 <std>
 800afd6:	2301      	movs	r3, #1
 800afd8:	61a3      	str	r3, [r4, #24]
 800afda:	e7d2      	b.n	800af82 <__sinit+0xe>
 800afdc:	0800e314 	.word	0x0800e314
 800afe0:	0800aef9 	.word	0x0800aef9

0800afe4 <__sfp>:
 800afe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe6:	0007      	movs	r7, r0
 800afe8:	f7ff ffa4 	bl	800af34 <__sfp_lock_acquire>
 800afec:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <__sfp+0x88>)
 800afee:	681e      	ldr	r6, [r3, #0]
 800aff0:	69b3      	ldr	r3, [r6, #24]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <__sfp+0x18>
 800aff6:	0030      	movs	r0, r6
 800aff8:	f7ff ffbc 	bl	800af74 <__sinit>
 800affc:	3648      	adds	r6, #72	; 0x48
 800affe:	68b4      	ldr	r4, [r6, #8]
 800b000:	6873      	ldr	r3, [r6, #4]
 800b002:	3b01      	subs	r3, #1
 800b004:	d504      	bpl.n	800b010 <__sfp+0x2c>
 800b006:	6833      	ldr	r3, [r6, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d022      	beq.n	800b052 <__sfp+0x6e>
 800b00c:	6836      	ldr	r6, [r6, #0]
 800b00e:	e7f6      	b.n	800affe <__sfp+0x1a>
 800b010:	220c      	movs	r2, #12
 800b012:	5ea5      	ldrsh	r5, [r4, r2]
 800b014:	2d00      	cmp	r5, #0
 800b016:	d11a      	bne.n	800b04e <__sfp+0x6a>
 800b018:	0020      	movs	r0, r4
 800b01a:	4b15      	ldr	r3, [pc, #84]	; (800b070 <__sfp+0x8c>)
 800b01c:	3058      	adds	r0, #88	; 0x58
 800b01e:	60e3      	str	r3, [r4, #12]
 800b020:	6665      	str	r5, [r4, #100]	; 0x64
 800b022:	f000 f86b 	bl	800b0fc <__retarget_lock_init_recursive>
 800b026:	f7ff ff8d 	bl	800af44 <__sfp_lock_release>
 800b02a:	0020      	movs	r0, r4
 800b02c:	2208      	movs	r2, #8
 800b02e:	0029      	movs	r1, r5
 800b030:	6025      	str	r5, [r4, #0]
 800b032:	60a5      	str	r5, [r4, #8]
 800b034:	6065      	str	r5, [r4, #4]
 800b036:	6125      	str	r5, [r4, #16]
 800b038:	6165      	str	r5, [r4, #20]
 800b03a:	61a5      	str	r5, [r4, #24]
 800b03c:	305c      	adds	r0, #92	; 0x5c
 800b03e:	f000 f869 	bl	800b114 <memset>
 800b042:	6365      	str	r5, [r4, #52]	; 0x34
 800b044:	63a5      	str	r5, [r4, #56]	; 0x38
 800b046:	64a5      	str	r5, [r4, #72]	; 0x48
 800b048:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b04a:	0020      	movs	r0, r4
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04e:	3468      	adds	r4, #104	; 0x68
 800b050:	e7d7      	b.n	800b002 <__sfp+0x1e>
 800b052:	2104      	movs	r1, #4
 800b054:	0038      	movs	r0, r7
 800b056:	f7ff ff57 	bl	800af08 <__sfmoreglue>
 800b05a:	1e04      	subs	r4, r0, #0
 800b05c:	6030      	str	r0, [r6, #0]
 800b05e:	d1d5      	bne.n	800b00c <__sfp+0x28>
 800b060:	f7ff ff70 	bl	800af44 <__sfp_lock_release>
 800b064:	230c      	movs	r3, #12
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	e7ef      	b.n	800b04a <__sfp+0x66>
 800b06a:	46c0      	nop			; (mov r8, r8)
 800b06c:	0800e314 	.word	0x0800e314
 800b070:	ffff0001 	.word	0xffff0001

0800b074 <_fwalk_reent>:
 800b074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b076:	0004      	movs	r4, r0
 800b078:	0006      	movs	r6, r0
 800b07a:	2700      	movs	r7, #0
 800b07c:	9101      	str	r1, [sp, #4]
 800b07e:	3448      	adds	r4, #72	; 0x48
 800b080:	6863      	ldr	r3, [r4, #4]
 800b082:	68a5      	ldr	r5, [r4, #8]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	3b01      	subs	r3, #1
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	d504      	bpl.n	800b098 <_fwalk_reent+0x24>
 800b08e:	6824      	ldr	r4, [r4, #0]
 800b090:	2c00      	cmp	r4, #0
 800b092:	d1f5      	bne.n	800b080 <_fwalk_reent+0xc>
 800b094:	0038      	movs	r0, r7
 800b096:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b098:	89ab      	ldrh	r3, [r5, #12]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d908      	bls.n	800b0b0 <_fwalk_reent+0x3c>
 800b09e:	220e      	movs	r2, #14
 800b0a0:	5eab      	ldrsh	r3, [r5, r2]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	d004      	beq.n	800b0b0 <_fwalk_reent+0x3c>
 800b0a6:	0029      	movs	r1, r5
 800b0a8:	0030      	movs	r0, r6
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	4798      	blx	r3
 800b0ae:	4307      	orrs	r7, r0
 800b0b0:	3568      	adds	r5, #104	; 0x68
 800b0b2:	e7e8      	b.n	800b086 <_fwalk_reent+0x12>

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	4d0c      	ldr	r5, [pc, #48]	; (800b0ec <__libc_init_array+0x38>)
 800b0ba:	4c0d      	ldr	r4, [pc, #52]	; (800b0f0 <__libc_init_array+0x3c>)
 800b0bc:	1b64      	subs	r4, r4, r5
 800b0be:	10a4      	asrs	r4, r4, #2
 800b0c0:	42a6      	cmp	r6, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	2600      	movs	r6, #0
 800b0c6:	f002 ff2d 	bl	800df24 <_init>
 800b0ca:	4d0a      	ldr	r5, [pc, #40]	; (800b0f4 <__libc_init_array+0x40>)
 800b0cc:	4c0a      	ldr	r4, [pc, #40]	; (800b0f8 <__libc_init_array+0x44>)
 800b0ce:	1b64      	subs	r4, r4, r5
 800b0d0:	10a4      	asrs	r4, r4, #2
 800b0d2:	42a6      	cmp	r6, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	00b3      	lsls	r3, r6, #2
 800b0da:	58eb      	ldr	r3, [r5, r3]
 800b0dc:	4798      	blx	r3
 800b0de:	3601      	adds	r6, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	00b3      	lsls	r3, r6, #2
 800b0e4:	58eb      	ldr	r3, [r5, r3]
 800b0e6:	4798      	blx	r3
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800e694 	.word	0x0800e694
 800b0f0:	0800e694 	.word	0x0800e694
 800b0f4:	0800e694 	.word	0x0800e694
 800b0f8:	0800e698 	.word	0x0800e698

0800b0fc <__retarget_lock_init_recursive>:
 800b0fc:	4770      	bx	lr

0800b0fe <__retarget_lock_acquire_recursive>:
 800b0fe:	4770      	bx	lr

0800b100 <__retarget_lock_release_recursive>:
 800b100:	4770      	bx	lr

0800b102 <memcpy>:
 800b102:	2300      	movs	r3, #0
 800b104:	b510      	push	{r4, lr}
 800b106:	429a      	cmp	r2, r3
 800b108:	d100      	bne.n	800b10c <memcpy+0xa>
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	5ccc      	ldrb	r4, [r1, r3]
 800b10e:	54c4      	strb	r4, [r0, r3]
 800b110:	3301      	adds	r3, #1
 800b112:	e7f8      	b.n	800b106 <memcpy+0x4>

0800b114 <memset>:
 800b114:	0003      	movs	r3, r0
 800b116:	1882      	adds	r2, r0, r2
 800b118:	4293      	cmp	r3, r2
 800b11a:	d100      	bne.n	800b11e <memset+0xa>
 800b11c:	4770      	bx	lr
 800b11e:	7019      	strb	r1, [r3, #0]
 800b120:	3301      	adds	r3, #1
 800b122:	e7f9      	b.n	800b118 <memset+0x4>

0800b124 <sbrk_aligned>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	4e0f      	ldr	r6, [pc, #60]	; (800b164 <sbrk_aligned+0x40>)
 800b128:	000d      	movs	r5, r1
 800b12a:	6831      	ldr	r1, [r6, #0]
 800b12c:	0004      	movs	r4, r0
 800b12e:	2900      	cmp	r1, #0
 800b130:	d102      	bne.n	800b138 <sbrk_aligned+0x14>
 800b132:	f000 fd71 	bl	800bc18 <_sbrk_r>
 800b136:	6030      	str	r0, [r6, #0]
 800b138:	0029      	movs	r1, r5
 800b13a:	0020      	movs	r0, r4
 800b13c:	f000 fd6c 	bl	800bc18 <_sbrk_r>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d00a      	beq.n	800b15a <sbrk_aligned+0x36>
 800b144:	2303      	movs	r3, #3
 800b146:	1cc5      	adds	r5, r0, #3
 800b148:	439d      	bics	r5, r3
 800b14a:	42a8      	cmp	r0, r5
 800b14c:	d007      	beq.n	800b15e <sbrk_aligned+0x3a>
 800b14e:	1a29      	subs	r1, r5, r0
 800b150:	0020      	movs	r0, r4
 800b152:	f000 fd61 	bl	800bc18 <_sbrk_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d101      	bne.n	800b15e <sbrk_aligned+0x3a>
 800b15a:	2501      	movs	r5, #1
 800b15c:	426d      	negs	r5, r5
 800b15e:	0028      	movs	r0, r5
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	46c0      	nop			; (mov r8, r8)
 800b164:	20002d88 	.word	0x20002d88

0800b168 <_malloc_r>:
 800b168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16a:	2203      	movs	r2, #3
 800b16c:	1ccb      	adds	r3, r1, #3
 800b16e:	4393      	bics	r3, r2
 800b170:	3308      	adds	r3, #8
 800b172:	0006      	movs	r6, r0
 800b174:	001f      	movs	r7, r3
 800b176:	2b0c      	cmp	r3, #12
 800b178:	d232      	bcs.n	800b1e0 <_malloc_r+0x78>
 800b17a:	270c      	movs	r7, #12
 800b17c:	42b9      	cmp	r1, r7
 800b17e:	d831      	bhi.n	800b1e4 <_malloc_r+0x7c>
 800b180:	0030      	movs	r0, r6
 800b182:	f001 fd8d 	bl	800cca0 <__malloc_lock>
 800b186:	4d32      	ldr	r5, [pc, #200]	; (800b250 <_malloc_r+0xe8>)
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	001c      	movs	r4, r3
 800b18c:	2c00      	cmp	r4, #0
 800b18e:	d12e      	bne.n	800b1ee <_malloc_r+0x86>
 800b190:	0039      	movs	r1, r7
 800b192:	0030      	movs	r0, r6
 800b194:	f7ff ffc6 	bl	800b124 <sbrk_aligned>
 800b198:	0004      	movs	r4, r0
 800b19a:	1c43      	adds	r3, r0, #1
 800b19c:	d11e      	bne.n	800b1dc <_malloc_r+0x74>
 800b19e:	682c      	ldr	r4, [r5, #0]
 800b1a0:	0025      	movs	r5, r4
 800b1a2:	2d00      	cmp	r5, #0
 800b1a4:	d14a      	bne.n	800b23c <_malloc_r+0xd4>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	0029      	movs	r1, r5
 800b1aa:	18e3      	adds	r3, r4, r3
 800b1ac:	0030      	movs	r0, r6
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	f000 fd32 	bl	800bc18 <_sbrk_r>
 800b1b4:	9b01      	ldr	r3, [sp, #4]
 800b1b6:	4283      	cmp	r3, r0
 800b1b8:	d143      	bne.n	800b242 <_malloc_r+0xda>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	3703      	adds	r7, #3
 800b1be:	1aff      	subs	r7, r7, r3
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	439f      	bics	r7, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	2f0c      	cmp	r7, #12
 800b1c8:	d200      	bcs.n	800b1cc <_malloc_r+0x64>
 800b1ca:	270c      	movs	r7, #12
 800b1cc:	0039      	movs	r1, r7
 800b1ce:	0030      	movs	r0, r6
 800b1d0:	f7ff ffa8 	bl	800b124 <sbrk_aligned>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d034      	beq.n	800b242 <_malloc_r+0xda>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	19df      	adds	r7, r3, r7
 800b1dc:	6027      	str	r7, [r4, #0]
 800b1de:	e013      	b.n	800b208 <_malloc_r+0xa0>
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	dacb      	bge.n	800b17c <_malloc_r+0x14>
 800b1e4:	230c      	movs	r3, #12
 800b1e6:	2500      	movs	r5, #0
 800b1e8:	6033      	str	r3, [r6, #0]
 800b1ea:	0028      	movs	r0, r5
 800b1ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1ee:	6822      	ldr	r2, [r4, #0]
 800b1f0:	1bd1      	subs	r1, r2, r7
 800b1f2:	d420      	bmi.n	800b236 <_malloc_r+0xce>
 800b1f4:	290b      	cmp	r1, #11
 800b1f6:	d917      	bls.n	800b228 <_malloc_r+0xc0>
 800b1f8:	19e2      	adds	r2, r4, r7
 800b1fa:	6027      	str	r7, [r4, #0]
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	d111      	bne.n	800b224 <_malloc_r+0xbc>
 800b200:	602a      	str	r2, [r5, #0]
 800b202:	6863      	ldr	r3, [r4, #4]
 800b204:	6011      	str	r1, [r2, #0]
 800b206:	6053      	str	r3, [r2, #4]
 800b208:	0030      	movs	r0, r6
 800b20a:	0025      	movs	r5, r4
 800b20c:	f001 fd50 	bl	800ccb0 <__malloc_unlock>
 800b210:	2207      	movs	r2, #7
 800b212:	350b      	adds	r5, #11
 800b214:	1d23      	adds	r3, r4, #4
 800b216:	4395      	bics	r5, r2
 800b218:	1aea      	subs	r2, r5, r3
 800b21a:	429d      	cmp	r5, r3
 800b21c:	d0e5      	beq.n	800b1ea <_malloc_r+0x82>
 800b21e:	1b5b      	subs	r3, r3, r5
 800b220:	50a3      	str	r3, [r4, r2]
 800b222:	e7e2      	b.n	800b1ea <_malloc_r+0x82>
 800b224:	605a      	str	r2, [r3, #4]
 800b226:	e7ec      	b.n	800b202 <_malloc_r+0x9a>
 800b228:	6862      	ldr	r2, [r4, #4]
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	d101      	bne.n	800b232 <_malloc_r+0xca>
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	e7ea      	b.n	800b208 <_malloc_r+0xa0>
 800b232:	605a      	str	r2, [r3, #4]
 800b234:	e7e8      	b.n	800b208 <_malloc_r+0xa0>
 800b236:	0023      	movs	r3, r4
 800b238:	6864      	ldr	r4, [r4, #4]
 800b23a:	e7a7      	b.n	800b18c <_malloc_r+0x24>
 800b23c:	002c      	movs	r4, r5
 800b23e:	686d      	ldr	r5, [r5, #4]
 800b240:	e7af      	b.n	800b1a2 <_malloc_r+0x3a>
 800b242:	230c      	movs	r3, #12
 800b244:	0030      	movs	r0, r6
 800b246:	6033      	str	r3, [r6, #0]
 800b248:	f001 fd32 	bl	800ccb0 <__malloc_unlock>
 800b24c:	e7cd      	b.n	800b1ea <_malloc_r+0x82>
 800b24e:	46c0      	nop			; (mov r8, r8)
 800b250:	20002d84 	.word	0x20002d84

0800b254 <__cvt>:
 800b254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b256:	001e      	movs	r6, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	0014      	movs	r4, r2
 800b25c:	b08b      	sub	sp, #44	; 0x2c
 800b25e:	429e      	cmp	r6, r3
 800b260:	da04      	bge.n	800b26c <__cvt+0x18>
 800b262:	2180      	movs	r1, #128	; 0x80
 800b264:	0609      	lsls	r1, r1, #24
 800b266:	1873      	adds	r3, r6, r1
 800b268:	001e      	movs	r6, r3
 800b26a:	232d      	movs	r3, #45	; 0x2d
 800b26c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b26e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b270:	7013      	strb	r3, [r2, #0]
 800b272:	2320      	movs	r3, #32
 800b274:	2203      	movs	r2, #3
 800b276:	439f      	bics	r7, r3
 800b278:	2f46      	cmp	r7, #70	; 0x46
 800b27a:	d007      	beq.n	800b28c <__cvt+0x38>
 800b27c:	003b      	movs	r3, r7
 800b27e:	3b45      	subs	r3, #69	; 0x45
 800b280:	4259      	negs	r1, r3
 800b282:	414b      	adcs	r3, r1
 800b284:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b286:	3a01      	subs	r2, #1
 800b288:	18cb      	adds	r3, r1, r3
 800b28a:	9310      	str	r3, [sp, #64]	; 0x40
 800b28c:	ab09      	add	r3, sp, #36	; 0x24
 800b28e:	9304      	str	r3, [sp, #16]
 800b290:	ab08      	add	r3, sp, #32
 800b292:	9303      	str	r3, [sp, #12]
 800b294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b296:	9200      	str	r2, [sp, #0]
 800b298:	9302      	str	r3, [sp, #8]
 800b29a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b29c:	0022      	movs	r2, r4
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	0033      	movs	r3, r6
 800b2a2:	f000 fde9 	bl	800be78 <_dtoa_r>
 800b2a6:	0005      	movs	r5, r0
 800b2a8:	2f47      	cmp	r7, #71	; 0x47
 800b2aa:	d102      	bne.n	800b2b2 <__cvt+0x5e>
 800b2ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ae:	07db      	lsls	r3, r3, #31
 800b2b0:	d528      	bpl.n	800b304 <__cvt+0xb0>
 800b2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b2b4:	18eb      	adds	r3, r5, r3
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	2f46      	cmp	r7, #70	; 0x46
 800b2ba:	d114      	bne.n	800b2e6 <__cvt+0x92>
 800b2bc:	782b      	ldrb	r3, [r5, #0]
 800b2be:	2b30      	cmp	r3, #48	; 0x30
 800b2c0:	d10c      	bne.n	800b2dc <__cvt+0x88>
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	0020      	movs	r0, r4
 800b2c8:	0031      	movs	r1, r6
 800b2ca:	f7f5 f8bf 	bl	800044c <__aeabi_dcmpeq>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d104      	bne.n	800b2dc <__cvt+0x88>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2d6:	1a9b      	subs	r3, r3, r2
 800b2d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2de:	9a07      	ldr	r2, [sp, #28]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	18d3      	adds	r3, r2, r3
 800b2e4:	9307      	str	r3, [sp, #28]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	0020      	movs	r0, r4
 800b2ec:	0031      	movs	r1, r6
 800b2ee:	f7f5 f8ad 	bl	800044c <__aeabi_dcmpeq>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d001      	beq.n	800b2fa <__cvt+0xa6>
 800b2f6:	9b07      	ldr	r3, [sp, #28]
 800b2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2fa:	2230      	movs	r2, #48	; 0x30
 800b2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fe:	9907      	ldr	r1, [sp, #28]
 800b300:	428b      	cmp	r3, r1
 800b302:	d306      	bcc.n	800b312 <__cvt+0xbe>
 800b304:	0028      	movs	r0, r5
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b30a:	1b5b      	subs	r3, r3, r5
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	b00b      	add	sp, #44	; 0x2c
 800b310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b312:	1c59      	adds	r1, r3, #1
 800b314:	9109      	str	r1, [sp, #36]	; 0x24
 800b316:	701a      	strb	r2, [r3, #0]
 800b318:	e7f0      	b.n	800b2fc <__cvt+0xa8>

0800b31a <__exponent>:
 800b31a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b31c:	1c83      	adds	r3, r0, #2
 800b31e:	b087      	sub	sp, #28
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	0005      	movs	r5, r0
 800b324:	000c      	movs	r4, r1
 800b326:	232b      	movs	r3, #43	; 0x2b
 800b328:	7002      	strb	r2, [r0, #0]
 800b32a:	2900      	cmp	r1, #0
 800b32c:	da01      	bge.n	800b332 <__exponent+0x18>
 800b32e:	424c      	negs	r4, r1
 800b330:	3302      	adds	r3, #2
 800b332:	706b      	strb	r3, [r5, #1]
 800b334:	2c09      	cmp	r4, #9
 800b336:	dd31      	ble.n	800b39c <__exponent+0x82>
 800b338:	270a      	movs	r7, #10
 800b33a:	ab04      	add	r3, sp, #16
 800b33c:	1dde      	adds	r6, r3, #7
 800b33e:	0020      	movs	r0, r4
 800b340:	0039      	movs	r1, r7
 800b342:	9601      	str	r6, [sp, #4]
 800b344:	f7f5 f86c 	bl	8000420 <__aeabi_idivmod>
 800b348:	3e01      	subs	r6, #1
 800b34a:	3130      	adds	r1, #48	; 0x30
 800b34c:	0020      	movs	r0, r4
 800b34e:	7031      	strb	r1, [r6, #0]
 800b350:	0039      	movs	r1, r7
 800b352:	9402      	str	r4, [sp, #8]
 800b354:	f7f4 ff7e 	bl	8000254 <__divsi3>
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	0004      	movs	r4, r0
 800b35c:	2b63      	cmp	r3, #99	; 0x63
 800b35e:	dcee      	bgt.n	800b33e <__exponent+0x24>
 800b360:	9b01      	ldr	r3, [sp, #4]
 800b362:	3430      	adds	r4, #48	; 0x30
 800b364:	1e9a      	subs	r2, r3, #2
 800b366:	0013      	movs	r3, r2
 800b368:	9903      	ldr	r1, [sp, #12]
 800b36a:	7014      	strb	r4, [r2, #0]
 800b36c:	a804      	add	r0, sp, #16
 800b36e:	3007      	adds	r0, #7
 800b370:	4298      	cmp	r0, r3
 800b372:	d80e      	bhi.n	800b392 <__exponent+0x78>
 800b374:	ab04      	add	r3, sp, #16
 800b376:	3307      	adds	r3, #7
 800b378:	2000      	movs	r0, #0
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d804      	bhi.n	800b388 <__exponent+0x6e>
 800b37e:	ab04      	add	r3, sp, #16
 800b380:	3009      	adds	r0, #9
 800b382:	18c0      	adds	r0, r0, r3
 800b384:	9b01      	ldr	r3, [sp, #4]
 800b386:	1ac0      	subs	r0, r0, r3
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	1818      	adds	r0, r3, r0
 800b38c:	1b40      	subs	r0, r0, r5
 800b38e:	b007      	add	sp, #28
 800b390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b392:	7818      	ldrb	r0, [r3, #0]
 800b394:	3301      	adds	r3, #1
 800b396:	7008      	strb	r0, [r1, #0]
 800b398:	3101      	adds	r1, #1
 800b39a:	e7e7      	b.n	800b36c <__exponent+0x52>
 800b39c:	2330      	movs	r3, #48	; 0x30
 800b39e:	18e4      	adds	r4, r4, r3
 800b3a0:	70ab      	strb	r3, [r5, #2]
 800b3a2:	1d28      	adds	r0, r5, #4
 800b3a4:	70ec      	strb	r4, [r5, #3]
 800b3a6:	e7f1      	b.n	800b38c <__exponent+0x72>

0800b3a8 <_printf_float>:
 800b3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3aa:	b095      	sub	sp, #84	; 0x54
 800b3ac:	000c      	movs	r4, r1
 800b3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b3b0:	001e      	movs	r6, r3
 800b3b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b3b4:	0007      	movs	r7, r0
 800b3b6:	f001 fc45 	bl	800cc44 <_localeconv_r>
 800b3ba:	6803      	ldr	r3, [r0, #0]
 800b3bc:	0018      	movs	r0, r3
 800b3be:	930c      	str	r3, [sp, #48]	; 0x30
 800b3c0:	f7f4 fea2 	bl	8000108 <strlen>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9312      	str	r3, [sp, #72]	; 0x48
 800b3c8:	7e23      	ldrb	r3, [r4, #24]
 800b3ca:	2207      	movs	r2, #7
 800b3cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	900e      	str	r0, [sp, #56]	; 0x38
 800b3d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b3d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3d6:	682b      	ldr	r3, [r5, #0]
 800b3d8:	05c9      	lsls	r1, r1, #23
 800b3da:	d547      	bpl.n	800b46c <_printf_float+0xc4>
 800b3dc:	189b      	adds	r3, r3, r2
 800b3de:	4393      	bics	r3, r2
 800b3e0:	001a      	movs	r2, r3
 800b3e2:	3208      	adds	r2, #8
 800b3e4:	602a      	str	r2, [r5, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	64a2      	str	r2, [r4, #72]	; 0x48
 800b3ec:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b3f2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b3f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3f6:	006b      	lsls	r3, r5, #1
 800b3f8:	085b      	lsrs	r3, r3, #1
 800b3fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3fe:	4ba7      	ldr	r3, [pc, #668]	; (800b69c <_printf_float+0x2f4>)
 800b400:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b402:	4252      	negs	r2, r2
 800b404:	f7f6 ffde 	bl	80023c4 <__aeabi_dcmpun>
 800b408:	2800      	cmp	r0, #0
 800b40a:	d131      	bne.n	800b470 <_printf_float+0xc8>
 800b40c:	2201      	movs	r2, #1
 800b40e:	4ba3      	ldr	r3, [pc, #652]	; (800b69c <_printf_float+0x2f4>)
 800b410:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b412:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b414:	4252      	negs	r2, r2
 800b416:	f7f5 f829 	bl	800046c <__aeabi_dcmple>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d128      	bne.n	800b470 <_printf_float+0xc8>
 800b41e:	2200      	movs	r2, #0
 800b420:	2300      	movs	r3, #0
 800b422:	0029      	movs	r1, r5
 800b424:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b426:	f7f5 f817 	bl	8000458 <__aeabi_dcmplt>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d003      	beq.n	800b436 <_printf_float+0x8e>
 800b42e:	0023      	movs	r3, r4
 800b430:	222d      	movs	r2, #45	; 0x2d
 800b432:	3343      	adds	r3, #67	; 0x43
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b438:	4d99      	ldr	r5, [pc, #612]	; (800b6a0 <_printf_float+0x2f8>)
 800b43a:	2b47      	cmp	r3, #71	; 0x47
 800b43c:	d900      	bls.n	800b440 <_printf_float+0x98>
 800b43e:	4d99      	ldr	r5, [pc, #612]	; (800b6a4 <_printf_float+0x2fc>)
 800b440:	2303      	movs	r3, #3
 800b442:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b444:	6123      	str	r3, [r4, #16]
 800b446:	3301      	adds	r3, #1
 800b448:	439a      	bics	r2, r3
 800b44a:	2300      	movs	r3, #0
 800b44c:	6022      	str	r2, [r4, #0]
 800b44e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b452:	0021      	movs	r1, r4
 800b454:	0038      	movs	r0, r7
 800b456:	9600      	str	r6, [sp, #0]
 800b458:	aa13      	add	r2, sp, #76	; 0x4c
 800b45a:	f000 f9e7 	bl	800b82c <_printf_common>
 800b45e:	1c43      	adds	r3, r0, #1
 800b460:	d000      	beq.n	800b464 <_printf_float+0xbc>
 800b462:	e0a2      	b.n	800b5aa <_printf_float+0x202>
 800b464:	2001      	movs	r0, #1
 800b466:	4240      	negs	r0, r0
 800b468:	b015      	add	sp, #84	; 0x54
 800b46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b46c:	3307      	adds	r3, #7
 800b46e:	e7b6      	b.n	800b3de <_printf_float+0x36>
 800b470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b472:	002b      	movs	r3, r5
 800b474:	0010      	movs	r0, r2
 800b476:	0029      	movs	r1, r5
 800b478:	f7f6 ffa4 	bl	80023c4 <__aeabi_dcmpun>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d00b      	beq.n	800b498 <_printf_float+0xf0>
 800b480:	2d00      	cmp	r5, #0
 800b482:	da03      	bge.n	800b48c <_printf_float+0xe4>
 800b484:	0023      	movs	r3, r4
 800b486:	222d      	movs	r2, #45	; 0x2d
 800b488:	3343      	adds	r3, #67	; 0x43
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48e:	4d86      	ldr	r5, [pc, #536]	; (800b6a8 <_printf_float+0x300>)
 800b490:	2b47      	cmp	r3, #71	; 0x47
 800b492:	d9d5      	bls.n	800b440 <_printf_float+0x98>
 800b494:	4d85      	ldr	r5, [pc, #532]	; (800b6ac <_printf_float+0x304>)
 800b496:	e7d3      	b.n	800b440 <_printf_float+0x98>
 800b498:	2220      	movs	r2, #32
 800b49a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b49c:	6863      	ldr	r3, [r4, #4]
 800b49e:	4391      	bics	r1, r2
 800b4a0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b4a2:	1c5a      	adds	r2, r3, #1
 800b4a4:	d149      	bne.n	800b53a <_printf_float+0x192>
 800b4a6:	3307      	adds	r3, #7
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	2380      	movs	r3, #128	; 0x80
 800b4ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	9206      	str	r2, [sp, #24]
 800b4b6:	aa12      	add	r2, sp, #72	; 0x48
 800b4b8:	9205      	str	r2, [sp, #20]
 800b4ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4bc:	a908      	add	r1, sp, #32
 800b4be:	9204      	str	r2, [sp, #16]
 800b4c0:	aa11      	add	r2, sp, #68	; 0x44
 800b4c2:	9203      	str	r2, [sp, #12]
 800b4c4:	2223      	movs	r2, #35	; 0x23
 800b4c6:	6023      	str	r3, [r4, #0]
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	6863      	ldr	r3, [r4, #4]
 800b4cc:	1852      	adds	r2, r2, r1
 800b4ce:	9202      	str	r2, [sp, #8]
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	0038      	movs	r0, r7
 800b4d4:	002b      	movs	r3, r5
 800b4d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4d8:	f7ff febc 	bl	800b254 <__cvt>
 800b4dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4de:	0005      	movs	r5, r0
 800b4e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b4e2:	2b47      	cmp	r3, #71	; 0x47
 800b4e4:	d108      	bne.n	800b4f8 <_printf_float+0x150>
 800b4e6:	1ccb      	adds	r3, r1, #3
 800b4e8:	db02      	blt.n	800b4f0 <_printf_float+0x148>
 800b4ea:	6863      	ldr	r3, [r4, #4]
 800b4ec:	4299      	cmp	r1, r3
 800b4ee:	dd48      	ble.n	800b582 <_printf_float+0x1da>
 800b4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f2:	3b02      	subs	r3, #2
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4fa:	2b65      	cmp	r3, #101	; 0x65
 800b4fc:	d824      	bhi.n	800b548 <_printf_float+0x1a0>
 800b4fe:	0020      	movs	r0, r4
 800b500:	001a      	movs	r2, r3
 800b502:	3901      	subs	r1, #1
 800b504:	3050      	adds	r0, #80	; 0x50
 800b506:	9111      	str	r1, [sp, #68]	; 0x44
 800b508:	f7ff ff07 	bl	800b31a <__exponent>
 800b50c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b50e:	900b      	str	r0, [sp, #44]	; 0x2c
 800b510:	1813      	adds	r3, r2, r0
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	2a01      	cmp	r2, #1
 800b516:	dc02      	bgt.n	800b51e <_printf_float+0x176>
 800b518:	6822      	ldr	r2, [r4, #0]
 800b51a:	07d2      	lsls	r2, r2, #31
 800b51c:	d501      	bpl.n	800b522 <_printf_float+0x17a>
 800b51e:	3301      	adds	r3, #1
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	2323      	movs	r3, #35	; 0x23
 800b524:	aa08      	add	r2, sp, #32
 800b526:	189b      	adds	r3, r3, r2
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d100      	bne.n	800b530 <_printf_float+0x188>
 800b52e:	e78f      	b.n	800b450 <_printf_float+0xa8>
 800b530:	0023      	movs	r3, r4
 800b532:	222d      	movs	r2, #45	; 0x2d
 800b534:	3343      	adds	r3, #67	; 0x43
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	e78a      	b.n	800b450 <_printf_float+0xa8>
 800b53a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b53c:	2a47      	cmp	r2, #71	; 0x47
 800b53e:	d1b4      	bne.n	800b4aa <_printf_float+0x102>
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1b2      	bne.n	800b4aa <_printf_float+0x102>
 800b544:	3301      	adds	r3, #1
 800b546:	e7af      	b.n	800b4a8 <_printf_float+0x100>
 800b548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54a:	2b66      	cmp	r3, #102	; 0x66
 800b54c:	d11b      	bne.n	800b586 <_printf_float+0x1de>
 800b54e:	6863      	ldr	r3, [r4, #4]
 800b550:	2900      	cmp	r1, #0
 800b552:	dd0d      	ble.n	800b570 <_printf_float+0x1c8>
 800b554:	6121      	str	r1, [r4, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d102      	bne.n	800b560 <_printf_float+0x1b8>
 800b55a:	6822      	ldr	r2, [r4, #0]
 800b55c:	07d2      	lsls	r2, r2, #31
 800b55e:	d502      	bpl.n	800b566 <_printf_float+0x1be>
 800b560:	3301      	adds	r3, #1
 800b562:	1859      	adds	r1, r3, r1
 800b564:	6121      	str	r1, [r4, #16]
 800b566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b568:	65a3      	str	r3, [r4, #88]	; 0x58
 800b56a:	2300      	movs	r3, #0
 800b56c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b56e:	e7d8      	b.n	800b522 <_printf_float+0x17a>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d103      	bne.n	800b57c <_printf_float+0x1d4>
 800b574:	2201      	movs	r2, #1
 800b576:	6821      	ldr	r1, [r4, #0]
 800b578:	4211      	tst	r1, r2
 800b57a:	d000      	beq.n	800b57e <_printf_float+0x1d6>
 800b57c:	1c9a      	adds	r2, r3, #2
 800b57e:	6122      	str	r2, [r4, #16]
 800b580:	e7f1      	b.n	800b566 <_printf_float+0x1be>
 800b582:	2367      	movs	r3, #103	; 0x67
 800b584:	930a      	str	r3, [sp, #40]	; 0x28
 800b586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b588:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b58a:	4293      	cmp	r3, r2
 800b58c:	db06      	blt.n	800b59c <_printf_float+0x1f4>
 800b58e:	6822      	ldr	r2, [r4, #0]
 800b590:	6123      	str	r3, [r4, #16]
 800b592:	07d2      	lsls	r2, r2, #31
 800b594:	d5e7      	bpl.n	800b566 <_printf_float+0x1be>
 800b596:	3301      	adds	r3, #1
 800b598:	6123      	str	r3, [r4, #16]
 800b59a:	e7e4      	b.n	800b566 <_printf_float+0x1be>
 800b59c:	2101      	movs	r1, #1
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dc01      	bgt.n	800b5a6 <_printf_float+0x1fe>
 800b5a2:	1849      	adds	r1, r1, r1
 800b5a4:	1ac9      	subs	r1, r1, r3
 800b5a6:	1852      	adds	r2, r2, r1
 800b5a8:	e7e9      	b.n	800b57e <_printf_float+0x1d6>
 800b5aa:	6822      	ldr	r2, [r4, #0]
 800b5ac:	0553      	lsls	r3, r2, #21
 800b5ae:	d407      	bmi.n	800b5c0 <_printf_float+0x218>
 800b5b0:	6923      	ldr	r3, [r4, #16]
 800b5b2:	002a      	movs	r2, r5
 800b5b4:	0038      	movs	r0, r7
 800b5b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5b8:	47b0      	blx	r6
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d128      	bne.n	800b610 <_printf_float+0x268>
 800b5be:	e751      	b.n	800b464 <_printf_float+0xbc>
 800b5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c2:	2b65      	cmp	r3, #101	; 0x65
 800b5c4:	d800      	bhi.n	800b5c8 <_printf_float+0x220>
 800b5c6:	e0e1      	b.n	800b78c <_printf_float+0x3e4>
 800b5c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b5ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f7f4 ff3c 	bl	800044c <__aeabi_dcmpeq>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d031      	beq.n	800b63c <_printf_float+0x294>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	0038      	movs	r0, r7
 800b5dc:	4a34      	ldr	r2, [pc, #208]	; (800b6b0 <_printf_float+0x308>)
 800b5de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5e0:	47b0      	blx	r6
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d100      	bne.n	800b5e8 <_printf_float+0x240>
 800b5e6:	e73d      	b.n	800b464 <_printf_float+0xbc>
 800b5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	db02      	blt.n	800b5f6 <_printf_float+0x24e>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	07db      	lsls	r3, r3, #31
 800b5f4:	d50c      	bpl.n	800b610 <_printf_float+0x268>
 800b5f6:	0038      	movs	r0, r7
 800b5f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5fe:	47b0      	blx	r6
 800b600:	2500      	movs	r5, #0
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	d100      	bne.n	800b608 <_printf_float+0x260>
 800b606:	e72d      	b.n	800b464 <_printf_float+0xbc>
 800b608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b60a:	3b01      	subs	r3, #1
 800b60c:	42ab      	cmp	r3, r5
 800b60e:	dc0a      	bgt.n	800b626 <_printf_float+0x27e>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	079b      	lsls	r3, r3, #30
 800b614:	d500      	bpl.n	800b618 <_printf_float+0x270>
 800b616:	e106      	b.n	800b826 <_printf_float+0x47e>
 800b618:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b61a:	68e0      	ldr	r0, [r4, #12]
 800b61c:	4298      	cmp	r0, r3
 800b61e:	db00      	blt.n	800b622 <_printf_float+0x27a>
 800b620:	e722      	b.n	800b468 <_printf_float+0xc0>
 800b622:	0018      	movs	r0, r3
 800b624:	e720      	b.n	800b468 <_printf_float+0xc0>
 800b626:	0022      	movs	r2, r4
 800b628:	2301      	movs	r3, #1
 800b62a:	0038      	movs	r0, r7
 800b62c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b62e:	321a      	adds	r2, #26
 800b630:	47b0      	blx	r6
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	d100      	bne.n	800b638 <_printf_float+0x290>
 800b636:	e715      	b.n	800b464 <_printf_float+0xbc>
 800b638:	3501      	adds	r5, #1
 800b63a:	e7e5      	b.n	800b608 <_printf_float+0x260>
 800b63c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b63e:	2b00      	cmp	r3, #0
 800b640:	dc38      	bgt.n	800b6b4 <_printf_float+0x30c>
 800b642:	2301      	movs	r3, #1
 800b644:	0038      	movs	r0, r7
 800b646:	4a1a      	ldr	r2, [pc, #104]	; (800b6b0 <_printf_float+0x308>)
 800b648:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b64a:	47b0      	blx	r6
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d100      	bne.n	800b652 <_printf_float+0x2aa>
 800b650:	e708      	b.n	800b464 <_printf_float+0xbc>
 800b652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b656:	4313      	orrs	r3, r2
 800b658:	d102      	bne.n	800b660 <_printf_float+0x2b8>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	07db      	lsls	r3, r3, #31
 800b65e:	d5d7      	bpl.n	800b610 <_printf_float+0x268>
 800b660:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b662:	0038      	movs	r0, r7
 800b664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b666:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b668:	47b0      	blx	r6
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	d100      	bne.n	800b670 <_printf_float+0x2c8>
 800b66e:	e6f9      	b.n	800b464 <_printf_float+0xbc>
 800b670:	2300      	movs	r3, #0
 800b672:	930a      	str	r3, [sp, #40]	; 0x28
 800b674:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b676:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b678:	425b      	negs	r3, r3
 800b67a:	4293      	cmp	r3, r2
 800b67c:	dc01      	bgt.n	800b682 <_printf_float+0x2da>
 800b67e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b680:	e797      	b.n	800b5b2 <_printf_float+0x20a>
 800b682:	0022      	movs	r2, r4
 800b684:	2301      	movs	r3, #1
 800b686:	0038      	movs	r0, r7
 800b688:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b68a:	321a      	adds	r2, #26
 800b68c:	47b0      	blx	r6
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	d100      	bne.n	800b694 <_printf_float+0x2ec>
 800b692:	e6e7      	b.n	800b464 <_printf_float+0xbc>
 800b694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b696:	3301      	adds	r3, #1
 800b698:	e7eb      	b.n	800b672 <_printf_float+0x2ca>
 800b69a:	46c0      	nop			; (mov r8, r8)
 800b69c:	7fefffff 	.word	0x7fefffff
 800b6a0:	0800e318 	.word	0x0800e318
 800b6a4:	0800e31c 	.word	0x0800e31c
 800b6a8:	0800e320 	.word	0x0800e320
 800b6ac:	0800e324 	.word	0x0800e324
 800b6b0:	0800e328 	.word	0x0800e328
 800b6b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	dd00      	ble.n	800b6c0 <_printf_float+0x318>
 800b6be:	930a      	str	r3, [sp, #40]	; 0x28
 800b6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	dc3c      	bgt.n	800b740 <_printf_float+0x398>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	930d      	str	r3, [sp, #52]	; 0x34
 800b6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6cc:	43db      	mvns	r3, r3
 800b6ce:	17db      	asrs	r3, r3, #31
 800b6d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6da:	4013      	ands	r3, r2
 800b6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	dc34      	bgt.n	800b750 <_printf_float+0x3a8>
 800b6e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	db3d      	blt.n	800b76a <_printf_float+0x3c2>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	07db      	lsls	r3, r3, #31
 800b6f2:	d43a      	bmi.n	800b76a <_printf_float+0x3c2>
 800b6f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	1a52      	subs	r2, r2, r1
 800b6fe:	920a      	str	r2, [sp, #40]	; 0x28
 800b700:	429a      	cmp	r2, r3
 800b702:	dd00      	ble.n	800b706 <_printf_float+0x35e>
 800b704:	930a      	str	r3, [sp, #40]	; 0x28
 800b706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b708:	2b00      	cmp	r3, #0
 800b70a:	dc36      	bgt.n	800b77a <_printf_float+0x3d2>
 800b70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b70e:	2500      	movs	r5, #0
 800b710:	43db      	mvns	r3, r3
 800b712:	17db      	asrs	r3, r3, #31
 800b714:	930b      	str	r3, [sp, #44]	; 0x2c
 800b716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b71a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b71c:	1a9b      	subs	r3, r3, r2
 800b71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b720:	400a      	ands	r2, r1
 800b722:	1a9b      	subs	r3, r3, r2
 800b724:	42ab      	cmp	r3, r5
 800b726:	dc00      	bgt.n	800b72a <_printf_float+0x382>
 800b728:	e772      	b.n	800b610 <_printf_float+0x268>
 800b72a:	0022      	movs	r2, r4
 800b72c:	2301      	movs	r3, #1
 800b72e:	0038      	movs	r0, r7
 800b730:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b732:	321a      	adds	r2, #26
 800b734:	47b0      	blx	r6
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	d100      	bne.n	800b73c <_printf_float+0x394>
 800b73a:	e693      	b.n	800b464 <_printf_float+0xbc>
 800b73c:	3501      	adds	r5, #1
 800b73e:	e7ea      	b.n	800b716 <_printf_float+0x36e>
 800b740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b742:	002a      	movs	r2, r5
 800b744:	0038      	movs	r0, r7
 800b746:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b748:	47b0      	blx	r6
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d1bb      	bne.n	800b6c6 <_printf_float+0x31e>
 800b74e:	e689      	b.n	800b464 <_printf_float+0xbc>
 800b750:	0022      	movs	r2, r4
 800b752:	2301      	movs	r3, #1
 800b754:	0038      	movs	r0, r7
 800b756:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b758:	321a      	adds	r2, #26
 800b75a:	47b0      	blx	r6
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d100      	bne.n	800b762 <_printf_float+0x3ba>
 800b760:	e680      	b.n	800b464 <_printf_float+0xbc>
 800b762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b764:	3301      	adds	r3, #1
 800b766:	930d      	str	r3, [sp, #52]	; 0x34
 800b768:	e7b3      	b.n	800b6d2 <_printf_float+0x32a>
 800b76a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b76c:	0038      	movs	r0, r7
 800b76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b772:	47b0      	blx	r6
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d1bd      	bne.n	800b6f4 <_printf_float+0x34c>
 800b778:	e674      	b.n	800b464 <_printf_float+0xbc>
 800b77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b77c:	0038      	movs	r0, r7
 800b77e:	18ea      	adds	r2, r5, r3
 800b780:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b784:	47b0      	blx	r6
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d1c0      	bne.n	800b70c <_printf_float+0x364>
 800b78a:	e66b      	b.n	800b464 <_printf_float+0xbc>
 800b78c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b78e:	2b01      	cmp	r3, #1
 800b790:	dc02      	bgt.n	800b798 <_printf_float+0x3f0>
 800b792:	2301      	movs	r3, #1
 800b794:	421a      	tst	r2, r3
 800b796:	d034      	beq.n	800b802 <_printf_float+0x45a>
 800b798:	2301      	movs	r3, #1
 800b79a:	002a      	movs	r2, r5
 800b79c:	0038      	movs	r0, r7
 800b79e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7a0:	47b0      	blx	r6
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d100      	bne.n	800b7a8 <_printf_float+0x400>
 800b7a6:	e65d      	b.n	800b464 <_printf_float+0xbc>
 800b7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7aa:	0038      	movs	r0, r7
 800b7ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b0:	47b0      	blx	r6
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	d100      	bne.n	800b7b8 <_printf_float+0x410>
 800b7b6:	e655      	b.n	800b464 <_printf_float+0xbc>
 800b7b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b7ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2300      	movs	r3, #0
 800b7c0:	f7f4 fe44 	bl	800044c <__aeabi_dcmpeq>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d11a      	bne.n	800b7fe <_printf_float+0x456>
 800b7c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7ca:	1c6a      	adds	r2, r5, #1
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	0038      	movs	r0, r7
 800b7d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7d2:	47b0      	blx	r6
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d10e      	bne.n	800b7f6 <_printf_float+0x44e>
 800b7d8:	e644      	b.n	800b464 <_printf_float+0xbc>
 800b7da:	0022      	movs	r2, r4
 800b7dc:	2301      	movs	r3, #1
 800b7de:	0038      	movs	r0, r7
 800b7e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7e2:	321a      	adds	r2, #26
 800b7e4:	47b0      	blx	r6
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	d100      	bne.n	800b7ec <_printf_float+0x444>
 800b7ea:	e63b      	b.n	800b464 <_printf_float+0xbc>
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	42ab      	cmp	r3, r5
 800b7f4:	dcf1      	bgt.n	800b7da <_printf_float+0x432>
 800b7f6:	0022      	movs	r2, r4
 800b7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fa:	3250      	adds	r2, #80	; 0x50
 800b7fc:	e6da      	b.n	800b5b4 <_printf_float+0x20c>
 800b7fe:	2500      	movs	r5, #0
 800b800:	e7f5      	b.n	800b7ee <_printf_float+0x446>
 800b802:	002a      	movs	r2, r5
 800b804:	e7e3      	b.n	800b7ce <_printf_float+0x426>
 800b806:	0022      	movs	r2, r4
 800b808:	2301      	movs	r3, #1
 800b80a:	0038      	movs	r0, r7
 800b80c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b80e:	3219      	adds	r2, #25
 800b810:	47b0      	blx	r6
 800b812:	1c43      	adds	r3, r0, #1
 800b814:	d100      	bne.n	800b818 <_printf_float+0x470>
 800b816:	e625      	b.n	800b464 <_printf_float+0xbc>
 800b818:	3501      	adds	r5, #1
 800b81a:	68e3      	ldr	r3, [r4, #12]
 800b81c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b81e:	1a9b      	subs	r3, r3, r2
 800b820:	42ab      	cmp	r3, r5
 800b822:	dcf0      	bgt.n	800b806 <_printf_float+0x45e>
 800b824:	e6f8      	b.n	800b618 <_printf_float+0x270>
 800b826:	2500      	movs	r5, #0
 800b828:	e7f7      	b.n	800b81a <_printf_float+0x472>
 800b82a:	46c0      	nop			; (mov r8, r8)

0800b82c <_printf_common>:
 800b82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b82e:	0015      	movs	r5, r2
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	688a      	ldr	r2, [r1, #8]
 800b834:	690b      	ldr	r3, [r1, #16]
 800b836:	000c      	movs	r4, r1
 800b838:	9000      	str	r0, [sp, #0]
 800b83a:	4293      	cmp	r3, r2
 800b83c:	da00      	bge.n	800b840 <_printf_common+0x14>
 800b83e:	0013      	movs	r3, r2
 800b840:	0022      	movs	r2, r4
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	3243      	adds	r2, #67	; 0x43
 800b846:	7812      	ldrb	r2, [r2, #0]
 800b848:	2a00      	cmp	r2, #0
 800b84a:	d001      	beq.n	800b850 <_printf_common+0x24>
 800b84c:	3301      	adds	r3, #1
 800b84e:	602b      	str	r3, [r5, #0]
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	069b      	lsls	r3, r3, #26
 800b854:	d502      	bpl.n	800b85c <_printf_common+0x30>
 800b856:	682b      	ldr	r3, [r5, #0]
 800b858:	3302      	adds	r3, #2
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	6822      	ldr	r2, [r4, #0]
 800b85e:	2306      	movs	r3, #6
 800b860:	0017      	movs	r7, r2
 800b862:	401f      	ands	r7, r3
 800b864:	421a      	tst	r2, r3
 800b866:	d027      	beq.n	800b8b8 <_printf_common+0x8c>
 800b868:	0023      	movs	r3, r4
 800b86a:	3343      	adds	r3, #67	; 0x43
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	1e5a      	subs	r2, r3, #1
 800b870:	4193      	sbcs	r3, r2
 800b872:	6822      	ldr	r2, [r4, #0]
 800b874:	0692      	lsls	r2, r2, #26
 800b876:	d430      	bmi.n	800b8da <_printf_common+0xae>
 800b878:	0022      	movs	r2, r4
 800b87a:	9901      	ldr	r1, [sp, #4]
 800b87c:	9800      	ldr	r0, [sp, #0]
 800b87e:	9e08      	ldr	r6, [sp, #32]
 800b880:	3243      	adds	r2, #67	; 0x43
 800b882:	47b0      	blx	r6
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d025      	beq.n	800b8d4 <_printf_common+0xa8>
 800b888:	2306      	movs	r3, #6
 800b88a:	6820      	ldr	r0, [r4, #0]
 800b88c:	682a      	ldr	r2, [r5, #0]
 800b88e:	68e1      	ldr	r1, [r4, #12]
 800b890:	2500      	movs	r5, #0
 800b892:	4003      	ands	r3, r0
 800b894:	2b04      	cmp	r3, #4
 800b896:	d103      	bne.n	800b8a0 <_printf_common+0x74>
 800b898:	1a8d      	subs	r5, r1, r2
 800b89a:	43eb      	mvns	r3, r5
 800b89c:	17db      	asrs	r3, r3, #31
 800b89e:	401d      	ands	r5, r3
 800b8a0:	68a3      	ldr	r3, [r4, #8]
 800b8a2:	6922      	ldr	r2, [r4, #16]
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	dd01      	ble.n	800b8ac <_printf_common+0x80>
 800b8a8:	1a9b      	subs	r3, r3, r2
 800b8aa:	18ed      	adds	r5, r5, r3
 800b8ac:	2700      	movs	r7, #0
 800b8ae:	42bd      	cmp	r5, r7
 800b8b0:	d120      	bne.n	800b8f4 <_printf_common+0xc8>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e010      	b.n	800b8d8 <_printf_common+0xac>
 800b8b6:	3701      	adds	r7, #1
 800b8b8:	68e3      	ldr	r3, [r4, #12]
 800b8ba:	682a      	ldr	r2, [r5, #0]
 800b8bc:	1a9b      	subs	r3, r3, r2
 800b8be:	42bb      	cmp	r3, r7
 800b8c0:	ddd2      	ble.n	800b868 <_printf_common+0x3c>
 800b8c2:	0022      	movs	r2, r4
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	9901      	ldr	r1, [sp, #4]
 800b8c8:	9800      	ldr	r0, [sp, #0]
 800b8ca:	9e08      	ldr	r6, [sp, #32]
 800b8cc:	3219      	adds	r2, #25
 800b8ce:	47b0      	blx	r6
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	d1f0      	bne.n	800b8b6 <_printf_common+0x8a>
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	4240      	negs	r0, r0
 800b8d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8da:	2030      	movs	r0, #48	; 0x30
 800b8dc:	18e1      	adds	r1, r4, r3
 800b8de:	3143      	adds	r1, #67	; 0x43
 800b8e0:	7008      	strb	r0, [r1, #0]
 800b8e2:	0021      	movs	r1, r4
 800b8e4:	1c5a      	adds	r2, r3, #1
 800b8e6:	3145      	adds	r1, #69	; 0x45
 800b8e8:	7809      	ldrb	r1, [r1, #0]
 800b8ea:	18a2      	adds	r2, r4, r2
 800b8ec:	3243      	adds	r2, #67	; 0x43
 800b8ee:	3302      	adds	r3, #2
 800b8f0:	7011      	strb	r1, [r2, #0]
 800b8f2:	e7c1      	b.n	800b878 <_printf_common+0x4c>
 800b8f4:	0022      	movs	r2, r4
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	9901      	ldr	r1, [sp, #4]
 800b8fa:	9800      	ldr	r0, [sp, #0]
 800b8fc:	9e08      	ldr	r6, [sp, #32]
 800b8fe:	321a      	adds	r2, #26
 800b900:	47b0      	blx	r6
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d0e6      	beq.n	800b8d4 <_printf_common+0xa8>
 800b906:	3701      	adds	r7, #1
 800b908:	e7d1      	b.n	800b8ae <_printf_common+0x82>
	...

0800b90c <_printf_i>:
 800b90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b90e:	b08b      	sub	sp, #44	; 0x2c
 800b910:	9206      	str	r2, [sp, #24]
 800b912:	000a      	movs	r2, r1
 800b914:	3243      	adds	r2, #67	; 0x43
 800b916:	9307      	str	r3, [sp, #28]
 800b918:	9005      	str	r0, [sp, #20]
 800b91a:	9204      	str	r2, [sp, #16]
 800b91c:	7e0a      	ldrb	r2, [r1, #24]
 800b91e:	000c      	movs	r4, r1
 800b920:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b922:	2a78      	cmp	r2, #120	; 0x78
 800b924:	d807      	bhi.n	800b936 <_printf_i+0x2a>
 800b926:	2a62      	cmp	r2, #98	; 0x62
 800b928:	d809      	bhi.n	800b93e <_printf_i+0x32>
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	d100      	bne.n	800b930 <_printf_i+0x24>
 800b92e:	e0c1      	b.n	800bab4 <_printf_i+0x1a8>
 800b930:	2a58      	cmp	r2, #88	; 0x58
 800b932:	d100      	bne.n	800b936 <_printf_i+0x2a>
 800b934:	e08c      	b.n	800ba50 <_printf_i+0x144>
 800b936:	0026      	movs	r6, r4
 800b938:	3642      	adds	r6, #66	; 0x42
 800b93a:	7032      	strb	r2, [r6, #0]
 800b93c:	e022      	b.n	800b984 <_printf_i+0x78>
 800b93e:	0010      	movs	r0, r2
 800b940:	3863      	subs	r0, #99	; 0x63
 800b942:	2815      	cmp	r0, #21
 800b944:	d8f7      	bhi.n	800b936 <_printf_i+0x2a>
 800b946:	f7f4 fbf1 	bl	800012c <__gnu_thumb1_case_shi>
 800b94a:	0016      	.short	0x0016
 800b94c:	fff6001f 	.word	0xfff6001f
 800b950:	fff6fff6 	.word	0xfff6fff6
 800b954:	001ffff6 	.word	0x001ffff6
 800b958:	fff6fff6 	.word	0xfff6fff6
 800b95c:	fff6fff6 	.word	0xfff6fff6
 800b960:	003600a8 	.word	0x003600a8
 800b964:	fff6009a 	.word	0xfff6009a
 800b968:	00b9fff6 	.word	0x00b9fff6
 800b96c:	0036fff6 	.word	0x0036fff6
 800b970:	fff6fff6 	.word	0xfff6fff6
 800b974:	009e      	.short	0x009e
 800b976:	0026      	movs	r6, r4
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	3642      	adds	r6, #66	; 0x42
 800b97c:	1d11      	adds	r1, r2, #4
 800b97e:	6019      	str	r1, [r3, #0]
 800b980:	6813      	ldr	r3, [r2, #0]
 800b982:	7033      	strb	r3, [r6, #0]
 800b984:	2301      	movs	r3, #1
 800b986:	e0a7      	b.n	800bad8 <_printf_i+0x1cc>
 800b988:	6808      	ldr	r0, [r1, #0]
 800b98a:	6819      	ldr	r1, [r3, #0]
 800b98c:	1d0a      	adds	r2, r1, #4
 800b98e:	0605      	lsls	r5, r0, #24
 800b990:	d50b      	bpl.n	800b9aa <_printf_i+0x9e>
 800b992:	680d      	ldr	r5, [r1, #0]
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	2d00      	cmp	r5, #0
 800b998:	da03      	bge.n	800b9a2 <_printf_i+0x96>
 800b99a:	232d      	movs	r3, #45	; 0x2d
 800b99c:	9a04      	ldr	r2, [sp, #16]
 800b99e:	426d      	negs	r5, r5
 800b9a0:	7013      	strb	r3, [r2, #0]
 800b9a2:	4b61      	ldr	r3, [pc, #388]	; (800bb28 <_printf_i+0x21c>)
 800b9a4:	270a      	movs	r7, #10
 800b9a6:	9303      	str	r3, [sp, #12]
 800b9a8:	e01b      	b.n	800b9e2 <_printf_i+0xd6>
 800b9aa:	680d      	ldr	r5, [r1, #0]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	0641      	lsls	r1, r0, #25
 800b9b0:	d5f1      	bpl.n	800b996 <_printf_i+0x8a>
 800b9b2:	b22d      	sxth	r5, r5
 800b9b4:	e7ef      	b.n	800b996 <_printf_i+0x8a>
 800b9b6:	680d      	ldr	r5, [r1, #0]
 800b9b8:	6819      	ldr	r1, [r3, #0]
 800b9ba:	1d08      	adds	r0, r1, #4
 800b9bc:	6018      	str	r0, [r3, #0]
 800b9be:	062e      	lsls	r6, r5, #24
 800b9c0:	d501      	bpl.n	800b9c6 <_printf_i+0xba>
 800b9c2:	680d      	ldr	r5, [r1, #0]
 800b9c4:	e003      	b.n	800b9ce <_printf_i+0xc2>
 800b9c6:	066d      	lsls	r5, r5, #25
 800b9c8:	d5fb      	bpl.n	800b9c2 <_printf_i+0xb6>
 800b9ca:	680d      	ldr	r5, [r1, #0]
 800b9cc:	b2ad      	uxth	r5, r5
 800b9ce:	4b56      	ldr	r3, [pc, #344]	; (800bb28 <_printf_i+0x21c>)
 800b9d0:	2708      	movs	r7, #8
 800b9d2:	9303      	str	r3, [sp, #12]
 800b9d4:	2a6f      	cmp	r2, #111	; 0x6f
 800b9d6:	d000      	beq.n	800b9da <_printf_i+0xce>
 800b9d8:	3702      	adds	r7, #2
 800b9da:	0023      	movs	r3, r4
 800b9dc:	2200      	movs	r2, #0
 800b9de:	3343      	adds	r3, #67	; 0x43
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	60a3      	str	r3, [r4, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	db03      	blt.n	800b9f2 <_printf_i+0xe6>
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	6821      	ldr	r1, [r4, #0]
 800b9ee:	4391      	bics	r1, r2
 800b9f0:	6021      	str	r1, [r4, #0]
 800b9f2:	2d00      	cmp	r5, #0
 800b9f4:	d102      	bne.n	800b9fc <_printf_i+0xf0>
 800b9f6:	9e04      	ldr	r6, [sp, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00c      	beq.n	800ba16 <_printf_i+0x10a>
 800b9fc:	9e04      	ldr	r6, [sp, #16]
 800b9fe:	0028      	movs	r0, r5
 800ba00:	0039      	movs	r1, r7
 800ba02:	f7f4 fc23 	bl	800024c <__aeabi_uidivmod>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	3e01      	subs	r6, #1
 800ba0a:	5c5b      	ldrb	r3, [r3, r1]
 800ba0c:	7033      	strb	r3, [r6, #0]
 800ba0e:	002b      	movs	r3, r5
 800ba10:	0005      	movs	r5, r0
 800ba12:	429f      	cmp	r7, r3
 800ba14:	d9f3      	bls.n	800b9fe <_printf_i+0xf2>
 800ba16:	2f08      	cmp	r7, #8
 800ba18:	d109      	bne.n	800ba2e <_printf_i+0x122>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	07db      	lsls	r3, r3, #31
 800ba1e:	d506      	bpl.n	800ba2e <_printf_i+0x122>
 800ba20:	6863      	ldr	r3, [r4, #4]
 800ba22:	6922      	ldr	r2, [r4, #16]
 800ba24:	4293      	cmp	r3, r2
 800ba26:	dc02      	bgt.n	800ba2e <_printf_i+0x122>
 800ba28:	2330      	movs	r3, #48	; 0x30
 800ba2a:	3e01      	subs	r6, #1
 800ba2c:	7033      	strb	r3, [r6, #0]
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	1b9b      	subs	r3, r3, r6
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	9b07      	ldr	r3, [sp, #28]
 800ba36:	0021      	movs	r1, r4
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	9805      	ldr	r0, [sp, #20]
 800ba3c:	9b06      	ldr	r3, [sp, #24]
 800ba3e:	aa09      	add	r2, sp, #36	; 0x24
 800ba40:	f7ff fef4 	bl	800b82c <_printf_common>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d14c      	bne.n	800bae2 <_printf_i+0x1d6>
 800ba48:	2001      	movs	r0, #1
 800ba4a:	4240      	negs	r0, r0
 800ba4c:	b00b      	add	sp, #44	; 0x2c
 800ba4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba50:	3145      	adds	r1, #69	; 0x45
 800ba52:	700a      	strb	r2, [r1, #0]
 800ba54:	4a34      	ldr	r2, [pc, #208]	; (800bb28 <_printf_i+0x21c>)
 800ba56:	9203      	str	r2, [sp, #12]
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	6821      	ldr	r1, [r4, #0]
 800ba5c:	ca20      	ldmia	r2!, {r5}
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	0608      	lsls	r0, r1, #24
 800ba62:	d516      	bpl.n	800ba92 <_printf_i+0x186>
 800ba64:	07cb      	lsls	r3, r1, #31
 800ba66:	d502      	bpl.n	800ba6e <_printf_i+0x162>
 800ba68:	2320      	movs	r3, #32
 800ba6a:	4319      	orrs	r1, r3
 800ba6c:	6021      	str	r1, [r4, #0]
 800ba6e:	2710      	movs	r7, #16
 800ba70:	2d00      	cmp	r5, #0
 800ba72:	d1b2      	bne.n	800b9da <_printf_i+0xce>
 800ba74:	2320      	movs	r3, #32
 800ba76:	6822      	ldr	r2, [r4, #0]
 800ba78:	439a      	bics	r2, r3
 800ba7a:	6022      	str	r2, [r4, #0]
 800ba7c:	e7ad      	b.n	800b9da <_printf_i+0xce>
 800ba7e:	2220      	movs	r2, #32
 800ba80:	6809      	ldr	r1, [r1, #0]
 800ba82:	430a      	orrs	r2, r1
 800ba84:	6022      	str	r2, [r4, #0]
 800ba86:	0022      	movs	r2, r4
 800ba88:	2178      	movs	r1, #120	; 0x78
 800ba8a:	3245      	adds	r2, #69	; 0x45
 800ba8c:	7011      	strb	r1, [r2, #0]
 800ba8e:	4a27      	ldr	r2, [pc, #156]	; (800bb2c <_printf_i+0x220>)
 800ba90:	e7e1      	b.n	800ba56 <_printf_i+0x14a>
 800ba92:	0648      	lsls	r0, r1, #25
 800ba94:	d5e6      	bpl.n	800ba64 <_printf_i+0x158>
 800ba96:	b2ad      	uxth	r5, r5
 800ba98:	e7e4      	b.n	800ba64 <_printf_i+0x158>
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	680d      	ldr	r5, [r1, #0]
 800ba9e:	1d10      	adds	r0, r2, #4
 800baa0:	6949      	ldr	r1, [r1, #20]
 800baa2:	6018      	str	r0, [r3, #0]
 800baa4:	6813      	ldr	r3, [r2, #0]
 800baa6:	062e      	lsls	r6, r5, #24
 800baa8:	d501      	bpl.n	800baae <_printf_i+0x1a2>
 800baaa:	6019      	str	r1, [r3, #0]
 800baac:	e002      	b.n	800bab4 <_printf_i+0x1a8>
 800baae:	066d      	lsls	r5, r5, #25
 800bab0:	d5fb      	bpl.n	800baaa <_printf_i+0x19e>
 800bab2:	8019      	strh	r1, [r3, #0]
 800bab4:	2300      	movs	r3, #0
 800bab6:	9e04      	ldr	r6, [sp, #16]
 800bab8:	6123      	str	r3, [r4, #16]
 800baba:	e7bb      	b.n	800ba34 <_printf_i+0x128>
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	1d11      	adds	r1, r2, #4
 800bac0:	6019      	str	r1, [r3, #0]
 800bac2:	6816      	ldr	r6, [r2, #0]
 800bac4:	2100      	movs	r1, #0
 800bac6:	0030      	movs	r0, r6
 800bac8:	6862      	ldr	r2, [r4, #4]
 800baca:	f001 f8dd 	bl	800cc88 <memchr>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d001      	beq.n	800bad6 <_printf_i+0x1ca>
 800bad2:	1b80      	subs	r0, r0, r6
 800bad4:	6060      	str	r0, [r4, #4]
 800bad6:	6863      	ldr	r3, [r4, #4]
 800bad8:	6123      	str	r3, [r4, #16]
 800bada:	2300      	movs	r3, #0
 800badc:	9a04      	ldr	r2, [sp, #16]
 800bade:	7013      	strb	r3, [r2, #0]
 800bae0:	e7a8      	b.n	800ba34 <_printf_i+0x128>
 800bae2:	6923      	ldr	r3, [r4, #16]
 800bae4:	0032      	movs	r2, r6
 800bae6:	9906      	ldr	r1, [sp, #24]
 800bae8:	9805      	ldr	r0, [sp, #20]
 800baea:	9d07      	ldr	r5, [sp, #28]
 800baec:	47a8      	blx	r5
 800baee:	1c43      	adds	r3, r0, #1
 800baf0:	d0aa      	beq.n	800ba48 <_printf_i+0x13c>
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	079b      	lsls	r3, r3, #30
 800baf6:	d415      	bmi.n	800bb24 <_printf_i+0x218>
 800baf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bafa:	68e0      	ldr	r0, [r4, #12]
 800bafc:	4298      	cmp	r0, r3
 800bafe:	daa5      	bge.n	800ba4c <_printf_i+0x140>
 800bb00:	0018      	movs	r0, r3
 800bb02:	e7a3      	b.n	800ba4c <_printf_i+0x140>
 800bb04:	0022      	movs	r2, r4
 800bb06:	2301      	movs	r3, #1
 800bb08:	9906      	ldr	r1, [sp, #24]
 800bb0a:	9805      	ldr	r0, [sp, #20]
 800bb0c:	9e07      	ldr	r6, [sp, #28]
 800bb0e:	3219      	adds	r2, #25
 800bb10:	47b0      	blx	r6
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d098      	beq.n	800ba48 <_printf_i+0x13c>
 800bb16:	3501      	adds	r5, #1
 800bb18:	68e3      	ldr	r3, [r4, #12]
 800bb1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb1c:	1a9b      	subs	r3, r3, r2
 800bb1e:	42ab      	cmp	r3, r5
 800bb20:	dcf0      	bgt.n	800bb04 <_printf_i+0x1f8>
 800bb22:	e7e9      	b.n	800baf8 <_printf_i+0x1ec>
 800bb24:	2500      	movs	r5, #0
 800bb26:	e7f7      	b.n	800bb18 <_printf_i+0x20c>
 800bb28:	0800e32a 	.word	0x0800e32a
 800bb2c:	0800e33b 	.word	0x0800e33b

0800bb30 <cleanup_glue>:
 800bb30:	b570      	push	{r4, r5, r6, lr}
 800bb32:	000d      	movs	r5, r1
 800bb34:	6809      	ldr	r1, [r1, #0]
 800bb36:	0004      	movs	r4, r0
 800bb38:	2900      	cmp	r1, #0
 800bb3a:	d001      	beq.n	800bb40 <cleanup_glue+0x10>
 800bb3c:	f7ff fff8 	bl	800bb30 <cleanup_glue>
 800bb40:	0029      	movs	r1, r5
 800bb42:	0020      	movs	r0, r4
 800bb44:	f001 fc84 	bl	800d450 <_free_r>
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb4c <_reclaim_reent>:
 800bb4c:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <_reclaim_reent+0xc8>)
 800bb4e:	b570      	push	{r4, r5, r6, lr}
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	0004      	movs	r4, r0
 800bb54:	4283      	cmp	r3, r0
 800bb56:	d049      	beq.n	800bbec <_reclaim_reent+0xa0>
 800bb58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <_reclaim_reent+0x28>
 800bb5e:	2500      	movs	r5, #0
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	42ab      	cmp	r3, r5
 800bb64:	d147      	bne.n	800bbf6 <_reclaim_reent+0xaa>
 800bb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb68:	6819      	ldr	r1, [r3, #0]
 800bb6a:	2900      	cmp	r1, #0
 800bb6c:	d002      	beq.n	800bb74 <_reclaim_reent+0x28>
 800bb6e:	0020      	movs	r0, r4
 800bb70:	f001 fc6e 	bl	800d450 <_free_r>
 800bb74:	6961      	ldr	r1, [r4, #20]
 800bb76:	2900      	cmp	r1, #0
 800bb78:	d002      	beq.n	800bb80 <_reclaim_reent+0x34>
 800bb7a:	0020      	movs	r0, r4
 800bb7c:	f001 fc68 	bl	800d450 <_free_r>
 800bb80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb82:	2900      	cmp	r1, #0
 800bb84:	d002      	beq.n	800bb8c <_reclaim_reent+0x40>
 800bb86:	0020      	movs	r0, r4
 800bb88:	f001 fc62 	bl	800d450 <_free_r>
 800bb8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bb8e:	2900      	cmp	r1, #0
 800bb90:	d002      	beq.n	800bb98 <_reclaim_reent+0x4c>
 800bb92:	0020      	movs	r0, r4
 800bb94:	f001 fc5c 	bl	800d450 <_free_r>
 800bb98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bb9a:	2900      	cmp	r1, #0
 800bb9c:	d002      	beq.n	800bba4 <_reclaim_reent+0x58>
 800bb9e:	0020      	movs	r0, r4
 800bba0:	f001 fc56 	bl	800d450 <_free_r>
 800bba4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bba6:	2900      	cmp	r1, #0
 800bba8:	d002      	beq.n	800bbb0 <_reclaim_reent+0x64>
 800bbaa:	0020      	movs	r0, r4
 800bbac:	f001 fc50 	bl	800d450 <_free_r>
 800bbb0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bbb2:	2900      	cmp	r1, #0
 800bbb4:	d002      	beq.n	800bbbc <_reclaim_reent+0x70>
 800bbb6:	0020      	movs	r0, r4
 800bbb8:	f001 fc4a 	bl	800d450 <_free_r>
 800bbbc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	d002      	beq.n	800bbc8 <_reclaim_reent+0x7c>
 800bbc2:	0020      	movs	r0, r4
 800bbc4:	f001 fc44 	bl	800d450 <_free_r>
 800bbc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbca:	2900      	cmp	r1, #0
 800bbcc:	d002      	beq.n	800bbd4 <_reclaim_reent+0x88>
 800bbce:	0020      	movs	r0, r4
 800bbd0:	f001 fc3e 	bl	800d450 <_free_r>
 800bbd4:	69a3      	ldr	r3, [r4, #24]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d008      	beq.n	800bbec <_reclaim_reent+0xa0>
 800bbda:	0020      	movs	r0, r4
 800bbdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbde:	4798      	blx	r3
 800bbe0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbe2:	2900      	cmp	r1, #0
 800bbe4:	d002      	beq.n	800bbec <_reclaim_reent+0xa0>
 800bbe6:	0020      	movs	r0, r4
 800bbe8:	f7ff ffa2 	bl	800bb30 <cleanup_glue>
 800bbec:	bd70      	pop	{r4, r5, r6, pc}
 800bbee:	5949      	ldr	r1, [r1, r5]
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	d108      	bne.n	800bc06 <_reclaim_reent+0xba>
 800bbf4:	3504      	adds	r5, #4
 800bbf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbf8:	68d9      	ldr	r1, [r3, #12]
 800bbfa:	2d80      	cmp	r5, #128	; 0x80
 800bbfc:	d1f7      	bne.n	800bbee <_reclaim_reent+0xa2>
 800bbfe:	0020      	movs	r0, r4
 800bc00:	f001 fc26 	bl	800d450 <_free_r>
 800bc04:	e7af      	b.n	800bb66 <_reclaim_reent+0x1a>
 800bc06:	680e      	ldr	r6, [r1, #0]
 800bc08:	0020      	movs	r0, r4
 800bc0a:	f001 fc21 	bl	800d450 <_free_r>
 800bc0e:	0031      	movs	r1, r6
 800bc10:	e7ee      	b.n	800bbf0 <_reclaim_reent+0xa4>
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	20000014 	.word	0x20000014

0800bc18 <_sbrk_r>:
 800bc18:	2300      	movs	r3, #0
 800bc1a:	b570      	push	{r4, r5, r6, lr}
 800bc1c:	4d06      	ldr	r5, [pc, #24]	; (800bc38 <_sbrk_r+0x20>)
 800bc1e:	0004      	movs	r4, r0
 800bc20:	0008      	movs	r0, r1
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	f7f7 fdb6 	bl	8003794 <_sbrk>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d103      	bne.n	800bc34 <_sbrk_r+0x1c>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d000      	beq.n	800bc34 <_sbrk_r+0x1c>
 800bc32:	6023      	str	r3, [r4, #0]
 800bc34:	bd70      	pop	{r4, r5, r6, pc}
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	20002d8c 	.word	0x20002d8c

0800bc3c <siprintf>:
 800bc3c:	b40e      	push	{r1, r2, r3}
 800bc3e:	b500      	push	{lr}
 800bc40:	490b      	ldr	r1, [pc, #44]	; (800bc70 <siprintf+0x34>)
 800bc42:	b09c      	sub	sp, #112	; 0x70
 800bc44:	ab1d      	add	r3, sp, #116	; 0x74
 800bc46:	9002      	str	r0, [sp, #8]
 800bc48:	9006      	str	r0, [sp, #24]
 800bc4a:	9107      	str	r1, [sp, #28]
 800bc4c:	9104      	str	r1, [sp, #16]
 800bc4e:	4809      	ldr	r0, [pc, #36]	; (800bc74 <siprintf+0x38>)
 800bc50:	4909      	ldr	r1, [pc, #36]	; (800bc78 <siprintf+0x3c>)
 800bc52:	cb04      	ldmia	r3!, {r2}
 800bc54:	9105      	str	r1, [sp, #20]
 800bc56:	6800      	ldr	r0, [r0, #0]
 800bc58:	a902      	add	r1, sp, #8
 800bc5a:	9301      	str	r3, [sp, #4]
 800bc5c:	f001 fca4 	bl	800d5a8 <_svfiprintf_r>
 800bc60:	2300      	movs	r3, #0
 800bc62:	9a02      	ldr	r2, [sp, #8]
 800bc64:	7013      	strb	r3, [r2, #0]
 800bc66:	b01c      	add	sp, #112	; 0x70
 800bc68:	bc08      	pop	{r3}
 800bc6a:	b003      	add	sp, #12
 800bc6c:	4718      	bx	r3
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	7fffffff 	.word	0x7fffffff
 800bc74:	20000014 	.word	0x20000014
 800bc78:	ffff0208 	.word	0xffff0208

0800bc7c <__sread>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	000c      	movs	r4, r1
 800bc80:	250e      	movs	r5, #14
 800bc82:	5f49      	ldrsh	r1, [r1, r5]
 800bc84:	f001 fd90 	bl	800d7a8 <_read_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	db03      	blt.n	800bc94 <__sread+0x18>
 800bc8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bc8e:	181b      	adds	r3, r3, r0
 800bc90:	6563      	str	r3, [r4, #84]	; 0x54
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	4a02      	ldr	r2, [pc, #8]	; (800bca0 <__sread+0x24>)
 800bc98:	4013      	ands	r3, r2
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	e7f9      	b.n	800bc92 <__sread+0x16>
 800bc9e:	46c0      	nop			; (mov r8, r8)
 800bca0:	ffffefff 	.word	0xffffefff

0800bca4 <__swrite>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	001f      	movs	r7, r3
 800bca8:	898b      	ldrh	r3, [r1, #12]
 800bcaa:	0005      	movs	r5, r0
 800bcac:	000c      	movs	r4, r1
 800bcae:	0016      	movs	r6, r2
 800bcb0:	05db      	lsls	r3, r3, #23
 800bcb2:	d505      	bpl.n	800bcc0 <__swrite+0x1c>
 800bcb4:	230e      	movs	r3, #14
 800bcb6:	5ec9      	ldrsh	r1, [r1, r3]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2302      	movs	r3, #2
 800bcbc:	f000 ffc6 	bl	800cc4c <_lseek_r>
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	4a05      	ldr	r2, [pc, #20]	; (800bcd8 <__swrite+0x34>)
 800bcc4:	0028      	movs	r0, r5
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	0032      	movs	r2, r6
 800bccc:	230e      	movs	r3, #14
 800bcce:	5ee1      	ldrsh	r1, [r4, r3]
 800bcd0:	003b      	movs	r3, r7
 800bcd2:	f000 f81f 	bl	800bd14 <_write_r>
 800bcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd8:	ffffefff 	.word	0xffffefff

0800bcdc <__sseek>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	000c      	movs	r4, r1
 800bce0:	250e      	movs	r5, #14
 800bce2:	5f49      	ldrsh	r1, [r1, r5]
 800bce4:	f000 ffb2 	bl	800cc4c <_lseek_r>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	1c42      	adds	r2, r0, #1
 800bcec:	d103      	bne.n	800bcf6 <__sseek+0x1a>
 800bcee:	4a05      	ldr	r2, [pc, #20]	; (800bd04 <__sseek+0x28>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	bd70      	pop	{r4, r5, r6, pc}
 800bcf6:	2280      	movs	r2, #128	; 0x80
 800bcf8:	0152      	lsls	r2, r2, #5
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	6560      	str	r0, [r4, #84]	; 0x54
 800bd00:	e7f8      	b.n	800bcf4 <__sseek+0x18>
 800bd02:	46c0      	nop			; (mov r8, r8)
 800bd04:	ffffefff 	.word	0xffffefff

0800bd08 <__sclose>:
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	230e      	movs	r3, #14
 800bd0c:	5ec9      	ldrsh	r1, [r1, r3]
 800bd0e:	f000 f815 	bl	800bd3c <_close_r>
 800bd12:	bd10      	pop	{r4, pc}

0800bd14 <_write_r>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	0004      	movs	r4, r0
 800bd18:	0008      	movs	r0, r1
 800bd1a:	0011      	movs	r1, r2
 800bd1c:	001a      	movs	r2, r3
 800bd1e:	2300      	movs	r3, #0
 800bd20:	4d05      	ldr	r5, [pc, #20]	; (800bd38 <_write_r+0x24>)
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	f7f7 fced 	bl	8003702 <_write>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d103      	bne.n	800bd34 <_write_r+0x20>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d000      	beq.n	800bd34 <_write_r+0x20>
 800bd32:	6023      	str	r3, [r4, #0]
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	46c0      	nop			; (mov r8, r8)
 800bd38:	20002d8c 	.word	0x20002d8c

0800bd3c <_close_r>:
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	b570      	push	{r4, r5, r6, lr}
 800bd40:	4d06      	ldr	r5, [pc, #24]	; (800bd5c <_close_r+0x20>)
 800bd42:	0004      	movs	r4, r0
 800bd44:	0008      	movs	r0, r1
 800bd46:	602b      	str	r3, [r5, #0]
 800bd48:	f7f7 fcf7 	bl	800373a <_close>
 800bd4c:	1c43      	adds	r3, r0, #1
 800bd4e:	d103      	bne.n	800bd58 <_close_r+0x1c>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d000      	beq.n	800bd58 <_close_r+0x1c>
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	bd70      	pop	{r4, r5, r6, pc}
 800bd5a:	46c0      	nop			; (mov r8, r8)
 800bd5c:	20002d8c 	.word	0x20002d8c

0800bd60 <quorem>:
 800bd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd62:	0006      	movs	r6, r0
 800bd64:	690b      	ldr	r3, [r1, #16]
 800bd66:	6932      	ldr	r2, [r6, #16]
 800bd68:	b087      	sub	sp, #28
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	9103      	str	r1, [sp, #12]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	db65      	blt.n	800be3e <quorem+0xde>
 800bd72:	3b01      	subs	r3, #1
 800bd74:	009c      	lsls	r4, r3, #2
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	000b      	movs	r3, r1
 800bd7a:	3314      	adds	r3, #20
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	191b      	adds	r3, r3, r4
 800bd80:	9304      	str	r3, [sp, #16]
 800bd82:	0033      	movs	r3, r6
 800bd84:	3314      	adds	r3, #20
 800bd86:	9302      	str	r3, [sp, #8]
 800bd88:	191c      	adds	r4, r3, r4
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	6827      	ldr	r7, [r4, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	0038      	movs	r0, r7
 800bd92:	1c5d      	adds	r5, r3, #1
 800bd94:	0029      	movs	r1, r5
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	f7f4 f9d2 	bl	8000140 <__udivsi3>
 800bd9c:	9001      	str	r0, [sp, #4]
 800bd9e:	42af      	cmp	r7, r5
 800bda0:	d324      	bcc.n	800bdec <quorem+0x8c>
 800bda2:	2500      	movs	r5, #0
 800bda4:	46ac      	mov	ip, r5
 800bda6:	9802      	ldr	r0, [sp, #8]
 800bda8:	9f05      	ldr	r7, [sp, #20]
 800bdaa:	cf08      	ldmia	r7!, {r3}
 800bdac:	9a01      	ldr	r2, [sp, #4]
 800bdae:	b299      	uxth	r1, r3
 800bdb0:	4351      	muls	r1, r2
 800bdb2:	0c1b      	lsrs	r3, r3, #16
 800bdb4:	4353      	muls	r3, r2
 800bdb6:	1949      	adds	r1, r1, r5
 800bdb8:	0c0a      	lsrs	r2, r1, #16
 800bdba:	189b      	adds	r3, r3, r2
 800bdbc:	6802      	ldr	r2, [r0, #0]
 800bdbe:	b289      	uxth	r1, r1
 800bdc0:	b292      	uxth	r2, r2
 800bdc2:	4462      	add	r2, ip
 800bdc4:	1a52      	subs	r2, r2, r1
 800bdc6:	6801      	ldr	r1, [r0, #0]
 800bdc8:	0c1d      	lsrs	r5, r3, #16
 800bdca:	0c09      	lsrs	r1, r1, #16
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	1acb      	subs	r3, r1, r3
 800bdd0:	1411      	asrs	r1, r2, #16
 800bdd2:	185b      	adds	r3, r3, r1
 800bdd4:	1419      	asrs	r1, r3, #16
 800bdd6:	b292      	uxth	r2, r2
 800bdd8:	041b      	lsls	r3, r3, #16
 800bdda:	431a      	orrs	r2, r3
 800bddc:	9b04      	ldr	r3, [sp, #16]
 800bdde:	468c      	mov	ip, r1
 800bde0:	c004      	stmia	r0!, {r2}
 800bde2:	42bb      	cmp	r3, r7
 800bde4:	d2e1      	bcs.n	800bdaa <quorem+0x4a>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d030      	beq.n	800be4e <quorem+0xee>
 800bdec:	0030      	movs	r0, r6
 800bdee:	9903      	ldr	r1, [sp, #12]
 800bdf0:	f001 f9ea 	bl	800d1c8 <__mcmp>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	db21      	blt.n	800be3c <quorem+0xdc>
 800bdf8:	0030      	movs	r0, r6
 800bdfa:	2400      	movs	r4, #0
 800bdfc:	9b01      	ldr	r3, [sp, #4]
 800bdfe:	9903      	ldr	r1, [sp, #12]
 800be00:	3301      	adds	r3, #1
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	3014      	adds	r0, #20
 800be06:	3114      	adds	r1, #20
 800be08:	6803      	ldr	r3, [r0, #0]
 800be0a:	c920      	ldmia	r1!, {r5}
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	1914      	adds	r4, r2, r4
 800be10:	b2aa      	uxth	r2, r5
 800be12:	1aa2      	subs	r2, r4, r2
 800be14:	0c1b      	lsrs	r3, r3, #16
 800be16:	0c2d      	lsrs	r5, r5, #16
 800be18:	1414      	asrs	r4, r2, #16
 800be1a:	1b5b      	subs	r3, r3, r5
 800be1c:	191b      	adds	r3, r3, r4
 800be1e:	141c      	asrs	r4, r3, #16
 800be20:	b292      	uxth	r2, r2
 800be22:	041b      	lsls	r3, r3, #16
 800be24:	4313      	orrs	r3, r2
 800be26:	c008      	stmia	r0!, {r3}
 800be28:	9b04      	ldr	r3, [sp, #16]
 800be2a:	428b      	cmp	r3, r1
 800be2c:	d2ec      	bcs.n	800be08 <quorem+0xa8>
 800be2e:	9b00      	ldr	r3, [sp, #0]
 800be30:	9a02      	ldr	r2, [sp, #8]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	18d3      	adds	r3, r2, r3
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	2a00      	cmp	r2, #0
 800be3a:	d015      	beq.n	800be68 <quorem+0x108>
 800be3c:	9801      	ldr	r0, [sp, #4]
 800be3e:	b007      	add	sp, #28
 800be40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <quorem+0xf6>
 800be48:	9b00      	ldr	r3, [sp, #0]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	9b02      	ldr	r3, [sp, #8]
 800be50:	3c04      	subs	r4, #4
 800be52:	42a3      	cmp	r3, r4
 800be54:	d3f5      	bcc.n	800be42 <quorem+0xe2>
 800be56:	9b00      	ldr	r3, [sp, #0]
 800be58:	6133      	str	r3, [r6, #16]
 800be5a:	e7c7      	b.n	800bdec <quorem+0x8c>
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	2a00      	cmp	r2, #0
 800be60:	d106      	bne.n	800be70 <quorem+0x110>
 800be62:	9a00      	ldr	r2, [sp, #0]
 800be64:	3a01      	subs	r2, #1
 800be66:	9200      	str	r2, [sp, #0]
 800be68:	9a02      	ldr	r2, [sp, #8]
 800be6a:	3b04      	subs	r3, #4
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3f5      	bcc.n	800be5c <quorem+0xfc>
 800be70:	9b00      	ldr	r3, [sp, #0]
 800be72:	6133      	str	r3, [r6, #16]
 800be74:	e7e2      	b.n	800be3c <quorem+0xdc>
	...

0800be78 <_dtoa_r>:
 800be78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be7a:	b09d      	sub	sp, #116	; 0x74
 800be7c:	9202      	str	r2, [sp, #8]
 800be7e:	9303      	str	r3, [sp, #12]
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	9c03      	ldr	r4, [sp, #12]
 800be84:	9308      	str	r3, [sp, #32]
 800be86:	9409      	str	r4, [sp, #36]	; 0x24
 800be88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800be8a:	0007      	movs	r7, r0
 800be8c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800be8e:	2c00      	cmp	r4, #0
 800be90:	d10e      	bne.n	800beb0 <_dtoa_r+0x38>
 800be92:	2010      	movs	r0, #16
 800be94:	f000 feee 	bl	800cc74 <malloc>
 800be98:	1e02      	subs	r2, r0, #0
 800be9a:	6278      	str	r0, [r7, #36]	; 0x24
 800be9c:	d104      	bne.n	800bea8 <_dtoa_r+0x30>
 800be9e:	21ea      	movs	r1, #234	; 0xea
 800bea0:	4bc7      	ldr	r3, [pc, #796]	; (800c1c0 <_dtoa_r+0x348>)
 800bea2:	48c8      	ldr	r0, [pc, #800]	; (800c1c4 <_dtoa_r+0x34c>)
 800bea4:	f001 fc94 	bl	800d7d0 <__assert_func>
 800bea8:	6044      	str	r4, [r0, #4]
 800beaa:	6084      	str	r4, [r0, #8]
 800beac:	6004      	str	r4, [r0, #0]
 800beae:	60c4      	str	r4, [r0, #12]
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	6819      	ldr	r1, [r3, #0]
 800beb4:	2900      	cmp	r1, #0
 800beb6:	d00a      	beq.n	800bece <_dtoa_r+0x56>
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	2301      	movs	r3, #1
 800bebc:	4093      	lsls	r3, r2
 800bebe:	604a      	str	r2, [r1, #4]
 800bec0:	608b      	str	r3, [r1, #8]
 800bec2:	0038      	movs	r0, r7
 800bec4:	f000 ff40 	bl	800cd48 <_Bfree>
 800bec8:	2200      	movs	r2, #0
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	9b03      	ldr	r3, [sp, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	da20      	bge.n	800bf16 <_dtoa_r+0x9e>
 800bed4:	2301      	movs	r3, #1
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	9b03      	ldr	r3, [sp, #12]
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	085b      	lsrs	r3, r3, #1
 800bede:	9309      	str	r3, [sp, #36]	; 0x24
 800bee0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bee2:	4bb9      	ldr	r3, [pc, #740]	; (800c1c8 <_dtoa_r+0x350>)
 800bee4:	4ab8      	ldr	r2, [pc, #736]	; (800c1c8 <_dtoa_r+0x350>)
 800bee6:	402b      	ands	r3, r5
 800bee8:	4293      	cmp	r3, r2
 800beea:	d117      	bne.n	800bf1c <_dtoa_r+0xa4>
 800beec:	4bb7      	ldr	r3, [pc, #732]	; (800c1cc <_dtoa_r+0x354>)
 800beee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bef0:	0328      	lsls	r0, r5, #12
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	9b02      	ldr	r3, [sp, #8]
 800bef6:	0b00      	lsrs	r0, r0, #12
 800bef8:	4318      	orrs	r0, r3
 800befa:	d101      	bne.n	800bf00 <_dtoa_r+0x88>
 800befc:	f000 fdbf 	bl	800ca7e <_dtoa_r+0xc06>
 800bf00:	48b3      	ldr	r0, [pc, #716]	; (800c1d0 <_dtoa_r+0x358>)
 800bf02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf04:	9006      	str	r0, [sp, #24]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <_dtoa_r+0x98>
 800bf0a:	4bb2      	ldr	r3, [pc, #712]	; (800c1d4 <_dtoa_r+0x35c>)
 800bf0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bf0e:	6013      	str	r3, [r2, #0]
 800bf10:	9806      	ldr	r0, [sp, #24]
 800bf12:	b01d      	add	sp, #116	; 0x74
 800bf14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf16:	2300      	movs	r3, #0
 800bf18:	602b      	str	r3, [r5, #0]
 800bf1a:	e7e1      	b.n	800bee0 <_dtoa_r+0x68>
 800bf1c:	9b08      	ldr	r3, [sp, #32]
 800bf1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bf20:	9312      	str	r3, [sp, #72]	; 0x48
 800bf22:	9413      	str	r4, [sp, #76]	; 0x4c
 800bf24:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f7f4 fa8e 	bl	800044c <__aeabi_dcmpeq>
 800bf30:	1e04      	subs	r4, r0, #0
 800bf32:	d009      	beq.n	800bf48 <_dtoa_r+0xd0>
 800bf34:	2301      	movs	r3, #1
 800bf36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	4ba7      	ldr	r3, [pc, #668]	; (800c1d8 <_dtoa_r+0x360>)
 800bf3c:	9306      	str	r3, [sp, #24]
 800bf3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0e5      	beq.n	800bf10 <_dtoa_r+0x98>
 800bf44:	4ba5      	ldr	r3, [pc, #660]	; (800c1dc <_dtoa_r+0x364>)
 800bf46:	e7e1      	b.n	800bf0c <_dtoa_r+0x94>
 800bf48:	ab1a      	add	r3, sp, #104	; 0x68
 800bf4a:	9301      	str	r3, [sp, #4]
 800bf4c:	ab1b      	add	r3, sp, #108	; 0x6c
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	0038      	movs	r0, r7
 800bf52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf56:	f001 f9eb 	bl	800d330 <__d2b>
 800bf5a:	006e      	lsls	r6, r5, #1
 800bf5c:	9005      	str	r0, [sp, #20]
 800bf5e:	0d76      	lsrs	r6, r6, #21
 800bf60:	d100      	bne.n	800bf64 <_dtoa_r+0xec>
 800bf62:	e07c      	b.n	800c05e <_dtoa_r+0x1e6>
 800bf64:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf6a:	4a9d      	ldr	r2, [pc, #628]	; (800c1e0 <_dtoa_r+0x368>)
 800bf6c:	031b      	lsls	r3, r3, #12
 800bf6e:	0b1b      	lsrs	r3, r3, #12
 800bf70:	431a      	orrs	r2, r3
 800bf72:	0011      	movs	r1, r2
 800bf74:	4b9b      	ldr	r3, [pc, #620]	; (800c1e4 <_dtoa_r+0x36c>)
 800bf76:	9418      	str	r4, [sp, #96]	; 0x60
 800bf78:	18f6      	adds	r6, r6, r3
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	4b9a      	ldr	r3, [pc, #616]	; (800c1e8 <_dtoa_r+0x370>)
 800bf7e:	f7f5 fe8f 	bl	8001ca0 <__aeabi_dsub>
 800bf82:	4a9a      	ldr	r2, [pc, #616]	; (800c1ec <_dtoa_r+0x374>)
 800bf84:	4b9a      	ldr	r3, [pc, #616]	; (800c1f0 <_dtoa_r+0x378>)
 800bf86:	f7f5 fc1f 	bl	80017c8 <__aeabi_dmul>
 800bf8a:	4a9a      	ldr	r2, [pc, #616]	; (800c1f4 <_dtoa_r+0x37c>)
 800bf8c:	4b9a      	ldr	r3, [pc, #616]	; (800c1f8 <_dtoa_r+0x380>)
 800bf8e:	f7f4 fcdd 	bl	800094c <__aeabi_dadd>
 800bf92:	0004      	movs	r4, r0
 800bf94:	0030      	movs	r0, r6
 800bf96:	000d      	movs	r5, r1
 800bf98:	f7f6 fa68 	bl	800246c <__aeabi_i2d>
 800bf9c:	4a97      	ldr	r2, [pc, #604]	; (800c1fc <_dtoa_r+0x384>)
 800bf9e:	4b98      	ldr	r3, [pc, #608]	; (800c200 <_dtoa_r+0x388>)
 800bfa0:	f7f5 fc12 	bl	80017c8 <__aeabi_dmul>
 800bfa4:	0002      	movs	r2, r0
 800bfa6:	000b      	movs	r3, r1
 800bfa8:	0020      	movs	r0, r4
 800bfaa:	0029      	movs	r1, r5
 800bfac:	f7f4 fcce 	bl	800094c <__aeabi_dadd>
 800bfb0:	0004      	movs	r4, r0
 800bfb2:	000d      	movs	r5, r1
 800bfb4:	f7f6 fa24 	bl	8002400 <__aeabi_d2iz>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	9002      	str	r0, [sp, #8]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	0020      	movs	r0, r4
 800bfc0:	0029      	movs	r1, r5
 800bfc2:	f7f4 fa49 	bl	8000458 <__aeabi_dcmplt>
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d00b      	beq.n	800bfe2 <_dtoa_r+0x16a>
 800bfca:	9802      	ldr	r0, [sp, #8]
 800bfcc:	f7f6 fa4e 	bl	800246c <__aeabi_i2d>
 800bfd0:	002b      	movs	r3, r5
 800bfd2:	0022      	movs	r2, r4
 800bfd4:	f7f4 fa3a 	bl	800044c <__aeabi_dcmpeq>
 800bfd8:	4243      	negs	r3, r0
 800bfda:	4158      	adcs	r0, r3
 800bfdc:	9b02      	ldr	r3, [sp, #8]
 800bfde:	1a1b      	subs	r3, r3, r0
 800bfe0:	9302      	str	r3, [sp, #8]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	9316      	str	r3, [sp, #88]	; 0x58
 800bfe6:	9b02      	ldr	r3, [sp, #8]
 800bfe8:	2b16      	cmp	r3, #22
 800bfea:	d80f      	bhi.n	800c00c <_dtoa_r+0x194>
 800bfec:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bfee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bff0:	00da      	lsls	r2, r3, #3
 800bff2:	4b84      	ldr	r3, [pc, #528]	; (800c204 <_dtoa_r+0x38c>)
 800bff4:	189b      	adds	r3, r3, r2
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	f7f4 fa2d 	bl	8000458 <__aeabi_dcmplt>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d049      	beq.n	800c096 <_dtoa_r+0x21e>
 800c002:	9b02      	ldr	r3, [sp, #8]
 800c004:	3b01      	subs	r3, #1
 800c006:	9302      	str	r3, [sp, #8]
 800c008:	2300      	movs	r3, #0
 800c00a:	9316      	str	r3, [sp, #88]	; 0x58
 800c00c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c00e:	1b9e      	subs	r6, r3, r6
 800c010:	2300      	movs	r3, #0
 800c012:	930a      	str	r3, [sp, #40]	; 0x28
 800c014:	0033      	movs	r3, r6
 800c016:	3b01      	subs	r3, #1
 800c018:	930d      	str	r3, [sp, #52]	; 0x34
 800c01a:	d504      	bpl.n	800c026 <_dtoa_r+0x1ae>
 800c01c:	2301      	movs	r3, #1
 800c01e:	1b9b      	subs	r3, r3, r6
 800c020:	930a      	str	r3, [sp, #40]	; 0x28
 800c022:	2300      	movs	r3, #0
 800c024:	930d      	str	r3, [sp, #52]	; 0x34
 800c026:	9b02      	ldr	r3, [sp, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	db36      	blt.n	800c09a <_dtoa_r+0x222>
 800c02c:	9a02      	ldr	r2, [sp, #8]
 800c02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c030:	4694      	mov	ip, r2
 800c032:	4463      	add	r3, ip
 800c034:	930d      	str	r3, [sp, #52]	; 0x34
 800c036:	2300      	movs	r3, #0
 800c038:	9215      	str	r2, [sp, #84]	; 0x54
 800c03a:	930e      	str	r3, [sp, #56]	; 0x38
 800c03c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c03e:	2401      	movs	r4, #1
 800c040:	2b09      	cmp	r3, #9
 800c042:	d864      	bhi.n	800c10e <_dtoa_r+0x296>
 800c044:	2b05      	cmp	r3, #5
 800c046:	dd02      	ble.n	800c04e <_dtoa_r+0x1d6>
 800c048:	2400      	movs	r4, #0
 800c04a:	3b04      	subs	r3, #4
 800c04c:	9322      	str	r3, [sp, #136]	; 0x88
 800c04e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c050:	1e98      	subs	r0, r3, #2
 800c052:	2803      	cmp	r0, #3
 800c054:	d864      	bhi.n	800c120 <_dtoa_r+0x2a8>
 800c056:	f7f4 f85f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c05a:	3829      	.short	0x3829
 800c05c:	5836      	.short	0x5836
 800c05e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c060:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c062:	189e      	adds	r6, r3, r2
 800c064:	4b68      	ldr	r3, [pc, #416]	; (800c208 <_dtoa_r+0x390>)
 800c066:	18f2      	adds	r2, r6, r3
 800c068:	2a20      	cmp	r2, #32
 800c06a:	dd0f      	ble.n	800c08c <_dtoa_r+0x214>
 800c06c:	2340      	movs	r3, #64	; 0x40
 800c06e:	1a9b      	subs	r3, r3, r2
 800c070:	409d      	lsls	r5, r3
 800c072:	4b66      	ldr	r3, [pc, #408]	; (800c20c <_dtoa_r+0x394>)
 800c074:	9802      	ldr	r0, [sp, #8]
 800c076:	18f3      	adds	r3, r6, r3
 800c078:	40d8      	lsrs	r0, r3
 800c07a:	4328      	orrs	r0, r5
 800c07c:	f7f6 fa26 	bl	80024cc <__aeabi_ui2d>
 800c080:	2301      	movs	r3, #1
 800c082:	4c63      	ldr	r4, [pc, #396]	; (800c210 <_dtoa_r+0x398>)
 800c084:	3e01      	subs	r6, #1
 800c086:	1909      	adds	r1, r1, r4
 800c088:	9318      	str	r3, [sp, #96]	; 0x60
 800c08a:	e776      	b.n	800bf7a <_dtoa_r+0x102>
 800c08c:	2320      	movs	r3, #32
 800c08e:	9802      	ldr	r0, [sp, #8]
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	4098      	lsls	r0, r3
 800c094:	e7f2      	b.n	800c07c <_dtoa_r+0x204>
 800c096:	9016      	str	r0, [sp, #88]	; 0x58
 800c098:	e7b8      	b.n	800c00c <_dtoa_r+0x194>
 800c09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c09c:	9a02      	ldr	r2, [sp, #8]
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	930a      	str	r3, [sp, #40]	; 0x28
 800c0a2:	4253      	negs	r3, r2
 800c0a4:	930e      	str	r3, [sp, #56]	; 0x38
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	9315      	str	r3, [sp, #84]	; 0x54
 800c0aa:	e7c7      	b.n	800c03c <_dtoa_r+0x1c4>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c0b4:	9307      	str	r3, [sp, #28]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	dc13      	bgt.n	800c0e2 <_dtoa_r+0x26a>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	001a      	movs	r2, r3
 800c0be:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c0:	9307      	str	r3, [sp, #28]
 800c0c2:	9223      	str	r2, [sp, #140]	; 0x8c
 800c0c4:	e00d      	b.n	800c0e2 <_dtoa_r+0x26a>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e7f1      	b.n	800c0ae <_dtoa_r+0x236>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0d0:	4694      	mov	ip, r2
 800c0d2:	9b02      	ldr	r3, [sp, #8]
 800c0d4:	4463      	add	r3, ip
 800c0d6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0d8:	3301      	adds	r3, #1
 800c0da:	9307      	str	r3, [sp, #28]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	dc00      	bgt.n	800c0e2 <_dtoa_r+0x26a>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0e6:	6042      	str	r2, [r0, #4]
 800c0e8:	3204      	adds	r2, #4
 800c0ea:	0015      	movs	r5, r2
 800c0ec:	3514      	adds	r5, #20
 800c0ee:	6841      	ldr	r1, [r0, #4]
 800c0f0:	429d      	cmp	r5, r3
 800c0f2:	d919      	bls.n	800c128 <_dtoa_r+0x2b0>
 800c0f4:	0038      	movs	r0, r7
 800c0f6:	f000 fde3 	bl	800ccc0 <_Balloc>
 800c0fa:	9006      	str	r0, [sp, #24]
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d117      	bne.n	800c130 <_dtoa_r+0x2b8>
 800c100:	21d5      	movs	r1, #213	; 0xd5
 800c102:	0002      	movs	r2, r0
 800c104:	4b43      	ldr	r3, [pc, #268]	; (800c214 <_dtoa_r+0x39c>)
 800c106:	0049      	lsls	r1, r1, #1
 800c108:	e6cb      	b.n	800bea2 <_dtoa_r+0x2a>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e7de      	b.n	800c0cc <_dtoa_r+0x254>
 800c10e:	2300      	movs	r3, #0
 800c110:	940f      	str	r4, [sp, #60]	; 0x3c
 800c112:	9322      	str	r3, [sp, #136]	; 0x88
 800c114:	3b01      	subs	r3, #1
 800c116:	930c      	str	r3, [sp, #48]	; 0x30
 800c118:	9307      	str	r3, [sp, #28]
 800c11a:	2200      	movs	r2, #0
 800c11c:	3313      	adds	r3, #19
 800c11e:	e7d0      	b.n	800c0c2 <_dtoa_r+0x24a>
 800c120:	2301      	movs	r3, #1
 800c122:	930f      	str	r3, [sp, #60]	; 0x3c
 800c124:	3b02      	subs	r3, #2
 800c126:	e7f6      	b.n	800c116 <_dtoa_r+0x29e>
 800c128:	3101      	adds	r1, #1
 800c12a:	6041      	str	r1, [r0, #4]
 800c12c:	0052      	lsls	r2, r2, #1
 800c12e:	e7dc      	b.n	800c0ea <_dtoa_r+0x272>
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	9a06      	ldr	r2, [sp, #24]
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	9b07      	ldr	r3, [sp, #28]
 800c138:	2b0e      	cmp	r3, #14
 800c13a:	d900      	bls.n	800c13e <_dtoa_r+0x2c6>
 800c13c:	e0eb      	b.n	800c316 <_dtoa_r+0x49e>
 800c13e:	2c00      	cmp	r4, #0
 800c140:	d100      	bne.n	800c144 <_dtoa_r+0x2cc>
 800c142:	e0e8      	b.n	800c316 <_dtoa_r+0x49e>
 800c144:	9b02      	ldr	r3, [sp, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	dd68      	ble.n	800c21c <_dtoa_r+0x3a4>
 800c14a:	001a      	movs	r2, r3
 800c14c:	210f      	movs	r1, #15
 800c14e:	4b2d      	ldr	r3, [pc, #180]	; (800c204 <_dtoa_r+0x38c>)
 800c150:	400a      	ands	r2, r1
 800c152:	00d2      	lsls	r2, r2, #3
 800c154:	189b      	adds	r3, r3, r2
 800c156:	681d      	ldr	r5, [r3, #0]
 800c158:	685e      	ldr	r6, [r3, #4]
 800c15a:	9b02      	ldr	r3, [sp, #8]
 800c15c:	111c      	asrs	r4, r3, #4
 800c15e:	2302      	movs	r3, #2
 800c160:	9310      	str	r3, [sp, #64]	; 0x40
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	05db      	lsls	r3, r3, #23
 800c166:	d50b      	bpl.n	800c180 <_dtoa_r+0x308>
 800c168:	4b2b      	ldr	r3, [pc, #172]	; (800c218 <_dtoa_r+0x3a0>)
 800c16a:	400c      	ands	r4, r1
 800c16c:	6a1a      	ldr	r2, [r3, #32]
 800c16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c170:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c172:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c174:	f7f4 ff26 	bl	8000fc4 <__aeabi_ddiv>
 800c178:	2303      	movs	r3, #3
 800c17a:	9008      	str	r0, [sp, #32]
 800c17c:	9109      	str	r1, [sp, #36]	; 0x24
 800c17e:	9310      	str	r3, [sp, #64]	; 0x40
 800c180:	4b25      	ldr	r3, [pc, #148]	; (800c218 <_dtoa_r+0x3a0>)
 800c182:	9314      	str	r3, [sp, #80]	; 0x50
 800c184:	2c00      	cmp	r4, #0
 800c186:	d108      	bne.n	800c19a <_dtoa_r+0x322>
 800c188:	9808      	ldr	r0, [sp, #32]
 800c18a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c18c:	002a      	movs	r2, r5
 800c18e:	0033      	movs	r3, r6
 800c190:	f7f4 ff18 	bl	8000fc4 <__aeabi_ddiv>
 800c194:	9008      	str	r0, [sp, #32]
 800c196:	9109      	str	r1, [sp, #36]	; 0x24
 800c198:	e05c      	b.n	800c254 <_dtoa_r+0x3dc>
 800c19a:	2301      	movs	r3, #1
 800c19c:	421c      	tst	r4, r3
 800c19e:	d00b      	beq.n	800c1b8 <_dtoa_r+0x340>
 800c1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1a2:	0028      	movs	r0, r5
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	9310      	str	r3, [sp, #64]	; 0x40
 800c1a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1aa:	0031      	movs	r1, r6
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	f7f5 fb0a 	bl	80017c8 <__aeabi_dmul>
 800c1b4:	0005      	movs	r5, r0
 800c1b6:	000e      	movs	r6, r1
 800c1b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1ba:	1064      	asrs	r4, r4, #1
 800c1bc:	3308      	adds	r3, #8
 800c1be:	e7e0      	b.n	800c182 <_dtoa_r+0x30a>
 800c1c0:	0800e359 	.word	0x0800e359
 800c1c4:	0800e370 	.word	0x0800e370
 800c1c8:	7ff00000 	.word	0x7ff00000
 800c1cc:	0000270f 	.word	0x0000270f
 800c1d0:	0800e355 	.word	0x0800e355
 800c1d4:	0800e358 	.word	0x0800e358
 800c1d8:	0800e328 	.word	0x0800e328
 800c1dc:	0800e329 	.word	0x0800e329
 800c1e0:	3ff00000 	.word	0x3ff00000
 800c1e4:	fffffc01 	.word	0xfffffc01
 800c1e8:	3ff80000 	.word	0x3ff80000
 800c1ec:	636f4361 	.word	0x636f4361
 800c1f0:	3fd287a7 	.word	0x3fd287a7
 800c1f4:	8b60c8b3 	.word	0x8b60c8b3
 800c1f8:	3fc68a28 	.word	0x3fc68a28
 800c1fc:	509f79fb 	.word	0x509f79fb
 800c200:	3fd34413 	.word	0x3fd34413
 800c204:	0800e460 	.word	0x0800e460
 800c208:	00000432 	.word	0x00000432
 800c20c:	00000412 	.word	0x00000412
 800c210:	fe100000 	.word	0xfe100000
 800c214:	0800e3cb 	.word	0x0800e3cb
 800c218:	0800e438 	.word	0x0800e438
 800c21c:	2302      	movs	r3, #2
 800c21e:	9310      	str	r3, [sp, #64]	; 0x40
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d016      	beq.n	800c254 <_dtoa_r+0x3dc>
 800c226:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c228:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800c22a:	425c      	negs	r4, r3
 800c22c:	230f      	movs	r3, #15
 800c22e:	4ab6      	ldr	r2, [pc, #728]	; (800c508 <_dtoa_r+0x690>)
 800c230:	4023      	ands	r3, r4
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	18d3      	adds	r3, r2, r3
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f7f5 fac5 	bl	80017c8 <__aeabi_dmul>
 800c23e:	2601      	movs	r6, #1
 800c240:	2300      	movs	r3, #0
 800c242:	9008      	str	r0, [sp, #32]
 800c244:	9109      	str	r1, [sp, #36]	; 0x24
 800c246:	4db1      	ldr	r5, [pc, #708]	; (800c50c <_dtoa_r+0x694>)
 800c248:	1124      	asrs	r4, r4, #4
 800c24a:	2c00      	cmp	r4, #0
 800c24c:	d000      	beq.n	800c250 <_dtoa_r+0x3d8>
 800c24e:	e094      	b.n	800c37a <_dtoa_r+0x502>
 800c250:	2b00      	cmp	r3, #0
 800c252:	d19f      	bne.n	800c194 <_dtoa_r+0x31c>
 800c254:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c256:	2b00      	cmp	r3, #0
 800c258:	d100      	bne.n	800c25c <_dtoa_r+0x3e4>
 800c25a:	e09b      	b.n	800c394 <_dtoa_r+0x51c>
 800c25c:	9c08      	ldr	r4, [sp, #32]
 800c25e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c260:	2200      	movs	r2, #0
 800c262:	0020      	movs	r0, r4
 800c264:	0029      	movs	r1, r5
 800c266:	4baa      	ldr	r3, [pc, #680]	; (800c510 <_dtoa_r+0x698>)
 800c268:	f7f4 f8f6 	bl	8000458 <__aeabi_dcmplt>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d100      	bne.n	800c272 <_dtoa_r+0x3fa>
 800c270:	e090      	b.n	800c394 <_dtoa_r+0x51c>
 800c272:	9b07      	ldr	r3, [sp, #28]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d100      	bne.n	800c27a <_dtoa_r+0x402>
 800c278:	e08c      	b.n	800c394 <_dtoa_r+0x51c>
 800c27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dd46      	ble.n	800c30e <_dtoa_r+0x496>
 800c280:	9b02      	ldr	r3, [sp, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	0020      	movs	r0, r4
 800c286:	0029      	movs	r1, r5
 800c288:	1e5e      	subs	r6, r3, #1
 800c28a:	4ba2      	ldr	r3, [pc, #648]	; (800c514 <_dtoa_r+0x69c>)
 800c28c:	f7f5 fa9c 	bl	80017c8 <__aeabi_dmul>
 800c290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c292:	9008      	str	r0, [sp, #32]
 800c294:	9109      	str	r1, [sp, #36]	; 0x24
 800c296:	3301      	adds	r3, #1
 800c298:	9310      	str	r3, [sp, #64]	; 0x40
 800c29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c29c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c29e:	9c08      	ldr	r4, [sp, #32]
 800c2a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c2a2:	9314      	str	r3, [sp, #80]	; 0x50
 800c2a4:	f7f6 f8e2 	bl	800246c <__aeabi_i2d>
 800c2a8:	0022      	movs	r2, r4
 800c2aa:	002b      	movs	r3, r5
 800c2ac:	f7f5 fa8c 	bl	80017c8 <__aeabi_dmul>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4b99      	ldr	r3, [pc, #612]	; (800c518 <_dtoa_r+0x6a0>)
 800c2b4:	f7f4 fb4a 	bl	800094c <__aeabi_dadd>
 800c2b8:	9010      	str	r0, [sp, #64]	; 0x40
 800c2ba:	9111      	str	r1, [sp, #68]	; 0x44
 800c2bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c2be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2c0:	9208      	str	r2, [sp, #32]
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	4a95      	ldr	r2, [pc, #596]	; (800c51c <_dtoa_r+0x6a4>)
 800c2c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2c8:	4694      	mov	ip, r2
 800c2ca:	4463      	add	r3, ip
 800c2cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d161      	bne.n	800c39a <_dtoa_r+0x522>
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	0020      	movs	r0, r4
 800c2da:	0029      	movs	r1, r5
 800c2dc:	4b90      	ldr	r3, [pc, #576]	; (800c520 <_dtoa_r+0x6a8>)
 800c2de:	f7f5 fcdf 	bl	8001ca0 <__aeabi_dsub>
 800c2e2:	9a08      	ldr	r2, [sp, #32]
 800c2e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2e6:	0004      	movs	r4, r0
 800c2e8:	000d      	movs	r5, r1
 800c2ea:	f7f4 f8c9 	bl	8000480 <__aeabi_dcmpgt>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d000      	beq.n	800c2f4 <_dtoa_r+0x47c>
 800c2f2:	e2af      	b.n	800c854 <_dtoa_r+0x9dc>
 800c2f4:	488b      	ldr	r0, [pc, #556]	; (800c524 <_dtoa_r+0x6ac>)
 800c2f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c2f8:	4684      	mov	ip, r0
 800c2fa:	4461      	add	r1, ip
 800c2fc:	000b      	movs	r3, r1
 800c2fe:	0020      	movs	r0, r4
 800c300:	0029      	movs	r1, r5
 800c302:	9a08      	ldr	r2, [sp, #32]
 800c304:	f7f4 f8a8 	bl	8000458 <__aeabi_dcmplt>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d000      	beq.n	800c30e <_dtoa_r+0x496>
 800c30c:	e29f      	b.n	800c84e <_dtoa_r+0x9d6>
 800c30e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c310:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c312:	9308      	str	r3, [sp, #32]
 800c314:	9409      	str	r4, [sp, #36]	; 0x24
 800c316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	da00      	bge.n	800c31e <_dtoa_r+0x4a6>
 800c31c:	e172      	b.n	800c604 <_dtoa_r+0x78c>
 800c31e:	9a02      	ldr	r2, [sp, #8]
 800c320:	2a0e      	cmp	r2, #14
 800c322:	dd00      	ble.n	800c326 <_dtoa_r+0x4ae>
 800c324:	e16e      	b.n	800c604 <_dtoa_r+0x78c>
 800c326:	4b78      	ldr	r3, [pc, #480]	; (800c508 <_dtoa_r+0x690>)
 800c328:	00d2      	lsls	r2, r2, #3
 800c32a:	189b      	adds	r3, r3, r2
 800c32c:	685c      	ldr	r4, [r3, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	930a      	str	r3, [sp, #40]	; 0x28
 800c332:	940b      	str	r4, [sp, #44]	; 0x2c
 800c334:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c336:	2b00      	cmp	r3, #0
 800c338:	db00      	blt.n	800c33c <_dtoa_r+0x4c4>
 800c33a:	e0f7      	b.n	800c52c <_dtoa_r+0x6b4>
 800c33c:	9b07      	ldr	r3, [sp, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	dd00      	ble.n	800c344 <_dtoa_r+0x4cc>
 800c342:	e0f3      	b.n	800c52c <_dtoa_r+0x6b4>
 800c344:	d000      	beq.n	800c348 <_dtoa_r+0x4d0>
 800c346:	e282      	b.n	800c84e <_dtoa_r+0x9d6>
 800c348:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c34a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c34c:	2200      	movs	r2, #0
 800c34e:	4b74      	ldr	r3, [pc, #464]	; (800c520 <_dtoa_r+0x6a8>)
 800c350:	f7f5 fa3a 	bl	80017c8 <__aeabi_dmul>
 800c354:	9a08      	ldr	r2, [sp, #32]
 800c356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c358:	f7f4 f89c 	bl	8000494 <__aeabi_dcmpge>
 800c35c:	9e07      	ldr	r6, [sp, #28]
 800c35e:	0035      	movs	r5, r6
 800c360:	2800      	cmp	r0, #0
 800c362:	d000      	beq.n	800c366 <_dtoa_r+0x4ee>
 800c364:	e259      	b.n	800c81a <_dtoa_r+0x9a2>
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	9a06      	ldr	r2, [sp, #24]
 800c36a:	3301      	adds	r3, #1
 800c36c:	9308      	str	r3, [sp, #32]
 800c36e:	2331      	movs	r3, #49	; 0x31
 800c370:	7013      	strb	r3, [r2, #0]
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	3301      	adds	r3, #1
 800c376:	9302      	str	r3, [sp, #8]
 800c378:	e254      	b.n	800c824 <_dtoa_r+0x9ac>
 800c37a:	4234      	tst	r4, r6
 800c37c:	d007      	beq.n	800c38e <_dtoa_r+0x516>
 800c37e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c380:	3301      	adds	r3, #1
 800c382:	9310      	str	r3, [sp, #64]	; 0x40
 800c384:	682a      	ldr	r2, [r5, #0]
 800c386:	686b      	ldr	r3, [r5, #4]
 800c388:	f7f5 fa1e 	bl	80017c8 <__aeabi_dmul>
 800c38c:	0033      	movs	r3, r6
 800c38e:	1064      	asrs	r4, r4, #1
 800c390:	3508      	adds	r5, #8
 800c392:	e75a      	b.n	800c24a <_dtoa_r+0x3d2>
 800c394:	9e02      	ldr	r6, [sp, #8]
 800c396:	9b07      	ldr	r3, [sp, #28]
 800c398:	e780      	b.n	800c29c <_dtoa_r+0x424>
 800c39a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c39c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c39e:	1e5a      	subs	r2, r3, #1
 800c3a0:	4b59      	ldr	r3, [pc, #356]	; (800c508 <_dtoa_r+0x690>)
 800c3a2:	00d2      	lsls	r2, r2, #3
 800c3a4:	189b      	adds	r3, r3, r2
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	2900      	cmp	r1, #0
 800c3ac:	d051      	beq.n	800c452 <_dtoa_r+0x5da>
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	495d      	ldr	r1, [pc, #372]	; (800c528 <_dtoa_r+0x6b0>)
 800c3b2:	f7f4 fe07 	bl	8000fc4 <__aeabi_ddiv>
 800c3b6:	9a08      	ldr	r2, [sp, #32]
 800c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ba:	f7f5 fc71 	bl	8001ca0 <__aeabi_dsub>
 800c3be:	9a06      	ldr	r2, [sp, #24]
 800c3c0:	9b06      	ldr	r3, [sp, #24]
 800c3c2:	4694      	mov	ip, r2
 800c3c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3c8:	9010      	str	r0, [sp, #64]	; 0x40
 800c3ca:	9111      	str	r1, [sp, #68]	; 0x44
 800c3cc:	4463      	add	r3, ip
 800c3ce:	9319      	str	r3, [sp, #100]	; 0x64
 800c3d0:	0029      	movs	r1, r5
 800c3d2:	0020      	movs	r0, r4
 800c3d4:	f7f6 f814 	bl	8002400 <__aeabi_d2iz>
 800c3d8:	9014      	str	r0, [sp, #80]	; 0x50
 800c3da:	f7f6 f847 	bl	800246c <__aeabi_i2d>
 800c3de:	0002      	movs	r2, r0
 800c3e0:	000b      	movs	r3, r1
 800c3e2:	0020      	movs	r0, r4
 800c3e4:	0029      	movs	r1, r5
 800c3e6:	f7f5 fc5b 	bl	8001ca0 <__aeabi_dsub>
 800c3ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	9308      	str	r3, [sp, #32]
 800c3f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3f4:	0004      	movs	r4, r0
 800c3f6:	3330      	adds	r3, #48	; 0x30
 800c3f8:	7013      	strb	r3, [r2, #0]
 800c3fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c3fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3fe:	000d      	movs	r5, r1
 800c400:	f7f4 f82a 	bl	8000458 <__aeabi_dcmplt>
 800c404:	2800      	cmp	r0, #0
 800c406:	d175      	bne.n	800c4f4 <_dtoa_r+0x67c>
 800c408:	0022      	movs	r2, r4
 800c40a:	002b      	movs	r3, r5
 800c40c:	2000      	movs	r0, #0
 800c40e:	4940      	ldr	r1, [pc, #256]	; (800c510 <_dtoa_r+0x698>)
 800c410:	f7f5 fc46 	bl	8001ca0 <__aeabi_dsub>
 800c414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c418:	f7f4 f81e 	bl	8000458 <__aeabi_dcmplt>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d000      	beq.n	800c422 <_dtoa_r+0x5aa>
 800c420:	e0d2      	b.n	800c5c8 <_dtoa_r+0x750>
 800c422:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c424:	9a08      	ldr	r2, [sp, #32]
 800c426:	4293      	cmp	r3, r2
 800c428:	d100      	bne.n	800c42c <_dtoa_r+0x5b4>
 800c42a:	e770      	b.n	800c30e <_dtoa_r+0x496>
 800c42c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c42e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c430:	2200      	movs	r2, #0
 800c432:	4b38      	ldr	r3, [pc, #224]	; (800c514 <_dtoa_r+0x69c>)
 800c434:	f7f5 f9c8 	bl	80017c8 <__aeabi_dmul>
 800c438:	4b36      	ldr	r3, [pc, #216]	; (800c514 <_dtoa_r+0x69c>)
 800c43a:	9010      	str	r0, [sp, #64]	; 0x40
 800c43c:	9111      	str	r1, [sp, #68]	; 0x44
 800c43e:	2200      	movs	r2, #0
 800c440:	0020      	movs	r0, r4
 800c442:	0029      	movs	r1, r5
 800c444:	f7f5 f9c0 	bl	80017c8 <__aeabi_dmul>
 800c448:	9b08      	ldr	r3, [sp, #32]
 800c44a:	0004      	movs	r4, r0
 800c44c:	000d      	movs	r5, r1
 800c44e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c450:	e7be      	b.n	800c3d0 <_dtoa_r+0x558>
 800c452:	9808      	ldr	r0, [sp, #32]
 800c454:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c456:	f7f5 f9b7 	bl	80017c8 <__aeabi_dmul>
 800c45a:	9a06      	ldr	r2, [sp, #24]
 800c45c:	9b06      	ldr	r3, [sp, #24]
 800c45e:	4694      	mov	ip, r2
 800c460:	9308      	str	r3, [sp, #32]
 800c462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c464:	9010      	str	r0, [sp, #64]	; 0x40
 800c466:	9111      	str	r1, [sp, #68]	; 0x44
 800c468:	4463      	add	r3, ip
 800c46a:	9319      	str	r3, [sp, #100]	; 0x64
 800c46c:	0029      	movs	r1, r5
 800c46e:	0020      	movs	r0, r4
 800c470:	f7f5 ffc6 	bl	8002400 <__aeabi_d2iz>
 800c474:	9017      	str	r0, [sp, #92]	; 0x5c
 800c476:	f7f5 fff9 	bl	800246c <__aeabi_i2d>
 800c47a:	0002      	movs	r2, r0
 800c47c:	000b      	movs	r3, r1
 800c47e:	0020      	movs	r0, r4
 800c480:	0029      	movs	r1, r5
 800c482:	f7f5 fc0d 	bl	8001ca0 <__aeabi_dsub>
 800c486:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c488:	9a08      	ldr	r2, [sp, #32]
 800c48a:	3330      	adds	r3, #48	; 0x30
 800c48c:	7013      	strb	r3, [r2, #0]
 800c48e:	0013      	movs	r3, r2
 800c490:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c492:	3301      	adds	r3, #1
 800c494:	0004      	movs	r4, r0
 800c496:	000d      	movs	r5, r1
 800c498:	9308      	str	r3, [sp, #32]
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d12c      	bne.n	800c4f8 <_dtoa_r+0x680>
 800c49e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c4a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c4a2:	9a06      	ldr	r2, [sp, #24]
 800c4a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4a6:	4694      	mov	ip, r2
 800c4a8:	4463      	add	r3, ip
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	9308      	str	r3, [sp, #32]
 800c4ae:	4b1e      	ldr	r3, [pc, #120]	; (800c528 <_dtoa_r+0x6b0>)
 800c4b0:	f7f4 fa4c 	bl	800094c <__aeabi_dadd>
 800c4b4:	0002      	movs	r2, r0
 800c4b6:	000b      	movs	r3, r1
 800c4b8:	0020      	movs	r0, r4
 800c4ba:	0029      	movs	r1, r5
 800c4bc:	f7f3 ffe0 	bl	8000480 <__aeabi_dcmpgt>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d000      	beq.n	800c4c6 <_dtoa_r+0x64e>
 800c4c4:	e080      	b.n	800c5c8 <_dtoa_r+0x750>
 800c4c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	4916      	ldr	r1, [pc, #88]	; (800c528 <_dtoa_r+0x6b0>)
 800c4ce:	f7f5 fbe7 	bl	8001ca0 <__aeabi_dsub>
 800c4d2:	0002      	movs	r2, r0
 800c4d4:	000b      	movs	r3, r1
 800c4d6:	0020      	movs	r0, r4
 800c4d8:	0029      	movs	r1, r5
 800c4da:	f7f3 ffbd 	bl	8000458 <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d100      	bne.n	800c4e4 <_dtoa_r+0x66c>
 800c4e2:	e714      	b.n	800c30e <_dtoa_r+0x496>
 800c4e4:	9b08      	ldr	r3, [sp, #32]
 800c4e6:	001a      	movs	r2, r3
 800c4e8:	3a01      	subs	r2, #1
 800c4ea:	9208      	str	r2, [sp, #32]
 800c4ec:	7812      	ldrb	r2, [r2, #0]
 800c4ee:	2a30      	cmp	r2, #48	; 0x30
 800c4f0:	d0f8      	beq.n	800c4e4 <_dtoa_r+0x66c>
 800c4f2:	9308      	str	r3, [sp, #32]
 800c4f4:	9602      	str	r6, [sp, #8]
 800c4f6:	e055      	b.n	800c5a4 <_dtoa_r+0x72c>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4b06      	ldr	r3, [pc, #24]	; (800c514 <_dtoa_r+0x69c>)
 800c4fc:	f7f5 f964 	bl	80017c8 <__aeabi_dmul>
 800c500:	0004      	movs	r4, r0
 800c502:	000d      	movs	r5, r1
 800c504:	e7b2      	b.n	800c46c <_dtoa_r+0x5f4>
 800c506:	46c0      	nop			; (mov r8, r8)
 800c508:	0800e460 	.word	0x0800e460
 800c50c:	0800e438 	.word	0x0800e438
 800c510:	3ff00000 	.word	0x3ff00000
 800c514:	40240000 	.word	0x40240000
 800c518:	401c0000 	.word	0x401c0000
 800c51c:	fcc00000 	.word	0xfcc00000
 800c520:	40140000 	.word	0x40140000
 800c524:	7cc00000 	.word	0x7cc00000
 800c528:	3fe00000 	.word	0x3fe00000
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	9e06      	ldr	r6, [sp, #24]
 800c530:	3b01      	subs	r3, #1
 800c532:	199b      	adds	r3, r3, r6
 800c534:	930c      	str	r3, [sp, #48]	; 0x30
 800c536:	9c08      	ldr	r4, [sp, #32]
 800c538:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c53a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c53e:	0020      	movs	r0, r4
 800c540:	0029      	movs	r1, r5
 800c542:	f7f4 fd3f 	bl	8000fc4 <__aeabi_ddiv>
 800c546:	f7f5 ff5b 	bl	8002400 <__aeabi_d2iz>
 800c54a:	9007      	str	r0, [sp, #28]
 800c54c:	f7f5 ff8e 	bl	800246c <__aeabi_i2d>
 800c550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c554:	f7f5 f938 	bl	80017c8 <__aeabi_dmul>
 800c558:	0002      	movs	r2, r0
 800c55a:	000b      	movs	r3, r1
 800c55c:	0020      	movs	r0, r4
 800c55e:	0029      	movs	r1, r5
 800c560:	f7f5 fb9e 	bl	8001ca0 <__aeabi_dsub>
 800c564:	0033      	movs	r3, r6
 800c566:	9a07      	ldr	r2, [sp, #28]
 800c568:	3601      	adds	r6, #1
 800c56a:	3230      	adds	r2, #48	; 0x30
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c570:	9608      	str	r6, [sp, #32]
 800c572:	429a      	cmp	r2, r3
 800c574:	d139      	bne.n	800c5ea <_dtoa_r+0x772>
 800c576:	0002      	movs	r2, r0
 800c578:	000b      	movs	r3, r1
 800c57a:	f7f4 f9e7 	bl	800094c <__aeabi_dadd>
 800c57e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c582:	0004      	movs	r4, r0
 800c584:	000d      	movs	r5, r1
 800c586:	f7f3 ff7b 	bl	8000480 <__aeabi_dcmpgt>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d11b      	bne.n	800c5c6 <_dtoa_r+0x74e>
 800c58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c592:	0020      	movs	r0, r4
 800c594:	0029      	movs	r1, r5
 800c596:	f7f3 ff59 	bl	800044c <__aeabi_dcmpeq>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d002      	beq.n	800c5a4 <_dtoa_r+0x72c>
 800c59e:	9b07      	ldr	r3, [sp, #28]
 800c5a0:	07db      	lsls	r3, r3, #31
 800c5a2:	d410      	bmi.n	800c5c6 <_dtoa_r+0x74e>
 800c5a4:	0038      	movs	r0, r7
 800c5a6:	9905      	ldr	r1, [sp, #20]
 800c5a8:	f000 fbce 	bl	800cd48 <_Bfree>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9a08      	ldr	r2, [sp, #32]
 800c5b0:	9802      	ldr	r0, [sp, #8]
 800c5b2:	7013      	strb	r3, [r2, #0]
 800c5b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	6018      	str	r0, [r3, #0]
 800c5ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d100      	bne.n	800c5c2 <_dtoa_r+0x74a>
 800c5c0:	e4a6      	b.n	800bf10 <_dtoa_r+0x98>
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	e4a4      	b.n	800bf10 <_dtoa_r+0x98>
 800c5c6:	9e02      	ldr	r6, [sp, #8]
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	9308      	str	r3, [sp, #32]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	781a      	ldrb	r2, [r3, #0]
 800c5d0:	2a39      	cmp	r2, #57	; 0x39
 800c5d2:	d106      	bne.n	800c5e2 <_dtoa_r+0x76a>
 800c5d4:	9a06      	ldr	r2, [sp, #24]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d1f7      	bne.n	800c5ca <_dtoa_r+0x752>
 800c5da:	2230      	movs	r2, #48	; 0x30
 800c5dc:	9906      	ldr	r1, [sp, #24]
 800c5de:	3601      	adds	r6, #1
 800c5e0:	700a      	strb	r2, [r1, #0]
 800c5e2:	781a      	ldrb	r2, [r3, #0]
 800c5e4:	3201      	adds	r2, #1
 800c5e6:	701a      	strb	r2, [r3, #0]
 800c5e8:	e784      	b.n	800c4f4 <_dtoa_r+0x67c>
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	4baa      	ldr	r3, [pc, #680]	; (800c898 <_dtoa_r+0xa20>)
 800c5ee:	f7f5 f8eb 	bl	80017c8 <__aeabi_dmul>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	0004      	movs	r4, r0
 800c5f8:	000d      	movs	r5, r1
 800c5fa:	f7f3 ff27 	bl	800044c <__aeabi_dcmpeq>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d09b      	beq.n	800c53a <_dtoa_r+0x6c2>
 800c602:	e7cf      	b.n	800c5a4 <_dtoa_r+0x72c>
 800c604:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c606:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c608:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	d012      	beq.n	800c634 <_dtoa_r+0x7bc>
 800c60e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c610:	2a01      	cmp	r2, #1
 800c612:	dc66      	bgt.n	800c6e2 <_dtoa_r+0x86a>
 800c614:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c616:	2a00      	cmp	r2, #0
 800c618:	d05d      	beq.n	800c6d6 <_dtoa_r+0x85e>
 800c61a:	4aa0      	ldr	r2, [pc, #640]	; (800c89c <_dtoa_r+0xa24>)
 800c61c:	189b      	adds	r3, r3, r2
 800c61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c620:	2101      	movs	r1, #1
 800c622:	18d2      	adds	r2, r2, r3
 800c624:	920a      	str	r2, [sp, #40]	; 0x28
 800c626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c628:	0038      	movs	r0, r7
 800c62a:	18d3      	adds	r3, r2, r3
 800c62c:	930d      	str	r3, [sp, #52]	; 0x34
 800c62e:	f000 fc3b 	bl	800cea8 <__i2b>
 800c632:	0005      	movs	r5, r0
 800c634:	2c00      	cmp	r4, #0
 800c636:	dd0e      	ble.n	800c656 <_dtoa_r+0x7de>
 800c638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dd0b      	ble.n	800c656 <_dtoa_r+0x7de>
 800c63e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c640:	0023      	movs	r3, r4
 800c642:	4294      	cmp	r4, r2
 800c644:	dd00      	ble.n	800c648 <_dtoa_r+0x7d0>
 800c646:	0013      	movs	r3, r2
 800c648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c64a:	1ae4      	subs	r4, r4, r3
 800c64c:	1ad2      	subs	r2, r2, r3
 800c64e:	920a      	str	r2, [sp, #40]	; 0x28
 800c650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	930d      	str	r3, [sp, #52]	; 0x34
 800c656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01f      	beq.n	800c69c <_dtoa_r+0x824>
 800c65c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d054      	beq.n	800c70c <_dtoa_r+0x894>
 800c662:	2e00      	cmp	r6, #0
 800c664:	dd11      	ble.n	800c68a <_dtoa_r+0x812>
 800c666:	0029      	movs	r1, r5
 800c668:	0032      	movs	r2, r6
 800c66a:	0038      	movs	r0, r7
 800c66c:	f000 fce2 	bl	800d034 <__pow5mult>
 800c670:	9a05      	ldr	r2, [sp, #20]
 800c672:	0001      	movs	r1, r0
 800c674:	0005      	movs	r5, r0
 800c676:	0038      	movs	r0, r7
 800c678:	f000 fc2c 	bl	800ced4 <__multiply>
 800c67c:	9905      	ldr	r1, [sp, #20]
 800c67e:	9014      	str	r0, [sp, #80]	; 0x50
 800c680:	0038      	movs	r0, r7
 800c682:	f000 fb61 	bl	800cd48 <_Bfree>
 800c686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c688:	9305      	str	r3, [sp, #20]
 800c68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c68c:	1b9a      	subs	r2, r3, r6
 800c68e:	42b3      	cmp	r3, r6
 800c690:	d004      	beq.n	800c69c <_dtoa_r+0x824>
 800c692:	0038      	movs	r0, r7
 800c694:	9905      	ldr	r1, [sp, #20]
 800c696:	f000 fccd 	bl	800d034 <__pow5mult>
 800c69a:	9005      	str	r0, [sp, #20]
 800c69c:	2101      	movs	r1, #1
 800c69e:	0038      	movs	r0, r7
 800c6a0:	f000 fc02 	bl	800cea8 <__i2b>
 800c6a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c6a6:	0006      	movs	r6, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dd31      	ble.n	800c710 <_dtoa_r+0x898>
 800c6ac:	001a      	movs	r2, r3
 800c6ae:	0001      	movs	r1, r0
 800c6b0:	0038      	movs	r0, r7
 800c6b2:	f000 fcbf 	bl	800d034 <__pow5mult>
 800c6b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6b8:	0006      	movs	r6, r0
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	dd2d      	ble.n	800c71a <_dtoa_r+0x8a2>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	930e      	str	r3, [sp, #56]	; 0x38
 800c6c2:	6933      	ldr	r3, [r6, #16]
 800c6c4:	3303      	adds	r3, #3
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	18f3      	adds	r3, r6, r3
 800c6ca:	6858      	ldr	r0, [r3, #4]
 800c6cc:	f000 fba4 	bl	800ce18 <__hi0bits>
 800c6d0:	2320      	movs	r3, #32
 800c6d2:	1a18      	subs	r0, r3, r0
 800c6d4:	e039      	b.n	800c74a <_dtoa_r+0x8d2>
 800c6d6:	2336      	movs	r3, #54	; 0x36
 800c6d8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c6dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6de:	1a9b      	subs	r3, r3, r2
 800c6e0:	e79d      	b.n	800c61e <_dtoa_r+0x7a6>
 800c6e2:	9b07      	ldr	r3, [sp, #28]
 800c6e4:	1e5e      	subs	r6, r3, #1
 800c6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e8:	42b3      	cmp	r3, r6
 800c6ea:	db07      	blt.n	800c6fc <_dtoa_r+0x884>
 800c6ec:	1b9e      	subs	r6, r3, r6
 800c6ee:	9b07      	ldr	r3, [sp, #28]
 800c6f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da93      	bge.n	800c61e <_dtoa_r+0x7a6>
 800c6f6:	1ae4      	subs	r4, r4, r3
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	e790      	b.n	800c61e <_dtoa_r+0x7a6>
 800c6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c700:	1af3      	subs	r3, r6, r3
 800c702:	18d3      	adds	r3, r2, r3
 800c704:	960e      	str	r6, [sp, #56]	; 0x38
 800c706:	9315      	str	r3, [sp, #84]	; 0x54
 800c708:	2600      	movs	r6, #0
 800c70a:	e7f0      	b.n	800c6ee <_dtoa_r+0x876>
 800c70c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c70e:	e7c0      	b.n	800c692 <_dtoa_r+0x81a>
 800c710:	2300      	movs	r3, #0
 800c712:	930e      	str	r3, [sp, #56]	; 0x38
 800c714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c716:	2b01      	cmp	r3, #1
 800c718:	dc13      	bgt.n	800c742 <_dtoa_r+0x8ca>
 800c71a:	2300      	movs	r3, #0
 800c71c:	930e      	str	r3, [sp, #56]	; 0x38
 800c71e:	9b08      	ldr	r3, [sp, #32]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d10e      	bne.n	800c742 <_dtoa_r+0x8ca>
 800c724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c726:	031b      	lsls	r3, r3, #12
 800c728:	d10b      	bne.n	800c742 <_dtoa_r+0x8ca>
 800c72a:	4b5d      	ldr	r3, [pc, #372]	; (800c8a0 <_dtoa_r+0xa28>)
 800c72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c72e:	4213      	tst	r3, r2
 800c730:	d007      	beq.n	800c742 <_dtoa_r+0x8ca>
 800c732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c734:	3301      	adds	r3, #1
 800c736:	930a      	str	r3, [sp, #40]	; 0x28
 800c738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c73a:	3301      	adds	r3, #1
 800c73c:	930d      	str	r3, [sp, #52]	; 0x34
 800c73e:	2301      	movs	r3, #1
 800c740:	930e      	str	r3, [sp, #56]	; 0x38
 800c742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c744:	2001      	movs	r0, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1bb      	bne.n	800c6c2 <_dtoa_r+0x84a>
 800c74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c74c:	221f      	movs	r2, #31
 800c74e:	1818      	adds	r0, r3, r0
 800c750:	0003      	movs	r3, r0
 800c752:	4013      	ands	r3, r2
 800c754:	4210      	tst	r0, r2
 800c756:	d046      	beq.n	800c7e6 <_dtoa_r+0x96e>
 800c758:	3201      	adds	r2, #1
 800c75a:	1ad2      	subs	r2, r2, r3
 800c75c:	2a04      	cmp	r2, #4
 800c75e:	dd3f      	ble.n	800c7e0 <_dtoa_r+0x968>
 800c760:	221c      	movs	r2, #28
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c766:	18e4      	adds	r4, r4, r3
 800c768:	18d2      	adds	r2, r2, r3
 800c76a:	920a      	str	r2, [sp, #40]	; 0x28
 800c76c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c76e:	18d3      	adds	r3, r2, r3
 800c770:	930d      	str	r3, [sp, #52]	; 0x34
 800c772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c774:	2b00      	cmp	r3, #0
 800c776:	dd05      	ble.n	800c784 <_dtoa_r+0x90c>
 800c778:	001a      	movs	r2, r3
 800c77a:	0038      	movs	r0, r7
 800c77c:	9905      	ldr	r1, [sp, #20]
 800c77e:	f000 fcb5 	bl	800d0ec <__lshift>
 800c782:	9005      	str	r0, [sp, #20]
 800c784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c786:	2b00      	cmp	r3, #0
 800c788:	dd05      	ble.n	800c796 <_dtoa_r+0x91e>
 800c78a:	0031      	movs	r1, r6
 800c78c:	001a      	movs	r2, r3
 800c78e:	0038      	movs	r0, r7
 800c790:	f000 fcac 	bl	800d0ec <__lshift>
 800c794:	0006      	movs	r6, r0
 800c796:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d026      	beq.n	800c7ea <_dtoa_r+0x972>
 800c79c:	0031      	movs	r1, r6
 800c79e:	9805      	ldr	r0, [sp, #20]
 800c7a0:	f000 fd12 	bl	800d1c8 <__mcmp>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	da20      	bge.n	800c7ea <_dtoa_r+0x972>
 800c7a8:	9b02      	ldr	r3, [sp, #8]
 800c7aa:	220a      	movs	r2, #10
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	9302      	str	r3, [sp, #8]
 800c7b0:	0038      	movs	r0, r7
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	9905      	ldr	r1, [sp, #20]
 800c7b6:	f000 faeb 	bl	800cd90 <__multadd>
 800c7ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7bc:	9005      	str	r0, [sp, #20]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d100      	bne.n	800c7c4 <_dtoa_r+0x94c>
 800c7c2:	e166      	b.n	800ca92 <_dtoa_r+0xc1a>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	0029      	movs	r1, r5
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	0038      	movs	r0, r7
 800c7cc:	f000 fae0 	bl	800cd90 <__multadd>
 800c7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7d2:	0005      	movs	r5, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dc47      	bgt.n	800c868 <_dtoa_r+0x9f0>
 800c7d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	dc0d      	bgt.n	800c7fa <_dtoa_r+0x982>
 800c7de:	e043      	b.n	800c868 <_dtoa_r+0x9f0>
 800c7e0:	2a04      	cmp	r2, #4
 800c7e2:	d0c6      	beq.n	800c772 <_dtoa_r+0x8fa>
 800c7e4:	0013      	movs	r3, r2
 800c7e6:	331c      	adds	r3, #28
 800c7e8:	e7bc      	b.n	800c764 <_dtoa_r+0x8ec>
 800c7ea:	9b07      	ldr	r3, [sp, #28]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	dc35      	bgt.n	800c85c <_dtoa_r+0x9e4>
 800c7f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	dd32      	ble.n	800c85c <_dtoa_r+0x9e4>
 800c7f6:	9b07      	ldr	r3, [sp, #28]
 800c7f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10c      	bne.n	800c81a <_dtoa_r+0x9a2>
 800c800:	0031      	movs	r1, r6
 800c802:	2205      	movs	r2, #5
 800c804:	0038      	movs	r0, r7
 800c806:	f000 fac3 	bl	800cd90 <__multadd>
 800c80a:	0006      	movs	r6, r0
 800c80c:	0001      	movs	r1, r0
 800c80e:	9805      	ldr	r0, [sp, #20]
 800c810:	f000 fcda 	bl	800d1c8 <__mcmp>
 800c814:	2800      	cmp	r0, #0
 800c816:	dd00      	ble.n	800c81a <_dtoa_r+0x9a2>
 800c818:	e5a5      	b.n	800c366 <_dtoa_r+0x4ee>
 800c81a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c81c:	43db      	mvns	r3, r3
 800c81e:	9302      	str	r3, [sp, #8]
 800c820:	9b06      	ldr	r3, [sp, #24]
 800c822:	9308      	str	r3, [sp, #32]
 800c824:	2400      	movs	r4, #0
 800c826:	0031      	movs	r1, r6
 800c828:	0038      	movs	r0, r7
 800c82a:	f000 fa8d 	bl	800cd48 <_Bfree>
 800c82e:	2d00      	cmp	r5, #0
 800c830:	d100      	bne.n	800c834 <_dtoa_r+0x9bc>
 800c832:	e6b7      	b.n	800c5a4 <_dtoa_r+0x72c>
 800c834:	2c00      	cmp	r4, #0
 800c836:	d005      	beq.n	800c844 <_dtoa_r+0x9cc>
 800c838:	42ac      	cmp	r4, r5
 800c83a:	d003      	beq.n	800c844 <_dtoa_r+0x9cc>
 800c83c:	0021      	movs	r1, r4
 800c83e:	0038      	movs	r0, r7
 800c840:	f000 fa82 	bl	800cd48 <_Bfree>
 800c844:	0029      	movs	r1, r5
 800c846:	0038      	movs	r0, r7
 800c848:	f000 fa7e 	bl	800cd48 <_Bfree>
 800c84c:	e6aa      	b.n	800c5a4 <_dtoa_r+0x72c>
 800c84e:	2600      	movs	r6, #0
 800c850:	0035      	movs	r5, r6
 800c852:	e7e2      	b.n	800c81a <_dtoa_r+0x9a2>
 800c854:	9602      	str	r6, [sp, #8]
 800c856:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c858:	0035      	movs	r5, r6
 800c85a:	e584      	b.n	800c366 <_dtoa_r+0x4ee>
 800c85c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d100      	bne.n	800c864 <_dtoa_r+0x9ec>
 800c862:	e0ce      	b.n	800ca02 <_dtoa_r+0xb8a>
 800c864:	9b07      	ldr	r3, [sp, #28]
 800c866:	930c      	str	r3, [sp, #48]	; 0x30
 800c868:	2c00      	cmp	r4, #0
 800c86a:	dd05      	ble.n	800c878 <_dtoa_r+0xa00>
 800c86c:	0029      	movs	r1, r5
 800c86e:	0022      	movs	r2, r4
 800c870:	0038      	movs	r0, r7
 800c872:	f000 fc3b 	bl	800d0ec <__lshift>
 800c876:	0005      	movs	r5, r0
 800c878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c87a:	0028      	movs	r0, r5
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d022      	beq.n	800c8c6 <_dtoa_r+0xa4e>
 800c880:	0038      	movs	r0, r7
 800c882:	6869      	ldr	r1, [r5, #4]
 800c884:	f000 fa1c 	bl	800ccc0 <_Balloc>
 800c888:	1e04      	subs	r4, r0, #0
 800c88a:	d10f      	bne.n	800c8ac <_dtoa_r+0xa34>
 800c88c:	0002      	movs	r2, r0
 800c88e:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <_dtoa_r+0xa2c>)
 800c890:	4905      	ldr	r1, [pc, #20]	; (800c8a8 <_dtoa_r+0xa30>)
 800c892:	f7ff fb06 	bl	800bea2 <_dtoa_r+0x2a>
 800c896:	46c0      	nop			; (mov r8, r8)
 800c898:	40240000 	.word	0x40240000
 800c89c:	00000433 	.word	0x00000433
 800c8a0:	7ff00000 	.word	0x7ff00000
 800c8a4:	0800e3cb 	.word	0x0800e3cb
 800c8a8:	000002ea 	.word	0x000002ea
 800c8ac:	0029      	movs	r1, r5
 800c8ae:	692b      	ldr	r3, [r5, #16]
 800c8b0:	310c      	adds	r1, #12
 800c8b2:	1c9a      	adds	r2, r3, #2
 800c8b4:	0092      	lsls	r2, r2, #2
 800c8b6:	300c      	adds	r0, #12
 800c8b8:	f7fe fc23 	bl	800b102 <memcpy>
 800c8bc:	2201      	movs	r2, #1
 800c8be:	0021      	movs	r1, r4
 800c8c0:	0038      	movs	r0, r7
 800c8c2:	f000 fc13 	bl	800d0ec <__lshift>
 800c8c6:	9b06      	ldr	r3, [sp, #24]
 800c8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	189b      	adds	r3, r3, r2
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	002c      	movs	r4, r5
 800c8d4:	0005      	movs	r5, r0
 800c8d6:	9314      	str	r3, [sp, #80]	; 0x50
 800c8d8:	9b08      	ldr	r3, [sp, #32]
 800c8da:	4013      	ands	r3, r2
 800c8dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8de:	0031      	movs	r1, r6
 800c8e0:	9805      	ldr	r0, [sp, #20]
 800c8e2:	f7ff fa3d 	bl	800bd60 <quorem>
 800c8e6:	0003      	movs	r3, r0
 800c8e8:	0021      	movs	r1, r4
 800c8ea:	3330      	adds	r3, #48	; 0x30
 800c8ec:	900d      	str	r0, [sp, #52]	; 0x34
 800c8ee:	9805      	ldr	r0, [sp, #20]
 800c8f0:	9307      	str	r3, [sp, #28]
 800c8f2:	f000 fc69 	bl	800d1c8 <__mcmp>
 800c8f6:	002a      	movs	r2, r5
 800c8f8:	900e      	str	r0, [sp, #56]	; 0x38
 800c8fa:	0031      	movs	r1, r6
 800c8fc:	0038      	movs	r0, r7
 800c8fe:	f000 fc7f 	bl	800d200 <__mdiff>
 800c902:	68c3      	ldr	r3, [r0, #12]
 800c904:	9008      	str	r0, [sp, #32]
 800c906:	9310      	str	r3, [sp, #64]	; 0x40
 800c908:	2301      	movs	r3, #1
 800c90a:	930c      	str	r3, [sp, #48]	; 0x30
 800c90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d104      	bne.n	800c91c <_dtoa_r+0xaa4>
 800c912:	0001      	movs	r1, r0
 800c914:	9805      	ldr	r0, [sp, #20]
 800c916:	f000 fc57 	bl	800d1c8 <__mcmp>
 800c91a:	900c      	str	r0, [sp, #48]	; 0x30
 800c91c:	0038      	movs	r0, r7
 800c91e:	9908      	ldr	r1, [sp, #32]
 800c920:	f000 fa12 	bl	800cd48 <_Bfree>
 800c924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c928:	3301      	adds	r3, #1
 800c92a:	9308      	str	r3, [sp, #32]
 800c92c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c92e:	4313      	orrs	r3, r2
 800c930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c932:	4313      	orrs	r3, r2
 800c934:	d10c      	bne.n	800c950 <_dtoa_r+0xad8>
 800c936:	9b07      	ldr	r3, [sp, #28]
 800c938:	2b39      	cmp	r3, #57	; 0x39
 800c93a:	d026      	beq.n	800c98a <_dtoa_r+0xb12>
 800c93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c93e:	2b00      	cmp	r3, #0
 800c940:	dd02      	ble.n	800c948 <_dtoa_r+0xad0>
 800c942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c944:	3331      	adds	r3, #49	; 0x31
 800c946:	9307      	str	r3, [sp, #28]
 800c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c94a:	9a07      	ldr	r2, [sp, #28]
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	e76a      	b.n	800c826 <_dtoa_r+0x9ae>
 800c950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c952:	2b00      	cmp	r3, #0
 800c954:	db04      	blt.n	800c960 <_dtoa_r+0xae8>
 800c956:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c958:	4313      	orrs	r3, r2
 800c95a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c95c:	4313      	orrs	r3, r2
 800c95e:	d11f      	bne.n	800c9a0 <_dtoa_r+0xb28>
 800c960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c962:	2b00      	cmp	r3, #0
 800c964:	ddf0      	ble.n	800c948 <_dtoa_r+0xad0>
 800c966:	9905      	ldr	r1, [sp, #20]
 800c968:	2201      	movs	r2, #1
 800c96a:	0038      	movs	r0, r7
 800c96c:	f000 fbbe 	bl	800d0ec <__lshift>
 800c970:	0031      	movs	r1, r6
 800c972:	9005      	str	r0, [sp, #20]
 800c974:	f000 fc28 	bl	800d1c8 <__mcmp>
 800c978:	2800      	cmp	r0, #0
 800c97a:	dc03      	bgt.n	800c984 <_dtoa_r+0xb0c>
 800c97c:	d1e4      	bne.n	800c948 <_dtoa_r+0xad0>
 800c97e:	9b07      	ldr	r3, [sp, #28]
 800c980:	07db      	lsls	r3, r3, #31
 800c982:	d5e1      	bpl.n	800c948 <_dtoa_r+0xad0>
 800c984:	9b07      	ldr	r3, [sp, #28]
 800c986:	2b39      	cmp	r3, #57	; 0x39
 800c988:	d1db      	bne.n	800c942 <_dtoa_r+0xaca>
 800c98a:	2339      	movs	r3, #57	; 0x39
 800c98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c98e:	7013      	strb	r3, [r2, #0]
 800c990:	9b08      	ldr	r3, [sp, #32]
 800c992:	9308      	str	r3, [sp, #32]
 800c994:	3b01      	subs	r3, #1
 800c996:	781a      	ldrb	r2, [r3, #0]
 800c998:	2a39      	cmp	r2, #57	; 0x39
 800c99a:	d068      	beq.n	800ca6e <_dtoa_r+0xbf6>
 800c99c:	3201      	adds	r2, #1
 800c99e:	e7d5      	b.n	800c94c <_dtoa_r+0xad4>
 800c9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dd07      	ble.n	800c9b6 <_dtoa_r+0xb3e>
 800c9a6:	9b07      	ldr	r3, [sp, #28]
 800c9a8:	2b39      	cmp	r3, #57	; 0x39
 800c9aa:	d0ee      	beq.n	800c98a <_dtoa_r+0xb12>
 800c9ac:	9b07      	ldr	r3, [sp, #28]
 800c9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	7013      	strb	r3, [r2, #0]
 800c9b4:	e737      	b.n	800c826 <_dtoa_r+0x9ae>
 800c9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b8:	9a07      	ldr	r2, [sp, #28]
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d03e      	beq.n	800ca42 <_dtoa_r+0xbca>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	220a      	movs	r2, #10
 800c9c8:	9905      	ldr	r1, [sp, #20]
 800c9ca:	0038      	movs	r0, r7
 800c9cc:	f000 f9e0 	bl	800cd90 <__multadd>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9005      	str	r0, [sp, #20]
 800c9d4:	220a      	movs	r2, #10
 800c9d6:	0021      	movs	r1, r4
 800c9d8:	0038      	movs	r0, r7
 800c9da:	42ac      	cmp	r4, r5
 800c9dc:	d106      	bne.n	800c9ec <_dtoa_r+0xb74>
 800c9de:	f000 f9d7 	bl	800cd90 <__multadd>
 800c9e2:	0004      	movs	r4, r0
 800c9e4:	0005      	movs	r5, r0
 800c9e6:	9b08      	ldr	r3, [sp, #32]
 800c9e8:	930a      	str	r3, [sp, #40]	; 0x28
 800c9ea:	e778      	b.n	800c8de <_dtoa_r+0xa66>
 800c9ec:	f000 f9d0 	bl	800cd90 <__multadd>
 800c9f0:	0029      	movs	r1, r5
 800c9f2:	0004      	movs	r4, r0
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	220a      	movs	r2, #10
 800c9f8:	0038      	movs	r0, r7
 800c9fa:	f000 f9c9 	bl	800cd90 <__multadd>
 800c9fe:	0005      	movs	r5, r0
 800ca00:	e7f1      	b.n	800c9e6 <_dtoa_r+0xb6e>
 800ca02:	9b07      	ldr	r3, [sp, #28]
 800ca04:	930c      	str	r3, [sp, #48]	; 0x30
 800ca06:	2400      	movs	r4, #0
 800ca08:	0031      	movs	r1, r6
 800ca0a:	9805      	ldr	r0, [sp, #20]
 800ca0c:	f7ff f9a8 	bl	800bd60 <quorem>
 800ca10:	9b06      	ldr	r3, [sp, #24]
 800ca12:	3030      	adds	r0, #48	; 0x30
 800ca14:	5518      	strb	r0, [r3, r4]
 800ca16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca18:	3401      	adds	r4, #1
 800ca1a:	9007      	str	r0, [sp, #28]
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	dd07      	ble.n	800ca30 <_dtoa_r+0xbb8>
 800ca20:	2300      	movs	r3, #0
 800ca22:	220a      	movs	r2, #10
 800ca24:	0038      	movs	r0, r7
 800ca26:	9905      	ldr	r1, [sp, #20]
 800ca28:	f000 f9b2 	bl	800cd90 <__multadd>
 800ca2c:	9005      	str	r0, [sp, #20]
 800ca2e:	e7eb      	b.n	800ca08 <_dtoa_r+0xb90>
 800ca30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca32:	2001      	movs	r0, #1
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	dd00      	ble.n	800ca3a <_dtoa_r+0xbc2>
 800ca38:	0018      	movs	r0, r3
 800ca3a:	2400      	movs	r4, #0
 800ca3c:	9b06      	ldr	r3, [sp, #24]
 800ca3e:	181b      	adds	r3, r3, r0
 800ca40:	9308      	str	r3, [sp, #32]
 800ca42:	9905      	ldr	r1, [sp, #20]
 800ca44:	2201      	movs	r2, #1
 800ca46:	0038      	movs	r0, r7
 800ca48:	f000 fb50 	bl	800d0ec <__lshift>
 800ca4c:	0031      	movs	r1, r6
 800ca4e:	9005      	str	r0, [sp, #20]
 800ca50:	f000 fbba 	bl	800d1c8 <__mcmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	dc9b      	bgt.n	800c990 <_dtoa_r+0xb18>
 800ca58:	d102      	bne.n	800ca60 <_dtoa_r+0xbe8>
 800ca5a:	9b07      	ldr	r3, [sp, #28]
 800ca5c:	07db      	lsls	r3, r3, #31
 800ca5e:	d497      	bmi.n	800c990 <_dtoa_r+0xb18>
 800ca60:	9b08      	ldr	r3, [sp, #32]
 800ca62:	9308      	str	r3, [sp, #32]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	781a      	ldrb	r2, [r3, #0]
 800ca68:	2a30      	cmp	r2, #48	; 0x30
 800ca6a:	d0fa      	beq.n	800ca62 <_dtoa_r+0xbea>
 800ca6c:	e6db      	b.n	800c826 <_dtoa_r+0x9ae>
 800ca6e:	9a06      	ldr	r2, [sp, #24]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d18e      	bne.n	800c992 <_dtoa_r+0xb1a>
 800ca74:	9b02      	ldr	r3, [sp, #8]
 800ca76:	3301      	adds	r3, #1
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	2331      	movs	r3, #49	; 0x31
 800ca7c:	e799      	b.n	800c9b2 <_dtoa_r+0xb3a>
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <_dtoa_r+0xc2c>)
 800ca80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ca82:	9306      	str	r3, [sp, #24]
 800ca84:	4b08      	ldr	r3, [pc, #32]	; (800caa8 <_dtoa_r+0xc30>)
 800ca86:	2a00      	cmp	r2, #0
 800ca88:	d001      	beq.n	800ca8e <_dtoa_r+0xc16>
 800ca8a:	f7ff fa3f 	bl	800bf0c <_dtoa_r+0x94>
 800ca8e:	f7ff fa3f 	bl	800bf10 <_dtoa_r+0x98>
 800ca92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dcb6      	bgt.n	800ca06 <_dtoa_r+0xb8e>
 800ca98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	dd00      	ble.n	800caa0 <_dtoa_r+0xc28>
 800ca9e:	e6ac      	b.n	800c7fa <_dtoa_r+0x982>
 800caa0:	e7b1      	b.n	800ca06 <_dtoa_r+0xb8e>
 800caa2:	46c0      	nop			; (mov r8, r8)
 800caa4:	0800e34c 	.word	0x0800e34c
 800caa8:	0800e354 	.word	0x0800e354

0800caac <__sflush_r>:
 800caac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caae:	898b      	ldrh	r3, [r1, #12]
 800cab0:	0005      	movs	r5, r0
 800cab2:	000c      	movs	r4, r1
 800cab4:	071a      	lsls	r2, r3, #28
 800cab6:	d45f      	bmi.n	800cb78 <__sflush_r+0xcc>
 800cab8:	684a      	ldr	r2, [r1, #4]
 800caba:	2a00      	cmp	r2, #0
 800cabc:	dc04      	bgt.n	800cac8 <__sflush_r+0x1c>
 800cabe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cac0:	2a00      	cmp	r2, #0
 800cac2:	dc01      	bgt.n	800cac8 <__sflush_r+0x1c>
 800cac4:	2000      	movs	r0, #0
 800cac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cac8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800caca:	2f00      	cmp	r7, #0
 800cacc:	d0fa      	beq.n	800cac4 <__sflush_r+0x18>
 800cace:	2200      	movs	r2, #0
 800cad0:	2180      	movs	r1, #128	; 0x80
 800cad2:	682e      	ldr	r6, [r5, #0]
 800cad4:	602a      	str	r2, [r5, #0]
 800cad6:	001a      	movs	r2, r3
 800cad8:	0149      	lsls	r1, r1, #5
 800cada:	400a      	ands	r2, r1
 800cadc:	420b      	tst	r3, r1
 800cade:	d034      	beq.n	800cb4a <__sflush_r+0x9e>
 800cae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	075b      	lsls	r3, r3, #29
 800cae6:	d506      	bpl.n	800caf6 <__sflush_r+0x4a>
 800cae8:	6863      	ldr	r3, [r4, #4]
 800caea:	1ac0      	subs	r0, r0, r3
 800caec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <__sflush_r+0x4a>
 800caf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caf4:	1ac0      	subs	r0, r0, r3
 800caf6:	0002      	movs	r2, r0
 800caf8:	6a21      	ldr	r1, [r4, #32]
 800cafa:	2300      	movs	r3, #0
 800cafc:	0028      	movs	r0, r5
 800cafe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cb00:	47b8      	blx	r7
 800cb02:	89a1      	ldrh	r1, [r4, #12]
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	d106      	bne.n	800cb16 <__sflush_r+0x6a>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	2b1d      	cmp	r3, #29
 800cb0c:	d831      	bhi.n	800cb72 <__sflush_r+0xc6>
 800cb0e:	4a2c      	ldr	r2, [pc, #176]	; (800cbc0 <__sflush_r+0x114>)
 800cb10:	40da      	lsrs	r2, r3
 800cb12:	07d3      	lsls	r3, r2, #31
 800cb14:	d52d      	bpl.n	800cb72 <__sflush_r+0xc6>
 800cb16:	2300      	movs	r3, #0
 800cb18:	6063      	str	r3, [r4, #4]
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	6023      	str	r3, [r4, #0]
 800cb1e:	04cb      	lsls	r3, r1, #19
 800cb20:	d505      	bpl.n	800cb2e <__sflush_r+0x82>
 800cb22:	1c43      	adds	r3, r0, #1
 800cb24:	d102      	bne.n	800cb2c <__sflush_r+0x80>
 800cb26:	682b      	ldr	r3, [r5, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d100      	bne.n	800cb2e <__sflush_r+0x82>
 800cb2c:	6560      	str	r0, [r4, #84]	; 0x54
 800cb2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb30:	602e      	str	r6, [r5, #0]
 800cb32:	2900      	cmp	r1, #0
 800cb34:	d0c6      	beq.n	800cac4 <__sflush_r+0x18>
 800cb36:	0023      	movs	r3, r4
 800cb38:	3344      	adds	r3, #68	; 0x44
 800cb3a:	4299      	cmp	r1, r3
 800cb3c:	d002      	beq.n	800cb44 <__sflush_r+0x98>
 800cb3e:	0028      	movs	r0, r5
 800cb40:	f000 fc86 	bl	800d450 <_free_r>
 800cb44:	2000      	movs	r0, #0
 800cb46:	6360      	str	r0, [r4, #52]	; 0x34
 800cb48:	e7bd      	b.n	800cac6 <__sflush_r+0x1a>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	0028      	movs	r0, r5
 800cb4e:	6a21      	ldr	r1, [r4, #32]
 800cb50:	47b8      	blx	r7
 800cb52:	1c43      	adds	r3, r0, #1
 800cb54:	d1c5      	bne.n	800cae2 <__sflush_r+0x36>
 800cb56:	682b      	ldr	r3, [r5, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0c2      	beq.n	800cae2 <__sflush_r+0x36>
 800cb5c:	2b1d      	cmp	r3, #29
 800cb5e:	d001      	beq.n	800cb64 <__sflush_r+0xb8>
 800cb60:	2b16      	cmp	r3, #22
 800cb62:	d101      	bne.n	800cb68 <__sflush_r+0xbc>
 800cb64:	602e      	str	r6, [r5, #0]
 800cb66:	e7ad      	b.n	800cac4 <__sflush_r+0x18>
 800cb68:	2340      	movs	r3, #64	; 0x40
 800cb6a:	89a2      	ldrh	r2, [r4, #12]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	81a3      	strh	r3, [r4, #12]
 800cb70:	e7a9      	b.n	800cac6 <__sflush_r+0x1a>
 800cb72:	2340      	movs	r3, #64	; 0x40
 800cb74:	430b      	orrs	r3, r1
 800cb76:	e7fa      	b.n	800cb6e <__sflush_r+0xc2>
 800cb78:	690f      	ldr	r7, [r1, #16]
 800cb7a:	2f00      	cmp	r7, #0
 800cb7c:	d0a2      	beq.n	800cac4 <__sflush_r+0x18>
 800cb7e:	680a      	ldr	r2, [r1, #0]
 800cb80:	600f      	str	r7, [r1, #0]
 800cb82:	1bd2      	subs	r2, r2, r7
 800cb84:	9201      	str	r2, [sp, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	079b      	lsls	r3, r3, #30
 800cb8a:	d100      	bne.n	800cb8e <__sflush_r+0xe2>
 800cb8c:	694a      	ldr	r2, [r1, #20]
 800cb8e:	60a2      	str	r2, [r4, #8]
 800cb90:	9b01      	ldr	r3, [sp, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	dc00      	bgt.n	800cb98 <__sflush_r+0xec>
 800cb96:	e795      	b.n	800cac4 <__sflush_r+0x18>
 800cb98:	003a      	movs	r2, r7
 800cb9a:	0028      	movs	r0, r5
 800cb9c:	9b01      	ldr	r3, [sp, #4]
 800cb9e:	6a21      	ldr	r1, [r4, #32]
 800cba0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cba2:	47b0      	blx	r6
 800cba4:	2800      	cmp	r0, #0
 800cba6:	dc06      	bgt.n	800cbb6 <__sflush_r+0x10a>
 800cba8:	2340      	movs	r3, #64	; 0x40
 800cbaa:	2001      	movs	r0, #1
 800cbac:	89a2      	ldrh	r2, [r4, #12]
 800cbae:	4240      	negs	r0, r0
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	e787      	b.n	800cac6 <__sflush_r+0x1a>
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	183f      	adds	r7, r7, r0
 800cbba:	1a1b      	subs	r3, r3, r0
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	e7e7      	b.n	800cb90 <__sflush_r+0xe4>
 800cbc0:	20400001 	.word	0x20400001

0800cbc4 <_fflush_r>:
 800cbc4:	690b      	ldr	r3, [r1, #16]
 800cbc6:	b570      	push	{r4, r5, r6, lr}
 800cbc8:	0005      	movs	r5, r0
 800cbca:	000c      	movs	r4, r1
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d102      	bne.n	800cbd6 <_fflush_r+0x12>
 800cbd0:	2500      	movs	r5, #0
 800cbd2:	0028      	movs	r0, r5
 800cbd4:	bd70      	pop	{r4, r5, r6, pc}
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d004      	beq.n	800cbe4 <_fflush_r+0x20>
 800cbda:	6983      	ldr	r3, [r0, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <_fflush_r+0x20>
 800cbe0:	f7fe f9c8 	bl	800af74 <__sinit>
 800cbe4:	4b14      	ldr	r3, [pc, #80]	; (800cc38 <_fflush_r+0x74>)
 800cbe6:	429c      	cmp	r4, r3
 800cbe8:	d11b      	bne.n	800cc22 <_fflush_r+0x5e>
 800cbea:	686c      	ldr	r4, [r5, #4]
 800cbec:	220c      	movs	r2, #12
 800cbee:	5ea3      	ldrsh	r3, [r4, r2]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0ed      	beq.n	800cbd0 <_fflush_r+0xc>
 800cbf4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbf6:	07d2      	lsls	r2, r2, #31
 800cbf8:	d404      	bmi.n	800cc04 <_fflush_r+0x40>
 800cbfa:	059b      	lsls	r3, r3, #22
 800cbfc:	d402      	bmi.n	800cc04 <_fflush_r+0x40>
 800cbfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc00:	f7fe fa7d 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800cc04:	0028      	movs	r0, r5
 800cc06:	0021      	movs	r1, r4
 800cc08:	f7ff ff50 	bl	800caac <__sflush_r>
 800cc0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc0e:	0005      	movs	r5, r0
 800cc10:	07db      	lsls	r3, r3, #31
 800cc12:	d4de      	bmi.n	800cbd2 <_fflush_r+0xe>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	059b      	lsls	r3, r3, #22
 800cc18:	d4db      	bmi.n	800cbd2 <_fflush_r+0xe>
 800cc1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc1c:	f7fe fa70 	bl	800b100 <__retarget_lock_release_recursive>
 800cc20:	e7d7      	b.n	800cbd2 <_fflush_r+0xe>
 800cc22:	4b06      	ldr	r3, [pc, #24]	; (800cc3c <_fflush_r+0x78>)
 800cc24:	429c      	cmp	r4, r3
 800cc26:	d101      	bne.n	800cc2c <_fflush_r+0x68>
 800cc28:	68ac      	ldr	r4, [r5, #8]
 800cc2a:	e7df      	b.n	800cbec <_fflush_r+0x28>
 800cc2c:	4b04      	ldr	r3, [pc, #16]	; (800cc40 <_fflush_r+0x7c>)
 800cc2e:	429c      	cmp	r4, r3
 800cc30:	d1dc      	bne.n	800cbec <_fflush_r+0x28>
 800cc32:	68ec      	ldr	r4, [r5, #12]
 800cc34:	e7da      	b.n	800cbec <_fflush_r+0x28>
 800cc36:	46c0      	nop			; (mov r8, r8)
 800cc38:	0800e2d4 	.word	0x0800e2d4
 800cc3c:	0800e2f4 	.word	0x0800e2f4
 800cc40:	0800e2b4 	.word	0x0800e2b4

0800cc44 <_localeconv_r>:
 800cc44:	4800      	ldr	r0, [pc, #0]	; (800cc48 <_localeconv_r+0x4>)
 800cc46:	4770      	bx	lr
 800cc48:	20000168 	.word	0x20000168

0800cc4c <_lseek_r>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	0004      	movs	r4, r0
 800cc50:	0008      	movs	r0, r1
 800cc52:	0011      	movs	r1, r2
 800cc54:	001a      	movs	r2, r3
 800cc56:	2300      	movs	r3, #0
 800cc58:	4d05      	ldr	r5, [pc, #20]	; (800cc70 <_lseek_r+0x24>)
 800cc5a:	602b      	str	r3, [r5, #0]
 800cc5c:	f7f6 fd8e 	bl	800377c <_lseek>
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	d103      	bne.n	800cc6c <_lseek_r+0x20>
 800cc64:	682b      	ldr	r3, [r5, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d000      	beq.n	800cc6c <_lseek_r+0x20>
 800cc6a:	6023      	str	r3, [r4, #0]
 800cc6c:	bd70      	pop	{r4, r5, r6, pc}
 800cc6e:	46c0      	nop			; (mov r8, r8)
 800cc70:	20002d8c 	.word	0x20002d8c

0800cc74 <malloc>:
 800cc74:	b510      	push	{r4, lr}
 800cc76:	4b03      	ldr	r3, [pc, #12]	; (800cc84 <malloc+0x10>)
 800cc78:	0001      	movs	r1, r0
 800cc7a:	6818      	ldr	r0, [r3, #0]
 800cc7c:	f7fe fa74 	bl	800b168 <_malloc_r>
 800cc80:	bd10      	pop	{r4, pc}
 800cc82:	46c0      	nop			; (mov r8, r8)
 800cc84:	20000014 	.word	0x20000014

0800cc88 <memchr>:
 800cc88:	b2c9      	uxtb	r1, r1
 800cc8a:	1882      	adds	r2, r0, r2
 800cc8c:	4290      	cmp	r0, r2
 800cc8e:	d101      	bne.n	800cc94 <memchr+0xc>
 800cc90:	2000      	movs	r0, #0
 800cc92:	4770      	bx	lr
 800cc94:	7803      	ldrb	r3, [r0, #0]
 800cc96:	428b      	cmp	r3, r1
 800cc98:	d0fb      	beq.n	800cc92 <memchr+0xa>
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	e7f6      	b.n	800cc8c <memchr+0x4>
	...

0800cca0 <__malloc_lock>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	4802      	ldr	r0, [pc, #8]	; (800ccac <__malloc_lock+0xc>)
 800cca4:	f7fe fa2b 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	46c0      	nop			; (mov r8, r8)
 800ccac:	20002d80 	.word	0x20002d80

0800ccb0 <__malloc_unlock>:
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	4802      	ldr	r0, [pc, #8]	; (800ccbc <__malloc_unlock+0xc>)
 800ccb4:	f7fe fa24 	bl	800b100 <__retarget_lock_release_recursive>
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	46c0      	nop			; (mov r8, r8)
 800ccbc:	20002d80 	.word	0x20002d80

0800ccc0 <_Balloc>:
 800ccc0:	b570      	push	{r4, r5, r6, lr}
 800ccc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ccc4:	0006      	movs	r6, r0
 800ccc6:	000c      	movs	r4, r1
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	d10e      	bne.n	800ccea <_Balloc+0x2a>
 800cccc:	2010      	movs	r0, #16
 800ccce:	f7ff ffd1 	bl	800cc74 <malloc>
 800ccd2:	1e02      	subs	r2, r0, #0
 800ccd4:	6270      	str	r0, [r6, #36]	; 0x24
 800ccd6:	d104      	bne.n	800cce2 <_Balloc+0x22>
 800ccd8:	2166      	movs	r1, #102	; 0x66
 800ccda:	4b19      	ldr	r3, [pc, #100]	; (800cd40 <_Balloc+0x80>)
 800ccdc:	4819      	ldr	r0, [pc, #100]	; (800cd44 <_Balloc+0x84>)
 800ccde:	f000 fd77 	bl	800d7d0 <__assert_func>
 800cce2:	6045      	str	r5, [r0, #4]
 800cce4:	6085      	str	r5, [r0, #8]
 800cce6:	6005      	str	r5, [r0, #0]
 800cce8:	60c5      	str	r5, [r0, #12]
 800ccea:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ccec:	68eb      	ldr	r3, [r5, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d013      	beq.n	800cd1a <_Balloc+0x5a>
 800ccf2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ccf4:	00a2      	lsls	r2, r4, #2
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	189b      	adds	r3, r3, r2
 800ccfa:	6818      	ldr	r0, [r3, #0]
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d118      	bne.n	800cd32 <_Balloc+0x72>
 800cd00:	2101      	movs	r1, #1
 800cd02:	000d      	movs	r5, r1
 800cd04:	40a5      	lsls	r5, r4
 800cd06:	1d6a      	adds	r2, r5, #5
 800cd08:	0030      	movs	r0, r6
 800cd0a:	0092      	lsls	r2, r2, #2
 800cd0c:	f000 fb74 	bl	800d3f8 <_calloc_r>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d00c      	beq.n	800cd2e <_Balloc+0x6e>
 800cd14:	6044      	str	r4, [r0, #4]
 800cd16:	6085      	str	r5, [r0, #8]
 800cd18:	e00d      	b.n	800cd36 <_Balloc+0x76>
 800cd1a:	2221      	movs	r2, #33	; 0x21
 800cd1c:	2104      	movs	r1, #4
 800cd1e:	0030      	movs	r0, r6
 800cd20:	f000 fb6a 	bl	800d3f8 <_calloc_r>
 800cd24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cd26:	60e8      	str	r0, [r5, #12]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e1      	bne.n	800ccf2 <_Balloc+0x32>
 800cd2e:	2000      	movs	r0, #0
 800cd30:	bd70      	pop	{r4, r5, r6, pc}
 800cd32:	6802      	ldr	r2, [r0, #0]
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	2300      	movs	r3, #0
 800cd38:	6103      	str	r3, [r0, #16]
 800cd3a:	60c3      	str	r3, [r0, #12]
 800cd3c:	e7f8      	b.n	800cd30 <_Balloc+0x70>
 800cd3e:	46c0      	nop			; (mov r8, r8)
 800cd40:	0800e359 	.word	0x0800e359
 800cd44:	0800e3dc 	.word	0x0800e3dc

0800cd48 <_Bfree>:
 800cd48:	b570      	push	{r4, r5, r6, lr}
 800cd4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd4c:	0005      	movs	r5, r0
 800cd4e:	000c      	movs	r4, r1
 800cd50:	2e00      	cmp	r6, #0
 800cd52:	d10e      	bne.n	800cd72 <_Bfree+0x2a>
 800cd54:	2010      	movs	r0, #16
 800cd56:	f7ff ff8d 	bl	800cc74 <malloc>
 800cd5a:	1e02      	subs	r2, r0, #0
 800cd5c:	6268      	str	r0, [r5, #36]	; 0x24
 800cd5e:	d104      	bne.n	800cd6a <_Bfree+0x22>
 800cd60:	218a      	movs	r1, #138	; 0x8a
 800cd62:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <_Bfree+0x40>)
 800cd64:	4809      	ldr	r0, [pc, #36]	; (800cd8c <_Bfree+0x44>)
 800cd66:	f000 fd33 	bl	800d7d0 <__assert_func>
 800cd6a:	6046      	str	r6, [r0, #4]
 800cd6c:	6086      	str	r6, [r0, #8]
 800cd6e:	6006      	str	r6, [r0, #0]
 800cd70:	60c6      	str	r6, [r0, #12]
 800cd72:	2c00      	cmp	r4, #0
 800cd74:	d007      	beq.n	800cd86 <_Bfree+0x3e>
 800cd76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd78:	6862      	ldr	r2, [r4, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	0092      	lsls	r2, r2, #2
 800cd7e:	189b      	adds	r3, r3, r2
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	6022      	str	r2, [r4, #0]
 800cd84:	601c      	str	r4, [r3, #0]
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	0800e359 	.word	0x0800e359
 800cd8c:	0800e3dc 	.word	0x0800e3dc

0800cd90 <__multadd>:
 800cd90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd92:	000e      	movs	r6, r1
 800cd94:	9001      	str	r0, [sp, #4]
 800cd96:	000c      	movs	r4, r1
 800cd98:	001d      	movs	r5, r3
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	690f      	ldr	r7, [r1, #16]
 800cd9e:	3614      	adds	r6, #20
 800cda0:	6833      	ldr	r3, [r6, #0]
 800cda2:	3001      	adds	r0, #1
 800cda4:	b299      	uxth	r1, r3
 800cda6:	4351      	muls	r1, r2
 800cda8:	0c1b      	lsrs	r3, r3, #16
 800cdaa:	4353      	muls	r3, r2
 800cdac:	1949      	adds	r1, r1, r5
 800cdae:	0c0d      	lsrs	r5, r1, #16
 800cdb0:	195b      	adds	r3, r3, r5
 800cdb2:	0c1d      	lsrs	r5, r3, #16
 800cdb4:	b289      	uxth	r1, r1
 800cdb6:	041b      	lsls	r3, r3, #16
 800cdb8:	185b      	adds	r3, r3, r1
 800cdba:	c608      	stmia	r6!, {r3}
 800cdbc:	4287      	cmp	r7, r0
 800cdbe:	dcef      	bgt.n	800cda0 <__multadd+0x10>
 800cdc0:	2d00      	cmp	r5, #0
 800cdc2:	d022      	beq.n	800ce0a <__multadd+0x7a>
 800cdc4:	68a3      	ldr	r3, [r4, #8]
 800cdc6:	42bb      	cmp	r3, r7
 800cdc8:	dc19      	bgt.n	800cdfe <__multadd+0x6e>
 800cdca:	6863      	ldr	r3, [r4, #4]
 800cdcc:	9801      	ldr	r0, [sp, #4]
 800cdce:	1c59      	adds	r1, r3, #1
 800cdd0:	f7ff ff76 	bl	800ccc0 <_Balloc>
 800cdd4:	1e06      	subs	r6, r0, #0
 800cdd6:	d105      	bne.n	800cde4 <__multadd+0x54>
 800cdd8:	0002      	movs	r2, r0
 800cdda:	21b5      	movs	r1, #181	; 0xb5
 800cddc:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <__multadd+0x80>)
 800cdde:	480d      	ldr	r0, [pc, #52]	; (800ce14 <__multadd+0x84>)
 800cde0:	f000 fcf6 	bl	800d7d0 <__assert_func>
 800cde4:	0021      	movs	r1, r4
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	310c      	adds	r1, #12
 800cdea:	1c9a      	adds	r2, r3, #2
 800cdec:	0092      	lsls	r2, r2, #2
 800cdee:	300c      	adds	r0, #12
 800cdf0:	f7fe f987 	bl	800b102 <memcpy>
 800cdf4:	0021      	movs	r1, r4
 800cdf6:	9801      	ldr	r0, [sp, #4]
 800cdf8:	f7ff ffa6 	bl	800cd48 <_Bfree>
 800cdfc:	0034      	movs	r4, r6
 800cdfe:	1d3b      	adds	r3, r7, #4
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	18e3      	adds	r3, r4, r3
 800ce04:	605d      	str	r5, [r3, #4]
 800ce06:	1c7b      	adds	r3, r7, #1
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	0020      	movs	r0, r4
 800ce0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	0800e3cb 	.word	0x0800e3cb
 800ce14:	0800e3dc 	.word	0x0800e3dc

0800ce18 <__hi0bits>:
 800ce18:	0003      	movs	r3, r0
 800ce1a:	0c02      	lsrs	r2, r0, #16
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	4282      	cmp	r2, r0
 800ce20:	d101      	bne.n	800ce26 <__hi0bits+0xe>
 800ce22:	041b      	lsls	r3, r3, #16
 800ce24:	3010      	adds	r0, #16
 800ce26:	0e1a      	lsrs	r2, r3, #24
 800ce28:	d101      	bne.n	800ce2e <__hi0bits+0x16>
 800ce2a:	3008      	adds	r0, #8
 800ce2c:	021b      	lsls	r3, r3, #8
 800ce2e:	0f1a      	lsrs	r2, r3, #28
 800ce30:	d101      	bne.n	800ce36 <__hi0bits+0x1e>
 800ce32:	3004      	adds	r0, #4
 800ce34:	011b      	lsls	r3, r3, #4
 800ce36:	0f9a      	lsrs	r2, r3, #30
 800ce38:	d101      	bne.n	800ce3e <__hi0bits+0x26>
 800ce3a:	3002      	adds	r0, #2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	db03      	blt.n	800ce4a <__hi0bits+0x32>
 800ce42:	3001      	adds	r0, #1
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	d400      	bmi.n	800ce4a <__hi0bits+0x32>
 800ce48:	2020      	movs	r0, #32
 800ce4a:	4770      	bx	lr

0800ce4c <__lo0bits>:
 800ce4c:	6803      	ldr	r3, [r0, #0]
 800ce4e:	0002      	movs	r2, r0
 800ce50:	2107      	movs	r1, #7
 800ce52:	0018      	movs	r0, r3
 800ce54:	4008      	ands	r0, r1
 800ce56:	420b      	tst	r3, r1
 800ce58:	d00d      	beq.n	800ce76 <__lo0bits+0x2a>
 800ce5a:	3906      	subs	r1, #6
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	420b      	tst	r3, r1
 800ce60:	d105      	bne.n	800ce6e <__lo0bits+0x22>
 800ce62:	3002      	adds	r0, #2
 800ce64:	4203      	tst	r3, r0
 800ce66:	d003      	beq.n	800ce70 <__lo0bits+0x24>
 800ce68:	40cb      	lsrs	r3, r1
 800ce6a:	0008      	movs	r0, r1
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	4770      	bx	lr
 800ce70:	089b      	lsrs	r3, r3, #2
 800ce72:	6013      	str	r3, [r2, #0]
 800ce74:	e7fb      	b.n	800ce6e <__lo0bits+0x22>
 800ce76:	b299      	uxth	r1, r3
 800ce78:	2900      	cmp	r1, #0
 800ce7a:	d101      	bne.n	800ce80 <__lo0bits+0x34>
 800ce7c:	2010      	movs	r0, #16
 800ce7e:	0c1b      	lsrs	r3, r3, #16
 800ce80:	b2d9      	uxtb	r1, r3
 800ce82:	2900      	cmp	r1, #0
 800ce84:	d101      	bne.n	800ce8a <__lo0bits+0x3e>
 800ce86:	3008      	adds	r0, #8
 800ce88:	0a1b      	lsrs	r3, r3, #8
 800ce8a:	0719      	lsls	r1, r3, #28
 800ce8c:	d101      	bne.n	800ce92 <__lo0bits+0x46>
 800ce8e:	3004      	adds	r0, #4
 800ce90:	091b      	lsrs	r3, r3, #4
 800ce92:	0799      	lsls	r1, r3, #30
 800ce94:	d101      	bne.n	800ce9a <__lo0bits+0x4e>
 800ce96:	3002      	adds	r0, #2
 800ce98:	089b      	lsrs	r3, r3, #2
 800ce9a:	07d9      	lsls	r1, r3, #31
 800ce9c:	d4e9      	bmi.n	800ce72 <__lo0bits+0x26>
 800ce9e:	3001      	adds	r0, #1
 800cea0:	085b      	lsrs	r3, r3, #1
 800cea2:	d1e6      	bne.n	800ce72 <__lo0bits+0x26>
 800cea4:	2020      	movs	r0, #32
 800cea6:	e7e2      	b.n	800ce6e <__lo0bits+0x22>

0800cea8 <__i2b>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	000c      	movs	r4, r1
 800ceac:	2101      	movs	r1, #1
 800ceae:	f7ff ff07 	bl	800ccc0 <_Balloc>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d106      	bne.n	800cec4 <__i2b+0x1c>
 800ceb6:	21a0      	movs	r1, #160	; 0xa0
 800ceb8:	0002      	movs	r2, r0
 800ceba:	4b04      	ldr	r3, [pc, #16]	; (800cecc <__i2b+0x24>)
 800cebc:	4804      	ldr	r0, [pc, #16]	; (800ced0 <__i2b+0x28>)
 800cebe:	0049      	lsls	r1, r1, #1
 800cec0:	f000 fc86 	bl	800d7d0 <__assert_func>
 800cec4:	2301      	movs	r3, #1
 800cec6:	6144      	str	r4, [r0, #20]
 800cec8:	6103      	str	r3, [r0, #16]
 800ceca:	bd10      	pop	{r4, pc}
 800cecc:	0800e3cb 	.word	0x0800e3cb
 800ced0:	0800e3dc 	.word	0x0800e3dc

0800ced4 <__multiply>:
 800ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced6:	690b      	ldr	r3, [r1, #16]
 800ced8:	0014      	movs	r4, r2
 800ceda:	6912      	ldr	r2, [r2, #16]
 800cedc:	000d      	movs	r5, r1
 800cede:	b089      	sub	sp, #36	; 0x24
 800cee0:	4293      	cmp	r3, r2
 800cee2:	da01      	bge.n	800cee8 <__multiply+0x14>
 800cee4:	0025      	movs	r5, r4
 800cee6:	000c      	movs	r4, r1
 800cee8:	692f      	ldr	r7, [r5, #16]
 800ceea:	6926      	ldr	r6, [r4, #16]
 800ceec:	6869      	ldr	r1, [r5, #4]
 800ceee:	19bb      	adds	r3, r7, r6
 800cef0:	9302      	str	r3, [sp, #8]
 800cef2:	68ab      	ldr	r3, [r5, #8]
 800cef4:	19ba      	adds	r2, r7, r6
 800cef6:	4293      	cmp	r3, r2
 800cef8:	da00      	bge.n	800cefc <__multiply+0x28>
 800cefa:	3101      	adds	r1, #1
 800cefc:	f7ff fee0 	bl	800ccc0 <_Balloc>
 800cf00:	9001      	str	r0, [sp, #4]
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d106      	bne.n	800cf14 <__multiply+0x40>
 800cf06:	215e      	movs	r1, #94	; 0x5e
 800cf08:	0002      	movs	r2, r0
 800cf0a:	4b48      	ldr	r3, [pc, #288]	; (800d02c <__multiply+0x158>)
 800cf0c:	4848      	ldr	r0, [pc, #288]	; (800d030 <__multiply+0x15c>)
 800cf0e:	31ff      	adds	r1, #255	; 0xff
 800cf10:	f000 fc5e 	bl	800d7d0 <__assert_func>
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	3314      	adds	r3, #20
 800cf1a:	469c      	mov	ip, r3
 800cf1c:	19bb      	adds	r3, r7, r6
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4463      	add	r3, ip
 800cf22:	9303      	str	r3, [sp, #12]
 800cf24:	4663      	mov	r3, ip
 800cf26:	9903      	ldr	r1, [sp, #12]
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	d32c      	bcc.n	800cf86 <__multiply+0xb2>
 800cf2c:	002b      	movs	r3, r5
 800cf2e:	0022      	movs	r2, r4
 800cf30:	3314      	adds	r3, #20
 800cf32:	00bf      	lsls	r7, r7, #2
 800cf34:	3214      	adds	r2, #20
 800cf36:	9306      	str	r3, [sp, #24]
 800cf38:	00b6      	lsls	r6, r6, #2
 800cf3a:	19db      	adds	r3, r3, r7
 800cf3c:	9304      	str	r3, [sp, #16]
 800cf3e:	1993      	adds	r3, r2, r6
 800cf40:	9307      	str	r3, [sp, #28]
 800cf42:	2304      	movs	r3, #4
 800cf44:	9305      	str	r3, [sp, #20]
 800cf46:	002b      	movs	r3, r5
 800cf48:	9904      	ldr	r1, [sp, #16]
 800cf4a:	3315      	adds	r3, #21
 800cf4c:	9200      	str	r2, [sp, #0]
 800cf4e:	4299      	cmp	r1, r3
 800cf50:	d305      	bcc.n	800cf5e <__multiply+0x8a>
 800cf52:	1b4b      	subs	r3, r1, r5
 800cf54:	3b15      	subs	r3, #21
 800cf56:	089b      	lsrs	r3, r3, #2
 800cf58:	3301      	adds	r3, #1
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	9b07      	ldr	r3, [sp, #28]
 800cf60:	9a00      	ldr	r2, [sp, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d311      	bcc.n	800cf8a <__multiply+0xb6>
 800cf66:	9b02      	ldr	r3, [sp, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	dd06      	ble.n	800cf7a <__multiply+0xa6>
 800cf6c:	9b03      	ldr	r3, [sp, #12]
 800cf6e:	3b04      	subs	r3, #4
 800cf70:	9303      	str	r3, [sp, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d053      	beq.n	800d022 <__multiply+0x14e>
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	9a02      	ldr	r2, [sp, #8]
 800cf7e:	0018      	movs	r0, r3
 800cf80:	611a      	str	r2, [r3, #16]
 800cf82:	b009      	add	sp, #36	; 0x24
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	c304      	stmia	r3!, {r2}
 800cf88:	e7cd      	b.n	800cf26 <__multiply+0x52>
 800cf8a:	9b00      	ldr	r3, [sp, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	b298      	uxth	r0, r3
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d01b      	beq.n	800cfcc <__multiply+0xf8>
 800cf94:	4667      	mov	r7, ip
 800cf96:	2400      	movs	r4, #0
 800cf98:	9e06      	ldr	r6, [sp, #24]
 800cf9a:	ce02      	ldmia	r6!, {r1}
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	b28b      	uxth	r3, r1
 800cfa0:	4343      	muls	r3, r0
 800cfa2:	b292      	uxth	r2, r2
 800cfa4:	189b      	adds	r3, r3, r2
 800cfa6:	191b      	adds	r3, r3, r4
 800cfa8:	0c0c      	lsrs	r4, r1, #16
 800cfaa:	4344      	muls	r4, r0
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	0c11      	lsrs	r1, r2, #16
 800cfb0:	1861      	adds	r1, r4, r1
 800cfb2:	0c1c      	lsrs	r4, r3, #16
 800cfb4:	1909      	adds	r1, r1, r4
 800cfb6:	0c0c      	lsrs	r4, r1, #16
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	0409      	lsls	r1, r1, #16
 800cfbc:	430b      	orrs	r3, r1
 800cfbe:	c708      	stmia	r7!, {r3}
 800cfc0:	9b04      	ldr	r3, [sp, #16]
 800cfc2:	42b3      	cmp	r3, r6
 800cfc4:	d8e9      	bhi.n	800cf9a <__multiply+0xc6>
 800cfc6:	4663      	mov	r3, ip
 800cfc8:	9a05      	ldr	r2, [sp, #20]
 800cfca:	509c      	str	r4, [r3, r2]
 800cfcc:	9b00      	ldr	r3, [sp, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	0c1e      	lsrs	r6, r3, #16
 800cfd2:	d020      	beq.n	800d016 <__multiply+0x142>
 800cfd4:	4663      	mov	r3, ip
 800cfd6:	002c      	movs	r4, r5
 800cfd8:	4660      	mov	r0, ip
 800cfda:	2700      	movs	r7, #0
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	3414      	adds	r4, #20
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	b291      	uxth	r1, r2
 800cfe6:	4371      	muls	r1, r6
 800cfe8:	6802      	ldr	r2, [r0, #0]
 800cfea:	0c12      	lsrs	r2, r2, #16
 800cfec:	1889      	adds	r1, r1, r2
 800cfee:	19cf      	adds	r7, r1, r7
 800cff0:	0439      	lsls	r1, r7, #16
 800cff2:	430b      	orrs	r3, r1
 800cff4:	6003      	str	r3, [r0, #0]
 800cff6:	cc02      	ldmia	r4!, {r1}
 800cff8:	6843      	ldr	r3, [r0, #4]
 800cffa:	0c09      	lsrs	r1, r1, #16
 800cffc:	4371      	muls	r1, r6
 800cffe:	b29b      	uxth	r3, r3
 800d000:	0c3f      	lsrs	r7, r7, #16
 800d002:	18cb      	adds	r3, r1, r3
 800d004:	9a04      	ldr	r2, [sp, #16]
 800d006:	19db      	adds	r3, r3, r7
 800d008:	0c1f      	lsrs	r7, r3, #16
 800d00a:	3004      	adds	r0, #4
 800d00c:	42a2      	cmp	r2, r4
 800d00e:	d8e7      	bhi.n	800cfe0 <__multiply+0x10c>
 800d010:	4662      	mov	r2, ip
 800d012:	9905      	ldr	r1, [sp, #20]
 800d014:	5053      	str	r3, [r2, r1]
 800d016:	9b00      	ldr	r3, [sp, #0]
 800d018:	3304      	adds	r3, #4
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	2304      	movs	r3, #4
 800d01e:	449c      	add	ip, r3
 800d020:	e79d      	b.n	800cf5e <__multiply+0x8a>
 800d022:	9b02      	ldr	r3, [sp, #8]
 800d024:	3b01      	subs	r3, #1
 800d026:	9302      	str	r3, [sp, #8]
 800d028:	e79d      	b.n	800cf66 <__multiply+0x92>
 800d02a:	46c0      	nop			; (mov r8, r8)
 800d02c:	0800e3cb 	.word	0x0800e3cb
 800d030:	0800e3dc 	.word	0x0800e3dc

0800d034 <__pow5mult>:
 800d034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d036:	2303      	movs	r3, #3
 800d038:	0015      	movs	r5, r2
 800d03a:	0007      	movs	r7, r0
 800d03c:	000e      	movs	r6, r1
 800d03e:	401a      	ands	r2, r3
 800d040:	421d      	tst	r5, r3
 800d042:	d008      	beq.n	800d056 <__pow5mult+0x22>
 800d044:	4925      	ldr	r1, [pc, #148]	; (800d0dc <__pow5mult+0xa8>)
 800d046:	3a01      	subs	r2, #1
 800d048:	0092      	lsls	r2, r2, #2
 800d04a:	5852      	ldr	r2, [r2, r1]
 800d04c:	2300      	movs	r3, #0
 800d04e:	0031      	movs	r1, r6
 800d050:	f7ff fe9e 	bl	800cd90 <__multadd>
 800d054:	0006      	movs	r6, r0
 800d056:	10ad      	asrs	r5, r5, #2
 800d058:	d03d      	beq.n	800d0d6 <__pow5mult+0xa2>
 800d05a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d05c:	2c00      	cmp	r4, #0
 800d05e:	d10f      	bne.n	800d080 <__pow5mult+0x4c>
 800d060:	2010      	movs	r0, #16
 800d062:	f7ff fe07 	bl	800cc74 <malloc>
 800d066:	1e02      	subs	r2, r0, #0
 800d068:	6278      	str	r0, [r7, #36]	; 0x24
 800d06a:	d105      	bne.n	800d078 <__pow5mult+0x44>
 800d06c:	21d7      	movs	r1, #215	; 0xd7
 800d06e:	4b1c      	ldr	r3, [pc, #112]	; (800d0e0 <__pow5mult+0xac>)
 800d070:	481c      	ldr	r0, [pc, #112]	; (800d0e4 <__pow5mult+0xb0>)
 800d072:	0049      	lsls	r1, r1, #1
 800d074:	f000 fbac 	bl	800d7d0 <__assert_func>
 800d078:	6044      	str	r4, [r0, #4]
 800d07a:	6084      	str	r4, [r0, #8]
 800d07c:	6004      	str	r4, [r0, #0]
 800d07e:	60c4      	str	r4, [r0, #12]
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	689c      	ldr	r4, [r3, #8]
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	2c00      	cmp	r4, #0
 800d088:	d108      	bne.n	800d09c <__pow5mult+0x68>
 800d08a:	0038      	movs	r0, r7
 800d08c:	4916      	ldr	r1, [pc, #88]	; (800d0e8 <__pow5mult+0xb4>)
 800d08e:	f7ff ff0b 	bl	800cea8 <__i2b>
 800d092:	9b01      	ldr	r3, [sp, #4]
 800d094:	0004      	movs	r4, r0
 800d096:	6098      	str	r0, [r3, #8]
 800d098:	2300      	movs	r3, #0
 800d09a:	6003      	str	r3, [r0, #0]
 800d09c:	2301      	movs	r3, #1
 800d09e:	421d      	tst	r5, r3
 800d0a0:	d00a      	beq.n	800d0b8 <__pow5mult+0x84>
 800d0a2:	0031      	movs	r1, r6
 800d0a4:	0022      	movs	r2, r4
 800d0a6:	0038      	movs	r0, r7
 800d0a8:	f7ff ff14 	bl	800ced4 <__multiply>
 800d0ac:	0031      	movs	r1, r6
 800d0ae:	9001      	str	r0, [sp, #4]
 800d0b0:	0038      	movs	r0, r7
 800d0b2:	f7ff fe49 	bl	800cd48 <_Bfree>
 800d0b6:	9e01      	ldr	r6, [sp, #4]
 800d0b8:	106d      	asrs	r5, r5, #1
 800d0ba:	d00c      	beq.n	800d0d6 <__pow5mult+0xa2>
 800d0bc:	6820      	ldr	r0, [r4, #0]
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d107      	bne.n	800d0d2 <__pow5mult+0x9e>
 800d0c2:	0022      	movs	r2, r4
 800d0c4:	0021      	movs	r1, r4
 800d0c6:	0038      	movs	r0, r7
 800d0c8:	f7ff ff04 	bl	800ced4 <__multiply>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	6020      	str	r0, [r4, #0]
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	0004      	movs	r4, r0
 800d0d4:	e7e2      	b.n	800d09c <__pow5mult+0x68>
 800d0d6:	0030      	movs	r0, r6
 800d0d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0da:	46c0      	nop			; (mov r8, r8)
 800d0dc:	0800e528 	.word	0x0800e528
 800d0e0:	0800e359 	.word	0x0800e359
 800d0e4:	0800e3dc 	.word	0x0800e3dc
 800d0e8:	00000271 	.word	0x00000271

0800d0ec <__lshift>:
 800d0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0ee:	000c      	movs	r4, r1
 800d0f0:	0017      	movs	r7, r2
 800d0f2:	6923      	ldr	r3, [r4, #16]
 800d0f4:	1155      	asrs	r5, r2, #5
 800d0f6:	b087      	sub	sp, #28
 800d0f8:	18eb      	adds	r3, r5, r3
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	9301      	str	r3, [sp, #4]
 800d100:	6849      	ldr	r1, [r1, #4]
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	9004      	str	r0, [sp, #16]
 800d106:	9a01      	ldr	r2, [sp, #4]
 800d108:	4293      	cmp	r3, r2
 800d10a:	db10      	blt.n	800d12e <__lshift+0x42>
 800d10c:	9804      	ldr	r0, [sp, #16]
 800d10e:	f7ff fdd7 	bl	800ccc0 <_Balloc>
 800d112:	2300      	movs	r3, #0
 800d114:	0002      	movs	r2, r0
 800d116:	0006      	movs	r6, r0
 800d118:	0019      	movs	r1, r3
 800d11a:	3214      	adds	r2, #20
 800d11c:	4298      	cmp	r0, r3
 800d11e:	d10c      	bne.n	800d13a <__lshift+0x4e>
 800d120:	21da      	movs	r1, #218	; 0xda
 800d122:	0002      	movs	r2, r0
 800d124:	4b26      	ldr	r3, [pc, #152]	; (800d1c0 <__lshift+0xd4>)
 800d126:	4827      	ldr	r0, [pc, #156]	; (800d1c4 <__lshift+0xd8>)
 800d128:	31ff      	adds	r1, #255	; 0xff
 800d12a:	f000 fb51 	bl	800d7d0 <__assert_func>
 800d12e:	3101      	adds	r1, #1
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	e7e8      	b.n	800d106 <__lshift+0x1a>
 800d134:	0098      	lsls	r0, r3, #2
 800d136:	5011      	str	r1, [r2, r0]
 800d138:	3301      	adds	r3, #1
 800d13a:	42ab      	cmp	r3, r5
 800d13c:	dbfa      	blt.n	800d134 <__lshift+0x48>
 800d13e:	43eb      	mvns	r3, r5
 800d140:	17db      	asrs	r3, r3, #31
 800d142:	401d      	ands	r5, r3
 800d144:	211f      	movs	r1, #31
 800d146:	0023      	movs	r3, r4
 800d148:	0038      	movs	r0, r7
 800d14a:	00ad      	lsls	r5, r5, #2
 800d14c:	1955      	adds	r5, r2, r5
 800d14e:	6922      	ldr	r2, [r4, #16]
 800d150:	3314      	adds	r3, #20
 800d152:	0092      	lsls	r2, r2, #2
 800d154:	4008      	ands	r0, r1
 800d156:	4684      	mov	ip, r0
 800d158:	189a      	adds	r2, r3, r2
 800d15a:	420f      	tst	r7, r1
 800d15c:	d02a      	beq.n	800d1b4 <__lshift+0xc8>
 800d15e:	3101      	adds	r1, #1
 800d160:	1a09      	subs	r1, r1, r0
 800d162:	9105      	str	r1, [sp, #20]
 800d164:	2100      	movs	r1, #0
 800d166:	9503      	str	r5, [sp, #12]
 800d168:	4667      	mov	r7, ip
 800d16a:	6818      	ldr	r0, [r3, #0]
 800d16c:	40b8      	lsls	r0, r7
 800d16e:	4301      	orrs	r1, r0
 800d170:	9803      	ldr	r0, [sp, #12]
 800d172:	c002      	stmia	r0!, {r1}
 800d174:	cb02      	ldmia	r3!, {r1}
 800d176:	9003      	str	r0, [sp, #12]
 800d178:	9805      	ldr	r0, [sp, #20]
 800d17a:	40c1      	lsrs	r1, r0
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d8f3      	bhi.n	800d168 <__lshift+0x7c>
 800d180:	0020      	movs	r0, r4
 800d182:	3015      	adds	r0, #21
 800d184:	2304      	movs	r3, #4
 800d186:	4282      	cmp	r2, r0
 800d188:	d304      	bcc.n	800d194 <__lshift+0xa8>
 800d18a:	1b13      	subs	r3, r2, r4
 800d18c:	3b15      	subs	r3, #21
 800d18e:	089b      	lsrs	r3, r3, #2
 800d190:	3301      	adds	r3, #1
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	50e9      	str	r1, [r5, r3]
 800d196:	2900      	cmp	r1, #0
 800d198:	d002      	beq.n	800d1a0 <__lshift+0xb4>
 800d19a:	9b02      	ldr	r3, [sp, #8]
 800d19c:	3302      	adds	r3, #2
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	9b01      	ldr	r3, [sp, #4]
 800d1a2:	9804      	ldr	r0, [sp, #16]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	0021      	movs	r1, r4
 800d1a8:	6133      	str	r3, [r6, #16]
 800d1aa:	f7ff fdcd 	bl	800cd48 <_Bfree>
 800d1ae:	0030      	movs	r0, r6
 800d1b0:	b007      	add	sp, #28
 800d1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1b4:	cb02      	ldmia	r3!, {r1}
 800d1b6:	c502      	stmia	r5!, {r1}
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d8fb      	bhi.n	800d1b4 <__lshift+0xc8>
 800d1bc:	e7f0      	b.n	800d1a0 <__lshift+0xb4>
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	0800e3cb 	.word	0x0800e3cb
 800d1c4:	0800e3dc 	.word	0x0800e3dc

0800d1c8 <__mcmp>:
 800d1c8:	6902      	ldr	r2, [r0, #16]
 800d1ca:	690b      	ldr	r3, [r1, #16]
 800d1cc:	b530      	push	{r4, r5, lr}
 800d1ce:	0004      	movs	r4, r0
 800d1d0:	1ad0      	subs	r0, r2, r3
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d10d      	bne.n	800d1f2 <__mcmp+0x2a>
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	3414      	adds	r4, #20
 800d1da:	3114      	adds	r1, #20
 800d1dc:	18e2      	adds	r2, r4, r3
 800d1de:	18c9      	adds	r1, r1, r3
 800d1e0:	3a04      	subs	r2, #4
 800d1e2:	3904      	subs	r1, #4
 800d1e4:	6815      	ldr	r5, [r2, #0]
 800d1e6:	680b      	ldr	r3, [r1, #0]
 800d1e8:	429d      	cmp	r5, r3
 800d1ea:	d003      	beq.n	800d1f4 <__mcmp+0x2c>
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	429d      	cmp	r5, r3
 800d1f0:	d303      	bcc.n	800d1fa <__mcmp+0x32>
 800d1f2:	bd30      	pop	{r4, r5, pc}
 800d1f4:	4294      	cmp	r4, r2
 800d1f6:	d3f3      	bcc.n	800d1e0 <__mcmp+0x18>
 800d1f8:	e7fb      	b.n	800d1f2 <__mcmp+0x2a>
 800d1fa:	4240      	negs	r0, r0
 800d1fc:	e7f9      	b.n	800d1f2 <__mcmp+0x2a>
	...

0800d200 <__mdiff>:
 800d200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d202:	000e      	movs	r6, r1
 800d204:	0007      	movs	r7, r0
 800d206:	0011      	movs	r1, r2
 800d208:	0030      	movs	r0, r6
 800d20a:	b087      	sub	sp, #28
 800d20c:	0014      	movs	r4, r2
 800d20e:	f7ff ffdb 	bl	800d1c8 <__mcmp>
 800d212:	1e05      	subs	r5, r0, #0
 800d214:	d110      	bne.n	800d238 <__mdiff+0x38>
 800d216:	0001      	movs	r1, r0
 800d218:	0038      	movs	r0, r7
 800d21a:	f7ff fd51 	bl	800ccc0 <_Balloc>
 800d21e:	1e02      	subs	r2, r0, #0
 800d220:	d104      	bne.n	800d22c <__mdiff+0x2c>
 800d222:	4b40      	ldr	r3, [pc, #256]	; (800d324 <__mdiff+0x124>)
 800d224:	4940      	ldr	r1, [pc, #256]	; (800d328 <__mdiff+0x128>)
 800d226:	4841      	ldr	r0, [pc, #260]	; (800d32c <__mdiff+0x12c>)
 800d228:	f000 fad2 	bl	800d7d0 <__assert_func>
 800d22c:	2301      	movs	r3, #1
 800d22e:	6145      	str	r5, [r0, #20]
 800d230:	6103      	str	r3, [r0, #16]
 800d232:	0010      	movs	r0, r2
 800d234:	b007      	add	sp, #28
 800d236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d238:	2301      	movs	r3, #1
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	2800      	cmp	r0, #0
 800d23e:	db04      	blt.n	800d24a <__mdiff+0x4a>
 800d240:	0023      	movs	r3, r4
 800d242:	0034      	movs	r4, r6
 800d244:	001e      	movs	r6, r3
 800d246:	2300      	movs	r3, #0
 800d248:	9301      	str	r3, [sp, #4]
 800d24a:	0038      	movs	r0, r7
 800d24c:	6861      	ldr	r1, [r4, #4]
 800d24e:	f7ff fd37 	bl	800ccc0 <_Balloc>
 800d252:	1e02      	subs	r2, r0, #0
 800d254:	d103      	bne.n	800d25e <__mdiff+0x5e>
 800d256:	2190      	movs	r1, #144	; 0x90
 800d258:	4b32      	ldr	r3, [pc, #200]	; (800d324 <__mdiff+0x124>)
 800d25a:	0089      	lsls	r1, r1, #2
 800d25c:	e7e3      	b.n	800d226 <__mdiff+0x26>
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	2700      	movs	r7, #0
 800d262:	60c3      	str	r3, [r0, #12]
 800d264:	6920      	ldr	r0, [r4, #16]
 800d266:	3414      	adds	r4, #20
 800d268:	9401      	str	r4, [sp, #4]
 800d26a:	9b01      	ldr	r3, [sp, #4]
 800d26c:	0084      	lsls	r4, r0, #2
 800d26e:	191b      	adds	r3, r3, r4
 800d270:	0034      	movs	r4, r6
 800d272:	9302      	str	r3, [sp, #8]
 800d274:	6933      	ldr	r3, [r6, #16]
 800d276:	3414      	adds	r4, #20
 800d278:	0099      	lsls	r1, r3, #2
 800d27a:	1863      	adds	r3, r4, r1
 800d27c:	9303      	str	r3, [sp, #12]
 800d27e:	0013      	movs	r3, r2
 800d280:	3314      	adds	r3, #20
 800d282:	469c      	mov	ip, r3
 800d284:	9305      	str	r3, [sp, #20]
 800d286:	9b01      	ldr	r3, [sp, #4]
 800d288:	9304      	str	r3, [sp, #16]
 800d28a:	9b04      	ldr	r3, [sp, #16]
 800d28c:	cc02      	ldmia	r4!, {r1}
 800d28e:	cb20      	ldmia	r3!, {r5}
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	b2ab      	uxth	r3, r5
 800d294:	19df      	adds	r7, r3, r7
 800d296:	b28b      	uxth	r3, r1
 800d298:	1afb      	subs	r3, r7, r3
 800d29a:	0c09      	lsrs	r1, r1, #16
 800d29c:	0c2d      	lsrs	r5, r5, #16
 800d29e:	1a6d      	subs	r5, r5, r1
 800d2a0:	1419      	asrs	r1, r3, #16
 800d2a2:	186d      	adds	r5, r5, r1
 800d2a4:	4661      	mov	r1, ip
 800d2a6:	142f      	asrs	r7, r5, #16
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	042d      	lsls	r5, r5, #16
 800d2ac:	432b      	orrs	r3, r5
 800d2ae:	c108      	stmia	r1!, {r3}
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	468c      	mov	ip, r1
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	d8e8      	bhi.n	800d28a <__mdiff+0x8a>
 800d2b8:	0031      	movs	r1, r6
 800d2ba:	9c03      	ldr	r4, [sp, #12]
 800d2bc:	3115      	adds	r1, #21
 800d2be:	2304      	movs	r3, #4
 800d2c0:	428c      	cmp	r4, r1
 800d2c2:	d304      	bcc.n	800d2ce <__mdiff+0xce>
 800d2c4:	1ba3      	subs	r3, r4, r6
 800d2c6:	3b15      	subs	r3, #21
 800d2c8:	089b      	lsrs	r3, r3, #2
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	9901      	ldr	r1, [sp, #4]
 800d2d0:	18cc      	adds	r4, r1, r3
 800d2d2:	9905      	ldr	r1, [sp, #20]
 800d2d4:	0026      	movs	r6, r4
 800d2d6:	18cb      	adds	r3, r1, r3
 800d2d8:	469c      	mov	ip, r3
 800d2da:	9902      	ldr	r1, [sp, #8]
 800d2dc:	428e      	cmp	r6, r1
 800d2de:	d310      	bcc.n	800d302 <__mdiff+0x102>
 800d2e0:	9e02      	ldr	r6, [sp, #8]
 800d2e2:	1ee1      	subs	r1, r4, #3
 800d2e4:	2500      	movs	r5, #0
 800d2e6:	428e      	cmp	r6, r1
 800d2e8:	d304      	bcc.n	800d2f4 <__mdiff+0xf4>
 800d2ea:	0031      	movs	r1, r6
 800d2ec:	3103      	adds	r1, #3
 800d2ee:	1b0c      	subs	r4, r1, r4
 800d2f0:	08a4      	lsrs	r4, r4, #2
 800d2f2:	00a5      	lsls	r5, r4, #2
 800d2f4:	195b      	adds	r3, r3, r5
 800d2f6:	3b04      	subs	r3, #4
 800d2f8:	6819      	ldr	r1, [r3, #0]
 800d2fa:	2900      	cmp	r1, #0
 800d2fc:	d00f      	beq.n	800d31e <__mdiff+0x11e>
 800d2fe:	6110      	str	r0, [r2, #16]
 800d300:	e797      	b.n	800d232 <__mdiff+0x32>
 800d302:	ce02      	ldmia	r6!, {r1}
 800d304:	b28d      	uxth	r5, r1
 800d306:	19ed      	adds	r5, r5, r7
 800d308:	0c0f      	lsrs	r7, r1, #16
 800d30a:	1429      	asrs	r1, r5, #16
 800d30c:	1879      	adds	r1, r7, r1
 800d30e:	140f      	asrs	r7, r1, #16
 800d310:	b2ad      	uxth	r5, r5
 800d312:	0409      	lsls	r1, r1, #16
 800d314:	430d      	orrs	r5, r1
 800d316:	4661      	mov	r1, ip
 800d318:	c120      	stmia	r1!, {r5}
 800d31a:	468c      	mov	ip, r1
 800d31c:	e7dd      	b.n	800d2da <__mdiff+0xda>
 800d31e:	3801      	subs	r0, #1
 800d320:	e7e9      	b.n	800d2f6 <__mdiff+0xf6>
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	0800e3cb 	.word	0x0800e3cb
 800d328:	00000232 	.word	0x00000232
 800d32c:	0800e3dc 	.word	0x0800e3dc

0800d330 <__d2b>:
 800d330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d332:	2101      	movs	r1, #1
 800d334:	0014      	movs	r4, r2
 800d336:	001e      	movs	r6, r3
 800d338:	9f08      	ldr	r7, [sp, #32]
 800d33a:	f7ff fcc1 	bl	800ccc0 <_Balloc>
 800d33e:	1e05      	subs	r5, r0, #0
 800d340:	d105      	bne.n	800d34e <__d2b+0x1e>
 800d342:	0002      	movs	r2, r0
 800d344:	4b26      	ldr	r3, [pc, #152]	; (800d3e0 <__d2b+0xb0>)
 800d346:	4927      	ldr	r1, [pc, #156]	; (800d3e4 <__d2b+0xb4>)
 800d348:	4827      	ldr	r0, [pc, #156]	; (800d3e8 <__d2b+0xb8>)
 800d34a:	f000 fa41 	bl	800d7d0 <__assert_func>
 800d34e:	0333      	lsls	r3, r6, #12
 800d350:	0076      	lsls	r6, r6, #1
 800d352:	0b1b      	lsrs	r3, r3, #12
 800d354:	0d76      	lsrs	r6, r6, #21
 800d356:	d124      	bne.n	800d3a2 <__d2b+0x72>
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	2c00      	cmp	r4, #0
 800d35c:	d027      	beq.n	800d3ae <__d2b+0x7e>
 800d35e:	4668      	mov	r0, sp
 800d360:	9400      	str	r4, [sp, #0]
 800d362:	f7ff fd73 	bl	800ce4c <__lo0bits>
 800d366:	9c00      	ldr	r4, [sp, #0]
 800d368:	2800      	cmp	r0, #0
 800d36a:	d01e      	beq.n	800d3aa <__d2b+0x7a>
 800d36c:	9b01      	ldr	r3, [sp, #4]
 800d36e:	2120      	movs	r1, #32
 800d370:	001a      	movs	r2, r3
 800d372:	1a09      	subs	r1, r1, r0
 800d374:	408a      	lsls	r2, r1
 800d376:	40c3      	lsrs	r3, r0
 800d378:	4322      	orrs	r2, r4
 800d37a:	616a      	str	r2, [r5, #20]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	9c01      	ldr	r4, [sp, #4]
 800d380:	61ac      	str	r4, [r5, #24]
 800d382:	1e63      	subs	r3, r4, #1
 800d384:	419c      	sbcs	r4, r3
 800d386:	3401      	adds	r4, #1
 800d388:	612c      	str	r4, [r5, #16]
 800d38a:	2e00      	cmp	r6, #0
 800d38c:	d018      	beq.n	800d3c0 <__d2b+0x90>
 800d38e:	4b17      	ldr	r3, [pc, #92]	; (800d3ec <__d2b+0xbc>)
 800d390:	18f6      	adds	r6, r6, r3
 800d392:	2335      	movs	r3, #53	; 0x35
 800d394:	1836      	adds	r6, r6, r0
 800d396:	1a18      	subs	r0, r3, r0
 800d398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d39a:	603e      	str	r6, [r7, #0]
 800d39c:	6018      	str	r0, [r3, #0]
 800d39e:	0028      	movs	r0, r5
 800d3a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d3a2:	2280      	movs	r2, #128	; 0x80
 800d3a4:	0352      	lsls	r2, r2, #13
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	e7d6      	b.n	800d358 <__d2b+0x28>
 800d3aa:	616c      	str	r4, [r5, #20]
 800d3ac:	e7e7      	b.n	800d37e <__d2b+0x4e>
 800d3ae:	a801      	add	r0, sp, #4
 800d3b0:	f7ff fd4c 	bl	800ce4c <__lo0bits>
 800d3b4:	2401      	movs	r4, #1
 800d3b6:	9b01      	ldr	r3, [sp, #4]
 800d3b8:	612c      	str	r4, [r5, #16]
 800d3ba:	616b      	str	r3, [r5, #20]
 800d3bc:	3020      	adds	r0, #32
 800d3be:	e7e4      	b.n	800d38a <__d2b+0x5a>
 800d3c0:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <__d2b+0xc0>)
 800d3c2:	18c0      	adds	r0, r0, r3
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <__d2b+0xc4>)
 800d3c6:	6038      	str	r0, [r7, #0]
 800d3c8:	18e3      	adds	r3, r4, r3
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	18eb      	adds	r3, r5, r3
 800d3ce:	6958      	ldr	r0, [r3, #20]
 800d3d0:	f7ff fd22 	bl	800ce18 <__hi0bits>
 800d3d4:	0164      	lsls	r4, r4, #5
 800d3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d8:	1a24      	subs	r4, r4, r0
 800d3da:	601c      	str	r4, [r3, #0]
 800d3dc:	e7df      	b.n	800d39e <__d2b+0x6e>
 800d3de:	46c0      	nop			; (mov r8, r8)
 800d3e0:	0800e3cb 	.word	0x0800e3cb
 800d3e4:	0000030a 	.word	0x0000030a
 800d3e8:	0800e3dc 	.word	0x0800e3dc
 800d3ec:	fffffbcd 	.word	0xfffffbcd
 800d3f0:	fffffbce 	.word	0xfffffbce
 800d3f4:	3fffffff 	.word	0x3fffffff

0800d3f8 <_calloc_r>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	0c13      	lsrs	r3, r2, #16
 800d3fc:	0c0d      	lsrs	r5, r1, #16
 800d3fe:	d11e      	bne.n	800d43e <_calloc_r+0x46>
 800d400:	2b00      	cmp	r3, #0
 800d402:	d10c      	bne.n	800d41e <_calloc_r+0x26>
 800d404:	b289      	uxth	r1, r1
 800d406:	b294      	uxth	r4, r2
 800d408:	434c      	muls	r4, r1
 800d40a:	0021      	movs	r1, r4
 800d40c:	f7fd feac 	bl	800b168 <_malloc_r>
 800d410:	1e05      	subs	r5, r0, #0
 800d412:	d01b      	beq.n	800d44c <_calloc_r+0x54>
 800d414:	0022      	movs	r2, r4
 800d416:	2100      	movs	r1, #0
 800d418:	f7fd fe7c 	bl	800b114 <memset>
 800d41c:	e016      	b.n	800d44c <_calloc_r+0x54>
 800d41e:	1c1d      	adds	r5, r3, #0
 800d420:	1c0b      	adds	r3, r1, #0
 800d422:	b292      	uxth	r2, r2
 800d424:	b289      	uxth	r1, r1
 800d426:	b29c      	uxth	r4, r3
 800d428:	4351      	muls	r1, r2
 800d42a:	b2ab      	uxth	r3, r5
 800d42c:	4363      	muls	r3, r4
 800d42e:	0c0c      	lsrs	r4, r1, #16
 800d430:	191c      	adds	r4, r3, r4
 800d432:	0c22      	lsrs	r2, r4, #16
 800d434:	d107      	bne.n	800d446 <_calloc_r+0x4e>
 800d436:	0424      	lsls	r4, r4, #16
 800d438:	b289      	uxth	r1, r1
 800d43a:	430c      	orrs	r4, r1
 800d43c:	e7e5      	b.n	800d40a <_calloc_r+0x12>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <_calloc_r+0x4e>
 800d442:	1c13      	adds	r3, r2, #0
 800d444:	e7ed      	b.n	800d422 <_calloc_r+0x2a>
 800d446:	230c      	movs	r3, #12
 800d448:	2500      	movs	r5, #0
 800d44a:	6003      	str	r3, [r0, #0]
 800d44c:	0028      	movs	r0, r5
 800d44e:	bd70      	pop	{r4, r5, r6, pc}

0800d450 <_free_r>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	0005      	movs	r5, r0
 800d454:	2900      	cmp	r1, #0
 800d456:	d010      	beq.n	800d47a <_free_r+0x2a>
 800d458:	1f0c      	subs	r4, r1, #4
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	da00      	bge.n	800d462 <_free_r+0x12>
 800d460:	18e4      	adds	r4, r4, r3
 800d462:	0028      	movs	r0, r5
 800d464:	f7ff fc1c 	bl	800cca0 <__malloc_lock>
 800d468:	4a1d      	ldr	r2, [pc, #116]	; (800d4e0 <_free_r+0x90>)
 800d46a:	6813      	ldr	r3, [r2, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d105      	bne.n	800d47c <_free_r+0x2c>
 800d470:	6063      	str	r3, [r4, #4]
 800d472:	6014      	str	r4, [r2, #0]
 800d474:	0028      	movs	r0, r5
 800d476:	f7ff fc1b 	bl	800ccb0 <__malloc_unlock>
 800d47a:	bd70      	pop	{r4, r5, r6, pc}
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d908      	bls.n	800d492 <_free_r+0x42>
 800d480:	6821      	ldr	r1, [r4, #0]
 800d482:	1860      	adds	r0, r4, r1
 800d484:	4283      	cmp	r3, r0
 800d486:	d1f3      	bne.n	800d470 <_free_r+0x20>
 800d488:	6818      	ldr	r0, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	1841      	adds	r1, r0, r1
 800d48e:	6021      	str	r1, [r4, #0]
 800d490:	e7ee      	b.n	800d470 <_free_r+0x20>
 800d492:	001a      	movs	r2, r3
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <_free_r+0x4e>
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	d9f9      	bls.n	800d492 <_free_r+0x42>
 800d49e:	6811      	ldr	r1, [r2, #0]
 800d4a0:	1850      	adds	r0, r2, r1
 800d4a2:	42a0      	cmp	r0, r4
 800d4a4:	d10b      	bne.n	800d4be <_free_r+0x6e>
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	1809      	adds	r1, r1, r0
 800d4aa:	1850      	adds	r0, r2, r1
 800d4ac:	6011      	str	r1, [r2, #0]
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	d1e0      	bne.n	800d474 <_free_r+0x24>
 800d4b2:	6818      	ldr	r0, [r3, #0]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	1841      	adds	r1, r0, r1
 800d4b8:	6011      	str	r1, [r2, #0]
 800d4ba:	6053      	str	r3, [r2, #4]
 800d4bc:	e7da      	b.n	800d474 <_free_r+0x24>
 800d4be:	42a0      	cmp	r0, r4
 800d4c0:	d902      	bls.n	800d4c8 <_free_r+0x78>
 800d4c2:	230c      	movs	r3, #12
 800d4c4:	602b      	str	r3, [r5, #0]
 800d4c6:	e7d5      	b.n	800d474 <_free_r+0x24>
 800d4c8:	6821      	ldr	r1, [r4, #0]
 800d4ca:	1860      	adds	r0, r4, r1
 800d4cc:	4283      	cmp	r3, r0
 800d4ce:	d103      	bne.n	800d4d8 <_free_r+0x88>
 800d4d0:	6818      	ldr	r0, [r3, #0]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	1841      	adds	r1, r0, r1
 800d4d6:	6021      	str	r1, [r4, #0]
 800d4d8:	6063      	str	r3, [r4, #4]
 800d4da:	6054      	str	r4, [r2, #4]
 800d4dc:	e7ca      	b.n	800d474 <_free_r+0x24>
 800d4de:	46c0      	nop			; (mov r8, r8)
 800d4e0:	20002d84 	.word	0x20002d84

0800d4e4 <__ssputs_r>:
 800d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e6:	688e      	ldr	r6, [r1, #8]
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	0007      	movs	r7, r0
 800d4ec:	000c      	movs	r4, r1
 800d4ee:	9203      	str	r2, [sp, #12]
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	429e      	cmp	r6, r3
 800d4f4:	d83c      	bhi.n	800d570 <__ssputs_r+0x8c>
 800d4f6:	2390      	movs	r3, #144	; 0x90
 800d4f8:	898a      	ldrh	r2, [r1, #12]
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	421a      	tst	r2, r3
 800d4fe:	d034      	beq.n	800d56a <__ssputs_r+0x86>
 800d500:	6909      	ldr	r1, [r1, #16]
 800d502:	6823      	ldr	r3, [r4, #0]
 800d504:	6960      	ldr	r0, [r4, #20]
 800d506:	1a5b      	subs	r3, r3, r1
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	2303      	movs	r3, #3
 800d50c:	4343      	muls	r3, r0
 800d50e:	0fdd      	lsrs	r5, r3, #31
 800d510:	18ed      	adds	r5, r5, r3
 800d512:	9b01      	ldr	r3, [sp, #4]
 800d514:	9802      	ldr	r0, [sp, #8]
 800d516:	3301      	adds	r3, #1
 800d518:	181b      	adds	r3, r3, r0
 800d51a:	106d      	asrs	r5, r5, #1
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	d900      	bls.n	800d522 <__ssputs_r+0x3e>
 800d520:	001d      	movs	r5, r3
 800d522:	0553      	lsls	r3, r2, #21
 800d524:	d532      	bpl.n	800d58c <__ssputs_r+0xa8>
 800d526:	0029      	movs	r1, r5
 800d528:	0038      	movs	r0, r7
 800d52a:	f7fd fe1d 	bl	800b168 <_malloc_r>
 800d52e:	1e06      	subs	r6, r0, #0
 800d530:	d109      	bne.n	800d546 <__ssputs_r+0x62>
 800d532:	230c      	movs	r3, #12
 800d534:	603b      	str	r3, [r7, #0]
 800d536:	2340      	movs	r3, #64	; 0x40
 800d538:	2001      	movs	r0, #1
 800d53a:	89a2      	ldrh	r2, [r4, #12]
 800d53c:	4240      	negs	r0, r0
 800d53e:	4313      	orrs	r3, r2
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	b005      	add	sp, #20
 800d544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d546:	9a02      	ldr	r2, [sp, #8]
 800d548:	6921      	ldr	r1, [r4, #16]
 800d54a:	f7fd fdda 	bl	800b102 <memcpy>
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	4a14      	ldr	r2, [pc, #80]	; (800d5a4 <__ssputs_r+0xc0>)
 800d552:	401a      	ands	r2, r3
 800d554:	2380      	movs	r3, #128	; 0x80
 800d556:	4313      	orrs	r3, r2
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	9b02      	ldr	r3, [sp, #8]
 800d55c:	6126      	str	r6, [r4, #16]
 800d55e:	18f6      	adds	r6, r6, r3
 800d560:	6026      	str	r6, [r4, #0]
 800d562:	6165      	str	r5, [r4, #20]
 800d564:	9e01      	ldr	r6, [sp, #4]
 800d566:	1aed      	subs	r5, r5, r3
 800d568:	60a5      	str	r5, [r4, #8]
 800d56a:	9b01      	ldr	r3, [sp, #4]
 800d56c:	429e      	cmp	r6, r3
 800d56e:	d900      	bls.n	800d572 <__ssputs_r+0x8e>
 800d570:	9e01      	ldr	r6, [sp, #4]
 800d572:	0032      	movs	r2, r6
 800d574:	9903      	ldr	r1, [sp, #12]
 800d576:	6820      	ldr	r0, [r4, #0]
 800d578:	f000 f96a 	bl	800d850 <memmove>
 800d57c:	68a3      	ldr	r3, [r4, #8]
 800d57e:	2000      	movs	r0, #0
 800d580:	1b9b      	subs	r3, r3, r6
 800d582:	60a3      	str	r3, [r4, #8]
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	199e      	adds	r6, r3, r6
 800d588:	6026      	str	r6, [r4, #0]
 800d58a:	e7da      	b.n	800d542 <__ssputs_r+0x5e>
 800d58c:	002a      	movs	r2, r5
 800d58e:	0038      	movs	r0, r7
 800d590:	f000 f971 	bl	800d876 <_realloc_r>
 800d594:	1e06      	subs	r6, r0, #0
 800d596:	d1e0      	bne.n	800d55a <__ssputs_r+0x76>
 800d598:	0038      	movs	r0, r7
 800d59a:	6921      	ldr	r1, [r4, #16]
 800d59c:	f7ff ff58 	bl	800d450 <_free_r>
 800d5a0:	e7c7      	b.n	800d532 <__ssputs_r+0x4e>
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	fffffb7f 	.word	0xfffffb7f

0800d5a8 <_svfiprintf_r>:
 800d5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5aa:	b0a1      	sub	sp, #132	; 0x84
 800d5ac:	9003      	str	r0, [sp, #12]
 800d5ae:	001d      	movs	r5, r3
 800d5b0:	898b      	ldrh	r3, [r1, #12]
 800d5b2:	000f      	movs	r7, r1
 800d5b4:	0016      	movs	r6, r2
 800d5b6:	061b      	lsls	r3, r3, #24
 800d5b8:	d511      	bpl.n	800d5de <_svfiprintf_r+0x36>
 800d5ba:	690b      	ldr	r3, [r1, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10e      	bne.n	800d5de <_svfiprintf_r+0x36>
 800d5c0:	2140      	movs	r1, #64	; 0x40
 800d5c2:	f7fd fdd1 	bl	800b168 <_malloc_r>
 800d5c6:	6038      	str	r0, [r7, #0]
 800d5c8:	6138      	str	r0, [r7, #16]
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d105      	bne.n	800d5da <_svfiprintf_r+0x32>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	9a03      	ldr	r2, [sp, #12]
 800d5d2:	3801      	subs	r0, #1
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	b021      	add	sp, #132	; 0x84
 800d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5da:	2340      	movs	r3, #64	; 0x40
 800d5dc:	617b      	str	r3, [r7, #20]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	ac08      	add	r4, sp, #32
 800d5e2:	6163      	str	r3, [r4, #20]
 800d5e4:	3320      	adds	r3, #32
 800d5e6:	7663      	strb	r3, [r4, #25]
 800d5e8:	3310      	adds	r3, #16
 800d5ea:	76a3      	strb	r3, [r4, #26]
 800d5ec:	9507      	str	r5, [sp, #28]
 800d5ee:	0035      	movs	r5, r6
 800d5f0:	782b      	ldrb	r3, [r5, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <_svfiprintf_r+0x52>
 800d5f6:	2b25      	cmp	r3, #37	; 0x25
 800d5f8:	d147      	bne.n	800d68a <_svfiprintf_r+0xe2>
 800d5fa:	1bab      	subs	r3, r5, r6
 800d5fc:	9305      	str	r3, [sp, #20]
 800d5fe:	42b5      	cmp	r5, r6
 800d600:	d00c      	beq.n	800d61c <_svfiprintf_r+0x74>
 800d602:	0032      	movs	r2, r6
 800d604:	0039      	movs	r1, r7
 800d606:	9803      	ldr	r0, [sp, #12]
 800d608:	f7ff ff6c 	bl	800d4e4 <__ssputs_r>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d100      	bne.n	800d612 <_svfiprintf_r+0x6a>
 800d610:	e0ae      	b.n	800d770 <_svfiprintf_r+0x1c8>
 800d612:	6962      	ldr	r2, [r4, #20]
 800d614:	9b05      	ldr	r3, [sp, #20]
 800d616:	4694      	mov	ip, r2
 800d618:	4463      	add	r3, ip
 800d61a:	6163      	str	r3, [r4, #20]
 800d61c:	782b      	ldrb	r3, [r5, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d100      	bne.n	800d624 <_svfiprintf_r+0x7c>
 800d622:	e0a5      	b.n	800d770 <_svfiprintf_r+0x1c8>
 800d624:	2201      	movs	r2, #1
 800d626:	2300      	movs	r3, #0
 800d628:	4252      	negs	r2, r2
 800d62a:	6062      	str	r2, [r4, #4]
 800d62c:	a904      	add	r1, sp, #16
 800d62e:	3254      	adds	r2, #84	; 0x54
 800d630:	1852      	adds	r2, r2, r1
 800d632:	1c6e      	adds	r6, r5, #1
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	60e3      	str	r3, [r4, #12]
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	7013      	strb	r3, [r2, #0]
 800d63c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d63e:	2205      	movs	r2, #5
 800d640:	7831      	ldrb	r1, [r6, #0]
 800d642:	4854      	ldr	r0, [pc, #336]	; (800d794 <_svfiprintf_r+0x1ec>)
 800d644:	f7ff fb20 	bl	800cc88 <memchr>
 800d648:	1c75      	adds	r5, r6, #1
 800d64a:	2800      	cmp	r0, #0
 800d64c:	d11f      	bne.n	800d68e <_svfiprintf_r+0xe6>
 800d64e:	6822      	ldr	r2, [r4, #0]
 800d650:	06d3      	lsls	r3, r2, #27
 800d652:	d504      	bpl.n	800d65e <_svfiprintf_r+0xb6>
 800d654:	2353      	movs	r3, #83	; 0x53
 800d656:	a904      	add	r1, sp, #16
 800d658:	185b      	adds	r3, r3, r1
 800d65a:	2120      	movs	r1, #32
 800d65c:	7019      	strb	r1, [r3, #0]
 800d65e:	0713      	lsls	r3, r2, #28
 800d660:	d504      	bpl.n	800d66c <_svfiprintf_r+0xc4>
 800d662:	2353      	movs	r3, #83	; 0x53
 800d664:	a904      	add	r1, sp, #16
 800d666:	185b      	adds	r3, r3, r1
 800d668:	212b      	movs	r1, #43	; 0x2b
 800d66a:	7019      	strb	r1, [r3, #0]
 800d66c:	7833      	ldrb	r3, [r6, #0]
 800d66e:	2b2a      	cmp	r3, #42	; 0x2a
 800d670:	d016      	beq.n	800d6a0 <_svfiprintf_r+0xf8>
 800d672:	0035      	movs	r5, r6
 800d674:	2100      	movs	r1, #0
 800d676:	200a      	movs	r0, #10
 800d678:	68e3      	ldr	r3, [r4, #12]
 800d67a:	782a      	ldrb	r2, [r5, #0]
 800d67c:	1c6e      	adds	r6, r5, #1
 800d67e:	3a30      	subs	r2, #48	; 0x30
 800d680:	2a09      	cmp	r2, #9
 800d682:	d94e      	bls.n	800d722 <_svfiprintf_r+0x17a>
 800d684:	2900      	cmp	r1, #0
 800d686:	d111      	bne.n	800d6ac <_svfiprintf_r+0x104>
 800d688:	e017      	b.n	800d6ba <_svfiprintf_r+0x112>
 800d68a:	3501      	adds	r5, #1
 800d68c:	e7b0      	b.n	800d5f0 <_svfiprintf_r+0x48>
 800d68e:	4b41      	ldr	r3, [pc, #260]	; (800d794 <_svfiprintf_r+0x1ec>)
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	1ac0      	subs	r0, r0, r3
 800d694:	2301      	movs	r3, #1
 800d696:	4083      	lsls	r3, r0
 800d698:	4313      	orrs	r3, r2
 800d69a:	002e      	movs	r6, r5
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	e7ce      	b.n	800d63e <_svfiprintf_r+0x96>
 800d6a0:	9b07      	ldr	r3, [sp, #28]
 800d6a2:	1d19      	adds	r1, r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	9107      	str	r1, [sp, #28]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	db01      	blt.n	800d6b0 <_svfiprintf_r+0x108>
 800d6ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6ae:	e004      	b.n	800d6ba <_svfiprintf_r+0x112>
 800d6b0:	425b      	negs	r3, r3
 800d6b2:	60e3      	str	r3, [r4, #12]
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	782b      	ldrb	r3, [r5, #0]
 800d6bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d6be:	d10a      	bne.n	800d6d6 <_svfiprintf_r+0x12e>
 800d6c0:	786b      	ldrb	r3, [r5, #1]
 800d6c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c4:	d135      	bne.n	800d732 <_svfiprintf_r+0x18a>
 800d6c6:	9b07      	ldr	r3, [sp, #28]
 800d6c8:	3502      	adds	r5, #2
 800d6ca:	1d1a      	adds	r2, r3, #4
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	9207      	str	r2, [sp, #28]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	db2b      	blt.n	800d72c <_svfiprintf_r+0x184>
 800d6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d6:	4e30      	ldr	r6, [pc, #192]	; (800d798 <_svfiprintf_r+0x1f0>)
 800d6d8:	2203      	movs	r2, #3
 800d6da:	0030      	movs	r0, r6
 800d6dc:	7829      	ldrb	r1, [r5, #0]
 800d6de:	f7ff fad3 	bl	800cc88 <memchr>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d006      	beq.n	800d6f4 <_svfiprintf_r+0x14c>
 800d6e6:	2340      	movs	r3, #64	; 0x40
 800d6e8:	1b80      	subs	r0, r0, r6
 800d6ea:	4083      	lsls	r3, r0
 800d6ec:	6822      	ldr	r2, [r4, #0]
 800d6ee:	3501      	adds	r5, #1
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	7829      	ldrb	r1, [r5, #0]
 800d6f6:	2206      	movs	r2, #6
 800d6f8:	4828      	ldr	r0, [pc, #160]	; (800d79c <_svfiprintf_r+0x1f4>)
 800d6fa:	1c6e      	adds	r6, r5, #1
 800d6fc:	7621      	strb	r1, [r4, #24]
 800d6fe:	f7ff fac3 	bl	800cc88 <memchr>
 800d702:	2800      	cmp	r0, #0
 800d704:	d03c      	beq.n	800d780 <_svfiprintf_r+0x1d8>
 800d706:	4b26      	ldr	r3, [pc, #152]	; (800d7a0 <_svfiprintf_r+0x1f8>)
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d125      	bne.n	800d758 <_svfiprintf_r+0x1b0>
 800d70c:	2207      	movs	r2, #7
 800d70e:	9b07      	ldr	r3, [sp, #28]
 800d710:	3307      	adds	r3, #7
 800d712:	4393      	bics	r3, r2
 800d714:	3308      	adds	r3, #8
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	6963      	ldr	r3, [r4, #20]
 800d71a:	9a04      	ldr	r2, [sp, #16]
 800d71c:	189b      	adds	r3, r3, r2
 800d71e:	6163      	str	r3, [r4, #20]
 800d720:	e765      	b.n	800d5ee <_svfiprintf_r+0x46>
 800d722:	4343      	muls	r3, r0
 800d724:	0035      	movs	r5, r6
 800d726:	2101      	movs	r1, #1
 800d728:	189b      	adds	r3, r3, r2
 800d72a:	e7a6      	b.n	800d67a <_svfiprintf_r+0xd2>
 800d72c:	2301      	movs	r3, #1
 800d72e:	425b      	negs	r3, r3
 800d730:	e7d0      	b.n	800d6d4 <_svfiprintf_r+0x12c>
 800d732:	2300      	movs	r3, #0
 800d734:	200a      	movs	r0, #10
 800d736:	001a      	movs	r2, r3
 800d738:	3501      	adds	r5, #1
 800d73a:	6063      	str	r3, [r4, #4]
 800d73c:	7829      	ldrb	r1, [r5, #0]
 800d73e:	1c6e      	adds	r6, r5, #1
 800d740:	3930      	subs	r1, #48	; 0x30
 800d742:	2909      	cmp	r1, #9
 800d744:	d903      	bls.n	800d74e <_svfiprintf_r+0x1a6>
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0c5      	beq.n	800d6d6 <_svfiprintf_r+0x12e>
 800d74a:	9209      	str	r2, [sp, #36]	; 0x24
 800d74c:	e7c3      	b.n	800d6d6 <_svfiprintf_r+0x12e>
 800d74e:	4342      	muls	r2, r0
 800d750:	0035      	movs	r5, r6
 800d752:	2301      	movs	r3, #1
 800d754:	1852      	adds	r2, r2, r1
 800d756:	e7f1      	b.n	800d73c <_svfiprintf_r+0x194>
 800d758:	ab07      	add	r3, sp, #28
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	003a      	movs	r2, r7
 800d75e:	0021      	movs	r1, r4
 800d760:	4b10      	ldr	r3, [pc, #64]	; (800d7a4 <_svfiprintf_r+0x1fc>)
 800d762:	9803      	ldr	r0, [sp, #12]
 800d764:	f7fd fe20 	bl	800b3a8 <_printf_float>
 800d768:	9004      	str	r0, [sp, #16]
 800d76a:	9b04      	ldr	r3, [sp, #16]
 800d76c:	3301      	adds	r3, #1
 800d76e:	d1d3      	bne.n	800d718 <_svfiprintf_r+0x170>
 800d770:	89bb      	ldrh	r3, [r7, #12]
 800d772:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d774:	065b      	lsls	r3, r3, #25
 800d776:	d400      	bmi.n	800d77a <_svfiprintf_r+0x1d2>
 800d778:	e72d      	b.n	800d5d6 <_svfiprintf_r+0x2e>
 800d77a:	2001      	movs	r0, #1
 800d77c:	4240      	negs	r0, r0
 800d77e:	e72a      	b.n	800d5d6 <_svfiprintf_r+0x2e>
 800d780:	ab07      	add	r3, sp, #28
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	003a      	movs	r2, r7
 800d786:	0021      	movs	r1, r4
 800d788:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <_svfiprintf_r+0x1fc>)
 800d78a:	9803      	ldr	r0, [sp, #12]
 800d78c:	f7fe f8be 	bl	800b90c <_printf_i>
 800d790:	e7ea      	b.n	800d768 <_svfiprintf_r+0x1c0>
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	0800e534 	.word	0x0800e534
 800d798:	0800e53a 	.word	0x0800e53a
 800d79c:	0800e53e 	.word	0x0800e53e
 800d7a0:	0800b3a9 	.word	0x0800b3a9
 800d7a4:	0800d4e5 	.word	0x0800d4e5

0800d7a8 <_read_r>:
 800d7a8:	b570      	push	{r4, r5, r6, lr}
 800d7aa:	0004      	movs	r4, r0
 800d7ac:	0008      	movs	r0, r1
 800d7ae:	0011      	movs	r1, r2
 800d7b0:	001a      	movs	r2, r3
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	4d05      	ldr	r5, [pc, #20]	; (800d7cc <_read_r+0x24>)
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	f7f5 ff86 	bl	80036c8 <_read>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d103      	bne.n	800d7c8 <_read_r+0x20>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d000      	beq.n	800d7c8 <_read_r+0x20>
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ca:	46c0      	nop			; (mov r8, r8)
 800d7cc:	20002d8c 	.word	0x20002d8c

0800d7d0 <__assert_func>:
 800d7d0:	b530      	push	{r4, r5, lr}
 800d7d2:	0014      	movs	r4, r2
 800d7d4:	001a      	movs	r2, r3
 800d7d6:	4b09      	ldr	r3, [pc, #36]	; (800d7fc <__assert_func+0x2c>)
 800d7d8:	0005      	movs	r5, r0
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	b085      	sub	sp, #20
 800d7de:	68d8      	ldr	r0, [r3, #12]
 800d7e0:	4b07      	ldr	r3, [pc, #28]	; (800d800 <__assert_func+0x30>)
 800d7e2:	2c00      	cmp	r4, #0
 800d7e4:	d101      	bne.n	800d7ea <__assert_func+0x1a>
 800d7e6:	4b07      	ldr	r3, [pc, #28]	; (800d804 <__assert_func+0x34>)
 800d7e8:	001c      	movs	r4, r3
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	9100      	str	r1, [sp, #0]
 800d7ee:	002b      	movs	r3, r5
 800d7f0:	4905      	ldr	r1, [pc, #20]	; (800d808 <__assert_func+0x38>)
 800d7f2:	9402      	str	r4, [sp, #8]
 800d7f4:	f000 f80a 	bl	800d80c <fiprintf>
 800d7f8:	f000 faaa 	bl	800dd50 <abort>
 800d7fc:	20000014 	.word	0x20000014
 800d800:	0800e545 	.word	0x0800e545
 800d804:	0800e580 	.word	0x0800e580
 800d808:	0800e552 	.word	0x0800e552

0800d80c <fiprintf>:
 800d80c:	b40e      	push	{r1, r2, r3}
 800d80e:	b503      	push	{r0, r1, lr}
 800d810:	0001      	movs	r1, r0
 800d812:	ab03      	add	r3, sp, #12
 800d814:	4804      	ldr	r0, [pc, #16]	; (800d828 <fiprintf+0x1c>)
 800d816:	cb04      	ldmia	r3!, {r2}
 800d818:	6800      	ldr	r0, [r0, #0]
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	f000 f882 	bl	800d924 <_vfiprintf_r>
 800d820:	b002      	add	sp, #8
 800d822:	bc08      	pop	{r3}
 800d824:	b003      	add	sp, #12
 800d826:	4718      	bx	r3
 800d828:	20000014 	.word	0x20000014

0800d82c <__ascii_mbtowc>:
 800d82c:	b082      	sub	sp, #8
 800d82e:	2900      	cmp	r1, #0
 800d830:	d100      	bne.n	800d834 <__ascii_mbtowc+0x8>
 800d832:	a901      	add	r1, sp, #4
 800d834:	1e10      	subs	r0, r2, #0
 800d836:	d006      	beq.n	800d846 <__ascii_mbtowc+0x1a>
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d006      	beq.n	800d84a <__ascii_mbtowc+0x1e>
 800d83c:	7813      	ldrb	r3, [r2, #0]
 800d83e:	600b      	str	r3, [r1, #0]
 800d840:	7810      	ldrb	r0, [r2, #0]
 800d842:	1e43      	subs	r3, r0, #1
 800d844:	4198      	sbcs	r0, r3
 800d846:	b002      	add	sp, #8
 800d848:	4770      	bx	lr
 800d84a:	2002      	movs	r0, #2
 800d84c:	4240      	negs	r0, r0
 800d84e:	e7fa      	b.n	800d846 <__ascii_mbtowc+0x1a>

0800d850 <memmove>:
 800d850:	b510      	push	{r4, lr}
 800d852:	4288      	cmp	r0, r1
 800d854:	d902      	bls.n	800d85c <memmove+0xc>
 800d856:	188b      	adds	r3, r1, r2
 800d858:	4298      	cmp	r0, r3
 800d85a:	d303      	bcc.n	800d864 <memmove+0x14>
 800d85c:	2300      	movs	r3, #0
 800d85e:	e007      	b.n	800d870 <memmove+0x20>
 800d860:	5c8b      	ldrb	r3, [r1, r2]
 800d862:	5483      	strb	r3, [r0, r2]
 800d864:	3a01      	subs	r2, #1
 800d866:	d2fb      	bcs.n	800d860 <memmove+0x10>
 800d868:	bd10      	pop	{r4, pc}
 800d86a:	5ccc      	ldrb	r4, [r1, r3]
 800d86c:	54c4      	strb	r4, [r0, r3]
 800d86e:	3301      	adds	r3, #1
 800d870:	429a      	cmp	r2, r3
 800d872:	d1fa      	bne.n	800d86a <memmove+0x1a>
 800d874:	e7f8      	b.n	800d868 <memmove+0x18>

0800d876 <_realloc_r>:
 800d876:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d878:	0007      	movs	r7, r0
 800d87a:	000e      	movs	r6, r1
 800d87c:	0014      	movs	r4, r2
 800d87e:	2900      	cmp	r1, #0
 800d880:	d105      	bne.n	800d88e <_realloc_r+0x18>
 800d882:	0011      	movs	r1, r2
 800d884:	f7fd fc70 	bl	800b168 <_malloc_r>
 800d888:	0005      	movs	r5, r0
 800d88a:	0028      	movs	r0, r5
 800d88c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d88e:	2a00      	cmp	r2, #0
 800d890:	d103      	bne.n	800d89a <_realloc_r+0x24>
 800d892:	f7ff fddd 	bl	800d450 <_free_r>
 800d896:	0025      	movs	r5, r4
 800d898:	e7f7      	b.n	800d88a <_realloc_r+0x14>
 800d89a:	f000 facd 	bl	800de38 <_malloc_usable_size_r>
 800d89e:	9001      	str	r0, [sp, #4]
 800d8a0:	4284      	cmp	r4, r0
 800d8a2:	d803      	bhi.n	800d8ac <_realloc_r+0x36>
 800d8a4:	0035      	movs	r5, r6
 800d8a6:	0843      	lsrs	r3, r0, #1
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	d3ee      	bcc.n	800d88a <_realloc_r+0x14>
 800d8ac:	0021      	movs	r1, r4
 800d8ae:	0038      	movs	r0, r7
 800d8b0:	f7fd fc5a 	bl	800b168 <_malloc_r>
 800d8b4:	1e05      	subs	r5, r0, #0
 800d8b6:	d0e8      	beq.n	800d88a <_realloc_r+0x14>
 800d8b8:	9b01      	ldr	r3, [sp, #4]
 800d8ba:	0022      	movs	r2, r4
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d900      	bls.n	800d8c2 <_realloc_r+0x4c>
 800d8c0:	001a      	movs	r2, r3
 800d8c2:	0031      	movs	r1, r6
 800d8c4:	0028      	movs	r0, r5
 800d8c6:	f7fd fc1c 	bl	800b102 <memcpy>
 800d8ca:	0031      	movs	r1, r6
 800d8cc:	0038      	movs	r0, r7
 800d8ce:	f7ff fdbf 	bl	800d450 <_free_r>
 800d8d2:	e7da      	b.n	800d88a <_realloc_r+0x14>

0800d8d4 <__sfputc_r>:
 800d8d4:	6893      	ldr	r3, [r2, #8]
 800d8d6:	b510      	push	{r4, lr}
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	6093      	str	r3, [r2, #8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	da04      	bge.n	800d8ea <__sfputc_r+0x16>
 800d8e0:	6994      	ldr	r4, [r2, #24]
 800d8e2:	42a3      	cmp	r3, r4
 800d8e4:	db07      	blt.n	800d8f6 <__sfputc_r+0x22>
 800d8e6:	290a      	cmp	r1, #10
 800d8e8:	d005      	beq.n	800d8f6 <__sfputc_r+0x22>
 800d8ea:	6813      	ldr	r3, [r2, #0]
 800d8ec:	1c58      	adds	r0, r3, #1
 800d8ee:	6010      	str	r0, [r2, #0]
 800d8f0:	7019      	strb	r1, [r3, #0]
 800d8f2:	0008      	movs	r0, r1
 800d8f4:	bd10      	pop	{r4, pc}
 800d8f6:	f000 f94f 	bl	800db98 <__swbuf_r>
 800d8fa:	0001      	movs	r1, r0
 800d8fc:	e7f9      	b.n	800d8f2 <__sfputc_r+0x1e>

0800d8fe <__sfputs_r>:
 800d8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d900:	0006      	movs	r6, r0
 800d902:	000f      	movs	r7, r1
 800d904:	0014      	movs	r4, r2
 800d906:	18d5      	adds	r5, r2, r3
 800d908:	42ac      	cmp	r4, r5
 800d90a:	d101      	bne.n	800d910 <__sfputs_r+0x12>
 800d90c:	2000      	movs	r0, #0
 800d90e:	e007      	b.n	800d920 <__sfputs_r+0x22>
 800d910:	7821      	ldrb	r1, [r4, #0]
 800d912:	003a      	movs	r2, r7
 800d914:	0030      	movs	r0, r6
 800d916:	f7ff ffdd 	bl	800d8d4 <__sfputc_r>
 800d91a:	3401      	adds	r4, #1
 800d91c:	1c43      	adds	r3, r0, #1
 800d91e:	d1f3      	bne.n	800d908 <__sfputs_r+0xa>
 800d920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d924 <_vfiprintf_r>:
 800d924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d926:	b0a1      	sub	sp, #132	; 0x84
 800d928:	0006      	movs	r6, r0
 800d92a:	000c      	movs	r4, r1
 800d92c:	001f      	movs	r7, r3
 800d92e:	9203      	str	r2, [sp, #12]
 800d930:	2800      	cmp	r0, #0
 800d932:	d004      	beq.n	800d93e <_vfiprintf_r+0x1a>
 800d934:	6983      	ldr	r3, [r0, #24]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <_vfiprintf_r+0x1a>
 800d93a:	f7fd fb1b 	bl	800af74 <__sinit>
 800d93e:	4b8e      	ldr	r3, [pc, #568]	; (800db78 <_vfiprintf_r+0x254>)
 800d940:	429c      	cmp	r4, r3
 800d942:	d11c      	bne.n	800d97e <_vfiprintf_r+0x5a>
 800d944:	6874      	ldr	r4, [r6, #4]
 800d946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d948:	07db      	lsls	r3, r3, #31
 800d94a:	d405      	bmi.n	800d958 <_vfiprintf_r+0x34>
 800d94c:	89a3      	ldrh	r3, [r4, #12]
 800d94e:	059b      	lsls	r3, r3, #22
 800d950:	d402      	bmi.n	800d958 <_vfiprintf_r+0x34>
 800d952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d954:	f7fd fbd3 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800d958:	89a3      	ldrh	r3, [r4, #12]
 800d95a:	071b      	lsls	r3, r3, #28
 800d95c:	d502      	bpl.n	800d964 <_vfiprintf_r+0x40>
 800d95e:	6923      	ldr	r3, [r4, #16]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d11d      	bne.n	800d9a0 <_vfiprintf_r+0x7c>
 800d964:	0021      	movs	r1, r4
 800d966:	0030      	movs	r0, r6
 800d968:	f000 f97a 	bl	800dc60 <__swsetup_r>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d017      	beq.n	800d9a0 <_vfiprintf_r+0x7c>
 800d970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d972:	07db      	lsls	r3, r3, #31
 800d974:	d50d      	bpl.n	800d992 <_vfiprintf_r+0x6e>
 800d976:	2001      	movs	r0, #1
 800d978:	4240      	negs	r0, r0
 800d97a:	b021      	add	sp, #132	; 0x84
 800d97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d97e:	4b7f      	ldr	r3, [pc, #508]	; (800db7c <_vfiprintf_r+0x258>)
 800d980:	429c      	cmp	r4, r3
 800d982:	d101      	bne.n	800d988 <_vfiprintf_r+0x64>
 800d984:	68b4      	ldr	r4, [r6, #8]
 800d986:	e7de      	b.n	800d946 <_vfiprintf_r+0x22>
 800d988:	4b7d      	ldr	r3, [pc, #500]	; (800db80 <_vfiprintf_r+0x25c>)
 800d98a:	429c      	cmp	r4, r3
 800d98c:	d1db      	bne.n	800d946 <_vfiprintf_r+0x22>
 800d98e:	68f4      	ldr	r4, [r6, #12]
 800d990:	e7d9      	b.n	800d946 <_vfiprintf_r+0x22>
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	059b      	lsls	r3, r3, #22
 800d996:	d4ee      	bmi.n	800d976 <_vfiprintf_r+0x52>
 800d998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d99a:	f7fd fbb1 	bl	800b100 <__retarget_lock_release_recursive>
 800d99e:	e7ea      	b.n	800d976 <_vfiprintf_r+0x52>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	ad08      	add	r5, sp, #32
 800d9a4:	616b      	str	r3, [r5, #20]
 800d9a6:	3320      	adds	r3, #32
 800d9a8:	766b      	strb	r3, [r5, #25]
 800d9aa:	3310      	adds	r3, #16
 800d9ac:	76ab      	strb	r3, [r5, #26]
 800d9ae:	9707      	str	r7, [sp, #28]
 800d9b0:	9f03      	ldr	r7, [sp, #12]
 800d9b2:	783b      	ldrb	r3, [r7, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <_vfiprintf_r+0x98>
 800d9b8:	2b25      	cmp	r3, #37	; 0x25
 800d9ba:	d14e      	bne.n	800da5a <_vfiprintf_r+0x136>
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	1afb      	subs	r3, r7, r3
 800d9c0:	9305      	str	r3, [sp, #20]
 800d9c2:	9b03      	ldr	r3, [sp, #12]
 800d9c4:	429f      	cmp	r7, r3
 800d9c6:	d00d      	beq.n	800d9e4 <_vfiprintf_r+0xc0>
 800d9c8:	9b05      	ldr	r3, [sp, #20]
 800d9ca:	0021      	movs	r1, r4
 800d9cc:	0030      	movs	r0, r6
 800d9ce:	9a03      	ldr	r2, [sp, #12]
 800d9d0:	f7ff ff95 	bl	800d8fe <__sfputs_r>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d100      	bne.n	800d9da <_vfiprintf_r+0xb6>
 800d9d8:	e0b5      	b.n	800db46 <_vfiprintf_r+0x222>
 800d9da:	696a      	ldr	r2, [r5, #20]
 800d9dc:	9b05      	ldr	r3, [sp, #20]
 800d9de:	4694      	mov	ip, r2
 800d9e0:	4463      	add	r3, ip
 800d9e2:	616b      	str	r3, [r5, #20]
 800d9e4:	783b      	ldrb	r3, [r7, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d100      	bne.n	800d9ec <_vfiprintf_r+0xc8>
 800d9ea:	e0ac      	b.n	800db46 <_vfiprintf_r+0x222>
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	1c7b      	adds	r3, r7, #1
 800d9f0:	9303      	str	r3, [sp, #12]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	4252      	negs	r2, r2
 800d9f6:	606a      	str	r2, [r5, #4]
 800d9f8:	a904      	add	r1, sp, #16
 800d9fa:	3254      	adds	r2, #84	; 0x54
 800d9fc:	1852      	adds	r2, r2, r1
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	60eb      	str	r3, [r5, #12]
 800da02:	60ab      	str	r3, [r5, #8]
 800da04:	7013      	strb	r3, [r2, #0]
 800da06:	65ab      	str	r3, [r5, #88]	; 0x58
 800da08:	9b03      	ldr	r3, [sp, #12]
 800da0a:	2205      	movs	r2, #5
 800da0c:	7819      	ldrb	r1, [r3, #0]
 800da0e:	485d      	ldr	r0, [pc, #372]	; (800db84 <_vfiprintf_r+0x260>)
 800da10:	f7ff f93a 	bl	800cc88 <memchr>
 800da14:	9b03      	ldr	r3, [sp, #12]
 800da16:	1c5f      	adds	r7, r3, #1
 800da18:	2800      	cmp	r0, #0
 800da1a:	d120      	bne.n	800da5e <_vfiprintf_r+0x13a>
 800da1c:	682a      	ldr	r2, [r5, #0]
 800da1e:	06d3      	lsls	r3, r2, #27
 800da20:	d504      	bpl.n	800da2c <_vfiprintf_r+0x108>
 800da22:	2353      	movs	r3, #83	; 0x53
 800da24:	a904      	add	r1, sp, #16
 800da26:	185b      	adds	r3, r3, r1
 800da28:	2120      	movs	r1, #32
 800da2a:	7019      	strb	r1, [r3, #0]
 800da2c:	0713      	lsls	r3, r2, #28
 800da2e:	d504      	bpl.n	800da3a <_vfiprintf_r+0x116>
 800da30:	2353      	movs	r3, #83	; 0x53
 800da32:	a904      	add	r1, sp, #16
 800da34:	185b      	adds	r3, r3, r1
 800da36:	212b      	movs	r1, #43	; 0x2b
 800da38:	7019      	strb	r1, [r3, #0]
 800da3a:	9b03      	ldr	r3, [sp, #12]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b2a      	cmp	r3, #42	; 0x2a
 800da40:	d016      	beq.n	800da70 <_vfiprintf_r+0x14c>
 800da42:	2100      	movs	r1, #0
 800da44:	68eb      	ldr	r3, [r5, #12]
 800da46:	9f03      	ldr	r7, [sp, #12]
 800da48:	783a      	ldrb	r2, [r7, #0]
 800da4a:	1c78      	adds	r0, r7, #1
 800da4c:	3a30      	subs	r2, #48	; 0x30
 800da4e:	4684      	mov	ip, r0
 800da50:	2a09      	cmp	r2, #9
 800da52:	d94f      	bls.n	800daf4 <_vfiprintf_r+0x1d0>
 800da54:	2900      	cmp	r1, #0
 800da56:	d111      	bne.n	800da7c <_vfiprintf_r+0x158>
 800da58:	e017      	b.n	800da8a <_vfiprintf_r+0x166>
 800da5a:	3701      	adds	r7, #1
 800da5c:	e7a9      	b.n	800d9b2 <_vfiprintf_r+0x8e>
 800da5e:	4b49      	ldr	r3, [pc, #292]	; (800db84 <_vfiprintf_r+0x260>)
 800da60:	682a      	ldr	r2, [r5, #0]
 800da62:	1ac0      	subs	r0, r0, r3
 800da64:	2301      	movs	r3, #1
 800da66:	4083      	lsls	r3, r0
 800da68:	4313      	orrs	r3, r2
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	9703      	str	r7, [sp, #12]
 800da6e:	e7cb      	b.n	800da08 <_vfiprintf_r+0xe4>
 800da70:	9b07      	ldr	r3, [sp, #28]
 800da72:	1d19      	adds	r1, r3, #4
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	9107      	str	r1, [sp, #28]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	db01      	blt.n	800da80 <_vfiprintf_r+0x15c>
 800da7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800da7e:	e004      	b.n	800da8a <_vfiprintf_r+0x166>
 800da80:	425b      	negs	r3, r3
 800da82:	60eb      	str	r3, [r5, #12]
 800da84:	2302      	movs	r3, #2
 800da86:	4313      	orrs	r3, r2
 800da88:	602b      	str	r3, [r5, #0]
 800da8a:	783b      	ldrb	r3, [r7, #0]
 800da8c:	2b2e      	cmp	r3, #46	; 0x2e
 800da8e:	d10a      	bne.n	800daa6 <_vfiprintf_r+0x182>
 800da90:	787b      	ldrb	r3, [r7, #1]
 800da92:	2b2a      	cmp	r3, #42	; 0x2a
 800da94:	d137      	bne.n	800db06 <_vfiprintf_r+0x1e2>
 800da96:	9b07      	ldr	r3, [sp, #28]
 800da98:	3702      	adds	r7, #2
 800da9a:	1d1a      	adds	r2, r3, #4
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	9207      	str	r2, [sp, #28]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	db2d      	blt.n	800db00 <_vfiprintf_r+0x1dc>
 800daa4:	9309      	str	r3, [sp, #36]	; 0x24
 800daa6:	2203      	movs	r2, #3
 800daa8:	7839      	ldrb	r1, [r7, #0]
 800daaa:	4837      	ldr	r0, [pc, #220]	; (800db88 <_vfiprintf_r+0x264>)
 800daac:	f7ff f8ec 	bl	800cc88 <memchr>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d007      	beq.n	800dac4 <_vfiprintf_r+0x1a0>
 800dab4:	4b34      	ldr	r3, [pc, #208]	; (800db88 <_vfiprintf_r+0x264>)
 800dab6:	682a      	ldr	r2, [r5, #0]
 800dab8:	1ac0      	subs	r0, r0, r3
 800daba:	2340      	movs	r3, #64	; 0x40
 800dabc:	4083      	lsls	r3, r0
 800dabe:	4313      	orrs	r3, r2
 800dac0:	3701      	adds	r7, #1
 800dac2:	602b      	str	r3, [r5, #0]
 800dac4:	7839      	ldrb	r1, [r7, #0]
 800dac6:	1c7b      	adds	r3, r7, #1
 800dac8:	2206      	movs	r2, #6
 800daca:	4830      	ldr	r0, [pc, #192]	; (800db8c <_vfiprintf_r+0x268>)
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	7629      	strb	r1, [r5, #24]
 800dad0:	f7ff f8da 	bl	800cc88 <memchr>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d045      	beq.n	800db64 <_vfiprintf_r+0x240>
 800dad8:	4b2d      	ldr	r3, [pc, #180]	; (800db90 <_vfiprintf_r+0x26c>)
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d127      	bne.n	800db2e <_vfiprintf_r+0x20a>
 800dade:	2207      	movs	r2, #7
 800dae0:	9b07      	ldr	r3, [sp, #28]
 800dae2:	3307      	adds	r3, #7
 800dae4:	4393      	bics	r3, r2
 800dae6:	3308      	adds	r3, #8
 800dae8:	9307      	str	r3, [sp, #28]
 800daea:	696b      	ldr	r3, [r5, #20]
 800daec:	9a04      	ldr	r2, [sp, #16]
 800daee:	189b      	adds	r3, r3, r2
 800daf0:	616b      	str	r3, [r5, #20]
 800daf2:	e75d      	b.n	800d9b0 <_vfiprintf_r+0x8c>
 800daf4:	210a      	movs	r1, #10
 800daf6:	434b      	muls	r3, r1
 800daf8:	4667      	mov	r7, ip
 800dafa:	189b      	adds	r3, r3, r2
 800dafc:	3909      	subs	r1, #9
 800dafe:	e7a3      	b.n	800da48 <_vfiprintf_r+0x124>
 800db00:	2301      	movs	r3, #1
 800db02:	425b      	negs	r3, r3
 800db04:	e7ce      	b.n	800daa4 <_vfiprintf_r+0x180>
 800db06:	2300      	movs	r3, #0
 800db08:	001a      	movs	r2, r3
 800db0a:	3701      	adds	r7, #1
 800db0c:	606b      	str	r3, [r5, #4]
 800db0e:	7839      	ldrb	r1, [r7, #0]
 800db10:	1c78      	adds	r0, r7, #1
 800db12:	3930      	subs	r1, #48	; 0x30
 800db14:	4684      	mov	ip, r0
 800db16:	2909      	cmp	r1, #9
 800db18:	d903      	bls.n	800db22 <_vfiprintf_r+0x1fe>
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0c3      	beq.n	800daa6 <_vfiprintf_r+0x182>
 800db1e:	9209      	str	r2, [sp, #36]	; 0x24
 800db20:	e7c1      	b.n	800daa6 <_vfiprintf_r+0x182>
 800db22:	230a      	movs	r3, #10
 800db24:	435a      	muls	r2, r3
 800db26:	4667      	mov	r7, ip
 800db28:	1852      	adds	r2, r2, r1
 800db2a:	3b09      	subs	r3, #9
 800db2c:	e7ef      	b.n	800db0e <_vfiprintf_r+0x1ea>
 800db2e:	ab07      	add	r3, sp, #28
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	0022      	movs	r2, r4
 800db34:	0029      	movs	r1, r5
 800db36:	0030      	movs	r0, r6
 800db38:	4b16      	ldr	r3, [pc, #88]	; (800db94 <_vfiprintf_r+0x270>)
 800db3a:	f7fd fc35 	bl	800b3a8 <_printf_float>
 800db3e:	9004      	str	r0, [sp, #16]
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	3301      	adds	r3, #1
 800db44:	d1d1      	bne.n	800daea <_vfiprintf_r+0x1c6>
 800db46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db48:	07db      	lsls	r3, r3, #31
 800db4a:	d405      	bmi.n	800db58 <_vfiprintf_r+0x234>
 800db4c:	89a3      	ldrh	r3, [r4, #12]
 800db4e:	059b      	lsls	r3, r3, #22
 800db50:	d402      	bmi.n	800db58 <_vfiprintf_r+0x234>
 800db52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db54:	f7fd fad4 	bl	800b100 <__retarget_lock_release_recursive>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	065b      	lsls	r3, r3, #25
 800db5c:	d500      	bpl.n	800db60 <_vfiprintf_r+0x23c>
 800db5e:	e70a      	b.n	800d976 <_vfiprintf_r+0x52>
 800db60:	980d      	ldr	r0, [sp, #52]	; 0x34
 800db62:	e70a      	b.n	800d97a <_vfiprintf_r+0x56>
 800db64:	ab07      	add	r3, sp, #28
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	0022      	movs	r2, r4
 800db6a:	0029      	movs	r1, r5
 800db6c:	0030      	movs	r0, r6
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <_vfiprintf_r+0x270>)
 800db70:	f7fd fecc 	bl	800b90c <_printf_i>
 800db74:	e7e3      	b.n	800db3e <_vfiprintf_r+0x21a>
 800db76:	46c0      	nop			; (mov r8, r8)
 800db78:	0800e2d4 	.word	0x0800e2d4
 800db7c:	0800e2f4 	.word	0x0800e2f4
 800db80:	0800e2b4 	.word	0x0800e2b4
 800db84:	0800e534 	.word	0x0800e534
 800db88:	0800e53a 	.word	0x0800e53a
 800db8c:	0800e53e 	.word	0x0800e53e
 800db90:	0800b3a9 	.word	0x0800b3a9
 800db94:	0800d8ff 	.word	0x0800d8ff

0800db98 <__swbuf_r>:
 800db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db9a:	0005      	movs	r5, r0
 800db9c:	000e      	movs	r6, r1
 800db9e:	0014      	movs	r4, r2
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d004      	beq.n	800dbae <__swbuf_r+0x16>
 800dba4:	6983      	ldr	r3, [r0, #24]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <__swbuf_r+0x16>
 800dbaa:	f7fd f9e3 	bl	800af74 <__sinit>
 800dbae:	4b22      	ldr	r3, [pc, #136]	; (800dc38 <__swbuf_r+0xa0>)
 800dbb0:	429c      	cmp	r4, r3
 800dbb2:	d12e      	bne.n	800dc12 <__swbuf_r+0x7a>
 800dbb4:	686c      	ldr	r4, [r5, #4]
 800dbb6:	69a3      	ldr	r3, [r4, #24]
 800dbb8:	60a3      	str	r3, [r4, #8]
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	071b      	lsls	r3, r3, #28
 800dbbe:	d532      	bpl.n	800dc26 <__swbuf_r+0x8e>
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d02f      	beq.n	800dc26 <__swbuf_r+0x8e>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	6922      	ldr	r2, [r4, #16]
 800dbca:	b2f7      	uxtb	r7, r6
 800dbcc:	1a98      	subs	r0, r3, r2
 800dbce:	6963      	ldr	r3, [r4, #20]
 800dbd0:	b2f6      	uxtb	r6, r6
 800dbd2:	4283      	cmp	r3, r0
 800dbd4:	dc05      	bgt.n	800dbe2 <__swbuf_r+0x4a>
 800dbd6:	0021      	movs	r1, r4
 800dbd8:	0028      	movs	r0, r5
 800dbda:	f7fe fff3 	bl	800cbc4 <_fflush_r>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d127      	bne.n	800dc32 <__swbuf_r+0x9a>
 800dbe2:	68a3      	ldr	r3, [r4, #8]
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	60a3      	str	r3, [r4, #8]
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	6022      	str	r2, [r4, #0]
 800dbf0:	701f      	strb	r7, [r3, #0]
 800dbf2:	6963      	ldr	r3, [r4, #20]
 800dbf4:	4283      	cmp	r3, r0
 800dbf6:	d004      	beq.n	800dc02 <__swbuf_r+0x6a>
 800dbf8:	89a3      	ldrh	r3, [r4, #12]
 800dbfa:	07db      	lsls	r3, r3, #31
 800dbfc:	d507      	bpl.n	800dc0e <__swbuf_r+0x76>
 800dbfe:	2e0a      	cmp	r6, #10
 800dc00:	d105      	bne.n	800dc0e <__swbuf_r+0x76>
 800dc02:	0021      	movs	r1, r4
 800dc04:	0028      	movs	r0, r5
 800dc06:	f7fe ffdd 	bl	800cbc4 <_fflush_r>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d111      	bne.n	800dc32 <__swbuf_r+0x9a>
 800dc0e:	0030      	movs	r0, r6
 800dc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc12:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <__swbuf_r+0xa4>)
 800dc14:	429c      	cmp	r4, r3
 800dc16:	d101      	bne.n	800dc1c <__swbuf_r+0x84>
 800dc18:	68ac      	ldr	r4, [r5, #8]
 800dc1a:	e7cc      	b.n	800dbb6 <__swbuf_r+0x1e>
 800dc1c:	4b08      	ldr	r3, [pc, #32]	; (800dc40 <__swbuf_r+0xa8>)
 800dc1e:	429c      	cmp	r4, r3
 800dc20:	d1c9      	bne.n	800dbb6 <__swbuf_r+0x1e>
 800dc22:	68ec      	ldr	r4, [r5, #12]
 800dc24:	e7c7      	b.n	800dbb6 <__swbuf_r+0x1e>
 800dc26:	0021      	movs	r1, r4
 800dc28:	0028      	movs	r0, r5
 800dc2a:	f000 f819 	bl	800dc60 <__swsetup_r>
 800dc2e:	2800      	cmp	r0, #0
 800dc30:	d0c9      	beq.n	800dbc6 <__swbuf_r+0x2e>
 800dc32:	2601      	movs	r6, #1
 800dc34:	4276      	negs	r6, r6
 800dc36:	e7ea      	b.n	800dc0e <__swbuf_r+0x76>
 800dc38:	0800e2d4 	.word	0x0800e2d4
 800dc3c:	0800e2f4 	.word	0x0800e2f4
 800dc40:	0800e2b4 	.word	0x0800e2b4

0800dc44 <__ascii_wctomb>:
 800dc44:	0003      	movs	r3, r0
 800dc46:	1e08      	subs	r0, r1, #0
 800dc48:	d005      	beq.n	800dc56 <__ascii_wctomb+0x12>
 800dc4a:	2aff      	cmp	r2, #255	; 0xff
 800dc4c:	d904      	bls.n	800dc58 <__ascii_wctomb+0x14>
 800dc4e:	228a      	movs	r2, #138	; 0x8a
 800dc50:	2001      	movs	r0, #1
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	4240      	negs	r0, r0
 800dc56:	4770      	bx	lr
 800dc58:	2001      	movs	r0, #1
 800dc5a:	700a      	strb	r2, [r1, #0]
 800dc5c:	e7fb      	b.n	800dc56 <__ascii_wctomb+0x12>
	...

0800dc60 <__swsetup_r>:
 800dc60:	4b37      	ldr	r3, [pc, #220]	; (800dd40 <__swsetup_r+0xe0>)
 800dc62:	b570      	push	{r4, r5, r6, lr}
 800dc64:	681d      	ldr	r5, [r3, #0]
 800dc66:	0006      	movs	r6, r0
 800dc68:	000c      	movs	r4, r1
 800dc6a:	2d00      	cmp	r5, #0
 800dc6c:	d005      	beq.n	800dc7a <__swsetup_r+0x1a>
 800dc6e:	69ab      	ldr	r3, [r5, #24]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d102      	bne.n	800dc7a <__swsetup_r+0x1a>
 800dc74:	0028      	movs	r0, r5
 800dc76:	f7fd f97d 	bl	800af74 <__sinit>
 800dc7a:	4b32      	ldr	r3, [pc, #200]	; (800dd44 <__swsetup_r+0xe4>)
 800dc7c:	429c      	cmp	r4, r3
 800dc7e:	d10f      	bne.n	800dca0 <__swsetup_r+0x40>
 800dc80:	686c      	ldr	r4, [r5, #4]
 800dc82:	230c      	movs	r3, #12
 800dc84:	5ee2      	ldrsh	r2, [r4, r3]
 800dc86:	b293      	uxth	r3, r2
 800dc88:	0711      	lsls	r1, r2, #28
 800dc8a:	d42d      	bmi.n	800dce8 <__swsetup_r+0x88>
 800dc8c:	06d9      	lsls	r1, r3, #27
 800dc8e:	d411      	bmi.n	800dcb4 <__swsetup_r+0x54>
 800dc90:	2309      	movs	r3, #9
 800dc92:	2001      	movs	r0, #1
 800dc94:	6033      	str	r3, [r6, #0]
 800dc96:	3337      	adds	r3, #55	; 0x37
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	81a3      	strh	r3, [r4, #12]
 800dc9c:	4240      	negs	r0, r0
 800dc9e:	bd70      	pop	{r4, r5, r6, pc}
 800dca0:	4b29      	ldr	r3, [pc, #164]	; (800dd48 <__swsetup_r+0xe8>)
 800dca2:	429c      	cmp	r4, r3
 800dca4:	d101      	bne.n	800dcaa <__swsetup_r+0x4a>
 800dca6:	68ac      	ldr	r4, [r5, #8]
 800dca8:	e7eb      	b.n	800dc82 <__swsetup_r+0x22>
 800dcaa:	4b28      	ldr	r3, [pc, #160]	; (800dd4c <__swsetup_r+0xec>)
 800dcac:	429c      	cmp	r4, r3
 800dcae:	d1e8      	bne.n	800dc82 <__swsetup_r+0x22>
 800dcb0:	68ec      	ldr	r4, [r5, #12]
 800dcb2:	e7e6      	b.n	800dc82 <__swsetup_r+0x22>
 800dcb4:	075b      	lsls	r3, r3, #29
 800dcb6:	d513      	bpl.n	800dce0 <__swsetup_r+0x80>
 800dcb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcba:	2900      	cmp	r1, #0
 800dcbc:	d008      	beq.n	800dcd0 <__swsetup_r+0x70>
 800dcbe:	0023      	movs	r3, r4
 800dcc0:	3344      	adds	r3, #68	; 0x44
 800dcc2:	4299      	cmp	r1, r3
 800dcc4:	d002      	beq.n	800dccc <__swsetup_r+0x6c>
 800dcc6:	0030      	movs	r0, r6
 800dcc8:	f7ff fbc2 	bl	800d450 <_free_r>
 800dccc:	2300      	movs	r3, #0
 800dcce:	6363      	str	r3, [r4, #52]	; 0x34
 800dcd0:	2224      	movs	r2, #36	; 0x24
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	4393      	bics	r3, r2
 800dcd6:	81a3      	strh	r3, [r4, #12]
 800dcd8:	2300      	movs	r3, #0
 800dcda:	6063      	str	r3, [r4, #4]
 800dcdc:	6923      	ldr	r3, [r4, #16]
 800dcde:	6023      	str	r3, [r4, #0]
 800dce0:	2308      	movs	r3, #8
 800dce2:	89a2      	ldrh	r2, [r4, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10b      	bne.n	800dd06 <__swsetup_r+0xa6>
 800dcee:	21a0      	movs	r1, #160	; 0xa0
 800dcf0:	2280      	movs	r2, #128	; 0x80
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	0089      	lsls	r1, r1, #2
 800dcf6:	0092      	lsls	r2, r2, #2
 800dcf8:	400b      	ands	r3, r1
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d003      	beq.n	800dd06 <__swsetup_r+0xa6>
 800dcfe:	0021      	movs	r1, r4
 800dd00:	0030      	movs	r0, r6
 800dd02:	f000 f855 	bl	800ddb0 <__smakebuf_r>
 800dd06:	220c      	movs	r2, #12
 800dd08:	5ea3      	ldrsh	r3, [r4, r2]
 800dd0a:	2001      	movs	r0, #1
 800dd0c:	001a      	movs	r2, r3
 800dd0e:	b299      	uxth	r1, r3
 800dd10:	4002      	ands	r2, r0
 800dd12:	4203      	tst	r3, r0
 800dd14:	d00f      	beq.n	800dd36 <__swsetup_r+0xd6>
 800dd16:	2200      	movs	r2, #0
 800dd18:	60a2      	str	r2, [r4, #8]
 800dd1a:	6962      	ldr	r2, [r4, #20]
 800dd1c:	4252      	negs	r2, r2
 800dd1e:	61a2      	str	r2, [r4, #24]
 800dd20:	2000      	movs	r0, #0
 800dd22:	6922      	ldr	r2, [r4, #16]
 800dd24:	4282      	cmp	r2, r0
 800dd26:	d1ba      	bne.n	800dc9e <__swsetup_r+0x3e>
 800dd28:	060a      	lsls	r2, r1, #24
 800dd2a:	d5b8      	bpl.n	800dc9e <__swsetup_r+0x3e>
 800dd2c:	2240      	movs	r2, #64	; 0x40
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	81a3      	strh	r3, [r4, #12]
 800dd32:	3801      	subs	r0, #1
 800dd34:	e7b3      	b.n	800dc9e <__swsetup_r+0x3e>
 800dd36:	0788      	lsls	r0, r1, #30
 800dd38:	d400      	bmi.n	800dd3c <__swsetup_r+0xdc>
 800dd3a:	6962      	ldr	r2, [r4, #20]
 800dd3c:	60a2      	str	r2, [r4, #8]
 800dd3e:	e7ef      	b.n	800dd20 <__swsetup_r+0xc0>
 800dd40:	20000014 	.word	0x20000014
 800dd44:	0800e2d4 	.word	0x0800e2d4
 800dd48:	0800e2f4 	.word	0x0800e2f4
 800dd4c:	0800e2b4 	.word	0x0800e2b4

0800dd50 <abort>:
 800dd50:	2006      	movs	r0, #6
 800dd52:	b510      	push	{r4, lr}
 800dd54:	f000 f8a2 	bl	800de9c <raise>
 800dd58:	2001      	movs	r0, #1
 800dd5a:	f7f5 fca9 	bl	80036b0 <_exit>
	...

0800dd60 <__swhatbuf_r>:
 800dd60:	b570      	push	{r4, r5, r6, lr}
 800dd62:	000e      	movs	r6, r1
 800dd64:	001d      	movs	r5, r3
 800dd66:	230e      	movs	r3, #14
 800dd68:	5ec9      	ldrsh	r1, [r1, r3]
 800dd6a:	0014      	movs	r4, r2
 800dd6c:	b096      	sub	sp, #88	; 0x58
 800dd6e:	2900      	cmp	r1, #0
 800dd70:	da08      	bge.n	800dd84 <__swhatbuf_r+0x24>
 800dd72:	220c      	movs	r2, #12
 800dd74:	5eb3      	ldrsh	r3, [r6, r2]
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	061b      	lsls	r3, r3, #24
 800dd7c:	d411      	bmi.n	800dda2 <__swhatbuf_r+0x42>
 800dd7e:	2380      	movs	r3, #128	; 0x80
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	e00f      	b.n	800dda4 <__swhatbuf_r+0x44>
 800dd84:	466a      	mov	r2, sp
 800dd86:	f000 f8a9 	bl	800dedc <_fstat_r>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	dbf1      	blt.n	800dd72 <__swhatbuf_r+0x12>
 800dd8e:	23f0      	movs	r3, #240	; 0xf0
 800dd90:	9901      	ldr	r1, [sp, #4]
 800dd92:	021b      	lsls	r3, r3, #8
 800dd94:	4019      	ands	r1, r3
 800dd96:	4b05      	ldr	r3, [pc, #20]	; (800ddac <__swhatbuf_r+0x4c>)
 800dd98:	18c9      	adds	r1, r1, r3
 800dd9a:	424b      	negs	r3, r1
 800dd9c:	4159      	adcs	r1, r3
 800dd9e:	6029      	str	r1, [r5, #0]
 800dda0:	e7ed      	b.n	800dd7e <__swhatbuf_r+0x1e>
 800dda2:	2340      	movs	r3, #64	; 0x40
 800dda4:	2000      	movs	r0, #0
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	b016      	add	sp, #88	; 0x58
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	ffffe000 	.word	0xffffe000

0800ddb0 <__smakebuf_r>:
 800ddb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddb2:	2602      	movs	r6, #2
 800ddb4:	898b      	ldrh	r3, [r1, #12]
 800ddb6:	0005      	movs	r5, r0
 800ddb8:	000c      	movs	r4, r1
 800ddba:	4233      	tst	r3, r6
 800ddbc:	d006      	beq.n	800ddcc <__smakebuf_r+0x1c>
 800ddbe:	0023      	movs	r3, r4
 800ddc0:	3347      	adds	r3, #71	; 0x47
 800ddc2:	6023      	str	r3, [r4, #0]
 800ddc4:	6123      	str	r3, [r4, #16]
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	6163      	str	r3, [r4, #20]
 800ddca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ddcc:	466a      	mov	r2, sp
 800ddce:	ab01      	add	r3, sp, #4
 800ddd0:	f7ff ffc6 	bl	800dd60 <__swhatbuf_r>
 800ddd4:	9900      	ldr	r1, [sp, #0]
 800ddd6:	0007      	movs	r7, r0
 800ddd8:	0028      	movs	r0, r5
 800ddda:	f7fd f9c5 	bl	800b168 <_malloc_r>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d108      	bne.n	800ddf4 <__smakebuf_r+0x44>
 800dde2:	220c      	movs	r2, #12
 800dde4:	5ea3      	ldrsh	r3, [r4, r2]
 800dde6:	059a      	lsls	r2, r3, #22
 800dde8:	d4ef      	bmi.n	800ddca <__smakebuf_r+0x1a>
 800ddea:	2203      	movs	r2, #3
 800ddec:	4393      	bics	r3, r2
 800ddee:	431e      	orrs	r6, r3
 800ddf0:	81a6      	strh	r6, [r4, #12]
 800ddf2:	e7e4      	b.n	800ddbe <__smakebuf_r+0xe>
 800ddf4:	4b0f      	ldr	r3, [pc, #60]	; (800de34 <__smakebuf_r+0x84>)
 800ddf6:	62ab      	str	r3, [r5, #40]	; 0x28
 800ddf8:	2380      	movs	r3, #128	; 0x80
 800ddfa:	89a2      	ldrh	r2, [r4, #12]
 800ddfc:	6020      	str	r0, [r4, #0]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	9b00      	ldr	r3, [sp, #0]
 800de04:	6120      	str	r0, [r4, #16]
 800de06:	6163      	str	r3, [r4, #20]
 800de08:	9b01      	ldr	r3, [sp, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00d      	beq.n	800de2a <__smakebuf_r+0x7a>
 800de0e:	0028      	movs	r0, r5
 800de10:	230e      	movs	r3, #14
 800de12:	5ee1      	ldrsh	r1, [r4, r3]
 800de14:	f000 f874 	bl	800df00 <_isatty_r>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d006      	beq.n	800de2a <__smakebuf_r+0x7a>
 800de1c:	2203      	movs	r2, #3
 800de1e:	89a3      	ldrh	r3, [r4, #12]
 800de20:	4393      	bics	r3, r2
 800de22:	001a      	movs	r2, r3
 800de24:	2301      	movs	r3, #1
 800de26:	4313      	orrs	r3, r2
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	89a0      	ldrh	r0, [r4, #12]
 800de2c:	4307      	orrs	r7, r0
 800de2e:	81a7      	strh	r7, [r4, #12]
 800de30:	e7cb      	b.n	800ddca <__smakebuf_r+0x1a>
 800de32:	46c0      	nop			; (mov r8, r8)
 800de34:	0800aef9 	.word	0x0800aef9

0800de38 <_malloc_usable_size_r>:
 800de38:	1f0b      	subs	r3, r1, #4
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	1f18      	subs	r0, r3, #4
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da01      	bge.n	800de46 <_malloc_usable_size_r+0xe>
 800de42:	580b      	ldr	r3, [r1, r0]
 800de44:	18c0      	adds	r0, r0, r3
 800de46:	4770      	bx	lr

0800de48 <_raise_r>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	0004      	movs	r4, r0
 800de4c:	000d      	movs	r5, r1
 800de4e:	291f      	cmp	r1, #31
 800de50:	d904      	bls.n	800de5c <_raise_r+0x14>
 800de52:	2316      	movs	r3, #22
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	2001      	movs	r0, #1
 800de58:	4240      	negs	r0, r0
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d004      	beq.n	800de6c <_raise_r+0x24>
 800de62:	008a      	lsls	r2, r1, #2
 800de64:	189b      	adds	r3, r3, r2
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	2a00      	cmp	r2, #0
 800de6a:	d108      	bne.n	800de7e <_raise_r+0x36>
 800de6c:	0020      	movs	r0, r4
 800de6e:	f000 f831 	bl	800ded4 <_getpid_r>
 800de72:	002a      	movs	r2, r5
 800de74:	0001      	movs	r1, r0
 800de76:	0020      	movs	r0, r4
 800de78:	f000 f81a 	bl	800deb0 <_kill_r>
 800de7c:	e7ed      	b.n	800de5a <_raise_r+0x12>
 800de7e:	2000      	movs	r0, #0
 800de80:	2a01      	cmp	r2, #1
 800de82:	d0ea      	beq.n	800de5a <_raise_r+0x12>
 800de84:	1c51      	adds	r1, r2, #1
 800de86:	d103      	bne.n	800de90 <_raise_r+0x48>
 800de88:	2316      	movs	r3, #22
 800de8a:	3001      	adds	r0, #1
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	e7e4      	b.n	800de5a <_raise_r+0x12>
 800de90:	2400      	movs	r4, #0
 800de92:	0028      	movs	r0, r5
 800de94:	601c      	str	r4, [r3, #0]
 800de96:	4790      	blx	r2
 800de98:	0020      	movs	r0, r4
 800de9a:	e7de      	b.n	800de5a <_raise_r+0x12>

0800de9c <raise>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4b03      	ldr	r3, [pc, #12]	; (800deac <raise+0x10>)
 800dea0:	0001      	movs	r1, r0
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	f7ff ffd0 	bl	800de48 <_raise_r>
 800dea8:	bd10      	pop	{r4, pc}
 800deaa:	46c0      	nop			; (mov r8, r8)
 800deac:	20000014 	.word	0x20000014

0800deb0 <_kill_r>:
 800deb0:	2300      	movs	r3, #0
 800deb2:	b570      	push	{r4, r5, r6, lr}
 800deb4:	4d06      	ldr	r5, [pc, #24]	; (800ded0 <_kill_r+0x20>)
 800deb6:	0004      	movs	r4, r0
 800deb8:	0008      	movs	r0, r1
 800deba:	0011      	movs	r1, r2
 800debc:	602b      	str	r3, [r5, #0]
 800debe:	f7f5 fbe7 	bl	8003690 <_kill>
 800dec2:	1c43      	adds	r3, r0, #1
 800dec4:	d103      	bne.n	800dece <_kill_r+0x1e>
 800dec6:	682b      	ldr	r3, [r5, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d000      	beq.n	800dece <_kill_r+0x1e>
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	bd70      	pop	{r4, r5, r6, pc}
 800ded0:	20002d8c 	.word	0x20002d8c

0800ded4 <_getpid_r>:
 800ded4:	b510      	push	{r4, lr}
 800ded6:	f7f5 fbd5 	bl	8003684 <_getpid>
 800deda:	bd10      	pop	{r4, pc}

0800dedc <_fstat_r>:
 800dedc:	2300      	movs	r3, #0
 800dede:	b570      	push	{r4, r5, r6, lr}
 800dee0:	4d06      	ldr	r5, [pc, #24]	; (800defc <_fstat_r+0x20>)
 800dee2:	0004      	movs	r4, r0
 800dee4:	0008      	movs	r0, r1
 800dee6:	0011      	movs	r1, r2
 800dee8:	602b      	str	r3, [r5, #0]
 800deea:	f7f5 fc30 	bl	800374e <_fstat>
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	d103      	bne.n	800defa <_fstat_r+0x1e>
 800def2:	682b      	ldr	r3, [r5, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d000      	beq.n	800defa <_fstat_r+0x1e>
 800def8:	6023      	str	r3, [r4, #0]
 800defa:	bd70      	pop	{r4, r5, r6, pc}
 800defc:	20002d8c 	.word	0x20002d8c

0800df00 <_isatty_r>:
 800df00:	2300      	movs	r3, #0
 800df02:	b570      	push	{r4, r5, r6, lr}
 800df04:	4d06      	ldr	r5, [pc, #24]	; (800df20 <_isatty_r+0x20>)
 800df06:	0004      	movs	r4, r0
 800df08:	0008      	movs	r0, r1
 800df0a:	602b      	str	r3, [r5, #0]
 800df0c:	f7f5 fc2d 	bl	800376a <_isatty>
 800df10:	1c43      	adds	r3, r0, #1
 800df12:	d103      	bne.n	800df1c <_isatty_r+0x1c>
 800df14:	682b      	ldr	r3, [r5, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d000      	beq.n	800df1c <_isatty_r+0x1c>
 800df1a:	6023      	str	r3, [r4, #0]
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
 800df1e:	46c0      	nop			; (mov r8, r8)
 800df20:	20002d8c 	.word	0x20002d8c

0800df24 <_init>:
 800df24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df26:	46c0      	nop			; (mov r8, r8)
 800df28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df2a:	bc08      	pop	{r3}
 800df2c:	469e      	mov	lr, r3
 800df2e:	4770      	bx	lr

0800df30 <_fini>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	46c0      	nop			; (mov r8, r8)
 800df34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df36:	bc08      	pop	{r3}
 800df38:	469e      	mov	lr, r3
 800df3a:	4770      	bx	lr
