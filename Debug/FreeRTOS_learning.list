
FreeRTOS_learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c304  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0800c3c8  0800c3c8  0001c3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca4c  0800ca4c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca54  0800ca54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca54  0800ca54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca58  0800ca58  0001ca58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ca5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  200001e4  0800cc40  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d7c  0800cc40  00021d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec2a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d36  00000000  00000000  0003ee36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001980  00000000  00000000  00042b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  000444f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045c6  00000000  00000000  00045cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf97  00000000  00000000  0004a2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af098  00000000  00000000  00066255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001152ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce4  00000000  00000000  00115340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c3ac 	.word	0x0800c3ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800c3ac 	.word	0x0800c3ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 fff9 	bl	8001434 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff49 	bl	80012e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffeb 	bl	8001434 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ffe1 	bl	8001434 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff71 	bl	8001368 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff67 	bl	8001368 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__udivmoddi4>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4657      	mov	r7, sl
 80004ec:	464e      	mov	r6, r9
 80004ee:	4645      	mov	r5, r8
 80004f0:	46de      	mov	lr, fp
 80004f2:	b5e0      	push	{r5, r6, r7, lr}
 80004f4:	0004      	movs	r4, r0
 80004f6:	000d      	movs	r5, r1
 80004f8:	4692      	mov	sl, r2
 80004fa:	4699      	mov	r9, r3
 80004fc:	b083      	sub	sp, #12
 80004fe:	428b      	cmp	r3, r1
 8000500:	d830      	bhi.n	8000564 <__udivmoddi4+0x7c>
 8000502:	d02d      	beq.n	8000560 <__udivmoddi4+0x78>
 8000504:	4649      	mov	r1, r9
 8000506:	4650      	mov	r0, sl
 8000508:	f001 febe 	bl	8002288 <__clzdi2>
 800050c:	0029      	movs	r1, r5
 800050e:	0006      	movs	r6, r0
 8000510:	0020      	movs	r0, r4
 8000512:	f001 feb9 	bl	8002288 <__clzdi2>
 8000516:	1a33      	subs	r3, r6, r0
 8000518:	4698      	mov	r8, r3
 800051a:	3b20      	subs	r3, #32
 800051c:	469b      	mov	fp, r3
 800051e:	d433      	bmi.n	8000588 <__udivmoddi4+0xa0>
 8000520:	465a      	mov	r2, fp
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	4642      	mov	r2, r8
 8000528:	001f      	movs	r7, r3
 800052a:	4653      	mov	r3, sl
 800052c:	4093      	lsls	r3, r2
 800052e:	001e      	movs	r6, r3
 8000530:	42af      	cmp	r7, r5
 8000532:	d83a      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000534:	42af      	cmp	r7, r5
 8000536:	d100      	bne.n	800053a <__udivmoddi4+0x52>
 8000538:	e078      	b.n	800062c <__udivmoddi4+0x144>
 800053a:	465b      	mov	r3, fp
 800053c:	1ba4      	subs	r4, r4, r6
 800053e:	41bd      	sbcs	r5, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	da00      	bge.n	8000546 <__udivmoddi4+0x5e>
 8000544:	e075      	b.n	8000632 <__udivmoddi4+0x14a>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	465a      	mov	r2, fp
 8000552:	4093      	lsls	r3, r2
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2301      	movs	r3, #1
 8000558:	4642      	mov	r2, r8
 800055a:	4093      	lsls	r3, r2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	e028      	b.n	80005b2 <__udivmoddi4+0xca>
 8000560:	4282      	cmp	r2, r0
 8000562:	d9cf      	bls.n	8000504 <__udivmoddi4+0x1c>
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <__udivmoddi4+0x8e>
 8000572:	601c      	str	r4, [r3, #0]
 8000574:	605d      	str	r5, [r3, #4]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	b003      	add	sp, #12
 800057c:	bcf0      	pop	{r4, r5, r6, r7}
 800057e:	46bb      	mov	fp, r7
 8000580:	46b2      	mov	sl, r6
 8000582:	46a9      	mov	r9, r5
 8000584:	46a0      	mov	r8, r4
 8000586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000588:	4642      	mov	r2, r8
 800058a:	2320      	movs	r3, #32
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4652      	mov	r2, sl
 8000590:	40da      	lsrs	r2, r3
 8000592:	4641      	mov	r1, r8
 8000594:	0013      	movs	r3, r2
 8000596:	464a      	mov	r2, r9
 8000598:	408a      	lsls	r2, r1
 800059a:	0017      	movs	r7, r2
 800059c:	4642      	mov	r2, r8
 800059e:	431f      	orrs	r7, r3
 80005a0:	4653      	mov	r3, sl
 80005a2:	4093      	lsls	r3, r2
 80005a4:	001e      	movs	r6, r3
 80005a6:	42af      	cmp	r7, r5
 80005a8:	d9c4      	bls.n	8000534 <__udivmoddi4+0x4c>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0d9      	beq.n	800056c <__udivmoddi4+0x84>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	0872      	lsrs	r2, r6, #1
 80005bc:	431a      	orrs	r2, r3
 80005be:	4646      	mov	r6, r8
 80005c0:	087b      	lsrs	r3, r7, #1
 80005c2:	e00e      	b.n	80005e2 <__udivmoddi4+0xfa>
 80005c4:	42ab      	cmp	r3, r5
 80005c6:	d101      	bne.n	80005cc <__udivmoddi4+0xe4>
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d80c      	bhi.n	80005e6 <__udivmoddi4+0xfe>
 80005cc:	1aa4      	subs	r4, r4, r2
 80005ce:	419d      	sbcs	r5, r3
 80005d0:	2001      	movs	r0, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2100      	movs	r1, #0
 80005d8:	3e01      	subs	r6, #1
 80005da:	1824      	adds	r4, r4, r0
 80005dc:	414d      	adcs	r5, r1
 80005de:	2e00      	cmp	r6, #0
 80005e0:	d006      	beq.n	80005f0 <__udivmoddi4+0x108>
 80005e2:	42ab      	cmp	r3, r5
 80005e4:	d9ee      	bls.n	80005c4 <__udivmoddi4+0xdc>
 80005e6:	3e01      	subs	r6, #1
 80005e8:	1924      	adds	r4, r4, r4
 80005ea:	416d      	adcs	r5, r5
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d1f8      	bne.n	80005e2 <__udivmoddi4+0xfa>
 80005f0:	9800      	ldr	r0, [sp, #0]
 80005f2:	9901      	ldr	r1, [sp, #4]
 80005f4:	465b      	mov	r3, fp
 80005f6:	1900      	adds	r0, r0, r4
 80005f8:	4169      	adcs	r1, r5
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db24      	blt.n	8000648 <__udivmoddi4+0x160>
 80005fe:	002b      	movs	r3, r5
 8000600:	465a      	mov	r2, fp
 8000602:	4644      	mov	r4, r8
 8000604:	40d3      	lsrs	r3, r2
 8000606:	002a      	movs	r2, r5
 8000608:	40e2      	lsrs	r2, r4
 800060a:	001c      	movs	r4, r3
 800060c:	465b      	mov	r3, fp
 800060e:	0015      	movs	r5, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	db2a      	blt.n	800066a <__udivmoddi4+0x182>
 8000614:	0026      	movs	r6, r4
 8000616:	409e      	lsls	r6, r3
 8000618:	0033      	movs	r3, r6
 800061a:	0026      	movs	r6, r4
 800061c:	4647      	mov	r7, r8
 800061e:	40be      	lsls	r6, r7
 8000620:	0032      	movs	r2, r6
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	4199      	sbcs	r1, r3
 8000626:	9000      	str	r0, [sp, #0]
 8000628:	9101      	str	r1, [sp, #4]
 800062a:	e79f      	b.n	800056c <__udivmoddi4+0x84>
 800062c:	42a3      	cmp	r3, r4
 800062e:	d8bc      	bhi.n	80005aa <__udivmoddi4+0xc2>
 8000630:	e783      	b.n	800053a <__udivmoddi4+0x52>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	2100      	movs	r1, #0
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	9100      	str	r1, [sp, #0]
 800063e:	9201      	str	r2, [sp, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	40da      	lsrs	r2, r3
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	e786      	b.n	8000556 <__udivmoddi4+0x6e>
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	002a      	movs	r2, r5
 8000650:	4646      	mov	r6, r8
 8000652:	409a      	lsls	r2, r3
 8000654:	0023      	movs	r3, r4
 8000656:	40f3      	lsrs	r3, r6
 8000658:	4644      	mov	r4, r8
 800065a:	4313      	orrs	r3, r2
 800065c:	002a      	movs	r2, r5
 800065e:	40e2      	lsrs	r2, r4
 8000660:	001c      	movs	r4, r3
 8000662:	465b      	mov	r3, fp
 8000664:	0015      	movs	r5, r2
 8000666:	2b00      	cmp	r3, #0
 8000668:	dad4      	bge.n	8000614 <__udivmoddi4+0x12c>
 800066a:	4642      	mov	r2, r8
 800066c:	002f      	movs	r7, r5
 800066e:	2320      	movs	r3, #32
 8000670:	0026      	movs	r6, r4
 8000672:	4097      	lsls	r7, r2
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	40de      	lsrs	r6, r3
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7cd      	b.n	800061a <__udivmoddi4+0x132>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000682:	464f      	mov	r7, r9
 8000684:	4646      	mov	r6, r8
 8000686:	46d6      	mov	lr, sl
 8000688:	000d      	movs	r5, r1
 800068a:	0004      	movs	r4, r0
 800068c:	b5c0      	push	{r6, r7, lr}
 800068e:	001f      	movs	r7, r3
 8000690:	0011      	movs	r1, r2
 8000692:	0328      	lsls	r0, r5, #12
 8000694:	0f62      	lsrs	r2, r4, #29
 8000696:	0a40      	lsrs	r0, r0, #9
 8000698:	4310      	orrs	r0, r2
 800069a:	007a      	lsls	r2, r7, #1
 800069c:	0d52      	lsrs	r2, r2, #21
 800069e:	00e3      	lsls	r3, r4, #3
 80006a0:	033c      	lsls	r4, r7, #12
 80006a2:	4691      	mov	r9, r2
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	0ffa      	lsrs	r2, r7, #31
 80006a8:	0f4f      	lsrs	r7, r1, #29
 80006aa:	006e      	lsls	r6, r5, #1
 80006ac:	4327      	orrs	r7, r4
 80006ae:	4692      	mov	sl, r2
 80006b0:	46b8      	mov	r8, r7
 80006b2:	0d76      	lsrs	r6, r6, #21
 80006b4:	0fed      	lsrs	r5, r5, #31
 80006b6:	00c9      	lsls	r1, r1, #3
 80006b8:	4295      	cmp	r5, r2
 80006ba:	d100      	bne.n	80006be <__aeabi_dadd+0x3e>
 80006bc:	e099      	b.n	80007f2 <__aeabi_dadd+0x172>
 80006be:	464c      	mov	r4, r9
 80006c0:	1b34      	subs	r4, r6, r4
 80006c2:	46a4      	mov	ip, r4
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_dadd+0x4a>
 80006c8:	e07c      	b.n	80007c4 <__aeabi_dadd+0x144>
 80006ca:	464a      	mov	r2, r9
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_dadd+0x52>
 80006d0:	e0b8      	b.n	8000844 <__aeabi_dadd+0x1c4>
 80006d2:	4ac5      	ldr	r2, [pc, #788]	; (80009e8 <__aeabi_dadd+0x368>)
 80006d4:	4296      	cmp	r6, r2
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x5a>
 80006d8:	e11c      	b.n	8000914 <__aeabi_dadd+0x294>
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	003c      	movs	r4, r7
 80006de:	0412      	lsls	r2, r2, #16
 80006e0:	4314      	orrs	r4, r2
 80006e2:	46a0      	mov	r8, r4
 80006e4:	4662      	mov	r2, ip
 80006e6:	2a38      	cmp	r2, #56	; 0x38
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x6c>
 80006ea:	e161      	b.n	80009b0 <__aeabi_dadd+0x330>
 80006ec:	2a1f      	cmp	r2, #31
 80006ee:	dd00      	ble.n	80006f2 <__aeabi_dadd+0x72>
 80006f0:	e1cc      	b.n	8000a8c <__aeabi_dadd+0x40c>
 80006f2:	4664      	mov	r4, ip
 80006f4:	2220      	movs	r2, #32
 80006f6:	1b12      	subs	r2, r2, r4
 80006f8:	4644      	mov	r4, r8
 80006fa:	4094      	lsls	r4, r2
 80006fc:	000f      	movs	r7, r1
 80006fe:	46a1      	mov	r9, r4
 8000700:	4664      	mov	r4, ip
 8000702:	4091      	lsls	r1, r2
 8000704:	40e7      	lsrs	r7, r4
 8000706:	464c      	mov	r4, r9
 8000708:	1e4a      	subs	r2, r1, #1
 800070a:	4191      	sbcs	r1, r2
 800070c:	433c      	orrs	r4, r7
 800070e:	4642      	mov	r2, r8
 8000710:	4321      	orrs	r1, r4
 8000712:	4664      	mov	r4, ip
 8000714:	40e2      	lsrs	r2, r4
 8000716:	1a80      	subs	r0, r0, r2
 8000718:	1a5c      	subs	r4, r3, r1
 800071a:	42a3      	cmp	r3, r4
 800071c:	419b      	sbcs	r3, r3
 800071e:	425f      	negs	r7, r3
 8000720:	1bc7      	subs	r7, r0, r7
 8000722:	023b      	lsls	r3, r7, #8
 8000724:	d400      	bmi.n	8000728 <__aeabi_dadd+0xa8>
 8000726:	e0d0      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000728:	027f      	lsls	r7, r7, #9
 800072a:	0a7f      	lsrs	r7, r7, #9
 800072c:	2f00      	cmp	r7, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0xb2>
 8000730:	e0ff      	b.n	8000932 <__aeabi_dadd+0x2b2>
 8000732:	0038      	movs	r0, r7
 8000734:	f001 fd8a 	bl	800224c <__clzsi2>
 8000738:	0001      	movs	r1, r0
 800073a:	3908      	subs	r1, #8
 800073c:	2320      	movs	r3, #32
 800073e:	0022      	movs	r2, r4
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	408f      	lsls	r7, r1
 8000744:	40da      	lsrs	r2, r3
 8000746:	408c      	lsls	r4, r1
 8000748:	4317      	orrs	r7, r2
 800074a:	42b1      	cmp	r1, r6
 800074c:	da00      	bge.n	8000750 <__aeabi_dadd+0xd0>
 800074e:	e0ff      	b.n	8000950 <__aeabi_dadd+0x2d0>
 8000750:	1b89      	subs	r1, r1, r6
 8000752:	1c4b      	adds	r3, r1, #1
 8000754:	2b1f      	cmp	r3, #31
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0xda>
 8000758:	e0a8      	b.n	80008ac <__aeabi_dadd+0x22c>
 800075a:	2220      	movs	r2, #32
 800075c:	0039      	movs	r1, r7
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	0020      	movs	r0, r4
 8000762:	4094      	lsls	r4, r2
 8000764:	4091      	lsls	r1, r2
 8000766:	40d8      	lsrs	r0, r3
 8000768:	1e62      	subs	r2, r4, #1
 800076a:	4194      	sbcs	r4, r2
 800076c:	40df      	lsrs	r7, r3
 800076e:	2600      	movs	r6, #0
 8000770:	4301      	orrs	r1, r0
 8000772:	430c      	orrs	r4, r1
 8000774:	0763      	lsls	r3, r4, #29
 8000776:	d009      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000778:	230f      	movs	r3, #15
 800077a:	4023      	ands	r3, r4
 800077c:	2b04      	cmp	r3, #4
 800077e:	d005      	beq.n	800078c <__aeabi_dadd+0x10c>
 8000780:	1d23      	adds	r3, r4, #4
 8000782:	42a3      	cmp	r3, r4
 8000784:	41a4      	sbcs	r4, r4
 8000786:	4264      	negs	r4, r4
 8000788:	193f      	adds	r7, r7, r4
 800078a:	001c      	movs	r4, r3
 800078c:	023b      	lsls	r3, r7, #8
 800078e:	d400      	bmi.n	8000792 <__aeabi_dadd+0x112>
 8000790:	e09e      	b.n	80008d0 <__aeabi_dadd+0x250>
 8000792:	4b95      	ldr	r3, [pc, #596]	; (80009e8 <__aeabi_dadd+0x368>)
 8000794:	3601      	adds	r6, #1
 8000796:	429e      	cmp	r6, r3
 8000798:	d100      	bne.n	800079c <__aeabi_dadd+0x11c>
 800079a:	e0b7      	b.n	800090c <__aeabi_dadd+0x28c>
 800079c:	4a93      	ldr	r2, [pc, #588]	; (80009ec <__aeabi_dadd+0x36c>)
 800079e:	08e4      	lsrs	r4, r4, #3
 80007a0:	4017      	ands	r7, r2
 80007a2:	077b      	lsls	r3, r7, #29
 80007a4:	0571      	lsls	r1, r6, #21
 80007a6:	027f      	lsls	r7, r7, #9
 80007a8:	4323      	orrs	r3, r4
 80007aa:	0b3f      	lsrs	r7, r7, #12
 80007ac:	0d4a      	lsrs	r2, r1, #21
 80007ae:	0512      	lsls	r2, r2, #20
 80007b0:	433a      	orrs	r2, r7
 80007b2:	07ed      	lsls	r5, r5, #31
 80007b4:	432a      	orrs	r2, r5
 80007b6:	0018      	movs	r0, r3
 80007b8:	0011      	movs	r1, r2
 80007ba:	bce0      	pop	{r5, r6, r7}
 80007bc:	46ba      	mov	sl, r7
 80007be:	46b1      	mov	r9, r6
 80007c0:	46a8      	mov	r8, r5
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c4:	2c00      	cmp	r4, #0
 80007c6:	d04b      	beq.n	8000860 <__aeabi_dadd+0x1e0>
 80007c8:	464c      	mov	r4, r9
 80007ca:	1ba4      	subs	r4, r4, r6
 80007cc:	46a4      	mov	ip, r4
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_dadd+0x154>
 80007d2:	e123      	b.n	8000a1c <__aeabi_dadd+0x39c>
 80007d4:	0004      	movs	r4, r0
 80007d6:	431c      	orrs	r4, r3
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x15c>
 80007da:	e1af      	b.n	8000b3c <__aeabi_dadd+0x4bc>
 80007dc:	4662      	mov	r2, ip
 80007de:	1e54      	subs	r4, r2, #1
 80007e0:	2a01      	cmp	r2, #1
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x166>
 80007e4:	e215      	b.n	8000c12 <__aeabi_dadd+0x592>
 80007e6:	4d80      	ldr	r5, [pc, #512]	; (80009e8 <__aeabi_dadd+0x368>)
 80007e8:	45ac      	cmp	ip, r5
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x16e>
 80007ec:	e1c8      	b.n	8000b80 <__aeabi_dadd+0x500>
 80007ee:	46a4      	mov	ip, r4
 80007f0:	e11b      	b.n	8000a2a <__aeabi_dadd+0x3aa>
 80007f2:	464a      	mov	r2, r9
 80007f4:	1ab2      	subs	r2, r6, r2
 80007f6:	4694      	mov	ip, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_dadd+0x17e>
 80007fc:	e0ac      	b.n	8000958 <__aeabi_dadd+0x2d8>
 80007fe:	464a      	mov	r2, r9
 8000800:	2a00      	cmp	r2, #0
 8000802:	d043      	beq.n	800088c <__aeabi_dadd+0x20c>
 8000804:	4a78      	ldr	r2, [pc, #480]	; (80009e8 <__aeabi_dadd+0x368>)
 8000806:	4296      	cmp	r6, r2
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x18c>
 800080a:	e1af      	b.n	8000b6c <__aeabi_dadd+0x4ec>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	003c      	movs	r4, r7
 8000810:	0412      	lsls	r2, r2, #16
 8000812:	4314      	orrs	r4, r2
 8000814:	46a0      	mov	r8, r4
 8000816:	4662      	mov	r2, ip
 8000818:	2a38      	cmp	r2, #56	; 0x38
 800081a:	dc67      	bgt.n	80008ec <__aeabi_dadd+0x26c>
 800081c:	2a1f      	cmp	r2, #31
 800081e:	dc00      	bgt.n	8000822 <__aeabi_dadd+0x1a2>
 8000820:	e15f      	b.n	8000ae2 <__aeabi_dadd+0x462>
 8000822:	4647      	mov	r7, r8
 8000824:	3a20      	subs	r2, #32
 8000826:	40d7      	lsrs	r7, r2
 8000828:	4662      	mov	r2, ip
 800082a:	2a20      	cmp	r2, #32
 800082c:	d005      	beq.n	800083a <__aeabi_dadd+0x1ba>
 800082e:	4664      	mov	r4, ip
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	1b12      	subs	r2, r2, r4
 8000834:	4644      	mov	r4, r8
 8000836:	4094      	lsls	r4, r2
 8000838:	4321      	orrs	r1, r4
 800083a:	1e4a      	subs	r2, r1, #1
 800083c:	4191      	sbcs	r1, r2
 800083e:	000c      	movs	r4, r1
 8000840:	433c      	orrs	r4, r7
 8000842:	e057      	b.n	80008f4 <__aeabi_dadd+0x274>
 8000844:	003a      	movs	r2, r7
 8000846:	430a      	orrs	r2, r1
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x1cc>
 800084a:	e105      	b.n	8000a58 <__aeabi_dadd+0x3d8>
 800084c:	0022      	movs	r2, r4
 800084e:	3a01      	subs	r2, #1
 8000850:	2c01      	cmp	r4, #1
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1d6>
 8000854:	e182      	b.n	8000b5c <__aeabi_dadd+0x4dc>
 8000856:	4c64      	ldr	r4, [pc, #400]	; (80009e8 <__aeabi_dadd+0x368>)
 8000858:	45a4      	cmp	ip, r4
 800085a:	d05b      	beq.n	8000914 <__aeabi_dadd+0x294>
 800085c:	4694      	mov	ip, r2
 800085e:	e741      	b.n	80006e4 <__aeabi_dadd+0x64>
 8000860:	4c63      	ldr	r4, [pc, #396]	; (80009f0 <__aeabi_dadd+0x370>)
 8000862:	1c77      	adds	r7, r6, #1
 8000864:	4227      	tst	r7, r4
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1ea>
 8000868:	e0c4      	b.n	80009f4 <__aeabi_dadd+0x374>
 800086a:	0004      	movs	r4, r0
 800086c:	431c      	orrs	r4, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_dadd+0x1f4>
 8000872:	e169      	b.n	8000b48 <__aeabi_dadd+0x4c8>
 8000874:	2c00      	cmp	r4, #0
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x1fa>
 8000878:	e1bf      	b.n	8000bfa <__aeabi_dadd+0x57a>
 800087a:	4644      	mov	r4, r8
 800087c:	430c      	orrs	r4, r1
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x202>
 8000880:	e1d0      	b.n	8000c24 <__aeabi_dadd+0x5a4>
 8000882:	0742      	lsls	r2, r0, #29
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4313      	orrs	r3, r2
 8000888:	08c0      	lsrs	r0, r0, #3
 800088a:	e029      	b.n	80008e0 <__aeabi_dadd+0x260>
 800088c:	003a      	movs	r2, r7
 800088e:	430a      	orrs	r2, r1
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x214>
 8000892:	e170      	b.n	8000b76 <__aeabi_dadd+0x4f6>
 8000894:	4662      	mov	r2, ip
 8000896:	4664      	mov	r4, ip
 8000898:	3a01      	subs	r2, #1
 800089a:	2c01      	cmp	r4, #1
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x220>
 800089e:	e0e0      	b.n	8000a62 <__aeabi_dadd+0x3e2>
 80008a0:	4c51      	ldr	r4, [pc, #324]	; (80009e8 <__aeabi_dadd+0x368>)
 80008a2:	45a4      	cmp	ip, r4
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x228>
 80008a6:	e161      	b.n	8000b6c <__aeabi_dadd+0x4ec>
 80008a8:	4694      	mov	ip, r2
 80008aa:	e7b4      	b.n	8000816 <__aeabi_dadd+0x196>
 80008ac:	003a      	movs	r2, r7
 80008ae:	391f      	subs	r1, #31
 80008b0:	40ca      	lsrs	r2, r1
 80008b2:	0011      	movs	r1, r2
 80008b4:	2b20      	cmp	r3, #32
 80008b6:	d003      	beq.n	80008c0 <__aeabi_dadd+0x240>
 80008b8:	2240      	movs	r2, #64	; 0x40
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	409f      	lsls	r7, r3
 80008be:	433c      	orrs	r4, r7
 80008c0:	1e63      	subs	r3, r4, #1
 80008c2:	419c      	sbcs	r4, r3
 80008c4:	2700      	movs	r7, #0
 80008c6:	2600      	movs	r6, #0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0763      	lsls	r3, r4, #29
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x250>
 80008ce:	e753      	b.n	8000778 <__aeabi_dadd+0xf8>
 80008d0:	46b4      	mov	ip, r6
 80008d2:	08e4      	lsrs	r4, r4, #3
 80008d4:	077b      	lsls	r3, r7, #29
 80008d6:	4323      	orrs	r3, r4
 80008d8:	08f8      	lsrs	r0, r7, #3
 80008da:	4a43      	ldr	r2, [pc, #268]	; (80009e8 <__aeabi_dadd+0x368>)
 80008dc:	4594      	cmp	ip, r2
 80008de:	d01d      	beq.n	800091c <__aeabi_dadd+0x29c>
 80008e0:	4662      	mov	r2, ip
 80008e2:	0307      	lsls	r7, r0, #12
 80008e4:	0552      	lsls	r2, r2, #21
 80008e6:	0b3f      	lsrs	r7, r7, #12
 80008e8:	0d52      	lsrs	r2, r2, #21
 80008ea:	e760      	b.n	80007ae <__aeabi_dadd+0x12e>
 80008ec:	4644      	mov	r4, r8
 80008ee:	430c      	orrs	r4, r1
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	18e4      	adds	r4, r4, r3
 80008f6:	429c      	cmp	r4, r3
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	425f      	negs	r7, r3
 80008fc:	183f      	adds	r7, r7, r0
 80008fe:	023b      	lsls	r3, r7, #8
 8000900:	d5e3      	bpl.n	80008ca <__aeabi_dadd+0x24a>
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <__aeabi_dadd+0x368>)
 8000904:	3601      	adds	r6, #1
 8000906:	429e      	cmp	r6, r3
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x28c>
 800090a:	e0b5      	b.n	8000a78 <__aeabi_dadd+0x3f8>
 800090c:	0032      	movs	r2, r6
 800090e:	2700      	movs	r7, #0
 8000910:	2300      	movs	r3, #0
 8000912:	e74c      	b.n	80007ae <__aeabi_dadd+0x12e>
 8000914:	0742      	lsls	r2, r0, #29
 8000916:	08db      	lsrs	r3, r3, #3
 8000918:	4313      	orrs	r3, r2
 800091a:	08c0      	lsrs	r0, r0, #3
 800091c:	001a      	movs	r2, r3
 800091e:	4302      	orrs	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x2a4>
 8000922:	e1e1      	b.n	8000ce8 <__aeabi_dadd+0x668>
 8000924:	2780      	movs	r7, #128	; 0x80
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4307      	orrs	r7, r0
 800092a:	033f      	lsls	r7, r7, #12
 800092c:	4a2e      	ldr	r2, [pc, #184]	; (80009e8 <__aeabi_dadd+0x368>)
 800092e:	0b3f      	lsrs	r7, r7, #12
 8000930:	e73d      	b.n	80007ae <__aeabi_dadd+0x12e>
 8000932:	0020      	movs	r0, r4
 8000934:	f001 fc8a 	bl	800224c <__clzsi2>
 8000938:	0001      	movs	r1, r0
 800093a:	3118      	adds	r1, #24
 800093c:	291f      	cmp	r1, #31
 800093e:	dc00      	bgt.n	8000942 <__aeabi_dadd+0x2c2>
 8000940:	e6fc      	b.n	800073c <__aeabi_dadd+0xbc>
 8000942:	3808      	subs	r0, #8
 8000944:	4084      	lsls	r4, r0
 8000946:	0027      	movs	r7, r4
 8000948:	2400      	movs	r4, #0
 800094a:	42b1      	cmp	r1, r6
 800094c:	db00      	blt.n	8000950 <__aeabi_dadd+0x2d0>
 800094e:	e6ff      	b.n	8000750 <__aeabi_dadd+0xd0>
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <__aeabi_dadd+0x36c>)
 8000952:	1a76      	subs	r6, r6, r1
 8000954:	4017      	ands	r7, r2
 8000956:	e70d      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000958:	2a00      	cmp	r2, #0
 800095a:	d02f      	beq.n	80009bc <__aeabi_dadd+0x33c>
 800095c:	464a      	mov	r2, r9
 800095e:	1b92      	subs	r2, r2, r6
 8000960:	4694      	mov	ip, r2
 8000962:	2e00      	cmp	r6, #0
 8000964:	d100      	bne.n	8000968 <__aeabi_dadd+0x2e8>
 8000966:	e0ad      	b.n	8000ac4 <__aeabi_dadd+0x444>
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <__aeabi_dadd+0x368>)
 800096a:	4591      	cmp	r9, r2
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x2f0>
 800096e:	e10f      	b.n	8000b90 <__aeabi_dadd+0x510>
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0412      	lsls	r2, r2, #16
 8000974:	4310      	orrs	r0, r2
 8000976:	4662      	mov	r2, ip
 8000978:	2a38      	cmp	r2, #56	; 0x38
 800097a:	dd00      	ble.n	800097e <__aeabi_dadd+0x2fe>
 800097c:	e10f      	b.n	8000b9e <__aeabi_dadd+0x51e>
 800097e:	2a1f      	cmp	r2, #31
 8000980:	dd00      	ble.n	8000984 <__aeabi_dadd+0x304>
 8000982:	e180      	b.n	8000c86 <__aeabi_dadd+0x606>
 8000984:	4664      	mov	r4, ip
 8000986:	2220      	movs	r2, #32
 8000988:	001e      	movs	r6, r3
 800098a:	1b12      	subs	r2, r2, r4
 800098c:	4667      	mov	r7, ip
 800098e:	0004      	movs	r4, r0
 8000990:	4093      	lsls	r3, r2
 8000992:	4094      	lsls	r4, r2
 8000994:	40fe      	lsrs	r6, r7
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	4193      	sbcs	r3, r2
 800099a:	40f8      	lsrs	r0, r7
 800099c:	4334      	orrs	r4, r6
 800099e:	431c      	orrs	r4, r3
 80009a0:	4480      	add	r8, r0
 80009a2:	1864      	adds	r4, r4, r1
 80009a4:	428c      	cmp	r4, r1
 80009a6:	41bf      	sbcs	r7, r7
 80009a8:	427f      	negs	r7, r7
 80009aa:	464e      	mov	r6, r9
 80009ac:	4447      	add	r7, r8
 80009ae:	e7a6      	b.n	80008fe <__aeabi_dadd+0x27e>
 80009b0:	4642      	mov	r2, r8
 80009b2:	430a      	orrs	r2, r1
 80009b4:	0011      	movs	r1, r2
 80009b6:	1e4a      	subs	r2, r1, #1
 80009b8:	4191      	sbcs	r1, r2
 80009ba:	e6ad      	b.n	8000718 <__aeabi_dadd+0x98>
 80009bc:	4c0c      	ldr	r4, [pc, #48]	; (80009f0 <__aeabi_dadd+0x370>)
 80009be:	1c72      	adds	r2, r6, #1
 80009c0:	4222      	tst	r2, r4
 80009c2:	d000      	beq.n	80009c6 <__aeabi_dadd+0x346>
 80009c4:	e0a1      	b.n	8000b0a <__aeabi_dadd+0x48a>
 80009c6:	0002      	movs	r2, r0
 80009c8:	431a      	orrs	r2, r3
 80009ca:	2e00      	cmp	r6, #0
 80009cc:	d000      	beq.n	80009d0 <__aeabi_dadd+0x350>
 80009ce:	e0fa      	b.n	8000bc6 <__aeabi_dadd+0x546>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x356>
 80009d4:	e145      	b.n	8000c62 <__aeabi_dadd+0x5e2>
 80009d6:	003a      	movs	r2, r7
 80009d8:	430a      	orrs	r2, r1
 80009da:	d000      	beq.n	80009de <__aeabi_dadd+0x35e>
 80009dc:	e146      	b.n	8000c6c <__aeabi_dadd+0x5ec>
 80009de:	0742      	lsls	r2, r0, #29
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	08c0      	lsrs	r0, r0, #3
 80009e6:	e77b      	b.n	80008e0 <__aeabi_dadd+0x260>
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	ff7fffff 	.word	0xff7fffff
 80009f0:	000007fe 	.word	0x000007fe
 80009f4:	4647      	mov	r7, r8
 80009f6:	1a5c      	subs	r4, r3, r1
 80009f8:	1bc2      	subs	r2, r0, r7
 80009fa:	42a3      	cmp	r3, r4
 80009fc:	41bf      	sbcs	r7, r7
 80009fe:	427f      	negs	r7, r7
 8000a00:	46b9      	mov	r9, r7
 8000a02:	0017      	movs	r7, r2
 8000a04:	464a      	mov	r2, r9
 8000a06:	1abf      	subs	r7, r7, r2
 8000a08:	023a      	lsls	r2, r7, #8
 8000a0a:	d500      	bpl.n	8000a0e <__aeabi_dadd+0x38e>
 8000a0c:	e08d      	b.n	8000b2a <__aeabi_dadd+0x4aa>
 8000a0e:	0023      	movs	r3, r4
 8000a10:	433b      	orrs	r3, r7
 8000a12:	d000      	beq.n	8000a16 <__aeabi_dadd+0x396>
 8000a14:	e68a      	b.n	800072c <__aeabi_dadd+0xac>
 8000a16:	2000      	movs	r0, #0
 8000a18:	2500      	movs	r5, #0
 8000a1a:	e761      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000a1c:	4cb4      	ldr	r4, [pc, #720]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000a1e:	45a1      	cmp	r9, r4
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x3a4>
 8000a22:	e0ad      	b.n	8000b80 <__aeabi_dadd+0x500>
 8000a24:	2480      	movs	r4, #128	; 0x80
 8000a26:	0424      	lsls	r4, r4, #16
 8000a28:	4320      	orrs	r0, r4
 8000a2a:	4664      	mov	r4, ip
 8000a2c:	2c38      	cmp	r4, #56	; 0x38
 8000a2e:	dc3d      	bgt.n	8000aac <__aeabi_dadd+0x42c>
 8000a30:	4662      	mov	r2, ip
 8000a32:	2c1f      	cmp	r4, #31
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_dadd+0x3b8>
 8000a36:	e0b7      	b.n	8000ba8 <__aeabi_dadd+0x528>
 8000a38:	2520      	movs	r5, #32
 8000a3a:	001e      	movs	r6, r3
 8000a3c:	1b2d      	subs	r5, r5, r4
 8000a3e:	0004      	movs	r4, r0
 8000a40:	40ab      	lsls	r3, r5
 8000a42:	40ac      	lsls	r4, r5
 8000a44:	40d6      	lsrs	r6, r2
 8000a46:	40d0      	lsrs	r0, r2
 8000a48:	4642      	mov	r2, r8
 8000a4a:	1e5d      	subs	r5, r3, #1
 8000a4c:	41ab      	sbcs	r3, r5
 8000a4e:	4334      	orrs	r4, r6
 8000a50:	1a12      	subs	r2, r2, r0
 8000a52:	4690      	mov	r8, r2
 8000a54:	4323      	orrs	r3, r4
 8000a56:	e02c      	b.n	8000ab2 <__aeabi_dadd+0x432>
 8000a58:	0742      	lsls	r2, r0, #29
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	e73b      	b.n	80008da <__aeabi_dadd+0x25a>
 8000a62:	185c      	adds	r4, r3, r1
 8000a64:	429c      	cmp	r4, r3
 8000a66:	419b      	sbcs	r3, r3
 8000a68:	4440      	add	r0, r8
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	18c7      	adds	r7, r0, r3
 8000a6e:	2601      	movs	r6, #1
 8000a70:	023b      	lsls	r3, r7, #8
 8000a72:	d400      	bmi.n	8000a76 <__aeabi_dadd+0x3f6>
 8000a74:	e729      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000a76:	2602      	movs	r6, #2
 8000a78:	4a9e      	ldr	r2, [pc, #632]	; (8000cf4 <__aeabi_dadd+0x674>)
 8000a7a:	0863      	lsrs	r3, r4, #1
 8000a7c:	4017      	ands	r7, r2
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4014      	ands	r4, r2
 8000a82:	431c      	orrs	r4, r3
 8000a84:	07fb      	lsls	r3, r7, #31
 8000a86:	431c      	orrs	r4, r3
 8000a88:	087f      	lsrs	r7, r7, #1
 8000a8a:	e673      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000a8c:	4644      	mov	r4, r8
 8000a8e:	3a20      	subs	r2, #32
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	4662      	mov	r2, ip
 8000a94:	2a20      	cmp	r2, #32
 8000a96:	d005      	beq.n	8000aa4 <__aeabi_dadd+0x424>
 8000a98:	4667      	mov	r7, ip
 8000a9a:	2240      	movs	r2, #64	; 0x40
 8000a9c:	1bd2      	subs	r2, r2, r7
 8000a9e:	4647      	mov	r7, r8
 8000aa0:	4097      	lsls	r7, r2
 8000aa2:	4339      	orrs	r1, r7
 8000aa4:	1e4a      	subs	r2, r1, #1
 8000aa6:	4191      	sbcs	r1, r2
 8000aa8:	4321      	orrs	r1, r4
 8000aaa:	e635      	b.n	8000718 <__aeabi_dadd+0x98>
 8000aac:	4303      	orrs	r3, r0
 8000aae:	1e58      	subs	r0, r3, #1
 8000ab0:	4183      	sbcs	r3, r0
 8000ab2:	1acc      	subs	r4, r1, r3
 8000ab4:	42a1      	cmp	r1, r4
 8000ab6:	41bf      	sbcs	r7, r7
 8000ab8:	4643      	mov	r3, r8
 8000aba:	427f      	negs	r7, r7
 8000abc:	4655      	mov	r5, sl
 8000abe:	464e      	mov	r6, r9
 8000ac0:	1bdf      	subs	r7, r3, r7
 8000ac2:	e62e      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dadd+0x44c>
 8000aca:	e0bd      	b.n	8000c48 <__aeabi_dadd+0x5c8>
 8000acc:	4662      	mov	r2, ip
 8000ace:	4664      	mov	r4, ip
 8000ad0:	3a01      	subs	r2, #1
 8000ad2:	2c01      	cmp	r4, #1
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x458>
 8000ad6:	e0e5      	b.n	8000ca4 <__aeabi_dadd+0x624>
 8000ad8:	4c85      	ldr	r4, [pc, #532]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000ada:	45a4      	cmp	ip, r4
 8000adc:	d058      	beq.n	8000b90 <__aeabi_dadd+0x510>
 8000ade:	4694      	mov	ip, r2
 8000ae0:	e749      	b.n	8000976 <__aeabi_dadd+0x2f6>
 8000ae2:	4664      	mov	r4, ip
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	1b12      	subs	r2, r2, r4
 8000ae8:	4644      	mov	r4, r8
 8000aea:	4094      	lsls	r4, r2
 8000aec:	000f      	movs	r7, r1
 8000aee:	46a1      	mov	r9, r4
 8000af0:	4664      	mov	r4, ip
 8000af2:	4091      	lsls	r1, r2
 8000af4:	40e7      	lsrs	r7, r4
 8000af6:	464c      	mov	r4, r9
 8000af8:	1e4a      	subs	r2, r1, #1
 8000afa:	4191      	sbcs	r1, r2
 8000afc:	433c      	orrs	r4, r7
 8000afe:	4642      	mov	r2, r8
 8000b00:	430c      	orrs	r4, r1
 8000b02:	4661      	mov	r1, ip
 8000b04:	40ca      	lsrs	r2, r1
 8000b06:	1880      	adds	r0, r0, r2
 8000b08:	e6f4      	b.n	80008f4 <__aeabi_dadd+0x274>
 8000b0a:	4c79      	ldr	r4, [pc, #484]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000b0c:	42a2      	cmp	r2, r4
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x492>
 8000b10:	e6fd      	b.n	800090e <__aeabi_dadd+0x28e>
 8000b12:	1859      	adds	r1, r3, r1
 8000b14:	4299      	cmp	r1, r3
 8000b16:	419b      	sbcs	r3, r3
 8000b18:	4440      	add	r0, r8
 8000b1a:	425f      	negs	r7, r3
 8000b1c:	19c7      	adds	r7, r0, r7
 8000b1e:	07fc      	lsls	r4, r7, #31
 8000b20:	0849      	lsrs	r1, r1, #1
 8000b22:	0016      	movs	r6, r2
 8000b24:	430c      	orrs	r4, r1
 8000b26:	087f      	lsrs	r7, r7, #1
 8000b28:	e6cf      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000b2a:	1acc      	subs	r4, r1, r3
 8000b2c:	42a1      	cmp	r1, r4
 8000b2e:	41bf      	sbcs	r7, r7
 8000b30:	4643      	mov	r3, r8
 8000b32:	427f      	negs	r7, r7
 8000b34:	1a18      	subs	r0, r3, r0
 8000b36:	4655      	mov	r5, sl
 8000b38:	1bc7      	subs	r7, r0, r7
 8000b3a:	e5f7      	b.n	800072c <__aeabi_dadd+0xac>
 8000b3c:	08c9      	lsrs	r1, r1, #3
 8000b3e:	077b      	lsls	r3, r7, #29
 8000b40:	4655      	mov	r5, sl
 8000b42:	430b      	orrs	r3, r1
 8000b44:	08f8      	lsrs	r0, r7, #3
 8000b46:	e6c8      	b.n	80008da <__aeabi_dadd+0x25a>
 8000b48:	2c00      	cmp	r4, #0
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x4ce>
 8000b4c:	e081      	b.n	8000c52 <__aeabi_dadd+0x5d2>
 8000b4e:	4643      	mov	r3, r8
 8000b50:	430b      	orrs	r3, r1
 8000b52:	d115      	bne.n	8000b80 <__aeabi_dadd+0x500>
 8000b54:	2080      	movs	r0, #128	; 0x80
 8000b56:	2500      	movs	r5, #0
 8000b58:	0300      	lsls	r0, r0, #12
 8000b5a:	e6e3      	b.n	8000924 <__aeabi_dadd+0x2a4>
 8000b5c:	1a5c      	subs	r4, r3, r1
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	419b      	sbcs	r3, r3
 8000b62:	1bc7      	subs	r7, r0, r7
 8000b64:	425b      	negs	r3, r3
 8000b66:	2601      	movs	r6, #1
 8000b68:	1aff      	subs	r7, r7, r3
 8000b6a:	e5da      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000b6c:	0742      	lsls	r2, r0, #29
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	4313      	orrs	r3, r2
 8000b72:	08c0      	lsrs	r0, r0, #3
 8000b74:	e6d2      	b.n	800091c <__aeabi_dadd+0x29c>
 8000b76:	0742      	lsls	r2, r0, #29
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	08c0      	lsrs	r0, r0, #3
 8000b7e:	e6ac      	b.n	80008da <__aeabi_dadd+0x25a>
 8000b80:	4643      	mov	r3, r8
 8000b82:	4642      	mov	r2, r8
 8000b84:	08c9      	lsrs	r1, r1, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	4655      	mov	r5, sl
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	08d0      	lsrs	r0, r2, #3
 8000b8e:	e6c5      	b.n	800091c <__aeabi_dadd+0x29c>
 8000b90:	4643      	mov	r3, r8
 8000b92:	4642      	mov	r2, r8
 8000b94:	075b      	lsls	r3, r3, #29
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	08d0      	lsrs	r0, r2, #3
 8000b9c:	e6be      	b.n	800091c <__aeabi_dadd+0x29c>
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	001c      	movs	r4, r3
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	e6fc      	b.n	80009a2 <__aeabi_dadd+0x322>
 8000ba8:	0002      	movs	r2, r0
 8000baa:	3c20      	subs	r4, #32
 8000bac:	40e2      	lsrs	r2, r4
 8000bae:	0014      	movs	r4, r2
 8000bb0:	4662      	mov	r2, ip
 8000bb2:	2a20      	cmp	r2, #32
 8000bb4:	d003      	beq.n	8000bbe <__aeabi_dadd+0x53e>
 8000bb6:	2540      	movs	r5, #64	; 0x40
 8000bb8:	1aad      	subs	r5, r5, r2
 8000bba:	40a8      	lsls	r0, r5
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	1e58      	subs	r0, r3, #1
 8000bc0:	4183      	sbcs	r3, r0
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	e775      	b.n	8000ab2 <__aeabi_dadd+0x432>
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d0e2      	beq.n	8000b90 <__aeabi_dadd+0x510>
 8000bca:	003a      	movs	r2, r7
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	d0cd      	beq.n	8000b6c <__aeabi_dadd+0x4ec>
 8000bd0:	0742      	lsls	r2, r0, #29
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	08c0      	lsrs	r0, r0, #3
 8000bda:	0312      	lsls	r2, r2, #12
 8000bdc:	4210      	tst	r0, r2
 8000bde:	d006      	beq.n	8000bee <__aeabi_dadd+0x56e>
 8000be0:	08fc      	lsrs	r4, r7, #3
 8000be2:	4214      	tst	r4, r2
 8000be4:	d103      	bne.n	8000bee <__aeabi_dadd+0x56e>
 8000be6:	0020      	movs	r0, r4
 8000be8:	08cb      	lsrs	r3, r1, #3
 8000bea:	077a      	lsls	r2, r7, #29
 8000bec:	4313      	orrs	r3, r2
 8000bee:	0f5a      	lsrs	r2, r3, #29
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	0752      	lsls	r2, r2, #29
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	e690      	b.n	800091c <__aeabi_dadd+0x29c>
 8000bfa:	4643      	mov	r3, r8
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x582>
 8000c00:	e709      	b.n	8000a16 <__aeabi_dadd+0x396>
 8000c02:	4643      	mov	r3, r8
 8000c04:	4642      	mov	r2, r8
 8000c06:	08c9      	lsrs	r1, r1, #3
 8000c08:	075b      	lsls	r3, r3, #29
 8000c0a:	4655      	mov	r5, sl
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	08d0      	lsrs	r0, r2, #3
 8000c10:	e666      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000c12:	1acc      	subs	r4, r1, r3
 8000c14:	42a1      	cmp	r1, r4
 8000c16:	4189      	sbcs	r1, r1
 8000c18:	1a3f      	subs	r7, r7, r0
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	4655      	mov	r5, sl
 8000c1e:	2601      	movs	r6, #1
 8000c20:	1a7f      	subs	r7, r7, r1
 8000c22:	e57e      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000c24:	4642      	mov	r2, r8
 8000c26:	1a5c      	subs	r4, r3, r1
 8000c28:	1a87      	subs	r7, r0, r2
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	4192      	sbcs	r2, r2
 8000c2e:	4252      	negs	r2, r2
 8000c30:	1abf      	subs	r7, r7, r2
 8000c32:	023a      	lsls	r2, r7, #8
 8000c34:	d53d      	bpl.n	8000cb2 <__aeabi_dadd+0x632>
 8000c36:	1acc      	subs	r4, r1, r3
 8000c38:	42a1      	cmp	r1, r4
 8000c3a:	4189      	sbcs	r1, r1
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	4249      	negs	r1, r1
 8000c40:	1a1f      	subs	r7, r3, r0
 8000c42:	4655      	mov	r5, sl
 8000c44:	1a7f      	subs	r7, r7, r1
 8000c46:	e595      	b.n	8000774 <__aeabi_dadd+0xf4>
 8000c48:	077b      	lsls	r3, r7, #29
 8000c4a:	08c9      	lsrs	r1, r1, #3
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	08f8      	lsrs	r0, r7, #3
 8000c50:	e643      	b.n	80008da <__aeabi_dadd+0x25a>
 8000c52:	4644      	mov	r4, r8
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	430c      	orrs	r4, r1
 8000c58:	d130      	bne.n	8000cbc <__aeabi_dadd+0x63c>
 8000c5a:	0742      	lsls	r2, r0, #29
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	08c0      	lsrs	r0, r0, #3
 8000c60:	e65c      	b.n	800091c <__aeabi_dadd+0x29c>
 8000c62:	077b      	lsls	r3, r7, #29
 8000c64:	08c9      	lsrs	r1, r1, #3
 8000c66:	430b      	orrs	r3, r1
 8000c68:	08f8      	lsrs	r0, r7, #3
 8000c6a:	e639      	b.n	80008e0 <__aeabi_dadd+0x260>
 8000c6c:	185c      	adds	r4, r3, r1
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	419b      	sbcs	r3, r3
 8000c72:	4440      	add	r0, r8
 8000c74:	425b      	negs	r3, r3
 8000c76:	18c7      	adds	r7, r0, r3
 8000c78:	023b      	lsls	r3, r7, #8
 8000c7a:	d400      	bmi.n	8000c7e <__aeabi_dadd+0x5fe>
 8000c7c:	e625      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <__aeabi_dadd+0x674>)
 8000c80:	2601      	movs	r6, #1
 8000c82:	401f      	ands	r7, r3
 8000c84:	e621      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000c86:	0004      	movs	r4, r0
 8000c88:	3a20      	subs	r2, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d004      	beq.n	8000c9c <__aeabi_dadd+0x61c>
 8000c92:	2240      	movs	r2, #64	; 0x40
 8000c94:	4666      	mov	r6, ip
 8000c96:	1b92      	subs	r2, r2, r6
 8000c98:	4090      	lsls	r0, r2
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	4193      	sbcs	r3, r2
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	e67e      	b.n	80009a2 <__aeabi_dadd+0x322>
 8000ca4:	185c      	adds	r4, r3, r1
 8000ca6:	428c      	cmp	r4, r1
 8000ca8:	4189      	sbcs	r1, r1
 8000caa:	4440      	add	r0, r8
 8000cac:	4249      	negs	r1, r1
 8000cae:	1847      	adds	r7, r0, r1
 8000cb0:	e6dd      	b.n	8000a6e <__aeabi_dadd+0x3ee>
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	433b      	orrs	r3, r7
 8000cb6:	d100      	bne.n	8000cba <__aeabi_dadd+0x63a>
 8000cb8:	e6ad      	b.n	8000a16 <__aeabi_dadd+0x396>
 8000cba:	e606      	b.n	80008ca <__aeabi_dadd+0x24a>
 8000cbc:	0744      	lsls	r4, r0, #29
 8000cbe:	4323      	orrs	r3, r4
 8000cc0:	2480      	movs	r4, #128	; 0x80
 8000cc2:	08c0      	lsrs	r0, r0, #3
 8000cc4:	0324      	lsls	r4, r4, #12
 8000cc6:	4220      	tst	r0, r4
 8000cc8:	d008      	beq.n	8000cdc <__aeabi_dadd+0x65c>
 8000cca:	4642      	mov	r2, r8
 8000ccc:	08d6      	lsrs	r6, r2, #3
 8000cce:	4226      	tst	r6, r4
 8000cd0:	d104      	bne.n	8000cdc <__aeabi_dadd+0x65c>
 8000cd2:	4655      	mov	r5, sl
 8000cd4:	0030      	movs	r0, r6
 8000cd6:	08cb      	lsrs	r3, r1, #3
 8000cd8:	0751      	lsls	r1, r2, #29
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	0f5a      	lsrs	r2, r3, #29
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	0752      	lsls	r2, r2, #29
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	e619      	b.n	800091c <__aeabi_dadd+0x29c>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4a01      	ldr	r2, [pc, #4]	; (8000cf0 <__aeabi_dadd+0x670>)
 8000cec:	001f      	movs	r7, r3
 8000cee:	e55e      	b.n	80007ae <__aeabi_dadd+0x12e>
 8000cf0:	000007ff 	.word	0x000007ff
 8000cf4:	ff7fffff 	.word	0xff7fffff

08000cf8 <__aeabi_ddiv>:
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	4657      	mov	r7, sl
 8000cfc:	464e      	mov	r6, r9
 8000cfe:	4645      	mov	r5, r8
 8000d00:	46de      	mov	lr, fp
 8000d02:	b5e0      	push	{r5, r6, r7, lr}
 8000d04:	4681      	mov	r9, r0
 8000d06:	0005      	movs	r5, r0
 8000d08:	030c      	lsls	r4, r1, #12
 8000d0a:	0048      	lsls	r0, r1, #1
 8000d0c:	4692      	mov	sl, r2
 8000d0e:	001f      	movs	r7, r3
 8000d10:	b085      	sub	sp, #20
 8000d12:	0b24      	lsrs	r4, r4, #12
 8000d14:	0d40      	lsrs	r0, r0, #21
 8000d16:	0fce      	lsrs	r6, r1, #31
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_ddiv+0x26>
 8000d1c:	e156      	b.n	8000fcc <__aeabi_ddiv+0x2d4>
 8000d1e:	4bd4      	ldr	r3, [pc, #848]	; (8001070 <__aeabi_ddiv+0x378>)
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d100      	bne.n	8000d26 <__aeabi_ddiv+0x2e>
 8000d24:	e172      	b.n	800100c <__aeabi_ddiv+0x314>
 8000d26:	0f6b      	lsrs	r3, r5, #29
 8000d28:	00e4      	lsls	r4, r4, #3
 8000d2a:	431c      	orrs	r4, r3
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	4698      	mov	r8, r3
 8000d34:	4bcf      	ldr	r3, [pc, #828]	; (8001074 <__aeabi_ddiv+0x37c>)
 8000d36:	00ed      	lsls	r5, r5, #3
 8000d38:	469b      	mov	fp, r3
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4699      	mov	r9, r3
 8000d3e:	4483      	add	fp, r0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	033c      	lsls	r4, r7, #12
 8000d44:	007b      	lsls	r3, r7, #1
 8000d46:	4650      	mov	r0, sl
 8000d48:	0b24      	lsrs	r4, r4, #12
 8000d4a:	0d5b      	lsrs	r3, r3, #21
 8000d4c:	0fff      	lsrs	r7, r7, #31
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d100      	bne.n	8000d54 <__aeabi_ddiv+0x5c>
 8000d52:	e11f      	b.n	8000f94 <__aeabi_ddiv+0x29c>
 8000d54:	4ac6      	ldr	r2, [pc, #792]	; (8001070 <__aeabi_ddiv+0x378>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x64>
 8000d5a:	e162      	b.n	8001022 <__aeabi_ddiv+0x32a>
 8000d5c:	49c5      	ldr	r1, [pc, #788]	; (8001074 <__aeabi_ddiv+0x37c>)
 8000d5e:	0f42      	lsrs	r2, r0, #29
 8000d60:	468c      	mov	ip, r1
 8000d62:	00e4      	lsls	r4, r4, #3
 8000d64:	4659      	mov	r1, fp
 8000d66:	4314      	orrs	r4, r2
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	4463      	add	r3, ip
 8000d6c:	0412      	lsls	r2, r2, #16
 8000d6e:	1acb      	subs	r3, r1, r3
 8000d70:	4314      	orrs	r4, r2
 8000d72:	469b      	mov	fp, r3
 8000d74:	00c2      	lsls	r2, r0, #3
 8000d76:	2000      	movs	r0, #0
 8000d78:	0033      	movs	r3, r6
 8000d7a:	407b      	eors	r3, r7
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	464b      	mov	r3, r9
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d827      	bhi.n	8000dd4 <__aeabi_ddiv+0xdc>
 8000d84:	49bc      	ldr	r1, [pc, #752]	; (8001078 <__aeabi_ddiv+0x380>)
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	58cb      	ldr	r3, [r1, r3]
 8000d8a:	469f      	mov	pc, r3
 8000d8c:	46b2      	mov	sl, r6
 8000d8e:	9b00      	ldr	r3, [sp, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d016      	beq.n	8000dc2 <__aeabi_ddiv+0xca>
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d100      	bne.n	8000d9a <__aeabi_ddiv+0xa2>
 8000d98:	e28e      	b.n	80012b8 <__aeabi_ddiv+0x5c0>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_ddiv+0xa8>
 8000d9e:	e0d9      	b.n	8000f54 <__aeabi_ddiv+0x25c>
 8000da0:	2300      	movs	r3, #0
 8000da2:	2400      	movs	r4, #0
 8000da4:	2500      	movs	r5, #0
 8000da6:	4652      	mov	r2, sl
 8000da8:	051b      	lsls	r3, r3, #20
 8000daa:	4323      	orrs	r3, r4
 8000dac:	07d2      	lsls	r2, r2, #31
 8000dae:	4313      	orrs	r3, r2
 8000db0:	0028      	movs	r0, r5
 8000db2:	0019      	movs	r1, r3
 8000db4:	b005      	add	sp, #20
 8000db6:	bcf0      	pop	{r4, r5, r6, r7}
 8000db8:	46bb      	mov	fp, r7
 8000dba:	46b2      	mov	sl, r6
 8000dbc:	46a9      	mov	r9, r5
 8000dbe:	46a0      	mov	r8, r4
 8000dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc2:	2400      	movs	r4, #0
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	4baa      	ldr	r3, [pc, #680]	; (8001070 <__aeabi_ddiv+0x378>)
 8000dc8:	e7ed      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8000dca:	46ba      	mov	sl, r7
 8000dcc:	46a0      	mov	r8, r4
 8000dce:	0015      	movs	r5, r2
 8000dd0:	9000      	str	r0, [sp, #0]
 8000dd2:	e7dc      	b.n	8000d8e <__aeabi_ddiv+0x96>
 8000dd4:	4544      	cmp	r4, r8
 8000dd6:	d200      	bcs.n	8000dda <__aeabi_ddiv+0xe2>
 8000dd8:	e1c7      	b.n	800116a <__aeabi_ddiv+0x472>
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0xe6>
 8000ddc:	e1c2      	b.n	8001164 <__aeabi_ddiv+0x46c>
 8000dde:	2301      	movs	r3, #1
 8000de0:	425b      	negs	r3, r3
 8000de2:	469c      	mov	ip, r3
 8000de4:	002e      	movs	r6, r5
 8000de6:	4640      	mov	r0, r8
 8000de8:	2500      	movs	r5, #0
 8000dea:	44e3      	add	fp, ip
 8000dec:	0223      	lsls	r3, r4, #8
 8000dee:	0e14      	lsrs	r4, r2, #24
 8000df0:	431c      	orrs	r4, r3
 8000df2:	0c1b      	lsrs	r3, r3, #16
 8000df4:	4699      	mov	r9, r3
 8000df6:	0423      	lsls	r3, r4, #16
 8000df8:	0c1f      	lsrs	r7, r3, #16
 8000dfa:	0212      	lsls	r2, r2, #8
 8000dfc:	4649      	mov	r1, r9
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	9701      	str	r7, [sp, #4]
 8000e02:	f7ff fa23 	bl	800024c <__aeabi_uidivmod>
 8000e06:	0002      	movs	r2, r0
 8000e08:	437a      	muls	r2, r7
 8000e0a:	040b      	lsls	r3, r1, #16
 8000e0c:	0c31      	lsrs	r1, r6, #16
 8000e0e:	4680      	mov	r8, r0
 8000e10:	4319      	orrs	r1, r3
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d907      	bls.n	8000e26 <__aeabi_ddiv+0x12e>
 8000e16:	2301      	movs	r3, #1
 8000e18:	425b      	negs	r3, r3
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	1909      	adds	r1, r1, r4
 8000e1e:	44e0      	add	r8, ip
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d800      	bhi.n	8000e26 <__aeabi_ddiv+0x12e>
 8000e24:	e207      	b.n	8001236 <__aeabi_ddiv+0x53e>
 8000e26:	1a88      	subs	r0, r1, r2
 8000e28:	4649      	mov	r1, r9
 8000e2a:	f7ff fa0f 	bl	800024c <__aeabi_uidivmod>
 8000e2e:	0409      	lsls	r1, r1, #16
 8000e30:	468c      	mov	ip, r1
 8000e32:	0431      	lsls	r1, r6, #16
 8000e34:	4666      	mov	r6, ip
 8000e36:	9a01      	ldr	r2, [sp, #4]
 8000e38:	0c09      	lsrs	r1, r1, #16
 8000e3a:	4342      	muls	r2, r0
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	4331      	orrs	r1, r6
 8000e40:	428a      	cmp	r2, r1
 8000e42:	d904      	bls.n	8000e4e <__aeabi_ddiv+0x156>
 8000e44:	1909      	adds	r1, r1, r4
 8000e46:	3b01      	subs	r3, #1
 8000e48:	428c      	cmp	r4, r1
 8000e4a:	d800      	bhi.n	8000e4e <__aeabi_ddiv+0x156>
 8000e4c:	e1ed      	b.n	800122a <__aeabi_ddiv+0x532>
 8000e4e:	1a88      	subs	r0, r1, r2
 8000e50:	4642      	mov	r2, r8
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	431a      	orrs	r2, r3
 8000e56:	4690      	mov	r8, r2
 8000e58:	4641      	mov	r1, r8
 8000e5a:	9b00      	ldr	r3, [sp, #0]
 8000e5c:	040e      	lsls	r6, r1, #16
 8000e5e:	0c1b      	lsrs	r3, r3, #16
 8000e60:	001f      	movs	r7, r3
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	9b00      	ldr	r3, [sp, #0]
 8000e66:	0c36      	lsrs	r6, r6, #16
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c19      	lsrs	r1, r3, #16
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	4373      	muls	r3, r6
 8000e70:	0c12      	lsrs	r2, r2, #16
 8000e72:	437e      	muls	r6, r7
 8000e74:	9103      	str	r1, [sp, #12]
 8000e76:	4351      	muls	r1, r2
 8000e78:	437a      	muls	r2, r7
 8000e7a:	0c1f      	lsrs	r7, r3, #16
 8000e7c:	46bc      	mov	ip, r7
 8000e7e:	1876      	adds	r6, r6, r1
 8000e80:	4466      	add	r6, ip
 8000e82:	42b1      	cmp	r1, r6
 8000e84:	d903      	bls.n	8000e8e <__aeabi_ddiv+0x196>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0249      	lsls	r1, r1, #9
 8000e8a:	468c      	mov	ip, r1
 8000e8c:	4462      	add	r2, ip
 8000e8e:	0c31      	lsrs	r1, r6, #16
 8000e90:	188a      	adds	r2, r1, r2
 8000e92:	0431      	lsls	r1, r6, #16
 8000e94:	041e      	lsls	r6, r3, #16
 8000e96:	0c36      	lsrs	r6, r6, #16
 8000e98:	198e      	adds	r6, r1, r6
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d302      	bcc.n	8000ea4 <__aeabi_ddiv+0x1ac>
 8000e9e:	d112      	bne.n	8000ec6 <__aeabi_ddiv+0x1ce>
 8000ea0:	42b5      	cmp	r5, r6
 8000ea2:	d210      	bcs.n	8000ec6 <__aeabi_ddiv+0x1ce>
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	1e59      	subs	r1, r3, #1
 8000ea8:	9b00      	ldr	r3, [sp, #0]
 8000eaa:	469c      	mov	ip, r3
 8000eac:	4465      	add	r5, ip
 8000eae:	001f      	movs	r7, r3
 8000eb0:	429d      	cmp	r5, r3
 8000eb2:	419b      	sbcs	r3, r3
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	191b      	adds	r3, r3, r4
 8000eb8:	18c0      	adds	r0, r0, r3
 8000eba:	4284      	cmp	r4, r0
 8000ebc:	d200      	bcs.n	8000ec0 <__aeabi_ddiv+0x1c8>
 8000ebe:	e1a0      	b.n	8001202 <__aeabi_ddiv+0x50a>
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x1cc>
 8000ec2:	e19b      	b.n	80011fc <__aeabi_ddiv+0x504>
 8000ec4:	4688      	mov	r8, r1
 8000ec6:	1bae      	subs	r6, r5, r6
 8000ec8:	42b5      	cmp	r5, r6
 8000eca:	41ad      	sbcs	r5, r5
 8000ecc:	1a80      	subs	r0, r0, r2
 8000ece:	426d      	negs	r5, r5
 8000ed0:	1b40      	subs	r0, r0, r5
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_ddiv+0x1e0>
 8000ed6:	e1d5      	b.n	8001284 <__aeabi_ddiv+0x58c>
 8000ed8:	4649      	mov	r1, r9
 8000eda:	f7ff f9b7 	bl	800024c <__aeabi_uidivmod>
 8000ede:	9a01      	ldr	r2, [sp, #4]
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	4342      	muls	r2, r0
 8000ee4:	0c31      	lsrs	r1, r6, #16
 8000ee6:	0005      	movs	r5, r0
 8000ee8:	4319      	orrs	r1, r3
 8000eea:	428a      	cmp	r2, r1
 8000eec:	d900      	bls.n	8000ef0 <__aeabi_ddiv+0x1f8>
 8000eee:	e16c      	b.n	80011ca <__aeabi_ddiv+0x4d2>
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f9aa 	bl	800024c <__aeabi_uidivmod>
 8000ef8:	9a01      	ldr	r2, [sp, #4]
 8000efa:	0436      	lsls	r6, r6, #16
 8000efc:	4342      	muls	r2, r0
 8000efe:	0409      	lsls	r1, r1, #16
 8000f00:	0c36      	lsrs	r6, r6, #16
 8000f02:	0003      	movs	r3, r0
 8000f04:	430e      	orrs	r6, r1
 8000f06:	42b2      	cmp	r2, r6
 8000f08:	d900      	bls.n	8000f0c <__aeabi_ddiv+0x214>
 8000f0a:	e153      	b.n	80011b4 <__aeabi_ddiv+0x4bc>
 8000f0c:	9803      	ldr	r0, [sp, #12]
 8000f0e:	1ab6      	subs	r6, r6, r2
 8000f10:	0002      	movs	r2, r0
 8000f12:	042d      	lsls	r5, r5, #16
 8000f14:	431d      	orrs	r5, r3
 8000f16:	9f02      	ldr	r7, [sp, #8]
 8000f18:	042b      	lsls	r3, r5, #16
 8000f1a:	0c1b      	lsrs	r3, r3, #16
 8000f1c:	435a      	muls	r2, r3
 8000f1e:	437b      	muls	r3, r7
 8000f20:	469c      	mov	ip, r3
 8000f22:	0c29      	lsrs	r1, r5, #16
 8000f24:	4348      	muls	r0, r1
 8000f26:	0c13      	lsrs	r3, r2, #16
 8000f28:	4484      	add	ip, r0
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4379      	muls	r1, r7
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d903      	bls.n	8000f3a <__aeabi_ddiv+0x242>
 8000f32:	2080      	movs	r0, #128	; 0x80
 8000f34:	0240      	lsls	r0, r0, #9
 8000f36:	4684      	mov	ip, r0
 8000f38:	4461      	add	r1, ip
 8000f3a:	0c18      	lsrs	r0, r3, #16
 8000f3c:	0412      	lsls	r2, r2, #16
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	0c12      	lsrs	r2, r2, #16
 8000f42:	1841      	adds	r1, r0, r1
 8000f44:	189b      	adds	r3, r3, r2
 8000f46:	428e      	cmp	r6, r1
 8000f48:	d200      	bcs.n	8000f4c <__aeabi_ddiv+0x254>
 8000f4a:	e0ff      	b.n	800114c <__aeabi_ddiv+0x454>
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x258>
 8000f4e:	e0fa      	b.n	8001146 <__aeabi_ddiv+0x44e>
 8000f50:	2301      	movs	r3, #1
 8000f52:	431d      	orrs	r5, r3
 8000f54:	4a49      	ldr	r2, [pc, #292]	; (800107c <__aeabi_ddiv+0x384>)
 8000f56:	445a      	add	r2, fp
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	dc00      	bgt.n	8000f5e <__aeabi_ddiv+0x266>
 8000f5c:	e0aa      	b.n	80010b4 <__aeabi_ddiv+0x3bc>
 8000f5e:	076b      	lsls	r3, r5, #29
 8000f60:	d000      	beq.n	8000f64 <__aeabi_ddiv+0x26c>
 8000f62:	e13d      	b.n	80011e0 <__aeabi_ddiv+0x4e8>
 8000f64:	08ed      	lsrs	r5, r5, #3
 8000f66:	4643      	mov	r3, r8
 8000f68:	01db      	lsls	r3, r3, #7
 8000f6a:	d506      	bpl.n	8000f7a <__aeabi_ddiv+0x282>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	4b44      	ldr	r3, [pc, #272]	; (8001080 <__aeabi_ddiv+0x388>)
 8000f70:	401a      	ands	r2, r3
 8000f72:	4690      	mov	r8, r2
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	445a      	add	r2, fp
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <__aeabi_ddiv+0x38c>)
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dd00      	ble.n	8000f82 <__aeabi_ddiv+0x28a>
 8000f80:	e71f      	b.n	8000dc2 <__aeabi_ddiv+0xca>
 8000f82:	4643      	mov	r3, r8
 8000f84:	075b      	lsls	r3, r3, #29
 8000f86:	431d      	orrs	r5, r3
 8000f88:	4643      	mov	r3, r8
 8000f8a:	0552      	lsls	r2, r2, #21
 8000f8c:	025c      	lsls	r4, r3, #9
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	0d53      	lsrs	r3, r2, #21
 8000f92:	e708      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8000f94:	4652      	mov	r2, sl
 8000f96:	4322      	orrs	r2, r4
 8000f98:	d100      	bne.n	8000f9c <__aeabi_ddiv+0x2a4>
 8000f9a:	e07b      	b.n	8001094 <__aeabi_ddiv+0x39c>
 8000f9c:	2c00      	cmp	r4, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_ddiv+0x2aa>
 8000fa0:	e0fa      	b.n	8001198 <__aeabi_ddiv+0x4a0>
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f001 f952 	bl	800224c <__clzsi2>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3a0b      	subs	r2, #11
 8000fac:	231d      	movs	r3, #29
 8000fae:	0001      	movs	r1, r0
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	4652      	mov	r2, sl
 8000fb4:	3908      	subs	r1, #8
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	408c      	lsls	r4, r1
 8000fba:	4314      	orrs	r4, r2
 8000fbc:	4652      	mov	r2, sl
 8000fbe:	408a      	lsls	r2, r1
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <__aeabi_ddiv+0x390>)
 8000fc2:	4458      	add	r0, fp
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	4483      	add	fp, r0
 8000fc8:	2000      	movs	r0, #0
 8000fca:	e6d5      	b.n	8000d78 <__aeabi_ddiv+0x80>
 8000fcc:	464b      	mov	r3, r9
 8000fce:	4323      	orrs	r3, r4
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x366>
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x2e2>
 8000fd8:	e0ce      	b.n	8001178 <__aeabi_ddiv+0x480>
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f001 f936 	bl	800224c <__clzsi2>
 8000fe0:	0001      	movs	r1, r0
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	390b      	subs	r1, #11
 8000fe6:	231d      	movs	r3, #29
 8000fe8:	1a5b      	subs	r3, r3, r1
 8000fea:	4649      	mov	r1, r9
 8000fec:	0010      	movs	r0, r2
 8000fee:	40d9      	lsrs	r1, r3
 8000ff0:	3808      	subs	r0, #8
 8000ff2:	4084      	lsls	r4, r0
 8000ff4:	000b      	movs	r3, r1
 8000ff6:	464d      	mov	r5, r9
 8000ff8:	4323      	orrs	r3, r4
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	4085      	lsls	r5, r0
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <__aeabi_ddiv+0x394>)
 8001000:	1a83      	subs	r3, r0, r2
 8001002:	469b      	mov	fp, r3
 8001004:	2300      	movs	r3, #0
 8001006:	4699      	mov	r9, r3
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	e69a      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 800100c:	464b      	mov	r3, r9
 800100e:	4323      	orrs	r3, r4
 8001010:	4698      	mov	r8, r3
 8001012:	d11d      	bne.n	8001050 <__aeabi_ddiv+0x358>
 8001014:	2308      	movs	r3, #8
 8001016:	4699      	mov	r9, r3
 8001018:	3b06      	subs	r3, #6
 800101a:	2500      	movs	r5, #0
 800101c:	4683      	mov	fp, r0
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	e68f      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 8001022:	4652      	mov	r2, sl
 8001024:	4322      	orrs	r2, r4
 8001026:	d109      	bne.n	800103c <__aeabi_ddiv+0x344>
 8001028:	2302      	movs	r3, #2
 800102a:	4649      	mov	r1, r9
 800102c:	4319      	orrs	r1, r3
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <__aeabi_ddiv+0x398>)
 8001030:	4689      	mov	r9, r1
 8001032:	469c      	mov	ip, r3
 8001034:	2400      	movs	r4, #0
 8001036:	2002      	movs	r0, #2
 8001038:	44e3      	add	fp, ip
 800103a:	e69d      	b.n	8000d78 <__aeabi_ddiv+0x80>
 800103c:	2303      	movs	r3, #3
 800103e:	464a      	mov	r2, r9
 8001040:	431a      	orrs	r2, r3
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <__aeabi_ddiv+0x398>)
 8001044:	4691      	mov	r9, r2
 8001046:	469c      	mov	ip, r3
 8001048:	4652      	mov	r2, sl
 800104a:	2003      	movs	r0, #3
 800104c:	44e3      	add	fp, ip
 800104e:	e693      	b.n	8000d78 <__aeabi_ddiv+0x80>
 8001050:	230c      	movs	r3, #12
 8001052:	4699      	mov	r9, r3
 8001054:	3b09      	subs	r3, #9
 8001056:	46a0      	mov	r8, r4
 8001058:	4683      	mov	fp, r0
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	e671      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 800105e:	2304      	movs	r3, #4
 8001060:	4699      	mov	r9, r3
 8001062:	2300      	movs	r3, #0
 8001064:	469b      	mov	fp, r3
 8001066:	3301      	adds	r3, #1
 8001068:	2500      	movs	r5, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	e669      	b.n	8000d42 <__aeabi_ddiv+0x4a>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	000007ff 	.word	0x000007ff
 8001074:	fffffc01 	.word	0xfffffc01
 8001078:	0800c430 	.word	0x0800c430
 800107c:	000003ff 	.word	0x000003ff
 8001080:	feffffff 	.word	0xfeffffff
 8001084:	000007fe 	.word	0x000007fe
 8001088:	000003f3 	.word	0x000003f3
 800108c:	fffffc0d 	.word	0xfffffc0d
 8001090:	fffff801 	.word	0xfffff801
 8001094:	4649      	mov	r1, r9
 8001096:	2301      	movs	r3, #1
 8001098:	4319      	orrs	r1, r3
 800109a:	4689      	mov	r9, r1
 800109c:	2400      	movs	r4, #0
 800109e:	2001      	movs	r0, #1
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x80>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2480      	movs	r4, #128	; 0x80
 80010a6:	469a      	mov	sl, r3
 80010a8:	2500      	movs	r5, #0
 80010aa:	4b8a      	ldr	r3, [pc, #552]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 80010ac:	0324      	lsls	r4, r4, #12
 80010ae:	e67a      	b.n	8000da6 <__aeabi_ddiv+0xae>
 80010b0:	2501      	movs	r5, #1
 80010b2:	426d      	negs	r5, r5
 80010b4:	2301      	movs	r3, #1
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	2b38      	cmp	r3, #56	; 0x38
 80010ba:	dd00      	ble.n	80010be <__aeabi_ddiv+0x3c6>
 80010bc:	e670      	b.n	8000da0 <__aeabi_ddiv+0xa8>
 80010be:	2b1f      	cmp	r3, #31
 80010c0:	dc00      	bgt.n	80010c4 <__aeabi_ddiv+0x3cc>
 80010c2:	e0bf      	b.n	8001244 <__aeabi_ddiv+0x54c>
 80010c4:	211f      	movs	r1, #31
 80010c6:	4249      	negs	r1, r1
 80010c8:	1a8a      	subs	r2, r1, r2
 80010ca:	4641      	mov	r1, r8
 80010cc:	40d1      	lsrs	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	2b20      	cmp	r3, #32
 80010d2:	d004      	beq.n	80010de <__aeabi_ddiv+0x3e6>
 80010d4:	4641      	mov	r1, r8
 80010d6:	4b80      	ldr	r3, [pc, #512]	; (80012d8 <__aeabi_ddiv+0x5e0>)
 80010d8:	445b      	add	r3, fp
 80010da:	4099      	lsls	r1, r3
 80010dc:	430d      	orrs	r5, r1
 80010de:	1e6b      	subs	r3, r5, #1
 80010e0:	419d      	sbcs	r5, r3
 80010e2:	2307      	movs	r3, #7
 80010e4:	432a      	orrs	r2, r5
 80010e6:	001d      	movs	r5, r3
 80010e8:	2400      	movs	r4, #0
 80010ea:	4015      	ands	r5, r2
 80010ec:	4213      	tst	r3, r2
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x3fa>
 80010f0:	e0d4      	b.n	800129c <__aeabi_ddiv+0x5a4>
 80010f2:	210f      	movs	r1, #15
 80010f4:	2300      	movs	r3, #0
 80010f6:	4011      	ands	r1, r2
 80010f8:	2904      	cmp	r1, #4
 80010fa:	d100      	bne.n	80010fe <__aeabi_ddiv+0x406>
 80010fc:	e0cb      	b.n	8001296 <__aeabi_ddiv+0x59e>
 80010fe:	1d11      	adds	r1, r2, #4
 8001100:	4291      	cmp	r1, r2
 8001102:	4192      	sbcs	r2, r2
 8001104:	4252      	negs	r2, r2
 8001106:	189b      	adds	r3, r3, r2
 8001108:	000a      	movs	r2, r1
 800110a:	0219      	lsls	r1, r3, #8
 800110c:	d400      	bmi.n	8001110 <__aeabi_ddiv+0x418>
 800110e:	e0c2      	b.n	8001296 <__aeabi_ddiv+0x59e>
 8001110:	2301      	movs	r3, #1
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e646      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	4641      	mov	r1, r8
 800111c:	031b      	lsls	r3, r3, #12
 800111e:	4219      	tst	r1, r3
 8001120:	d008      	beq.n	8001134 <__aeabi_ddiv+0x43c>
 8001122:	421c      	tst	r4, r3
 8001124:	d106      	bne.n	8001134 <__aeabi_ddiv+0x43c>
 8001126:	431c      	orrs	r4, r3
 8001128:	0324      	lsls	r4, r4, #12
 800112a:	46ba      	mov	sl, r7
 800112c:	0015      	movs	r5, r2
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 8001130:	0b24      	lsrs	r4, r4, #12
 8001132:	e638      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8001134:	2480      	movs	r4, #128	; 0x80
 8001136:	4643      	mov	r3, r8
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	431c      	orrs	r4, r3
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	46b2      	mov	sl, r6
 8001140:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 8001142:	0b24      	lsrs	r4, r4, #12
 8001144:	e62f      	b.n	8000da6 <__aeabi_ddiv+0xae>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x454>
 800114a:	e703      	b.n	8000f54 <__aeabi_ddiv+0x25c>
 800114c:	19a6      	adds	r6, r4, r6
 800114e:	1e68      	subs	r0, r5, #1
 8001150:	42a6      	cmp	r6, r4
 8001152:	d200      	bcs.n	8001156 <__aeabi_ddiv+0x45e>
 8001154:	e08d      	b.n	8001272 <__aeabi_ddiv+0x57a>
 8001156:	428e      	cmp	r6, r1
 8001158:	d200      	bcs.n	800115c <__aeabi_ddiv+0x464>
 800115a:	e0a3      	b.n	80012a4 <__aeabi_ddiv+0x5ac>
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x468>
 800115e:	e0b3      	b.n	80012c8 <__aeabi_ddiv+0x5d0>
 8001160:	0005      	movs	r5, r0
 8001162:	e6f5      	b.n	8000f50 <__aeabi_ddiv+0x258>
 8001164:	42aa      	cmp	r2, r5
 8001166:	d900      	bls.n	800116a <__aeabi_ddiv+0x472>
 8001168:	e639      	b.n	8000dde <__aeabi_ddiv+0xe6>
 800116a:	4643      	mov	r3, r8
 800116c:	07de      	lsls	r6, r3, #31
 800116e:	0858      	lsrs	r0, r3, #1
 8001170:	086b      	lsrs	r3, r5, #1
 8001172:	431e      	orrs	r6, r3
 8001174:	07ed      	lsls	r5, r5, #31
 8001176:	e639      	b.n	8000dec <__aeabi_ddiv+0xf4>
 8001178:	4648      	mov	r0, r9
 800117a:	f001 f867 	bl	800224c <__clzsi2>
 800117e:	0001      	movs	r1, r0
 8001180:	0002      	movs	r2, r0
 8001182:	3115      	adds	r1, #21
 8001184:	3220      	adds	r2, #32
 8001186:	291c      	cmp	r1, #28
 8001188:	dc00      	bgt.n	800118c <__aeabi_ddiv+0x494>
 800118a:	e72c      	b.n	8000fe6 <__aeabi_ddiv+0x2ee>
 800118c:	464b      	mov	r3, r9
 800118e:	3808      	subs	r0, #8
 8001190:	4083      	lsls	r3, r0
 8001192:	2500      	movs	r5, #0
 8001194:	4698      	mov	r8, r3
 8001196:	e732      	b.n	8000ffe <__aeabi_ddiv+0x306>
 8001198:	f001 f858 	bl	800224c <__clzsi2>
 800119c:	0003      	movs	r3, r0
 800119e:	001a      	movs	r2, r3
 80011a0:	3215      	adds	r2, #21
 80011a2:	3020      	adds	r0, #32
 80011a4:	2a1c      	cmp	r2, #28
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_ddiv+0x4b2>
 80011a8:	e700      	b.n	8000fac <__aeabi_ddiv+0x2b4>
 80011aa:	4654      	mov	r4, sl
 80011ac:	3b08      	subs	r3, #8
 80011ae:	2200      	movs	r2, #0
 80011b0:	409c      	lsls	r4, r3
 80011b2:	e705      	b.n	8000fc0 <__aeabi_ddiv+0x2c8>
 80011b4:	1936      	adds	r6, r6, r4
 80011b6:	3b01      	subs	r3, #1
 80011b8:	42b4      	cmp	r4, r6
 80011ba:	d900      	bls.n	80011be <__aeabi_ddiv+0x4c6>
 80011bc:	e6a6      	b.n	8000f0c <__aeabi_ddiv+0x214>
 80011be:	42b2      	cmp	r2, r6
 80011c0:	d800      	bhi.n	80011c4 <__aeabi_ddiv+0x4cc>
 80011c2:	e6a3      	b.n	8000f0c <__aeabi_ddiv+0x214>
 80011c4:	1e83      	subs	r3, r0, #2
 80011c6:	1936      	adds	r6, r6, r4
 80011c8:	e6a0      	b.n	8000f0c <__aeabi_ddiv+0x214>
 80011ca:	1909      	adds	r1, r1, r4
 80011cc:	3d01      	subs	r5, #1
 80011ce:	428c      	cmp	r4, r1
 80011d0:	d900      	bls.n	80011d4 <__aeabi_ddiv+0x4dc>
 80011d2:	e68d      	b.n	8000ef0 <__aeabi_ddiv+0x1f8>
 80011d4:	428a      	cmp	r2, r1
 80011d6:	d800      	bhi.n	80011da <__aeabi_ddiv+0x4e2>
 80011d8:	e68a      	b.n	8000ef0 <__aeabi_ddiv+0x1f8>
 80011da:	1e85      	subs	r5, r0, #2
 80011dc:	1909      	adds	r1, r1, r4
 80011de:	e687      	b.n	8000ef0 <__aeabi_ddiv+0x1f8>
 80011e0:	230f      	movs	r3, #15
 80011e2:	402b      	ands	r3, r5
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d100      	bne.n	80011ea <__aeabi_ddiv+0x4f2>
 80011e8:	e6bc      	b.n	8000f64 <__aeabi_ddiv+0x26c>
 80011ea:	2305      	movs	r3, #5
 80011ec:	425b      	negs	r3, r3
 80011ee:	42ab      	cmp	r3, r5
 80011f0:	419b      	sbcs	r3, r3
 80011f2:	3504      	adds	r5, #4
 80011f4:	425b      	negs	r3, r3
 80011f6:	08ed      	lsrs	r5, r5, #3
 80011f8:	4498      	add	r8, r3
 80011fa:	e6b4      	b.n	8000f66 <__aeabi_ddiv+0x26e>
 80011fc:	42af      	cmp	r7, r5
 80011fe:	d900      	bls.n	8001202 <__aeabi_ddiv+0x50a>
 8001200:	e660      	b.n	8000ec4 <__aeabi_ddiv+0x1cc>
 8001202:	4282      	cmp	r2, r0
 8001204:	d804      	bhi.n	8001210 <__aeabi_ddiv+0x518>
 8001206:	d000      	beq.n	800120a <__aeabi_ddiv+0x512>
 8001208:	e65c      	b.n	8000ec4 <__aeabi_ddiv+0x1cc>
 800120a:	42ae      	cmp	r6, r5
 800120c:	d800      	bhi.n	8001210 <__aeabi_ddiv+0x518>
 800120e:	e659      	b.n	8000ec4 <__aeabi_ddiv+0x1cc>
 8001210:	2302      	movs	r3, #2
 8001212:	425b      	negs	r3, r3
 8001214:	469c      	mov	ip, r3
 8001216:	9b00      	ldr	r3, [sp, #0]
 8001218:	44e0      	add	r8, ip
 800121a:	469c      	mov	ip, r3
 800121c:	4465      	add	r5, ip
 800121e:	429d      	cmp	r5, r3
 8001220:	419b      	sbcs	r3, r3
 8001222:	425b      	negs	r3, r3
 8001224:	191b      	adds	r3, r3, r4
 8001226:	18c0      	adds	r0, r0, r3
 8001228:	e64d      	b.n	8000ec6 <__aeabi_ddiv+0x1ce>
 800122a:	428a      	cmp	r2, r1
 800122c:	d800      	bhi.n	8001230 <__aeabi_ddiv+0x538>
 800122e:	e60e      	b.n	8000e4e <__aeabi_ddiv+0x156>
 8001230:	1e83      	subs	r3, r0, #2
 8001232:	1909      	adds	r1, r1, r4
 8001234:	e60b      	b.n	8000e4e <__aeabi_ddiv+0x156>
 8001236:	428a      	cmp	r2, r1
 8001238:	d800      	bhi.n	800123c <__aeabi_ddiv+0x544>
 800123a:	e5f4      	b.n	8000e26 <__aeabi_ddiv+0x12e>
 800123c:	1e83      	subs	r3, r0, #2
 800123e:	4698      	mov	r8, r3
 8001240:	1909      	adds	r1, r1, r4
 8001242:	e5f0      	b.n	8000e26 <__aeabi_ddiv+0x12e>
 8001244:	4925      	ldr	r1, [pc, #148]	; (80012dc <__aeabi_ddiv+0x5e4>)
 8001246:	0028      	movs	r0, r5
 8001248:	4459      	add	r1, fp
 800124a:	408d      	lsls	r5, r1
 800124c:	4642      	mov	r2, r8
 800124e:	408a      	lsls	r2, r1
 8001250:	1e69      	subs	r1, r5, #1
 8001252:	418d      	sbcs	r5, r1
 8001254:	4641      	mov	r1, r8
 8001256:	40d8      	lsrs	r0, r3
 8001258:	40d9      	lsrs	r1, r3
 800125a:	4302      	orrs	r2, r0
 800125c:	432a      	orrs	r2, r5
 800125e:	000b      	movs	r3, r1
 8001260:	0751      	lsls	r1, r2, #29
 8001262:	d100      	bne.n	8001266 <__aeabi_ddiv+0x56e>
 8001264:	e751      	b.n	800110a <__aeabi_ddiv+0x412>
 8001266:	210f      	movs	r1, #15
 8001268:	4011      	ands	r1, r2
 800126a:	2904      	cmp	r1, #4
 800126c:	d000      	beq.n	8001270 <__aeabi_ddiv+0x578>
 800126e:	e746      	b.n	80010fe <__aeabi_ddiv+0x406>
 8001270:	e74b      	b.n	800110a <__aeabi_ddiv+0x412>
 8001272:	0005      	movs	r5, r0
 8001274:	428e      	cmp	r6, r1
 8001276:	d000      	beq.n	800127a <__aeabi_ddiv+0x582>
 8001278:	e66a      	b.n	8000f50 <__aeabi_ddiv+0x258>
 800127a:	9a00      	ldr	r2, [sp, #0]
 800127c:	4293      	cmp	r3, r2
 800127e:	d000      	beq.n	8001282 <__aeabi_ddiv+0x58a>
 8001280:	e666      	b.n	8000f50 <__aeabi_ddiv+0x258>
 8001282:	e667      	b.n	8000f54 <__aeabi_ddiv+0x25c>
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <__aeabi_ddiv+0x5e8>)
 8001286:	445a      	add	r2, fp
 8001288:	2a00      	cmp	r2, #0
 800128a:	dc00      	bgt.n	800128e <__aeabi_ddiv+0x596>
 800128c:	e710      	b.n	80010b0 <__aeabi_ddiv+0x3b8>
 800128e:	2301      	movs	r3, #1
 8001290:	2500      	movs	r5, #0
 8001292:	4498      	add	r8, r3
 8001294:	e667      	b.n	8000f66 <__aeabi_ddiv+0x26e>
 8001296:	075d      	lsls	r5, r3, #29
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	0b1c      	lsrs	r4, r3, #12
 800129c:	08d2      	lsrs	r2, r2, #3
 800129e:	2300      	movs	r3, #0
 80012a0:	4315      	orrs	r5, r2
 80012a2:	e580      	b.n	8000da6 <__aeabi_ddiv+0xae>
 80012a4:	9800      	ldr	r0, [sp, #0]
 80012a6:	3d02      	subs	r5, #2
 80012a8:	0042      	lsls	r2, r0, #1
 80012aa:	4282      	cmp	r2, r0
 80012ac:	41bf      	sbcs	r7, r7
 80012ae:	427f      	negs	r7, r7
 80012b0:	193c      	adds	r4, r7, r4
 80012b2:	1936      	adds	r6, r6, r4
 80012b4:	9200      	str	r2, [sp, #0]
 80012b6:	e7dd      	b.n	8001274 <__aeabi_ddiv+0x57c>
 80012b8:	2480      	movs	r4, #128	; 0x80
 80012ba:	4643      	mov	r3, r8
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	431c      	orrs	r4, r3
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__aeabi_ddiv+0x5dc>)
 80012c4:	0b24      	lsrs	r4, r4, #12
 80012c6:	e56e      	b.n	8000da6 <__aeabi_ddiv+0xae>
 80012c8:	9a00      	ldr	r2, [sp, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d3ea      	bcc.n	80012a4 <__aeabi_ddiv+0x5ac>
 80012ce:	0005      	movs	r5, r0
 80012d0:	e7d3      	b.n	800127a <__aeabi_ddiv+0x582>
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	000007ff 	.word	0x000007ff
 80012d8:	0000043e 	.word	0x0000043e
 80012dc:	0000041e 	.word	0x0000041e
 80012e0:	000003ff 	.word	0x000003ff

080012e4 <__eqdf2>:
 80012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e6:	464e      	mov	r6, r9
 80012e8:	4645      	mov	r5, r8
 80012ea:	46de      	mov	lr, fp
 80012ec:	4657      	mov	r7, sl
 80012ee:	4690      	mov	r8, r2
 80012f0:	b5e0      	push	{r5, r6, r7, lr}
 80012f2:	0017      	movs	r7, r2
 80012f4:	031a      	lsls	r2, r3, #12
 80012f6:	0b12      	lsrs	r2, r2, #12
 80012f8:	0005      	movs	r5, r0
 80012fa:	4684      	mov	ip, r0
 80012fc:	4819      	ldr	r0, [pc, #100]	; (8001364 <__eqdf2+0x80>)
 80012fe:	030e      	lsls	r6, r1, #12
 8001300:	004c      	lsls	r4, r1, #1
 8001302:	4691      	mov	r9, r2
 8001304:	005a      	lsls	r2, r3, #1
 8001306:	0fdb      	lsrs	r3, r3, #31
 8001308:	469b      	mov	fp, r3
 800130a:	0b36      	lsrs	r6, r6, #12
 800130c:	0d64      	lsrs	r4, r4, #21
 800130e:	0fc9      	lsrs	r1, r1, #31
 8001310:	0d52      	lsrs	r2, r2, #21
 8001312:	4284      	cmp	r4, r0
 8001314:	d019      	beq.n	800134a <__eqdf2+0x66>
 8001316:	4282      	cmp	r2, r0
 8001318:	d010      	beq.n	800133c <__eqdf2+0x58>
 800131a:	2001      	movs	r0, #1
 800131c:	4294      	cmp	r4, r2
 800131e:	d10e      	bne.n	800133e <__eqdf2+0x5a>
 8001320:	454e      	cmp	r6, r9
 8001322:	d10c      	bne.n	800133e <__eqdf2+0x5a>
 8001324:	2001      	movs	r0, #1
 8001326:	45c4      	cmp	ip, r8
 8001328:	d109      	bne.n	800133e <__eqdf2+0x5a>
 800132a:	4559      	cmp	r1, fp
 800132c:	d017      	beq.n	800135e <__eqdf2+0x7a>
 800132e:	2c00      	cmp	r4, #0
 8001330:	d105      	bne.n	800133e <__eqdf2+0x5a>
 8001332:	0030      	movs	r0, r6
 8001334:	4328      	orrs	r0, r5
 8001336:	1e43      	subs	r3, r0, #1
 8001338:	4198      	sbcs	r0, r3
 800133a:	e000      	b.n	800133e <__eqdf2+0x5a>
 800133c:	2001      	movs	r0, #1
 800133e:	bcf0      	pop	{r4, r5, r6, r7}
 8001340:	46bb      	mov	fp, r7
 8001342:	46b2      	mov	sl, r6
 8001344:	46a9      	mov	r9, r5
 8001346:	46a0      	mov	r8, r4
 8001348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134a:	0033      	movs	r3, r6
 800134c:	2001      	movs	r0, #1
 800134e:	432b      	orrs	r3, r5
 8001350:	d1f5      	bne.n	800133e <__eqdf2+0x5a>
 8001352:	42a2      	cmp	r2, r4
 8001354:	d1f3      	bne.n	800133e <__eqdf2+0x5a>
 8001356:	464b      	mov	r3, r9
 8001358:	433b      	orrs	r3, r7
 800135a:	d1f0      	bne.n	800133e <__eqdf2+0x5a>
 800135c:	e7e2      	b.n	8001324 <__eqdf2+0x40>
 800135e:	2000      	movs	r0, #0
 8001360:	e7ed      	b.n	800133e <__eqdf2+0x5a>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	000007ff 	.word	0x000007ff

08001368 <__gedf2>:
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	4647      	mov	r7, r8
 800136c:	46ce      	mov	lr, r9
 800136e:	0004      	movs	r4, r0
 8001370:	0018      	movs	r0, r3
 8001372:	0016      	movs	r6, r2
 8001374:	031b      	lsls	r3, r3, #12
 8001376:	0b1b      	lsrs	r3, r3, #12
 8001378:	4d2d      	ldr	r5, [pc, #180]	; (8001430 <__gedf2+0xc8>)
 800137a:	004a      	lsls	r2, r1, #1
 800137c:	4699      	mov	r9, r3
 800137e:	b580      	push	{r7, lr}
 8001380:	0043      	lsls	r3, r0, #1
 8001382:	030f      	lsls	r7, r1, #12
 8001384:	46a4      	mov	ip, r4
 8001386:	46b0      	mov	r8, r6
 8001388:	0b3f      	lsrs	r7, r7, #12
 800138a:	0d52      	lsrs	r2, r2, #21
 800138c:	0fc9      	lsrs	r1, r1, #31
 800138e:	0d5b      	lsrs	r3, r3, #21
 8001390:	0fc0      	lsrs	r0, r0, #31
 8001392:	42aa      	cmp	r2, r5
 8001394:	d021      	beq.n	80013da <__gedf2+0x72>
 8001396:	42ab      	cmp	r3, r5
 8001398:	d013      	beq.n	80013c2 <__gedf2+0x5a>
 800139a:	2a00      	cmp	r2, #0
 800139c:	d122      	bne.n	80013e4 <__gedf2+0x7c>
 800139e:	433c      	orrs	r4, r7
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <__gedf2+0x42>
 80013a4:	464d      	mov	r5, r9
 80013a6:	432e      	orrs	r6, r5
 80013a8:	d022      	beq.n	80013f0 <__gedf2+0x88>
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	d010      	beq.n	80013d0 <__gedf2+0x68>
 80013ae:	4281      	cmp	r1, r0
 80013b0:	d022      	beq.n	80013f8 <__gedf2+0x90>
 80013b2:	2002      	movs	r0, #2
 80013b4:	3901      	subs	r1, #1
 80013b6:	4008      	ands	r0, r1
 80013b8:	3801      	subs	r0, #1
 80013ba:	bcc0      	pop	{r6, r7}
 80013bc:	46b9      	mov	r9, r7
 80013be:	46b0      	mov	r8, r6
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	464d      	mov	r5, r9
 80013c4:	432e      	orrs	r6, r5
 80013c6:	d129      	bne.n	800141c <__gedf2+0xb4>
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	d1f0      	bne.n	80013ae <__gedf2+0x46>
 80013cc:	433c      	orrs	r4, r7
 80013ce:	d1ee      	bne.n	80013ae <__gedf2+0x46>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d1f2      	bne.n	80013ba <__gedf2+0x52>
 80013d4:	2001      	movs	r0, #1
 80013d6:	4240      	negs	r0, r0
 80013d8:	e7ef      	b.n	80013ba <__gedf2+0x52>
 80013da:	003d      	movs	r5, r7
 80013dc:	4325      	orrs	r5, r4
 80013de:	d11d      	bne.n	800141c <__gedf2+0xb4>
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d0ee      	beq.n	80013c2 <__gedf2+0x5a>
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e2      	bne.n	80013ae <__gedf2+0x46>
 80013e8:	464c      	mov	r4, r9
 80013ea:	4326      	orrs	r6, r4
 80013ec:	d1df      	bne.n	80013ae <__gedf2+0x46>
 80013ee:	e7e0      	b.n	80013b2 <__gedf2+0x4a>
 80013f0:	2000      	movs	r0, #0
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	d0e1      	beq.n	80013ba <__gedf2+0x52>
 80013f6:	e7dc      	b.n	80013b2 <__gedf2+0x4a>
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dc0a      	bgt.n	8001412 <__gedf2+0xaa>
 80013fc:	dbe8      	blt.n	80013d0 <__gedf2+0x68>
 80013fe:	454f      	cmp	r7, r9
 8001400:	d8d7      	bhi.n	80013b2 <__gedf2+0x4a>
 8001402:	d00e      	beq.n	8001422 <__gedf2+0xba>
 8001404:	2000      	movs	r0, #0
 8001406:	454f      	cmp	r7, r9
 8001408:	d2d7      	bcs.n	80013ba <__gedf2+0x52>
 800140a:	2900      	cmp	r1, #0
 800140c:	d0e2      	beq.n	80013d4 <__gedf2+0x6c>
 800140e:	0008      	movs	r0, r1
 8001410:	e7d3      	b.n	80013ba <__gedf2+0x52>
 8001412:	4243      	negs	r3, r0
 8001414:	4158      	adcs	r0, r3
 8001416:	0040      	lsls	r0, r0, #1
 8001418:	3801      	subs	r0, #1
 800141a:	e7ce      	b.n	80013ba <__gedf2+0x52>
 800141c:	2002      	movs	r0, #2
 800141e:	4240      	negs	r0, r0
 8001420:	e7cb      	b.n	80013ba <__gedf2+0x52>
 8001422:	45c4      	cmp	ip, r8
 8001424:	d8c5      	bhi.n	80013b2 <__gedf2+0x4a>
 8001426:	2000      	movs	r0, #0
 8001428:	45c4      	cmp	ip, r8
 800142a:	d2c6      	bcs.n	80013ba <__gedf2+0x52>
 800142c:	e7ed      	b.n	800140a <__gedf2+0xa2>
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	000007ff 	.word	0x000007ff

08001434 <__ledf2>:
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	4647      	mov	r7, r8
 8001438:	46ce      	mov	lr, r9
 800143a:	0004      	movs	r4, r0
 800143c:	0018      	movs	r0, r3
 800143e:	0016      	movs	r6, r2
 8001440:	031b      	lsls	r3, r3, #12
 8001442:	0b1b      	lsrs	r3, r3, #12
 8001444:	4d2c      	ldr	r5, [pc, #176]	; (80014f8 <__ledf2+0xc4>)
 8001446:	004a      	lsls	r2, r1, #1
 8001448:	4699      	mov	r9, r3
 800144a:	b580      	push	{r7, lr}
 800144c:	0043      	lsls	r3, r0, #1
 800144e:	030f      	lsls	r7, r1, #12
 8001450:	46a4      	mov	ip, r4
 8001452:	46b0      	mov	r8, r6
 8001454:	0b3f      	lsrs	r7, r7, #12
 8001456:	0d52      	lsrs	r2, r2, #21
 8001458:	0fc9      	lsrs	r1, r1, #31
 800145a:	0d5b      	lsrs	r3, r3, #21
 800145c:	0fc0      	lsrs	r0, r0, #31
 800145e:	42aa      	cmp	r2, r5
 8001460:	d00d      	beq.n	800147e <__ledf2+0x4a>
 8001462:	42ab      	cmp	r3, r5
 8001464:	d010      	beq.n	8001488 <__ledf2+0x54>
 8001466:	2a00      	cmp	r2, #0
 8001468:	d127      	bne.n	80014ba <__ledf2+0x86>
 800146a:	433c      	orrs	r4, r7
 800146c:	2b00      	cmp	r3, #0
 800146e:	d111      	bne.n	8001494 <__ledf2+0x60>
 8001470:	464d      	mov	r5, r9
 8001472:	432e      	orrs	r6, r5
 8001474:	d10e      	bne.n	8001494 <__ledf2+0x60>
 8001476:	2000      	movs	r0, #0
 8001478:	2c00      	cmp	r4, #0
 800147a:	d015      	beq.n	80014a8 <__ledf2+0x74>
 800147c:	e00e      	b.n	800149c <__ledf2+0x68>
 800147e:	003d      	movs	r5, r7
 8001480:	4325      	orrs	r5, r4
 8001482:	d110      	bne.n	80014a6 <__ledf2+0x72>
 8001484:	4293      	cmp	r3, r2
 8001486:	d118      	bne.n	80014ba <__ledf2+0x86>
 8001488:	464d      	mov	r5, r9
 800148a:	432e      	orrs	r6, r5
 800148c:	d10b      	bne.n	80014a6 <__ledf2+0x72>
 800148e:	2a00      	cmp	r2, #0
 8001490:	d102      	bne.n	8001498 <__ledf2+0x64>
 8001492:	433c      	orrs	r4, r7
 8001494:	2c00      	cmp	r4, #0
 8001496:	d00b      	beq.n	80014b0 <__ledf2+0x7c>
 8001498:	4281      	cmp	r1, r0
 800149a:	d014      	beq.n	80014c6 <__ledf2+0x92>
 800149c:	2002      	movs	r0, #2
 800149e:	3901      	subs	r1, #1
 80014a0:	4008      	ands	r0, r1
 80014a2:	3801      	subs	r0, #1
 80014a4:	e000      	b.n	80014a8 <__ledf2+0x74>
 80014a6:	2002      	movs	r0, #2
 80014a8:	bcc0      	pop	{r6, r7}
 80014aa:	46b9      	mov	r9, r7
 80014ac:	46b0      	mov	r8, r6
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d1f9      	bne.n	80014a8 <__ledf2+0x74>
 80014b4:	2001      	movs	r0, #1
 80014b6:	4240      	negs	r0, r0
 80014b8:	e7f6      	b.n	80014a8 <__ledf2+0x74>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ec      	bne.n	8001498 <__ledf2+0x64>
 80014be:	464c      	mov	r4, r9
 80014c0:	4326      	orrs	r6, r4
 80014c2:	d1e9      	bne.n	8001498 <__ledf2+0x64>
 80014c4:	e7ea      	b.n	800149c <__ledf2+0x68>
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dd04      	ble.n	80014d4 <__ledf2+0xa0>
 80014ca:	4243      	negs	r3, r0
 80014cc:	4158      	adcs	r0, r3
 80014ce:	0040      	lsls	r0, r0, #1
 80014d0:	3801      	subs	r0, #1
 80014d2:	e7e9      	b.n	80014a8 <__ledf2+0x74>
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbeb      	blt.n	80014b0 <__ledf2+0x7c>
 80014d8:	454f      	cmp	r7, r9
 80014da:	d8df      	bhi.n	800149c <__ledf2+0x68>
 80014dc:	d006      	beq.n	80014ec <__ledf2+0xb8>
 80014de:	2000      	movs	r0, #0
 80014e0:	454f      	cmp	r7, r9
 80014e2:	d2e1      	bcs.n	80014a8 <__ledf2+0x74>
 80014e4:	2900      	cmp	r1, #0
 80014e6:	d0e5      	beq.n	80014b4 <__ledf2+0x80>
 80014e8:	0008      	movs	r0, r1
 80014ea:	e7dd      	b.n	80014a8 <__ledf2+0x74>
 80014ec:	45c4      	cmp	ip, r8
 80014ee:	d8d5      	bhi.n	800149c <__ledf2+0x68>
 80014f0:	2000      	movs	r0, #0
 80014f2:	45c4      	cmp	ip, r8
 80014f4:	d2d8      	bcs.n	80014a8 <__ledf2+0x74>
 80014f6:	e7f5      	b.n	80014e4 <__ledf2+0xb0>
 80014f8:	000007ff 	.word	0x000007ff

080014fc <__aeabi_dmul>:
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	4657      	mov	r7, sl
 8001500:	464e      	mov	r6, r9
 8001502:	4645      	mov	r5, r8
 8001504:	46de      	mov	lr, fp
 8001506:	b5e0      	push	{r5, r6, r7, lr}
 8001508:	4698      	mov	r8, r3
 800150a:	030c      	lsls	r4, r1, #12
 800150c:	004b      	lsls	r3, r1, #1
 800150e:	0006      	movs	r6, r0
 8001510:	4692      	mov	sl, r2
 8001512:	b087      	sub	sp, #28
 8001514:	0b24      	lsrs	r4, r4, #12
 8001516:	0d5b      	lsrs	r3, r3, #21
 8001518:	0fcf      	lsrs	r7, r1, #31
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <__aeabi_dmul+0x24>
 800151e:	e15c      	b.n	80017da <__aeabi_dmul+0x2de>
 8001520:	4ad9      	ldr	r2, [pc, #868]	; (8001888 <__aeabi_dmul+0x38c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d100      	bne.n	8001528 <__aeabi_dmul+0x2c>
 8001526:	e175      	b.n	8001814 <__aeabi_dmul+0x318>
 8001528:	0f42      	lsrs	r2, r0, #29
 800152a:	00e4      	lsls	r4, r4, #3
 800152c:	4314      	orrs	r4, r2
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	0412      	lsls	r2, r2, #16
 8001532:	4314      	orrs	r4, r2
 8001534:	4ad5      	ldr	r2, [pc, #852]	; (800188c <__aeabi_dmul+0x390>)
 8001536:	00c5      	lsls	r5, r0, #3
 8001538:	4694      	mov	ip, r2
 800153a:	4463      	add	r3, ip
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	4699      	mov	r9, r3
 8001542:	469b      	mov	fp, r3
 8001544:	4643      	mov	r3, r8
 8001546:	4642      	mov	r2, r8
 8001548:	031e      	lsls	r6, r3, #12
 800154a:	0fd2      	lsrs	r2, r2, #31
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4650      	mov	r0, sl
 8001550:	4690      	mov	r8, r2
 8001552:	0b36      	lsrs	r6, r6, #12
 8001554:	0d5b      	lsrs	r3, r3, #21
 8001556:	d100      	bne.n	800155a <__aeabi_dmul+0x5e>
 8001558:	e120      	b.n	800179c <__aeabi_dmul+0x2a0>
 800155a:	4acb      	ldr	r2, [pc, #812]	; (8001888 <__aeabi_dmul+0x38c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d100      	bne.n	8001562 <__aeabi_dmul+0x66>
 8001560:	e162      	b.n	8001828 <__aeabi_dmul+0x32c>
 8001562:	49ca      	ldr	r1, [pc, #808]	; (800188c <__aeabi_dmul+0x390>)
 8001564:	0f42      	lsrs	r2, r0, #29
 8001566:	468c      	mov	ip, r1
 8001568:	9900      	ldr	r1, [sp, #0]
 800156a:	4463      	add	r3, ip
 800156c:	00f6      	lsls	r6, r6, #3
 800156e:	468c      	mov	ip, r1
 8001570:	4316      	orrs	r6, r2
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	449c      	add	ip, r3
 8001576:	0412      	lsls	r2, r2, #16
 8001578:	4663      	mov	r3, ip
 800157a:	4316      	orrs	r6, r2
 800157c:	00c2      	lsls	r2, r0, #3
 800157e:	2000      	movs	r0, #0
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	9900      	ldr	r1, [sp, #0]
 8001584:	4643      	mov	r3, r8
 8001586:	3101      	adds	r1, #1
 8001588:	468c      	mov	ip, r1
 800158a:	4649      	mov	r1, r9
 800158c:	407b      	eors	r3, r7
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	290f      	cmp	r1, #15
 8001592:	d826      	bhi.n	80015e2 <__aeabi_dmul+0xe6>
 8001594:	4bbe      	ldr	r3, [pc, #760]	; (8001890 <__aeabi_dmul+0x394>)
 8001596:	0089      	lsls	r1, r1, #2
 8001598:	5859      	ldr	r1, [r3, r1]
 800159a:	468f      	mov	pc, r1
 800159c:	4643      	mov	r3, r8
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	0034      	movs	r4, r6
 80015a2:	0015      	movs	r5, r2
 80015a4:	4683      	mov	fp, r0
 80015a6:	465b      	mov	r3, fp
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d016      	beq.n	80015da <__aeabi_dmul+0xde>
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dmul+0xb6>
 80015b0:	e203      	b.n	80019ba <__aeabi_dmul+0x4be>
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dmul+0xbc>
 80015b6:	e0cd      	b.n	8001754 <__aeabi_dmul+0x258>
 80015b8:	2200      	movs	r2, #0
 80015ba:	2400      	movs	r4, #0
 80015bc:	2500      	movs	r5, #0
 80015be:	9b01      	ldr	r3, [sp, #4]
 80015c0:	0512      	lsls	r2, r2, #20
 80015c2:	4322      	orrs	r2, r4
 80015c4:	07db      	lsls	r3, r3, #31
 80015c6:	431a      	orrs	r2, r3
 80015c8:	0028      	movs	r0, r5
 80015ca:	0011      	movs	r1, r2
 80015cc:	b007      	add	sp, #28
 80015ce:	bcf0      	pop	{r4, r5, r6, r7}
 80015d0:	46bb      	mov	fp, r7
 80015d2:	46b2      	mov	sl, r6
 80015d4:	46a9      	mov	r9, r5
 80015d6:	46a0      	mov	r8, r4
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	2400      	movs	r4, #0
 80015dc:	2500      	movs	r5, #0
 80015de:	4aaa      	ldr	r2, [pc, #680]	; (8001888 <__aeabi_dmul+0x38c>)
 80015e0:	e7ed      	b.n	80015be <__aeabi_dmul+0xc2>
 80015e2:	0c28      	lsrs	r0, r5, #16
 80015e4:	042d      	lsls	r5, r5, #16
 80015e6:	0c2d      	lsrs	r5, r5, #16
 80015e8:	002b      	movs	r3, r5
 80015ea:	0c11      	lsrs	r1, r2, #16
 80015ec:	0412      	lsls	r2, r2, #16
 80015ee:	0c12      	lsrs	r2, r2, #16
 80015f0:	4353      	muls	r3, r2
 80015f2:	4698      	mov	r8, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	002f      	movs	r7, r5
 80015f8:	4343      	muls	r3, r0
 80015fa:	4699      	mov	r9, r3
 80015fc:	434f      	muls	r7, r1
 80015fe:	444f      	add	r7, r9
 8001600:	46bb      	mov	fp, r7
 8001602:	4647      	mov	r7, r8
 8001604:	000b      	movs	r3, r1
 8001606:	0c3f      	lsrs	r7, r7, #16
 8001608:	46ba      	mov	sl, r7
 800160a:	4343      	muls	r3, r0
 800160c:	44da      	add	sl, fp
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	45d1      	cmp	r9, sl
 8001612:	d904      	bls.n	800161e <__aeabi_dmul+0x122>
 8001614:	2780      	movs	r7, #128	; 0x80
 8001616:	027f      	lsls	r7, r7, #9
 8001618:	46b9      	mov	r9, r7
 800161a:	444b      	add	r3, r9
 800161c:	9302      	str	r3, [sp, #8]
 800161e:	4653      	mov	r3, sl
 8001620:	0c1b      	lsrs	r3, r3, #16
 8001622:	469b      	mov	fp, r3
 8001624:	4653      	mov	r3, sl
 8001626:	041f      	lsls	r7, r3, #16
 8001628:	4643      	mov	r3, r8
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	0c1b      	lsrs	r3, r3, #16
 800162e:	4698      	mov	r8, r3
 8001630:	003b      	movs	r3, r7
 8001632:	4443      	add	r3, r8
 8001634:	9304      	str	r3, [sp, #16]
 8001636:	0c33      	lsrs	r3, r6, #16
 8001638:	0436      	lsls	r6, r6, #16
 800163a:	0c36      	lsrs	r6, r6, #16
 800163c:	4698      	mov	r8, r3
 800163e:	0033      	movs	r3, r6
 8001640:	4343      	muls	r3, r0
 8001642:	4699      	mov	r9, r3
 8001644:	4643      	mov	r3, r8
 8001646:	4343      	muls	r3, r0
 8001648:	002f      	movs	r7, r5
 800164a:	469a      	mov	sl, r3
 800164c:	4643      	mov	r3, r8
 800164e:	4377      	muls	r7, r6
 8001650:	435d      	muls	r5, r3
 8001652:	0c38      	lsrs	r0, r7, #16
 8001654:	444d      	add	r5, r9
 8001656:	1945      	adds	r5, r0, r5
 8001658:	45a9      	cmp	r9, r5
 800165a:	d903      	bls.n	8001664 <__aeabi_dmul+0x168>
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	4699      	mov	r9, r3
 8001662:	44ca      	add	sl, r9
 8001664:	043f      	lsls	r7, r7, #16
 8001666:	0c28      	lsrs	r0, r5, #16
 8001668:	0c3f      	lsrs	r7, r7, #16
 800166a:	042d      	lsls	r5, r5, #16
 800166c:	19ed      	adds	r5, r5, r7
 800166e:	0c27      	lsrs	r7, r4, #16
 8001670:	0424      	lsls	r4, r4, #16
 8001672:	0c24      	lsrs	r4, r4, #16
 8001674:	0003      	movs	r3, r0
 8001676:	0020      	movs	r0, r4
 8001678:	4350      	muls	r0, r2
 800167a:	437a      	muls	r2, r7
 800167c:	4691      	mov	r9, r2
 800167e:	003a      	movs	r2, r7
 8001680:	4453      	add	r3, sl
 8001682:	9305      	str	r3, [sp, #20]
 8001684:	0c03      	lsrs	r3, r0, #16
 8001686:	469a      	mov	sl, r3
 8001688:	434a      	muls	r2, r1
 800168a:	4361      	muls	r1, r4
 800168c:	4449      	add	r1, r9
 800168e:	4451      	add	r1, sl
 8001690:	44ab      	add	fp, r5
 8001692:	4589      	cmp	r9, r1
 8001694:	d903      	bls.n	800169e <__aeabi_dmul+0x1a2>
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4699      	mov	r9, r3
 800169c:	444a      	add	r2, r9
 800169e:	0400      	lsls	r0, r0, #16
 80016a0:	0c0b      	lsrs	r3, r1, #16
 80016a2:	0c00      	lsrs	r0, r0, #16
 80016a4:	0409      	lsls	r1, r1, #16
 80016a6:	1809      	adds	r1, r1, r0
 80016a8:	0020      	movs	r0, r4
 80016aa:	4699      	mov	r9, r3
 80016ac:	4643      	mov	r3, r8
 80016ae:	4370      	muls	r0, r6
 80016b0:	435c      	muls	r4, r3
 80016b2:	437e      	muls	r6, r7
 80016b4:	435f      	muls	r7, r3
 80016b6:	0c03      	lsrs	r3, r0, #16
 80016b8:	4698      	mov	r8, r3
 80016ba:	19a4      	adds	r4, r4, r6
 80016bc:	4444      	add	r4, r8
 80016be:	444a      	add	r2, r9
 80016c0:	9703      	str	r7, [sp, #12]
 80016c2:	42a6      	cmp	r6, r4
 80016c4:	d904      	bls.n	80016d0 <__aeabi_dmul+0x1d4>
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	025b      	lsls	r3, r3, #9
 80016ca:	4698      	mov	r8, r3
 80016cc:	4447      	add	r7, r8
 80016ce:	9703      	str	r7, [sp, #12]
 80016d0:	0423      	lsls	r3, r4, #16
 80016d2:	9e02      	ldr	r6, [sp, #8]
 80016d4:	469a      	mov	sl, r3
 80016d6:	9b05      	ldr	r3, [sp, #20]
 80016d8:	445e      	add	r6, fp
 80016da:	4698      	mov	r8, r3
 80016dc:	42ae      	cmp	r6, r5
 80016de:	41ad      	sbcs	r5, r5
 80016e0:	1876      	adds	r6, r6, r1
 80016e2:	428e      	cmp	r6, r1
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	0400      	lsls	r0, r0, #16
 80016e8:	0c00      	lsrs	r0, r0, #16
 80016ea:	4450      	add	r0, sl
 80016ec:	4440      	add	r0, r8
 80016ee:	426d      	negs	r5, r5
 80016f0:	1947      	adds	r7, r0, r5
 80016f2:	46b8      	mov	r8, r7
 80016f4:	4693      	mov	fp, r2
 80016f6:	4249      	negs	r1, r1
 80016f8:	4689      	mov	r9, r1
 80016fa:	44c3      	add	fp, r8
 80016fc:	44d9      	add	r9, fp
 80016fe:	4298      	cmp	r0, r3
 8001700:	4180      	sbcs	r0, r0
 8001702:	45a8      	cmp	r8, r5
 8001704:	41ad      	sbcs	r5, r5
 8001706:	4593      	cmp	fp, r2
 8001708:	4192      	sbcs	r2, r2
 800170a:	4589      	cmp	r9, r1
 800170c:	4189      	sbcs	r1, r1
 800170e:	426d      	negs	r5, r5
 8001710:	4240      	negs	r0, r0
 8001712:	4328      	orrs	r0, r5
 8001714:	0c24      	lsrs	r4, r4, #16
 8001716:	4252      	negs	r2, r2
 8001718:	4249      	negs	r1, r1
 800171a:	430a      	orrs	r2, r1
 800171c:	9b03      	ldr	r3, [sp, #12]
 800171e:	1900      	adds	r0, r0, r4
 8001720:	1880      	adds	r0, r0, r2
 8001722:	18c7      	adds	r7, r0, r3
 8001724:	464b      	mov	r3, r9
 8001726:	0ddc      	lsrs	r4, r3, #23
 8001728:	9b04      	ldr	r3, [sp, #16]
 800172a:	0275      	lsls	r5, r6, #9
 800172c:	431d      	orrs	r5, r3
 800172e:	1e6a      	subs	r2, r5, #1
 8001730:	4195      	sbcs	r5, r2
 8001732:	464b      	mov	r3, r9
 8001734:	0df6      	lsrs	r6, r6, #23
 8001736:	027f      	lsls	r7, r7, #9
 8001738:	4335      	orrs	r5, r6
 800173a:	025a      	lsls	r2, r3, #9
 800173c:	433c      	orrs	r4, r7
 800173e:	4315      	orrs	r5, r2
 8001740:	01fb      	lsls	r3, r7, #7
 8001742:	d400      	bmi.n	8001746 <__aeabi_dmul+0x24a>
 8001744:	e11c      	b.n	8001980 <__aeabi_dmul+0x484>
 8001746:	2101      	movs	r1, #1
 8001748:	086a      	lsrs	r2, r5, #1
 800174a:	400d      	ands	r5, r1
 800174c:	4315      	orrs	r5, r2
 800174e:	07e2      	lsls	r2, r4, #31
 8001750:	4315      	orrs	r5, r2
 8001752:	0864      	lsrs	r4, r4, #1
 8001754:	494f      	ldr	r1, [pc, #316]	; (8001894 <__aeabi_dmul+0x398>)
 8001756:	4461      	add	r1, ip
 8001758:	2900      	cmp	r1, #0
 800175a:	dc00      	bgt.n	800175e <__aeabi_dmul+0x262>
 800175c:	e0b0      	b.n	80018c0 <__aeabi_dmul+0x3c4>
 800175e:	076b      	lsls	r3, r5, #29
 8001760:	d009      	beq.n	8001776 <__aeabi_dmul+0x27a>
 8001762:	220f      	movs	r2, #15
 8001764:	402a      	ands	r2, r5
 8001766:	2a04      	cmp	r2, #4
 8001768:	d005      	beq.n	8001776 <__aeabi_dmul+0x27a>
 800176a:	1d2a      	adds	r2, r5, #4
 800176c:	42aa      	cmp	r2, r5
 800176e:	41ad      	sbcs	r5, r5
 8001770:	426d      	negs	r5, r5
 8001772:	1964      	adds	r4, r4, r5
 8001774:	0015      	movs	r5, r2
 8001776:	01e3      	lsls	r3, r4, #7
 8001778:	d504      	bpl.n	8001784 <__aeabi_dmul+0x288>
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	4a46      	ldr	r2, [pc, #280]	; (8001898 <__aeabi_dmul+0x39c>)
 800177e:	00c9      	lsls	r1, r1, #3
 8001780:	4014      	ands	r4, r2
 8001782:	4461      	add	r1, ip
 8001784:	4a45      	ldr	r2, [pc, #276]	; (800189c <__aeabi_dmul+0x3a0>)
 8001786:	4291      	cmp	r1, r2
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x290>
 800178a:	e726      	b.n	80015da <__aeabi_dmul+0xde>
 800178c:	0762      	lsls	r2, r4, #29
 800178e:	08ed      	lsrs	r5, r5, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	0549      	lsls	r1, r1, #21
 8001794:	4315      	orrs	r5, r2
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d4a      	lsrs	r2, r1, #21
 800179a:	e710      	b.n	80015be <__aeabi_dmul+0xc2>
 800179c:	4652      	mov	r2, sl
 800179e:	4332      	orrs	r2, r6
 80017a0:	d100      	bne.n	80017a4 <__aeabi_dmul+0x2a8>
 80017a2:	e07f      	b.n	80018a4 <__aeabi_dmul+0x3a8>
 80017a4:	2e00      	cmp	r6, #0
 80017a6:	d100      	bne.n	80017aa <__aeabi_dmul+0x2ae>
 80017a8:	e0dc      	b.n	8001964 <__aeabi_dmul+0x468>
 80017aa:	0030      	movs	r0, r6
 80017ac:	f000 fd4e 	bl	800224c <__clzsi2>
 80017b0:	0002      	movs	r2, r0
 80017b2:	3a0b      	subs	r2, #11
 80017b4:	231d      	movs	r3, #29
 80017b6:	0001      	movs	r1, r0
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	4652      	mov	r2, sl
 80017bc:	3908      	subs	r1, #8
 80017be:	40da      	lsrs	r2, r3
 80017c0:	408e      	lsls	r6, r1
 80017c2:	4316      	orrs	r6, r2
 80017c4:	4652      	mov	r2, sl
 80017c6:	408a      	lsls	r2, r1
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	4935      	ldr	r1, [pc, #212]	; (80018a0 <__aeabi_dmul+0x3a4>)
 80017cc:	1a18      	subs	r0, r3, r0
 80017ce:	0003      	movs	r3, r0
 80017d0:	468c      	mov	ip, r1
 80017d2:	4463      	add	r3, ip
 80017d4:	2000      	movs	r0, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	e6d3      	b.n	8001582 <__aeabi_dmul+0x86>
 80017da:	0025      	movs	r5, r4
 80017dc:	4305      	orrs	r5, r0
 80017de:	d04a      	beq.n	8001876 <__aeabi_dmul+0x37a>
 80017e0:	2c00      	cmp	r4, #0
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dmul+0x2ea>
 80017e4:	e0b0      	b.n	8001948 <__aeabi_dmul+0x44c>
 80017e6:	0020      	movs	r0, r4
 80017e8:	f000 fd30 	bl	800224c <__clzsi2>
 80017ec:	0001      	movs	r1, r0
 80017ee:	0002      	movs	r2, r0
 80017f0:	390b      	subs	r1, #11
 80017f2:	231d      	movs	r3, #29
 80017f4:	0010      	movs	r0, r2
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	0031      	movs	r1, r6
 80017fa:	0035      	movs	r5, r6
 80017fc:	3808      	subs	r0, #8
 80017fe:	4084      	lsls	r4, r0
 8001800:	40d9      	lsrs	r1, r3
 8001802:	4085      	lsls	r5, r0
 8001804:	430c      	orrs	r4, r1
 8001806:	4826      	ldr	r0, [pc, #152]	; (80018a0 <__aeabi_dmul+0x3a4>)
 8001808:	1a83      	subs	r3, r0, r2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	4699      	mov	r9, r3
 8001810:	469b      	mov	fp, r3
 8001812:	e697      	b.n	8001544 <__aeabi_dmul+0x48>
 8001814:	0005      	movs	r5, r0
 8001816:	4325      	orrs	r5, r4
 8001818:	d126      	bne.n	8001868 <__aeabi_dmul+0x36c>
 800181a:	2208      	movs	r2, #8
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	2400      	movs	r4, #0
 8001822:	4691      	mov	r9, r2
 8001824:	469b      	mov	fp, r3
 8001826:	e68d      	b.n	8001544 <__aeabi_dmul+0x48>
 8001828:	4652      	mov	r2, sl
 800182a:	9b00      	ldr	r3, [sp, #0]
 800182c:	4332      	orrs	r2, r6
 800182e:	d110      	bne.n	8001852 <__aeabi_dmul+0x356>
 8001830:	4915      	ldr	r1, [pc, #84]	; (8001888 <__aeabi_dmul+0x38c>)
 8001832:	2600      	movs	r6, #0
 8001834:	468c      	mov	ip, r1
 8001836:	4463      	add	r3, ip
 8001838:	4649      	mov	r1, r9
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2302      	movs	r3, #2
 800183e:	4319      	orrs	r1, r3
 8001840:	4689      	mov	r9, r1
 8001842:	2002      	movs	r0, #2
 8001844:	e69d      	b.n	8001582 <__aeabi_dmul+0x86>
 8001846:	465b      	mov	r3, fp
 8001848:	9701      	str	r7, [sp, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d000      	beq.n	8001850 <__aeabi_dmul+0x354>
 800184e:	e6ad      	b.n	80015ac <__aeabi_dmul+0xb0>
 8001850:	e6c3      	b.n	80015da <__aeabi_dmul+0xde>
 8001852:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <__aeabi_dmul+0x38c>)
 8001854:	2003      	movs	r0, #3
 8001856:	4694      	mov	ip, r2
 8001858:	4463      	add	r3, ip
 800185a:	464a      	mov	r2, r9
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2303      	movs	r3, #3
 8001860:	431a      	orrs	r2, r3
 8001862:	4691      	mov	r9, r2
 8001864:	4652      	mov	r2, sl
 8001866:	e68c      	b.n	8001582 <__aeabi_dmul+0x86>
 8001868:	220c      	movs	r2, #12
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2303      	movs	r3, #3
 800186e:	0005      	movs	r5, r0
 8001870:	4691      	mov	r9, r2
 8001872:	469b      	mov	fp, r3
 8001874:	e666      	b.n	8001544 <__aeabi_dmul+0x48>
 8001876:	2304      	movs	r3, #4
 8001878:	4699      	mov	r9, r3
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	2400      	movs	r4, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e65e      	b.n	8001544 <__aeabi_dmul+0x48>
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	000007ff 	.word	0x000007ff
 800188c:	fffffc01 	.word	0xfffffc01
 8001890:	0800c470 	.word	0x0800c470
 8001894:	000003ff 	.word	0x000003ff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	fffffc0d 	.word	0xfffffc0d
 80018a4:	4649      	mov	r1, r9
 80018a6:	2301      	movs	r3, #1
 80018a8:	4319      	orrs	r1, r3
 80018aa:	4689      	mov	r9, r1
 80018ac:	2600      	movs	r6, #0
 80018ae:	2001      	movs	r0, #1
 80018b0:	e667      	b.n	8001582 <__aeabi_dmul+0x86>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	2500      	movs	r5, #0
 80018b8:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <__aeabi_dmul+0x4cc>)
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	e67e      	b.n	80015be <__aeabi_dmul+0xc2>
 80018c0:	2001      	movs	r0, #1
 80018c2:	1a40      	subs	r0, r0, r1
 80018c4:	2838      	cmp	r0, #56	; 0x38
 80018c6:	dd00      	ble.n	80018ca <__aeabi_dmul+0x3ce>
 80018c8:	e676      	b.n	80015b8 <__aeabi_dmul+0xbc>
 80018ca:	281f      	cmp	r0, #31
 80018cc:	dd5b      	ble.n	8001986 <__aeabi_dmul+0x48a>
 80018ce:	221f      	movs	r2, #31
 80018d0:	0023      	movs	r3, r4
 80018d2:	4252      	negs	r2, r2
 80018d4:	1a51      	subs	r1, r2, r1
 80018d6:	40cb      	lsrs	r3, r1
 80018d8:	0019      	movs	r1, r3
 80018da:	2820      	cmp	r0, #32
 80018dc:	d003      	beq.n	80018e6 <__aeabi_dmul+0x3ea>
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <__aeabi_dmul+0x4d0>)
 80018e0:	4462      	add	r2, ip
 80018e2:	4094      	lsls	r4, r2
 80018e4:	4325      	orrs	r5, r4
 80018e6:	1e6a      	subs	r2, r5, #1
 80018e8:	4195      	sbcs	r5, r2
 80018ea:	002a      	movs	r2, r5
 80018ec:	430a      	orrs	r2, r1
 80018ee:	2107      	movs	r1, #7
 80018f0:	000d      	movs	r5, r1
 80018f2:	2400      	movs	r4, #0
 80018f4:	4015      	ands	r5, r2
 80018f6:	4211      	tst	r1, r2
 80018f8:	d05b      	beq.n	80019b2 <__aeabi_dmul+0x4b6>
 80018fa:	210f      	movs	r1, #15
 80018fc:	2400      	movs	r4, #0
 80018fe:	4011      	ands	r1, r2
 8001900:	2904      	cmp	r1, #4
 8001902:	d053      	beq.n	80019ac <__aeabi_dmul+0x4b0>
 8001904:	1d11      	adds	r1, r2, #4
 8001906:	4291      	cmp	r1, r2
 8001908:	4192      	sbcs	r2, r2
 800190a:	4252      	negs	r2, r2
 800190c:	18a4      	adds	r4, r4, r2
 800190e:	000a      	movs	r2, r1
 8001910:	0223      	lsls	r3, r4, #8
 8001912:	d54b      	bpl.n	80019ac <__aeabi_dmul+0x4b0>
 8001914:	2201      	movs	r2, #1
 8001916:	2400      	movs	r4, #0
 8001918:	2500      	movs	r5, #0
 800191a:	e650      	b.n	80015be <__aeabi_dmul+0xc2>
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	031b      	lsls	r3, r3, #12
 8001920:	421c      	tst	r4, r3
 8001922:	d009      	beq.n	8001938 <__aeabi_dmul+0x43c>
 8001924:	421e      	tst	r6, r3
 8001926:	d107      	bne.n	8001938 <__aeabi_dmul+0x43c>
 8001928:	4333      	orrs	r3, r6
 800192a:	031c      	lsls	r4, r3, #12
 800192c:	4643      	mov	r3, r8
 800192e:	0015      	movs	r5, r2
 8001930:	0b24      	lsrs	r4, r4, #12
 8001932:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <__aeabi_dmul+0x4cc>)
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	e642      	b.n	80015be <__aeabi_dmul+0xc2>
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4314      	orrs	r4, r2
 800193e:	0324      	lsls	r4, r4, #12
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <__aeabi_dmul+0x4cc>)
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	9701      	str	r7, [sp, #4]
 8001946:	e63a      	b.n	80015be <__aeabi_dmul+0xc2>
 8001948:	f000 fc80 	bl	800224c <__clzsi2>
 800194c:	0001      	movs	r1, r0
 800194e:	0002      	movs	r2, r0
 8001950:	3115      	adds	r1, #21
 8001952:	3220      	adds	r2, #32
 8001954:	291c      	cmp	r1, #28
 8001956:	dc00      	bgt.n	800195a <__aeabi_dmul+0x45e>
 8001958:	e74b      	b.n	80017f2 <__aeabi_dmul+0x2f6>
 800195a:	0034      	movs	r4, r6
 800195c:	3808      	subs	r0, #8
 800195e:	2500      	movs	r5, #0
 8001960:	4084      	lsls	r4, r0
 8001962:	e750      	b.n	8001806 <__aeabi_dmul+0x30a>
 8001964:	f000 fc72 	bl	800224c <__clzsi2>
 8001968:	0003      	movs	r3, r0
 800196a:	001a      	movs	r2, r3
 800196c:	3215      	adds	r2, #21
 800196e:	3020      	adds	r0, #32
 8001970:	2a1c      	cmp	r2, #28
 8001972:	dc00      	bgt.n	8001976 <__aeabi_dmul+0x47a>
 8001974:	e71e      	b.n	80017b4 <__aeabi_dmul+0x2b8>
 8001976:	4656      	mov	r6, sl
 8001978:	3b08      	subs	r3, #8
 800197a:	2200      	movs	r2, #0
 800197c:	409e      	lsls	r6, r3
 800197e:	e723      	b.n	80017c8 <__aeabi_dmul+0x2cc>
 8001980:	9b00      	ldr	r3, [sp, #0]
 8001982:	469c      	mov	ip, r3
 8001984:	e6e6      	b.n	8001754 <__aeabi_dmul+0x258>
 8001986:	4912      	ldr	r1, [pc, #72]	; (80019d0 <__aeabi_dmul+0x4d4>)
 8001988:	0022      	movs	r2, r4
 800198a:	4461      	add	r1, ip
 800198c:	002e      	movs	r6, r5
 800198e:	408d      	lsls	r5, r1
 8001990:	408a      	lsls	r2, r1
 8001992:	40c6      	lsrs	r6, r0
 8001994:	1e69      	subs	r1, r5, #1
 8001996:	418d      	sbcs	r5, r1
 8001998:	4332      	orrs	r2, r6
 800199a:	432a      	orrs	r2, r5
 800199c:	40c4      	lsrs	r4, r0
 800199e:	0753      	lsls	r3, r2, #29
 80019a0:	d0b6      	beq.n	8001910 <__aeabi_dmul+0x414>
 80019a2:	210f      	movs	r1, #15
 80019a4:	4011      	ands	r1, r2
 80019a6:	2904      	cmp	r1, #4
 80019a8:	d1ac      	bne.n	8001904 <__aeabi_dmul+0x408>
 80019aa:	e7b1      	b.n	8001910 <__aeabi_dmul+0x414>
 80019ac:	0765      	lsls	r5, r4, #29
 80019ae:	0264      	lsls	r4, r4, #9
 80019b0:	0b24      	lsrs	r4, r4, #12
 80019b2:	08d2      	lsrs	r2, r2, #3
 80019b4:	4315      	orrs	r5, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	e601      	b.n	80015be <__aeabi_dmul+0xc2>
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	0312      	lsls	r2, r2, #12
 80019be:	4314      	orrs	r4, r2
 80019c0:	0324      	lsls	r4, r4, #12
 80019c2:	4a01      	ldr	r2, [pc, #4]	; (80019c8 <__aeabi_dmul+0x4cc>)
 80019c4:	0b24      	lsrs	r4, r4, #12
 80019c6:	e5fa      	b.n	80015be <__aeabi_dmul+0xc2>
 80019c8:	000007ff 	.word	0x000007ff
 80019cc:	0000043e 	.word	0x0000043e
 80019d0:	0000041e 	.word	0x0000041e

080019d4 <__aeabi_dsub>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	4657      	mov	r7, sl
 80019d8:	464e      	mov	r6, r9
 80019da:	4645      	mov	r5, r8
 80019dc:	46de      	mov	lr, fp
 80019de:	b5e0      	push	{r5, r6, r7, lr}
 80019e0:	001e      	movs	r6, r3
 80019e2:	0017      	movs	r7, r2
 80019e4:	004a      	lsls	r2, r1, #1
 80019e6:	030b      	lsls	r3, r1, #12
 80019e8:	0d52      	lsrs	r2, r2, #21
 80019ea:	0a5b      	lsrs	r3, r3, #9
 80019ec:	4690      	mov	r8, r2
 80019ee:	0f42      	lsrs	r2, r0, #29
 80019f0:	431a      	orrs	r2, r3
 80019f2:	0fcd      	lsrs	r5, r1, #31
 80019f4:	4ccd      	ldr	r4, [pc, #820]	; (8001d2c <__aeabi_dsub+0x358>)
 80019f6:	0331      	lsls	r1, r6, #12
 80019f8:	00c3      	lsls	r3, r0, #3
 80019fa:	4694      	mov	ip, r2
 80019fc:	0070      	lsls	r0, r6, #1
 80019fe:	0f7a      	lsrs	r2, r7, #29
 8001a00:	0a49      	lsrs	r1, r1, #9
 8001a02:	00ff      	lsls	r7, r7, #3
 8001a04:	469a      	mov	sl, r3
 8001a06:	46b9      	mov	r9, r7
 8001a08:	0d40      	lsrs	r0, r0, #21
 8001a0a:	0ff6      	lsrs	r6, r6, #31
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	42a0      	cmp	r0, r4
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x40>
 8001a12:	e0b1      	b.n	8001b78 <__aeabi_dsub+0x1a4>
 8001a14:	2201      	movs	r2, #1
 8001a16:	4056      	eors	r6, r2
 8001a18:	46b3      	mov	fp, r6
 8001a1a:	42b5      	cmp	r5, r6
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x4c>
 8001a1e:	e088      	b.n	8001b32 <__aeabi_dsub+0x15e>
 8001a20:	4642      	mov	r2, r8
 8001a22:	1a12      	subs	r2, r2, r0
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_dsub+0x56>
 8001a28:	e0ae      	b.n	8001b88 <__aeabi_dsub+0x1b4>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x5c>
 8001a2e:	e0c1      	b.n	8001bb4 <__aeabi_dsub+0x1e0>
 8001a30:	48be      	ldr	r0, [pc, #760]	; (8001d2c <__aeabi_dsub+0x358>)
 8001a32:	4580      	cmp	r8, r0
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dsub+0x64>
 8001a36:	e151      	b.n	8001cdc <__aeabi_dsub+0x308>
 8001a38:	2080      	movs	r0, #128	; 0x80
 8001a3a:	0400      	lsls	r0, r0, #16
 8001a3c:	4301      	orrs	r1, r0
 8001a3e:	2a38      	cmp	r2, #56	; 0x38
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dsub+0x70>
 8001a42:	e17b      	b.n	8001d3c <__aeabi_dsub+0x368>
 8001a44:	2a1f      	cmp	r2, #31
 8001a46:	dd00      	ble.n	8001a4a <__aeabi_dsub+0x76>
 8001a48:	e1ee      	b.n	8001e28 <__aeabi_dsub+0x454>
 8001a4a:	2020      	movs	r0, #32
 8001a4c:	003e      	movs	r6, r7
 8001a4e:	1a80      	subs	r0, r0, r2
 8001a50:	000c      	movs	r4, r1
 8001a52:	40d6      	lsrs	r6, r2
 8001a54:	40d1      	lsrs	r1, r2
 8001a56:	4087      	lsls	r7, r0
 8001a58:	4662      	mov	r2, ip
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	1a52      	subs	r2, r2, r1
 8001a5e:	1e78      	subs	r0, r7, #1
 8001a60:	4187      	sbcs	r7, r0
 8001a62:	4694      	mov	ip, r2
 8001a64:	4334      	orrs	r4, r6
 8001a66:	4327      	orrs	r7, r4
 8001a68:	1bdc      	subs	r4, r3, r7
 8001a6a:	42a3      	cmp	r3, r4
 8001a6c:	419b      	sbcs	r3, r3
 8001a6e:	4662      	mov	r2, ip
 8001a70:	425b      	negs	r3, r3
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	4699      	mov	r9, r3
 8001a76:	464b      	mov	r3, r9
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	d400      	bmi.n	8001a7e <__aeabi_dsub+0xaa>
 8001a7c:	e118      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001a7e:	464b      	mov	r3, r9
 8001a80:	0258      	lsls	r0, r3, #9
 8001a82:	0a43      	lsrs	r3, r0, #9
 8001a84:	4699      	mov	r9, r3
 8001a86:	464b      	mov	r3, r9
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dsub+0xba>
 8001a8c:	e137      	b.n	8001cfe <__aeabi_dsub+0x32a>
 8001a8e:	4648      	mov	r0, r9
 8001a90:	f000 fbdc 	bl	800224c <__clzsi2>
 8001a94:	0001      	movs	r1, r0
 8001a96:	3908      	subs	r1, #8
 8001a98:	2320      	movs	r3, #32
 8001a9a:	0022      	movs	r2, r4
 8001a9c:	4648      	mov	r0, r9
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	40da      	lsrs	r2, r3
 8001aa2:	4088      	lsls	r0, r1
 8001aa4:	408c      	lsls	r4, r1
 8001aa6:	4643      	mov	r3, r8
 8001aa8:	4310      	orrs	r0, r2
 8001aaa:	4588      	cmp	r8, r1
 8001aac:	dd00      	ble.n	8001ab0 <__aeabi_dsub+0xdc>
 8001aae:	e136      	b.n	8001d1e <__aeabi_dsub+0x34a>
 8001ab0:	1ac9      	subs	r1, r1, r3
 8001ab2:	1c4b      	adds	r3, r1, #1
 8001ab4:	2b1f      	cmp	r3, #31
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dsub+0xe6>
 8001ab8:	e0ea      	b.n	8001c90 <__aeabi_dsub+0x2bc>
 8001aba:	2220      	movs	r2, #32
 8001abc:	0026      	movs	r6, r4
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	4094      	lsls	r4, r2
 8001ac4:	40de      	lsrs	r6, r3
 8001ac6:	40d8      	lsrs	r0, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4091      	lsls	r1, r2
 8001acc:	1e62      	subs	r2, r4, #1
 8001ace:	4194      	sbcs	r4, r2
 8001ad0:	4681      	mov	r9, r0
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	4331      	orrs	r1, r6
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d009      	beq.n	8001af0 <__aeabi_dsub+0x11c>
 8001adc:	230f      	movs	r3, #15
 8001ade:	4023      	ands	r3, r4
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d005      	beq.n	8001af0 <__aeabi_dsub+0x11c>
 8001ae4:	1d23      	adds	r3, r4, #4
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	41a4      	sbcs	r4, r4
 8001aea:	4264      	negs	r4, r4
 8001aec:	44a1      	add	r9, r4
 8001aee:	001c      	movs	r4, r3
 8001af0:	464b      	mov	r3, r9
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	d400      	bmi.n	8001af8 <__aeabi_dsub+0x124>
 8001af6:	e0de      	b.n	8001cb6 <__aeabi_dsub+0x2e2>
 8001af8:	4641      	mov	r1, r8
 8001afa:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <__aeabi_dsub+0x358>)
 8001afc:	3101      	adds	r1, #1
 8001afe:	4299      	cmp	r1, r3
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x130>
 8001b02:	e0e7      	b.n	8001cd4 <__aeabi_dsub+0x300>
 8001b04:	464b      	mov	r3, r9
 8001b06:	488a      	ldr	r0, [pc, #552]	; (8001d30 <__aeabi_dsub+0x35c>)
 8001b08:	08e4      	lsrs	r4, r4, #3
 8001b0a:	4003      	ands	r3, r0
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	0549      	lsls	r1, r1, #21
 8001b10:	075b      	lsls	r3, r3, #29
 8001b12:	0240      	lsls	r0, r0, #9
 8001b14:	4323      	orrs	r3, r4
 8001b16:	0d4a      	lsrs	r2, r1, #21
 8001b18:	0b04      	lsrs	r4, r0, #12
 8001b1a:	0512      	lsls	r2, r2, #20
 8001b1c:	07ed      	lsls	r5, r5, #31
 8001b1e:	4322      	orrs	r2, r4
 8001b20:	432a      	orrs	r2, r5
 8001b22:	0018      	movs	r0, r3
 8001b24:	0011      	movs	r1, r2
 8001b26:	bcf0      	pop	{r4, r5, r6, r7}
 8001b28:	46bb      	mov	fp, r7
 8001b2a:	46b2      	mov	sl, r6
 8001b2c:	46a9      	mov	r9, r5
 8001b2e:	46a0      	mov	r8, r4
 8001b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b32:	4642      	mov	r2, r8
 8001b34:	1a12      	subs	r2, r2, r0
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	dd52      	ble.n	8001be0 <__aeabi_dsub+0x20c>
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dsub+0x16c>
 8001b3e:	e09c      	b.n	8001c7a <__aeabi_dsub+0x2a6>
 8001b40:	45a0      	cmp	r8, r4
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0x172>
 8001b44:	e0ca      	b.n	8001cdc <__aeabi_dsub+0x308>
 8001b46:	2080      	movs	r0, #128	; 0x80
 8001b48:	0400      	lsls	r0, r0, #16
 8001b4a:	4301      	orrs	r1, r0
 8001b4c:	2a38      	cmp	r2, #56	; 0x38
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dsub+0x17e>
 8001b50:	e149      	b.n	8001de6 <__aeabi_dsub+0x412>
 8001b52:	2a1f      	cmp	r2, #31
 8001b54:	dc00      	bgt.n	8001b58 <__aeabi_dsub+0x184>
 8001b56:	e197      	b.n	8001e88 <__aeabi_dsub+0x4b4>
 8001b58:	0010      	movs	r0, r2
 8001b5a:	000e      	movs	r6, r1
 8001b5c:	3820      	subs	r0, #32
 8001b5e:	40c6      	lsrs	r6, r0
 8001b60:	2a20      	cmp	r2, #32
 8001b62:	d004      	beq.n	8001b6e <__aeabi_dsub+0x19a>
 8001b64:	2040      	movs	r0, #64	; 0x40
 8001b66:	1a82      	subs	r2, r0, r2
 8001b68:	4091      	lsls	r1, r2
 8001b6a:	430f      	orrs	r7, r1
 8001b6c:	46b9      	mov	r9, r7
 8001b6e:	464c      	mov	r4, r9
 8001b70:	1e62      	subs	r2, r4, #1
 8001b72:	4194      	sbcs	r4, r2
 8001b74:	4334      	orrs	r4, r6
 8001b76:	e13a      	b.n	8001dee <__aeabi_dsub+0x41a>
 8001b78:	000a      	movs	r2, r1
 8001b7a:	433a      	orrs	r2, r7
 8001b7c:	d028      	beq.n	8001bd0 <__aeabi_dsub+0x1fc>
 8001b7e:	46b3      	mov	fp, r6
 8001b80:	42b5      	cmp	r5, r6
 8001b82:	d02b      	beq.n	8001bdc <__aeabi_dsub+0x208>
 8001b84:	4a6b      	ldr	r2, [pc, #428]	; (8001d34 <__aeabi_dsub+0x360>)
 8001b86:	4442      	add	r2, r8
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d05d      	beq.n	8001c48 <__aeabi_dsub+0x274>
 8001b8c:	4642      	mov	r2, r8
 8001b8e:	4644      	mov	r4, r8
 8001b90:	1a82      	subs	r2, r0, r2
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d000      	beq.n	8001b98 <__aeabi_dsub+0x1c4>
 8001b96:	e0f5      	b.n	8001d84 <__aeabi_dsub+0x3b0>
 8001b98:	4665      	mov	r5, ip
 8001b9a:	431d      	orrs	r5, r3
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dsub+0x1cc>
 8001b9e:	e19c      	b.n	8001eda <__aeabi_dsub+0x506>
 8001ba0:	1e55      	subs	r5, r2, #1
 8001ba2:	2a01      	cmp	r2, #1
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x1d4>
 8001ba6:	e1fb      	b.n	8001fa0 <__aeabi_dsub+0x5cc>
 8001ba8:	4c60      	ldr	r4, [pc, #384]	; (8001d2c <__aeabi_dsub+0x358>)
 8001baa:	42a2      	cmp	r2, r4
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dsub+0x1dc>
 8001bae:	e1bd      	b.n	8001f2c <__aeabi_dsub+0x558>
 8001bb0:	002a      	movs	r2, r5
 8001bb2:	e0f0      	b.n	8001d96 <__aeabi_dsub+0x3c2>
 8001bb4:	0008      	movs	r0, r1
 8001bb6:	4338      	orrs	r0, r7
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x1e8>
 8001bba:	e0c3      	b.n	8001d44 <__aeabi_dsub+0x370>
 8001bbc:	1e50      	subs	r0, r2, #1
 8001bbe:	2a01      	cmp	r2, #1
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x1f0>
 8001bc2:	e1a8      	b.n	8001f16 <__aeabi_dsub+0x542>
 8001bc4:	4c59      	ldr	r4, [pc, #356]	; (8001d2c <__aeabi_dsub+0x358>)
 8001bc6:	42a2      	cmp	r2, r4
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x1f8>
 8001bca:	e087      	b.n	8001cdc <__aeabi_dsub+0x308>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	e736      	b.n	8001a3e <__aeabi_dsub+0x6a>
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4056      	eors	r6, r2
 8001bd4:	46b3      	mov	fp, r6
 8001bd6:	42b5      	cmp	r5, r6
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_dsub+0x208>
 8001bda:	e721      	b.n	8001a20 <__aeabi_dsub+0x4c>
 8001bdc:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <__aeabi_dsub+0x360>)
 8001bde:	4442      	add	r2, r8
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x212>
 8001be4:	e0b5      	b.n	8001d52 <__aeabi_dsub+0x37e>
 8001be6:	4642      	mov	r2, r8
 8001be8:	4644      	mov	r4, r8
 8001bea:	1a82      	subs	r2, r0, r2
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x21e>
 8001bf0:	e138      	b.n	8001e64 <__aeabi_dsub+0x490>
 8001bf2:	4e4e      	ldr	r6, [pc, #312]	; (8001d2c <__aeabi_dsub+0x358>)
 8001bf4:	42b0      	cmp	r0, r6
 8001bf6:	d100      	bne.n	8001bfa <__aeabi_dsub+0x226>
 8001bf8:	e1de      	b.n	8001fb8 <__aeabi_dsub+0x5e4>
 8001bfa:	2680      	movs	r6, #128	; 0x80
 8001bfc:	4664      	mov	r4, ip
 8001bfe:	0436      	lsls	r6, r6, #16
 8001c00:	4334      	orrs	r4, r6
 8001c02:	46a4      	mov	ip, r4
 8001c04:	2a38      	cmp	r2, #56	; 0x38
 8001c06:	dd00      	ble.n	8001c0a <__aeabi_dsub+0x236>
 8001c08:	e196      	b.n	8001f38 <__aeabi_dsub+0x564>
 8001c0a:	2a1f      	cmp	r2, #31
 8001c0c:	dd00      	ble.n	8001c10 <__aeabi_dsub+0x23c>
 8001c0e:	e224      	b.n	800205a <__aeabi_dsub+0x686>
 8001c10:	2620      	movs	r6, #32
 8001c12:	1ab4      	subs	r4, r6, r2
 8001c14:	46a2      	mov	sl, r4
 8001c16:	4664      	mov	r4, ip
 8001c18:	4656      	mov	r6, sl
 8001c1a:	40b4      	lsls	r4, r6
 8001c1c:	46a1      	mov	r9, r4
 8001c1e:	001c      	movs	r4, r3
 8001c20:	464e      	mov	r6, r9
 8001c22:	40d4      	lsrs	r4, r2
 8001c24:	4326      	orrs	r6, r4
 8001c26:	0034      	movs	r4, r6
 8001c28:	4656      	mov	r6, sl
 8001c2a:	40b3      	lsls	r3, r6
 8001c2c:	1e5e      	subs	r6, r3, #1
 8001c2e:	41b3      	sbcs	r3, r6
 8001c30:	431c      	orrs	r4, r3
 8001c32:	4663      	mov	r3, ip
 8001c34:	40d3      	lsrs	r3, r2
 8001c36:	18c9      	adds	r1, r1, r3
 8001c38:	19e4      	adds	r4, r4, r7
 8001c3a:	42bc      	cmp	r4, r7
 8001c3c:	41bf      	sbcs	r7, r7
 8001c3e:	427f      	negs	r7, r7
 8001c40:	46b9      	mov	r9, r7
 8001c42:	4680      	mov	r8, r0
 8001c44:	4489      	add	r9, r1
 8001c46:	e0d8      	b.n	8001dfa <__aeabi_dsub+0x426>
 8001c48:	4640      	mov	r0, r8
 8001c4a:	4c3b      	ldr	r4, [pc, #236]	; (8001d38 <__aeabi_dsub+0x364>)
 8001c4c:	3001      	adds	r0, #1
 8001c4e:	4220      	tst	r0, r4
 8001c50:	d000      	beq.n	8001c54 <__aeabi_dsub+0x280>
 8001c52:	e0b4      	b.n	8001dbe <__aeabi_dsub+0x3ea>
 8001c54:	4640      	mov	r0, r8
 8001c56:	2800      	cmp	r0, #0
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x288>
 8001c5a:	e144      	b.n	8001ee6 <__aeabi_dsub+0x512>
 8001c5c:	4660      	mov	r0, ip
 8001c5e:	4318      	orrs	r0, r3
 8001c60:	d100      	bne.n	8001c64 <__aeabi_dsub+0x290>
 8001c62:	e190      	b.n	8001f86 <__aeabi_dsub+0x5b2>
 8001c64:	0008      	movs	r0, r1
 8001c66:	4338      	orrs	r0, r7
 8001c68:	d000      	beq.n	8001c6c <__aeabi_dsub+0x298>
 8001c6a:	e1aa      	b.n	8001fc2 <__aeabi_dsub+0x5ee>
 8001c6c:	4661      	mov	r1, ip
 8001c6e:	08db      	lsrs	r3, r3, #3
 8001c70:	0749      	lsls	r1, r1, #29
 8001c72:	430b      	orrs	r3, r1
 8001c74:	4661      	mov	r1, ip
 8001c76:	08cc      	lsrs	r4, r1, #3
 8001c78:	e027      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001c7a:	0008      	movs	r0, r1
 8001c7c:	4338      	orrs	r0, r7
 8001c7e:	d061      	beq.n	8001d44 <__aeabi_dsub+0x370>
 8001c80:	1e50      	subs	r0, r2, #1
 8001c82:	2a01      	cmp	r2, #1
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x2b4>
 8001c86:	e139      	b.n	8001efc <__aeabi_dsub+0x528>
 8001c88:	42a2      	cmp	r2, r4
 8001c8a:	d027      	beq.n	8001cdc <__aeabi_dsub+0x308>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	e75d      	b.n	8001b4c <__aeabi_dsub+0x178>
 8001c90:	0002      	movs	r2, r0
 8001c92:	391f      	subs	r1, #31
 8001c94:	40ca      	lsrs	r2, r1
 8001c96:	0011      	movs	r1, r2
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d003      	beq.n	8001ca4 <__aeabi_dsub+0x2d0>
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4098      	lsls	r0, r3
 8001ca2:	4304      	orrs	r4, r0
 8001ca4:	1e63      	subs	r3, r4, #1
 8001ca6:	419c      	sbcs	r4, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	4699      	mov	r9, r3
 8001cac:	4698      	mov	r8, r3
 8001cae:	430c      	orrs	r4, r1
 8001cb0:	0763      	lsls	r3, r4, #29
 8001cb2:	d000      	beq.n	8001cb6 <__aeabi_dsub+0x2e2>
 8001cb4:	e712      	b.n	8001adc <__aeabi_dsub+0x108>
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	464a      	mov	r2, r9
 8001cba:	08e4      	lsrs	r4, r4, #3
 8001cbc:	075b      	lsls	r3, r3, #29
 8001cbe:	4323      	orrs	r3, r4
 8001cc0:	08d4      	lsrs	r4, r2, #3
 8001cc2:	4642      	mov	r2, r8
 8001cc4:	4919      	ldr	r1, [pc, #100]	; (8001d2c <__aeabi_dsub+0x358>)
 8001cc6:	428a      	cmp	r2, r1
 8001cc8:	d00e      	beq.n	8001ce8 <__aeabi_dsub+0x314>
 8001cca:	0324      	lsls	r4, r4, #12
 8001ccc:	0552      	lsls	r2, r2, #21
 8001cce:	0b24      	lsrs	r4, r4, #12
 8001cd0:	0d52      	lsrs	r2, r2, #21
 8001cd2:	e722      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e71e      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001cdc:	08db      	lsrs	r3, r3, #3
 8001cde:	4662      	mov	r2, ip
 8001ce0:	0752      	lsls	r2, r2, #29
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	4662      	mov	r2, ip
 8001ce6:	08d4      	lsrs	r4, r2, #3
 8001ce8:	001a      	movs	r2, r3
 8001cea:	4322      	orrs	r2, r4
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x31c>
 8001cee:	e1fc      	b.n	80020ea <__aeabi_dsub+0x716>
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0312      	lsls	r2, r2, #12
 8001cf4:	4314      	orrs	r4, r2
 8001cf6:	0324      	lsls	r4, r4, #12
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <__aeabi_dsub+0x358>)
 8001cfa:	0b24      	lsrs	r4, r4, #12
 8001cfc:	e70d      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f000 faa4 	bl	800224c <__clzsi2>
 8001d04:	0001      	movs	r1, r0
 8001d06:	3118      	adds	r1, #24
 8001d08:	291f      	cmp	r1, #31
 8001d0a:	dc00      	bgt.n	8001d0e <__aeabi_dsub+0x33a>
 8001d0c:	e6c4      	b.n	8001a98 <__aeabi_dsub+0xc4>
 8001d0e:	3808      	subs	r0, #8
 8001d10:	4084      	lsls	r4, r0
 8001d12:	4643      	mov	r3, r8
 8001d14:	0020      	movs	r0, r4
 8001d16:	2400      	movs	r4, #0
 8001d18:	4588      	cmp	r8, r1
 8001d1a:	dc00      	bgt.n	8001d1e <__aeabi_dsub+0x34a>
 8001d1c:	e6c8      	b.n	8001ab0 <__aeabi_dsub+0xdc>
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__aeabi_dsub+0x35c>)
 8001d20:	1a5b      	subs	r3, r3, r1
 8001d22:	4010      	ands	r0, r2
 8001d24:	4698      	mov	r8, r3
 8001d26:	4681      	mov	r9, r0
 8001d28:	e6d6      	b.n	8001ad8 <__aeabi_dsub+0x104>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	000007ff 	.word	0x000007ff
 8001d30:	ff7fffff 	.word	0xff7fffff
 8001d34:	fffff801 	.word	0xfffff801
 8001d38:	000007fe 	.word	0x000007fe
 8001d3c:	430f      	orrs	r7, r1
 8001d3e:	1e7a      	subs	r2, r7, #1
 8001d40:	4197      	sbcs	r7, r2
 8001d42:	e691      	b.n	8001a68 <__aeabi_dsub+0x94>
 8001d44:	4661      	mov	r1, ip
 8001d46:	08db      	lsrs	r3, r3, #3
 8001d48:	0749      	lsls	r1, r1, #29
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	4661      	mov	r1, ip
 8001d4e:	08cc      	lsrs	r4, r1, #3
 8001d50:	e7b8      	b.n	8001cc4 <__aeabi_dsub+0x2f0>
 8001d52:	4640      	mov	r0, r8
 8001d54:	4cd3      	ldr	r4, [pc, #844]	; (80020a4 <__aeabi_dsub+0x6d0>)
 8001d56:	3001      	adds	r0, #1
 8001d58:	4220      	tst	r0, r4
 8001d5a:	d000      	beq.n	8001d5e <__aeabi_dsub+0x38a>
 8001d5c:	e0a2      	b.n	8001ea4 <__aeabi_dsub+0x4d0>
 8001d5e:	4640      	mov	r0, r8
 8001d60:	2800      	cmp	r0, #0
 8001d62:	d000      	beq.n	8001d66 <__aeabi_dsub+0x392>
 8001d64:	e101      	b.n	8001f6a <__aeabi_dsub+0x596>
 8001d66:	4660      	mov	r0, ip
 8001d68:	4318      	orrs	r0, r3
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x39a>
 8001d6c:	e15e      	b.n	800202c <__aeabi_dsub+0x658>
 8001d6e:	0008      	movs	r0, r1
 8001d70:	4338      	orrs	r0, r7
 8001d72:	d000      	beq.n	8001d76 <__aeabi_dsub+0x3a2>
 8001d74:	e15f      	b.n	8002036 <__aeabi_dsub+0x662>
 8001d76:	4661      	mov	r1, ip
 8001d78:	08db      	lsrs	r3, r3, #3
 8001d7a:	0749      	lsls	r1, r1, #29
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	4661      	mov	r1, ip
 8001d80:	08cc      	lsrs	r4, r1, #3
 8001d82:	e7a2      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001d84:	4dc8      	ldr	r5, [pc, #800]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001d86:	42a8      	cmp	r0, r5
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x3b8>
 8001d8a:	e0cf      	b.n	8001f2c <__aeabi_dsub+0x558>
 8001d8c:	2580      	movs	r5, #128	; 0x80
 8001d8e:	4664      	mov	r4, ip
 8001d90:	042d      	lsls	r5, r5, #16
 8001d92:	432c      	orrs	r4, r5
 8001d94:	46a4      	mov	ip, r4
 8001d96:	2a38      	cmp	r2, #56	; 0x38
 8001d98:	dc56      	bgt.n	8001e48 <__aeabi_dsub+0x474>
 8001d9a:	2a1f      	cmp	r2, #31
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_dsub+0x3cc>
 8001d9e:	e0d1      	b.n	8001f44 <__aeabi_dsub+0x570>
 8001da0:	2520      	movs	r5, #32
 8001da2:	001e      	movs	r6, r3
 8001da4:	1aad      	subs	r5, r5, r2
 8001da6:	4664      	mov	r4, ip
 8001da8:	40ab      	lsls	r3, r5
 8001daa:	40ac      	lsls	r4, r5
 8001dac:	40d6      	lsrs	r6, r2
 8001dae:	1e5d      	subs	r5, r3, #1
 8001db0:	41ab      	sbcs	r3, r5
 8001db2:	4334      	orrs	r4, r6
 8001db4:	4323      	orrs	r3, r4
 8001db6:	4664      	mov	r4, ip
 8001db8:	40d4      	lsrs	r4, r2
 8001dba:	1b09      	subs	r1, r1, r4
 8001dbc:	e049      	b.n	8001e52 <__aeabi_dsub+0x47e>
 8001dbe:	4660      	mov	r0, ip
 8001dc0:	1bdc      	subs	r4, r3, r7
 8001dc2:	1a46      	subs	r6, r0, r1
 8001dc4:	42a3      	cmp	r3, r4
 8001dc6:	4180      	sbcs	r0, r0
 8001dc8:	4240      	negs	r0, r0
 8001dca:	4681      	mov	r9, r0
 8001dcc:	0030      	movs	r0, r6
 8001dce:	464e      	mov	r6, r9
 8001dd0:	1b80      	subs	r0, r0, r6
 8001dd2:	4681      	mov	r9, r0
 8001dd4:	0200      	lsls	r0, r0, #8
 8001dd6:	d476      	bmi.n	8001ec6 <__aeabi_dsub+0x4f2>
 8001dd8:	464b      	mov	r3, r9
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x40c>
 8001dde:	e652      	b.n	8001a86 <__aeabi_dsub+0xb2>
 8001de0:	2400      	movs	r4, #0
 8001de2:	2500      	movs	r5, #0
 8001de4:	e771      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001de6:	4339      	orrs	r1, r7
 8001de8:	000c      	movs	r4, r1
 8001dea:	1e62      	subs	r2, r4, #1
 8001dec:	4194      	sbcs	r4, r2
 8001dee:	18e4      	adds	r4, r4, r3
 8001df0:	429c      	cmp	r4, r3
 8001df2:	419b      	sbcs	r3, r3
 8001df4:	425b      	negs	r3, r3
 8001df6:	4463      	add	r3, ip
 8001df8:	4699      	mov	r9, r3
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	d400      	bmi.n	8001e02 <__aeabi_dsub+0x42e>
 8001e00:	e756      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001e02:	2301      	movs	r3, #1
 8001e04:	469c      	mov	ip, r3
 8001e06:	4ba8      	ldr	r3, [pc, #672]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001e08:	44e0      	add	r8, ip
 8001e0a:	4598      	cmp	r8, r3
 8001e0c:	d038      	beq.n	8001e80 <__aeabi_dsub+0x4ac>
 8001e0e:	464b      	mov	r3, r9
 8001e10:	48a6      	ldr	r0, [pc, #664]	; (80020ac <__aeabi_dsub+0x6d8>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	4003      	ands	r3, r0
 8001e16:	0018      	movs	r0, r3
 8001e18:	0863      	lsrs	r3, r4, #1
 8001e1a:	4014      	ands	r4, r2
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	07c3      	lsls	r3, r0, #31
 8001e20:	431c      	orrs	r4, r3
 8001e22:	0843      	lsrs	r3, r0, #1
 8001e24:	4699      	mov	r9, r3
 8001e26:	e657      	b.n	8001ad8 <__aeabi_dsub+0x104>
 8001e28:	0010      	movs	r0, r2
 8001e2a:	000e      	movs	r6, r1
 8001e2c:	3820      	subs	r0, #32
 8001e2e:	40c6      	lsrs	r6, r0
 8001e30:	2a20      	cmp	r2, #32
 8001e32:	d004      	beq.n	8001e3e <__aeabi_dsub+0x46a>
 8001e34:	2040      	movs	r0, #64	; 0x40
 8001e36:	1a82      	subs	r2, r0, r2
 8001e38:	4091      	lsls	r1, r2
 8001e3a:	430f      	orrs	r7, r1
 8001e3c:	46b9      	mov	r9, r7
 8001e3e:	464f      	mov	r7, r9
 8001e40:	1e7a      	subs	r2, r7, #1
 8001e42:	4197      	sbcs	r7, r2
 8001e44:	4337      	orrs	r7, r6
 8001e46:	e60f      	b.n	8001a68 <__aeabi_dsub+0x94>
 8001e48:	4662      	mov	r2, ip
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	4193      	sbcs	r3, r2
 8001e52:	1afc      	subs	r4, r7, r3
 8001e54:	42a7      	cmp	r7, r4
 8001e56:	41bf      	sbcs	r7, r7
 8001e58:	427f      	negs	r7, r7
 8001e5a:	1bcb      	subs	r3, r1, r7
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	465d      	mov	r5, fp
 8001e60:	4680      	mov	r8, r0
 8001e62:	e608      	b.n	8001a76 <__aeabi_dsub+0xa2>
 8001e64:	4666      	mov	r6, ip
 8001e66:	431e      	orrs	r6, r3
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x498>
 8001e6a:	e0be      	b.n	8001fea <__aeabi_dsub+0x616>
 8001e6c:	1e56      	subs	r6, r2, #1
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x4a0>
 8001e72:	e109      	b.n	8002088 <__aeabi_dsub+0x6b4>
 8001e74:	4c8c      	ldr	r4, [pc, #560]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001e76:	42a2      	cmp	r2, r4
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x4a8>
 8001e7a:	e119      	b.n	80020b0 <__aeabi_dsub+0x6dc>
 8001e7c:	0032      	movs	r2, r6
 8001e7e:	e6c1      	b.n	8001c04 <__aeabi_dsub+0x230>
 8001e80:	4642      	mov	r2, r8
 8001e82:	2400      	movs	r4, #0
 8001e84:	2300      	movs	r3, #0
 8001e86:	e648      	b.n	8001b1a <__aeabi_dsub+0x146>
 8001e88:	2020      	movs	r0, #32
 8001e8a:	000c      	movs	r4, r1
 8001e8c:	1a80      	subs	r0, r0, r2
 8001e8e:	003e      	movs	r6, r7
 8001e90:	4087      	lsls	r7, r0
 8001e92:	4084      	lsls	r4, r0
 8001e94:	40d6      	lsrs	r6, r2
 8001e96:	1e78      	subs	r0, r7, #1
 8001e98:	4187      	sbcs	r7, r0
 8001e9a:	40d1      	lsrs	r1, r2
 8001e9c:	4334      	orrs	r4, r6
 8001e9e:	433c      	orrs	r4, r7
 8001ea0:	448c      	add	ip, r1
 8001ea2:	e7a4      	b.n	8001dee <__aeabi_dsub+0x41a>
 8001ea4:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <__aeabi_dsub+0x6d4>)
 8001ea6:	4290      	cmp	r0, r2
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x4d8>
 8001eaa:	e0e9      	b.n	8002080 <__aeabi_dsub+0x6ac>
 8001eac:	19df      	adds	r7, r3, r7
 8001eae:	429f      	cmp	r7, r3
 8001eb0:	419b      	sbcs	r3, r3
 8001eb2:	4461      	add	r1, ip
 8001eb4:	425b      	negs	r3, r3
 8001eb6:	18c9      	adds	r1, r1, r3
 8001eb8:	07cc      	lsls	r4, r1, #31
 8001eba:	087f      	lsrs	r7, r7, #1
 8001ebc:	084b      	lsrs	r3, r1, #1
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	433c      	orrs	r4, r7
 8001ec4:	e6f4      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001ec6:	1afc      	subs	r4, r7, r3
 8001ec8:	42a7      	cmp	r7, r4
 8001eca:	41bf      	sbcs	r7, r7
 8001ecc:	4663      	mov	r3, ip
 8001ece:	427f      	negs	r7, r7
 8001ed0:	1ac9      	subs	r1, r1, r3
 8001ed2:	1bcb      	subs	r3, r1, r7
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	465d      	mov	r5, fp
 8001ed8:	e5d5      	b.n	8001a86 <__aeabi_dsub+0xb2>
 8001eda:	08ff      	lsrs	r7, r7, #3
 8001edc:	074b      	lsls	r3, r1, #29
 8001ede:	465d      	mov	r5, fp
 8001ee0:	433b      	orrs	r3, r7
 8001ee2:	08cc      	lsrs	r4, r1, #3
 8001ee4:	e6ee      	b.n	8001cc4 <__aeabi_dsub+0x2f0>
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x51a>
 8001eec:	e082      	b.n	8001ff4 <__aeabi_dsub+0x620>
 8001eee:	000b      	movs	r3, r1
 8001ef0:	433b      	orrs	r3, r7
 8001ef2:	d11b      	bne.n	8001f2c <__aeabi_dsub+0x558>
 8001ef4:	2480      	movs	r4, #128	; 0x80
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	0324      	lsls	r4, r4, #12
 8001efa:	e6f9      	b.n	8001cf0 <__aeabi_dsub+0x31c>
 8001efc:	19dc      	adds	r4, r3, r7
 8001efe:	429c      	cmp	r4, r3
 8001f00:	419b      	sbcs	r3, r3
 8001f02:	4461      	add	r1, ip
 8001f04:	4689      	mov	r9, r1
 8001f06:	425b      	negs	r3, r3
 8001f08:	4499      	add	r9, r3
 8001f0a:	464b      	mov	r3, r9
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	d444      	bmi.n	8001f9a <__aeabi_dsub+0x5c6>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4698      	mov	r8, r3
 8001f14:	e6cc      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 8001f16:	1bdc      	subs	r4, r3, r7
 8001f18:	4662      	mov	r2, ip
 8001f1a:	42a3      	cmp	r3, r4
 8001f1c:	419b      	sbcs	r3, r3
 8001f1e:	1a51      	subs	r1, r2, r1
 8001f20:	425b      	negs	r3, r3
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	4699      	mov	r9, r3
 8001f26:	2301      	movs	r3, #1
 8001f28:	4698      	mov	r8, r3
 8001f2a:	e5a4      	b.n	8001a76 <__aeabi_dsub+0xa2>
 8001f2c:	08ff      	lsrs	r7, r7, #3
 8001f2e:	074b      	lsls	r3, r1, #29
 8001f30:	465d      	mov	r5, fp
 8001f32:	433b      	orrs	r3, r7
 8001f34:	08cc      	lsrs	r4, r1, #3
 8001f36:	e6d7      	b.n	8001ce8 <__aeabi_dsub+0x314>
 8001f38:	4662      	mov	r2, ip
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	0014      	movs	r4, r2
 8001f3e:	1e63      	subs	r3, r4, #1
 8001f40:	419c      	sbcs	r4, r3
 8001f42:	e679      	b.n	8001c38 <__aeabi_dsub+0x264>
 8001f44:	0015      	movs	r5, r2
 8001f46:	4664      	mov	r4, ip
 8001f48:	3d20      	subs	r5, #32
 8001f4a:	40ec      	lsrs	r4, r5
 8001f4c:	46a0      	mov	r8, r4
 8001f4e:	2a20      	cmp	r2, #32
 8001f50:	d005      	beq.n	8001f5e <__aeabi_dsub+0x58a>
 8001f52:	2540      	movs	r5, #64	; 0x40
 8001f54:	4664      	mov	r4, ip
 8001f56:	1aaa      	subs	r2, r5, r2
 8001f58:	4094      	lsls	r4, r2
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	469a      	mov	sl, r3
 8001f5e:	4654      	mov	r4, sl
 8001f60:	1e63      	subs	r3, r4, #1
 8001f62:	419c      	sbcs	r4, r3
 8001f64:	4643      	mov	r3, r8
 8001f66:	4323      	orrs	r3, r4
 8001f68:	e773      	b.n	8001e52 <__aeabi_dsub+0x47e>
 8001f6a:	4662      	mov	r2, ip
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	d023      	beq.n	8001fb8 <__aeabi_dsub+0x5e4>
 8001f70:	000a      	movs	r2, r1
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x5a4>
 8001f76:	e0a0      	b.n	80020ba <__aeabi_dsub+0x6e6>
 8001f78:	4662      	mov	r2, ip
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	0752      	lsls	r2, r2, #29
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	4662      	mov	r2, ip
 8001f82:	08d4      	lsrs	r4, r2, #3
 8001f84:	e6b0      	b.n	8001ce8 <__aeabi_dsub+0x314>
 8001f86:	000b      	movs	r3, r1
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x5ba>
 8001f8c:	e728      	b.n	8001de0 <__aeabi_dsub+0x40c>
 8001f8e:	08ff      	lsrs	r7, r7, #3
 8001f90:	074b      	lsls	r3, r1, #29
 8001f92:	465d      	mov	r5, fp
 8001f94:	433b      	orrs	r3, r7
 8001f96:	08cc      	lsrs	r4, r1, #3
 8001f98:	e697      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	e736      	b.n	8001e0e <__aeabi_dsub+0x43a>
 8001fa0:	1afc      	subs	r4, r7, r3
 8001fa2:	42a7      	cmp	r7, r4
 8001fa4:	41bf      	sbcs	r7, r7
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	427f      	negs	r7, r7
 8001faa:	1ac9      	subs	r1, r1, r3
 8001fac:	1bcb      	subs	r3, r1, r7
 8001fae:	4699      	mov	r9, r3
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	465d      	mov	r5, fp
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	e55e      	b.n	8001a76 <__aeabi_dsub+0xa2>
 8001fb8:	074b      	lsls	r3, r1, #29
 8001fba:	08ff      	lsrs	r7, r7, #3
 8001fbc:	433b      	orrs	r3, r7
 8001fbe:	08cc      	lsrs	r4, r1, #3
 8001fc0:	e692      	b.n	8001ce8 <__aeabi_dsub+0x314>
 8001fc2:	1bdc      	subs	r4, r3, r7
 8001fc4:	4660      	mov	r0, ip
 8001fc6:	42a3      	cmp	r3, r4
 8001fc8:	41b6      	sbcs	r6, r6
 8001fca:	1a40      	subs	r0, r0, r1
 8001fcc:	4276      	negs	r6, r6
 8001fce:	1b80      	subs	r0, r0, r6
 8001fd0:	4681      	mov	r9, r0
 8001fd2:	0200      	lsls	r0, r0, #8
 8001fd4:	d560      	bpl.n	8002098 <__aeabi_dsub+0x6c4>
 8001fd6:	1afc      	subs	r4, r7, r3
 8001fd8:	42a7      	cmp	r7, r4
 8001fda:	41bf      	sbcs	r7, r7
 8001fdc:	4663      	mov	r3, ip
 8001fde:	427f      	negs	r7, r7
 8001fe0:	1ac9      	subs	r1, r1, r3
 8001fe2:	1bcb      	subs	r3, r1, r7
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	465d      	mov	r5, fp
 8001fe8:	e576      	b.n	8001ad8 <__aeabi_dsub+0x104>
 8001fea:	08ff      	lsrs	r7, r7, #3
 8001fec:	074b      	lsls	r3, r1, #29
 8001fee:	433b      	orrs	r3, r7
 8001ff0:	08cc      	lsrs	r4, r1, #3
 8001ff2:	e667      	b.n	8001cc4 <__aeabi_dsub+0x2f0>
 8001ff4:	000a      	movs	r2, r1
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	433a      	orrs	r2, r7
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x62a>
 8001ffc:	e66f      	b.n	8001cde <__aeabi_dsub+0x30a>
 8001ffe:	4662      	mov	r2, ip
 8002000:	0752      	lsls	r2, r2, #29
 8002002:	4313      	orrs	r3, r2
 8002004:	4662      	mov	r2, ip
 8002006:	08d4      	lsrs	r4, r2, #3
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0312      	lsls	r2, r2, #12
 800200c:	4214      	tst	r4, r2
 800200e:	d007      	beq.n	8002020 <__aeabi_dsub+0x64c>
 8002010:	08c8      	lsrs	r0, r1, #3
 8002012:	4210      	tst	r0, r2
 8002014:	d104      	bne.n	8002020 <__aeabi_dsub+0x64c>
 8002016:	465d      	mov	r5, fp
 8002018:	0004      	movs	r4, r0
 800201a:	08fb      	lsrs	r3, r7, #3
 800201c:	0749      	lsls	r1, r1, #29
 800201e:	430b      	orrs	r3, r1
 8002020:	0f5a      	lsrs	r2, r3, #29
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	08db      	lsrs	r3, r3, #3
 8002026:	0752      	lsls	r2, r2, #29
 8002028:	4313      	orrs	r3, r2
 800202a:	e65d      	b.n	8001ce8 <__aeabi_dsub+0x314>
 800202c:	074b      	lsls	r3, r1, #29
 800202e:	08ff      	lsrs	r7, r7, #3
 8002030:	433b      	orrs	r3, r7
 8002032:	08cc      	lsrs	r4, r1, #3
 8002034:	e649      	b.n	8001cca <__aeabi_dsub+0x2f6>
 8002036:	19dc      	adds	r4, r3, r7
 8002038:	429c      	cmp	r4, r3
 800203a:	419b      	sbcs	r3, r3
 800203c:	4461      	add	r1, ip
 800203e:	4689      	mov	r9, r1
 8002040:	425b      	negs	r3, r3
 8002042:	4499      	add	r9, r3
 8002044:	464b      	mov	r3, r9
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	d400      	bmi.n	800204c <__aeabi_dsub+0x678>
 800204a:	e631      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 800204c:	464a      	mov	r2, r9
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <__aeabi_dsub+0x6d8>)
 8002050:	401a      	ands	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	4691      	mov	r9, r2
 8002056:	4698      	mov	r8, r3
 8002058:	e62a      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 800205a:	0016      	movs	r6, r2
 800205c:	4664      	mov	r4, ip
 800205e:	3e20      	subs	r6, #32
 8002060:	40f4      	lsrs	r4, r6
 8002062:	46a0      	mov	r8, r4
 8002064:	2a20      	cmp	r2, #32
 8002066:	d005      	beq.n	8002074 <__aeabi_dsub+0x6a0>
 8002068:	2640      	movs	r6, #64	; 0x40
 800206a:	4664      	mov	r4, ip
 800206c:	1ab2      	subs	r2, r6, r2
 800206e:	4094      	lsls	r4, r2
 8002070:	4323      	orrs	r3, r4
 8002072:	469a      	mov	sl, r3
 8002074:	4654      	mov	r4, sl
 8002076:	1e63      	subs	r3, r4, #1
 8002078:	419c      	sbcs	r4, r3
 800207a:	4643      	mov	r3, r8
 800207c:	431c      	orrs	r4, r3
 800207e:	e5db      	b.n	8001c38 <__aeabi_dsub+0x264>
 8002080:	0002      	movs	r2, r0
 8002082:	2400      	movs	r4, #0
 8002084:	2300      	movs	r3, #0
 8002086:	e548      	b.n	8001b1a <__aeabi_dsub+0x146>
 8002088:	19dc      	adds	r4, r3, r7
 800208a:	42bc      	cmp	r4, r7
 800208c:	41bf      	sbcs	r7, r7
 800208e:	4461      	add	r1, ip
 8002090:	4689      	mov	r9, r1
 8002092:	427f      	negs	r7, r7
 8002094:	44b9      	add	r9, r7
 8002096:	e738      	b.n	8001f0a <__aeabi_dsub+0x536>
 8002098:	464b      	mov	r3, r9
 800209a:	4323      	orrs	r3, r4
 800209c:	d100      	bne.n	80020a0 <__aeabi_dsub+0x6cc>
 800209e:	e69f      	b.n	8001de0 <__aeabi_dsub+0x40c>
 80020a0:	e606      	b.n	8001cb0 <__aeabi_dsub+0x2dc>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	000007fe 	.word	0x000007fe
 80020a8:	000007ff 	.word	0x000007ff
 80020ac:	ff7fffff 	.word	0xff7fffff
 80020b0:	08ff      	lsrs	r7, r7, #3
 80020b2:	074b      	lsls	r3, r1, #29
 80020b4:	433b      	orrs	r3, r7
 80020b6:	08cc      	lsrs	r4, r1, #3
 80020b8:	e616      	b.n	8001ce8 <__aeabi_dsub+0x314>
 80020ba:	4662      	mov	r2, ip
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	0752      	lsls	r2, r2, #29
 80020c0:	4313      	orrs	r3, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	08d4      	lsrs	r4, r2, #3
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	0312      	lsls	r2, r2, #12
 80020ca:	4214      	tst	r4, r2
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x70a>
 80020ce:	08c8      	lsrs	r0, r1, #3
 80020d0:	4210      	tst	r0, r2
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x70a>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0004      	movs	r4, r0
 80020d8:	08fb      	lsrs	r3, r7, #3
 80020da:	0749      	lsls	r1, r1, #29
 80020dc:	430b      	orrs	r3, r1
 80020de:	0f5a      	lsrs	r2, r3, #29
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	0752      	lsls	r2, r2, #29
 80020e4:	08db      	lsrs	r3, r3, #3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	e5fe      	b.n	8001ce8 <__aeabi_dsub+0x314>
 80020ea:	2300      	movs	r3, #0
 80020ec:	4a01      	ldr	r2, [pc, #4]	; (80020f4 <__aeabi_dsub+0x720>)
 80020ee:	001c      	movs	r4, r3
 80020f0:	e513      	b.n	8001b1a <__aeabi_dsub+0x146>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	000007ff 	.word	0x000007ff

080020f8 <__aeabi_dcmpun>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	0005      	movs	r5, r0
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <__aeabi_dcmpun+0x38>)
 80020fe:	031c      	lsls	r4, r3, #12
 8002100:	0016      	movs	r6, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	030a      	lsls	r2, r1, #12
 8002106:	0049      	lsls	r1, r1, #1
 8002108:	0b12      	lsrs	r2, r2, #12
 800210a:	0d49      	lsrs	r1, r1, #21
 800210c:	0b24      	lsrs	r4, r4, #12
 800210e:	0d5b      	lsrs	r3, r3, #21
 8002110:	4281      	cmp	r1, r0
 8002112:	d008      	beq.n	8002126 <__aeabi_dcmpun+0x2e>
 8002114:	4a06      	ldr	r2, [pc, #24]	; (8002130 <__aeabi_dcmpun+0x38>)
 8002116:	2000      	movs	r0, #0
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <__aeabi_dcmpun+0x2c>
 800211c:	0020      	movs	r0, r4
 800211e:	4330      	orrs	r0, r6
 8002120:	1e43      	subs	r3, r0, #1
 8002122:	4198      	sbcs	r0, r3
 8002124:	bd70      	pop	{r4, r5, r6, pc}
 8002126:	2001      	movs	r0, #1
 8002128:	432a      	orrs	r2, r5
 800212a:	d1fb      	bne.n	8002124 <__aeabi_dcmpun+0x2c>
 800212c:	e7f2      	b.n	8002114 <__aeabi_dcmpun+0x1c>
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff

08002134 <__aeabi_d2iz>:
 8002134:	000a      	movs	r2, r1
 8002136:	b530      	push	{r4, r5, lr}
 8002138:	4c13      	ldr	r4, [pc, #76]	; (8002188 <__aeabi_d2iz+0x54>)
 800213a:	0053      	lsls	r3, r2, #1
 800213c:	0309      	lsls	r1, r1, #12
 800213e:	0005      	movs	r5, r0
 8002140:	0b09      	lsrs	r1, r1, #12
 8002142:	2000      	movs	r0, #0
 8002144:	0d5b      	lsrs	r3, r3, #21
 8002146:	0fd2      	lsrs	r2, r2, #31
 8002148:	42a3      	cmp	r3, r4
 800214a:	dd04      	ble.n	8002156 <__aeabi_d2iz+0x22>
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <__aeabi_d2iz+0x58>)
 800214e:	4283      	cmp	r3, r0
 8002150:	dd02      	ble.n	8002158 <__aeabi_d2iz+0x24>
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <__aeabi_d2iz+0x5c>)
 8002154:	18d0      	adds	r0, r2, r3
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	2080      	movs	r0, #128	; 0x80
 800215a:	0340      	lsls	r0, r0, #13
 800215c:	4301      	orrs	r1, r0
 800215e:	480d      	ldr	r0, [pc, #52]	; (8002194 <__aeabi_d2iz+0x60>)
 8002160:	1ac0      	subs	r0, r0, r3
 8002162:	281f      	cmp	r0, #31
 8002164:	dd08      	ble.n	8002178 <__aeabi_d2iz+0x44>
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <__aeabi_d2iz+0x64>)
 8002168:	1ac3      	subs	r3, r0, r3
 800216a:	40d9      	lsrs	r1, r3
 800216c:	000b      	movs	r3, r1
 800216e:	4258      	negs	r0, r3
 8002170:	2a00      	cmp	r2, #0
 8002172:	d1f0      	bne.n	8002156 <__aeabi_d2iz+0x22>
 8002174:	0018      	movs	r0, r3
 8002176:	e7ee      	b.n	8002156 <__aeabi_d2iz+0x22>
 8002178:	4c08      	ldr	r4, [pc, #32]	; (800219c <__aeabi_d2iz+0x68>)
 800217a:	40c5      	lsrs	r5, r0
 800217c:	46a4      	mov	ip, r4
 800217e:	4463      	add	r3, ip
 8002180:	4099      	lsls	r1, r3
 8002182:	000b      	movs	r3, r1
 8002184:	432b      	orrs	r3, r5
 8002186:	e7f2      	b.n	800216e <__aeabi_d2iz+0x3a>
 8002188:	000003fe 	.word	0x000003fe
 800218c:	0000041d 	.word	0x0000041d
 8002190:	7fffffff 	.word	0x7fffffff
 8002194:	00000433 	.word	0x00000433
 8002198:	00000413 	.word	0x00000413
 800219c:	fffffbed 	.word	0xfffffbed

080021a0 <__aeabi_i2d>:
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d016      	beq.n	80021d4 <__aeabi_i2d+0x34>
 80021a6:	17c3      	asrs	r3, r0, #31
 80021a8:	18c5      	adds	r5, r0, r3
 80021aa:	405d      	eors	r5, r3
 80021ac:	0fc4      	lsrs	r4, r0, #31
 80021ae:	0028      	movs	r0, r5
 80021b0:	f000 f84c 	bl	800224c <__clzsi2>
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <__aeabi_i2d+0x5c>)
 80021b6:	1a12      	subs	r2, r2, r0
 80021b8:	280a      	cmp	r0, #10
 80021ba:	dc16      	bgt.n	80021ea <__aeabi_i2d+0x4a>
 80021bc:	0003      	movs	r3, r0
 80021be:	002e      	movs	r6, r5
 80021c0:	3315      	adds	r3, #21
 80021c2:	409e      	lsls	r6, r3
 80021c4:	230b      	movs	r3, #11
 80021c6:	1a18      	subs	r0, r3, r0
 80021c8:	40c5      	lsrs	r5, r0
 80021ca:	0552      	lsls	r2, r2, #21
 80021cc:	032d      	lsls	r5, r5, #12
 80021ce:	0b2d      	lsrs	r5, r5, #12
 80021d0:	0d53      	lsrs	r3, r2, #21
 80021d2:	e003      	b.n	80021dc <__aeabi_i2d+0x3c>
 80021d4:	2400      	movs	r4, #0
 80021d6:	2300      	movs	r3, #0
 80021d8:	2500      	movs	r5, #0
 80021da:	2600      	movs	r6, #0
 80021dc:	051b      	lsls	r3, r3, #20
 80021de:	432b      	orrs	r3, r5
 80021e0:	07e4      	lsls	r4, r4, #31
 80021e2:	4323      	orrs	r3, r4
 80021e4:	0030      	movs	r0, r6
 80021e6:	0019      	movs	r1, r3
 80021e8:	bd70      	pop	{r4, r5, r6, pc}
 80021ea:	380b      	subs	r0, #11
 80021ec:	4085      	lsls	r5, r0
 80021ee:	0552      	lsls	r2, r2, #21
 80021f0:	032d      	lsls	r5, r5, #12
 80021f2:	2600      	movs	r6, #0
 80021f4:	0b2d      	lsrs	r5, r5, #12
 80021f6:	0d53      	lsrs	r3, r2, #21
 80021f8:	e7f0      	b.n	80021dc <__aeabi_i2d+0x3c>
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	0000041e 	.word	0x0000041e

08002200 <__aeabi_ui2d>:
 8002200:	b510      	push	{r4, lr}
 8002202:	1e04      	subs	r4, r0, #0
 8002204:	d010      	beq.n	8002228 <__aeabi_ui2d+0x28>
 8002206:	f000 f821 	bl	800224c <__clzsi2>
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <__aeabi_ui2d+0x48>)
 800220c:	1a1b      	subs	r3, r3, r0
 800220e:	280a      	cmp	r0, #10
 8002210:	dc11      	bgt.n	8002236 <__aeabi_ui2d+0x36>
 8002212:	220b      	movs	r2, #11
 8002214:	0021      	movs	r1, r4
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	40d1      	lsrs	r1, r2
 800221a:	3015      	adds	r0, #21
 800221c:	030a      	lsls	r2, r1, #12
 800221e:	055b      	lsls	r3, r3, #21
 8002220:	4084      	lsls	r4, r0
 8002222:	0b12      	lsrs	r2, r2, #12
 8002224:	0d5b      	lsrs	r3, r3, #21
 8002226:	e001      	b.n	800222c <__aeabi_ui2d+0x2c>
 8002228:	2300      	movs	r3, #0
 800222a:	2200      	movs	r2, #0
 800222c:	051b      	lsls	r3, r3, #20
 800222e:	4313      	orrs	r3, r2
 8002230:	0020      	movs	r0, r4
 8002232:	0019      	movs	r1, r3
 8002234:	bd10      	pop	{r4, pc}
 8002236:	0022      	movs	r2, r4
 8002238:	380b      	subs	r0, #11
 800223a:	4082      	lsls	r2, r0
 800223c:	055b      	lsls	r3, r3, #21
 800223e:	0312      	lsls	r2, r2, #12
 8002240:	2400      	movs	r4, #0
 8002242:	0b12      	lsrs	r2, r2, #12
 8002244:	0d5b      	lsrs	r3, r3, #21
 8002246:	e7f1      	b.n	800222c <__aeabi_ui2d+0x2c>
 8002248:	0000041e 	.word	0x0000041e

0800224c <__clzsi2>:
 800224c:	211c      	movs	r1, #28
 800224e:	2301      	movs	r3, #1
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0xe>
 8002256:	0c00      	lsrs	r0, r0, #16
 8002258:	3910      	subs	r1, #16
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	4298      	cmp	r0, r3
 800225e:	d301      	bcc.n	8002264 <__clzsi2+0x18>
 8002260:	0a00      	lsrs	r0, r0, #8
 8002262:	3908      	subs	r1, #8
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	4298      	cmp	r0, r3
 8002268:	d301      	bcc.n	800226e <__clzsi2+0x22>
 800226a:	0900      	lsrs	r0, r0, #4
 800226c:	3904      	subs	r1, #4
 800226e:	a202      	add	r2, pc, #8	; (adr r2, 8002278 <__clzsi2+0x2c>)
 8002270:	5c10      	ldrb	r0, [r2, r0]
 8002272:	1840      	adds	r0, r0, r1
 8002274:	4770      	bx	lr
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	02020304 	.word	0x02020304
 800227c:	01010101 	.word	0x01010101
	...

08002288 <__clzdi2>:
 8002288:	b510      	push	{r4, lr}
 800228a:	2900      	cmp	r1, #0
 800228c:	d103      	bne.n	8002296 <__clzdi2+0xe>
 800228e:	f7ff ffdd 	bl	800224c <__clzsi2>
 8002292:	3020      	adds	r0, #32
 8002294:	e002      	b.n	800229c <__clzdi2+0x14>
 8002296:	0008      	movs	r0, r1
 8002298:	f7ff ffd8 	bl	800224c <__clzsi2>
 800229c:	bd10      	pop	{r4, pc}
 800229e:	46c0      	nop			; (mov r8, r8)

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f000 fd36 	bl	8002d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f860 	bl	800236c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ac:	f000 f932 	bl	8002514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022b0:	f000 f8e2 	bl	8002478 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80022b4:	f000 f8a2 	bl	80023fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 80022b8:	491b      	ldr	r1, [pc, #108]	; (8002328 <main+0x88>)
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <main+0x8c>)
 80022bc:	2201      	movs	r2, #1
 80022be:	0018      	movs	r0, r3
 80022c0:	f002 fd0c 	bl	8004cdc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80022c4:	f004 fd1c 	bl	8006d00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <main+0x90>)
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <main+0x94>)
 80022cc:	2100      	movs	r1, #0
 80022ce:	0018      	movs	r0, r3
 80022d0:	f004 fd5e 	bl	8006d90 <osThreadNew>
 80022d4:	0002      	movs	r2, r0
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <main+0x98>)
 80022d8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  blinkingRatioThreadHandle = osThreadNew(ChangeBlinkingRatioThread, NULL, &blinkingRatioTask_attributes);
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <main+0x9c>)
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <main+0xa0>)
 80022de:	2100      	movs	r1, #0
 80022e0:	0018      	movs	r0, r3
 80022e2:	f004 fd55 	bl	8006d90 <osThreadNew>
 80022e6:	0002      	movs	r2, r0
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <main+0xa4>)
 80022ea:	601a      	str	r2, [r3, #0]
  toggleLEDThreadHandle = osThreadNew(ToggleLEDThread, NULL, &toggleLEDTask_attributes);
 80022ec:	4a16      	ldr	r2, [pc, #88]	; (8002348 <main+0xa8>)
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <main+0xac>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f004 fd4c 	bl	8006d90 <osThreadNew>
 80022f8:	0002      	movs	r2, r0
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <main+0xb0>)
 80022fc:	601a      	str	r2, [r3, #0]
  sendByteOverUartHandle = osThreadNew(SendBytOverUartThread, NULL, &sendByteOverUartTask_attributes);
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <main+0xb4>)
 8002300:	4b15      	ldr	r3, [pc, #84]	; (8002358 <main+0xb8>)
 8002302:	2100      	movs	r1, #0
 8002304:	0018      	movs	r0, r3
 8002306:	f004 fd43 	bl	8006d90 <osThreadNew>
 800230a:	0002      	movs	r2, r0
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <main+0xbc>)
 800230e:	601a      	str	r2, [r3, #0]
  accelServiceHandle = osThreadNew(AccelServiceThread, NULL, &accelServiceTask_attributes);
 8002310:	4a13      	ldr	r2, [pc, #76]	; (8002360 <main+0xc0>)
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <main+0xc4>)
 8002314:	2100      	movs	r1, #0
 8002316:	0018      	movs	r0, r3
 8002318:	f004 fd3a 	bl	8006d90 <osThreadNew>
 800231c:	0002      	movs	r2, r0
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <main+0xc8>)
 8002320:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002322:	f004 fd0f 	bl	8006d44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002326:	e7fe      	b.n	8002326 <main+0x86>
 8002328:	20000308 	.word	0x20000308
 800232c:	20000264 	.word	0x20000264
 8002330:	0800c4b0 	.word	0x0800c4b0
 8002334:	080027bb 	.word	0x080027bb
 8002338:	200002f8 	.word	0x200002f8
 800233c:	0800c4d4 	.word	0x0800c4d4
 8002340:	080026c5 	.word	0x080026c5
 8002344:	200002fc 	.word	0x200002fc
 8002348:	0800c4f8 	.word	0x0800c4f8
 800234c:	08002679 	.word	0x08002679
 8002350:	20000300 	.word	0x20000300
 8002354:	0800c51c 	.word	0x0800c51c
 8002358:	080026e1 	.word	0x080026e1
 800235c:	20000304 	.word	0x20000304
 8002360:	0800c540 	.word	0x0800c540
 8002364:	080027ad 	.word	0x080027ad
 8002368:	2000030c 	.word	0x2000030c

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b093      	sub	sp, #76	; 0x4c
 8002370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	2410      	movs	r4, #16
 8002374:	193b      	adds	r3, r7, r4
 8002376:	0018      	movs	r0, r3
 8002378:	2338      	movs	r3, #56	; 0x38
 800237a:	001a      	movs	r2, r3
 800237c:	2100      	movs	r1, #0
 800237e:	f007 fad9 	bl	8009934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002382:	003b      	movs	r3, r7
 8002384:	0018      	movs	r0, r3
 8002386:	2310      	movs	r3, #16
 8002388:	001a      	movs	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f007 fad2 	bl	8009934 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	0018      	movs	r0, r3
 8002396:	f001 f843 	bl	8003420 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800239a:	193b      	adds	r3, r7, r4
 800239c:	2202      	movs	r2, #2
 800239e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0052      	lsls	r2, r2, #1
 80023a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	2240      	movs	r2, #64	; 0x40
 80023b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	0018      	movs	r0, r3
 80023be:	f001 f87b 	bl	80034b8 <HAL_RCC_OscConfig>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023c6:	f000 fa15 	bl	80027f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ca:	003b      	movs	r3, r7
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023d0:	003b      	movs	r3, r7
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d6:	003b      	movs	r3, r7
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023dc:	003b      	movs	r3, r7
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023e2:	003b      	movs	r3, r7
 80023e4:	2100      	movs	r1, #0
 80023e6:	0018      	movs	r0, r3
 80023e8:	f001 fb80 	bl	8003aec <HAL_RCC_ClockConfig>
 80023ec:	1e03      	subs	r3, r0, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80023f0:	f000 fa00 	bl	80027f4 <Error_Handler>
  }
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b013      	add	sp, #76	; 0x4c
 80023fa:	bd90      	pop	{r4, r7, pc}

080023fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <MX_SPI1_Init+0x74>)
 8002402:	4a1c      	ldr	r2, [pc, #112]	; (8002474 <MX_SPI1_Init+0x78>)
 8002404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <MX_SPI1_Init+0x74>)
 8002408:	2282      	movs	r2, #130	; 0x82
 800240a:	0052      	lsls	r2, r2, #1
 800240c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <MX_SPI1_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <MX_SPI1_Init+0x74>)
 8002416:	22e0      	movs	r2, #224	; 0xe0
 8002418:	00d2      	lsls	r2, r2, #3
 800241a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_SPI1_Init+0x74>)
 800241e:	2202      	movs	r2, #2
 8002420:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <MX_SPI1_Init+0x74>)
 8002424:	2201      	movs	r2, #1
 8002426:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_SPI1_Init+0x74>)
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_SPI1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_SPI1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_SPI1_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_SPI1_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_SPI1_Init+0x74>)
 800244a:	2207      	movs	r2, #7
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_SPI1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_SPI1_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <MX_SPI1_Init+0x74>)
 800245c:	0018      	movs	r0, r3
 800245e:	f001 fed1 	bl	8004204 <HAL_SPI_Init>
 8002462:	1e03      	subs	r3, r0, #0
 8002464:	d001      	beq.n	800246a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002466:	f000 f9c5 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000200 	.word	0x20000200
 8002474:	40013000 	.word	0x40013000

08002478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <MX_USART2_UART_Init+0x94>)
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <MX_USART2_UART_Init+0x98>)
 8002480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <MX_USART2_UART_Init+0x94>)
 8002484:	22e1      	movs	r2, #225	; 0xe1
 8002486:	0252      	lsls	r2, r2, #9
 8002488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <MX_USART2_UART_Init+0x94>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_USART2_UART_Init+0x94>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <MX_USART2_UART_Init+0x94>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_USART2_UART_Init+0x94>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024c2:	0018      	movs	r0, r3
 80024c4:	f002 fb18 	bl	8004af8 <HAL_UART_Init>
 80024c8:	1e03      	subs	r3, r0, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024cc:	f000 f992 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024d2:	2100      	movs	r1, #0
 80024d4:	0018      	movs	r0, r3
 80024d6:	f004 faa9 	bl	8006a2c <HAL_UARTEx_SetTxFifoThreshold>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024de:	f000 f989 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024e4:	2100      	movs	r1, #0
 80024e6:	0018      	movs	r0, r3
 80024e8:	f004 fae0 	bl	8006aac <HAL_UARTEx_SetRxFifoThreshold>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f000 f980 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <MX_USART2_UART_Init+0x94>)
 80024f6:	0018      	movs	r0, r3
 80024f8:	f004 fa5e 	bl	80069b8 <HAL_UARTEx_DisableFifoMode>
 80024fc:	1e03      	subs	r3, r0, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002500:	f000 f978 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	20000264 	.word	0x20000264
 8002510:	40004400 	.word	0x40004400

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b08b      	sub	sp, #44	; 0x2c
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	2414      	movs	r4, #20
 800251c:	193b      	adds	r3, r7, r4
 800251e:	0018      	movs	r0, r3
 8002520:	2314      	movs	r3, #20
 8002522:	001a      	movs	r2, r3
 8002524:	2100      	movs	r1, #0
 8002526:	f007 fa05 	bl	8009934 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <MX_GPIO_Init+0x118>)
 800252c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <MX_GPIO_Init+0x118>)
 8002530:	2104      	movs	r1, #4
 8002532:	430a      	orrs	r2, r1
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <MX_GPIO_Init+0x118>)
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	2204      	movs	r2, #4
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002542:	4b3a      	ldr	r3, [pc, #232]	; (800262c <MX_GPIO_Init+0x118>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <MX_GPIO_Init+0x118>)
 8002548:	2120      	movs	r1, #32
 800254a:	430a      	orrs	r2, r1
 800254c:	635a      	str	r2, [r3, #52]	; 0x34
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <MX_GPIO_Init+0x118>)
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	2220      	movs	r2, #32
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	4b34      	ldr	r3, [pc, #208]	; (800262c <MX_GPIO_Init+0x118>)
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <MX_GPIO_Init+0x118>)
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <MX_GPIO_Init+0x118>)
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2201      	movs	r2, #1
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <MX_GPIO_Init+0x118>)
 8002574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <MX_GPIO_Init+0x118>)
 8002578:	2102      	movs	r1, #2
 800257a:	430a      	orrs	r2, r1
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
 800257e:	4b2b      	ldr	r3, [pc, #172]	; (800262c <MX_GPIO_Init+0x118>)
 8002580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800258a:	23a0      	movs	r3, #160	; 0xa0
 800258c:	05db      	lsls	r3, r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	2120      	movs	r1, #32
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fed8 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <MX_GPIO_Init+0x11c>)
 800259a:	2200      	movs	r2, #0
 800259c:	2101      	movs	r1, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 fed2 	bl	8003348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	0192      	lsls	r2, r2, #6
 80025aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	2284      	movs	r2, #132	; 0x84
 80025b0:	0392      	lsls	r2, r2, #14
 80025b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <MX_GPIO_Init+0x120>)
 80025be:	0019      	movs	r1, r3
 80025c0:	0010      	movs	r0, r2
 80025c2:	f000 fd5d 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	2220      	movs	r2, #32
 80025ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	2201      	movs	r2, #1
 80025d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d8:	193b      	adds	r3, r7, r4
 80025da:	2202      	movs	r2, #2
 80025dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80025de:	193a      	adds	r2, r7, r4
 80025e0:	23a0      	movs	r3, #160	; 0xa0
 80025e2:	05db      	lsls	r3, r3, #23
 80025e4:	0011      	movs	r1, r2
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fd4a 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80025ec:	0021      	movs	r1, r4
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2201      	movs	r2, #1
 80025f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002606:	187b      	adds	r3, r7, r1
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <MX_GPIO_Init+0x11c>)
 800260a:	0019      	movs	r1, r3
 800260c:	0010      	movs	r0, r2
 800260e:	f000 fd37 	bl	8003080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2103      	movs	r1, #3
 8002616:	2007      	movs	r0, #7
 8002618:	f000 fc40 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800261c:	2007      	movs	r0, #7
 800261e:	f000 fc52 	bl	8002ec6 <HAL_NVIC_EnableIRQ>

}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b00b      	add	sp, #44	; 0x2c
 8002628:	bd90      	pop	{r4, r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	50000400 	.word	0x50000400
 8002634:	50000800 	.word	0x50000800

08002638 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	0002      	movs	r2, r0
 8002640:	1dbb      	adds	r3, r7, #6
 8002642:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 8002644:	1dbb      	adds	r3, r7, #6
 8002646:	881a      	ldrh	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	019b      	lsls	r3, r3, #6
 800264c:	429a      	cmp	r2, r3
 800264e:	d10b      	bne.n	8002668 <HAL_GPIO_EXTI_Falling_Callback+0x30>
  {
    osThreadFlagsSet(blinkingRatioThreadHandle, BIT_1);
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2102      	movs	r1, #2
 8002656:	0018      	movs	r0, r3
 8002658:	f004 fc30 	bl	8006ebc <osThreadFlagsSet>
    osThreadFlagsSet(sendByteOverUartHandle, BIT_1);
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2102      	movs	r1, #2
 8002662:	0018      	movs	r0, r3
 8002664:	f004 fc2a 	bl	8006ebc <osThreadFlagsSet>

  }
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200002fc 	.word	0x200002fc
 8002674:	20000304 	.word	0x20000304

08002678 <ToggleLEDThread>:

void ToggleLEDThread(void * argument)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    osDelay(blinking_ratio);
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <ToggleLEDThread+0x20>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0018      	movs	r0, r3
 8002686:	f004 fce3 	bl	8007050 <osDelay>
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800268a:	23a0      	movs	r3, #160	; 0xa0
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	2120      	movs	r1, #32
 8002690:	0018      	movs	r0, r3
 8002692:	f000 fe76 	bl	8003382 <HAL_GPIO_TogglePin>
    osDelay(blinking_ratio);
 8002696:	e7f3      	b.n	8002680 <ToggleLEDThread+0x8>
 8002698:	20000000 	.word	0x20000000

0800269c <ChangeBlinkingRatio>:
  }
}

void ChangeBlinkingRatio(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  if (blinking_ratio == 250)
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <ChangeBlinkingRatio+0x24>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2bfa      	cmp	r3, #250	; 0xfa
 80026a6:	d104      	bne.n	80026b2 <ChangeBlinkingRatio+0x16>
    blinking_ratio = 1000;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <ChangeBlinkingRatio+0x24>)
 80026aa:	22fa      	movs	r2, #250	; 0xfa
 80026ac:	0092      	lsls	r2, r2, #2
 80026ae:	601a      	str	r2, [r3, #0]
  else
    blinking_ratio = 250;
}
 80026b0:	e002      	b.n	80026b8 <ChangeBlinkingRatio+0x1c>
    blinking_ratio = 250;
 80026b2:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <ChangeBlinkingRatio+0x24>)
 80026b4:	22fa      	movs	r2, #250	; 0xfa
 80026b6:	601a      	str	r2, [r3, #0]
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	20000000 	.word	0x20000000

080026c4 <ChangeBlinkingRatioThread>:

void ChangeBlinkingRatioThread(void * argument)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  (void) argument;
  for(;;)
  {
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 80026cc:	2301      	movs	r3, #1
 80026ce:	425b      	negs	r3, r3
 80026d0:	001a      	movs	r2, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	2002      	movs	r0, #2
 80026d6:	f004 fc3b 	bl	8006f50 <osThreadFlagsWait>

    ChangeBlinkingRatio();
 80026da:	f7ff ffdf 	bl	800269c <ChangeBlinkingRatio>
    osThreadFlagsWait(BIT_1, osFlagsWaitAny, osWaitForever);
 80026de:	e7f5      	b.n	80026cc <ChangeBlinkingRatioThread+0x8>

080026e0 <SendBytOverUartThread>:
const uint8_t button_press_str[] = "Button pressed\r\n";
const uint8_t data_rec_str[] = "received sth\r\n";
const uint8_t data_rec_e_str[] = "received e\r\n";

void SendBytOverUartThread(void *argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  (void) argument;
  uint32_t events = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 80026ec:	2301      	movs	r3, #1
 80026ee:	425b      	negs	r3, r3
 80026f0:	001a      	movs	r2, r3
 80026f2:	2100      	movs	r1, #0
 80026f4:	2003      	movs	r0, #3
 80026f6:	f004 fc2b 	bl	8006f50 <osThreadFlagsWait>
 80026fa:	0003      	movs	r3, r0
 80026fc:	60fb      	str	r3, [r7, #12]

    switch (events)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d003      	beq.n	800270c <SendBytOverUartThread+0x2c>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d014      	beq.n	8002734 <SendBytOverUartThread+0x54>
        break;
      case BIT_1:
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
        break;
      default:
        break;
 800270a:	e01b      	b.n	8002744 <SendBytOverUartThread+0x64>
        if (rec_character == 'e')
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <SendBytOverUartThread+0x68>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b65      	cmp	r3, #101	; 0x65
 8002712:	d107      	bne.n	8002724 <SendBytOverUartThread+0x44>
          HAL_UART_Transmit(&huart2, data_rec_e_str, sizeof(data_rec_e_str), 500);
 8002714:	23fa      	movs	r3, #250	; 0xfa
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <SendBytOverUartThread+0x6c>)
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <SendBytOverUartThread+0x70>)
 800271c:	220d      	movs	r2, #13
 800271e:	f002 fa41 	bl	8004ba4 <HAL_UART_Transmit>
        break;
 8002722:	e00f      	b.n	8002744 <SendBytOverUartThread+0x64>
          HAL_UART_Transmit(&huart2, data_rec_str, sizeof(data_rec_str), 500);
 8002724:	23fa      	movs	r3, #250	; 0xfa
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	490a      	ldr	r1, [pc, #40]	; (8002754 <SendBytOverUartThread+0x74>)
 800272a:	4809      	ldr	r0, [pc, #36]	; (8002750 <SendBytOverUartThread+0x70>)
 800272c:	220f      	movs	r2, #15
 800272e:	f002 fa39 	bl	8004ba4 <HAL_UART_Transmit>
        break;
 8002732:	e007      	b.n	8002744 <SendBytOverUartThread+0x64>
        HAL_UART_Transmit(&huart2, button_press_str, sizeof(button_press_str), 500);
 8002734:	23fa      	movs	r3, #250	; 0xfa
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <SendBytOverUartThread+0x78>)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <SendBytOverUartThread+0x70>)
 800273c:	2211      	movs	r2, #17
 800273e:	f002 fa31 	bl	8004ba4 <HAL_UART_Transmit>
        break;
 8002742:	46c0      	nop			; (mov r8, r8)
    events = osThreadFlagsWait(BIT_0 | BIT_1, osFlagsWaitAny, osWaitForever);
 8002744:	e7d2      	b.n	80026ec <SendBytOverUartThread+0xc>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000308 	.word	0x20000308
 800274c:	0800c588 	.word	0x0800c588
 8002750:	20000264 	.word	0x20000264
 8002754:	0800c578 	.word	0x0800c578
 8002758:	0800c564 	.word	0x0800c564

0800275c <HAL_UART_RxCpltCallback>:
    }
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_UART_RxCpltCallback+0x34>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10b      	bne.n	8002786 <HAL_UART_RxCpltCallback+0x2a>
  {
    osThreadFlagsSet(sendByteOverUartHandle, BIT_0);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_UART_RxCpltCallback+0x38>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	0018      	movs	r0, r3
 8002776:	f004 fba1 	bl	8006ebc <osThreadFlagsSet>
    HAL_UART_Receive_IT(&huart2, &rec_character, sizeof(rec_character));
 800277a:	4907      	ldr	r1, [pc, #28]	; (8002798 <HAL_UART_RxCpltCallback+0x3c>)
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_UART_RxCpltCallback+0x40>)
 800277e:	2201      	movs	r2, #1
 8002780:	0018      	movs	r0, r3
 8002782:	f002 faab 	bl	8004cdc <HAL_UART_Receive_IT>
  }
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	40004400 	.word	0x40004400
 8002794:	20000304 	.word	0x20000304
 8002798:	20000308 	.word	0x20000308
 800279c:	20000264 	.word	0x20000264

080027a0 <AccelMachineState>:

void AccelMachineState(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  break;

  // TODO add more states according to datasheet

  default:
  break;
 80027a4:	46c0      	nop			; (mov r8, r8)
  }
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <AccelServiceThread>:

void AccelServiceThread(void *argument)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  (void) argument;
  for (;;)
  {
    AccelMachineState();
 80027b4:	f7ff fff4 	bl	80027a0 <AccelMachineState>
 80027b8:	e7fc      	b.n	80027b4 <AccelServiceThread+0x8>

080027ba <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80027c2:	23fa      	movs	r3, #250	; 0xfa
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	0018      	movs	r0, r3
 80027c8:	f004 fc42 	bl	8007050 <osDelay>
 80027cc:	e7f9      	b.n	80027c2 <StartDefaultTask+0x8>
	...

080027d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027e2:	f000 fab7 	bl	8002d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b002      	add	sp, #8
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40001000 	.word	0x40001000

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	e7fe      	b.n	80027fc <Error_Handler+0x8>
	...

08002800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_MspInit+0x50>)
 8002808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_MspInit+0x50>)
 800280c:	2101      	movs	r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_MspInit+0x50>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	2201      	movs	r2, #1
 8002818:	4013      	ands	r3, r2
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_MspInit+0x50>)
 8002820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_MspInit+0x50>)
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0549      	lsls	r1, r1, #21
 8002828:	430a      	orrs	r2, r1
 800282a:	63da      	str	r2, [r3, #60]	; 0x3c
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <HAL_MspInit+0x50>)
 800282e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	055b      	lsls	r3, r3, #21
 8002834:	4013      	ands	r3, r2
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800283a:	2302      	movs	r3, #2
 800283c:	425b      	negs	r3, r3
 800283e:	2200      	movs	r2, #0
 8002840:	2103      	movs	r1, #3
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fb2a 	bl	8002e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b08b      	sub	sp, #44	; 0x2c
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	2414      	movs	r4, #20
 800285e:	193b      	adds	r3, r7, r4
 8002860:	0018      	movs	r0, r3
 8002862:	2314      	movs	r3, #20
 8002864:	001a      	movs	r2, r3
 8002866:	2100      	movs	r1, #0
 8002868:	f007 f864 	bl	8009934 <memset>
  if(hspi->Instance==SPI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_SPI_MspInit+0x9c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d138      	bne.n	80028e8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002876:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_SPI_MspInit+0xa0>)
 8002878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_SPI_MspInit+0xa0>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0149      	lsls	r1, r1, #5
 8002880:	430a      	orrs	r2, r1
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_SPI_MspInit+0xa0>)
 8002886:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_SPI_MspInit+0xa0>)
 8002894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <HAL_SPI_MspInit+0xa0>)
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_SPI_MspInit+0xa0>)
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	2201      	movs	r2, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80028aa:	0021      	movs	r1, r4
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	22c2      	movs	r2, #194	; 0xc2
 80028b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2202      	movs	r2, #2
 80028b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	187b      	adds	r3, r7, r1
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	187a      	adds	r2, r7, r1
 80028cc:	23a0      	movs	r3, #160	; 0xa0
 80028ce:	05db      	lsls	r3, r3, #23
 80028d0:	0011      	movs	r1, r2
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 fbd4 	bl	8003080 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2103      	movs	r1, #3
 80028dc:	2019      	movs	r0, #25
 80028de:	f000 fadd 	bl	8002e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028e2:	2019      	movs	r0, #25
 80028e4:	f000 faef 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028e8:	46c0      	nop			; (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b00b      	add	sp, #44	; 0x2c
 80028ee:	bd90      	pop	{r4, r7, pc}
 80028f0:	40013000 	.word	0x40013000
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b097      	sub	sp, #92	; 0x5c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	2344      	movs	r3, #68	; 0x44
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	0018      	movs	r0, r3
 8002906:	2314      	movs	r3, #20
 8002908:	001a      	movs	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f007 f812 	bl	8009934 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002910:	2410      	movs	r4, #16
 8002912:	193b      	adds	r3, r7, r4
 8002914:	0018      	movs	r0, r3
 8002916:	2334      	movs	r3, #52	; 0x34
 8002918:	001a      	movs	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f007 f80a 	bl	8009934 <memset>
  if(huart->Instance==USART2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <HAL_UART_MspInit+0xc8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d146      	bne.n	80029b8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800292a:	193b      	adds	r3, r7, r4
 800292c:	2202      	movs	r2, #2
 800292e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002930:	193b      	adds	r3, r7, r4
 8002932:	2200      	movs	r2, #0
 8002934:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002936:	193b      	adds	r3, r7, r4
 8002938:	0018      	movs	r0, r3
 800293a:	f001 faab 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002942:	f7ff ff57 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_UART_MspInit+0xcc>)
 8002948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_UART_MspInit+0xcc>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0289      	lsls	r1, r1, #10
 8002950:	430a      	orrs	r2, r1
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_UART_MspInit+0xcc>)
 8002956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_UART_MspInit+0xcc>)
 8002964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_UART_MspInit+0xcc>)
 8002968:	2101      	movs	r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0xcc>)
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002972:	2201      	movs	r2, #1
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800297a:	2144      	movs	r1, #68	; 0x44
 800297c:	187b      	adds	r3, r7, r1
 800297e:	220c      	movs	r2, #12
 8002980:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2202      	movs	r2, #2
 8002986:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2201      	movs	r2, #1
 800298c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2201      	movs	r2, #1
 8002998:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	187a      	adds	r2, r7, r1
 800299c:	23a0      	movs	r3, #160	; 0xa0
 800299e:	05db      	lsls	r3, r3, #23
 80029a0:	0011      	movs	r1, r2
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 fb6c 	bl	8003080 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2103      	movs	r1, #3
 80029ac:	201c      	movs	r0, #28
 80029ae:	f000 fa75 	bl	8002e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029b2:	201c      	movs	r0, #28
 80029b4:	f000 fa87 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029b8:	46c0      	nop			; (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b017      	add	sp, #92	; 0x5c
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40004400 	.word	0x40004400
 80029c4:	40021000 	.word	0x40021000

080029c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b08c      	sub	sp, #48	; 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80029d0:	232b      	movs	r3, #43	; 0x2b
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_InitTick+0xf0>)
 80029da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_InitTick+0xf0>)
 80029de:	2110      	movs	r1, #16
 80029e0:	430a      	orrs	r2, r1
 80029e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e4:	4b34      	ldr	r3, [pc, #208]	; (8002ab8 <HAL_InitTick+0xf0>)
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029f0:	230c      	movs	r3, #12
 80029f2:	18fa      	adds	r2, r7, r3
 80029f4:	2410      	movs	r4, #16
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f001 fa20 	bl	8003e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a0c:	f001 fa02 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8002a10:	0003      	movs	r3, r0
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a14:	e004      	b.n	8002a20 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a16:	f001 f9fd 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	4926      	ldr	r1, [pc, #152]	; (8002abc <HAL_InitTick+0xf4>)
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fd fb8b 	bl	8000140 <__udivsi3>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a32:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_InitTick+0xfc>)
 8002a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a38:	4a23      	ldr	r2, [pc, #140]	; (8002ac8 <HAL_InitTick+0x100>)
 8002a3a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a3c:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8002a42:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a54:	252b      	movs	r5, #43	; 0x2b
 8002a56:	197c      	adds	r4, r7, r5
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f001 fda6 	bl	80045ac <HAL_TIM_Base_Init>
 8002a60:	0003      	movs	r3, r0
 8002a62:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002a64:	197b      	adds	r3, r7, r5
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d11e      	bne.n	8002aaa <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a6c:	197c      	adds	r4, r7, r5
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_InitTick+0xf8>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 fdfb 	bl	800466c <HAL_TIM_Base_Start_IT>
 8002a76:	0003      	movs	r3, r0
 8002a78:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8002a7a:	197b      	adds	r3, r7, r5
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8002a82:	2011      	movs	r0, #17
 8002a84:	f000 fa1f 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d809      	bhi.n	8002aa2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	0019      	movs	r1, r3
 8002a94:	2011      	movs	r0, #17
 8002a96:	f000 fa01 	bl	8002e9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_InitTick+0x104>)
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e003      	b.n	8002aaa <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8002aa2:	232b      	movs	r3, #43	; 0x2b
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8002aaa:	232b      	movs	r3, #43	; 0x2b
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	781b      	ldrb	r3, [r3, #0]
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b00c      	add	sp, #48	; 0x30
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	000f4240 	.word	0x000f4240
 8002ac0:	20000310 	.word	0x20000310
 8002ac4:	40001000 	.word	0x40001000
 8002ac8:	000003e7 	.word	0x000003e7
 8002acc:	20000008 	.word	0x20000008

08002ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad4:	e7fe      	b.n	8002ad4 <NMI_Handler+0x4>

08002ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ada:	e7fe      	b.n	8002ada <HardFault_Handler+0x4>

08002adc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	019b      	lsls	r3, r3, #6
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 fc67 	bl	80033b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8002af6:	0018      	movs	r0, r3
 8002af8:	f001 fe14 	bl	8004724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	20000310 	.word	0x20000310

08002b08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <SPI1_IRQHandler+0x14>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f001 fc30 	bl	8004374 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	20000200 	.word	0x20000200

08002b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <USART2_IRQHandler+0x14>)
 8002b26:	0018      	movs	r0, r3
 8002b28:	f002 f936 	bl	8004d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	20000264 	.word	0x20000264

08002b38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_kill>:

int _kill(int pid, int sig)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b4e:	f006 fdb9 	bl	80096c4 <__errno>
 8002b52:	0003      	movs	r3, r0
 8002b54:	2216      	movs	r2, #22
 8002b56:	601a      	str	r2, [r3, #0]
  return -1;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	425b      	negs	r3, r3
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <_exit>:

void _exit (int status)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	425a      	negs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff ffe5 	bl	8002b44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b7a:	e7fe      	b.n	8002b7a <_exit+0x16>

08002b7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e00a      	b.n	8002ba4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b8e:	e000      	b.n	8002b92 <_read+0x16>
 8002b90:	bf00      	nop
 8002b92:	0001      	movs	r1, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	60ba      	str	r2, [r7, #8]
 8002b9a:	b2ca      	uxtb	r2, r1
 8002b9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	dbf0      	blt.n	8002b8e <_read+0x12>
  }

  return len;
 8002bac:	687b      	ldr	r3, [r7, #4]
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b006      	add	sp, #24
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e009      	b.n	8002bdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	60ba      	str	r2, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	e000      	b.n	8002bd6 <_write+0x20>
 8002bd4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf1      	blt.n	8002bc8 <_write+0x12>
  }
  return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b006      	add	sp, #24
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_close>:

int _close(int file)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	425b      	negs	r3, r3
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2280      	movs	r2, #128	; 0x80
 8002c10:	0192      	lsls	r2, r2, #6
 8002c12:	605a      	str	r2, [r3, #4]
  return 0;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b002      	add	sp, #8
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_isatty>:

int _isatty(int file)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	0018      	movs	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	b004      	add	sp, #16
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <_sbrk+0x5c>)
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <_sbrk+0x60>)
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <_sbrk+0x64>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <_sbrk+0x64>)
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <_sbrk+0x68>)
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	18d3      	adds	r3, r2, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d207      	bcs.n	8002c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c78:	f006 fd24 	bl	80096c4 <__errno>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	220c      	movs	r2, #12
 8002c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	425b      	negs	r3, r3
 8002c86:	e009      	b.n	8002c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	18d2      	adds	r2, r2, r3
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <_sbrk+0x64>)
 8002c98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20009000 	.word	0x20009000
 8002ca8:	00000400 	.word	0x00000400
 8002cac:	2000035c 	.word	0x2000035c
 8002cb0:	20001d80 	.word	0x20001d80

08002cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cc4:	f7ff fff6 	bl	8002cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8002cca:	490d      	ldr	r1, [pc, #52]	; (8002d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <LoopForever+0xe>)
  movs r3, #0
 8002cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd0:	e002      	b.n	8002cd8 <LoopCopyDataInit>

08002cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd6:	3304      	adds	r3, #4

08002cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cdc:	d3f9      	bcc.n	8002cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ce0:	4c0a      	ldr	r4, [pc, #40]	; (8002d0c <LoopForever+0x16>)
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce4:	e001      	b.n	8002cea <LoopFillZerobss>

08002ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce8:	3204      	adds	r2, #4

08002cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cec:	d3fb      	bcc.n	8002ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cee:	f006 fdf1 	bl	80098d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002cf2:	f7ff fad5 	bl	80022a0 <main>

08002cf6 <LoopForever>:

LoopForever:
  b LoopForever
 8002cf6:	e7fe      	b.n	8002cf6 <LoopForever>
  ldr   r0, =_estack
 8002cf8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d00:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002d04:	0800ca5c 	.word	0x0800ca5c
  ldr r2, =_sbss
 8002d08:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002d0c:	20001d7c 	.word	0x20001d7c

08002d10 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <ADC1_COMP_IRQHandler>
	...

08002d14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_Init+0x3c>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_Init+0x3c>)
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	0049      	lsls	r1, r1, #1
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d2e:	2003      	movs	r0, #3
 8002d30:	f7ff fe4a 	bl	80029c8 <HAL_InitTick>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	e001      	b.n	8002d44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002d40:	f7ff fd5e 	bl	8002800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d44:	1dfb      	adds	r3, r7, #7
 8002d46:	781b      	ldrb	r3, [r3, #0]
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40022000 	.word	0x40022000

08002d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_IncTick+0x1c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_IncTick+0x20>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	18d2      	adds	r2, r2, r3
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_IncTick+0x20>)
 8002d66:	601a      	str	r2, [r3, #0]
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	2000000c 	.word	0x2000000c
 8002d74:	20000360 	.word	0x20000360

08002d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <HAL_GetTick+0x10>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000360 	.word	0x20000360

08002d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	0002      	movs	r2, r0
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	d809      	bhi.n	8002db4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da0:	1dfb      	adds	r3, r7, #7
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	001a      	movs	r2, r3
 8002da6:	231f      	movs	r3, #31
 8002da8:	401a      	ands	r2, r3
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_EnableIRQ+0x30>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	4091      	lsls	r1, r2
 8002db0:	000a      	movs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	1dfb      	adds	r3, r7, #7
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002dd4:	d828      	bhi.n	8002e28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dd6:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <__NVIC_SetPriority+0xd4>)
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	33c0      	adds	r3, #192	; 0xc0
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	589b      	ldr	r3, [r3, r2]
 8002de6:	1dfa      	adds	r2, r7, #7
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	0011      	movs	r1, r2
 8002dec:	2203      	movs	r2, #3
 8002dee:	400a      	ands	r2, r1
 8002df0:	00d2      	lsls	r2, r2, #3
 8002df2:	21ff      	movs	r1, #255	; 0xff
 8002df4:	4091      	lsls	r1, r2
 8002df6:	000a      	movs	r2, r1
 8002df8:	43d2      	mvns	r2, r2
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	019b      	lsls	r3, r3, #6
 8002e02:	22ff      	movs	r2, #255	; 0xff
 8002e04:	401a      	ands	r2, r3
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	4003      	ands	r3, r0
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e14:	481f      	ldr	r0, [pc, #124]	; (8002e94 <__NVIC_SetPriority+0xd4>)
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	33c0      	adds	r3, #192	; 0xc0
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e26:	e031      	b.n	8002e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e28:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <__NVIC_SetPriority+0xd8>)
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	0019      	movs	r1, r3
 8002e30:	230f      	movs	r3, #15
 8002e32:	400b      	ands	r3, r1
 8002e34:	3b08      	subs	r3, #8
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3306      	adds	r3, #6
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	18d3      	adds	r3, r2, r3
 8002e3e:	3304      	adds	r3, #4
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1dfa      	adds	r2, r7, #7
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	0011      	movs	r1, r2
 8002e48:	2203      	movs	r2, #3
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	00d2      	lsls	r2, r2, #3
 8002e4e:	21ff      	movs	r1, #255	; 0xff
 8002e50:	4091      	lsls	r1, r2
 8002e52:	000a      	movs	r2, r1
 8002e54:	43d2      	mvns	r2, r2
 8002e56:	401a      	ands	r2, r3
 8002e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	22ff      	movs	r2, #255	; 0xff
 8002e60:	401a      	ands	r2, r3
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	0018      	movs	r0, r3
 8002e68:	2303      	movs	r3, #3
 8002e6a:	4003      	ands	r3, r0
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e70:	4809      	ldr	r0, [pc, #36]	; (8002e98 <__NVIC_SetPriority+0xd8>)
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	001c      	movs	r4, r3
 8002e78:	230f      	movs	r3, #15
 8002e7a:	4023      	ands	r3, r4
 8002e7c:	3b08      	subs	r3, #8
 8002e7e:	089b      	lsrs	r3, r3, #2
 8002e80:	430a      	orrs	r2, r1
 8002e82:	3306      	adds	r3, #6
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	18c3      	adds	r3, r0, r3
 8002e88:	3304      	adds	r3, #4
 8002e8a:	601a      	str	r2, [r3, #0]
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b003      	add	sp, #12
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	1c02      	adds	r2, r0, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	187b      	adds	r3, r7, r1
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	0011      	movs	r1, r2
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff ff81 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	0002      	movs	r2, r0
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed2:	1dfb      	adds	r3, r7, #7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ff57 	bl	8002d8c <__NVIC_EnableIRQ>
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e050      	b.n	8002f9c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2225      	movs	r2, #37	; 0x25
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d008      	beq.n	8002f18 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	2100      	movs	r1, #0
 8002f12:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e041      	b.n	8002f9c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	210e      	movs	r1, #14
 8002f24:	438a      	bics	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	491c      	ldr	r1, [pc, #112]	; (8002fa4 <HAL_DMA_Abort+0xbc>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	438a      	bics	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_DMA_Abort+0xc0>)
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	221c      	movs	r2, #28
 8002f52:	4013      	ands	r3, r2
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_DMA_Abort+0xc0>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00c      	beq.n	8002f8a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <HAL_DMA_Abort+0xbc>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2225      	movs	r2, #37	; 0x25
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2224      	movs	r2, #36	; 0x24
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	fffffeff 	.word	0xfffffeff
 8002fa8:	40020000 	.word	0x40020000

08002fac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2225      	movs	r2, #37	; 0x25
 8002fc0:	5c9b      	ldrb	r3, [r3, r2]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d006      	beq.n	8002fd6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e049      	b.n	800306a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	210e      	movs	r1, #14
 8002fe2:	438a      	bics	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	491d      	ldr	r1, [pc, #116]	; (8003078 <HAL_DMA_Abort_IT+0xcc>)
 8003002:	400a      	ands	r2, r1
 8003004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_DMA_Abort_IT+0xd0>)
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	221c      	movs	r2, #28
 8003010:	4013      	ands	r3, r2
 8003012:	2201      	movs	r2, #1
 8003014:	409a      	lsls	r2, r3
 8003016:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_DMA_Abort_IT+0xd0>)
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003024:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	490f      	ldr	r1, [pc, #60]	; (8003078 <HAL_DMA_Abort_IT+0xcc>)
 800303a:	400a      	ands	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003046:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2225      	movs	r2, #37	; 0x25
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	; 0x24
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	0010      	movs	r0, r2
 8003068:	4798      	blx	r3
    }
  }
  return status;
 800306a:	230f      	movs	r3, #15
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	781b      	ldrb	r3, [r3, #0]
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	b004      	add	sp, #16
 8003076:	bd80      	pop	{r7, pc}
 8003078:	fffffeff 	.word	0xfffffeff
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308e:	e147      	b.n	8003320 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4091      	lsls	r1, r2
 800309a:	000a      	movs	r2, r1
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d100      	bne.n	80030a8 <HAL_GPIO_Init+0x28>
 80030a6:	e138      	b.n	800331a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d005      	beq.n	80030c0 <HAL_GPIO_Init+0x40>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d130      	bne.n	8003122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	409a      	lsls	r2, r3
 80030ce:	0013      	movs	r3, r2
 80030d0:	43da      	mvns	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	0013      	movs	r3, r2
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f6:	2201      	movs	r2, #1
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	409a      	lsls	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	43da      	mvns	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	2201      	movs	r2, #1
 800310e:	401a      	ands	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	409a      	lsls	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2203      	movs	r2, #3
 8003128:	4013      	ands	r3, r2
 800312a:	2b03      	cmp	r3, #3
 800312c:	d017      	beq.n	800315e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	2203      	movs	r2, #3
 800313a:	409a      	lsls	r2, r3
 800313c:	0013      	movs	r3, r2
 800313e:	43da      	mvns	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	0013      	movs	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	4013      	ands	r3, r2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d123      	bne.n	80031b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	08da      	lsrs	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3208      	adds	r2, #8
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	58d3      	ldr	r3, [r2, r3]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2207      	movs	r2, #7
 800317c:	4013      	ands	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	409a      	lsls	r2, r3
 8003184:	0013      	movs	r3, r2
 8003186:	43da      	mvns	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4013      	ands	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2107      	movs	r1, #7
 8003196:	400b      	ands	r3, r1
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	409a      	lsls	r2, r3
 800319c:	0013      	movs	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	08da      	lsrs	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3208      	adds	r2, #8
 80031ac:	0092      	lsls	r2, r2, #2
 80031ae:	6939      	ldr	r1, [r7, #16]
 80031b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	409a      	lsls	r2, r3
 80031c0:	0013      	movs	r3, r2
 80031c2:	43da      	mvns	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2203      	movs	r2, #3
 80031d0:	401a      	ands	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	409a      	lsls	r2, r3
 80031d8:	0013      	movs	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	23c0      	movs	r3, #192	; 0xc0
 80031ec:	029b      	lsls	r3, r3, #10
 80031ee:	4013      	ands	r3, r2
 80031f0:	d100      	bne.n	80031f4 <HAL_GPIO_Init+0x174>
 80031f2:	e092      	b.n	800331a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031f4:	4a50      	ldr	r2, [pc, #320]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3318      	adds	r3, #24
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	589b      	ldr	r3, [r3, r2]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2203      	movs	r2, #3
 8003206:	4013      	ands	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	220f      	movs	r2, #15
 800320c:	409a      	lsls	r2, r3
 800320e:	0013      	movs	r3, r2
 8003210:	43da      	mvns	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	23a0      	movs	r3, #160	; 0xa0
 800321c:	05db      	lsls	r3, r3, #23
 800321e:	429a      	cmp	r2, r3
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x1ca>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a45      	ldr	r2, [pc, #276]	; (800333c <HAL_GPIO_Init+0x2bc>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x1c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a44      	ldr	r2, [pc, #272]	; (8003340 <HAL_GPIO_Init+0x2c0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x1c2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a43      	ldr	r2, [pc, #268]	; (8003344 <HAL_GPIO_Init+0x2c4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x1be>
 800323a:	2303      	movs	r3, #3
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x1cc>
 800323e:	2305      	movs	r3, #5
 8003240:	e004      	b.n	800324c <HAL_GPIO_Init+0x1cc>
 8003242:	2302      	movs	r3, #2
 8003244:	e002      	b.n	800324c <HAL_GPIO_Init+0x1cc>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_GPIO_Init+0x1cc>
 800324a:	2300      	movs	r3, #0
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	2103      	movs	r1, #3
 8003250:	400a      	ands	r2, r1
 8003252:	00d2      	lsls	r2, r2, #3
 8003254:	4093      	lsls	r3, r2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800325c:	4936      	ldr	r1, [pc, #216]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	3318      	adds	r3, #24
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	035b      	lsls	r3, r3, #13
 8003282:	4013      	ands	r3, r2
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43da      	mvns	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	039b      	lsls	r3, r3, #14
 80032ac:	4013      	ands	r3, r2
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032be:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 80032c0:	2384      	movs	r3, #132	; 0x84
 80032c2:	58d3      	ldr	r3, [r2, r3]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032e4:	4914      	ldr	r1, [pc, #80]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 80032e6:	2284      	movs	r2, #132	; 0x84
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	58d3      	ldr	r3, [r2, r3]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	025b      	lsls	r3, r3, #9
 8003306:	4013      	ands	r3, r2
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003312:	4909      	ldr	r1, [pc, #36]	; (8003338 <HAL_GPIO_Init+0x2b8>)
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	40da      	lsrs	r2, r3
 8003328:	1e13      	subs	r3, r2, #0
 800332a:	d000      	beq.n	800332e <HAL_GPIO_Init+0x2ae>
 800332c:	e6b0      	b.n	8003090 <HAL_GPIO_Init+0x10>
  }
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b006      	add	sp, #24
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021800 	.word	0x40021800
 800333c:	50000400 	.word	0x50000400
 8003340:	50000800 	.word	0x50000800
 8003344:	50000c00 	.word	0x50000c00

08003348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	0008      	movs	r0, r1
 8003352:	0011      	movs	r1, r2
 8003354:	1cbb      	adds	r3, r7, #2
 8003356:	1c02      	adds	r2, r0, #0
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	1c7b      	adds	r3, r7, #1
 800335c:	1c0a      	adds	r2, r1, #0
 800335e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003360:	1c7b      	adds	r3, r7, #1
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003368:	1cbb      	adds	r3, r7, #2
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003370:	e003      	b.n	800337a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003372:	1cbb      	adds	r3, r7, #2
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	000a      	movs	r2, r1
 800338c:	1cbb      	adds	r3, r7, #2
 800338e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003396:	1cbb      	adds	r3, r7, #2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	041a      	lsls	r2, r3, #16
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	1cb9      	adds	r1, r7, #2
 80033a6:	8809      	ldrh	r1, [r1, #0]
 80033a8:	400b      	ands	r3, r1
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	619a      	str	r2, [r3, #24]
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b004      	add	sp, #16
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	0002      	movs	r2, r0
 80033c0:	1dbb      	adds	r3, r7, #6
 80033c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	1dba      	adds	r2, r7, #6
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	4013      	ands	r3, r2
 80033ce:	d008      	beq.n	80033e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033d2:	1dba      	adds	r2, r7, #6
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f815 	bl	800340c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	1dba      	adds	r2, r7, #6
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	4013      	ands	r3, r2
 80033ec:	d008      	beq.n	8003400 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033f0:	1dba      	adds	r2, r7, #6
 80033f2:	8812      	ldrh	r2, [r2, #0]
 80033f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80033f6:	1dbb      	adds	r3, r7, #6
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff f91c 	bl	8002638 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003400:	46c0      	nop			; (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021800 	.word	0x40021800

0800340c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	0002      	movs	r2, r0
 8003414:	1dbb      	adds	r3, r7, #6
 8003416:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800342e:	4013      	ands	r3, r2
 8003430:	0019      	movs	r1, r3
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d11f      	bne.n	8003484 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	0013      	movs	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	189b      	adds	r3, r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4912      	ldr	r1, [pc, #72]	; (800349c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003452:	0018      	movs	r0, r3
 8003454:	f7fc fe74 	bl	8000140 <__udivsi3>
 8003458:	0003      	movs	r3, r0
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800345e:	e008      	b.n	8003472 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e001      	b.n	8003472 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e009      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	401a      	ands	r2, r3
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	429a      	cmp	r2, r3
 8003482:	d0ed      	beq.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	40007000 	.word	0x40007000
 8003494:	fffff9ff 	.word	0xfffff9ff
 8003498:	20000004 	.word	0x20000004
 800349c:	000f4240 	.word	0x000f4240

080034a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	23e0      	movs	r3, #224	; 0xe0
 80034aa:	01db      	lsls	r3, r3, #7
 80034ac:	4013      	ands	r3, r2
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e2fe      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d100      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1e>
 80034d4:	e07c      	b.n	80035d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d6:	4bc3      	ldr	r3, [pc, #780]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2238      	movs	r2, #56	; 0x38
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e0:	4bc0      	ldr	r3, [pc, #768]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2203      	movs	r2, #3
 80034e6:	4013      	ands	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d102      	bne.n	80034f6 <HAL_RCC_OscConfig+0x3e>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d10b      	bne.n	8003514 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	4bb9      	ldr	r3, [pc, #740]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	029b      	lsls	r3, r3, #10
 8003504:	4013      	ands	r3, r2
 8003506:	d062      	beq.n	80035ce <HAL_RCC_OscConfig+0x116>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d15e      	bne.n	80035ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e2d9      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x78>
 8003520:	4bb0      	ldr	r3, [pc, #704]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	4baf      	ldr	r3, [pc, #700]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	0249      	lsls	r1, r1, #9
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e020      	b.n	8003572 <HAL_RCC_OscConfig+0xba>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	23a0      	movs	r3, #160	; 0xa0
 8003536:	02db      	lsls	r3, r3, #11
 8003538:	429a      	cmp	r2, r3
 800353a:	d10e      	bne.n	800355a <HAL_RCC_OscConfig+0xa2>
 800353c:	4ba9      	ldr	r3, [pc, #676]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4ba8      	ldr	r3, [pc, #672]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	02c9      	lsls	r1, r1, #11
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	4ba6      	ldr	r3, [pc, #664]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4ba5      	ldr	r3, [pc, #660]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0249      	lsls	r1, r1, #9
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0xba>
 800355a:	4ba2      	ldr	r3, [pc, #648]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4ba1      	ldr	r3, [pc, #644]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003560:	49a1      	ldr	r1, [pc, #644]	; (80037e8 <HAL_RCC_OscConfig+0x330>)
 8003562:	400a      	ands	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	4b9f      	ldr	r3, [pc, #636]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4b9e      	ldr	r3, [pc, #632]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800356c:	499f      	ldr	r1, [pc, #636]	; (80037ec <HAL_RCC_OscConfig+0x334>)
 800356e:	400a      	ands	r2, r1
 8003570:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d014      	beq.n	80035a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7ff fbfd 	bl	8002d78 <HAL_GetTick>
 800357e:	0003      	movs	r3, r0
 8003580:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003584:	f7ff fbf8 	bl	8002d78 <HAL_GetTick>
 8003588:	0002      	movs	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e298      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b93      	ldr	r3, [pc, #588]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	4013      	ands	r3, r2
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xcc>
 80035a2:	e015      	b.n	80035d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7ff fbe8 	bl	8002d78 <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ae:	f7ff fbe3 	bl	8002d78 <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	; 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e283      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c0:	4b88      	ldr	r3, [pc, #544]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	029b      	lsls	r3, r3, #10
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0xf6>
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2202      	movs	r2, #2
 80035d6:	4013      	ands	r3, r2
 80035d8:	d100      	bne.n	80035dc <HAL_RCC_OscConfig+0x124>
 80035da:	e099      	b.n	8003710 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035dc:	4b81      	ldr	r3, [pc, #516]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2238      	movs	r2, #56	; 0x38
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e6:	4b7f      	ldr	r3, [pc, #508]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2203      	movs	r2, #3
 80035ec:	4013      	ands	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x144>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d002      	beq.n	8003602 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d135      	bne.n	800366e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003602:	4b78      	ldr	r3, [pc, #480]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4013      	ands	r3, r2
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x162>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e256      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b72      	ldr	r3, [pc, #456]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	4a74      	ldr	r2, [pc, #464]	; (80037f0 <HAL_RCC_OscConfig+0x338>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d112      	bne.n	800365c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003636:	4b6b      	ldr	r3, [pc, #428]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x33c>)
 800363c:	4013      	ands	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	4b67      	ldr	r3, [pc, #412]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800364a:	4b66      	ldr	r3, [pc, #408]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0adb      	lsrs	r3, r3, #11
 8003650:	2207      	movs	r2, #7
 8003652:	4013      	ands	r3, r2
 8003654:	4a68      	ldr	r2, [pc, #416]	; (80037f8 <HAL_RCC_OscConfig+0x340>)
 8003656:	40da      	lsrs	r2, r3
 8003658:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCC_OscConfig+0x344>)
 800365a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x348>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0018      	movs	r0, r3
 8003662:	f7ff f9b1 	bl	80029c8 <HAL_InitTick>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d051      	beq.n	800370e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e22c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d030      	beq.n	80036d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003676:	4b5b      	ldr	r3, [pc, #364]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a5e      	ldr	r2, [pc, #376]	; (80037f4 <HAL_RCC_OscConfig+0x33c>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	4b57      	ldr	r3, [pc, #348]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800368a:	4b56      	ldr	r3, [pc, #344]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0049      	lsls	r1, r1, #1
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7ff fb6e 	bl	8002d78 <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a2:	f7ff fb69 	bl	8002d78 <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e209      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4013      	ands	r3, r2
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4b48      	ldr	r3, [pc, #288]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a4a      	ldr	r2, [pc, #296]	; (80037f0 <HAL_RCC_OscConfig+0x338>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	4b44      	ldr	r3, [pc, #272]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e01b      	b.n	8003710 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80036d8:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80036de:	4949      	ldr	r1, [pc, #292]	; (8003804 <HAL_RCC_OscConfig+0x34c>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7ff fb48 	bl	8002d78 <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7ff fb43 	bl	8002d78 <HAL_GetTick>
 80036f2:	0002      	movs	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1e3      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003700:	4b38      	ldr	r3, [pc, #224]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4013      	ands	r3, r2
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x236>
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2208      	movs	r2, #8
 8003716:	4013      	ands	r3, r2
 8003718:	d047      	beq.n	80037aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800371a:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2238      	movs	r2, #56	; 0x38
 8003720:	4013      	ands	r3, r2
 8003722:	2b18      	cmp	r3, #24
 8003724:	d10a      	bne.n	800373c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003726:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d03c      	beq.n	80037aa <HAL_RCC_OscConfig+0x2f2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d138      	bne.n	80037aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e1c5      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d019      	beq.n	8003778 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 8003746:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003748:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800374a:	2101      	movs	r1, #1
 800374c:	430a      	orrs	r2, r1
 800374e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7ff fb12 	bl	8002d78 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7ff fb0d 	bl	8002d78 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e1ad      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	2202      	movs	r2, #2
 8003772:	4013      	ands	r3, r2
 8003774:	d0f1      	beq.n	800375a <HAL_RCC_OscConfig+0x2a2>
 8003776:	e018      	b.n	80037aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800377a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 800377e:	2101      	movs	r1, #1
 8003780:	438a      	bics	r2, r1
 8003782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7ff faf8 	bl	8002d78 <HAL_GetTick>
 8003788:	0003      	movs	r3, r0
 800378a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800378e:	f7ff faf3 	bl	8002d78 <HAL_GetTick>
 8003792:	0002      	movs	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e193      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	2202      	movs	r2, #2
 80037a6:	4013      	ands	r3, r2
 80037a8:	d1f1      	bne.n	800378e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2204      	movs	r2, #4
 80037b0:	4013      	ands	r3, r2
 80037b2:	d100      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2fe>
 80037b4:	e0c6      	b.n	8003944 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	231f      	movs	r3, #31
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2238      	movs	r2, #56	; 0x38
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d11e      	bne.n	8003808 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_OscConfig+0x32c>)
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	2202      	movs	r2, #2
 80037d0:	4013      	ands	r3, r2
 80037d2:	d100      	bne.n	80037d6 <HAL_RCC_OscConfig+0x31e>
 80037d4:	e0b6      	b.n	8003944 <HAL_RCC_OscConfig+0x48c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d000      	beq.n	80037e0 <HAL_RCC_OscConfig+0x328>
 80037de:	e0b1      	b.n	8003944 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e171      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
 80037e4:	40021000 	.word	0x40021000
 80037e8:	fffeffff 	.word	0xfffeffff
 80037ec:	fffbffff 	.word	0xfffbffff
 80037f0:	ffff80ff 	.word	0xffff80ff
 80037f4:	ffffc7ff 	.word	0xffffc7ff
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	20000004 	.word	0x20000004
 8003800:	20000008 	.word	0x20000008
 8003804:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003808:	4bb1      	ldr	r3, [pc, #708]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800380a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	055b      	lsls	r3, r3, #21
 8003810:	4013      	ands	r3, r2
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x360>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x362>
 8003818:	2300      	movs	r3, #0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d011      	beq.n	8003842 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800381e:	4bac      	ldr	r3, [pc, #688]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003822:	4bab      	ldr	r3, [pc, #684]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003824:	2180      	movs	r1, #128	; 0x80
 8003826:	0549      	lsls	r1, r1, #21
 8003828:	430a      	orrs	r2, r1
 800382a:	63da      	str	r2, [r3, #60]	; 0x3c
 800382c:	4ba8      	ldr	r3, [pc, #672]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800382e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	055b      	lsls	r3, r3, #21
 8003834:	4013      	ands	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800383a:	231f      	movs	r3, #31
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003842:	4ba4      	ldr	r3, [pc, #656]	; (8003ad4 <HAL_RCC_OscConfig+0x61c>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4013      	ands	r3, r2
 800384c:	d11a      	bne.n	8003884 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800384e:	4ba1      	ldr	r3, [pc, #644]	; (8003ad4 <HAL_RCC_OscConfig+0x61c>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4ba0      	ldr	r3, [pc, #640]	; (8003ad4 <HAL_RCC_OscConfig+0x61c>)
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	0049      	lsls	r1, r1, #1
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800385c:	f7ff fa8c 	bl	8002d78 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7ff fa87 	bl	8002d78 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e127      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003878:	4b96      	ldr	r3, [pc, #600]	; (8003ad4 <HAL_RCC_OscConfig+0x61c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x3e2>
 800388c:	4b90      	ldr	r3, [pc, #576]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800388e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003890:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	65da      	str	r2, [r3, #92]	; 0x5c
 8003898:	e01c      	b.n	80038d4 <HAL_RCC_OscConfig+0x41c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b05      	cmp	r3, #5
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x404>
 80038a2:	4b8b      	ldr	r3, [pc, #556]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038a6:	4b8a      	ldr	r3, [pc, #552]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038a8:	2104      	movs	r1, #4
 80038aa:	430a      	orrs	r2, r1
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038b2:	4b87      	ldr	r3, [pc, #540]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038b4:	2101      	movs	r1, #1
 80038b6:	430a      	orrs	r2, r1
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0x41c>
 80038bc:	4b84      	ldr	r3, [pc, #528]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038c0:	4b83      	ldr	r3, [pc, #524]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	438a      	bics	r2, r1
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c8:	4b81      	ldr	r3, [pc, #516]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038cc:	4b80      	ldr	r3, [pc, #512]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038ce:	2104      	movs	r1, #4
 80038d0:	438a      	bics	r2, r1
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d014      	beq.n	8003906 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7ff fa4c 	bl	8002d78 <HAL_GetTick>
 80038e0:	0003      	movs	r3, r0
 80038e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e4:	e009      	b.n	80038fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7ff fa47 	bl	8002d78 <HAL_GetTick>
 80038ea:	0002      	movs	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	4a79      	ldr	r2, [pc, #484]	; (8003ad8 <HAL_RCC_OscConfig+0x620>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0e6      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fa:	4b75      	ldr	r3, [pc, #468]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2202      	movs	r2, #2
 8003900:	4013      	ands	r3, r2
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x42e>
 8003904:	e013      	b.n	800392e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7ff fa37 	bl	8002d78 <HAL_GetTick>
 800390a:	0003      	movs	r3, r0
 800390c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800390e:	e009      	b.n	8003924 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7ff fa32 	bl	8002d78 <HAL_GetTick>
 8003914:	0002      	movs	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	4a6f      	ldr	r2, [pc, #444]	; (8003ad8 <HAL_RCC_OscConfig+0x620>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0d1      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	2202      	movs	r2, #2
 800392a:	4013      	ands	r3, r2
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800392e:	231f      	movs	r3, #31
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003938:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800393a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393c:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800393e:	4967      	ldr	r1, [pc, #412]	; (8003adc <HAL_RCC_OscConfig+0x624>)
 8003940:	400a      	ands	r2, r1
 8003942:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d100      	bne.n	800394e <HAL_RCC_OscConfig+0x496>
 800394c:	e0bb      	b.n	8003ac6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394e:	4b60      	ldr	r3, [pc, #384]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2238      	movs	r2, #56	; 0x38
 8003954:	4013      	ands	r3, r2
 8003956:	2b10      	cmp	r3, #16
 8003958:	d100      	bne.n	800395c <HAL_RCC_OscConfig+0x4a4>
 800395a:	e07b      	b.n	8003a54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d156      	bne.n	8003a12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003964:	4b5a      	ldr	r3, [pc, #360]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800396a:	495d      	ldr	r1, [pc, #372]	; (8003ae0 <HAL_RCC_OscConfig+0x628>)
 800396c:	400a      	ands	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7ff fa02 	bl	8002d78 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397a:	f7ff f9fd 	bl	8002d78 <HAL_GetTick>
 800397e:	0002      	movs	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e09d      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	049b      	lsls	r3, r3, #18
 8003994:	4013      	ands	r3, r2
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003998:	4b4d      	ldr	r3, [pc, #308]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a51      	ldr	r2, [pc, #324]	; (8003ae4 <HAL_RCC_OscConfig+0x62c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	431a      	orrs	r2, r3
 80039c6:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b3f      	ldr	r3, [pc, #252]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0449      	lsls	r1, r1, #17
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80039da:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	0549      	lsls	r1, r1, #21
 80039e4:	430a      	orrs	r2, r1
 80039e6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7ff f9c6 	bl	8002d78 <HAL_GetTick>
 80039ec:	0003      	movs	r3, r0
 80039ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7ff f9c1 	bl	8002d78 <HAL_GetTick>
 80039f6:	0002      	movs	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e061      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	049b      	lsls	r3, r3, #18
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x53a>
 8003a10:	e059      	b.n	8003ac6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a18:	4931      	ldr	r1, [pc, #196]	; (8003ae0 <HAL_RCC_OscConfig+0x628>)
 8003a1a:	400a      	ands	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7ff f9ab 	bl	8002d78 <HAL_GetTick>
 8003a22:	0003      	movs	r3, r0
 8003a24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7ff f9a6 	bl	8002d78 <HAL_GetTick>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e046      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3a:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	049b      	lsls	r3, r3, #18
 8003a42:	4013      	ands	r3, r2
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003a46:	4b22      	ldr	r3, [pc, #136]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a4c:	4926      	ldr	r1, [pc, #152]	; (8003ae8 <HAL_RCC_OscConfig+0x630>)
 8003a4e:	400a      	ands	r2, r1
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	e038      	b.n	8003ac6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e033      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCC_OscConfig+0x618>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d126      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2270      	movs	r2, #112	; 0x70
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11f      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	23fe      	movs	r3, #254	; 0xfe
 8003a86:	01db      	lsls	r3, r3, #7
 8003a88:	401a      	ands	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d116      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	23f8      	movs	r3, #248	; 0xf8
 8003a98:	039b      	lsls	r3, r3, #14
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	23e0      	movs	r3, #224	; 0xe0
 8003aa8:	051b      	lsls	r3, r3, #20
 8003aaa:	401a      	ands	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0f5b      	lsrs	r3, r3, #29
 8003ab8:	075a      	lsls	r2, r3, #29
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b008      	add	sp, #32
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	00001388 	.word	0x00001388
 8003adc:	efffffff 	.word	0xefffffff
 8003ae0:	feffffff 	.word	0xfeffffff
 8003ae4:	11c1808c 	.word	0x11c1808c
 8003ae8:	eefefffc 	.word	0xeefefffc

08003aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0e9      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b76      	ldr	r3, [pc, #472]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2207      	movs	r2, #7
 8003b06:	4013      	ands	r3, r2
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d91e      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b73      	ldr	r3, [pc, #460]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2207      	movs	r2, #7
 8003b14:	4393      	bics	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	4b70      	ldr	r3, [pc, #448]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b20:	f7ff f92a 	bl	8002d78 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b28:	e009      	b.n	8003b3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2a:	f7ff f925 	bl	8002d78 <HAL_GetTick>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	4a6a      	ldr	r2, [pc, #424]	; (8003ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0ca      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b3e:	4b67      	ldr	r3, [pc, #412]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2207      	movs	r2, #7
 8003b44:	4013      	ands	r3, r2
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2202      	movs	r2, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	d015      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d006      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b60:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b5f      	ldr	r3, [pc, #380]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b66:	21e0      	movs	r1, #224	; 0xe0
 8003b68:	01c9      	lsls	r1, r1, #7
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4a5d      	ldr	r2, [pc, #372]	; (8003ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d057      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b94:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d12b      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e097      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bac:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	049b      	lsls	r3, r3, #18
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d11f      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e08b      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d113      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e07f      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bdc:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d108      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e074      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bea:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e06d      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	4393      	bics	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0c:	f7ff f8b4 	bl	8002d78 <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c14:	e009      	b.n	8003c2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c16:	f7ff f8af 	bl	8002d78 <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e054      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2238      	movs	r2, #56	; 0x38
 8003c30:	401a      	ands	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1ec      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2207      	movs	r2, #7
 8003c42:	4013      	ands	r3, r2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d21e      	bcs.n	8003c88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2207      	movs	r2, #7
 8003c50:	4393      	bics	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c5c:	f7ff f88c 	bl	8002d78 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c64:	e009      	b.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c66:	f7ff f887 	bl	8002d78 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e02c      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2207      	movs	r2, #7
 8003c80:	4013      	ands	r3, r2
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a15      	ldr	r2, [pc, #84]	; (8003cec <HAL_RCC_ClockConfig+0x200>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ca6:	f000 f829 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003caa:	0001      	movs	r1, r0
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <HAL_RCC_ClockConfig+0x204>)
 8003cb8:	0092      	lsls	r2, r2, #2
 8003cba:	58d3      	ldr	r3, [r2, r3]
 8003cbc:	221f      	movs	r2, #31
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	40da      	lsrs	r2, r3
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_ClockConfig+0x208>)
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_RCC_ClockConfig+0x20c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7fe fe7b 	bl	80029c8 <HAL_InitTick>
 8003cd2:	0003      	movs	r3, r0
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b004      	add	sp, #16
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	00001388 	.word	0x00001388
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	fffff0ff 	.word	0xfffff0ff
 8003cec:	ffff8fff 	.word	0xffff8fff
 8003cf0:	0800c598 	.word	0x0800c598
 8003cf4:	20000004 	.word	0x20000004
 8003cf8:	20000008 	.word	0x20000008

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d02:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2238      	movs	r2, #56	; 0x38
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d10f      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0adb      	lsrs	r3, r3, #11
 8003d12:	2207      	movs	r2, #7
 8003d14:	4013      	ands	r3, r2
 8003d16:	2201      	movs	r2, #1
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	4835      	ldr	r0, [pc, #212]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d22:	f7fc fa0d 	bl	8000140 <__udivsi3>
 8003d26:	0003      	movs	r3, r0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e05d      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2238      	movs	r2, #56	; 0x38
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e054      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2238      	movs	r2, #56	; 0x38
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d138      	bne.n	8003dbc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d10d      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4824      	ldr	r0, [pc, #144]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8003d6c:	f7fc f9e8 	bl	8000140 <__udivsi3>
 8003d70:	0003      	movs	r3, r0
 8003d72:	0019      	movs	r1, r3
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	227f      	movs	r2, #127	; 0x7f
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	434b      	muls	r3, r1
 8003d80:	617b      	str	r3, [r7, #20]
        break;
 8003d82:	e00d      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	481c      	ldr	r0, [pc, #112]	; (8003df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d88:	f7fc f9da 	bl	8000140 <__udivsi3>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	0019      	movs	r1, r3
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	227f      	movs	r2, #127	; 0x7f
 8003d98:	4013      	ands	r3, r2
 8003d9a:	434b      	muls	r3, r1
 8003d9c:	617b      	str	r3, [r7, #20]
        break;
 8003d9e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0f5b      	lsrs	r3, r3, #29
 8003da6:	2207      	movs	r2, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	3301      	adds	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	6978      	ldr	r0, [r7, #20]
 8003db2:	f7fc f9c5 	bl	8000140 <__udivsi3>
 8003db6:	0003      	movs	r3, r0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e015      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2238      	movs	r2, #56	; 0x38
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d103      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2238      	movs	r2, #56	; 0x38
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b18      	cmp	r3, #24
 8003dda:	d103      	bne.n	8003de4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ddc:	23fa      	movs	r3, #250	; 0xfa
 8003dde:	01db      	lsls	r3, r3, #7
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	e001      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003de8:	693b      	ldr	r3, [r7, #16]
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b006      	add	sp, #24
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	40021000 	.word	0x40021000
 8003df8:	00f42400 	.word	0x00f42400
 8003dfc:	007a1200 	.word	0x007a1200

08003e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	20000004 	.word	0x20000004

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e14:	b5b0      	push	{r4, r5, r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e18:	f7ff fff2 	bl	8003e00 <HAL_RCC_GetHCLKFreq>
 8003e1c:	0004      	movs	r4, r0
 8003e1e:	f7ff fb3f 	bl	80034a0 <LL_RCC_GetAPB1Prescaler>
 8003e22:	0003      	movs	r3, r0
 8003e24:	0b1a      	lsrs	r2, r3, #12
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	58d3      	ldr	r3, [r2, r3]
 8003e2c:	221f      	movs	r2, #31
 8003e2e:	4013      	ands	r3, r2
 8003e30:	40dc      	lsrs	r4, r3
 8003e32:	0023      	movs	r3, r4
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bdb0      	pop	{r4, r5, r7, pc}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	0800c5d8 	.word	0x0800c5d8

08003e40 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e50:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_RCC_GetClockConfig+0x4c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2207      	movs	r2, #7
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_GetClockConfig+0x4c>)
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	23f0      	movs	r3, #240	; 0xf0
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	401a      	ands	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_RCC_GetClockConfig+0x4c>)
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	23e0      	movs	r3, #224	; 0xe0
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	401a      	ands	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e78:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_RCC_GetClockConfig+0x50>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	401a      	ands	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	46c0      	nop			; (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40022000 	.word	0x40022000

08003e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e9c:	2313      	movs	r3, #19
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea4:	2312      	movs	r3, #18
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d100      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003eb8:	e0a3      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2011      	movs	r0, #17
 8003ebc:	183b      	adds	r3, r7, r0
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4bc3      	ldr	r3, [pc, #780]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	055b      	lsls	r3, r3, #21
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d110      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4bc0      	ldr	r3, [pc, #768]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed2:	4bbf      	ldr	r3, [pc, #764]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	0549      	lsls	r1, r1, #21
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8003edc:	4bbc      	ldr	r3, [pc, #752]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	055b      	lsls	r3, r3, #21
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	183b      	adds	r3, r7, r0
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4bb8      	ldr	r3, [pc, #736]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4bb7      	ldr	r3, [pc, #732]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	0049      	lsls	r1, r1, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efe:	f7fe ff3b 	bl	8002d78 <HAL_GetTick>
 8003f02:	0003      	movs	r3, r0
 8003f04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f06:	e00b      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fe ff36 	bl	8002d78 <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d904      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003f16:	2313      	movs	r3, #19
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	701a      	strb	r2, [r3, #0]
        break;
 8003f1e:	e005      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f20:	4bac      	ldr	r3, [pc, #688]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d0ed      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003f2c:	2313      	movs	r3, #19
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d154      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f36:	4ba6      	ldr	r3, [pc, #664]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f3a:	23c0      	movs	r3, #192	; 0xc0
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d019      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d014      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f52:	4b9f      	ldr	r3, [pc, #636]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	4aa0      	ldr	r2, [pc, #640]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b9c      	ldr	r3, [pc, #624]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f60:	4b9b      	ldr	r3, [pc, #620]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	0249      	lsls	r1, r1, #9
 8003f66:	430a      	orrs	r2, r1
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6a:	4b99      	ldr	r3, [pc, #612]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f6e:	4b98      	ldr	r3, [pc, #608]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f70:	499a      	ldr	r1, [pc, #616]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f76:	4b96      	ldr	r3, [pc, #600]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4013      	ands	r3, r2
 8003f82:	d016      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fe fef8 	bl	8002d78 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8c:	e00c      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fe fef3 	bl	8002d78 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	4a91      	ldr	r2, [pc, #580]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d904      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f9e:	2313      	movs	r3, #19
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	701a      	strb	r2, [r3, #0]
            break;
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa8:	4b89      	ldr	r3, [pc, #548]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	2202      	movs	r2, #2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d0ed      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003fb2:	2313      	movs	r3, #19
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	4b84      	ldr	r3, [pc, #528]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	4a85      	ldr	r2, [pc, #532]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fca:	4b81      	ldr	r3, [pc, #516]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fd0:	e00c      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2213      	movs	r2, #19
 8003fd8:	18ba      	adds	r2, r7, r2
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	2312      	movs	r3, #18
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2213      	movs	r2, #19
 8003fe6:	18ba      	adds	r2, r7, r2
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fec:	2311      	movs	r3, #17
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b76      	ldr	r3, [pc, #472]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ffa:	4b75      	ldr	r3, [pc, #468]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ffc:	4979      	ldr	r1, [pc, #484]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	4013      	ands	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400c:	4b70      	ldr	r3, [pc, #448]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	2203      	movs	r2, #3
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4b6d      	ldr	r3, [pc, #436]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800401c:	430a      	orrs	r2, r1
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2202      	movs	r2, #2
 8004026:	4013      	ands	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402a:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	220c      	movs	r2, #12
 8004030:	4393      	bics	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	4b65      	ldr	r3, [pc, #404]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800403a:	430a      	orrs	r2, r1
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2210      	movs	r2, #16
 8004044:	4013      	ands	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004048:	4b61      	ldr	r3, [pc, #388]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	4a66      	ldr	r2, [pc, #408]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004058:	430a      	orrs	r2, r1
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4013      	ands	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	4a5f      	ldr	r2, [pc, #380]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800406e:	4013      	ands	r3, r2
 8004070:	0019      	movs	r1, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	4b56      	ldr	r3, [pc, #344]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004078:	430a      	orrs	r2, r1
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4013      	ands	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004088:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	4a58      	ldr	r2, [pc, #352]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800408e:	4013      	ands	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	4b4e      	ldr	r3, [pc, #312]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004098:	430a      	orrs	r2, r1
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2220      	movs	r2, #32
 80040a2:	4013      	ands	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040a6:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	4a52      	ldr	r2, [pc, #328]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	0019      	movs	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	4b46      	ldr	r3, [pc, #280]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040b6:	430a      	orrs	r2, r1
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	01db      	lsls	r3, r3, #7
 80040c2:	4013      	ands	r3, r2
 80040c4:	d015      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c6:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	0899      	lsrs	r1, r3, #2
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040d4:	430a      	orrs	r2, r1
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	05db      	lsls	r3, r3, #23
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d106      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040e4:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	0249      	lsls	r1, r1, #9
 80040ee:	430a      	orrs	r2, r1
 80040f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	4013      	ands	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040fe:	4b34      	ldr	r3, [pc, #208]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	4393      	bics	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410c:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800410e:	430a      	orrs	r2, r1
 8004110:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	039b      	lsls	r3, r3, #14
 800411a:	4013      	ands	r3, r2
 800411c:	d016      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	4a35      	ldr	r2, [pc, #212]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800412e:	430a      	orrs	r2, r1
 8004130:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	03db      	lsls	r3, r3, #15
 800413a:	429a      	cmp	r2, r3
 800413c:	d106      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004144:	2180      	movs	r1, #128	; 0x80
 8004146:	0449      	lsls	r1, r1, #17
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	03db      	lsls	r3, r3, #15
 8004154:	4013      	ands	r3, r2
 8004156:	d016      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	4a27      	ldr	r2, [pc, #156]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004168:	430a      	orrs	r2, r1
 800416a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	045b      	lsls	r3, r3, #17
 8004174:	429a      	cmp	r2, r3
 8004176:	d106      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800417e:	2180      	movs	r1, #128	; 0x80
 8004180:	0449      	lsls	r1, r1, #17
 8004182:	430a      	orrs	r2, r1
 8004184:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4013      	ands	r3, r2
 8004190:	d016      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004192:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	4a1a      	ldr	r2, [pc, #104]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004198:	4013      	ands	r3, r2
 800419a:	0019      	movs	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041a2:	430a      	orrs	r2, r1
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	01db      	lsls	r3, r3, #7
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d106      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	0249      	lsls	r1, r1, #9
 80041bc:	430a      	orrs	r2, r1
 80041be:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80041c0:	2312      	movs	r3, #18
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
}
 80041c6:	0018      	movs	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b006      	add	sp, #24
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40007000 	.word	0x40007000
 80041d8:	fffffcff 	.word	0xfffffcff
 80041dc:	fffeffff 	.word	0xfffeffff
 80041e0:	00001388 	.word	0x00001388
 80041e4:	efffffff 	.word	0xefffffff
 80041e8:	fffff3ff 	.word	0xfffff3ff
 80041ec:	fff3ffff 	.word	0xfff3ffff
 80041f0:	ffcfffff 	.word	0xffcfffff
 80041f4:	ffffcfff 	.word	0xffffcfff
 80041f8:	ffbfffff 	.word	0xffbfffff
 80041fc:	feffffff 	.word	0xfeffffff
 8004200:	ffff3fff 	.word	0xffff3fff

08004204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0a8      	b.n	8004368 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	2382      	movs	r3, #130	; 0x82
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	429a      	cmp	r2, r3
 8004228:	d009      	beq.n	800423e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	61da      	str	r2, [r3, #28]
 8004230:	e005      	b.n	800423e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	225d      	movs	r2, #93	; 0x5d
 8004248:	5c9b      	ldrb	r3, [r3, r2]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	225c      	movs	r2, #92	; 0x5c
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f7fe fafa 	bl	8002854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	225d      	movs	r2, #93	; 0x5d
 8004264:	2102      	movs	r1, #2
 8004266:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	438a      	bics	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	23e0      	movs	r3, #224	; 0xe0
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	429a      	cmp	r2, r3
 8004282:	d902      	bls.n	800428a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e002      	b.n	8004290 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	015b      	lsls	r3, r3, #5
 800428e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	23f0      	movs	r3, #240	; 0xf0
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	429a      	cmp	r2, r3
 800429a:	d008      	beq.n	80042ae <HAL_SPI_Init+0xaa>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	23e0      	movs	r3, #224	; 0xe0
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d002      	beq.n	80042ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	2382      	movs	r3, #130	; 0x82
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	401a      	ands	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6899      	ldr	r1, [r3, #8]
 80042bc:	2384      	movs	r3, #132	; 0x84
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	400b      	ands	r3, r1
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2102      	movs	r1, #2
 80042ca:	400b      	ands	r3, r1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2101      	movs	r1, #1
 80042d4:	400b      	ands	r3, r1
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6999      	ldr	r1, [r3, #24]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	400b      	ands	r3, r1
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	2138      	movs	r1, #56	; 0x38
 80042ea:	400b      	ands	r3, r1
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	2180      	movs	r1, #128	; 0x80
 80042f4:	400b      	ands	r3, r1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	0011      	movs	r1, r2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	019b      	lsls	r3, r3, #6
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	2204      	movs	r2, #4
 8004314:	401a      	ands	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2110      	movs	r1, #16
 800431c:	400b      	ands	r3, r1
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	2108      	movs	r1, #8
 8004326:	400b      	ands	r3, r1
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68d9      	ldr	r1, [r3, #12]
 800432e:	23f0      	movs	r3, #240	; 0xf0
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	400b      	ands	r3, r1
 8004334:	431a      	orrs	r2, r3
 8004336:	0011      	movs	r1, r2
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	015b      	lsls	r3, r3, #5
 800433e:	401a      	ands	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4907      	ldr	r1, [pc, #28]	; (8004370 <HAL_SPI_Init+0x16c>)
 8004354:	400a      	ands	r2, r1
 8004356:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	225d      	movs	r2, #93	; 0x5d
 8004362:	2101      	movs	r1, #1
 8004364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	0018      	movs	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	b004      	add	sp, #16
 800436e:	bd80      	pop	{r7, pc}
 8004370:	fffff7ff 	.word	0xfffff7ff

08004374 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	001a      	movs	r2, r3
 8004392:	2301      	movs	r3, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d10f      	bne.n	80043b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2201      	movs	r2, #1
 800439c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800439e:	d00b      	beq.n	80043b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	099b      	lsrs	r3, r3, #6
 80043a4:	001a      	movs	r2, r3
 80043a6:	2301      	movs	r3, #1
 80043a8:	4013      	ands	r3, r2
 80043aa:	d005      	beq.n	80043b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	0010      	movs	r0, r2
 80043b4:	4798      	blx	r3
    return;
 80043b6:	e0d5      	b.n	8004564 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	085b      	lsrs	r3, r3, #1
 80043bc:	001a      	movs	r2, r3
 80043be:	2301      	movs	r3, #1
 80043c0:	4013      	ands	r3, r2
 80043c2:	d00b      	beq.n	80043dc <HAL_SPI_IRQHandler+0x68>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	09db      	lsrs	r3, r3, #7
 80043c8:	001a      	movs	r2, r3
 80043ca:	2301      	movs	r3, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d005      	beq.n	80043dc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	0010      	movs	r0, r2
 80043d8:	4798      	blx	r3
    return;
 80043da:	e0c3      	b.n	8004564 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	001a      	movs	r2, r3
 80043e2:	2301      	movs	r3, #1
 80043e4:	4013      	ands	r3, r2
 80043e6:	d10c      	bne.n	8004402 <HAL_SPI_IRQHandler+0x8e>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	001a      	movs	r2, r3
 80043ee:	2301      	movs	r3, #1
 80043f0:	4013      	ands	r3, r2
 80043f2:	d106      	bne.n	8004402 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	001a      	movs	r2, r3
 80043fa:	2301      	movs	r3, #1
 80043fc:	4013      	ands	r3, r2
 80043fe:	d100      	bne.n	8004402 <HAL_SPI_IRQHandler+0x8e>
 8004400:	e0b0      	b.n	8004564 <HAL_SPI_IRQHandler+0x1f0>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	001a      	movs	r2, r3
 8004408:	2301      	movs	r3, #1
 800440a:	4013      	ands	r3, r2
 800440c:	d100      	bne.n	8004410 <HAL_SPI_IRQHandler+0x9c>
 800440e:	e0a9      	b.n	8004564 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	001a      	movs	r2, r3
 8004416:	2301      	movs	r3, #1
 8004418:	4013      	ands	r3, r2
 800441a:	d023      	beq.n	8004464 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	225d      	movs	r2, #93	; 0x5d
 8004420:	5c9b      	ldrb	r3, [r3, r2]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d011      	beq.n	800444c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	2204      	movs	r2, #4
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	e00b      	b.n	8004464 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
        return;
 8004462:	e07f      	b.n	8004564 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	001a      	movs	r2, r3
 800446a:	2301      	movs	r3, #1
 800446c:	4013      	ands	r3, r2
 800446e:	d014      	beq.n	800449a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	2201      	movs	r2, #1
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	438a      	bics	r2, r1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	001a      	movs	r2, r3
 80044a0:	2301      	movs	r3, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d00c      	beq.n	80044c0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	2208      	movs	r2, #8
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d04c      	beq.n	8004562 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	21e0      	movs	r1, #224	; 0xe0
 80044d4:	438a      	bics	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	225d      	movs	r2, #93	; 0x5d
 80044dc:	2101      	movs	r1, #1
 80044de:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2202      	movs	r2, #2
 80044e4:	4013      	ands	r3, r2
 80044e6:	d103      	bne.n	80044f0 <HAL_SPI_IRQHandler+0x17c>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2201      	movs	r2, #1
 80044ec:	4013      	ands	r3, r2
 80044ee:	d032      	beq.n	8004556 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2103      	movs	r1, #3
 80044fc:	438a      	bics	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_SPI_IRQHandler+0x1f8>)
 800450e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	0018      	movs	r0, r3
 8004516:	f7fe fd49 	bl	8002fac <HAL_DMA_Abort_IT>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d005      	beq.n	800452a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004522:	2240      	movs	r2, #64	; 0x40
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	4a0d      	ldr	r2, [pc, #52]	; (800456c <HAL_SPI_IRQHandler+0x1f8>)
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	0018      	movs	r0, r3
 8004540:	f7fe fd34 	bl	8002fac <HAL_DMA_Abort_IT>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d00b      	beq.n	8004560 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004554:	e004      	b.n	8004560 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0018      	movs	r0, r3
 800455a:	f000 f809 	bl	8004570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800455e:	e000      	b.n	8004562 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004560:	46c0      	nop			; (mov r8, r8)
    return;
 8004562:	46c0      	nop			; (mov r8, r8)
  }
}
 8004564:	46bd      	mov	sp, r7
 8004566:	b008      	add	sp, #32
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	08004581 	.word	0x08004581

08004570 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}

08004580 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2246      	movs	r2, #70	; 0x46
 8004592:	2100      	movs	r1, #0
 8004594:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0018      	movs	r0, r3
 80045a0:	f7ff ffe6 	bl	8004570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e04a      	b.n	8004654 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	223d      	movs	r2, #61	; 0x3d
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d107      	bne.n	80045da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	223c      	movs	r2, #60	; 0x3c
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 f841 	bl	800465c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	223d      	movs	r2, #61	; 0x3d
 80045de:	2102      	movs	r1, #2
 80045e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	0019      	movs	r1, r3
 80045ec:	0010      	movs	r0, r2
 80045ee:	f000 f9eb 	bl	80049c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2248      	movs	r2, #72	; 0x48
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223e      	movs	r2, #62	; 0x3e
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	223f      	movs	r2, #63	; 0x3f
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2240      	movs	r2, #64	; 0x40
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2241      	movs	r2, #65	; 0x41
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2242      	movs	r2, #66	; 0x42
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2243      	movs	r2, #67	; 0x43
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2244      	movs	r2, #68	; 0x44
 800462e:	2101      	movs	r1, #1
 8004630:	5499      	strb	r1, [r3, r2]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2245      	movs	r2, #69	; 0x45
 8004636:	2101      	movs	r1, #1
 8004638:	5499      	strb	r1, [r3, r2]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2246      	movs	r2, #70	; 0x46
 800463e:	2101      	movs	r1, #1
 8004640:	5499      	strb	r1, [r3, r2]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2247      	movs	r2, #71	; 0x47
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223d      	movs	r2, #61	; 0x3d
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b002      	add	sp, #8
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	223d      	movs	r2, #61	; 0x3d
 8004678:	5c9b      	ldrb	r3, [r3, r2]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d001      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e042      	b.n	800470a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	223d      	movs	r2, #61	; 0x3d
 8004688:	2102      	movs	r1, #2
 800468a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2101      	movs	r1, #1
 8004698:	430a      	orrs	r2, r1
 800469a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_TIM_Base_Start_IT+0xa8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00f      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0x5a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	; 0x80
 80046ac:	05db      	lsls	r3, r3, #23
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d009      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0x5a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	; (8004718 <HAL_TIM_Base_Start_IT+0xac>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_Base_Start_IT+0x5a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a16      	ldr	r2, [pc, #88]	; (800471c <HAL_TIM_Base_Start_IT+0xb0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d116      	bne.n	80046f4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <HAL_TIM_Base_Start_IT+0xb4>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d016      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x9a>
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	025b      	lsls	r3, r3, #9
 80046de:	429a      	cmp	r2, r3
 80046e0:	d011      	beq.n	8004706 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	e008      	b.n	8004706 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2101      	movs	r1, #1
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e000      	b.n	8004708 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004706:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b004      	add	sp, #16
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40014000 	.word	0x40014000
 8004720:	00010007 	.word	0x00010007

08004724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2202      	movs	r2, #2
 8004734:	4013      	ands	r3, r2
 8004736:	2b02      	cmp	r3, #2
 8004738:	d124      	bne.n	8004784 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2202      	movs	r2, #2
 8004742:	4013      	ands	r3, r2
 8004744:	2b02      	cmp	r3, #2
 8004746:	d11d      	bne.n	8004784 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2203      	movs	r2, #3
 800474e:	4252      	negs	r2, r2
 8004750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2203      	movs	r2, #3
 8004760:	4013      	ands	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 f916 	bl	8004998 <HAL_TIM_IC_CaptureCallback>
 800476c:	e007      	b.n	800477e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f000 f909 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f915 	bl	80049a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2204      	movs	r2, #4
 800478c:	4013      	ands	r3, r2
 800478e:	2b04      	cmp	r3, #4
 8004790:	d125      	bne.n	80047de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2204      	movs	r2, #4
 800479a:	4013      	ands	r3, r2
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11e      	bne.n	80047de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2205      	movs	r2, #5
 80047a6:	4252      	negs	r2, r2
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	23c0      	movs	r3, #192	; 0xc0
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4013      	ands	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f000 f8e9 	bl	8004998 <HAL_TIM_IC_CaptureCallback>
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 f8dc 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f000 f8e8 	bl	80049a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2208      	movs	r2, #8
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d124      	bne.n	8004836 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2208      	movs	r2, #8
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11d      	bne.n	8004836 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2209      	movs	r2, #9
 8004800:	4252      	negs	r2, r2
 8004802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2204      	movs	r2, #4
 8004808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	2203      	movs	r2, #3
 8004812:	4013      	ands	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f8bd 	bl	8004998 <HAL_TIM_IC_CaptureCallback>
 800481e:	e007      	b.n	8004830 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 f8b0 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0018      	movs	r0, r3
 800482c:	f000 f8bc 	bl	80049a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2210      	movs	r2, #16
 800483e:	4013      	ands	r3, r2
 8004840:	2b10      	cmp	r3, #16
 8004842:	d125      	bne.n	8004890 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2210      	movs	r2, #16
 800484c:	4013      	ands	r3, r2
 800484e:	2b10      	cmp	r3, #16
 8004850:	d11e      	bne.n	8004890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2211      	movs	r2, #17
 8004858:	4252      	negs	r2, r2
 800485a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2208      	movs	r2, #8
 8004860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	23c0      	movs	r3, #192	; 0xc0
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4013      	ands	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 f890 	bl	8004998 <HAL_TIM_IC_CaptureCallback>
 8004878:	e007      	b.n	800488a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f883 	bl	8004988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f000 f88f 	bl	80049a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2201      	movs	r2, #1
 8004898:	4013      	ands	r3, r2
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10f      	bne.n	80048be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d108      	bne.n	80048be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2202      	movs	r2, #2
 80048b2:	4252      	negs	r2, r2
 80048b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f7fd ff89 	bl	80027d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d10f      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d108      	bne.n	80048ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2281      	movs	r2, #129	; 0x81
 80048e0:	4252      	negs	r2, r2
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 f8f6 	bl	8004ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	401a      	ands	r2, r3
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d10e      	bne.n	800491e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	4013      	ands	r3, r2
 800490a:	2b80      	cmp	r3, #128	; 0x80
 800490c:	d107      	bne.n	800491e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1c      	ldr	r2, [pc, #112]	; (8004984 <HAL_TIM_IRQHandler+0x260>)
 8004914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0018      	movs	r0, r3
 800491a:	f000 f8e5 	bl	8004ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2240      	movs	r2, #64	; 0x40
 8004926:	4013      	ands	r3, r2
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d10f      	bne.n	800494c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	4013      	ands	r3, r2
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d108      	bne.n	800494c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2241      	movs	r2, #65	; 0x41
 8004940:	4252      	negs	r2, r2
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0018      	movs	r0, r3
 8004948:	f000 f836 	bl	80049b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2220      	movs	r2, #32
 8004954:	4013      	ands	r3, r2
 8004956:	2b20      	cmp	r3, #32
 8004958:	d10f      	bne.n	800497a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	4013      	ands	r3, r2
 8004964:	2b20      	cmp	r3, #32
 8004966:	d108      	bne.n	800497a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2221      	movs	r2, #33	; 0x21
 800496e:	4252      	negs	r2, r2
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f8a7 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b002      	add	sp, #8
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	fffffeff 	.word	0xfffffeff

08004988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a34      	ldr	r2, [pc, #208]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d008      	beq.n	80049f2 <TIM_Base_SetConfig+0x2a>
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	05db      	lsls	r3, r3, #23
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d003      	beq.n	80049f2 <TIM_Base_SetConfig+0x2a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a30      	ldr	r2, [pc, #192]	; (8004ab0 <TIM_Base_SetConfig+0xe8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2270      	movs	r2, #112	; 0x70
 80049f6:	4393      	bics	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d018      	beq.n	8004a3e <TIM_Base_SetConfig+0x76>
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d013      	beq.n	8004a3e <TIM_Base_SetConfig+0x76>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <TIM_Base_SetConfig+0xe8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_Base_SetConfig+0x76>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <TIM_Base_SetConfig+0xec>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0x76>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a23      	ldr	r2, [pc, #140]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0x76>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a22      	ldr	r2, [pc, #136]	; (8004abc <TIM_Base_SetConfig+0xf4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0x76>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <TIM_Base_SetConfig+0xf8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4a20      	ldr	r2, [pc, #128]	; (8004ac4 <TIM_Base_SetConfig+0xfc>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	4393      	bics	r3, r2
 8004a56:	001a      	movs	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_Base_SetConfig+0xce>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <TIM_Base_SetConfig+0xce>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a0c      	ldr	r2, [pc, #48]	; (8004abc <TIM_Base_SetConfig+0xf4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0xce>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <TIM_Base_SetConfig+0xf8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d103      	bne.n	8004a9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	615a      	str	r2, [r3, #20]
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b004      	add	sp, #16
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40002000 	.word	0x40002000
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800
 8004ac4:	fffffcff 	.word	0xfffffcff

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e046      	b.n	8004b98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2288      	movs	r2, #136	; 0x88
 8004b0e:	589b      	ldr	r3, [r3, r2]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2284      	movs	r2, #132	; 0x84
 8004b18:	2100      	movs	r1, #0
 8004b1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7fd feea 	bl	80028f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2288      	movs	r2, #136	; 0x88
 8004b28:	2124      	movs	r1, #36	; 0x24
 8004b2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	438a      	bics	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f000 fc6c 	bl	800541c <UART_SetConfig>
 8004b44:	0003      	movs	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e024      	b.n	8004b98 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 ff1d 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	490d      	ldr	r1, [pc, #52]	; (8004ba0 <HAL_UART_Init+0xa8>)
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	212a      	movs	r1, #42	; 0x2a
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2101      	movs	r1, #1
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 ffb5 	bl	8005b00 <UART_CheckIdleState>
 8004b96:	0003      	movs	r3, r0
}
 8004b98:	0018      	movs	r0, r3
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	ffffb7ff 	.word	0xffffb7ff

08004ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	1dbb      	adds	r3, r7, #6
 8004bb2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2288      	movs	r2, #136	; 0x88
 8004bb8:	589b      	ldr	r3, [r3, r2]
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d000      	beq.n	8004bc0 <HAL_UART_Transmit+0x1c>
 8004bbe:	e088      	b.n	8004cd2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_UART_Transmit+0x2a>
 8004bc6:	1dbb      	adds	r3, r7, #6
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e080      	b.n	8004cd4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	015b      	lsls	r3, r3, #5
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d109      	bne.n	8004bf2 <HAL_UART_Transmit+0x4e>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d105      	bne.n	8004bf2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2201      	movs	r2, #1
 8004bea:	4013      	ands	r3, r2
 8004bec:	d001      	beq.n	8004bf2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e070      	b.n	8004cd4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2290      	movs	r2, #144	; 0x90
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2288      	movs	r2, #136	; 0x88
 8004bfe:	2121      	movs	r1, #33	; 0x21
 8004c00:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c02:	f7fe f8b9 	bl	8002d78 <HAL_GetTick>
 8004c06:	0003      	movs	r3, r0
 8004c08:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1dba      	adds	r2, r7, #6
 8004c0e:	2154      	movs	r1, #84	; 0x54
 8004c10:	8812      	ldrh	r2, [r2, #0]
 8004c12:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1dba      	adds	r2, r7, #6
 8004c18:	2156      	movs	r1, #86	; 0x56
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	015b      	lsls	r3, r3, #5
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d108      	bne.n	8004c3c <HAL_UART_Transmit+0x98>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d104      	bne.n	8004c3c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e003      	b.n	8004c44 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c44:	e02c      	b.n	8004ca0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	0013      	movs	r3, r2
 8004c50:	2200      	movs	r2, #0
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	f000 ffa2 	bl	8005b9c <UART_WaitOnFlagUntilTimeout>
 8004c58:	1e03      	subs	r3, r0, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e039      	b.n	8004cd4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	05d2      	lsls	r2, r2, #23
 8004c72:	0dd2      	lsrs	r2, r2, #23
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	3302      	adds	r3, #2
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e007      	b.n	8004c8e <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2256      	movs	r2, #86	; 0x56
 8004c92:	5a9b      	ldrh	r3, [r3, r2]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b299      	uxth	r1, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2256      	movs	r2, #86	; 0x56
 8004c9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2256      	movs	r2, #86	; 0x56
 8004ca4:	5a9b      	ldrh	r3, [r3, r2]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1cc      	bne.n	8004c46 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	f000 ff6f 	bl	8005b9c <UART_WaitOnFlagUntilTimeout>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e006      	b.n	8004cd4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2288      	movs	r2, #136	; 0x88
 8004cca:	2120      	movs	r1, #32
 8004ccc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b008      	add	sp, #32
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	1dbb      	adds	r3, r7, #6
 8004ce8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	228c      	movs	r2, #140	; 0x8c
 8004cee:	589b      	ldr	r3, [r3, r2]
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d14a      	bne.n	8004d8a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_UART_Receive_IT+0x26>
 8004cfa:	1dbb      	adds	r3, r7, #6
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e042      	b.n	8004d8c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	2380      	movs	r3, #128	; 0x80
 8004d0c:	015b      	lsls	r3, r3, #5
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d109      	bne.n	8004d26 <HAL_UART_Receive_IT+0x4a>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d001      	beq.n	8004d26 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e032      	b.n	8004d8c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <HAL_UART_Receive_IT+0xb8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d020      	beq.n	8004d78 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	2380      	movs	r3, #128	; 0x80
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	4013      	ands	r3, r2
 8004d42:	d019      	beq.n	8004d78 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d44:	f3ef 8310 	mrs	r3, PRIMASK
 8004d48:	613b      	str	r3, [r7, #16]
  return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2180      	movs	r1, #128	; 0x80
 8004d66:	04c9      	lsls	r1, r1, #19
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d78:	1dbb      	adds	r3, r7, #6
 8004d7a:	881a      	ldrh	r2, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 ffd3 	bl	8005d2c <UART_Start_Receive_IT>
 8004d86:	0003      	movs	r3, r0
 8004d88:	e000      	b.n	8004d8c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004d8a:	2302      	movs	r3, #2
  }
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b008      	add	sp, #32
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40008000 	.word	0x40008000

08004d98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d98:	b5b0      	push	{r4, r5, r7, lr}
 8004d9a:	b0aa      	sub	sp, #168	; 0xa8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	22a4      	movs	r2, #164	; 0xa4
 8004da8:	18b9      	adds	r1, r7, r2
 8004daa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	20a0      	movs	r0, #160	; 0xa0
 8004db4:	1839      	adds	r1, r7, r0
 8004db6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	249c      	movs	r4, #156	; 0x9c
 8004dc0:	1939      	adds	r1, r7, r4
 8004dc2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	18bb      	adds	r3, r7, r2
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4aa2      	ldr	r2, [pc, #648]	; (8005054 <HAL_UART_IRQHandler+0x2bc>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2298      	movs	r2, #152	; 0x98
 8004dd0:	18bd      	adds	r5, r7, r2
 8004dd2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004dd4:	18bb      	adds	r3, r7, r2
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11a      	bne.n	8004e12 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2220      	movs	r2, #32
 8004de2:	4013      	ands	r3, r2
 8004de4:	d015      	beq.n	8004e12 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004de6:	183b      	adds	r3, r7, r0
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2220      	movs	r2, #32
 8004dec:	4013      	ands	r3, r2
 8004dee:	d105      	bne.n	8004dfc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004df0:	193b      	adds	r3, r7, r4
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	055b      	lsls	r3, r3, #21
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00a      	beq.n	8004e12 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d100      	bne.n	8004e06 <HAL_UART_IRQHandler+0x6e>
 8004e04:	e2dc      	b.n	80053c0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	0010      	movs	r0, r2
 8004e0e:	4798      	blx	r3
      }
      return;
 8004e10:	e2d6      	b.n	80053c0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e12:	2398      	movs	r3, #152	; 0x98
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d100      	bne.n	8004e1e <HAL_UART_IRQHandler+0x86>
 8004e1c:	e122      	b.n	8005064 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e1e:	239c      	movs	r3, #156	; 0x9c
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a8c      	ldr	r2, [pc, #560]	; (8005058 <HAL_UART_IRQHandler+0x2c0>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	d106      	bne.n	8004e38 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e2a:	23a0      	movs	r3, #160	; 0xa0
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a8a      	ldr	r2, [pc, #552]	; (800505c <HAL_UART_IRQHandler+0x2c4>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	d100      	bne.n	8004e38 <HAL_UART_IRQHandler+0xa0>
 8004e36:	e115      	b.n	8005064 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e38:	23a4      	movs	r3, #164	; 0xa4
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4013      	ands	r3, r2
 8004e42:	d012      	beq.n	8004e6a <HAL_UART_IRQHandler+0xd2>
 8004e44:	23a0      	movs	r3, #160	; 0xa0
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2290      	movs	r2, #144	; 0x90
 8004e5e:	589b      	ldr	r3, [r3, r2]
 8004e60:	2201      	movs	r2, #1
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2190      	movs	r1, #144	; 0x90
 8004e68:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e6a:	23a4      	movs	r3, #164	; 0xa4
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2202      	movs	r2, #2
 8004e72:	4013      	ands	r3, r2
 8004e74:	d011      	beq.n	8004e9a <HAL_UART_IRQHandler+0x102>
 8004e76:	239c      	movs	r3, #156	; 0x9c
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2202      	movs	r2, #2
 8004e88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2290      	movs	r2, #144	; 0x90
 8004e8e:	589b      	ldr	r3, [r3, r2]
 8004e90:	2204      	movs	r2, #4
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2190      	movs	r1, #144	; 0x90
 8004e98:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e9a:	23a4      	movs	r3, #164	; 0xa4
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d011      	beq.n	8004eca <HAL_UART_IRQHandler+0x132>
 8004ea6:	239c      	movs	r3, #156	; 0x9c
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2201      	movs	r2, #1
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2290      	movs	r2, #144	; 0x90
 8004ebe:	589b      	ldr	r3, [r3, r2]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2190      	movs	r1, #144	; 0x90
 8004ec8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004eca:	23a4      	movs	r3, #164	; 0xa4
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2208      	movs	r2, #8
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d017      	beq.n	8004f06 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ed6:	23a0      	movs	r3, #160	; 0xa0
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2220      	movs	r2, #32
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d105      	bne.n	8004eee <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ee2:	239c      	movs	r3, #156	; 0x9c
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a5b      	ldr	r2, [pc, #364]	; (8005058 <HAL_UART_IRQHandler+0x2c0>)
 8004eea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004eec:	d00b      	beq.n	8004f06 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2290      	movs	r2, #144	; 0x90
 8004efa:	589b      	ldr	r3, [r3, r2]
 8004efc:	2208      	movs	r2, #8
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2190      	movs	r1, #144	; 0x90
 8004f04:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f06:	23a4      	movs	r3, #164	; 0xa4
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	4013      	ands	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_UART_IRQHandler+0x1a4>
 8004f14:	23a0      	movs	r3, #160	; 0xa0
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	04db      	lsls	r3, r3, #19
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d00c      	beq.n	8004f3c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2280      	movs	r2, #128	; 0x80
 8004f28:	0112      	lsls	r2, r2, #4
 8004f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2290      	movs	r2, #144	; 0x90
 8004f30:	589b      	ldr	r3, [r3, r2]
 8004f32:	2220      	movs	r2, #32
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2190      	movs	r1, #144	; 0x90
 8004f3a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2290      	movs	r2, #144	; 0x90
 8004f40:	589b      	ldr	r3, [r3, r2]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d100      	bne.n	8004f48 <HAL_UART_IRQHandler+0x1b0>
 8004f46:	e23d      	b.n	80053c4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f48:	23a4      	movs	r3, #164	; 0xa4
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	4013      	ands	r3, r2
 8004f52:	d015      	beq.n	8004f80 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f54:	23a0      	movs	r3, #160	; 0xa0
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d106      	bne.n	8004f6e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f60:	239c      	movs	r3, #156	; 0x9c
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	055b      	lsls	r3, r3, #21
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d008      	beq.n	8004f80 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	0010      	movs	r0, r2
 8004f7e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2290      	movs	r2, #144	; 0x90
 8004f84:	589b      	ldr	r3, [r3, r2]
 8004f86:	2194      	movs	r1, #148	; 0x94
 8004f88:	187a      	adds	r2, r7, r1
 8004f8a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2240      	movs	r2, #64	; 0x40
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d004      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2228      	movs	r2, #40	; 0x28
 8004fa0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa2:	d04c      	beq.n	800503e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f000 ffe4 	bl	8005f74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2240      	movs	r2, #64	; 0x40
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d13c      	bne.n	8005034 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbe:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004fc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	2090      	movs	r0, #144	; 0x90
 8004fc4:	183a      	adds	r2, r7, r0
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	2301      	movs	r3, #1
 8004fca:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2140      	movs	r1, #64	; 0x40
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	183b      	adds	r3, r7, r0
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fec:	f383 8810 	msr	PRIMASK, r3
}
 8004ff0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2280      	movs	r2, #128	; 0x80
 8004ff6:	589b      	ldr	r3, [r3, r2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d016      	beq.n	800502a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2280      	movs	r2, #128	; 0x80
 8005000:	589b      	ldr	r3, [r3, r2]
 8005002:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_UART_IRQHandler+0x2c8>)
 8005004:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2280      	movs	r2, #128	; 0x80
 800500a:	589b      	ldr	r3, [r3, r2]
 800500c:	0018      	movs	r0, r3
 800500e:	f7fd ffcd 	bl	8002fac <HAL_DMA_Abort_IT>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d01c      	beq.n	8005050 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	589b      	ldr	r3, [r3, r2]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	2180      	movs	r1, #128	; 0x80
 8005022:	5852      	ldr	r2, [r2, r1]
 8005024:	0010      	movs	r0, r2
 8005026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e012      	b.n	8005050 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	0018      	movs	r0, r3
 800502e:	f000 f9e1 	bl	80053f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005032:	e00d      	b.n	8005050 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0018      	movs	r0, r3
 8005038:	f000 f9dc 	bl	80053f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503c:	e008      	b.n	8005050 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0018      	movs	r0, r3
 8005042:	f000 f9d7 	bl	80053f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2290      	movs	r2, #144	; 0x90
 800504a:	2100      	movs	r1, #0
 800504c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800504e:	e1b9      	b.n	80053c4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	46c0      	nop			; (mov r8, r8)
    return;
 8005052:	e1b7      	b.n	80053c4 <HAL_UART_IRQHandler+0x62c>
 8005054:	0000080f 	.word	0x0000080f
 8005058:	10000001 	.word	0x10000001
 800505c:	04000120 	.word	0x04000120
 8005060:	08006041 	.word	0x08006041

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d000      	beq.n	800506e <HAL_UART_IRQHandler+0x2d6>
 800506c:	e13e      	b.n	80052ec <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800506e:	23a4      	movs	r3, #164	; 0xa4
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	4013      	ands	r3, r2
 8005078:	d100      	bne.n	800507c <HAL_UART_IRQHandler+0x2e4>
 800507a:	e137      	b.n	80052ec <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800507c:	23a0      	movs	r3, #160	; 0xa0
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2210      	movs	r2, #16
 8005084:	4013      	ands	r3, r2
 8005086:	d100      	bne.n	800508a <HAL_UART_IRQHandler+0x2f2>
 8005088:	e130      	b.n	80052ec <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2240      	movs	r2, #64	; 0x40
 800509a:	4013      	ands	r3, r2
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d000      	beq.n	80050a2 <HAL_UART_IRQHandler+0x30a>
 80050a0:	e0a4      	b.n	80051ec <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	589b      	ldr	r3, [r3, r2]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	217e      	movs	r1, #126	; 0x7e
 80050ae:	187b      	adds	r3, r7, r1
 80050b0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80050b2:	187b      	adds	r3, r7, r1
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d100      	bne.n	80050bc <HAL_UART_IRQHandler+0x324>
 80050ba:	e185      	b.n	80053c8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	225c      	movs	r2, #92	; 0x5c
 80050c0:	5a9b      	ldrh	r3, [r3, r2]
 80050c2:	187a      	adds	r2, r7, r1
 80050c4:	8812      	ldrh	r2, [r2, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d300      	bcc.n	80050cc <HAL_UART_IRQHandler+0x334>
 80050ca:	e17d      	b.n	80053c8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	187a      	adds	r2, r7, r1
 80050d0:	215e      	movs	r1, #94	; 0x5e
 80050d2:	8812      	ldrh	r2, [r2, #0]
 80050d4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	589b      	ldr	r3, [r3, r2]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2220      	movs	r2, #32
 80050e2:	4013      	ands	r3, r2
 80050e4:	d170      	bne.n	80051c8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80050f0:	2301      	movs	r3, #1
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	49b4      	ldr	r1, [pc, #720]	; (80053d8 <HAL_UART_IRQHandler+0x640>)
 8005108:	400a      	ands	r2, r1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800510e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005118:	f3ef 8310 	mrs	r3, PRIMASK
 800511c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800511e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005120:	677b      	str	r3, [r7, #116]	; 0x74
 8005122:	2301      	movs	r3, #1
 8005124:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2101      	movs	r1, #1
 800513a:	438a      	bics	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514a:	f3ef 8310 	mrs	r3, PRIMASK
 800514e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005150:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	673b      	str	r3, [r7, #112]	; 0x70
 8005154:	2301      	movs	r3, #1
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515a:	f383 8810 	msr	PRIMASK, r3
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2140      	movs	r1, #64	; 0x40
 800516c:	438a      	bics	r2, r1
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005172:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	228c      	movs	r2, #140	; 0x8c
 8005180:	2120      	movs	r1, #32
 8005182:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518a:	f3ef 8310 	mrs	r3, PRIMASK
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005190:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005194:	2301      	movs	r3, #1
 8005196:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2110      	movs	r1, #16
 80051ac:	438a      	bics	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b6:	f383 8810 	msr	PRIMASK, r3
}
 80051ba:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	589b      	ldr	r3, [r3, r2]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fd fe90 	bl	8002ee8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	225c      	movs	r2, #92	; 0x5c
 80051d2:	5a9a      	ldrh	r2, [r3, r2]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	215e      	movs	r1, #94	; 0x5e
 80051d8:	5a5b      	ldrh	r3, [r3, r1]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0011      	movs	r1, r2
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f90d 	bl	8005404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051ea:	e0ed      	b.n	80053c8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	225c      	movs	r2, #92	; 0x5c
 80051f0:	5a99      	ldrh	r1, [r3, r2]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	225e      	movs	r2, #94	; 0x5e
 80051f6:	5a9b      	ldrh	r3, [r3, r2]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	208e      	movs	r0, #142	; 0x8e
 80051fc:	183b      	adds	r3, r7, r0
 80051fe:	1a8a      	subs	r2, r1, r2
 8005200:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	225e      	movs	r2, #94	; 0x5e
 8005206:	5a9b      	ldrh	r3, [r3, r2]
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d100      	bne.n	8005210 <HAL_UART_IRQHandler+0x478>
 800520e:	e0dd      	b.n	80053cc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005210:	183b      	adds	r3, r7, r0
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d100      	bne.n	800521a <HAL_UART_IRQHandler+0x482>
 8005218:	e0d8      	b.n	80053cc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521a:	f3ef 8310 	mrs	r3, PRIMASK
 800521e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005220:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005222:	2488      	movs	r4, #136	; 0x88
 8005224:	193a      	adds	r2, r7, r4
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	2301      	movs	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4967      	ldr	r1, [pc, #412]	; (80053dc <HAL_UART_IRQHandler+0x644>)
 8005240:	400a      	ands	r2, r1
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	193b      	adds	r3, r7, r4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005252:	f3ef 8310 	mrs	r3, PRIMASK
 8005256:	61bb      	str	r3, [r7, #24]
  return(result);
 8005258:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800525a:	2484      	movs	r4, #132	; 0x84
 800525c:	193a      	adds	r2, r7, r4
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	2301      	movs	r3, #1
 8005262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	495a      	ldr	r1, [pc, #360]	; (80053e0 <HAL_UART_IRQHandler+0x648>)
 8005278:	400a      	ands	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	193b      	adds	r3, r7, r4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	228c      	movs	r2, #140	; 0x8c
 800528e:	2120      	movs	r1, #32
 8005290:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529e:	f3ef 8310 	mrs	r3, PRIMASK
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a6:	2480      	movs	r4, #128	; 0x80
 80052a8:	193a      	adds	r2, r7, r4
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	2301      	movs	r3, #1
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	f383 8810 	msr	PRIMASK, r3
}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2110      	movs	r1, #16
 80052c4:	438a      	bics	r2, r1
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	193b      	adds	r3, r7, r4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052dc:	183b      	adds	r3, r7, r0
 80052de:	881a      	ldrh	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f88d 	bl	8005404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052ea:	e06f      	b.n	80053cc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052ec:	23a4      	movs	r3, #164	; 0xa4
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	035b      	lsls	r3, r3, #13
 80052f6:	4013      	ands	r3, r2
 80052f8:	d010      	beq.n	800531c <HAL_UART_IRQHandler+0x584>
 80052fa:	239c      	movs	r3, #156	; 0x9c
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	03db      	lsls	r3, r3, #15
 8005304:	4013      	ands	r3, r2
 8005306:	d009      	beq.n	800531c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2280      	movs	r2, #128	; 0x80
 800530e:	0352      	lsls	r2, r2, #13
 8005310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f001 fb37 	bl	8006988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800531a:	e05a      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800531c:	23a4      	movs	r3, #164	; 0xa4
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2280      	movs	r2, #128	; 0x80
 8005324:	4013      	ands	r3, r2
 8005326:	d016      	beq.n	8005356 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005328:	23a0      	movs	r3, #160	; 0xa0
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2280      	movs	r2, #128	; 0x80
 8005330:	4013      	ands	r3, r2
 8005332:	d106      	bne.n	8005342 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005334:	239c      	movs	r3, #156	; 0x9c
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	4013      	ands	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005346:	2b00      	cmp	r3, #0
 8005348:	d042      	beq.n	80053d0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	0010      	movs	r0, r2
 8005352:	4798      	blx	r3
    }
    return;
 8005354:	e03c      	b.n	80053d0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005356:	23a4      	movs	r3, #164	; 0xa4
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2240      	movs	r2, #64	; 0x40
 800535e:	4013      	ands	r3, r2
 8005360:	d00a      	beq.n	8005378 <HAL_UART_IRQHandler+0x5e0>
 8005362:	23a0      	movs	r3, #160	; 0xa0
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2240      	movs	r2, #64	; 0x40
 800536a:	4013      	ands	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	0018      	movs	r0, r3
 8005372:	f000 fe7c 	bl	800606e <UART_EndTransmit_IT>
    return;
 8005376:	e02c      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005378:	23a4      	movs	r3, #164	; 0xa4
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	4013      	ands	r3, r2
 8005384:	d00b      	beq.n	800539e <HAL_UART_IRQHandler+0x606>
 8005386:	23a0      	movs	r3, #160	; 0xa0
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	05db      	lsls	r3, r3, #23
 8005390:	4013      	ands	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	0018      	movs	r0, r3
 8005398:	f001 fb06 	bl	80069a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800539c:	e019      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800539e:	23a4      	movs	r3, #164	; 0xa4
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	045b      	lsls	r3, r3, #17
 80053a8:	4013      	ands	r3, r2
 80053aa:	d012      	beq.n	80053d2 <HAL_UART_IRQHandler+0x63a>
 80053ac:	23a0      	movs	r3, #160	; 0xa0
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da0d      	bge.n	80053d2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f001 faed 	bl	8006998 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053be:	e008      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	e006      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
    return;
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	e004      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80053c8:	46c0      	nop			; (mov r8, r8)
 80053ca:	e002      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
      return;
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	e000      	b.n	80053d2 <HAL_UART_IRQHandler+0x63a>
    return;
 80053d0:	46c0      	nop			; (mov r8, r8)
  }
}
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b02a      	add	sp, #168	; 0xa8
 80053d6:	bdb0      	pop	{r4, r5, r7, pc}
 80053d8:	fffffeff 	.word	0xfffffeff
 80053dc:	fffffedf 	.word	0xfffffedf
 80053e0:	effffffe 	.word	0xeffffffe

080053e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b002      	add	sp, #8
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b002      	add	sp, #8
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	000a      	movs	r2, r1
 800540e:	1cbb      	adds	r3, r7, #2
 8005410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	b002      	add	sp, #8
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800541c:	b5b0      	push	{r4, r5, r7, lr}
 800541e:	b090      	sub	sp, #64	; 0x40
 8005420:	af00      	add	r7, sp, #0
 8005422:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005424:	231a      	movs	r3, #26
 8005426:	2220      	movs	r2, #32
 8005428:	189b      	adds	r3, r3, r2
 800542a:	19db      	adds	r3, r3, r7
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	431a      	orrs	r2, r3
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	431a      	orrs	r2, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	4313      	orrs	r3, r2
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4aaf      	ldr	r2, [pc, #700]	; (800570c <UART_SetConfig+0x2f0>)
 8005450:	4013      	ands	r3, r2
 8005452:	0019      	movs	r1, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545a:	430b      	orrs	r3, r1
 800545c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4aaa      	ldr	r2, [pc, #680]	; (8005710 <UART_SetConfig+0x2f4>)
 8005466:	4013      	ands	r3, r2
 8005468:	0018      	movs	r0, r3
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	68d9      	ldr	r1, [r3, #12]
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	0003      	movs	r3, r0
 8005474:	430b      	orrs	r3, r1
 8005476:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4aa4      	ldr	r2, [pc, #656]	; (8005714 <UART_SetConfig+0x2f8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800548e:	4313      	orrs	r3, r2
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4a9f      	ldr	r2, [pc, #636]	; (8005718 <UART_SetConfig+0x2fc>)
 800549a:	4013      	ands	r3, r2
 800549c:	0019      	movs	r1, r3
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	220f      	movs	r2, #15
 80054b0:	4393      	bics	r3, r2
 80054b2:	0018      	movs	r0, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	0003      	movs	r3, r0
 80054be:	430b      	orrs	r3, r1
 80054c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a95      	ldr	r2, [pc, #596]	; (800571c <UART_SetConfig+0x300>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d131      	bne.n	8005530 <UART_SetConfig+0x114>
 80054cc:	4b94      	ldr	r3, [pc, #592]	; (8005720 <UART_SetConfig+0x304>)
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	2203      	movs	r2, #3
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d01d      	beq.n	8005514 <UART_SetConfig+0xf8>
 80054d8:	d823      	bhi.n	8005522 <UART_SetConfig+0x106>
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d00c      	beq.n	80054f8 <UART_SetConfig+0xdc>
 80054de:	d820      	bhi.n	8005522 <UART_SetConfig+0x106>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <UART_SetConfig+0xce>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d00e      	beq.n	8005506 <UART_SetConfig+0xea>
 80054e8:	e01b      	b.n	8005522 <UART_SetConfig+0x106>
 80054ea:	231b      	movs	r3, #27
 80054ec:	2220      	movs	r2, #32
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	19db      	adds	r3, r3, r7
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e0b4      	b.n	8005662 <UART_SetConfig+0x246>
 80054f8:	231b      	movs	r3, #27
 80054fa:	2220      	movs	r2, #32
 80054fc:	189b      	adds	r3, r3, r2
 80054fe:	19db      	adds	r3, r3, r7
 8005500:	2202      	movs	r2, #2
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	e0ad      	b.n	8005662 <UART_SetConfig+0x246>
 8005506:	231b      	movs	r3, #27
 8005508:	2220      	movs	r2, #32
 800550a:	189b      	adds	r3, r3, r2
 800550c:	19db      	adds	r3, r3, r7
 800550e:	2204      	movs	r2, #4
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e0a6      	b.n	8005662 <UART_SetConfig+0x246>
 8005514:	231b      	movs	r3, #27
 8005516:	2220      	movs	r2, #32
 8005518:	189b      	adds	r3, r3, r2
 800551a:	19db      	adds	r3, r3, r7
 800551c:	2208      	movs	r2, #8
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e09f      	b.n	8005662 <UART_SetConfig+0x246>
 8005522:	231b      	movs	r3, #27
 8005524:	2220      	movs	r2, #32
 8005526:	189b      	adds	r3, r3, r2
 8005528:	19db      	adds	r3, r3, r7
 800552a:	2210      	movs	r2, #16
 800552c:	701a      	strb	r2, [r3, #0]
 800552e:	e098      	b.n	8005662 <UART_SetConfig+0x246>
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a7b      	ldr	r2, [pc, #492]	; (8005724 <UART_SetConfig+0x308>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d131      	bne.n	800559e <UART_SetConfig+0x182>
 800553a:	4b79      	ldr	r3, [pc, #484]	; (8005720 <UART_SetConfig+0x304>)
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	220c      	movs	r2, #12
 8005540:	4013      	ands	r3, r2
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d01d      	beq.n	8005582 <UART_SetConfig+0x166>
 8005546:	d823      	bhi.n	8005590 <UART_SetConfig+0x174>
 8005548:	2b08      	cmp	r3, #8
 800554a:	d00c      	beq.n	8005566 <UART_SetConfig+0x14a>
 800554c:	d820      	bhi.n	8005590 <UART_SetConfig+0x174>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <UART_SetConfig+0x13c>
 8005552:	2b04      	cmp	r3, #4
 8005554:	d00e      	beq.n	8005574 <UART_SetConfig+0x158>
 8005556:	e01b      	b.n	8005590 <UART_SetConfig+0x174>
 8005558:	231b      	movs	r3, #27
 800555a:	2220      	movs	r2, #32
 800555c:	189b      	adds	r3, r3, r2
 800555e:	19db      	adds	r3, r3, r7
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e07d      	b.n	8005662 <UART_SetConfig+0x246>
 8005566:	231b      	movs	r3, #27
 8005568:	2220      	movs	r2, #32
 800556a:	189b      	adds	r3, r3, r2
 800556c:	19db      	adds	r3, r3, r7
 800556e:	2202      	movs	r2, #2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e076      	b.n	8005662 <UART_SetConfig+0x246>
 8005574:	231b      	movs	r3, #27
 8005576:	2220      	movs	r2, #32
 8005578:	189b      	adds	r3, r3, r2
 800557a:	19db      	adds	r3, r3, r7
 800557c:	2204      	movs	r2, #4
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e06f      	b.n	8005662 <UART_SetConfig+0x246>
 8005582:	231b      	movs	r3, #27
 8005584:	2220      	movs	r2, #32
 8005586:	189b      	adds	r3, r3, r2
 8005588:	19db      	adds	r3, r3, r7
 800558a:	2208      	movs	r2, #8
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	e068      	b.n	8005662 <UART_SetConfig+0x246>
 8005590:	231b      	movs	r3, #27
 8005592:	2220      	movs	r2, #32
 8005594:	189b      	adds	r3, r3, r2
 8005596:	19db      	adds	r3, r3, r7
 8005598:	2210      	movs	r2, #16
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e061      	b.n	8005662 <UART_SetConfig+0x246>
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a61      	ldr	r2, [pc, #388]	; (8005728 <UART_SetConfig+0x30c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d106      	bne.n	80055b6 <UART_SetConfig+0x19a>
 80055a8:	231b      	movs	r3, #27
 80055aa:	2220      	movs	r2, #32
 80055ac:	189b      	adds	r3, r3, r2
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e055      	b.n	8005662 <UART_SetConfig+0x246>
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a5c      	ldr	r2, [pc, #368]	; (800572c <UART_SetConfig+0x310>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d106      	bne.n	80055ce <UART_SetConfig+0x1b2>
 80055c0:	231b      	movs	r3, #27
 80055c2:	2220      	movs	r2, #32
 80055c4:	189b      	adds	r3, r3, r2
 80055c6:	19db      	adds	r3, r3, r7
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e049      	b.n	8005662 <UART_SetConfig+0x246>
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a50      	ldr	r2, [pc, #320]	; (8005714 <UART_SetConfig+0x2f8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d13e      	bne.n	8005656 <UART_SetConfig+0x23a>
 80055d8:	4b51      	ldr	r3, [pc, #324]	; (8005720 <UART_SetConfig+0x304>)
 80055da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055dc:	23c0      	movs	r3, #192	; 0xc0
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	4013      	ands	r3, r2
 80055e2:	22c0      	movs	r2, #192	; 0xc0
 80055e4:	0112      	lsls	r2, r2, #4
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d027      	beq.n	800563a <UART_SetConfig+0x21e>
 80055ea:	22c0      	movs	r2, #192	; 0xc0
 80055ec:	0112      	lsls	r2, r2, #4
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d82a      	bhi.n	8005648 <UART_SetConfig+0x22c>
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d011      	beq.n	800561e <UART_SetConfig+0x202>
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	0112      	lsls	r2, r2, #4
 80055fe:	4293      	cmp	r3, r2
 8005600:	d822      	bhi.n	8005648 <UART_SetConfig+0x22c>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <UART_SetConfig+0x1f4>
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	00d2      	lsls	r2, r2, #3
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <UART_SetConfig+0x210>
 800560e:	e01b      	b.n	8005648 <UART_SetConfig+0x22c>
 8005610:	231b      	movs	r3, #27
 8005612:	2220      	movs	r2, #32
 8005614:	189b      	adds	r3, r3, r2
 8005616:	19db      	adds	r3, r3, r7
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	e021      	b.n	8005662 <UART_SetConfig+0x246>
 800561e:	231b      	movs	r3, #27
 8005620:	2220      	movs	r2, #32
 8005622:	189b      	adds	r3, r3, r2
 8005624:	19db      	adds	r3, r3, r7
 8005626:	2202      	movs	r2, #2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e01a      	b.n	8005662 <UART_SetConfig+0x246>
 800562c:	231b      	movs	r3, #27
 800562e:	2220      	movs	r2, #32
 8005630:	189b      	adds	r3, r3, r2
 8005632:	19db      	adds	r3, r3, r7
 8005634:	2204      	movs	r2, #4
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e013      	b.n	8005662 <UART_SetConfig+0x246>
 800563a:	231b      	movs	r3, #27
 800563c:	2220      	movs	r2, #32
 800563e:	189b      	adds	r3, r3, r2
 8005640:	19db      	adds	r3, r3, r7
 8005642:	2208      	movs	r2, #8
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e00c      	b.n	8005662 <UART_SetConfig+0x246>
 8005648:	231b      	movs	r3, #27
 800564a:	2220      	movs	r2, #32
 800564c:	189b      	adds	r3, r3, r2
 800564e:	19db      	adds	r3, r3, r7
 8005650:	2210      	movs	r2, #16
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	e005      	b.n	8005662 <UART_SetConfig+0x246>
 8005656:	231b      	movs	r3, #27
 8005658:	2220      	movs	r2, #32
 800565a:	189b      	adds	r3, r3, r2
 800565c:	19db      	adds	r3, r3, r7
 800565e:	2210      	movs	r2, #16
 8005660:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <UART_SetConfig+0x2f8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d000      	beq.n	800566e <UART_SetConfig+0x252>
 800566c:	e0a9      	b.n	80057c2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800566e:	231b      	movs	r3, #27
 8005670:	2220      	movs	r2, #32
 8005672:	189b      	adds	r3, r3, r2
 8005674:	19db      	adds	r3, r3, r7
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d015      	beq.n	80056a8 <UART_SetConfig+0x28c>
 800567c:	dc18      	bgt.n	80056b0 <UART_SetConfig+0x294>
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00d      	beq.n	800569e <UART_SetConfig+0x282>
 8005682:	dc15      	bgt.n	80056b0 <UART_SetConfig+0x294>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <UART_SetConfig+0x272>
 8005688:	2b02      	cmp	r3, #2
 800568a:	d005      	beq.n	8005698 <UART_SetConfig+0x27c>
 800568c:	e010      	b.n	80056b0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568e:	f7fe fbc1 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8005692:	0003      	movs	r3, r0
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005696:	e014      	b.n	80056c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005698:	4b25      	ldr	r3, [pc, #148]	; (8005730 <UART_SetConfig+0x314>)
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800569c:	e011      	b.n	80056c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800569e:	f7fe fb2d 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 80056a2:	0003      	movs	r3, r0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056a6:	e00c      	b.n	80056c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ae:	e008      	b.n	80056c2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80056b4:	231a      	movs	r3, #26
 80056b6:	2220      	movs	r2, #32
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	19db      	adds	r3, r3, r7
 80056bc:	2201      	movs	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
        break;
 80056c0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d100      	bne.n	80056ca <UART_SetConfig+0x2ae>
 80056c8:	e14b      	b.n	8005962 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ce:	4b19      	ldr	r3, [pc, #100]	; (8005734 <UART_SetConfig+0x318>)
 80056d0:	0052      	lsls	r2, r2, #1
 80056d2:	5ad3      	ldrh	r3, [r2, r3]
 80056d4:	0019      	movs	r1, r3
 80056d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056d8:	f7fa fd32 	bl	8000140 <__udivsi3>
 80056dc:	0003      	movs	r3, r0
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	0013      	movs	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d305      	bcc.n	80056fc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d91d      	bls.n	8005738 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80056fc:	231a      	movs	r3, #26
 80056fe:	2220      	movs	r2, #32
 8005700:	189b      	adds	r3, r3, r2
 8005702:	19db      	adds	r3, r3, r7
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e12b      	b.n	8005962 <UART_SetConfig+0x546>
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	cfff69f3 	.word	0xcfff69f3
 8005710:	ffffcfff 	.word	0xffffcfff
 8005714:	40008000 	.word	0x40008000
 8005718:	11fff4ff 	.word	0x11fff4ff
 800571c:	40013800 	.word	0x40013800
 8005720:	40021000 	.word	0x40021000
 8005724:	40004400 	.word	0x40004400
 8005728:	40004800 	.word	0x40004800
 800572c:	40004c00 	.word	0x40004c00
 8005730:	00f42400 	.word	0x00f42400
 8005734:	0800c5f8 	.word	0x0800c5f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005744:	4b92      	ldr	r3, [pc, #584]	; (8005990 <UART_SetConfig+0x574>)
 8005746:	0052      	lsls	r2, r2, #1
 8005748:	5ad3      	ldrh	r3, [r2, r3]
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	69b8      	ldr	r0, [r7, #24]
 8005756:	69f9      	ldr	r1, [r7, #28]
 8005758:	f7fa fea6 	bl	80004a8 <__aeabi_uldivmod>
 800575c:	0002      	movs	r2, r0
 800575e:	000b      	movs	r3, r1
 8005760:	0e11      	lsrs	r1, r2, #24
 8005762:	021d      	lsls	r5, r3, #8
 8005764:	430d      	orrs	r5, r1
 8005766:	0214      	lsls	r4, r2, #8
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68b8      	ldr	r0, [r7, #8]
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	1900      	adds	r0, r0, r4
 800577a:	4169      	adcs	r1, r5
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f7fa fe8d 	bl	80004a8 <__aeabi_uldivmod>
 800578e:	0002      	movs	r2, r0
 8005790:	000b      	movs	r3, r1
 8005792:	0013      	movs	r3, r2
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	23c0      	movs	r3, #192	; 0xc0
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	429a      	cmp	r2, r3
 800579e:	d309      	bcc.n	80057b4 <UART_SetConfig+0x398>
 80057a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	035b      	lsls	r3, r3, #13
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d204      	bcs.n	80057b4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b0:	60da      	str	r2, [r3, #12]
 80057b2:	e0d6      	b.n	8005962 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80057b4:	231a      	movs	r3, #26
 80057b6:	2220      	movs	r2, #32
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	19db      	adds	r3, r3, r7
 80057bc:	2201      	movs	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	e0cf      	b.n	8005962 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d000      	beq.n	80057d0 <UART_SetConfig+0x3b4>
 80057ce:	e070      	b.n	80058b2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80057d0:	231b      	movs	r3, #27
 80057d2:	2220      	movs	r2, #32
 80057d4:	189b      	adds	r3, r3, r2
 80057d6:	19db      	adds	r3, r3, r7
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d015      	beq.n	800580a <UART_SetConfig+0x3ee>
 80057de:	dc18      	bgt.n	8005812 <UART_SetConfig+0x3f6>
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	d00d      	beq.n	8005800 <UART_SetConfig+0x3e4>
 80057e4:	dc15      	bgt.n	8005812 <UART_SetConfig+0x3f6>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <UART_SetConfig+0x3d4>
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d005      	beq.n	80057fa <UART_SetConfig+0x3de>
 80057ee:	e010      	b.n	8005812 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fe fb10 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 80057f4:	0003      	movs	r3, r0
 80057f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057f8:	e014      	b.n	8005824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fa:	4b66      	ldr	r3, [pc, #408]	; (8005994 <UART_SetConfig+0x578>)
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057fe:	e011      	b.n	8005824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005800:	f7fe fa7c 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8005804:	0003      	movs	r3, r0
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005808:	e00c      	b.n	8005824 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005810:	e008      	b.n	8005824 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005816:	231a      	movs	r3, #26
 8005818:	2220      	movs	r2, #32
 800581a:	189b      	adds	r3, r3, r2
 800581c:	19db      	adds	r3, r3, r7
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
        break;
 8005822:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d100      	bne.n	800582c <UART_SetConfig+0x410>
 800582a:	e09a      	b.n	8005962 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005830:	4b57      	ldr	r3, [pc, #348]	; (8005990 <UART_SetConfig+0x574>)
 8005832:	0052      	lsls	r2, r2, #1
 8005834:	5ad3      	ldrh	r3, [r2, r3]
 8005836:	0019      	movs	r1, r3
 8005838:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800583a:	f7fa fc81 	bl	8000140 <__udivsi3>
 800583e:	0003      	movs	r3, r0
 8005840:	005a      	lsls	r2, r3, #1
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	18d2      	adds	r2, r2, r3
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	0019      	movs	r1, r3
 8005850:	0010      	movs	r0, r2
 8005852:	f7fa fc75 	bl	8000140 <__udivsi3>
 8005856:	0003      	movs	r3, r0
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d921      	bls.n	80058a4 <UART_SetConfig+0x488>
 8005860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005862:	2380      	movs	r3, #128	; 0x80
 8005864:	025b      	lsls	r3, r3, #9
 8005866:	429a      	cmp	r2, r3
 8005868:	d21c      	bcs.n	80058a4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	b29a      	uxth	r2, r3
 800586e:	200e      	movs	r0, #14
 8005870:	2420      	movs	r4, #32
 8005872:	1903      	adds	r3, r0, r4
 8005874:	19db      	adds	r3, r3, r7
 8005876:	210f      	movs	r1, #15
 8005878:	438a      	bics	r2, r1
 800587a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	b29b      	uxth	r3, r3
 8005882:	2207      	movs	r2, #7
 8005884:	4013      	ands	r3, r2
 8005886:	b299      	uxth	r1, r3
 8005888:	1903      	adds	r3, r0, r4
 800588a:	19db      	adds	r3, r3, r7
 800588c:	1902      	adds	r2, r0, r4
 800588e:	19d2      	adds	r2, r2, r7
 8005890:	8812      	ldrh	r2, [r2, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1902      	adds	r2, r0, r4
 800589c:	19d2      	adds	r2, r2, r7
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	60da      	str	r2, [r3, #12]
 80058a2:	e05e      	b.n	8005962 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80058a4:	231a      	movs	r3, #26
 80058a6:	2220      	movs	r2, #32
 80058a8:	189b      	adds	r3, r3, r2
 80058aa:	19db      	adds	r3, r3, r7
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	e057      	b.n	8005962 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b2:	231b      	movs	r3, #27
 80058b4:	2220      	movs	r2, #32
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	19db      	adds	r3, r3, r7
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d015      	beq.n	80058ec <UART_SetConfig+0x4d0>
 80058c0:	dc18      	bgt.n	80058f4 <UART_SetConfig+0x4d8>
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d00d      	beq.n	80058e2 <UART_SetConfig+0x4c6>
 80058c6:	dc15      	bgt.n	80058f4 <UART_SetConfig+0x4d8>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <UART_SetConfig+0x4b6>
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d005      	beq.n	80058dc <UART_SetConfig+0x4c0>
 80058d0:	e010      	b.n	80058f4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d2:	f7fe fa9f 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 80058d6:	0003      	movs	r3, r0
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058da:	e014      	b.n	8005906 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <UART_SetConfig+0x578>)
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e0:	e011      	b.n	8005906 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058e2:	f7fe fa0b 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 80058e6:	0003      	movs	r3, r0
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058ea:	e00c      	b.n	8005906 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058f2:	e008      	b.n	8005906 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80058f8:	231a      	movs	r3, #26
 80058fa:	2220      	movs	r2, #32
 80058fc:	189b      	adds	r3, r3, r2
 80058fe:	19db      	adds	r3, r3, r7
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
        break;
 8005904:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	2b00      	cmp	r3, #0
 800590a:	d02a      	beq.n	8005962 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005910:	4b1f      	ldr	r3, [pc, #124]	; (8005990 <UART_SetConfig+0x574>)
 8005912:	0052      	lsls	r2, r2, #1
 8005914:	5ad3      	ldrh	r3, [r2, r3]
 8005916:	0019      	movs	r1, r3
 8005918:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800591a:	f7fa fc11 	bl	8000140 <__udivsi3>
 800591e:	0003      	movs	r3, r0
 8005920:	001a      	movs	r2, r3
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	18d2      	adds	r2, r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	0019      	movs	r1, r3
 8005930:	0010      	movs	r0, r2
 8005932:	f7fa fc05 	bl	8000140 <__udivsi3>
 8005936:	0003      	movs	r3, r0
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	2b0f      	cmp	r3, #15
 800593e:	d90a      	bls.n	8005956 <UART_SetConfig+0x53a>
 8005940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	025b      	lsls	r3, r3, #9
 8005946:	429a      	cmp	r2, r3
 8005948:	d205      	bcs.n	8005956 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	b29a      	uxth	r2, r3
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	e005      	b.n	8005962 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005956:	231a      	movs	r3, #26
 8005958:	2220      	movs	r2, #32
 800595a:	189b      	adds	r3, r3, r2
 800595c:	19db      	adds	r3, r3, r7
 800595e:	2201      	movs	r2, #1
 8005960:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	226a      	movs	r2, #106	; 0x6a
 8005966:	2101      	movs	r1, #1
 8005968:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	2268      	movs	r2, #104	; 0x68
 800596e:	2101      	movs	r1, #1
 8005970:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	2200      	movs	r2, #0
 8005976:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800597e:	231a      	movs	r3, #26
 8005980:	2220      	movs	r2, #32
 8005982:	189b      	adds	r3, r3, r2
 8005984:	19db      	adds	r3, r3, r7
 8005986:	781b      	ldrb	r3, [r3, #0]
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b010      	add	sp, #64	; 0x40
 800598e:	bdb0      	pop	{r4, r5, r7, pc}
 8005990:	0800c5f8 	.word	0x0800c5f8
 8005994:	00f42400 	.word	0x00f42400

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	2201      	movs	r2, #1
 80059a6:	4013      	ands	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4a4a      	ldr	r2, [pc, #296]	; (8005adc <UART_AdvFeatureConfig+0x144>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	0019      	movs	r1, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	2202      	movs	r2, #2
 80059c8:	4013      	ands	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	4a43      	ldr	r2, [pc, #268]	; (8005ae0 <UART_AdvFeatureConfig+0x148>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	0019      	movs	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	2204      	movs	r2, #4
 80059ea:	4013      	ands	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	4a3b      	ldr	r2, [pc, #236]	; (8005ae4 <UART_AdvFeatureConfig+0x14c>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	0019      	movs	r1, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	2208      	movs	r2, #8
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4a34      	ldr	r2, [pc, #208]	; (8005ae8 <UART_AdvFeatureConfig+0x150>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	0019      	movs	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <UART_AdvFeatureConfig+0x154>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	2220      	movs	r2, #32
 8005a50:	4013      	ands	r3, r2
 8005a52:	d00b      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <UART_AdvFeatureConfig+0x158>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a70:	2240      	movs	r2, #64	; 0x40
 8005a72:	4013      	ands	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <UART_AdvFeatureConfig+0x15c>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	0019      	movs	r1, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	035b      	lsls	r3, r3, #13
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d10b      	bne.n	8005ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <UART_AdvFeatureConfig+0x160>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	0019      	movs	r1, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	2280      	movs	r2, #128	; 0x80
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d00b      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <UART_AdvFeatureConfig+0x164>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	fffdffff 	.word	0xfffdffff
 8005ae0:	fffeffff 	.word	0xfffeffff
 8005ae4:	fffbffff 	.word	0xfffbffff
 8005ae8:	ffff7fff 	.word	0xffff7fff
 8005aec:	ffffefff 	.word	0xffffefff
 8005af0:	ffffdfff 	.word	0xffffdfff
 8005af4:	ffefffff 	.word	0xffefffff
 8005af8:	ff9fffff 	.word	0xff9fffff
 8005afc:	fff7ffff 	.word	0xfff7ffff

08005b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2290      	movs	r2, #144	; 0x90
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b10:	f7fd f932 	bl	8002d78 <HAL_GetTick>
 8005b14:	0003      	movs	r3, r0
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2208      	movs	r2, #8
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d10c      	bne.n	8005b40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2280      	movs	r2, #128	; 0x80
 8005b2a:	0391      	lsls	r1, r2, #14
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <UART_CheckIdleState+0x98>)
 8005b30:	9200      	str	r2, [sp, #0]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f000 f832 	bl	8005b9c <UART_WaitOnFlagUntilTimeout>
 8005b38:	1e03      	subs	r3, r0, #0
 8005b3a:	d001      	beq.n	8005b40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e026      	b.n	8005b8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2204      	movs	r2, #4
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d10c      	bne.n	8005b68 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2280      	movs	r2, #128	; 0x80
 8005b52:	03d1      	lsls	r1, r2, #15
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4a10      	ldr	r2, [pc, #64]	; (8005b98 <UART_CheckIdleState+0x98>)
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f000 f81e 	bl	8005b9c <UART_WaitOnFlagUntilTimeout>
 8005b60:	1e03      	subs	r3, r0, #0
 8005b62:	d001      	beq.n	8005b68 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e012      	b.n	8005b8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2288      	movs	r2, #136	; 0x88
 8005b6c:	2120      	movs	r1, #32
 8005b6e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	228c      	movs	r2, #140	; 0x8c
 8005b74:	2120      	movs	r1, #32
 8005b76:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2284      	movs	r2, #132	; 0x84
 8005b88:	2100      	movs	r1, #0
 8005b8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b004      	add	sp, #16
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	01ffffff 	.word	0x01ffffff

08005b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b094      	sub	sp, #80	; 0x50
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	1dfb      	adds	r3, r7, #7
 8005baa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bac:	e0a7      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	d100      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005bb4:	e0a3      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb6:	f7fd f8df 	bl	8002d78 <HAL_GetTick>
 8005bba:	0002      	movs	r2, r0
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d302      	bcc.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d13f      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	f383 8810 	msr	PRIMASK, r3
}
 8005be0:	46c0      	nop			; (mov r8, r8)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	494e      	ldr	r1, [pc, #312]	; (8005d28 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005bee:	400a      	ands	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f383 8810 	msr	PRIMASK, r3
}
 8005bfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	643b      	str	r3, [r7, #64]	; 0x40
 8005c08:	2301      	movs	r3, #1
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2101      	movs	r1, #1
 8005c20:	438a      	bics	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2288      	movs	r2, #136	; 0x88
 8005c34:	2120      	movs	r1, #32
 8005c36:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	228c      	movs	r2, #140	; 0x8c
 8005c3c:	2120      	movs	r1, #32
 8005c3e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2284      	movs	r2, #132	; 0x84
 8005c44:	2100      	movs	r1, #0
 8005c46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e069      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2204      	movs	r2, #4
 8005c54:	4013      	ands	r3, r2
 8005c56:	d052      	beq.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69da      	ldr	r2, [r3, #28]
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	401a      	ands	r2, r3
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d148      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	0112      	lsls	r2, r2, #4
 8005c74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c76:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7a:	613b      	str	r3, [r7, #16]
  return(result);
 8005c7c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4924      	ldr	r1, [pc, #144]	; (8005d28 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005c98:	400a      	ands	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	f383 8810 	msr	PRIMASK, r3
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cac:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cae:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	f383 8810 	msr	PRIMASK, r3
}
 8005cbc:	46c0      	nop			; (mov r8, r8)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2101      	movs	r1, #1
 8005cca:	438a      	bics	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]
 8005cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	f383 8810 	msr	PRIMASK, r3
}
 8005cd8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2288      	movs	r2, #136	; 0x88
 8005cde:	2120      	movs	r1, #32
 8005ce0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	228c      	movs	r2, #140	; 0x8c
 8005ce6:	2120      	movs	r1, #32
 8005ce8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2290      	movs	r2, #144	; 0x90
 8005cee:	2120      	movs	r1, #32
 8005cf0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2284      	movs	r2, #132	; 0x84
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e010      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4013      	ands	r3, r2
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	425a      	negs	r2, r3
 8005d0e:	4153      	adcs	r3, r2
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	001a      	movs	r2, r3
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d100      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x182>
 8005d1c:	e747      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b014      	add	sp, #80	; 0x50
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	fffffe5f 	.word	0xfffffe5f

08005d2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b098      	sub	sp, #96	; 0x60
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	1dbb      	adds	r3, r7, #6
 8005d38:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1dba      	adds	r2, r7, #6
 8005d44:	215c      	movs	r1, #92	; 0x5c
 8005d46:	8812      	ldrh	r2, [r2, #0]
 8005d48:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1dba      	adds	r2, r7, #6
 8005d4e:	215e      	movs	r1, #94	; 0x5e
 8005d50:	8812      	ldrh	r2, [r2, #0]
 8005d52:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	2380      	movs	r3, #128	; 0x80
 8005d60:	015b      	lsls	r3, r3, #5
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d10d      	bne.n	8005d82 <UART_Start_Receive_IT+0x56>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <UART_Start_Receive_IT+0x4c>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2260      	movs	r2, #96	; 0x60
 8005d72:	497b      	ldr	r1, [pc, #492]	; (8005f60 <UART_Start_Receive_IT+0x234>)
 8005d74:	5299      	strh	r1, [r3, r2]
 8005d76:	e02e      	b.n	8005dd6 <UART_Start_Receive_IT+0xaa>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2260      	movs	r2, #96	; 0x60
 8005d7c:	21ff      	movs	r1, #255	; 0xff
 8005d7e:	5299      	strh	r1, [r3, r2]
 8005d80:	e029      	b.n	8005dd6 <UART_Start_Receive_IT+0xaa>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <UART_Start_Receive_IT+0x7a>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <UART_Start_Receive_IT+0x70>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2260      	movs	r2, #96	; 0x60
 8005d96:	21ff      	movs	r1, #255	; 0xff
 8005d98:	5299      	strh	r1, [r3, r2]
 8005d9a:	e01c      	b.n	8005dd6 <UART_Start_Receive_IT+0xaa>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2260      	movs	r2, #96	; 0x60
 8005da0:	217f      	movs	r1, #127	; 0x7f
 8005da2:	5299      	strh	r1, [r3, r2]
 8005da4:	e017      	b.n	8005dd6 <UART_Start_Receive_IT+0xaa>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	055b      	lsls	r3, r3, #21
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d10d      	bne.n	8005dce <UART_Start_Receive_IT+0xa2>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d104      	bne.n	8005dc4 <UART_Start_Receive_IT+0x98>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2260      	movs	r2, #96	; 0x60
 8005dbe:	217f      	movs	r1, #127	; 0x7f
 8005dc0:	5299      	strh	r1, [r3, r2]
 8005dc2:	e008      	b.n	8005dd6 <UART_Start_Receive_IT+0xaa>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2260      	movs	r2, #96	; 0x60
 8005dc8:	213f      	movs	r1, #63	; 0x3f
 8005dca:	5299      	strh	r1, [r3, r2]
 8005dcc:	e003      	b.n	8005dd6 <UART_Start_Receive_IT+0xaa>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2260      	movs	r2, #96	; 0x60
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2290      	movs	r2, #144	; 0x90
 8005dda:	2100      	movs	r1, #0
 8005ddc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	228c      	movs	r2, #140	; 0x8c
 8005de2:	2122      	movs	r1, #34	; 0x22
 8005de4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dea:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df0:	2301      	movs	r3, #1
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2101      	movs	r1, #1
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	f383 8810 	msr	PRIMASK, r3
}
 8005e16:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	059b      	lsls	r3, r3, #22
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d150      	bne.n	8005ec6 <UART_Start_Receive_IT+0x19a>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2268      	movs	r2, #104	; 0x68
 8005e28:	5a9b      	ldrh	r3, [r3, r2]
 8005e2a:	1dba      	adds	r2, r7, #6
 8005e2c:	8812      	ldrh	r2, [r2, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d349      	bcc.n	8005ec6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	2380      	movs	r3, #128	; 0x80
 8005e38:	015b      	lsls	r3, r3, #5
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d107      	bne.n	8005e4e <UART_Start_Receive_IT+0x122>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a46      	ldr	r2, [pc, #280]	; (8005f64 <UART_Start_Receive_IT+0x238>)
 8005e4a:	675a      	str	r2, [r3, #116]	; 0x74
 8005e4c:	e002      	b.n	8005e54 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a45      	ldr	r2, [pc, #276]	; (8005f68 <UART_Start_Receive_IT+0x23c>)
 8005e52:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d019      	beq.n	8005e90 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e66:	2301      	movs	r3, #1
 8005e68:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	0049      	lsls	r1, r1, #1
 8005e80:	430a      	orrs	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	f383 8810 	msr	PRIMASK, r3
}
 8005e8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e90:	f3ef 8310 	mrs	r3, PRIMASK
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e98:	657b      	str	r3, [r7, #84]	; 0x54
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	f383 8810 	msr	PRIMASK, r3
}
 8005ea4:	46c0      	nop			; (mov r8, r8)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	0549      	lsls	r1, r1, #21
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	e047      	b.n	8005f56 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	015b      	lsls	r3, r3, #5
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d107      	bne.n	8005ee2 <UART_Start_Receive_IT+0x1b6>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d103      	bne.n	8005ee2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a23      	ldr	r2, [pc, #140]	; (8005f6c <UART_Start_Receive_IT+0x240>)
 8005ede:	675a      	str	r2, [r3, #116]	; 0x74
 8005ee0:	e002      	b.n	8005ee8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <UART_Start_Receive_IT+0x244>)
 8005ee6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d019      	beq.n	8005f24 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ef6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efa:	2301      	movs	r3, #1
 8005efc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	f383 8810 	msr	PRIMASK, r3
}
 8005f04:	46c0      	nop			; (mov r8, r8)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2190      	movs	r1, #144	; 0x90
 8005f12:	0049      	lsls	r1, r1, #1
 8005f14:	430a      	orrs	r2, r1
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	f383 8810 	msr	PRIMASK, r3
}
 8005f22:	e018      	b.n	8005f56 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f24:	f3ef 8310 	mrs	r3, PRIMASK
 8005f28:	613b      	str	r3, [r7, #16]
  return(result);
 8005f2a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f2e:	2301      	movs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f383 8810 	msr	PRIMASK, r3
}
 8005f38:	46c0      	nop			; (mov r8, r8)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2120      	movs	r1, #32
 8005f46:	430a      	orrs	r2, r1
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f383 8810 	msr	PRIMASK, r3
}
 8005f54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b018      	add	sp, #96	; 0x60
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	000001ff 	.word	0x000001ff
 8005f64:	0800669d 	.word	0x0800669d
 8005f68:	080063b1 	.word	0x080063b1
 8005f6c:	0800623d 	.word	0x0800623d
 8005f70:	080060c9 	.word	0x080060c9

08005f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	; 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f80:	617b      	str	r3, [r7, #20]
  return(result);
 8005f82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
 8005f86:	2301      	movs	r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f383 8810 	msr	PRIMASK, r3
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4926      	ldr	r1, [pc, #152]	; (8006038 <UART_EndRxTransfer+0xc4>)
 8005f9e:	400a      	ands	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fae:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb2:	623b      	str	r3, [r7, #32]
  return(result);
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb8:	2301      	movs	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	f383 8810 	msr	PRIMASK, r3
}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	491b      	ldr	r1, [pc, #108]	; (800603c <UART_EndRxTransfer+0xc8>)
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	f383 8810 	msr	PRIMASK, r3
}
 8005fde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d118      	bne.n	800601a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f383 8810 	msr	PRIMASK, r3
}
 8005ffc:	46c0      	nop			; (mov r8, r8)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2110      	movs	r1, #16
 800600a:	438a      	bics	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f383 8810 	msr	PRIMASK, r3
}
 8006018:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	228c      	movs	r2, #140	; 0x8c
 800601e:	2120      	movs	r1, #32
 8006020:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b00e      	add	sp, #56	; 0x38
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	fffffedf 	.word	0xfffffedf
 800603c:	effffffe 	.word	0xeffffffe

08006040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	225e      	movs	r2, #94	; 0x5e
 8006052:	2100      	movs	r1, #0
 8006054:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2256      	movs	r2, #86	; 0x56
 800605a:	2100      	movs	r1, #0
 800605c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0018      	movs	r0, r3
 8006062:	f7ff f9c7 	bl	80053f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b004      	add	sp, #16
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006076:	f3ef 8310 	mrs	r3, PRIMASK
 800607a:	60bb      	str	r3, [r7, #8]
  return(result);
 800607c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	2301      	movs	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f383 8810 	msr	PRIMASK, r3
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2140      	movs	r1, #64	; 0x40
 8006098:	438a      	bics	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2288      	movs	r2, #136	; 0x88
 80060ac:	2120      	movs	r1, #32
 80060ae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f7ff f993 	bl	80053e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b006      	add	sp, #24
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b090      	sub	sp, #64	; 0x40
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060d0:	203e      	movs	r0, #62	; 0x3e
 80060d2:	183b      	adds	r3, r7, r0
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	2160      	movs	r1, #96	; 0x60
 80060d8:	5a52      	ldrh	r2, [r2, r1]
 80060da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	228c      	movs	r2, #140	; 0x8c
 80060e0:	589b      	ldr	r3, [r3, r2]
 80060e2:	2b22      	cmp	r3, #34	; 0x22
 80060e4:	d000      	beq.n	80060e8 <UART_RxISR_8BIT+0x20>
 80060e6:	e09a      	b.n	800621e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ee:	213c      	movs	r1, #60	; 0x3c
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060f4:	187b      	adds	r3, r7, r1
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	183b      	adds	r3, r7, r0
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b2d9      	uxtb	r1, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006104:	400a      	ands	r2, r1
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	225e      	movs	r2, #94	; 0x5e
 8006118:	5a9b      	ldrh	r3, [r3, r2]
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b299      	uxth	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	225e      	movs	r2, #94	; 0x5e
 8006124:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	225e      	movs	r2, #94	; 0x5e
 800612a:	5a9b      	ldrh	r3, [r3, r2]
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d000      	beq.n	8006134 <UART_RxISR_8BIT+0x6c>
 8006132:	e07c      	b.n	800622e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006134:	f3ef 8310 	mrs	r3, PRIMASK
 8006138:	61bb      	str	r3, [r7, #24]
  return(result);
 800613a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f383 8810 	msr	PRIMASK, r3
}
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4938      	ldr	r1, [pc, #224]	; (8006238 <UART_RxISR_8BIT+0x170>)
 8006156:	400a      	ands	r2, r1
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006166:	f3ef 8310 	mrs	r3, PRIMASK
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	2301      	movs	r3, #1
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	f383 8810 	msr	PRIMASK, r3
}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2101      	movs	r1, #1
 8006188:	438a      	bics	r2, r1
 800618a:	609a      	str	r2, [r3, #8]
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	228c      	movs	r2, #140	; 0x8c
 800619c:	2120      	movs	r1, #32
 800619e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d12f      	bne.n	8006214 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ba:	f3ef 8310 	mrs	r3, PRIMASK
 80061be:	60fb      	str	r3, [r7, #12]
  return(result);
 80061c0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c2:	633b      	str	r3, [r7, #48]	; 0x30
 80061c4:	2301      	movs	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f383 8810 	msr	PRIMASK, r3
}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2110      	movs	r1, #16
 80061dc:	438a      	bics	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	2210      	movs	r2, #16
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d103      	bne.n	8006202 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2210      	movs	r2, #16
 8006200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	225c      	movs	r2, #92	; 0x5c
 8006206:	5a9a      	ldrh	r2, [r3, r2]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	0011      	movs	r1, r2
 800620c:	0018      	movs	r0, r3
 800620e:	f7ff f8f9 	bl	8005404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006212:	e00c      	b.n	800622e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0018      	movs	r0, r3
 8006218:	f7fc faa0 	bl	800275c <HAL_UART_RxCpltCallback>
}
 800621c:	e007      	b.n	800622e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2108      	movs	r1, #8
 800622a:	430a      	orrs	r2, r1
 800622c:	619a      	str	r2, [r3, #24]
}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	46bd      	mov	sp, r7
 8006232:	b010      	add	sp, #64	; 0x40
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	fffffedf 	.word	0xfffffedf

0800623c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b090      	sub	sp, #64	; 0x40
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006244:	203e      	movs	r0, #62	; 0x3e
 8006246:	183b      	adds	r3, r7, r0
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	2160      	movs	r1, #96	; 0x60
 800624c:	5a52      	ldrh	r2, [r2, r1]
 800624e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	228c      	movs	r2, #140	; 0x8c
 8006254:	589b      	ldr	r3, [r3, r2]
 8006256:	2b22      	cmp	r3, #34	; 0x22
 8006258:	d000      	beq.n	800625c <UART_RxISR_16BIT+0x20>
 800625a:	e09a      	b.n	8006392 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006262:	213c      	movs	r1, #60	; 0x3c
 8006264:	187b      	adds	r3, r7, r1
 8006266:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800626e:	187b      	adds	r3, r7, r1
 8006270:	183a      	adds	r2, r7, r0
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	8812      	ldrh	r2, [r2, #0]
 8006276:	4013      	ands	r3, r2
 8006278:	b29a      	uxth	r2, r3
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006282:	1c9a      	adds	r2, r3, #2
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	225e      	movs	r2, #94	; 0x5e
 800628c:	5a9b      	ldrh	r3, [r3, r2]
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b299      	uxth	r1, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	225e      	movs	r2, #94	; 0x5e
 8006298:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	225e      	movs	r2, #94	; 0x5e
 800629e:	5a9b      	ldrh	r3, [r3, r2]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d000      	beq.n	80062a8 <UART_RxISR_16BIT+0x6c>
 80062a6:	e07c      	b.n	80063a2 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a8:	f3ef 8310 	mrs	r3, PRIMASK
 80062ac:	617b      	str	r3, [r7, #20]
  return(result);
 80062ae:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	2301      	movs	r3, #1
 80062b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f383 8810 	msr	PRIMASK, r3
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4938      	ldr	r1, [pc, #224]	; (80063ac <UART_RxISR_16BIT+0x170>)
 80062ca:	400a      	ands	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f383 8810 	msr	PRIMASK, r3
}
 80062d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062da:	f3ef 8310 	mrs	r3, PRIMASK
 80062de:	623b      	str	r3, [r7, #32]
  return(result);
 80062e0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e2:	633b      	str	r3, [r7, #48]	; 0x30
 80062e4:	2301      	movs	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	f383 8810 	msr	PRIMASK, r3
}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2101      	movs	r1, #1
 80062fc:	438a      	bics	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	f383 8810 	msr	PRIMASK, r3
}
 800630a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	228c      	movs	r2, #140	; 0x8c
 8006310:	2120      	movs	r1, #32
 8006312:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d12f      	bne.n	8006388 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632e:	f3ef 8310 	mrs	r3, PRIMASK
 8006332:	60bb      	str	r3, [r7, #8]
  return(result);
 8006334:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006338:	2301      	movs	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f383 8810 	msr	PRIMASK, r3
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2110      	movs	r1, #16
 8006350:	438a      	bics	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	2210      	movs	r2, #16
 8006368:	4013      	ands	r3, r2
 800636a:	2b10      	cmp	r3, #16
 800636c:	d103      	bne.n	8006376 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2210      	movs	r2, #16
 8006374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	225c      	movs	r2, #92	; 0x5c
 800637a:	5a9a      	ldrh	r2, [r3, r2]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f7ff f83f 	bl	8005404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006386:	e00c      	b.n	80063a2 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	0018      	movs	r0, r3
 800638c:	f7fc f9e6 	bl	800275c <HAL_UART_RxCpltCallback>
}
 8006390:	e007      	b.n	80063a2 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2108      	movs	r1, #8
 800639e:	430a      	orrs	r2, r1
 80063a0:	619a      	str	r2, [r3, #24]
}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b010      	add	sp, #64	; 0x40
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	fffffedf 	.word	0xfffffedf

080063b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b09c      	sub	sp, #112	; 0x70
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80063b8:	236a      	movs	r3, #106	; 0x6a
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	2160      	movs	r1, #96	; 0x60
 80063c0:	5a52      	ldrh	r2, [r2, r1]
 80063c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	228c      	movs	r2, #140	; 0x8c
 80063e0:	589b      	ldr	r3, [r3, r2]
 80063e2:	2b22      	cmp	r3, #34	; 0x22
 80063e4:	d000      	beq.n	80063e8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80063e6:	e144      	b.n	8006672 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80063e8:	235e      	movs	r3, #94	; 0x5e
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	2168      	movs	r1, #104	; 0x68
 80063f0:	5a52      	ldrh	r2, [r2, r1]
 80063f2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063f4:	e0eb      	b.n	80065ce <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063fc:	215c      	movs	r1, #92	; 0x5c
 80063fe:	187b      	adds	r3, r7, r1
 8006400:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006402:	187b      	adds	r3, r7, r1
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	236a      	movs	r3, #106	; 0x6a
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b2d9      	uxtb	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	400a      	ands	r2, r1
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	225e      	movs	r2, #94	; 0x5e
 8006428:	5a9b      	ldrh	r3, [r3, r2]
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b299      	uxth	r1, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	225e      	movs	r2, #94	; 0x5e
 8006434:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	2207      	movs	r2, #7
 8006442:	4013      	ands	r3, r2
 8006444:	d049      	beq.n	80064da <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006448:	2201      	movs	r2, #1
 800644a:	4013      	ands	r3, r2
 800644c:	d010      	beq.n	8006470 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800644e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006450:	2380      	movs	r3, #128	; 0x80
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4013      	ands	r3, r2
 8006456:	d00b      	beq.n	8006470 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2290      	movs	r2, #144	; 0x90
 8006464:	589b      	ldr	r3, [r3, r2]
 8006466:	2201      	movs	r2, #1
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2190      	movs	r1, #144	; 0x90
 800646e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006472:	2202      	movs	r2, #2
 8006474:	4013      	ands	r3, r2
 8006476:	d00f      	beq.n	8006498 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647a:	2201      	movs	r2, #1
 800647c:	4013      	ands	r3, r2
 800647e:	d00b      	beq.n	8006498 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2202      	movs	r2, #2
 8006486:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2290      	movs	r2, #144	; 0x90
 800648c:	589b      	ldr	r3, [r3, r2]
 800648e:	2204      	movs	r2, #4
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2190      	movs	r1, #144	; 0x90
 8006496:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649a:	2204      	movs	r2, #4
 800649c:	4013      	ands	r3, r2
 800649e:	d00f      	beq.n	80064c0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80064a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a2:	2201      	movs	r2, #1
 80064a4:	4013      	ands	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2204      	movs	r2, #4
 80064ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2290      	movs	r2, #144	; 0x90
 80064b4:	589b      	ldr	r3, [r3, r2]
 80064b6:	2202      	movs	r2, #2
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2190      	movs	r1, #144	; 0x90
 80064be:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2290      	movs	r2, #144	; 0x90
 80064c4:	589b      	ldr	r3, [r3, r2]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7fe ff91 	bl	80053f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2290      	movs	r2, #144	; 0x90
 80064d6:	2100      	movs	r1, #0
 80064d8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	225e      	movs	r2, #94	; 0x5e
 80064de:	5a9b      	ldrh	r3, [r3, r2]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d173      	bne.n	80065ce <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80064f0:	2301      	movs	r3, #1
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f383 8810 	msr	PRIMASK, r3
}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4961      	ldr	r1, [pc, #388]	; (800668c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8006508:	400a      	ands	r2, r1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006512:	f383 8810 	msr	PRIMASK, r3
}
 8006516:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006518:	f3ef 8310 	mrs	r3, PRIMASK
 800651c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006520:	657b      	str	r3, [r7, #84]	; 0x54
 8006522:	2301      	movs	r3, #1
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006528:	f383 8810 	msr	PRIMASK, r3
}
 800652c:	46c0      	nop			; (mov r8, r8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4955      	ldr	r1, [pc, #340]	; (8006690 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800653a:	400a      	ands	r2, r1
 800653c:	609a      	str	r2, [r3, #8]
 800653e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006540:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	228c      	movs	r2, #140	; 0x8c
 800654e:	2120      	movs	r1, #32
 8006550:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d12f      	bne.n	80065c6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656c:	f3ef 8310 	mrs	r3, PRIMASK
 8006570:	623b      	str	r3, [r7, #32]
  return(result);
 8006572:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006574:	653b      	str	r3, [r7, #80]	; 0x50
 8006576:	2301      	movs	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2110      	movs	r1, #16
 800658e:	438a      	bics	r2, r1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	f383 8810 	msr	PRIMASK, r3
}
 800659c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	2210      	movs	r2, #16
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d103      	bne.n	80065b4 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2210      	movs	r2, #16
 80065b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	225c      	movs	r2, #92	; 0x5c
 80065b8:	5a9a      	ldrh	r2, [r3, r2]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0011      	movs	r1, r2
 80065be:	0018      	movs	r0, r3
 80065c0:	f7fe ff20 	bl	8005404 <HAL_UARTEx_RxEventCallback>
 80065c4:	e003      	b.n	80065ce <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7fc f8c7 	bl	800275c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065ce:	235e      	movs	r3, #94	; 0x5e
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <UART_RxISR_8BIT_FIFOEN+0x232>
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	2220      	movs	r2, #32
 80065dc:	4013      	ands	r3, r2
 80065de:	d000      	beq.n	80065e2 <UART_RxISR_8BIT_FIFOEN+0x232>
 80065e0:	e709      	b.n	80063f6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065e2:	204e      	movs	r0, #78	; 0x4e
 80065e4:	183b      	adds	r3, r7, r0
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	215e      	movs	r1, #94	; 0x5e
 80065ea:	5a52      	ldrh	r2, [r2, r1]
 80065ec:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065ee:	0001      	movs	r1, r0
 80065f0:	187b      	adds	r3, r7, r1
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d044      	beq.n	8006682 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2268      	movs	r2, #104	; 0x68
 80065fc:	5a9b      	ldrh	r3, [r3, r2]
 80065fe:	187a      	adds	r2, r7, r1
 8006600:	8812      	ldrh	r2, [r2, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d23d      	bcs.n	8006682 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006606:	f3ef 8310 	mrs	r3, PRIMASK
 800660a:	60bb      	str	r3, [r7, #8]
  return(result);
 800660c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006610:	2301      	movs	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f383 8810 	msr	PRIMASK, r3
}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	491b      	ldr	r1, [pc, #108]	; (8006694 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8006628:	400a      	ands	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f383 8810 	msr	PRIMASK, r3
}
 8006636:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a17      	ldr	r2, [pc, #92]	; (8006698 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800663c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663e:	f3ef 8310 	mrs	r3, PRIMASK
 8006642:	617b      	str	r3, [r7, #20]
  return(result);
 8006644:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
 8006648:	2301      	movs	r3, #1
 800664a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f383 8810 	msr	PRIMASK, r3
}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2120      	movs	r1, #32
 8006660:	430a      	orrs	r2, r1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f383 8810 	msr	PRIMASK, r3
}
 800666e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006670:	e007      	b.n	8006682 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2108      	movs	r1, #8
 800667e:	430a      	orrs	r2, r1
 8006680:	619a      	str	r2, [r3, #24]
}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	46bd      	mov	sp, r7
 8006686:	b01c      	add	sp, #112	; 0x70
 8006688:	bd80      	pop	{r7, pc}
 800668a:	46c0      	nop			; (mov r8, r8)
 800668c:	fffffeff 	.word	0xfffffeff
 8006690:	effffffe 	.word	0xeffffffe
 8006694:	efffffff 	.word	0xefffffff
 8006698:	080060c9 	.word	0x080060c9

0800669c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b09e      	sub	sp, #120	; 0x78
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80066a4:	2372      	movs	r3, #114	; 0x72
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	2160      	movs	r1, #96	; 0x60
 80066ac:	5a52      	ldrh	r2, [r2, r1]
 80066ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	228c      	movs	r2, #140	; 0x8c
 80066cc:	589b      	ldr	r3, [r3, r2]
 80066ce:	2b22      	cmp	r3, #34	; 0x22
 80066d0:	d000      	beq.n	80066d4 <UART_RxISR_16BIT_FIFOEN+0x38>
 80066d2:	e144      	b.n	800695e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80066d4:	2366      	movs	r3, #102	; 0x66
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	2168      	movs	r1, #104	; 0x68
 80066dc:	5a52      	ldrh	r2, [r2, r1]
 80066de:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066e0:	e0eb      	b.n	80068ba <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e8:	2164      	movs	r1, #100	; 0x64
 80066ea:	187b      	adds	r3, r7, r1
 80066ec:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80066f4:	187b      	adds	r3, r7, r1
 80066f6:	2272      	movs	r2, #114	; 0x72
 80066f8:	18ba      	adds	r2, r7, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	8812      	ldrh	r2, [r2, #0]
 80066fe:	4013      	ands	r3, r2
 8006700:	b29a      	uxth	r2, r3
 8006702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006704:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	1c9a      	adds	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	225e      	movs	r2, #94	; 0x5e
 8006714:	5a9b      	ldrh	r3, [r3, r2]
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b299      	uxth	r1, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	225e      	movs	r2, #94	; 0x5e
 8006720:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800672a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672c:	2207      	movs	r2, #7
 800672e:	4013      	ands	r3, r2
 8006730:	d049      	beq.n	80067c6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006734:	2201      	movs	r2, #1
 8006736:	4013      	ands	r3, r2
 8006738:	d010      	beq.n	800675c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800673a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800673c:	2380      	movs	r3, #128	; 0x80
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	4013      	ands	r3, r2
 8006742:	d00b      	beq.n	800675c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2201      	movs	r2, #1
 800674a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2290      	movs	r2, #144	; 0x90
 8006750:	589b      	ldr	r3, [r3, r2]
 8006752:	2201      	movs	r2, #1
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2190      	movs	r1, #144	; 0x90
 800675a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800675e:	2202      	movs	r2, #2
 8006760:	4013      	ands	r3, r2
 8006762:	d00f      	beq.n	8006784 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006766:	2201      	movs	r2, #1
 8006768:	4013      	ands	r3, r2
 800676a:	d00b      	beq.n	8006784 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2202      	movs	r2, #2
 8006772:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2290      	movs	r2, #144	; 0x90
 8006778:	589b      	ldr	r3, [r3, r2]
 800677a:	2204      	movs	r2, #4
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2190      	movs	r1, #144	; 0x90
 8006782:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006786:	2204      	movs	r2, #4
 8006788:	4013      	ands	r3, r2
 800678a:	d00f      	beq.n	80067ac <UART_RxISR_16BIT_FIFOEN+0x110>
 800678c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800678e:	2201      	movs	r2, #1
 8006790:	4013      	ands	r3, r2
 8006792:	d00b      	beq.n	80067ac <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2204      	movs	r2, #4
 800679a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2290      	movs	r2, #144	; 0x90
 80067a0:	589b      	ldr	r3, [r3, r2]
 80067a2:	2202      	movs	r2, #2
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2190      	movs	r1, #144	; 0x90
 80067aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2290      	movs	r2, #144	; 0x90
 80067b0:	589b      	ldr	r3, [r3, r2]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	0018      	movs	r0, r3
 80067ba:	f7fe fe1b 	bl	80053f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2290      	movs	r2, #144	; 0x90
 80067c2:	2100      	movs	r1, #0
 80067c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	225e      	movs	r2, #94	; 0x5e
 80067ca:	5a9b      	ldrh	r3, [r3, r2]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d173      	bne.n	80068ba <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067dc:	2301      	movs	r3, #1
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e2:	f383 8810 	msr	PRIMASK, r3
}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4961      	ldr	r1, [pc, #388]	; (8006978 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80067f4:	400a      	ands	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006804:	f3ef 8310 	mrs	r3, PRIMASK
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800680c:	65bb      	str	r3, [r7, #88]	; 0x58
 800680e:	2301      	movs	r3, #1
 8006810:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	f383 8810 	msr	PRIMASK, r3
}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4955      	ldr	r1, [pc, #340]	; (800697c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8006826:	400a      	ands	r2, r1
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800682c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006830:	f383 8810 	msr	PRIMASK, r3
}
 8006834:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	228c      	movs	r2, #140	; 0x8c
 800683a:	2120      	movs	r1, #32
 800683c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d12f      	bne.n	80068b2 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006858:	f3ef 8310 	mrs	r3, PRIMASK
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006860:	657b      	str	r3, [r7, #84]	; 0x54
 8006862:	2301      	movs	r3, #1
 8006864:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	f383 8810 	msr	PRIMASK, r3
}
 800686c:	46c0      	nop			; (mov r8, r8)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2110      	movs	r1, #16
 800687a:	438a      	bics	r2, r1
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006880:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	f383 8810 	msr	PRIMASK, r3
}
 8006888:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	2210      	movs	r2, #16
 8006892:	4013      	ands	r3, r2
 8006894:	2b10      	cmp	r3, #16
 8006896:	d103      	bne.n	80068a0 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2210      	movs	r2, #16
 800689e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	225c      	movs	r2, #92	; 0x5c
 80068a4:	5a9a      	ldrh	r2, [r3, r2]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f7fe fdaa 	bl	8005404 <HAL_UARTEx_RxEventCallback>
 80068b0:	e003      	b.n	80068ba <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7fb ff51 	bl	800275c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068ba:	2366      	movs	r3, #102	; 0x66
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <UART_RxISR_16BIT_FIFOEN+0x232>
 80068c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c6:	2220      	movs	r2, #32
 80068c8:	4013      	ands	r3, r2
 80068ca:	d000      	beq.n	80068ce <UART_RxISR_16BIT_FIFOEN+0x232>
 80068cc:	e709      	b.n	80066e2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80068ce:	2052      	movs	r0, #82	; 0x52
 80068d0:	183b      	adds	r3, r7, r0
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	215e      	movs	r1, #94	; 0x5e
 80068d6:	5a52      	ldrh	r2, [r2, r1]
 80068d8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80068da:	0001      	movs	r1, r0
 80068dc:	187b      	adds	r3, r7, r1
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d044      	beq.n	800696e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2268      	movs	r2, #104	; 0x68
 80068e8:	5a9b      	ldrh	r3, [r3, r2]
 80068ea:	187a      	adds	r2, r7, r1
 80068ec:	8812      	ldrh	r2, [r2, #0]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d23d      	bcs.n	800696e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068f2:	f3ef 8310 	mrs	r3, PRIMASK
 80068f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80068f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	2301      	movs	r3, #1
 80068fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f383 8810 	msr	PRIMASK, r3
}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	491b      	ldr	r1, [pc, #108]	; (8006980 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006914:	400a      	ands	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f383 8810 	msr	PRIMASK, r3
}
 8006922:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a17      	ldr	r2, [pc, #92]	; (8006984 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8006928:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800692a:	f3ef 8310 	mrs	r3, PRIMASK
 800692e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006930:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006932:	64bb      	str	r3, [r7, #72]	; 0x48
 8006934:	2301      	movs	r3, #1
 8006936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f383 8810 	msr	PRIMASK, r3
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2120      	movs	r1, #32
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006952:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	f383 8810 	msr	PRIMASK, r3
}
 800695a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800695c:	e007      	b.n	800696e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2108      	movs	r1, #8
 800696a:	430a      	orrs	r2, r1
 800696c:	619a      	str	r2, [r3, #24]
}
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	46bd      	mov	sp, r7
 8006972:	b01e      	add	sp, #120	; 0x78
 8006974:	bd80      	pop	{r7, pc}
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	fffffeff 	.word	0xfffffeff
 800697c:	effffffe 	.word	0xeffffffe
 8006980:	efffffff 	.word	0xefffffff
 8006984:	0800623d 	.word	0x0800623d

08006988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b002      	add	sp, #8
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069a0:	46c0      	nop			; (mov r8, r8)
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b002      	add	sp, #8
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2284      	movs	r2, #132	; 0x84
 80069c4:	5c9b      	ldrb	r3, [r3, r2]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_UARTEx_DisableFifoMode+0x16>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e027      	b.n	8006a1e <HAL_UARTEx_DisableFifoMode+0x66>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2284      	movs	r2, #132	; 0x84
 80069d2:	2101      	movs	r1, #1
 80069d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2288      	movs	r2, #136	; 0x88
 80069da:	2124      	movs	r1, #36	; 0x24
 80069dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2101      	movs	r1, #1
 80069f2:	438a      	bics	r2, r1
 80069f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <HAL_UARTEx_DisableFifoMode+0x70>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2288      	movs	r2, #136	; 0x88
 8006a10:	2120      	movs	r1, #32
 8006a12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2284      	movs	r2, #132	; 0x84
 8006a18:	2100      	movs	r1, #0
 8006a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b004      	add	sp, #16
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	dfffffff 	.word	0xdfffffff

08006a2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2284      	movs	r2, #132	; 0x84
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e02e      	b.n	8006aa2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2284      	movs	r2, #132	; 0x84
 8006a48:	2101      	movs	r1, #1
 8006a4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2288      	movs	r2, #136	; 0x88
 8006a50:	2124      	movs	r1, #36	; 0x24
 8006a52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2101      	movs	r1, #1
 8006a68:	438a      	bics	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	08d9      	lsrs	r1, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 f854 	bl	8006b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2288      	movs	r2, #136	; 0x88
 8006a94:	2120      	movs	r1, #32
 8006a96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2284      	movs	r2, #132	; 0x84
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b004      	add	sp, #16
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2284      	movs	r2, #132	; 0x84
 8006aba:	5c9b      	ldrb	r3, [r3, r2]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e02f      	b.n	8006b24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2284      	movs	r2, #132	; 0x84
 8006ac8:	2101      	movs	r1, #1
 8006aca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2288      	movs	r2, #136	; 0x88
 8006ad0:	2124      	movs	r1, #36	; 0x24
 8006ad2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	438a      	bics	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	4a0e      	ldr	r2, [pc, #56]	; (8006b2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	0019      	movs	r1, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 f813 	bl	8006b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2288      	movs	r2, #136	; 0x88
 8006b16:	2120      	movs	r1, #32
 8006b18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2284      	movs	r2, #132	; 0x84
 8006b1e:	2100      	movs	r1, #0
 8006b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b004      	add	sp, #16
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	f1ffffff 	.word	0xf1ffffff

08006b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d108      	bne.n	8006b52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	226a      	movs	r2, #106	; 0x6a
 8006b44:	2101      	movs	r1, #1
 8006b46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2268      	movs	r2, #104	; 0x68
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b50:	e043      	b.n	8006bda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b52:	260f      	movs	r6, #15
 8006b54:	19bb      	adds	r3, r7, r6
 8006b56:	2208      	movs	r2, #8
 8006b58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b5a:	200e      	movs	r0, #14
 8006b5c:	183b      	adds	r3, r7, r0
 8006b5e:	2208      	movs	r2, #8
 8006b60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	0e5b      	lsrs	r3, r3, #25
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	240d      	movs	r4, #13
 8006b6e:	193b      	adds	r3, r7, r4
 8006b70:	2107      	movs	r1, #7
 8006b72:	400a      	ands	r2, r1
 8006b74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	0f5b      	lsrs	r3, r3, #29
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	250c      	movs	r5, #12
 8006b82:	197b      	adds	r3, r7, r5
 8006b84:	2107      	movs	r1, #7
 8006b86:	400a      	ands	r2, r1
 8006b88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b8a:	183b      	adds	r3, r7, r0
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	197a      	adds	r2, r7, r5
 8006b90:	7812      	ldrb	r2, [r2, #0]
 8006b92:	4914      	ldr	r1, [pc, #80]	; (8006be4 <UARTEx_SetNbDataToProcess+0xb4>)
 8006b94:	5c8a      	ldrb	r2, [r1, r2]
 8006b96:	435a      	muls	r2, r3
 8006b98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b9a:	197b      	adds	r3, r7, r5
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006ba0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba2:	0019      	movs	r1, r3
 8006ba4:	f7f9 fb56 	bl	8000254 <__divsi3>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	b299      	uxth	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	226a      	movs	r2, #106	; 0x6a
 8006bb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bb2:	19bb      	adds	r3, r7, r6
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	193a      	adds	r2, r7, r4
 8006bb8:	7812      	ldrb	r2, [r2, #0]
 8006bba:	490a      	ldr	r1, [pc, #40]	; (8006be4 <UARTEx_SetNbDataToProcess+0xb4>)
 8006bbc:	5c8a      	ldrb	r2, [r1, r2]
 8006bbe:	435a      	muls	r2, r3
 8006bc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bc2:	193b      	adds	r3, r7, r4
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <UARTEx_SetNbDataToProcess+0xb8>)
 8006bc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bca:	0019      	movs	r1, r3
 8006bcc:	f7f9 fb42 	bl	8000254 <__divsi3>
 8006bd0:	0003      	movs	r3, r0
 8006bd2:	b299      	uxth	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2268      	movs	r2, #104	; 0x68
 8006bd8:	5299      	strh	r1, [r3, r2]
}
 8006bda:	46c0      	nop			; (mov r8, r8)
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	b005      	add	sp, #20
 8006be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	0800c610 	.word	0x0800c610
 8006be8:	0800c618 	.word	0x0800c618

08006bec <__NVIC_SetPriority>:
{
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	0002      	movs	r2, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	1dfb      	adds	r3, r7, #7
 8006bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006bfa:	1dfb      	adds	r3, r7, #7
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006c00:	d828      	bhi.n	8006c54 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c02:	4a2f      	ldr	r2, [pc, #188]	; (8006cc0 <__NVIC_SetPriority+0xd4>)
 8006c04:	1dfb      	adds	r3, r7, #7
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	b25b      	sxtb	r3, r3
 8006c0a:	089b      	lsrs	r3, r3, #2
 8006c0c:	33c0      	adds	r3, #192	; 0xc0
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	589b      	ldr	r3, [r3, r2]
 8006c12:	1dfa      	adds	r2, r7, #7
 8006c14:	7812      	ldrb	r2, [r2, #0]
 8006c16:	0011      	movs	r1, r2
 8006c18:	2203      	movs	r2, #3
 8006c1a:	400a      	ands	r2, r1
 8006c1c:	00d2      	lsls	r2, r2, #3
 8006c1e:	21ff      	movs	r1, #255	; 0xff
 8006c20:	4091      	lsls	r1, r2
 8006c22:	000a      	movs	r2, r1
 8006c24:	43d2      	mvns	r2, r2
 8006c26:	401a      	ands	r2, r3
 8006c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	019b      	lsls	r3, r3, #6
 8006c2e:	22ff      	movs	r2, #255	; 0xff
 8006c30:	401a      	ands	r2, r3
 8006c32:	1dfb      	adds	r3, r7, #7
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	0018      	movs	r0, r3
 8006c38:	2303      	movs	r3, #3
 8006c3a:	4003      	ands	r3, r0
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c40:	481f      	ldr	r0, [pc, #124]	; (8006cc0 <__NVIC_SetPriority+0xd4>)
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	089b      	lsrs	r3, r3, #2
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	33c0      	adds	r3, #192	; 0xc0
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	501a      	str	r2, [r3, r0]
}
 8006c52:	e031      	b.n	8006cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <__NVIC_SetPriority+0xd8>)
 8006c56:	1dfb      	adds	r3, r7, #7
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	230f      	movs	r3, #15
 8006c5e:	400b      	ands	r3, r1
 8006c60:	3b08      	subs	r3, #8
 8006c62:	089b      	lsrs	r3, r3, #2
 8006c64:	3306      	adds	r3, #6
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	18d3      	adds	r3, r2, r3
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1dfa      	adds	r2, r7, #7
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	0011      	movs	r1, r2
 8006c74:	2203      	movs	r2, #3
 8006c76:	400a      	ands	r2, r1
 8006c78:	00d2      	lsls	r2, r2, #3
 8006c7a:	21ff      	movs	r1, #255	; 0xff
 8006c7c:	4091      	lsls	r1, r2
 8006c7e:	000a      	movs	r2, r1
 8006c80:	43d2      	mvns	r2, r2
 8006c82:	401a      	ands	r2, r3
 8006c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	401a      	ands	r2, r3
 8006c8e:	1dfb      	adds	r3, r7, #7
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	0018      	movs	r0, r3
 8006c94:	2303      	movs	r3, #3
 8006c96:	4003      	ands	r3, r0
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c9c:	4809      	ldr	r0, [pc, #36]	; (8006cc4 <__NVIC_SetPriority+0xd8>)
 8006c9e:	1dfb      	adds	r3, r7, #7
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	001c      	movs	r4, r3
 8006ca4:	230f      	movs	r3, #15
 8006ca6:	4023      	ands	r3, r4
 8006ca8:	3b08      	subs	r3, #8
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	430a      	orrs	r2, r1
 8006cae:	3306      	adds	r3, #6
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	18c3      	adds	r3, r0, r3
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	46c0      	nop			; (mov r8, r8)
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b003      	add	sp, #12
 8006cbe:	bd90      	pop	{r4, r7, pc}
 8006cc0:	e000e100 	.word	0xe000e100
 8006cc4:	e000ed00 	.word	0xe000ed00

08006cc8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <SysTick_Handler+0x1c>)
 8006cce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cd0:	f001 fc88 	bl	80085e4 <xTaskGetSchedulerState>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d001      	beq.n	8006cde <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cda:	f002 fb05 	bl	80092e8 <xPortSysTickHandler>
  }
}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000e010 	.word	0xe000e010

08006ce8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cec:	2305      	movs	r3, #5
 8006cee:	425b      	negs	r3, r3
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	f7ff ff7a 	bl	8006bec <__NVIC_SetPriority>
#endif
}
 8006cf8:	46c0      	nop			; (mov r8, r8)
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
	...

08006d00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d06:	f3ef 8305 	mrs	r3, IPSR
 8006d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d12:	2306      	movs	r3, #6
 8006d14:	425b      	negs	r3, r3
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	e00c      	b.n	8006d34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <osKernelInitialize+0x40>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d22:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <osKernelInitialize+0x40>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	607b      	str	r3, [r7, #4]
 8006d2c:	e002      	b.n	8006d34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	425b      	negs	r3, r3
 8006d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d34:	687b      	ldr	r3, [r7, #4]
}
 8006d36:	0018      	movs	r0, r3
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	20000364 	.word	0x20000364

08006d44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d4a:	f3ef 8305 	mrs	r3, IPSR
 8006d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d56:	2306      	movs	r3, #6
 8006d58:	425b      	negs	r3, r3
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	e010      	b.n	8006d80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d5e:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <osKernelStart+0x48>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d109      	bne.n	8006d7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d66:	f7ff ffbf 	bl	8006ce8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <osKernelStart+0x48>)
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d70:	f001 f84e 	bl	8007e10 <vTaskStartScheduler>
      stat = osOK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	607b      	str	r3, [r7, #4]
 8006d78:	e002      	b.n	8006d80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	425b      	negs	r3, r3
 8006d7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d80:	687b      	ldr	r3, [r7, #4]
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b002      	add	sp, #8
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	20000364 	.word	0x20000364

08006d90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d90:	b5b0      	push	{r4, r5, r7, lr}
 8006d92:	b08e      	sub	sp, #56	; 0x38
 8006d94:	af04      	add	r7, sp, #16
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da0:	f3ef 8305 	mrs	r3, IPSR
 8006da4:	617b      	str	r3, [r7, #20]
  return(result);
 8006da6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d000      	beq.n	8006dae <osThreadNew+0x1e>
 8006dac:	e081      	b.n	8006eb2 <osThreadNew+0x122>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d100      	bne.n	8006db6 <osThreadNew+0x26>
 8006db4:	e07d      	b.n	8006eb2 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8006db6:	2380      	movs	r3, #128	; 0x80
 8006db8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dba:	2318      	movs	r3, #24
 8006dbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d044      	beq.n	8006e58 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <osThreadNew+0x4c>
        name = attr->name;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <osThreadNew+0x70>
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	2b38      	cmp	r3, #56	; 0x38
 8006df4:	d804      	bhi.n	8006e00 <osThreadNew+0x70>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d001      	beq.n	8006e04 <osThreadNew+0x74>
        return (NULL);
 8006e00:	2300      	movs	r3, #0
 8006e02:	e057      	b.n	8006eb4 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00e      	beq.n	8006e3a <osThreadNew+0xaa>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	2bbb      	cmp	r3, #187	; 0xbb
 8006e22:	d90a      	bls.n	8006e3a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <osThreadNew+0xaa>
        mem = 1;
 8006e34:	2301      	movs	r3, #1
 8006e36:	61bb      	str	r3, [r7, #24]
 8006e38:	e010      	b.n	8006e5c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <osThreadNew+0xcc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d108      	bne.n	8006e5c <osThreadNew+0xcc>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <osThreadNew+0xcc>
          mem = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e001      	b.n	8006e5c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d112      	bne.n	8006e88 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e6a:	68bd      	ldr	r5, [r7, #8]
 8006e6c:	6a3c      	ldr	r4, [r7, #32]
 8006e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	9302      	str	r3, [sp, #8]
 8006e74:	9201      	str	r2, [sp, #4]
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	002b      	movs	r3, r5
 8006e7c:	0022      	movs	r2, r4
 8006e7e:	f000 fe08 	bl	8007a92 <xTaskCreateStatic>
 8006e82:	0003      	movs	r3, r0
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e014      	b.n	8006eb2 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d111      	bne.n	8006eb2 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68bc      	ldr	r4, [r7, #8]
 8006e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	2310      	movs	r3, #16
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	0023      	movs	r3, r4
 8006ea4:	f000 fe39 	bl	8007b1a <xTaskCreate>
 8006ea8:	0003      	movs	r3, r0
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d001      	beq.n	8006eb2 <osThreadNew+0x122>
            hTask = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006eb2:	693b      	ldr	r3, [r7, #16]
}
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b00a      	add	sp, #40	; 0x28
 8006eba:	bdb0      	pop	{r4, r5, r7, pc}

08006ebc <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <osThreadFlagsSet+0x1a>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da03      	bge.n	8006ede <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	425b      	negs	r3, r3
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	e031      	b.n	8006f42 <osThreadFlagsSet+0x86>
  }
  else {
    rflags = (uint32_t)osError;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ee4:	f3ef 8305 	mrs	r3, IPSR
 8006ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8006eea:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01b      	beq.n	8006f28 <osThreadFlagsSet+0x6c>
      yield = pdFALSE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6978      	ldr	r0, [r7, #20]
 8006ef8:	2308      	movs	r3, #8
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	2300      	movs	r3, #0
 8006f00:	2201      	movs	r2, #1
 8006f02:	f001 fcdb 	bl	80088bc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8006f06:	230c      	movs	r3, #12
 8006f08:	18fb      	adds	r3, r7, r3
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	9200      	str	r2, [sp, #0]
 8006f10:	2200      	movs	r2, #0
 8006f12:	2100      	movs	r1, #0
 8006f14:	f001 fcd2 	bl	80088bc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <osThreadFlagsSet+0x86>
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <osThreadFlagsSet+0x90>)
 8006f20:	2280      	movs	r2, #128	; 0x80
 8006f22:	0552      	lsls	r2, r2, #21
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	e00c      	b.n	8006f42 <osThreadFlagsSet+0x86>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f001 fc28 	bl	8008784 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8006f34:	230c      	movs	r3, #12
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	6978      	ldr	r0, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f001 fc21 	bl	8008784 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b006      	add	sp, #24
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	e000ed04 	.word	0xe000ed04

08006f50 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5c:	f3ef 8305 	mrs	r3, IPSR
 8006f60:	617b      	str	r3, [r7, #20]
  return(result);
 8006f62:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006f68:	2306      	movs	r3, #6
 8006f6a:	425b      	negs	r3, r3
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6e:	e06a      	b.n	8007046 <osThreadFlagsWait+0xf6>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da03      	bge.n	8006f7e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8006f76:	2304      	movs	r3, #4
 8006f78:	425b      	negs	r3, r3
 8006f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f7c:	e063      	b.n	8007046 <osThreadFlagsWait+0xf6>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2202      	movs	r2, #2
 8006f82:	4013      	ands	r3, r2
 8006f84:	d002      	beq.n	8006f8c <osThreadFlagsWait+0x3c>
      clear = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8a:	e001      	b.n	8006f90 <osThreadFlagsWait+0x40>
    } else {
      clear = flags;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8006f98:	f001 f830 	bl	8007ffc <xTaskGetTickCount>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	623b      	str	r3, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	18ba      	adds	r2, r7, r2
 8006fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f001 fb93 	bl	80086d4 <xTaskNotifyWait>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	61fb      	str	r3, [r7, #28]

      if (rval == pdPASS) {
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d135      	bne.n	8007024 <osThreadFlagsWait+0xd4>
        rflags &= flags;
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d00c      	beq.n	8006fea <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d031      	beq.n	8007040 <osThreadFlagsWait+0xf0>
            break;
          } else {
            if (timeout == 0U) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10e      	bne.n	8007000 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006fe8:	e02d      	b.n	8007046 <osThreadFlagsWait+0xf6>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d128      	bne.n	8007044 <osThreadFlagsWait+0xf4>
            break;
          } else {
            if (timeout == 0U) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d103      	bne.n	8007000 <osThreadFlagsWait+0xb0>
              rflags = (uint32_t)osErrorResource;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	425b      	negs	r3, r3
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8006ffe:	e022      	b.n	8007046 <osThreadFlagsWait+0xf6>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007000:	f000 fffc 	bl	8007ffc <xTaskGetTickCount>
 8007004:	0002      	movs	r2, r0
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	429a      	cmp	r2, r3
 8007012:	d902      	bls.n	800701a <osThreadFlagsWait+0xca>
          tout  = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
 8007018:	e00e      	b.n	8007038 <osThreadFlagsWait+0xe8>
        } else {
          tout -= td;
 800701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
 8007022:	e009      	b.n	8007038 <osThreadFlagsWait+0xe8>
        }
      }
      else {
        if (timeout == 0) {
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <osThreadFlagsWait+0xe2>
          rflags = (uint32_t)osErrorResource;
 800702a:	2303      	movs	r3, #3
 800702c:	425b      	negs	r3, r3
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007030:	e002      	b.n	8007038 <osThreadFlagsWait+0xe8>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007032:	2302      	movs	r3, #2
 8007034:	425b      	negs	r3, r3
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1b0      	bne.n	8006fa0 <osThreadFlagsWait+0x50>
 800703e:	e002      	b.n	8007046 <osThreadFlagsWait+0xf6>
            break;
 8007040:	46c0      	nop			; (mov r8, r8)
 8007042:	e000      	b.n	8007046 <osThreadFlagsWait+0xf6>
            break;
 8007044:	46c0      	nop			; (mov r8, r8)
  }

  /* Return flags before clearing */
  return (rflags);
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007048:	0018      	movs	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	b00c      	add	sp, #48	; 0x30
 800704e:	bd80      	pop	{r7, pc}

08007050 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007058:	f3ef 8305 	mrs	r3, IPSR
 800705c:	60bb      	str	r3, [r7, #8]
  return(result);
 800705e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <osDelay+0x1c>
    stat = osErrorISR;
 8007064:	2306      	movs	r3, #6
 8007066:	425b      	negs	r3, r3
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e008      	b.n	800707e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <osDelay+0x2e>
      vTaskDelay(ticks);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	0018      	movs	r0, r3
 800707a:	f000 fea3 	bl	8007dc4 <vTaskDelay>
    }
  }

  return (stat);
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	0018      	movs	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	b004      	add	sp, #16
 8007086:	bd80      	pop	{r7, pc}

08007088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a06      	ldr	r2, [pc, #24]	; (80070b0 <vApplicationGetIdleTaskMemory+0x28>)
 8007098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4a05      	ldr	r2, [pc, #20]	; (80070b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800709e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2280      	movs	r2, #128	; 0x80
 80070a4:	601a      	str	r2, [r3, #0]
}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	46bd      	mov	sp, r7
 80070aa:	b004      	add	sp, #16
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	20000368 	.word	0x20000368
 80070b4:	20000424 	.word	0x20000424

080070b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4a06      	ldr	r2, [pc, #24]	; (80070e0 <vApplicationGetTimerTaskMemory+0x28>)
 80070c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4a05      	ldr	r2, [pc, #20]	; (80070e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80070ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	0052      	lsls	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
}
 80070d8:	46c0      	nop			; (mov r8, r8)
 80070da:	46bd      	mov	sp, r7
 80070dc:	b004      	add	sp, #16
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000624 	.word	0x20000624
 80070e4:	200006e0 	.word	0x200006e0

080070e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3308      	adds	r3, #8
 80070f4:	001a      	movs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	4252      	negs	r2, r2
 8007100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3308      	adds	r3, #8
 8007106:	001a      	movs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3308      	adds	r3, #8
 8007110:	001a      	movs	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b002      	add	sp, #8
 8007122:	bd80      	pop	{r7, pc}

08007124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	46bd      	mov	sp, r7
 8007136:	b002      	add	sp, #8
 8007138:	bd80      	pop	{r7, pc}

0800713a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	46bd      	mov	sp, r7
 800717a:	b004      	add	sp, #16
 800717c:	bd80      	pop	{r7, pc}

0800717e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3301      	adds	r3, #1
 8007192:	d103      	bne.n	800719c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e00c      	b.n	80071b6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3308      	adds	r3, #8
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e002      	b.n	80071aa <vListInsert+0x2c>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d2f6      	bcs.n	80071a4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b004      	add	sp, #16
 80071e8:	bd80      	pop	{r7, pc}

080071ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6892      	ldr	r2, [r2, #8]
 8007200:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6852      	ldr	r2, [r2, #4]
 800720a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	429a      	cmp	r2, r3
 8007214:	d103      	bne.n	800721e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	1e5a      	subs	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
}
 8007232:	0018      	movs	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	b004      	add	sp, #16
 8007238:	bd80      	pop	{r7, pc}

0800723a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <xQueueGenericReset+0x18>
 800724e:	b672      	cpsid	i
 8007250:	e7fe      	b.n	8007250 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007252:	f001 ffed 	bl	8009230 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	434b      	muls	r3, r1
 8007264:	18d2      	adds	r2, r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	1e59      	subs	r1, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	434b      	muls	r3, r1
 8007288:	18d2      	adds	r2, r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2244      	movs	r2, #68	; 0x44
 8007292:	21ff      	movs	r1, #255	; 0xff
 8007294:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2245      	movs	r2, #69	; 0x45
 800729a:	21ff      	movs	r1, #255	; 0xff
 800729c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d013      	beq.n	80072d4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3310      	adds	r3, #16
 80072b0:	0018      	movs	r0, r3
 80072b2:	f000 ffff 	bl	80082b4 <xTaskRemoveFromEventList>
 80072b6:	1e03      	subs	r3, r0, #0
 80072b8:	d00c      	beq.n	80072d4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072ba:	f001 ffa9 	bl	8009210 <vPortYield>
 80072be:	e009      	b.n	80072d4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3310      	adds	r3, #16
 80072c4:	0018      	movs	r0, r3
 80072c6:	f7ff ff0f 	bl	80070e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3324      	adds	r3, #36	; 0x24
 80072ce:	0018      	movs	r0, r3
 80072d0:	f7ff ff0a 	bl	80070e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072d4:	f001 ffbe 	bl	8009254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072d8:	2301      	movs	r3, #1
}
 80072da:	0018      	movs	r0, r3
 80072dc:	46bd      	mov	sp, r7
 80072de:	b004      	add	sp, #16
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072e2:	b590      	push	{r4, r7, lr}
 80072e4:	b089      	sub	sp, #36	; 0x24
 80072e6:	af02      	add	r7, sp, #8
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <xQueueGenericCreateStatic+0x18>
 80072f6:	b672      	cpsid	i
 80072f8:	e7fe      	b.n	80072f8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <xQueueGenericCreateStatic+0x22>
 8007300:	b672      	cpsid	i
 8007302:	e7fe      	b.n	8007302 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <xQueueGenericCreateStatic+0x2e>
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <xQueueGenericCreateStatic+0x32>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <xQueueGenericCreateStatic+0x34>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <xQueueGenericCreateStatic+0x3c>
 800731a:	b672      	cpsid	i
 800731c:	e7fe      	b.n	800731c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <xQueueGenericCreateStatic+0x48>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <xQueueGenericCreateStatic+0x4c>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <xQueueGenericCreateStatic+0x4e>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <xQueueGenericCreateStatic+0x56>
 8007334:	b672      	cpsid	i
 8007336:	e7fe      	b.n	8007336 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007338:	2350      	movs	r3, #80	; 0x50
 800733a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b50      	cmp	r3, #80	; 0x50
 8007340:	d001      	beq.n	8007346 <xQueueGenericCreateStatic+0x64>
 8007342:	b672      	cpsid	i
 8007344:	e7fe      	b.n	8007344 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007346:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00e      	beq.n	8007370 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2246      	movs	r2, #70	; 0x46
 8007356:	2101      	movs	r1, #1
 8007358:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800735a:	2328      	movs	r3, #40	; 0x28
 800735c:	18fb      	adds	r3, r7, r3
 800735e:	781c      	ldrb	r4, [r3, #0]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	0023      	movs	r3, r4
 800736c:	f000 f805 	bl	800737a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007370:	697b      	ldr	r3, [r7, #20]
	}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	b007      	add	sp, #28
 8007378:	bd90      	pop	{r4, r7, pc}

0800737a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	001a      	movs	r2, r3
 8007388:	1cfb      	adds	r3, r7, #3
 800738a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e002      	b.n	80073a0 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2101      	movs	r1, #1
 80073b0:	0018      	movs	r0, r3
 80073b2:	f7ff ff42 	bl	800723a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1cfa      	adds	r2, r7, #3
 80073ba:	214c      	movs	r1, #76	; 0x4c
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b004      	add	sp, #16
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08a      	sub	sp, #40	; 0x28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073d6:	2300      	movs	r3, #0
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <xQueueGenericSend+0x20>
 80073e4:	b672      	cpsid	i
 80073e6:	e7fe      	b.n	80073e6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <xQueueGenericSend+0x2e>
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <xQueueGenericSend+0x32>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e000      	b.n	80073fc <xQueueGenericSend+0x34>
 80073fa:	2300      	movs	r3, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <xQueueGenericSend+0x3c>
 8007400:	b672      	cpsid	i
 8007402:	e7fe      	b.n	8007402 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b02      	cmp	r3, #2
 8007408:	d103      	bne.n	8007412 <xQueueGenericSend+0x4a>
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <xQueueGenericSend+0x4e>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <xQueueGenericSend+0x50>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <xQueueGenericSend+0x58>
 800741c:	b672      	cpsid	i
 800741e:	e7fe      	b.n	800741e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007420:	f001 f8e0 	bl	80085e4 <xTaskGetSchedulerState>
 8007424:	1e03      	subs	r3, r0, #0
 8007426:	d102      	bne.n	800742e <xQueueGenericSend+0x66>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <xQueueGenericSend+0x6a>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xQueueGenericSend+0x6c>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <xQueueGenericSend+0x74>
 8007438:	b672      	cpsid	i
 800743a:	e7fe      	b.n	800743a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800743c:	f001 fef8 	bl	8009230 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	429a      	cmp	r2, r3
 800744a:	d302      	bcc.n	8007452 <xQueueGenericSend+0x8a>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d11e      	bne.n	8007490 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f9a2 	bl	80077a2 <prvCopyDataToQueue>
 800745e:	0003      	movs	r3, r0
 8007460:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	3324      	adds	r3, #36	; 0x24
 800746e:	0018      	movs	r0, r3
 8007470:	f000 ff20 	bl	80082b4 <xTaskRemoveFromEventList>
 8007474:	1e03      	subs	r3, r0, #0
 8007476:	d007      	beq.n	8007488 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007478:	f001 feca 	bl	8009210 <vPortYield>
 800747c:	e004      	b.n	8007488 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007484:	f001 fec4 	bl	8009210 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007488:	f001 fee4 	bl	8009254 <vPortExitCritical>
				return pdPASS;
 800748c:	2301      	movs	r3, #1
 800748e:	e05b      	b.n	8007548 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007496:	f001 fedd 	bl	8009254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800749a:	2300      	movs	r3, #0
 800749c:	e054      	b.n	8007548 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a4:	2314      	movs	r3, #20
 80074a6:	18fb      	adds	r3, r7, r3
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 ff5f 	bl	800836c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074b2:	f001 fecf 	bl	8009254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074b6:	f000 fd09 	bl	8007ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074ba:	f001 feb9 	bl	8009230 <vPortEnterCritical>
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	2244      	movs	r2, #68	; 0x44
 80074c2:	5c9b      	ldrb	r3, [r3, r2]
 80074c4:	b25b      	sxtb	r3, r3
 80074c6:	3301      	adds	r3, #1
 80074c8:	d103      	bne.n	80074d2 <xQueueGenericSend+0x10a>
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	2244      	movs	r2, #68	; 0x44
 80074ce:	2100      	movs	r1, #0
 80074d0:	5499      	strb	r1, [r3, r2]
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	2245      	movs	r2, #69	; 0x45
 80074d6:	5c9b      	ldrb	r3, [r3, r2]
 80074d8:	b25b      	sxtb	r3, r3
 80074da:	3301      	adds	r3, #1
 80074dc:	d103      	bne.n	80074e6 <xQueueGenericSend+0x11e>
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	2245      	movs	r2, #69	; 0x45
 80074e2:	2100      	movs	r1, #0
 80074e4:	5499      	strb	r1, [r3, r2]
 80074e6:	f001 feb5 	bl	8009254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ea:	1d3a      	adds	r2, r7, #4
 80074ec:	2314      	movs	r3, #20
 80074ee:	18fb      	adds	r3, r7, r3
 80074f0:	0011      	movs	r1, r2
 80074f2:	0018      	movs	r0, r3
 80074f4:	f000 ff4e 	bl	8008394 <xTaskCheckForTimeOut>
 80074f8:	1e03      	subs	r3, r0, #0
 80074fa:	d11e      	bne.n	800753a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	0018      	movs	r0, r3
 8007500:	f000 fa54 	bl	80079ac <prvIsQueueFull>
 8007504:	1e03      	subs	r3, r0, #0
 8007506:	d011      	beq.n	800752c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	3310      	adds	r3, #16
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	0011      	movs	r1, r2
 8007510:	0018      	movs	r0, r3
 8007512:	f000 fe8b 	bl	800822c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	0018      	movs	r0, r3
 800751a:	f000 f9d3 	bl	80078c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800751e:	f000 fce1 	bl	8007ee4 <xTaskResumeAll>
 8007522:	1e03      	subs	r3, r0, #0
 8007524:	d18a      	bne.n	800743c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007526:	f001 fe73 	bl	8009210 <vPortYield>
 800752a:	e787      	b.n	800743c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	0018      	movs	r0, r3
 8007530:	f000 f9c8 	bl	80078c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007534:	f000 fcd6 	bl	8007ee4 <xTaskResumeAll>
 8007538:	e780      	b.n	800743c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	0018      	movs	r0, r3
 800753e:	f000 f9c1 	bl	80078c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007542:	f000 fccf 	bl	8007ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007548:	0018      	movs	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	b00a      	add	sp, #40	; 0x28
 800754e:	bd80      	pop	{r7, pc}

08007550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b08b      	sub	sp, #44	; 0x2c
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d101      	bne.n	800756c <xQueueGenericSendFromISR+0x1c>
 8007568:	b672      	cpsid	i
 800756a:	e7fe      	b.n	800756a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <xQueueGenericSendFromISR+0x2a>
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <xQueueGenericSendFromISR+0x2e>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <xQueueGenericSendFromISR+0x30>
 800757e:	2300      	movs	r3, #0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <xQueueGenericSendFromISR+0x38>
 8007584:	b672      	cpsid	i
 8007586:	e7fe      	b.n	8007586 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d103      	bne.n	8007596 <xQueueGenericSendFromISR+0x46>
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <xQueueGenericSendFromISR+0x4a>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <xQueueGenericSendFromISR+0x4c>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <xQueueGenericSendFromISR+0x54>
 80075a0:	b672      	cpsid	i
 80075a2:	e7fe      	b.n	80075a2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075a4:	f001 fe6e 	bl	8009284 <ulSetInterruptMaskFromISR>
 80075a8:	0003      	movs	r3, r0
 80075aa:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d302      	bcc.n	80075be <xQueueGenericSendFromISR+0x6e>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d131      	bne.n	8007622 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075be:	241b      	movs	r4, #27
 80075c0:	193b      	adds	r3, r7, r4
 80075c2:	6a3a      	ldr	r2, [r7, #32]
 80075c4:	2145      	movs	r1, #69	; 0x45
 80075c6:	5c52      	ldrb	r2, [r2, r1]
 80075c8:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f000 f8e3 	bl	80077a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075dc:	193b      	adds	r3, r7, r4
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b25b      	sxtb	r3, r3
 80075e2:	3301      	adds	r3, #1
 80075e4:	d111      	bne.n	800760a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	3324      	adds	r3, #36	; 0x24
 80075f2:	0018      	movs	r0, r3
 80075f4:	f000 fe5e 	bl	80082b4 <xTaskRemoveFromEventList>
 80075f8:	1e03      	subs	r3, r0, #0
 80075fa:	d00f      	beq.n	800761c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e008      	b.n	800761c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800760a:	231b      	movs	r3, #27
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	b259      	sxtb	r1, r3
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	2245      	movs	r2, #69	; 0x45
 800761a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800761c:	2301      	movs	r3, #1
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8007620:	e001      	b.n	8007626 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	0018      	movs	r0, r3
 800762a:	f001 fe31 	bl	8009290 <vClearInterruptMaskFromISR>

	return xReturn;
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007630:	0018      	movs	r0, r3
 8007632:	46bd      	mov	sp, r7
 8007634:	b00b      	add	sp, #44	; 0x2c
 8007636:	bd90      	pop	{r4, r7, pc}

08007638 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08a      	sub	sp, #40	; 0x28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <xQueueReceive+0x1e>
 8007652:	b672      	cpsid	i
 8007654:	e7fe      	b.n	8007654 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <xQueueReceive+0x2c>
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <xQueueReceive+0x30>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <xQueueReceive+0x32>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <xQueueReceive+0x3a>
 800766e:	b672      	cpsid	i
 8007670:	e7fe      	b.n	8007670 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007672:	f000 ffb7 	bl	80085e4 <xTaskGetSchedulerState>
 8007676:	1e03      	subs	r3, r0, #0
 8007678:	d102      	bne.n	8007680 <xQueueReceive+0x48>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <xQueueReceive+0x4c>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <xQueueReceive+0x4e>
 8007684:	2300      	movs	r3, #0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <xQueueReceive+0x56>
 800768a:	b672      	cpsid	i
 800768c:	e7fe      	b.n	800768c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800768e:	f001 fdcf 	bl	8009230 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d01a      	beq.n	80076d4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	0011      	movs	r1, r2
 80076a4:	0018      	movs	r0, r3
 80076a6:	f000 f8e7 	bl	8007878 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	1e5a      	subs	r2, r3, #1
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	3310      	adds	r3, #16
 80076be:	0018      	movs	r0, r3
 80076c0:	f000 fdf8 	bl	80082b4 <xTaskRemoveFromEventList>
 80076c4:	1e03      	subs	r3, r0, #0
 80076c6:	d001      	beq.n	80076cc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076c8:	f001 fda2 	bl	8009210 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076cc:	f001 fdc2 	bl	8009254 <vPortExitCritical>
				return pdPASS;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e062      	b.n	800779a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076da:	f001 fdbb 	bl	8009254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076de:	2300      	movs	r3, #0
 80076e0:	e05b      	b.n	800779a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076e8:	2314      	movs	r3, #20
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	0018      	movs	r0, r3
 80076ee:	f000 fe3d 	bl	800836c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076f6:	f001 fdad 	bl	8009254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076fa:	f000 fbe7 	bl	8007ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076fe:	f001 fd97 	bl	8009230 <vPortEnterCritical>
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	2244      	movs	r2, #68	; 0x44
 8007706:	5c9b      	ldrb	r3, [r3, r2]
 8007708:	b25b      	sxtb	r3, r3
 800770a:	3301      	adds	r3, #1
 800770c:	d103      	bne.n	8007716 <xQueueReceive+0xde>
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	2244      	movs	r2, #68	; 0x44
 8007712:	2100      	movs	r1, #0
 8007714:	5499      	strb	r1, [r3, r2]
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	2245      	movs	r2, #69	; 0x45
 800771a:	5c9b      	ldrb	r3, [r3, r2]
 800771c:	b25b      	sxtb	r3, r3
 800771e:	3301      	adds	r3, #1
 8007720:	d103      	bne.n	800772a <xQueueReceive+0xf2>
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	2245      	movs	r2, #69	; 0x45
 8007726:	2100      	movs	r1, #0
 8007728:	5499      	strb	r1, [r3, r2]
 800772a:	f001 fd93 	bl	8009254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800772e:	1d3a      	adds	r2, r7, #4
 8007730:	2314      	movs	r3, #20
 8007732:	18fb      	adds	r3, r7, r3
 8007734:	0011      	movs	r1, r2
 8007736:	0018      	movs	r0, r3
 8007738:	f000 fe2c 	bl	8008394 <xTaskCheckForTimeOut>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d11e      	bne.n	800777e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	0018      	movs	r0, r3
 8007744:	f000 f91c 	bl	8007980 <prvIsQueueEmpty>
 8007748:	1e03      	subs	r3, r0, #0
 800774a:	d011      	beq.n	8007770 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	3324      	adds	r3, #36	; 0x24
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	0011      	movs	r1, r2
 8007754:	0018      	movs	r0, r3
 8007756:	f000 fd69 	bl	800822c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	0018      	movs	r0, r3
 800775e:	f000 f8b1 	bl	80078c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007762:	f000 fbbf 	bl	8007ee4 <xTaskResumeAll>
 8007766:	1e03      	subs	r3, r0, #0
 8007768:	d191      	bne.n	800768e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800776a:	f001 fd51 	bl	8009210 <vPortYield>
 800776e:	e78e      	b.n	800768e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	0018      	movs	r0, r3
 8007774:	f000 f8a6 	bl	80078c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007778:	f000 fbb4 	bl	8007ee4 <xTaskResumeAll>
 800777c:	e787      	b.n	800768e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	0018      	movs	r0, r3
 8007782:	f000 f89f 	bl	80078c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007786:	f000 fbad 	bl	8007ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	0018      	movs	r0, r3
 800778e:	f000 f8f7 	bl	8007980 <prvIsQueueEmpty>
 8007792:	1e03      	subs	r3, r0, #0
 8007794:	d100      	bne.n	8007798 <xQueueReceive+0x160>
 8007796:	e77a      	b.n	800768e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800779a:	0018      	movs	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	b00a      	add	sp, #40	; 0x28
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10e      	bne.n	80077de <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d14e      	bne.n	8007866 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	0018      	movs	r0, r3
 80077ce:	f000 ff25 	bl	800861c <xTaskPriorityDisinherit>
 80077d2:	0003      	movs	r3, r0
 80077d4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	609a      	str	r2, [r3, #8]
 80077dc:	e043      	b.n	8007866 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d119      	bne.n	8007818 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6858      	ldr	r0, [r3, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	0019      	movs	r1, r3
 80077f0:	f002 f897 	bl	8009922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	18d2      	adds	r2, r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	429a      	cmp	r2, r3
 800780c:	d32b      	bcc.n	8007866 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e026      	b.n	8007866 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68d8      	ldr	r0, [r3, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	0019      	movs	r1, r3
 8007824:	f002 f87d 	bl	8009922 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007830:	425b      	negs	r3, r3
 8007832:	18d2      	adds	r2, r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d207      	bcs.n	8007854 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	425b      	negs	r3, r3
 800784e:	18d2      	adds	r2, r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d105      	bne.n	8007866 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	3b01      	subs	r3, #1
 8007864:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800786e:	697b      	ldr	r3, [r7, #20]
}
 8007870:	0018      	movs	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	b006      	add	sp, #24
 8007876:	bd80      	pop	{r7, pc}

08007878 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d018      	beq.n	80078bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	18d2      	adds	r2, r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d303      	bcc.n	80078ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68d9      	ldr	r1, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	0018      	movs	r0, r3
 80078b8:	f002 f833 	bl	8009922 <memcpy>
	}
}
 80078bc:	46c0      	nop			; (mov r8, r8)
 80078be:	46bd      	mov	sp, r7
 80078c0:	b002      	add	sp, #8
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078cc:	f001 fcb0 	bl	8009230 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078d0:	230f      	movs	r3, #15
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	2145      	movs	r1, #69	; 0x45
 80078d8:	5c52      	ldrb	r2, [r2, r1]
 80078da:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078dc:	e013      	b.n	8007906 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d016      	beq.n	8007914 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	0018      	movs	r0, r3
 80078ec:	f000 fce2 	bl	80082b4 <xTaskRemoveFromEventList>
 80078f0:	1e03      	subs	r3, r0, #0
 80078f2:	d001      	beq.n	80078f8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078f4:	f000 fd9e 	bl	8008434 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078f8:	210f      	movs	r1, #15
 80078fa:	187b      	adds	r3, r7, r1
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	3b01      	subs	r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	187b      	adds	r3, r7, r1
 8007904:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007906:	230f      	movs	r3, #15
 8007908:	18fb      	adds	r3, r7, r3
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b25b      	sxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	dce5      	bgt.n	80078de <prvUnlockQueue+0x1a>
 8007912:	e000      	b.n	8007916 <prvUnlockQueue+0x52>
					break;
 8007914:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2245      	movs	r2, #69	; 0x45
 800791a:	21ff      	movs	r1, #255	; 0xff
 800791c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800791e:	f001 fc99 	bl	8009254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007922:	f001 fc85 	bl	8009230 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007926:	230e      	movs	r3, #14
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	2144      	movs	r1, #68	; 0x44
 800792e:	5c52      	ldrb	r2, [r2, r1]
 8007930:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007932:	e013      	b.n	800795c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3310      	adds	r3, #16
 8007940:	0018      	movs	r0, r3
 8007942:	f000 fcb7 	bl	80082b4 <xTaskRemoveFromEventList>
 8007946:	1e03      	subs	r3, r0, #0
 8007948:	d001      	beq.n	800794e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800794a:	f000 fd73 	bl	8008434 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800794e:	210e      	movs	r1, #14
 8007950:	187b      	adds	r3, r7, r1
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	3b01      	subs	r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	187b      	adds	r3, r7, r1
 800795a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800795c:	230e      	movs	r3, #14
 800795e:	18fb      	adds	r3, r7, r3
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b25b      	sxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	dce5      	bgt.n	8007934 <prvUnlockQueue+0x70>
 8007968:	e000      	b.n	800796c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800796a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2244      	movs	r2, #68	; 0x44
 8007970:	21ff      	movs	r1, #255	; 0xff
 8007972:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007974:	f001 fc6e 	bl	8009254 <vPortExitCritical>
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b004      	add	sp, #16
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007988:	f001 fc52 	bl	8009230 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e001      	b.n	800799e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800799e:	f001 fc59 	bl	8009254 <vPortExitCritical>

	return xReturn;
 80079a2:	68fb      	ldr	r3, [r7, #12]
}
 80079a4:	0018      	movs	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b004      	add	sp, #16
 80079aa:	bd80      	pop	{r7, pc}

080079ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079b4:	f001 fc3c 	bl	8009230 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d102      	bne.n	80079ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079c4:	2301      	movs	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e001      	b.n	80079ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079ce:	f001 fc41 	bl	8009254 <vPortExitCritical>

	return xReturn;
 80079d2:	68fb      	ldr	r3, [r7, #12]
}
 80079d4:	0018      	movs	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	b004      	add	sp, #16
 80079da:	bd80      	pop	{r7, pc}

080079dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079e6:	2300      	movs	r3, #0
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	e015      	b.n	8007a18 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <vQueueAddToRegistry+0x4c>)
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	00d2      	lsls	r2, r2, #3
 80079f2:	58d3      	ldr	r3, [r2, r3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079f8:	4b0b      	ldr	r3, [pc, #44]	; (8007a28 <vQueueAddToRegistry+0x4c>)
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	00d2      	lsls	r2, r2, #3
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a02:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <vQueueAddToRegistry+0x4c>)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	18d3      	adds	r3, r2, r3
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a10:	e006      	b.n	8007a20 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	3301      	adds	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b07      	cmp	r3, #7
 8007a1c:	d9e6      	bls.n	80079ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	46c0      	nop			; (mov r8, r8)
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b004      	add	sp, #16
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000ae0 	.word	0x20000ae0

08007a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a3c:	f001 fbf8 	bl	8009230 <vPortEnterCritical>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2244      	movs	r2, #68	; 0x44
 8007a44:	5c9b      	ldrb	r3, [r3, r2]
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	3301      	adds	r3, #1
 8007a4a:	d103      	bne.n	8007a54 <vQueueWaitForMessageRestricted+0x28>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2244      	movs	r2, #68	; 0x44
 8007a50:	2100      	movs	r1, #0
 8007a52:	5499      	strb	r1, [r3, r2]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2245      	movs	r2, #69	; 0x45
 8007a58:	5c9b      	ldrb	r3, [r3, r2]
 8007a5a:	b25b      	sxtb	r3, r3
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	d103      	bne.n	8007a68 <vQueueWaitForMessageRestricted+0x3c>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2245      	movs	r2, #69	; 0x45
 8007a64:	2100      	movs	r1, #0
 8007a66:	5499      	strb	r1, [r3, r2]
 8007a68:	f001 fbf4 	bl	8009254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f000 fbf3 	bl	8008268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	0018      	movs	r0, r3
 8007a86:	f7ff ff1d 	bl	80078c4 <prvUnlockQueue>
	}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b006      	add	sp, #24
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a92:	b590      	push	{r4, r7, lr}
 8007a94:	b08d      	sub	sp, #52	; 0x34
 8007a96:	af04      	add	r7, sp, #16
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <xTaskCreateStatic+0x18>
 8007aa6:	b672      	cpsid	i
 8007aa8:	e7fe      	b.n	8007aa8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <xTaskCreateStatic+0x22>
 8007ab0:	b672      	cpsid	i
 8007ab2:	e7fe      	b.n	8007ab2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ab4:	23bc      	movs	r3, #188	; 0xbc
 8007ab6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2bbc      	cmp	r3, #188	; 0xbc
 8007abc:	d001      	beq.n	8007ac2 <xTaskCreateStatic+0x30>
 8007abe:	b672      	cpsid	i
 8007ac0:	e7fe      	b.n	8007ac0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ac2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d020      	beq.n	8007b0c <xTaskCreateStatic+0x7a>
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01d      	beq.n	8007b0c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	22b9      	movs	r2, #185	; 0xb9
 8007ade:	2102      	movs	r1, #2
 8007ae0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ae2:	683c      	ldr	r4, [r7, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	2300      	movs	r3, #0
 8007aec:	9303      	str	r3, [sp, #12]
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	2318      	movs	r3, #24
 8007af4:	18fb      	adds	r3, r7, r3
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	0023      	movs	r3, r4
 8007afe:	f000 f859 	bl	8007bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	0018      	movs	r0, r3
 8007b06:	f000 f8f5 	bl	8007cf4 <prvAddNewTaskToReadyList>
 8007b0a:	e001      	b.n	8007b10 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b10:	69bb      	ldr	r3, [r7, #24]
	}
 8007b12:	0018      	movs	r0, r3
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b009      	add	sp, #36	; 0x24
 8007b18:	bd90      	pop	{r4, r7, pc}

08007b1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b1a:	b590      	push	{r4, r7, lr}
 8007b1c:	b08d      	sub	sp, #52	; 0x34
 8007b1e:	af04      	add	r7, sp, #16
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	603b      	str	r3, [r7, #0]
 8007b26:	1dbb      	adds	r3, r7, #6
 8007b28:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b2a:	1dbb      	adds	r3, r7, #6
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f001 fc15 	bl	8009360 <pvPortMalloc>
 8007b36:	0003      	movs	r3, r0
 8007b38:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d010      	beq.n	8007b62 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b40:	20bc      	movs	r0, #188	; 0xbc
 8007b42:	f001 fc0d 	bl	8009360 <pvPortMalloc>
 8007b46:	0003      	movs	r3, r0
 8007b48:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	631a      	str	r2, [r3, #48]	; 0x30
 8007b56:	e006      	b.n	8007b66 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f001 fcac 	bl	80094b8 <vPortFree>
 8007b60:	e001      	b.n	8007b66 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01a      	beq.n	8007ba2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	22b9      	movs	r2, #185	; 0xb9
 8007b70:	2100      	movs	r1, #0
 8007b72:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b74:	1dbb      	adds	r3, r7, #6
 8007b76:	881a      	ldrh	r2, [r3, #0]
 8007b78:	683c      	ldr	r4, [r7, #0]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	0023      	movs	r3, r4
 8007b90:	f000 f810 	bl	8007bb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f000 f8ac 	bl	8007cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	e002      	b.n	8007ba8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	425b      	negs	r3, r3
 8007ba6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
	}
 8007baa:	0018      	movs	r0, r3
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b009      	add	sp, #36	; 0x24
 8007bb0:	bd90      	pop	{r4, r7, pc}
	...

08007bb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	001a      	movs	r2, r3
 8007bcc:	21a5      	movs	r1, #165	; 0xa5
 8007bce:	f001 feb1 	bl	8009934 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4942      	ldr	r1, [pc, #264]	; (8007ce4 <prvInitialiseNewTask+0x130>)
 8007bda:	468c      	mov	ip, r1
 8007bdc:	4463      	add	r3, ip
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	18d3      	adds	r3, r2, r3
 8007be2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2207      	movs	r2, #7
 8007be8:	4393      	bics	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2207      	movs	r2, #7
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d001      	beq.n	8007bf8 <prvInitialiseNewTask+0x44>
 8007bf4:	b672      	cpsid	i
 8007bf6:	e7fe      	b.n	8007bf6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d020      	beq.n	8007c40 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e013      	b.n	8007c2c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	18d3      	adds	r3, r2, r3
 8007c0a:	7818      	ldrb	r0, [r3, #0]
 8007c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0e:	2134      	movs	r1, #52	; 0x34
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	18d3      	adds	r3, r2, r3
 8007c14:	185b      	adds	r3, r3, r1
 8007c16:	1c02      	adds	r2, r0, #0
 8007c18:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	18d3      	adds	r3, r2, r3
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d006      	beq.n	8007c34 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b0f      	cmp	r3, #15
 8007c30:	d9e8      	bls.n	8007c04 <prvInitialiseNewTask+0x50>
 8007c32:	e000      	b.n	8007c36 <prvInitialiseNewTask+0x82>
			{
				break;
 8007c34:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	2243      	movs	r2, #67	; 0x43
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	5499      	strb	r1, [r3, r2]
 8007c3e:	e003      	b.n	8007c48 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	2234      	movs	r2, #52	; 0x34
 8007c44:	2100      	movs	r1, #0
 8007c46:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	2b37      	cmp	r3, #55	; 0x37
 8007c4c:	d901      	bls.n	8007c52 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c4e:	2337      	movs	r3, #55	; 0x37
 8007c50:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	6a3a      	ldr	r2, [r7, #32]
 8007c56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	6a3a      	ldr	r2, [r7, #32]
 8007c5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	2200      	movs	r2, #0
 8007c62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	3304      	adds	r3, #4
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f7ff fa5b 	bl	8007124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	3318      	adds	r3, #24
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7ff fa56 	bl	8007124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	2238      	movs	r2, #56	; 0x38
 8007c82:	1ad2      	subs	r2, r2, r3
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	22b4      	movs	r2, #180	; 0xb4
 8007c92:	2100      	movs	r1, #0
 8007c94:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	22b8      	movs	r2, #184	; 0xb8
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	3354      	adds	r3, #84	; 0x54
 8007ca2:	2260      	movs	r2, #96	; 0x60
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	f001 fe44 	bl	8009934 <memset>
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	4a0e      	ldr	r2, [pc, #56]	; (8007ce8 <prvInitialiseNewTask+0x134>)
 8007cb0:	659a      	str	r2, [r3, #88]	; 0x58
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <prvInitialiseNewTask+0x138>)
 8007cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	4a0d      	ldr	r2, [pc, #52]	; (8007cf0 <prvInitialiseNewTask+0x13c>)
 8007cbc:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	68f9      	ldr	r1, [r7, #12]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f001 fa19 	bl	80090fc <pxPortInitialiseStack>
 8007cca:	0002      	movs	r2, r0
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cdc:	46c0      	nop			; (mov r8, r8)
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	b006      	add	sp, #24
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	3fffffff 	.word	0x3fffffff
 8007ce8:	0800c690 	.word	0x0800c690
 8007cec:	0800c6b0 	.word	0x0800c6b0
 8007cf0:	0800c670 	.word	0x0800c670

08007cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cfc:	f001 fa98 	bl	8009230 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d00:	4b2a      	ldr	r3, [pc, #168]	; (8007dac <prvAddNewTaskToReadyList+0xb8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	4b29      	ldr	r3, [pc, #164]	; (8007dac <prvAddNewTaskToReadyList+0xb8>)
 8007d08:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007d0a:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <prvAddNewTaskToReadyList+0xbc>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d12:	4b27      	ldr	r3, [pc, #156]	; (8007db0 <prvAddNewTaskToReadyList+0xbc>)
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <prvAddNewTaskToReadyList+0xb8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d110      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d20:	f000 fba2 	bl	8008468 <prvInitialiseTaskLists>
 8007d24:	e00d      	b.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d26:	4b23      	ldr	r3, [pc, #140]	; (8007db4 <prvAddNewTaskToReadyList+0xc0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d2e:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <prvAddNewTaskToReadyList+0xbc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d802      	bhi.n	8007d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d3c:	4b1c      	ldr	r3, [pc, #112]	; (8007db0 <prvAddNewTaskToReadyList+0xbc>)
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d4a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d4c:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <prvAddNewTaskToReadyList+0xc4>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	4b18      	ldr	r3, [pc, #96]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d903      	bls.n	8007d68 <prvAddNewTaskToReadyList+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <prvAddNewTaskToReadyList+0xc8>)
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	0013      	movs	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	189b      	adds	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4a12      	ldr	r2, [pc, #72]	; (8007dc0 <prvAddNewTaskToReadyList+0xcc>)
 8007d76:	189a      	adds	r2, r3, r2
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	0010      	movs	r0, r2
 8007d80:	f7ff f9db 	bl	800713a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d84:	f001 fa66 	bl	8009254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <prvAddNewTaskToReadyList+0xc0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <prvAddNewTaskToReadyList+0xbc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d201      	bcs.n	8007da2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d9e:	f001 fa37 	bl	8009210 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b002      	add	sp, #8
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	46c0      	nop			; (mov r8, r8)
 8007dac:	20000ff4 	.word	0x20000ff4
 8007db0:	20000b20 	.word	0x20000b20
 8007db4:	20001000 	.word	0x20001000
 8007db8:	20001010 	.word	0x20001010
 8007dbc:	20000ffc 	.word	0x20000ffc
 8007dc0:	20000b24 	.word	0x20000b24

08007dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <vTaskDelay+0x48>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <vTaskDelay+0x1e>
 8007dde:	b672      	cpsid	i
 8007de0:	e7fe      	b.n	8007de0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007de2:	f000 f873 	bl	8007ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2100      	movs	r1, #0
 8007dea:	0018      	movs	r0, r3
 8007dec:	f000 fe20 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007df0:	f000 f878 	bl	8007ee4 <xTaskResumeAll>
 8007df4:	0003      	movs	r3, r0
 8007df6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007dfe:	f001 fa07 	bl	8009210 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b004      	add	sp, #16
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	2000101c 	.word	0x2000101c

08007e10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b089      	sub	sp, #36	; 0x24
 8007e14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e1e:	003a      	movs	r2, r7
 8007e20:	1d39      	adds	r1, r7, #4
 8007e22:	2308      	movs	r3, #8
 8007e24:	18fb      	adds	r3, r7, r3
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7ff f92e 	bl	8007088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e2c:	683c      	ldr	r4, [r7, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	491e      	ldr	r1, [pc, #120]	; (8007eac <vTaskStartScheduler+0x9c>)
 8007e34:	481e      	ldr	r0, [pc, #120]	; (8007eb0 <vTaskStartScheduler+0xa0>)
 8007e36:	9202      	str	r2, [sp, #8]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	0022      	movs	r2, r4
 8007e42:	f7ff fe26 	bl	8007a92 <xTaskCreateStatic>
 8007e46:	0002      	movs	r2, r0
 8007e48:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <vTaskStartScheduler+0xa4>)
 8007e4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e4c:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <vTaskStartScheduler+0xa4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e54:	2301      	movs	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e001      	b.n	8007e5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d103      	bne.n	8007e6c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007e64:	f000 fe38 	bl	8008ad8 <xTimerCreateTimerTask>
 8007e68:	0003      	movs	r3, r0
 8007e6a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d113      	bne.n	8007e9a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007e72:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e74:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <vTaskStartScheduler+0xa8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3354      	adds	r3, #84	; 0x54
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <vTaskStartScheduler+0xac>)
 8007e7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e80:	4b0f      	ldr	r3, [pc, #60]	; (8007ec0 <vTaskStartScheduler+0xb0>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	4252      	negs	r2, r2
 8007e86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e88:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <vTaskStartScheduler+0xb4>)
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ec8 <vTaskStartScheduler+0xb8>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e94:	f001 f998 	bl	80091c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e98:	e004      	b.n	8007ea4 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <vTaskStartScheduler+0x94>
 8007ea0:	b672      	cpsid	i
 8007ea2:	e7fe      	b.n	8007ea2 <vTaskStartScheduler+0x92>
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b005      	add	sp, #20
 8007eaa:	bd90      	pop	{r4, r7, pc}
 8007eac:	0800c418 	.word	0x0800c418
 8007eb0:	08008449 	.word	0x08008449
 8007eb4:	20001018 	.word	0x20001018
 8007eb8:	20000b20 	.word	0x20000b20
 8007ebc:	20000014 	.word	0x20000014
 8007ec0:	20001014 	.word	0x20001014
 8007ec4:	20001000 	.word	0x20001000
 8007ec8:	20000ff8 	.word	0x20000ff8

08007ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ed0:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <vTaskSuspendAll+0x14>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	4b02      	ldr	r3, [pc, #8]	; (8007ee0 <vTaskSuspendAll+0x14>)
 8007ed8:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	2000101c 	.word	0x2000101c

08007ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ef2:	4b3a      	ldr	r3, [pc, #232]	; (8007fdc <xTaskResumeAll+0xf8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xTaskResumeAll+0x1a>
 8007efa:	b672      	cpsid	i
 8007efc:	e7fe      	b.n	8007efc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007efe:	f001 f997 	bl	8009230 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f02:	4b36      	ldr	r3, [pc, #216]	; (8007fdc <xTaskResumeAll+0xf8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	1e5a      	subs	r2, r3, #1
 8007f08:	4b34      	ldr	r3, [pc, #208]	; (8007fdc <xTaskResumeAll+0xf8>)
 8007f0a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f0c:	4b33      	ldr	r3, [pc, #204]	; (8007fdc <xTaskResumeAll+0xf8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d15b      	bne.n	8007fcc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f14:	4b32      	ldr	r3, [pc, #200]	; (8007fe0 <xTaskResumeAll+0xfc>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d057      	beq.n	8007fcc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f1c:	e02f      	b.n	8007f7e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f1e:	4b31      	ldr	r3, [pc, #196]	; (8007fe4 <xTaskResumeAll+0x100>)
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3318      	adds	r3, #24
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f7ff f95d 	bl	80071ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3304      	adds	r3, #4
 8007f34:	0018      	movs	r0, r3
 8007f36:	f7ff f958 	bl	80071ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3e:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <xTaskResumeAll+0x104>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d903      	bls.n	8007f4e <xTaskResumeAll+0x6a>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <xTaskResumeAll+0x104>)
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	0013      	movs	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	189b      	adds	r3, r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a24      	ldr	r2, [pc, #144]	; (8007fec <xTaskResumeAll+0x108>)
 8007f5c:	189a      	adds	r2, r3, r2
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3304      	adds	r3, #4
 8007f62:	0019      	movs	r1, r3
 8007f64:	0010      	movs	r0, r2
 8007f66:	f7ff f8e8 	bl	800713a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <xTaskResumeAll+0x10c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d302      	bcc.n	8007f7e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <xTaskResumeAll+0x110>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f7e:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <xTaskResumeAll+0x100>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1cb      	bne.n	8007f1e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f8c:	f000 fb0c 	bl	80085a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f90:	4b19      	ldr	r3, [pc, #100]	; (8007ff8 <xTaskResumeAll+0x114>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00f      	beq.n	8007fbc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f9c:	f000 f83c 	bl	8008018 <xTaskIncrementTick>
 8007fa0:	1e03      	subs	r3, r0, #0
 8007fa2:	d002      	beq.n	8007faa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007fa4:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <xTaskResumeAll+0x110>)
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1f2      	bne.n	8007f9c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <xTaskResumeAll+0x114>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <xTaskResumeAll+0x110>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fc8:	f001 f922 	bl	8009210 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fcc:	f001 f942 	bl	8009254 <vPortExitCritical>

	return xAlreadyYielded;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
}
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	b004      	add	sp, #16
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	2000101c 	.word	0x2000101c
 8007fe0:	20000ff4 	.word	0x20000ff4
 8007fe4:	20000fb4 	.word	0x20000fb4
 8007fe8:	20000ffc 	.word	0x20000ffc
 8007fec:	20000b24 	.word	0x20000b24
 8007ff0:	20000b20 	.word	0x20000b20
 8007ff4:	20001008 	.word	0x20001008
 8007ff8:	20001004 	.word	0x20001004

08007ffc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008002:	4b04      	ldr	r3, [pc, #16]	; (8008014 <xTaskGetTickCount+0x18>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008008:	687b      	ldr	r3, [r7, #4]
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b002      	add	sp, #8
 8008010:	bd80      	pop	{r7, pc}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	20000ff8 	.word	0x20000ff8

08008018 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800801e:	2300      	movs	r3, #0
 8008020:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008022:	4b4a      	ldr	r3, [pc, #296]	; (800814c <xTaskIncrementTick+0x134>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d000      	beq.n	800802c <xTaskIncrementTick+0x14>
 800802a:	e084      	b.n	8008136 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800802c:	4b48      	ldr	r3, [pc, #288]	; (8008150 <xTaskIncrementTick+0x138>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3301      	adds	r3, #1
 8008032:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008034:	4b46      	ldr	r3, [pc, #280]	; (8008150 <xTaskIncrementTick+0x138>)
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d117      	bne.n	8008070 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008040:	4b44      	ldr	r3, [pc, #272]	; (8008154 <xTaskIncrementTick+0x13c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <xTaskIncrementTick+0x36>
 800804a:	b672      	cpsid	i
 800804c:	e7fe      	b.n	800804c <xTaskIncrementTick+0x34>
 800804e:	4b41      	ldr	r3, [pc, #260]	; (8008154 <xTaskIncrementTick+0x13c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	4b40      	ldr	r3, [pc, #256]	; (8008158 <xTaskIncrementTick+0x140>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4b3e      	ldr	r3, [pc, #248]	; (8008154 <xTaskIncrementTick+0x13c>)
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	4b3e      	ldr	r3, [pc, #248]	; (8008158 <xTaskIncrementTick+0x140>)
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	4b3e      	ldr	r3, [pc, #248]	; (800815c <xTaskIncrementTick+0x144>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	4b3c      	ldr	r3, [pc, #240]	; (800815c <xTaskIncrementTick+0x144>)
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f000 fa9c 	bl	80085a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008070:	4b3b      	ldr	r3, [pc, #236]	; (8008160 <xTaskIncrementTick+0x148>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	429a      	cmp	r2, r3
 8008078:	d349      	bcc.n	800810e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807a:	4b36      	ldr	r3, [pc, #216]	; (8008154 <xTaskIncrementTick+0x13c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d104      	bne.n	800808e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008084:	4b36      	ldr	r3, [pc, #216]	; (8008160 <xTaskIncrementTick+0x148>)
 8008086:	2201      	movs	r2, #1
 8008088:	4252      	negs	r2, r2
 800808a:	601a      	str	r2, [r3, #0]
					break;
 800808c:	e03f      	b.n	800810e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808e:	4b31      	ldr	r3, [pc, #196]	; (8008154 <xTaskIncrementTick+0x13c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d203      	bcs.n	80080ae <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080a6:	4b2e      	ldr	r3, [pc, #184]	; (8008160 <xTaskIncrementTick+0x148>)
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080ac:	e02f      	b.n	800810e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	3304      	adds	r3, #4
 80080b2:	0018      	movs	r0, r3
 80080b4:	f7ff f899 	bl	80071ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3318      	adds	r3, #24
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff f890 	bl	80071ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	4b25      	ldr	r3, [pc, #148]	; (8008164 <xTaskIncrementTick+0x14c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d903      	bls.n	80080de <xTaskIncrementTick+0xc6>
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080da:	4b22      	ldr	r3, [pc, #136]	; (8008164 <xTaskIncrementTick+0x14c>)
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	0013      	movs	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	189b      	adds	r3, r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4a1f      	ldr	r2, [pc, #124]	; (8008168 <xTaskIncrementTick+0x150>)
 80080ec:	189a      	adds	r2, r3, r2
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	3304      	adds	r3, #4
 80080f2:	0019      	movs	r1, r3
 80080f4:	0010      	movs	r0, r2
 80080f6:	f7ff f820 	bl	800713a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fe:	4b1b      	ldr	r3, [pc, #108]	; (800816c <xTaskIncrementTick+0x154>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	429a      	cmp	r2, r3
 8008106:	d3b8      	bcc.n	800807a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800810c:	e7b5      	b.n	800807a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <xTaskIncrementTick+0x154>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4914      	ldr	r1, [pc, #80]	; (8008168 <xTaskIncrementTick+0x150>)
 8008116:	0013      	movs	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	189b      	adds	r3, r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	585b      	ldr	r3, [r3, r1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d901      	bls.n	8008128 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008128:	4b11      	ldr	r3, [pc, #68]	; (8008170 <xTaskIncrementTick+0x158>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e004      	b.n	8008140 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008136:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <xTaskIncrementTick+0x15c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <xTaskIncrementTick+0x15c>)
 800813e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008140:	697b      	ldr	r3, [r7, #20]
}
 8008142:	0018      	movs	r0, r3
 8008144:	46bd      	mov	sp, r7
 8008146:	b006      	add	sp, #24
 8008148:	bd80      	pop	{r7, pc}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	2000101c 	.word	0x2000101c
 8008150:	20000ff8 	.word	0x20000ff8
 8008154:	20000fac 	.word	0x20000fac
 8008158:	20000fb0 	.word	0x20000fb0
 800815c:	2000100c 	.word	0x2000100c
 8008160:	20001014 	.word	0x20001014
 8008164:	20000ffc 	.word	0x20000ffc
 8008168:	20000b24 	.word	0x20000b24
 800816c:	20000b20 	.word	0x20000b20
 8008170:	20001008 	.word	0x20001008
 8008174:	20001004 	.word	0x20001004

08008178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800817e:	4b25      	ldr	r3, [pc, #148]	; (8008214 <vTaskSwitchContext+0x9c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008186:	4b24      	ldr	r3, [pc, #144]	; (8008218 <vTaskSwitchContext+0xa0>)
 8008188:	2201      	movs	r2, #1
 800818a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800818c:	e03d      	b.n	800820a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800818e:	4b22      	ldr	r3, [pc, #136]	; (8008218 <vTaskSwitchContext+0xa0>)
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b21      	ldr	r3, [pc, #132]	; (800821c <vTaskSwitchContext+0xa4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	e007      	b.n	80081ac <vTaskSwitchContext+0x34>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <vTaskSwitchContext+0x2e>
 80081a2:	b672      	cpsid	i
 80081a4:	e7fe      	b.n	80081a4 <vTaskSwitchContext+0x2c>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	607b      	str	r3, [r7, #4]
 80081ac:	491c      	ldr	r1, [pc, #112]	; (8008220 <vTaskSwitchContext+0xa8>)
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	0013      	movs	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	189b      	adds	r3, r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	585b      	ldr	r3, [r3, r1]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ee      	beq.n	800819c <vTaskSwitchContext+0x24>
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	0013      	movs	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	189b      	adds	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	4a15      	ldr	r2, [pc, #84]	; (8008220 <vTaskSwitchContext+0xa8>)
 80081ca:	189b      	adds	r3, r3, r2
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	3308      	adds	r3, #8
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d104      	bne.n	80081ee <vTaskSwitchContext+0x76>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	605a      	str	r2, [r3, #4]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <vTaskSwitchContext+0xac>)
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	4b08      	ldr	r3, [pc, #32]	; (800821c <vTaskSwitchContext+0xa4>)
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <vTaskSwitchContext+0xac>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3354      	adds	r3, #84	; 0x54
 8008204:	001a      	movs	r2, r3
 8008206:	4b08      	ldr	r3, [pc, #32]	; (8008228 <vTaskSwitchContext+0xb0>)
 8008208:	601a      	str	r2, [r3, #0]
}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	46bd      	mov	sp, r7
 800820e:	b002      	add	sp, #8
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	2000101c 	.word	0x2000101c
 8008218:	20001008 	.word	0x20001008
 800821c:	20000ffc 	.word	0x20000ffc
 8008220:	20000b24 	.word	0x20000b24
 8008224:	20000b20 	.word	0x20000b20
 8008228:	20000014 	.word	0x20000014

0800822c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <vTaskPlaceOnEventList+0x14>
 800823c:	b672      	cpsid	i
 800823e:	e7fe      	b.n	800823e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008240:	4b08      	ldr	r3, [pc, #32]	; (8008264 <vTaskPlaceOnEventList+0x38>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3318      	adds	r3, #24
 8008246:	001a      	movs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	0011      	movs	r1, r2
 800824c:	0018      	movs	r0, r3
 800824e:	f7fe ff96 	bl	800717e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2101      	movs	r1, #1
 8008256:	0018      	movs	r0, r3
 8008258:	f000 fbea 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	b002      	add	sp, #8
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20000b20 	.word	0x20000b20

08008268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <vTaskPlaceOnEventListRestricted+0x16>
 800827a:	b672      	cpsid	i
 800827c:	e7fe      	b.n	800827c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800827e:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <vTaskPlaceOnEventListRestricted+0x48>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3318      	adds	r3, #24
 8008284:	001a      	movs	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	0011      	movs	r1, r2
 800828a:	0018      	movs	r0, r3
 800828c:	f7fe ff55 	bl	800713a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8008296:	2301      	movs	r3, #1
 8008298:	425b      	negs	r3, r3
 800829a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	0011      	movs	r1, r2
 80082a2:	0018      	movs	r0, r3
 80082a4:	f000 fbc4 	bl	8008a30 <prvAddCurrentTaskToDelayedList>
	}
 80082a8:	46c0      	nop			; (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b004      	add	sp, #16
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000b20 	.word	0x20000b20

080082b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <xTaskRemoveFromEventList+0x1a>
 80082ca:	b672      	cpsid	i
 80082cc:	e7fe      	b.n	80082cc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	3318      	adds	r3, #24
 80082d2:	0018      	movs	r0, r3
 80082d4:	f7fe ff89 	bl	80071ea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082d8:	4b1e      	ldr	r3, [pc, #120]	; (8008354 <xTaskRemoveFromEventList+0xa0>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d11d      	bne.n	800831c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	3304      	adds	r3, #4
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fe ff80 	bl	80071ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ee:	4b1a      	ldr	r3, [pc, #104]	; (8008358 <xTaskRemoveFromEventList+0xa4>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d903      	bls.n	80082fe <xTaskRemoveFromEventList+0x4a>
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fa:	4b17      	ldr	r3, [pc, #92]	; (8008358 <xTaskRemoveFromEventList+0xa4>)
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008302:	0013      	movs	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	189b      	adds	r3, r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4a14      	ldr	r2, [pc, #80]	; (800835c <xTaskRemoveFromEventList+0xa8>)
 800830c:	189a      	adds	r2, r3, r2
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	3304      	adds	r3, #4
 8008312:	0019      	movs	r1, r3
 8008314:	0010      	movs	r0, r2
 8008316:	f7fe ff10 	bl	800713a <vListInsertEnd>
 800831a:	e007      	b.n	800832c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	3318      	adds	r3, #24
 8008320:	001a      	movs	r2, r3
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <xTaskRemoveFromEventList+0xac>)
 8008324:	0011      	movs	r1, r2
 8008326:	0018      	movs	r0, r3
 8008328:	f7fe ff07 	bl	800713a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <xTaskRemoveFromEventList+0xb0>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	429a      	cmp	r2, r3
 8008338:	d905      	bls.n	8008346 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <xTaskRemoveFromEventList+0xb4>)
 8008340:	2201      	movs	r2, #1
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	e001      	b.n	800834a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800834a:	68fb      	ldr	r3, [r7, #12]
}
 800834c:	0018      	movs	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	b004      	add	sp, #16
 8008352:	bd80      	pop	{r7, pc}
 8008354:	2000101c 	.word	0x2000101c
 8008358:	20000ffc 	.word	0x20000ffc
 800835c:	20000b24 	.word	0x20000b24
 8008360:	20000fb4 	.word	0x20000fb4
 8008364:	20000b20 	.word	0x20000b20
 8008368:	20001008 	.word	0x20001008

0800836c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <vTaskInternalSetTimeOutState+0x20>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800837c:	4b04      	ldr	r3, [pc, #16]	; (8008390 <vTaskInternalSetTimeOutState+0x24>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	605a      	str	r2, [r3, #4]
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	b002      	add	sp, #8
 800838a:	bd80      	pop	{r7, pc}
 800838c:	2000100c 	.word	0x2000100c
 8008390:	20000ff8 	.word	0x20000ff8

08008394 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <xTaskCheckForTimeOut+0x14>
 80083a4:	b672      	cpsid	i
 80083a6:	e7fe      	b.n	80083a6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <xTaskCheckForTimeOut+0x1e>
 80083ae:	b672      	cpsid	i
 80083b0:	e7fe      	b.n	80083b0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80083b2:	f000 ff3d 	bl	8009230 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083b6:	4b1d      	ldr	r3, [pc, #116]	; (800842c <xTaskCheckForTimeOut+0x98>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3301      	adds	r3, #1
 80083cc:	d102      	bne.n	80083d4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	e024      	b.n	800841e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <xTaskCheckForTimeOut+0x9c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d007      	beq.n	80083f0 <xTaskCheckForTimeOut+0x5c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d302      	bcc.n	80083f0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e016      	b.n	800841e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d20c      	bcs.n	8008414 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	0018      	movs	r0, r3
 800840a:	f7ff ffaf 	bl	800836c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	e004      	b.n	800841e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800841a:	2301      	movs	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800841e:	f000 ff19 	bl	8009254 <vPortExitCritical>

	return xReturn;
 8008422:	697b      	ldr	r3, [r7, #20]
}
 8008424:	0018      	movs	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	b006      	add	sp, #24
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20000ff8 	.word	0x20000ff8
 8008430:	2000100c 	.word	0x2000100c

08008434 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <vTaskMissedYield+0x10>)
 800843a:	2201      	movs	r2, #1
 800843c:	601a      	str	r2, [r3, #0]
}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20001008 	.word	0x20001008

08008448 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008450:	f000 f84e 	bl	80084f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008454:	4b03      	ldr	r3, [pc, #12]	; (8008464 <prvIdleTask+0x1c>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d9f9      	bls.n	8008450 <prvIdleTask+0x8>
			{
				taskYIELD();
 800845c:	f000 fed8 	bl	8009210 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008460:	e7f6      	b.n	8008450 <prvIdleTask+0x8>
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	20000b24 	.word	0x20000b24

08008468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800846e:	2300      	movs	r3, #0
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	e00c      	b.n	800848e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	0013      	movs	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	189b      	adds	r3, r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a14      	ldr	r2, [pc, #80]	; (80084d0 <prvInitialiseTaskLists+0x68>)
 8008480:	189b      	adds	r3, r3, r2
 8008482:	0018      	movs	r0, r3
 8008484:	f7fe fe30 	bl	80070e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3301      	adds	r3, #1
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b37      	cmp	r3, #55	; 0x37
 8008492:	d9ef      	bls.n	8008474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008494:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <prvInitialiseTaskLists+0x6c>)
 8008496:	0018      	movs	r0, r3
 8008498:	f7fe fe26 	bl	80070e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <prvInitialiseTaskLists+0x70>)
 800849e:	0018      	movs	r0, r3
 80084a0:	f7fe fe22 	bl	80070e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <prvInitialiseTaskLists+0x74>)
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7fe fe1e 	bl	80070e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084ac:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <prvInitialiseTaskLists+0x78>)
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7fe fe1a 	bl	80070e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <prvInitialiseTaskLists+0x7c>)
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7fe fe16 	bl	80070e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <prvInitialiseTaskLists+0x80>)
 80084be:	4a05      	ldr	r2, [pc, #20]	; (80084d4 <prvInitialiseTaskLists+0x6c>)
 80084c0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084c2:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <prvInitialiseTaskLists+0x84>)
 80084c4:	4a04      	ldr	r2, [pc, #16]	; (80084d8 <prvInitialiseTaskLists+0x70>)
 80084c6:	601a      	str	r2, [r3, #0]
}
 80084c8:	46c0      	nop			; (mov r8, r8)
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b002      	add	sp, #8
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20000b24 	.word	0x20000b24
 80084d4:	20000f84 	.word	0x20000f84
 80084d8:	20000f98 	.word	0x20000f98
 80084dc:	20000fb4 	.word	0x20000fb4
 80084e0:	20000fc8 	.word	0x20000fc8
 80084e4:	20000fe0 	.word	0x20000fe0
 80084e8:	20000fac 	.word	0x20000fac
 80084ec:	20000fb0 	.word	0x20000fb0

080084f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084f6:	e01a      	b.n	800852e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80084f8:	f000 fe9a 	bl	8009230 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <prvCheckTasksWaitingTermination+0x50>)
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	0018      	movs	r0, r3
 800850a:	f7fe fe6e 	bl	80071ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 800850e:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <prvCheckTasksWaitingTermination+0x54>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	1e5a      	subs	r2, r3, #1
 8008514:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <prvCheckTasksWaitingTermination+0x54>)
 8008516:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008518:	4b0b      	ldr	r3, [pc, #44]	; (8008548 <prvCheckTasksWaitingTermination+0x58>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	1e5a      	subs	r2, r3, #1
 800851e:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <prvCheckTasksWaitingTermination+0x58>)
 8008520:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008522:	f000 fe97 	bl	8009254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	0018      	movs	r0, r3
 800852a:	f000 f80f 	bl	800854c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800852e:	4b06      	ldr	r3, [pc, #24]	; (8008548 <prvCheckTasksWaitingTermination+0x58>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e0      	bne.n	80084f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	46c0      	nop			; (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	b002      	add	sp, #8
 800853e:	bd80      	pop	{r7, pc}
 8008540:	20000fc8 	.word	0x20000fc8
 8008544:	20000ff4 	.word	0x20000ff4
 8008548:	20000fdc 	.word	0x20000fdc

0800854c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3354      	adds	r3, #84	; 0x54
 8008558:	0018      	movs	r0, r3
 800855a:	f001 ff07 	bl	800a36c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	22b9      	movs	r2, #185	; 0xb9
 8008562:	5c9b      	ldrb	r3, [r3, r2]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	0018      	movs	r0, r3
 800856e:	f000 ffa3 	bl	80094b8 <vPortFree>
				vPortFree( pxTCB );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	0018      	movs	r0, r3
 8008576:	f000 ff9f 	bl	80094b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800857a:	e010      	b.n	800859e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	22b9      	movs	r2, #185	; 0xb9
 8008580:	5c9b      	ldrb	r3, [r3, r2]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d104      	bne.n	8008590 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	0018      	movs	r0, r3
 800858a:	f000 ff95 	bl	80094b8 <vPortFree>
	}
 800858e:	e006      	b.n	800859e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	22b9      	movs	r2, #185	; 0xb9
 8008594:	5c9b      	ldrb	r3, [r3, r2]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d001      	beq.n	800859e <prvDeleteTCB+0x52>
 800859a:	b672      	cpsid	i
 800859c:	e7fe      	b.n	800859c <prvDeleteTCB+0x50>
	}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	46bd      	mov	sp, r7
 80085a2:	b002      	add	sp, #8
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ae:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <prvResetNextTaskUnblockTime+0x34>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <prvResetNextTaskUnblockTime+0x38>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	4252      	negs	r2, r2
 80085be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085c0:	e008      	b.n	80085d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c2:	4b06      	ldr	r3, [pc, #24]	; (80085dc <prvResetNextTaskUnblockTime+0x34>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <prvResetNextTaskUnblockTime+0x38>)
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	46c0      	nop			; (mov r8, r8)
 80085d6:	46bd      	mov	sp, r7
 80085d8:	b002      	add	sp, #8
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20000fac 	.word	0x20000fac
 80085e0:	20001014 	.word	0x20001014

080085e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085ea:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <xTaskGetSchedulerState+0x30>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085f2:	2301      	movs	r3, #1
 80085f4:	607b      	str	r3, [r7, #4]
 80085f6:	e008      	b.n	800860a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085f8:	4b07      	ldr	r3, [pc, #28]	; (8008618 <xTaskGetSchedulerState+0x34>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008600:	2302      	movs	r3, #2
 8008602:	607b      	str	r3, [r7, #4]
 8008604:	e001      	b.n	800860a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008606:	2300      	movs	r3, #0
 8008608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800860a:	687b      	ldr	r3, [r7, #4]
	}
 800860c:	0018      	movs	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	b002      	add	sp, #8
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20001000 	.word	0x20001000
 8008618:	2000101c 	.word	0x2000101c

0800861c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d044      	beq.n	80086bc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008632:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <xTaskPriorityDisinherit+0xac>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	429a      	cmp	r2, r3
 800863a:	d001      	beq.n	8008640 <xTaskPriorityDisinherit+0x24>
 800863c:	b672      	cpsid	i
 800863e:	e7fe      	b.n	800863e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <xTaskPriorityDisinherit+0x30>
 8008648:	b672      	cpsid	i
 800864a:	e7fe      	b.n	800864a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008650:	1e5a      	subs	r2, r3, #1
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865e:	429a      	cmp	r2, r3
 8008660:	d02c      	beq.n	80086bc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	2b00      	cmp	r3, #0
 8008668:	d128      	bne.n	80086bc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	3304      	adds	r3, #4
 800866e:	0018      	movs	r0, r3
 8008670:	f7fe fdbb 	bl	80071ea <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	2238      	movs	r2, #56	; 0x38
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <xTaskPriorityDisinherit+0xb0>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d903      	bls.n	800869c <xTaskPriorityDisinherit+0x80>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <xTaskPriorityDisinherit+0xb0>)
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	0013      	movs	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	189b      	adds	r3, r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <xTaskPriorityDisinherit+0xb4>)
 80086aa:	189a      	adds	r2, r3, r2
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3304      	adds	r3, #4
 80086b0:	0019      	movs	r1, r3
 80086b2:	0010      	movs	r0, r2
 80086b4:	f7fe fd41 	bl	800713a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086bc:	68fb      	ldr	r3, [r7, #12]
	}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b004      	add	sp, #16
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	20000b20 	.word	0x20000b20
 80086cc:	20000ffc 	.word	0x20000ffc
 80086d0:	20000b24 	.word	0x20000b24

080086d4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80086e2:	f000 fda5 	bl	8009230 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80086e6:	4b26      	ldr	r3, [pc, #152]	; (8008780 <xTaskNotifyWait+0xac>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	22b8      	movs	r2, #184	; 0xb8
 80086ec:	5c9b      	ldrb	r3, [r3, r2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d017      	beq.n	8008724 <xTaskNotifyWait+0x50>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80086f4:	4b22      	ldr	r3, [pc, #136]	; (8008780 <xTaskNotifyWait+0xac>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	22b4      	movs	r2, #180	; 0xb4
 80086fa:	589a      	ldr	r2, [r3, r2]
 80086fc:	68f9      	ldr	r1, [r7, #12]
 80086fe:	43c9      	mvns	r1, r1
 8008700:	400a      	ands	r2, r1
 8008702:	21b4      	movs	r1, #180	; 0xb4
 8008704:	505a      	str	r2, [r3, r1]

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008706:	4b1e      	ldr	r3, [pc, #120]	; (8008780 <xTaskNotifyWait+0xac>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	22b8      	movs	r2, #184	; 0xb8
 800870c:	2101      	movs	r1, #1
 800870e:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <xTaskNotifyWait+0x50>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2101      	movs	r1, #1
 800871a:	0018      	movs	r0, r3
 800871c:	f000 f988 	bl	8008a30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008720:	f000 fd76 	bl	8009210 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008724:	f000 fd96 	bl	8009254 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008728:	f000 fd82 	bl	8009230 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <xTaskNotifyWait+0x6a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <xTaskNotifyWait+0xac>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	22b4      	movs	r2, #180	; 0xb4
 8008738:	589a      	ldr	r2, [r3, r2]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800873e:	4b10      	ldr	r3, [pc, #64]	; (8008780 <xTaskNotifyWait+0xac>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	22b8      	movs	r2, #184	; 0xb8
 8008744:	5c9b      	ldrb	r3, [r3, r2]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d002      	beq.n	8008752 <xTaskNotifyWait+0x7e>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	e00a      	b.n	8008768 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <xTaskNotifyWait+0xac>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	22b4      	movs	r2, #180	; 0xb4
 8008758:	589a      	ldr	r2, [r3, r2]
 800875a:	68b9      	ldr	r1, [r7, #8]
 800875c:	43c9      	mvns	r1, r1
 800875e:	400a      	ands	r2, r1
 8008760:	21b4      	movs	r1, #180	; 0xb4
 8008762:	505a      	str	r2, [r3, r1]
				xReturn = pdTRUE;
 8008764:	2301      	movs	r3, #1
 8008766:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <xTaskNotifyWait+0xac>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	22b8      	movs	r2, #184	; 0xb8
 800876e:	2100      	movs	r1, #0
 8008770:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 8008772:	f000 fd6f 	bl	8009254 <vPortExitCritical>

		return xReturn;
 8008776:	697b      	ldr	r3, [r7, #20]
	}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	b006      	add	sp, #24
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20000b20 	.word	0x20000b20

08008784 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	1dfb      	adds	r3, r7, #7
 8008792:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008794:	2301      	movs	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <xTaskGenericNotify+0x1e>
 800879e:	b672      	cpsid	i
 80087a0:	e7fe      	b.n	80087a0 <xTaskGenericNotify+0x1c>
		pxTCB = xTaskToNotify;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
 80087a6:	f000 fd43 	bl	8009230 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d004      	beq.n	80087ba <xTaskGenericNotify+0x36>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	22b4      	movs	r2, #180	; 0xb4
 80087b4:	589a      	ldr	r2, [r3, r2]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80087ba:	2317      	movs	r3, #23
 80087bc:	18fb      	adds	r3, r7, r3
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	21b8      	movs	r1, #184	; 0xb8
 80087c2:	5c52      	ldrb	r2, [r2, r1]
 80087c4:	701a      	strb	r2, [r3, #0]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	22b8      	movs	r2, #184	; 0xb8
 80087ca:	2102      	movs	r1, #2
 80087cc:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 80087ce:	1dfb      	adds	r3, r7, #7
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d827      	bhi.n	8008826 <xTaskGenericNotify+0xa2>
 80087d6:	009a      	lsls	r2, r3, #2
 80087d8:	4b34      	ldr	r3, [pc, #208]	; (80088ac <xTaskGenericNotify+0x128>)
 80087da:	18d3      	adds	r3, r2, r3
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	22b4      	movs	r2, #180	; 0xb4
 80087e4:	589a      	ldr	r2, [r3, r2]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	431a      	orrs	r2, r3
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	21b4      	movs	r1, #180	; 0xb4
 80087ee:	505a      	str	r2, [r3, r1]
					break;
 80087f0:	e023      	b.n	800883a <xTaskGenericNotify+0xb6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	22b4      	movs	r2, #180	; 0xb4
 80087f6:	589b      	ldr	r3, [r3, r2]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	21b4      	movs	r1, #180	; 0xb4
 80087fe:	505a      	str	r2, [r3, r1]
					break;
 8008800:	e01b      	b.n	800883a <xTaskGenericNotify+0xb6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	21b4      	movs	r1, #180	; 0xb4
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	505a      	str	r2, [r3, r1]
					break;
 800880a:	e016      	b.n	800883a <xTaskGenericNotify+0xb6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800880c:	2317      	movs	r3, #23
 800880e:	18fb      	adds	r3, r7, r3
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d004      	beq.n	8008820 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	21b4      	movs	r1, #180	; 0xb4
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800881e:	e00c      	b.n	800883a <xTaskGenericNotify+0xb6>
						xReturn = pdFAIL;
 8008820:	2300      	movs	r3, #0
 8008822:	61fb      	str	r3, [r7, #28]
					break;
 8008824:	e009      	b.n	800883a <xTaskGenericNotify+0xb6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	22b4      	movs	r2, #180	; 0xb4
 800882a:	589b      	ldr	r3, [r3, r2]
 800882c:	3301      	adds	r3, #1
 800882e:	d003      	beq.n	8008838 <xTaskGenericNotify+0xb4>
 8008830:	b672      	cpsid	i
 8008832:	e7fe      	b.n	8008832 <xTaskGenericNotify+0xae>
					break;
 8008834:	46c0      	nop			; (mov r8, r8)
 8008836:	e000      	b.n	800883a <xTaskGenericNotify+0xb6>

					break;
 8008838:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800883a:	2317      	movs	r3, #23
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d12b      	bne.n	800889c <xTaskGenericNotify+0x118>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	3304      	adds	r3, #4
 8008848:	0018      	movs	r0, r3
 800884a:	f7fe fcce 	bl	80071ea <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <xTaskGenericNotify+0x12c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <xTaskGenericNotify+0xde>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885e:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <xTaskGenericNotify+0x12c>)
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008866:	0013      	movs	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	189b      	adds	r3, r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4a11      	ldr	r2, [pc, #68]	; (80088b4 <xTaskGenericNotify+0x130>)
 8008870:	189a      	adds	r2, r3, r2
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	3304      	adds	r3, #4
 8008876:	0019      	movs	r1, r3
 8008878:	0010      	movs	r0, r2
 800887a:	f7fe fc5e 	bl	800713a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <xTaskGenericNotify+0x106>
 8008886:	b672      	cpsid	i
 8008888:	e7fe      	b.n	8008888 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <xTaskGenericNotify+0x134>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	429a      	cmp	r2, r3
 8008896:	d901      	bls.n	800889c <xTaskGenericNotify+0x118>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008898:	f000 fcba 	bl	8009210 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800889c:	f000 fcda 	bl	8009254 <vPortExitCritical>

		return xReturn;
 80088a0:	69fb      	ldr	r3, [r7, #28]
	}
 80088a2:	0018      	movs	r0, r3
 80088a4:	46bd      	mov	sp, r7
 80088a6:	b008      	add	sp, #32
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	0800c620 	.word	0x0800c620
 80088b0:	20000ffc 	.word	0x20000ffc
 80088b4:	20000b24 	.word	0x20000b24
 80088b8:	20000b20 	.word	0x20000b20

080088bc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	1dfb      	adds	r3, r7, #7
 80088ca:	701a      	strb	r2, [r3, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80088cc:	2301      	movs	r3, #1
 80088ce:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <xTaskGenericNotifyFromISR+0x1e>
 80088d6:	b672      	cpsid	i
 80088d8:	e7fe      	b.n	80088d8 <xTaskGenericNotifyFromISR+0x1c>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088de:	f000 fcd1 	bl	8009284 <ulSetInterruptMaskFromISR>
 80088e2:	0003      	movs	r3, r0
 80088e4:	617b      	str	r3, [r7, #20]
		{
			if( pulPreviousNotificationValue != NULL )
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <xTaskGenericNotifyFromISR+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	22b4      	movs	r2, #180	; 0xb4
 80088f0:	589a      	ldr	r2, [r3, r2]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80088f6:	2313      	movs	r3, #19
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	21b8      	movs	r1, #184	; 0xb8
 80088fe:	5c52      	ldrb	r2, [r2, r1]
 8008900:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	22b8      	movs	r2, #184	; 0xb8
 8008906:	2102      	movs	r1, #2
 8008908:	5499      	strb	r1, [r3, r2]

			switch( eAction )
 800890a:	1dfb      	adds	r3, r7, #7
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b04      	cmp	r3, #4
 8008910:	d827      	bhi.n	8008962 <xTaskGenericNotifyFromISR+0xa6>
 8008912:	009a      	lsls	r2, r3, #2
 8008914:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <xTaskGenericNotifyFromISR+0x158>)
 8008916:	18d3      	adds	r3, r2, r3
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	469f      	mov	pc, r3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	22b4      	movs	r2, #180	; 0xb4
 8008920:	589a      	ldr	r2, [r3, r2]
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	431a      	orrs	r2, r3
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	21b4      	movs	r1, #180	; 0xb4
 800892a:	505a      	str	r2, [r3, r1]
					break;
 800892c:	e023      	b.n	8008976 <xTaskGenericNotifyFromISR+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	22b4      	movs	r2, #180	; 0xb4
 8008932:	589b      	ldr	r3, [r3, r2]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	21b4      	movs	r1, #180	; 0xb4
 800893a:	505a      	str	r2, [r3, r1]
					break;
 800893c:	e01b      	b.n	8008976 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	21b4      	movs	r1, #180	; 0xb4
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	505a      	str	r2, [r3, r1]
					break;
 8008946:	e016      	b.n	8008976 <xTaskGenericNotifyFromISR+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008948:	2313      	movs	r3, #19
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d004      	beq.n	800895c <xTaskGenericNotifyFromISR+0xa0>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	21b4      	movs	r1, #180	; 0xb4
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	505a      	str	r2, [r3, r1]
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800895a:	e00c      	b.n	8008976 <xTaskGenericNotifyFromISR+0xba>
						xReturn = pdFAIL;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
					break;
 8008960:	e009      	b.n	8008976 <xTaskGenericNotifyFromISR+0xba>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	22b4      	movs	r2, #180	; 0xb4
 8008966:	589b      	ldr	r3, [r3, r2]
 8008968:	3301      	adds	r3, #1
 800896a:	d003      	beq.n	8008974 <xTaskGenericNotifyFromISR+0xb8>
 800896c:	b672      	cpsid	i
 800896e:	e7fe      	b.n	800896e <xTaskGenericNotifyFromISR+0xb2>
					break;
 8008970:	46c0      	nop			; (mov r8, r8)
 8008972:	e000      	b.n	8008976 <xTaskGenericNotifyFromISR+0xba>
					break;
 8008974:	46c0      	nop			; (mov r8, r8)

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008976:	2313      	movs	r3, #19
 8008978:	18fb      	adds	r3, r7, r3
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d13f      	bne.n	8008a00 <xTaskGenericNotifyFromISR+0x144>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <xTaskGenericNotifyFromISR+0xd0>
 8008988:	b672      	cpsid	i
 800898a:	e7fe      	b.n	800898a <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800898c:	4b22      	ldr	r3, [pc, #136]	; (8008a18 <xTaskGenericNotifyFromISR+0x15c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d11d      	bne.n	80089d0 <xTaskGenericNotifyFromISR+0x114>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	3304      	adds	r3, #4
 8008998:	0018      	movs	r0, r3
 800899a:	f7fe fc26 	bl	80071ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a2:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <xTaskGenericNotifyFromISR+0x160>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d903      	bls.n	80089b2 <xTaskGenericNotifyFromISR+0xf6>
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <xTaskGenericNotifyFromISR+0x160>)
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b6:	0013      	movs	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	189b      	adds	r3, r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <xTaskGenericNotifyFromISR+0x164>)
 80089c0:	189a      	adds	r2, r3, r2
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	3304      	adds	r3, #4
 80089c6:	0019      	movs	r1, r3
 80089c8:	0010      	movs	r0, r2
 80089ca:	f7fe fbb6 	bl	800713a <vListInsertEnd>
 80089ce:	e007      	b.n	80089e0 <xTaskGenericNotifyFromISR+0x124>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	3318      	adds	r3, #24
 80089d4:	001a      	movs	r2, r3
 80089d6:	4b13      	ldr	r3, [pc, #76]	; (8008a24 <xTaskGenericNotifyFromISR+0x168>)
 80089d8:	0011      	movs	r1, r2
 80089da:	0018      	movs	r0, r3
 80089dc:	f7fe fbad 	bl	800713a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e4:	4b10      	ldr	r3, [pc, #64]	; (8008a28 <xTaskGenericNotifyFromISR+0x16c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d908      	bls.n	8008a00 <xTaskGenericNotifyFromISR+0x144>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <xTaskGenericNotifyFromISR+0x13e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	2201      	movs	r2, #1
 80089f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80089fa:	4b0c      	ldr	r3, [pc, #48]	; (8008a2c <xTaskGenericNotifyFromISR+0x170>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	0018      	movs	r0, r3
 8008a04:	f000 fc44 	bl	8009290 <vClearInterruptMaskFromISR>

		return xReturn;
 8008a08:	69fb      	ldr	r3, [r7, #28]
	}
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	b008      	add	sp, #32
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	0800c634 	.word	0x0800c634
 8008a18:	2000101c 	.word	0x2000101c
 8008a1c:	20000ffc 	.word	0x20000ffc
 8008a20:	20000b24 	.word	0x20000b24
 8008a24:	20000fb4 	.word	0x20000fb4
 8008a28:	20000b20 	.word	0x20000b20
 8008a2c:	20001008 	.word	0x20001008

08008a30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a3a:	4b21      	ldr	r3, [pc, #132]	; (8008ac0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a40:	4b20      	ldr	r3, [pc, #128]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3304      	adds	r3, #4
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7fe fbcf 	bl	80071ea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	d10b      	bne.n	8008a6a <prvAddCurrentTaskToDelayedList+0x3a>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d008      	beq.n	8008a6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	1d1a      	adds	r2, r3, #4
 8008a5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ac8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a60:	0011      	movs	r1, r2
 8008a62:	0018      	movs	r0, r3
 8008a64:	f7fe fb69 	bl	800713a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a68:	e026      	b.n	8008ab8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	18d3      	adds	r3, r2, r3
 8008a70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a72:	4b14      	ldr	r3, [pc, #80]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a7a:	68ba      	ldr	r2, [r7, #8]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d209      	bcs.n	8008a96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	0019      	movs	r1, r3
 8008a8e:	0010      	movs	r0, r2
 8008a90:	f7fe fb75 	bl	800717e <vListInsert>
}
 8008a94:	e010      	b.n	8008ab8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a96:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	0019      	movs	r1, r3
 8008aa2:	0010      	movs	r0, r2
 8008aa4:	f7fe fb6b 	bl	800717e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d202      	bcs.n	8008ab8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	601a      	str	r2, [r3, #0]
}
 8008ab8:	46c0      	nop			; (mov r8, r8)
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b004      	add	sp, #16
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	20000ff8 	.word	0x20000ff8
 8008ac4:	20000b20 	.word	0x20000b20
 8008ac8:	20000fe0 	.word	0x20000fe0
 8008acc:	20000fb0 	.word	0x20000fb0
 8008ad0:	20000fac 	.word	0x20000fac
 8008ad4:	20001014 	.word	0x20001014

08008ad8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b089      	sub	sp, #36	; 0x24
 8008adc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ae2:	f000 fac9 	bl	8009078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ae6:	4b17      	ldr	r3, [pc, #92]	; (8008b44 <xTimerCreateTimerTask+0x6c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d020      	beq.n	8008b30 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008af6:	003a      	movs	r2, r7
 8008af8:	1d39      	adds	r1, r7, #4
 8008afa:	2308      	movs	r3, #8
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	0018      	movs	r0, r3
 8008b00:	f7fe fada 	bl	80070b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b04:	683c      	ldr	r4, [r7, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	490f      	ldr	r1, [pc, #60]	; (8008b48 <xTimerCreateTimerTask+0x70>)
 8008b0c:	480f      	ldr	r0, [pc, #60]	; (8008b4c <xTimerCreateTimerTask+0x74>)
 8008b0e:	9202      	str	r2, [sp, #8]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	2302      	movs	r3, #2
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	0022      	movs	r2, r4
 8008b1a:	f7fe ffba 	bl	8007a92 <xTaskCreateStatic>
 8008b1e:	0002      	movs	r2, r0
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <xTimerCreateTimerTask+0x78>)
 8008b22:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <xTimerCreateTimerTask+0x78>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <xTimerCreateTimerTask+0x62>
 8008b36:	b672      	cpsid	i
 8008b38:	e7fe      	b.n	8008b38 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b005      	add	sp, #20
 8008b42:	bd90      	pop	{r4, r7, pc}
 8008b44:	20001050 	.word	0x20001050
 8008b48:	0800c420 	.word	0x0800c420
 8008b4c:	08008c71 	.word	0x08008c71
 8008b50:	20001054 	.word	0x20001054

08008b54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b54:	b590      	push	{r4, r7, lr}
 8008b56:	b08b      	sub	sp, #44	; 0x2c
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <xTimerGenericCommand+0x1c>
 8008b6c:	b672      	cpsid	i
 8008b6e:	e7fe      	b.n	8008b6e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b70:	4b1c      	ldr	r3, [pc, #112]	; (8008be4 <xTimerGenericCommand+0x90>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d030      	beq.n	8008bda <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b78:	2414      	movs	r4, #20
 8008b7a:	193b      	adds	r3, r7, r4
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b80:	193b      	adds	r3, r7, r4
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b86:	193b      	adds	r3, r7, r4
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b05      	cmp	r3, #5
 8008b90:	dc19      	bgt.n	8008bc6 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b92:	f7ff fd27 	bl	80085e4 <xTaskGetSchedulerState>
 8008b96:	0003      	movs	r3, r0
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d109      	bne.n	8008bb0 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b9c:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <xTimerGenericCommand+0x90>)
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ba2:	1939      	adds	r1, r7, r4
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f7fe fc0f 	bl	80073c8 <xQueueGenericSend>
 8008baa:	0003      	movs	r3, r0
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
 8008bae:	e014      	b.n	8008bda <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <xTimerGenericCommand+0x90>)
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	2314      	movs	r3, #20
 8008bb6:	18f9      	adds	r1, r7, r3
 8008bb8:	2300      	movs	r3, #0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f7fe fc04 	bl	80073c8 <xQueueGenericSend>
 8008bc0:	0003      	movs	r3, r0
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc4:	e009      	b.n	8008bda <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bc6:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <xTimerGenericCommand+0x90>)
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	2314      	movs	r3, #20
 8008bce:	18f9      	adds	r1, r7, r3
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f7fe fcbd 	bl	8007550 <xQueueGenericSendFromISR>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bdc:	0018      	movs	r0, r3
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b00b      	add	sp, #44	; 0x2c
 8008be2:	bd90      	pop	{r4, r7, pc}
 8008be4:	20001050 	.word	0x20001050

08008be8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bf2:	4b1e      	ldr	r3, [pc, #120]	; (8008c6c <prvProcessExpiredTimer+0x84>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	0018      	movs	r0, r3
 8008c02:	f7fe faf2 	bl	80071ea <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2228      	movs	r2, #40	; 0x28
 8008c0a:	5c9b      	ldrb	r3, [r3, r2]
 8008c0c:	001a      	movs	r2, r3
 8008c0e:	2304      	movs	r3, #4
 8008c10:	4013      	ands	r3, r2
 8008c12:	d019      	beq.n	8008c48 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	18d1      	adds	r1, r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 f8c3 	bl	8008dac <prvInsertTimerInActiveList>
 8008c26:	1e03      	subs	r3, r0, #0
 8008c28:	d017      	beq.n	8008c5a <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	2300      	movs	r3, #0
 8008c34:	2100      	movs	r1, #0
 8008c36:	f7ff ff8d 	bl	8008b54 <xTimerGenericCommand>
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <prvProcessExpiredTimer+0x72>
 8008c44:	b672      	cpsid	i
 8008c46:	e7fe      	b.n	8008c46 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2228      	movs	r2, #40	; 0x28
 8008c4c:	5c9b      	ldrb	r3, [r3, r2]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4393      	bics	r3, r2
 8008c52:	b2d9      	uxtb	r1, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2228      	movs	r2, #40	; 0x28
 8008c58:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	0010      	movs	r0, r2
 8008c62:	4798      	blx	r3
}
 8008c64:	46c0      	nop			; (mov r8, r8)
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b004      	add	sp, #16
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20001048 	.word	0x20001048

08008c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c78:	2308      	movs	r3, #8
 8008c7a:	18fb      	adds	r3, r7, r3
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f000 f853 	bl	8008d28 <prvGetNextExpireTime>
 8008c82:	0003      	movs	r3, r0
 8008c84:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f000 f803 	bl	8008c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008c92:	f000 f8cd 	bl	8008e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c96:	e7ef      	b.n	8008c78 <prvTimerTask+0x8>

08008c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ca2:	f7ff f913 	bl	8007ecc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ca6:	2308      	movs	r3, #8
 8008ca8:	18fb      	adds	r3, r7, r3
 8008caa:	0018      	movs	r0, r3
 8008cac:	f000 f85e 	bl	8008d6c <prvSampleTimeNow>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d12b      	bne.n	8008d12 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10c      	bne.n	8008cda <prvProcessTimerOrBlockTask+0x42>
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d808      	bhi.n	8008cda <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8008cc8:	f7ff f90c 	bl	8007ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	0011      	movs	r1, r2
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f7ff ff88 	bl	8008be8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cd8:	e01d      	b.n	8008d16 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d008      	beq.n	8008cf2 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <prvProcessTimerOrBlockTask+0x88>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <prvProcessTimerOrBlockTask+0x56>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <prvProcessTimerOrBlockTask+0x58>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <prvProcessTimerOrBlockTask+0x8c>)
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	0019      	movs	r1, r3
 8008d00:	f7fe fe94 	bl	8007a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d04:	f7ff f8ee 	bl	8007ee4 <xTaskResumeAll>
 8008d08:	1e03      	subs	r3, r0, #0
 8008d0a:	d104      	bne.n	8008d16 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8008d0c:	f000 fa80 	bl	8009210 <vPortYield>
}
 8008d10:	e001      	b.n	8008d16 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8008d12:	f7ff f8e7 	bl	8007ee4 <xTaskResumeAll>
}
 8008d16:	46c0      	nop			; (mov r8, r8)
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b004      	add	sp, #16
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	2000104c 	.word	0x2000104c
 8008d24:	20001050 	.word	0x20001050

08008d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <prvGetNextExpireTime+0x40>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <prvGetNextExpireTime+0x16>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	e000      	b.n	8008d40 <prvGetNextExpireTime+0x18>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d105      	bne.n	8008d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d4c:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <prvGetNextExpireTime+0x40>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	e001      	b.n	8008d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
}
 8008d5e:	0018      	movs	r0, r3
 8008d60:	46bd      	mov	sp, r7
 8008d62:	b004      	add	sp, #16
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	20001048 	.word	0x20001048

08008d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008d74:	f7ff f942 	bl	8007ffc <xTaskGetTickCount>
 8008d78:	0003      	movs	r3, r0
 8008d7a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8008d7c:	4b0a      	ldr	r3, [pc, #40]	; (8008da8 <prvSampleTimeNow+0x3c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d205      	bcs.n	8008d92 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8008d86:	f000 f919 	bl	8008fbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	e002      	b.n	8008d98 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008d98:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <prvSampleTimeNow+0x3c>)
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
}
 8008da0:	0018      	movs	r0, r3
 8008da2:	46bd      	mov	sp, r7
 8008da4:	b004      	add	sp, #16
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20001058 	.word	0x20001058

08008dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d812      	bhi.n	8008df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d302      	bcc.n	8008de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008de0:	2301      	movs	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	e01b      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008de6:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <prvInsertTimerInActiveList+0x7c>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3304      	adds	r3, #4
 8008dee:	0019      	movs	r1, r3
 8008df0:	0010      	movs	r0, r2
 8008df2:	f7fe f9c4 	bl	800717e <vListInsert>
 8008df6:	e012      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d206      	bcs.n	8008e0e <prvInsertTimerInActiveList+0x62>
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d302      	bcc.n	8008e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	e007      	b.n	8008e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <prvInsertTimerInActiveList+0x80>)
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3304      	adds	r3, #4
 8008e16:	0019      	movs	r1, r3
 8008e18:	0010      	movs	r0, r2
 8008e1a:	f7fe f9b0 	bl	800717e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e1e:	697b      	ldr	r3, [r7, #20]
}
 8008e20:	0018      	movs	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	b006      	add	sp, #24
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	2000104c 	.word	0x2000104c
 8008e2c:	20001048 	.word	0x20001048

08008e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e30:	b590      	push	{r4, r7, lr}
 8008e32:	b08d      	sub	sp, #52	; 0x34
 8008e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e36:	e0ac      	b.n	8008f92 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e38:	2208      	movs	r2, #8
 8008e3a:	18bb      	adds	r3, r7, r2
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	da0f      	bge.n	8008e62 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e42:	18bb      	adds	r3, r7, r2
 8008e44:	3304      	adds	r3, #4
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <prvProcessReceivedCommands+0x22>
 8008e4e:	b672      	cpsid	i
 8008e50:	e7fe      	b.n	8008e50 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	6858      	ldr	r0, [r3, #4]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	0019      	movs	r1, r3
 8008e60:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e62:	2208      	movs	r2, #8
 8008e64:	18bb      	adds	r3, r7, r2
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da00      	bge.n	8008e6e <prvProcessReceivedCommands+0x3e>
 8008e6c:	e090      	b.n	8008f90 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008e6e:	18bb      	adds	r3, r7, r2
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	0018      	movs	r0, r3
 8008e82:	f7fe f9b2 	bl	80071ea <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e86:	1d3b      	adds	r3, r7, #4
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7ff ff6f 	bl	8008d6c <prvSampleTimeNow>
 8008e8e:	0003      	movs	r3, r0
 8008e90:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8008e92:	2308      	movs	r3, #8
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b09      	cmp	r3, #9
 8008e9a:	d900      	bls.n	8008e9e <prvProcessReceivedCommands+0x6e>
 8008e9c:	e079      	b.n	8008f92 <prvProcessReceivedCommands+0x162>
 8008e9e:	009a      	lsls	r2, r3, #2
 8008ea0:	4b44      	ldr	r3, [pc, #272]	; (8008fb4 <prvProcessReceivedCommands+0x184>)
 8008ea2:	18d3      	adds	r3, r2, r3
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	2228      	movs	r2, #40	; 0x28
 8008eac:	5c9b      	ldrb	r3, [r3, r2]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	b2d9      	uxtb	r1, r3
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	2228      	movs	r2, #40	; 0x28
 8008eb8:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008eba:	2408      	movs	r4, #8
 8008ebc:	193b      	adds	r3, r7, r4
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	18d1      	adds	r1, r2, r3
 8008ec6:	193b      	adds	r3, r7, r4
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	6a38      	ldr	r0, [r7, #32]
 8008ece:	f7ff ff6d 	bl	8008dac <prvInsertTimerInActiveList>
 8008ed2:	1e03      	subs	r3, r0, #0
 8008ed4:	d05d      	beq.n	8008f92 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	0010      	movs	r0, r2
 8008ede:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	2228      	movs	r2, #40	; 0x28
 8008ee4:	5c9b      	ldrb	r3, [r3, r2]
 8008ee6:	001a      	movs	r2, r3
 8008ee8:	2304      	movs	r3, #4
 8008eea:	4013      	ands	r3, r2
 8008eec:	d051      	beq.n	8008f92 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008eee:	193b      	adds	r3, r7, r4
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	18d2      	adds	r2, r2, r3
 8008ef8:	6a38      	ldr	r0, [r7, #32]
 8008efa:	2300      	movs	r3, #0
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	2300      	movs	r3, #0
 8008f00:	2100      	movs	r1, #0
 8008f02:	f7ff fe27 	bl	8008b54 <xTimerGenericCommand>
 8008f06:	0003      	movs	r3, r0
 8008f08:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d140      	bne.n	8008f92 <prvProcessReceivedCommands+0x162>
 8008f10:	b672      	cpsid	i
 8008f12:	e7fe      	b.n	8008f12 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	2228      	movs	r2, #40	; 0x28
 8008f18:	5c9b      	ldrb	r3, [r3, r2]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	4393      	bics	r3, r2
 8008f1e:	b2d9      	uxtb	r1, r3
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	2228      	movs	r2, #40	; 0x28
 8008f24:	5499      	strb	r1, [r3, r2]
					break;
 8008f26:	e034      	b.n	8008f92 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	2228      	movs	r2, #40	; 0x28
 8008f2c:	5c9b      	ldrb	r3, [r3, r2]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	4313      	orrs	r3, r2
 8008f32:	b2d9      	uxtb	r1, r3
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	2228      	movs	r2, #40	; 0x28
 8008f38:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f3a:	2308      	movs	r3, #8
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <prvProcessReceivedCommands+0x120>
 8008f4c:	b672      	cpsid	i
 8008f4e:	e7fe      	b.n	8008f4e <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	18d1      	adds	r1, r2, r3
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	6a38      	ldr	r0, [r7, #32]
 8008f5e:	f7ff ff25 	bl	8008dac <prvInsertTimerInActiveList>
					break;
 8008f62:	e016      	b.n	8008f92 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	2228      	movs	r2, #40	; 0x28
 8008f68:	5c9b      	ldrb	r3, [r3, r2]
 8008f6a:	001a      	movs	r2, r3
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	4013      	ands	r3, r2
 8008f70:	d104      	bne.n	8008f7c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	0018      	movs	r0, r3
 8008f76:	f000 fa9f 	bl	80094b8 <vPortFree>
 8008f7a:	e00a      	b.n	8008f92 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	2228      	movs	r2, #40	; 0x28
 8008f80:	5c9b      	ldrb	r3, [r3, r2]
 8008f82:	2201      	movs	r2, #1
 8008f84:	4393      	bics	r3, r2
 8008f86:	b2d9      	uxtb	r1, r3
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2228      	movs	r2, #40	; 0x28
 8008f8c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008f8e:	e000      	b.n	8008f92 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008f90:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <prvProcessReceivedCommands+0x188>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2208      	movs	r2, #8
 8008f98:	18b9      	adds	r1, r7, r2
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7fe fb4b 	bl	8007638 <xQueueReceive>
 8008fa2:	1e03      	subs	r3, r0, #0
 8008fa4:	d000      	beq.n	8008fa8 <prvProcessReceivedCommands+0x178>
 8008fa6:	e747      	b.n	8008e38 <prvProcessReceivedCommands+0x8>
	}
}
 8008fa8:	46c0      	nop			; (mov r8, r8)
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	46bd      	mov	sp, r7
 8008fae:	b00b      	add	sp, #44	; 0x2c
 8008fb0:	bd90      	pop	{r4, r7, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	0800c648 	.word	0x0800c648
 8008fb8:	20001050 	.word	0x20001050

08008fbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fc2:	e041      	b.n	8009048 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fc4:	4b2a      	ldr	r3, [pc, #168]	; (8009070 <prvSwitchTimerLists+0xb4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fce:	4b28      	ldr	r3, [pc, #160]	; (8009070 <prvSwitchTimerLists+0xb4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f7fe f904 	bl	80071ea <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	0010      	movs	r0, r2
 8008fea:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2228      	movs	r2, #40	; 0x28
 8008ff0:	5c9b      	ldrb	r3, [r3, r2]
 8008ff2:	001a      	movs	r2, r3
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	d026      	beq.n	8009048 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	18d3      	adds	r3, r2, r3
 8009002:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	429a      	cmp	r2, r3
 800900a:	d90e      	bls.n	800902a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009018:	4b15      	ldr	r3, [pc, #84]	; (8009070 <prvSwitchTimerLists+0xb4>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3304      	adds	r3, #4
 8009020:	0019      	movs	r1, r3
 8009022:	0010      	movs	r0, r2
 8009024:	f7fe f8ab 	bl	800717e <vListInsert>
 8009028:	e00e      	b.n	8009048 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	2300      	movs	r3, #0
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	2300      	movs	r3, #0
 8009034:	2100      	movs	r1, #0
 8009036:	f7ff fd8d 	bl	8008b54 <xTimerGenericCommand>
 800903a:	0003      	movs	r3, r0
 800903c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <prvSwitchTimerLists+0x8c>
 8009044:	b672      	cpsid	i
 8009046:	e7fe      	b.n	8009046 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <prvSwitchTimerLists+0xb4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1b8      	bne.n	8008fc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009052:	4b07      	ldr	r3, [pc, #28]	; (8009070 <prvSwitchTimerLists+0xb4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009058:	4b06      	ldr	r3, [pc, #24]	; (8009074 <prvSwitchTimerLists+0xb8>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	4b04      	ldr	r3, [pc, #16]	; (8009070 <prvSwitchTimerLists+0xb4>)
 800905e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <prvSwitchTimerLists+0xb8>)
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	601a      	str	r2, [r3, #0]
}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	46bd      	mov	sp, r7
 800906a:	b006      	add	sp, #24
 800906c:	bd80      	pop	{r7, pc}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	20001048 	.word	0x20001048
 8009074:	2000104c 	.word	0x2000104c

08009078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800907e:	f000 f8d7 	bl	8009230 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009082:	4b16      	ldr	r3, [pc, #88]	; (80090dc <prvCheckForValidListAndQueue+0x64>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d123      	bne.n	80090d2 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800908a:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <prvCheckForValidListAndQueue+0x68>)
 800908c:	0018      	movs	r0, r3
 800908e:	f7fe f82b 	bl	80070e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009092:	4b14      	ldr	r3, [pc, #80]	; (80090e4 <prvCheckForValidListAndQueue+0x6c>)
 8009094:	0018      	movs	r0, r3
 8009096:	f7fe f827 	bl	80070e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800909a:	4b13      	ldr	r3, [pc, #76]	; (80090e8 <prvCheckForValidListAndQueue+0x70>)
 800909c:	4a10      	ldr	r2, [pc, #64]	; (80090e0 <prvCheckForValidListAndQueue+0x68>)
 800909e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80090a0:	4b12      	ldr	r3, [pc, #72]	; (80090ec <prvCheckForValidListAndQueue+0x74>)
 80090a2:	4a10      	ldr	r2, [pc, #64]	; (80090e4 <prvCheckForValidListAndQueue+0x6c>)
 80090a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80090a6:	4b12      	ldr	r3, [pc, #72]	; (80090f0 <prvCheckForValidListAndQueue+0x78>)
 80090a8:	4a12      	ldr	r2, [pc, #72]	; (80090f4 <prvCheckForValidListAndQueue+0x7c>)
 80090aa:	2100      	movs	r1, #0
 80090ac:	9100      	str	r1, [sp, #0]
 80090ae:	2110      	movs	r1, #16
 80090b0:	200a      	movs	r0, #10
 80090b2:	f7fe f916 	bl	80072e2 <xQueueGenericCreateStatic>
 80090b6:	0002      	movs	r2, r0
 80090b8:	4b08      	ldr	r3, [pc, #32]	; (80090dc <prvCheckForValidListAndQueue+0x64>)
 80090ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80090bc:	4b07      	ldr	r3, [pc, #28]	; (80090dc <prvCheckForValidListAndQueue+0x64>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <prvCheckForValidListAndQueue+0x64>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a0b      	ldr	r2, [pc, #44]	; (80090f8 <prvCheckForValidListAndQueue+0x80>)
 80090ca:	0011      	movs	r1, r2
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7fe fc85 	bl	80079dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090d2:	f000 f8bf 	bl	8009254 <vPortExitCritical>
}
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	20001050 	.word	0x20001050
 80090e0:	20001020 	.word	0x20001020
 80090e4:	20001034 	.word	0x20001034
 80090e8:	20001048 	.word	0x20001048
 80090ec:	2000104c 	.word	0x2000104c
 80090f0:	200010fc 	.word	0x200010fc
 80090f4:	2000105c 	.word	0x2000105c
 80090f8:	0800c428 	.word	0x0800c428

080090fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3b04      	subs	r3, #4
 800910c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2280      	movs	r2, #128	; 0x80
 8009112:	0452      	lsls	r2, r2, #17
 8009114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	3b04      	subs	r3, #4
 800911a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800911c:	68ba      	ldr	r2, [r7, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3b04      	subs	r3, #4
 8009126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009128:	4a08      	ldr	r2, [pc, #32]	; (800914c <pxPortInitialiseStack+0x50>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3b14      	subs	r3, #20
 8009132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3b20      	subs	r3, #32
 800913e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	0018      	movs	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	b004      	add	sp, #16
 8009148:	bd80      	pop	{r7, pc}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	08009151 	.word	0x08009151

08009150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <prvTaskExitError+0x2c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3301      	adds	r3, #1
 8009160:	d001      	beq.n	8009166 <prvTaskExitError+0x16>
 8009162:	b672      	cpsid	i
 8009164:	e7fe      	b.n	8009164 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8009166:	b672      	cpsid	i
	while( ulDummy == 0 )
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0fc      	beq.n	800916a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	46bd      	mov	sp, r7
 8009176:	b002      	add	sp, #8
 8009178:	bd80      	pop	{r7, pc}
 800917a:	46c0      	nop			; (mov r8, r8)
 800917c:	20000010 	.word	0x20000010

08009180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009184:	46c0      	nop			; (mov r8, r8)
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	0000      	movs	r0, r0
 800918c:	0000      	movs	r0, r0
	...

08009190 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009190:	4a0b      	ldr	r2, [pc, #44]	; (80091c0 <pxCurrentTCBConst2>)
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	3020      	adds	r0, #32
 8009198:	f380 8809 	msr	PSP, r0
 800919c:	2002      	movs	r0, #2
 800919e:	f380 8814 	msr	CONTROL, r0
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80091a8:	46ae      	mov	lr, r5
 80091aa:	bc08      	pop	{r3}
 80091ac:	bc04      	pop	{r2}
 80091ae:	b662      	cpsie	i
 80091b0:	4718      	bx	r3
 80091b2:	46c0      	nop			; (mov r8, r8)
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	46c0      	nop			; (mov r8, r8)
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	46c0      	nop			; (mov r8, r8)

080091c0 <pxCurrentTCBConst2>:
 80091c0:	20000b20 	.word	0x20000b20
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	46c0      	nop			; (mov r8, r8)

080091c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <xPortStartScheduler+0x40>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <xPortStartScheduler+0x40>)
 80091d2:	21ff      	movs	r1, #255	; 0xff
 80091d4:	0409      	lsls	r1, r1, #16
 80091d6:	430a      	orrs	r2, r1
 80091d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <xPortStartScheduler+0x40>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <xPortStartScheduler+0x40>)
 80091e0:	21ff      	movs	r1, #255	; 0xff
 80091e2:	0609      	lsls	r1, r1, #24
 80091e4:	430a      	orrs	r2, r1
 80091e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091e8:	f000 f898 	bl	800931c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091ec:	4b07      	ldr	r3, [pc, #28]	; (800920c <xPortStartScheduler+0x44>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80091f2:	f7ff ffcd 	bl	8009190 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091f6:	f7fe ffbf 	bl	8008178 <vTaskSwitchContext>
	prvTaskExitError();
 80091fa:	f7ff ffa9 	bl	8009150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	0018      	movs	r0, r3
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	46c0      	nop			; (mov r8, r8)
 8009208:	e000ed20 	.word	0xe000ed20
 800920c:	20000010 	.word	0x20000010

08009210 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <vPortYield+0x1c>)
 8009216:	2280      	movs	r2, #128	; 0x80
 8009218:	0552      	lsls	r2, r2, #21
 800921a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800921c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009220:	f3bf 8f6f 	isb	sy
}
 8009224:	46c0      	nop			; (mov r8, r8)
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8009234:	b672      	cpsid	i
	uxCriticalNesting++;
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <vPortEnterCritical+0x20>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	4b04      	ldr	r3, [pc, #16]	; (8009250 <vPortEnterCritical+0x20>)
 800923e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009240:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009244:	f3bf 8f6f 	isb	sy
}
 8009248:	46c0      	nop			; (mov r8, r8)
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	46c0      	nop			; (mov r8, r8)
 8009250:	20000010 	.word	0x20000010

08009254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <vPortExitCritical+0x2c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <vPortExitCritical+0x10>
 8009260:	b672      	cpsid	i
 8009262:	e7fe      	b.n	8009262 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <vPortExitCritical+0x2c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	1e5a      	subs	r2, r3, #1
 800926a:	4b05      	ldr	r3, [pc, #20]	; (8009280 <vPortExitCritical+0x2c>)
 800926c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <vPortExitCritical+0x2c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d100      	bne.n	8009278 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8009276:	b662      	cpsie	i
	}
}
 8009278:	46c0      	nop			; (mov r8, r8)
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	20000010 	.word	0x20000010

08009284 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009284:	f3ef 8010 	mrs	r0, PRIMASK
 8009288:	b672      	cpsid	i
 800928a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800928c:	46c0      	nop			; (mov r8, r8)
 800928e:	0018      	movs	r0, r3

08009290 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009290:	f380 8810 	msr	PRIMASK, r0
 8009294:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009296:	46c0      	nop			; (mov r8, r8)
	...

080092a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092a0:	f3ef 8009 	mrs	r0, PSP
 80092a4:	4b0e      	ldr	r3, [pc, #56]	; (80092e0 <pxCurrentTCBConst>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	3820      	subs	r0, #32
 80092aa:	6010      	str	r0, [r2, #0]
 80092ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80092ae:	4644      	mov	r4, r8
 80092b0:	464d      	mov	r5, r9
 80092b2:	4656      	mov	r6, sl
 80092b4:	465f      	mov	r7, fp
 80092b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80092b8:	b508      	push	{r3, lr}
 80092ba:	b672      	cpsid	i
 80092bc:	f7fe ff5c 	bl	8008178 <vTaskSwitchContext>
 80092c0:	b662      	cpsie	i
 80092c2:	bc0c      	pop	{r2, r3}
 80092c4:	6811      	ldr	r1, [r2, #0]
 80092c6:	6808      	ldr	r0, [r1, #0]
 80092c8:	3010      	adds	r0, #16
 80092ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80092cc:	46a0      	mov	r8, r4
 80092ce:	46a9      	mov	r9, r5
 80092d0:	46b2      	mov	sl, r6
 80092d2:	46bb      	mov	fp, r7
 80092d4:	f380 8809 	msr	PSP, r0
 80092d8:	3820      	subs	r0, #32
 80092da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80092dc:	4718      	bx	r3
 80092de:	46c0      	nop			; (mov r8, r8)

080092e0 <pxCurrentTCBConst>:
 80092e0:	20000b20 	.word	0x20000b20
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80092e4:	46c0      	nop			; (mov r8, r8)
 80092e6:	46c0      	nop			; (mov r8, r8)

080092e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80092ee:	f7ff ffc9 	bl	8009284 <ulSetInterruptMaskFromISR>
 80092f2:	0003      	movs	r3, r0
 80092f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092f6:	f7fe fe8f 	bl	8008018 <xTaskIncrementTick>
 80092fa:	1e03      	subs	r3, r0, #0
 80092fc:	d003      	beq.n	8009306 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092fe:	4b06      	ldr	r3, [pc, #24]	; (8009318 <xPortSysTickHandler+0x30>)
 8009300:	2280      	movs	r2, #128	; 0x80
 8009302:	0552      	lsls	r2, r2, #21
 8009304:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	0018      	movs	r0, r3
 800930a:	f7ff ffc1 	bl	8009290 <vClearInterruptMaskFromISR>
}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	46bd      	mov	sp, r7
 8009312:	b002      	add	sp, #8
 8009314:	bd80      	pop	{r7, pc}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <vPortSetupTimerInterrupt+0x34>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009326:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <vPortSetupTimerInterrupt+0x38>)
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <vPortSetupTimerInterrupt+0x3c>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	22fa      	movs	r2, #250	; 0xfa
 8009332:	0091      	lsls	r1, r2, #2
 8009334:	0018      	movs	r0, r3
 8009336:	f7f6 ff03 	bl	8000140 <__udivsi3>
 800933a:	0003      	movs	r3, r0
 800933c:	001a      	movs	r2, r3
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <vPortSetupTimerInterrupt+0x40>)
 8009340:	3a01      	subs	r2, #1
 8009342:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <vPortSetupTimerInterrupt+0x34>)
 8009346:	2207      	movs	r2, #7
 8009348:	601a      	str	r2, [r3, #0]
}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	e000e010 	.word	0xe000e010
 8009354:	e000e018 	.word	0xe000e018
 8009358:	20000004 	.word	0x20000004
 800935c:	e000e014 	.word	0xe000e014

08009360 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800936c:	f7fe fdae 	bl	8007ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009370:	4b4b      	ldr	r3, [pc, #300]	; (80094a0 <pvPortMalloc+0x140>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009378:	f000 f8ec 	bl	8009554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800937c:	4b49      	ldr	r3, [pc, #292]	; (80094a4 <pvPortMalloc+0x144>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	4013      	ands	r3, r2
 8009384:	d000      	beq.n	8009388 <pvPortMalloc+0x28>
 8009386:	e07e      	b.n	8009486 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d012      	beq.n	80093b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800938e:	2208      	movs	r2, #8
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	189b      	adds	r3, r3, r2
 8009394:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2207      	movs	r2, #7
 800939a:	4013      	ands	r3, r2
 800939c:	d00a      	beq.n	80093b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2207      	movs	r2, #7
 80093a2:	4393      	bics	r3, r2
 80093a4:	3308      	adds	r3, #8
 80093a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2207      	movs	r2, #7
 80093ac:	4013      	ands	r3, r2
 80093ae:	d001      	beq.n	80093b4 <pvPortMalloc+0x54>
 80093b0:	b672      	cpsid	i
 80093b2:	e7fe      	b.n	80093b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d065      	beq.n	8009486 <pvPortMalloc+0x126>
 80093ba:	4b3b      	ldr	r3, [pc, #236]	; (80094a8 <pvPortMalloc+0x148>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d860      	bhi.n	8009486 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093c4:	4b39      	ldr	r3, [pc, #228]	; (80094ac <pvPortMalloc+0x14c>)
 80093c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80093c8:	4b38      	ldr	r3, [pc, #224]	; (80094ac <pvPortMalloc+0x14c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ce:	e004      	b.n	80093da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <pvPortMalloc+0x8c>
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1f1      	bne.n	80093d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093ec:	4b2c      	ldr	r3, [pc, #176]	; (80094a0 <pvPortMalloc+0x140>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d047      	beq.n	8009486 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2208      	movs	r2, #8
 80093fc:	189b      	adds	r3, r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	2308      	movs	r3, #8
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	429a      	cmp	r2, r3
 8009416:	d916      	bls.n	8009446 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	18d3      	adds	r3, r2, r3
 800941e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2207      	movs	r2, #7
 8009424:	4013      	ands	r3, r2
 8009426:	d001      	beq.n	800942c <pvPortMalloc+0xcc>
 8009428:	b672      	cpsid	i
 800942a:	e7fe      	b.n	800942a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	0018      	movs	r0, r3
 8009442:	f000 f8e7 	bl	8009614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009446:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <pvPortMalloc+0x148>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <pvPortMalloc+0x148>)
 8009452:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009454:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <pvPortMalloc+0x148>)
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <pvPortMalloc+0x150>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d203      	bcs.n	8009468 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009460:	4b11      	ldr	r3, [pc, #68]	; (80094a8 <pvPortMalloc+0x148>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <pvPortMalloc+0x150>)
 8009466:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <pvPortMalloc+0x144>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	431a      	orrs	r2, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800947c:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <pvPortMalloc+0x154>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <pvPortMalloc+0x154>)
 8009484:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009486:	f7fe fd2d 	bl	8007ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2207      	movs	r2, #7
 800948e:	4013      	ands	r3, r2
 8009490:	d001      	beq.n	8009496 <pvPortMalloc+0x136>
 8009492:	b672      	cpsid	i
 8009494:	e7fe      	b.n	8009494 <pvPortMalloc+0x134>
	return pvReturn;
 8009496:	68fb      	ldr	r3, [r7, #12]
}
 8009498:	0018      	movs	r0, r3
 800949a:	46bd      	mov	sp, r7
 800949c:	b006      	add	sp, #24
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20001d54 	.word	0x20001d54
 80094a4:	20001d68 	.word	0x20001d68
 80094a8:	20001d58 	.word	0x20001d58
 80094ac:	20001d4c 	.word	0x20001d4c
 80094b0:	20001d5c 	.word	0x20001d5c
 80094b4:	20001d60 	.word	0x20001d60

080094b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d03a      	beq.n	8009540 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094ca:	2308      	movs	r3, #8
 80094cc:	425b      	negs	r3, r3
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	18d3      	adds	r3, r2, r3
 80094d2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <vPortFree+0x90>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4013      	ands	r3, r2
 80094e2:	d101      	bne.n	80094e8 <vPortFree+0x30>
 80094e4:	b672      	cpsid	i
 80094e6:	e7fe      	b.n	80094e6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <vPortFree+0x3c>
 80094f0:	b672      	cpsid	i
 80094f2:	e7fe      	b.n	80094f2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	4b13      	ldr	r3, [pc, #76]	; (8009548 <vPortFree+0x90>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4013      	ands	r3, r2
 80094fe:	d01f      	beq.n	8009540 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11b      	bne.n	8009540 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	4b0e      	ldr	r3, [pc, #56]	; (8009548 <vPortFree+0x90>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	43db      	mvns	r3, r3
 8009512:	401a      	ands	r2, r3
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009518:	f7fe fcd8 	bl	8007ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	4b0a      	ldr	r3, [pc, #40]	; (800954c <vPortFree+0x94>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	18d2      	adds	r2, r2, r3
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <vPortFree+0x94>)
 8009528:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	0018      	movs	r0, r3
 800952e:	f000 f871 	bl	8009614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009532:	4b07      	ldr	r3, [pc, #28]	; (8009550 <vPortFree+0x98>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <vPortFree+0x98>)
 800953a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800953c:	f7fe fcd2 	bl	8007ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009540:	46c0      	nop			; (mov r8, r8)
 8009542:	46bd      	mov	sp, r7
 8009544:	b004      	add	sp, #16
 8009546:	bd80      	pop	{r7, pc}
 8009548:	20001d68 	.word	0x20001d68
 800954c:	20001d58 	.word	0x20001d58
 8009550:	20001d64 	.word	0x20001d64

08009554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800955a:	23c0      	movs	r3, #192	; 0xc0
 800955c:	011b      	lsls	r3, r3, #4
 800955e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009560:	4b26      	ldr	r3, [pc, #152]	; (80095fc <prvHeapInit+0xa8>)
 8009562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2207      	movs	r2, #7
 8009568:	4013      	ands	r3, r2
 800956a:	d00c      	beq.n	8009586 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3307      	adds	r3, #7
 8009570:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2207      	movs	r2, #7
 8009576:	4393      	bics	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	1ad2      	subs	r2, r2, r3
 8009580:	4b1e      	ldr	r3, [pc, #120]	; (80095fc <prvHeapInit+0xa8>)
 8009582:	18d3      	adds	r3, r2, r3
 8009584:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <prvHeapInit+0xac>)
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009590:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <prvHeapInit+0xac>)
 8009592:	2200      	movs	r2, #0
 8009594:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	18d3      	adds	r3, r2, r3
 800959c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800959e:	2208      	movs	r2, #8
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2207      	movs	r2, #7
 80095aa:	4393      	bics	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	4b14      	ldr	r3, [pc, #80]	; (8009604 <prvHeapInit+0xb0>)
 80095b2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80095b4:	4b13      	ldr	r3, [pc, #76]	; (8009604 <prvHeapInit+0xb0>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2200      	movs	r2, #0
 80095ba:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <prvHeapInit+0xb0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	1ad2      	subs	r2, r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <prvHeapInit+0xb0>)
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <prvHeapInit+0xb4>)
 80095e0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	4b09      	ldr	r3, [pc, #36]	; (800960c <prvHeapInit+0xb8>)
 80095e8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <prvHeapInit+0xbc>)
 80095ec:	2280      	movs	r2, #128	; 0x80
 80095ee:	0612      	lsls	r2, r2, #24
 80095f0:	601a      	str	r2, [r3, #0]
}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	46bd      	mov	sp, r7
 80095f6:	b004      	add	sp, #16
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	2000114c 	.word	0x2000114c
 8009600:	20001d4c 	.word	0x20001d4c
 8009604:	20001d54 	.word	0x20001d54
 8009608:	20001d5c 	.word	0x20001d5c
 800960c:	20001d58 	.word	0x20001d58
 8009610:	20001d68 	.word	0x20001d68

08009614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800961c:	4b27      	ldr	r3, [pc, #156]	; (80096bc <prvInsertBlockIntoFreeList+0xa8>)
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e002      	b.n	8009628 <prvInsertBlockIntoFreeList+0x14>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	429a      	cmp	r2, r3
 8009630:	d8f7      	bhi.n	8009622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	18d3      	adds	r3, r2, r3
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d108      	bne.n	8009656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	18d2      	adds	r2, r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	18d2      	adds	r2, r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d118      	bne.n	800969c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4b14      	ldr	r3, [pc, #80]	; (80096c0 <prvInsertBlockIntoFreeList+0xac>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d00d      	beq.n	8009692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	18d2      	adds	r2, r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e008      	b.n	80096a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009692:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <prvInsertBlockIntoFreeList+0xac>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	601a      	str	r2, [r3, #0]
 800969a:	e003      	b.n	80096a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d002      	beq.n	80096b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	46bd      	mov	sp, r7
 80096b6:	b004      	add	sp, #16
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	46c0      	nop			; (mov r8, r8)
 80096bc:	20001d4c 	.word	0x20001d4c
 80096c0:	20001d54 	.word	0x20001d54

080096c4 <__errno>:
 80096c4:	4b01      	ldr	r3, [pc, #4]	; (80096cc <__errno+0x8>)
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	4770      	bx	lr
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	20000014 	.word	0x20000014

080096d0 <std>:
 80096d0:	2300      	movs	r3, #0
 80096d2:	b510      	push	{r4, lr}
 80096d4:	0004      	movs	r4, r0
 80096d6:	6003      	str	r3, [r0, #0]
 80096d8:	6043      	str	r3, [r0, #4]
 80096da:	6083      	str	r3, [r0, #8]
 80096dc:	8181      	strh	r1, [r0, #12]
 80096de:	6643      	str	r3, [r0, #100]	; 0x64
 80096e0:	0019      	movs	r1, r3
 80096e2:	81c2      	strh	r2, [r0, #14]
 80096e4:	6103      	str	r3, [r0, #16]
 80096e6:	6143      	str	r3, [r0, #20]
 80096e8:	6183      	str	r3, [r0, #24]
 80096ea:	2208      	movs	r2, #8
 80096ec:	305c      	adds	r0, #92	; 0x5c
 80096ee:	f000 f921 	bl	8009934 <memset>
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <std+0x38>)
 80096f4:	6224      	str	r4, [r4, #32]
 80096f6:	6263      	str	r3, [r4, #36]	; 0x24
 80096f8:	4b04      	ldr	r3, [pc, #16]	; (800970c <std+0x3c>)
 80096fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <std+0x40>)
 80096fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009700:	4b04      	ldr	r3, [pc, #16]	; (8009714 <std+0x44>)
 8009702:	6323      	str	r3, [r4, #48]	; 0x30
 8009704:	bd10      	pop	{r4, pc}
 8009706:	46c0      	nop			; (mov r8, r8)
 8009708:	0800a45d 	.word	0x0800a45d
 800970c:	0800a485 	.word	0x0800a485
 8009710:	0800a4bd 	.word	0x0800a4bd
 8009714:	0800a4e9 	.word	0x0800a4e9

08009718 <_cleanup_r>:
 8009718:	b510      	push	{r4, lr}
 800971a:	4902      	ldr	r1, [pc, #8]	; (8009724 <_cleanup_r+0xc>)
 800971c:	f000 f8ba 	bl	8009894 <_fwalk_reent>
 8009720:	bd10      	pop	{r4, pc}
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	0800b3a5 	.word	0x0800b3a5

08009728 <__sfmoreglue>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	2568      	movs	r5, #104	; 0x68
 800972c:	1e4a      	subs	r2, r1, #1
 800972e:	4355      	muls	r5, r2
 8009730:	000e      	movs	r6, r1
 8009732:	0029      	movs	r1, r5
 8009734:	3174      	adds	r1, #116	; 0x74
 8009736:	f000 f927 	bl	8009988 <_malloc_r>
 800973a:	1e04      	subs	r4, r0, #0
 800973c:	d008      	beq.n	8009750 <__sfmoreglue+0x28>
 800973e:	2100      	movs	r1, #0
 8009740:	002a      	movs	r2, r5
 8009742:	6001      	str	r1, [r0, #0]
 8009744:	6046      	str	r6, [r0, #4]
 8009746:	300c      	adds	r0, #12
 8009748:	60a0      	str	r0, [r4, #8]
 800974a:	3268      	adds	r2, #104	; 0x68
 800974c:	f000 f8f2 	bl	8009934 <memset>
 8009750:	0020      	movs	r0, r4
 8009752:	bd70      	pop	{r4, r5, r6, pc}

08009754 <__sfp_lock_acquire>:
 8009754:	b510      	push	{r4, lr}
 8009756:	4802      	ldr	r0, [pc, #8]	; (8009760 <__sfp_lock_acquire+0xc>)
 8009758:	f000 f8e1 	bl	800991e <__retarget_lock_acquire_recursive>
 800975c:	bd10      	pop	{r4, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	20001d6d 	.word	0x20001d6d

08009764 <__sfp_lock_release>:
 8009764:	b510      	push	{r4, lr}
 8009766:	4802      	ldr	r0, [pc, #8]	; (8009770 <__sfp_lock_release+0xc>)
 8009768:	f000 f8da 	bl	8009920 <__retarget_lock_release_recursive>
 800976c:	bd10      	pop	{r4, pc}
 800976e:	46c0      	nop			; (mov r8, r8)
 8009770:	20001d6d 	.word	0x20001d6d

08009774 <__sinit_lock_acquire>:
 8009774:	b510      	push	{r4, lr}
 8009776:	4802      	ldr	r0, [pc, #8]	; (8009780 <__sinit_lock_acquire+0xc>)
 8009778:	f000 f8d1 	bl	800991e <__retarget_lock_acquire_recursive>
 800977c:	bd10      	pop	{r4, pc}
 800977e:	46c0      	nop			; (mov r8, r8)
 8009780:	20001d6e 	.word	0x20001d6e

08009784 <__sinit_lock_release>:
 8009784:	b510      	push	{r4, lr}
 8009786:	4802      	ldr	r0, [pc, #8]	; (8009790 <__sinit_lock_release+0xc>)
 8009788:	f000 f8ca 	bl	8009920 <__retarget_lock_release_recursive>
 800978c:	bd10      	pop	{r4, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	20001d6e 	.word	0x20001d6e

08009794 <__sinit>:
 8009794:	b513      	push	{r0, r1, r4, lr}
 8009796:	0004      	movs	r4, r0
 8009798:	f7ff ffec 	bl	8009774 <__sinit_lock_acquire>
 800979c:	69a3      	ldr	r3, [r4, #24]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <__sinit+0x14>
 80097a2:	f7ff ffef 	bl	8009784 <__sinit_lock_release>
 80097a6:	bd13      	pop	{r0, r1, r4, pc}
 80097a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80097aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80097ac:	6523      	str	r3, [r4, #80]	; 0x50
 80097ae:	4b13      	ldr	r3, [pc, #76]	; (80097fc <__sinit+0x68>)
 80097b0:	4a13      	ldr	r2, [pc, #76]	; (8009800 <__sinit+0x6c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	d101      	bne.n	80097c0 <__sinit+0x2c>
 80097bc:	2301      	movs	r3, #1
 80097be:	61a3      	str	r3, [r4, #24]
 80097c0:	0020      	movs	r0, r4
 80097c2:	f000 f81f 	bl	8009804 <__sfp>
 80097c6:	6060      	str	r0, [r4, #4]
 80097c8:	0020      	movs	r0, r4
 80097ca:	f000 f81b 	bl	8009804 <__sfp>
 80097ce:	60a0      	str	r0, [r4, #8]
 80097d0:	0020      	movs	r0, r4
 80097d2:	f000 f817 	bl	8009804 <__sfp>
 80097d6:	2200      	movs	r2, #0
 80097d8:	2104      	movs	r1, #4
 80097da:	60e0      	str	r0, [r4, #12]
 80097dc:	6860      	ldr	r0, [r4, #4]
 80097de:	f7ff ff77 	bl	80096d0 <std>
 80097e2:	2201      	movs	r2, #1
 80097e4:	2109      	movs	r1, #9
 80097e6:	68a0      	ldr	r0, [r4, #8]
 80097e8:	f7ff ff72 	bl	80096d0 <std>
 80097ec:	2202      	movs	r2, #2
 80097ee:	2112      	movs	r1, #18
 80097f0:	68e0      	ldr	r0, [r4, #12]
 80097f2:	f7ff ff6d 	bl	80096d0 <std>
 80097f6:	2301      	movs	r3, #1
 80097f8:	61a3      	str	r3, [r4, #24]
 80097fa:	e7d2      	b.n	80097a2 <__sinit+0xe>
 80097fc:	0800c6d0 	.word	0x0800c6d0
 8009800:	08009719 	.word	0x08009719

08009804 <__sfp>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	0007      	movs	r7, r0
 8009808:	f7ff ffa4 	bl	8009754 <__sfp_lock_acquire>
 800980c:	4b1f      	ldr	r3, [pc, #124]	; (800988c <__sfp+0x88>)
 800980e:	681e      	ldr	r6, [r3, #0]
 8009810:	69b3      	ldr	r3, [r6, #24]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d102      	bne.n	800981c <__sfp+0x18>
 8009816:	0030      	movs	r0, r6
 8009818:	f7ff ffbc 	bl	8009794 <__sinit>
 800981c:	3648      	adds	r6, #72	; 0x48
 800981e:	68b4      	ldr	r4, [r6, #8]
 8009820:	6873      	ldr	r3, [r6, #4]
 8009822:	3b01      	subs	r3, #1
 8009824:	d504      	bpl.n	8009830 <__sfp+0x2c>
 8009826:	6833      	ldr	r3, [r6, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d022      	beq.n	8009872 <__sfp+0x6e>
 800982c:	6836      	ldr	r6, [r6, #0]
 800982e:	e7f6      	b.n	800981e <__sfp+0x1a>
 8009830:	220c      	movs	r2, #12
 8009832:	5ea5      	ldrsh	r5, [r4, r2]
 8009834:	2d00      	cmp	r5, #0
 8009836:	d11a      	bne.n	800986e <__sfp+0x6a>
 8009838:	0020      	movs	r0, r4
 800983a:	4b15      	ldr	r3, [pc, #84]	; (8009890 <__sfp+0x8c>)
 800983c:	3058      	adds	r0, #88	; 0x58
 800983e:	60e3      	str	r3, [r4, #12]
 8009840:	6665      	str	r5, [r4, #100]	; 0x64
 8009842:	f000 f86b 	bl	800991c <__retarget_lock_init_recursive>
 8009846:	f7ff ff8d 	bl	8009764 <__sfp_lock_release>
 800984a:	0020      	movs	r0, r4
 800984c:	2208      	movs	r2, #8
 800984e:	0029      	movs	r1, r5
 8009850:	6025      	str	r5, [r4, #0]
 8009852:	60a5      	str	r5, [r4, #8]
 8009854:	6065      	str	r5, [r4, #4]
 8009856:	6125      	str	r5, [r4, #16]
 8009858:	6165      	str	r5, [r4, #20]
 800985a:	61a5      	str	r5, [r4, #24]
 800985c:	305c      	adds	r0, #92	; 0x5c
 800985e:	f000 f869 	bl	8009934 <memset>
 8009862:	6365      	str	r5, [r4, #52]	; 0x34
 8009864:	63a5      	str	r5, [r4, #56]	; 0x38
 8009866:	64a5      	str	r5, [r4, #72]	; 0x48
 8009868:	64e5      	str	r5, [r4, #76]	; 0x4c
 800986a:	0020      	movs	r0, r4
 800986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800986e:	3468      	adds	r4, #104	; 0x68
 8009870:	e7d7      	b.n	8009822 <__sfp+0x1e>
 8009872:	2104      	movs	r1, #4
 8009874:	0038      	movs	r0, r7
 8009876:	f7ff ff57 	bl	8009728 <__sfmoreglue>
 800987a:	1e04      	subs	r4, r0, #0
 800987c:	6030      	str	r0, [r6, #0]
 800987e:	d1d5      	bne.n	800982c <__sfp+0x28>
 8009880:	f7ff ff70 	bl	8009764 <__sfp_lock_release>
 8009884:	230c      	movs	r3, #12
 8009886:	603b      	str	r3, [r7, #0]
 8009888:	e7ef      	b.n	800986a <__sfp+0x66>
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	0800c6d0 	.word	0x0800c6d0
 8009890:	ffff0001 	.word	0xffff0001

08009894 <_fwalk_reent>:
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009896:	0004      	movs	r4, r0
 8009898:	0006      	movs	r6, r0
 800989a:	2700      	movs	r7, #0
 800989c:	9101      	str	r1, [sp, #4]
 800989e:	3448      	adds	r4, #72	; 0x48
 80098a0:	6863      	ldr	r3, [r4, #4]
 80098a2:	68a5      	ldr	r5, [r4, #8]
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	9b00      	ldr	r3, [sp, #0]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	d504      	bpl.n	80098b8 <_fwalk_reent+0x24>
 80098ae:	6824      	ldr	r4, [r4, #0]
 80098b0:	2c00      	cmp	r4, #0
 80098b2:	d1f5      	bne.n	80098a0 <_fwalk_reent+0xc>
 80098b4:	0038      	movs	r0, r7
 80098b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098b8:	89ab      	ldrh	r3, [r5, #12]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d908      	bls.n	80098d0 <_fwalk_reent+0x3c>
 80098be:	220e      	movs	r2, #14
 80098c0:	5eab      	ldrsh	r3, [r5, r2]
 80098c2:	3301      	adds	r3, #1
 80098c4:	d004      	beq.n	80098d0 <_fwalk_reent+0x3c>
 80098c6:	0029      	movs	r1, r5
 80098c8:	0030      	movs	r0, r6
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	4798      	blx	r3
 80098ce:	4307      	orrs	r7, r0
 80098d0:	3568      	adds	r5, #104	; 0x68
 80098d2:	e7e8      	b.n	80098a6 <_fwalk_reent+0x12>

080098d4 <__libc_init_array>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	2600      	movs	r6, #0
 80098d8:	4d0c      	ldr	r5, [pc, #48]	; (800990c <__libc_init_array+0x38>)
 80098da:	4c0d      	ldr	r4, [pc, #52]	; (8009910 <__libc_init_array+0x3c>)
 80098dc:	1b64      	subs	r4, r4, r5
 80098de:	10a4      	asrs	r4, r4, #2
 80098e0:	42a6      	cmp	r6, r4
 80098e2:	d109      	bne.n	80098f8 <__libc_init_array+0x24>
 80098e4:	2600      	movs	r6, #0
 80098e6:	f002 fd61 	bl	800c3ac <_init>
 80098ea:	4d0a      	ldr	r5, [pc, #40]	; (8009914 <__libc_init_array+0x40>)
 80098ec:	4c0a      	ldr	r4, [pc, #40]	; (8009918 <__libc_init_array+0x44>)
 80098ee:	1b64      	subs	r4, r4, r5
 80098f0:	10a4      	asrs	r4, r4, #2
 80098f2:	42a6      	cmp	r6, r4
 80098f4:	d105      	bne.n	8009902 <__libc_init_array+0x2e>
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	00b3      	lsls	r3, r6, #2
 80098fa:	58eb      	ldr	r3, [r5, r3]
 80098fc:	4798      	blx	r3
 80098fe:	3601      	adds	r6, #1
 8009900:	e7ee      	b.n	80098e0 <__libc_init_array+0xc>
 8009902:	00b3      	lsls	r3, r6, #2
 8009904:	58eb      	ldr	r3, [r5, r3]
 8009906:	4798      	blx	r3
 8009908:	3601      	adds	r6, #1
 800990a:	e7f2      	b.n	80098f2 <__libc_init_array+0x1e>
 800990c:	0800ca54 	.word	0x0800ca54
 8009910:	0800ca54 	.word	0x0800ca54
 8009914:	0800ca54 	.word	0x0800ca54
 8009918:	0800ca58 	.word	0x0800ca58

0800991c <__retarget_lock_init_recursive>:
 800991c:	4770      	bx	lr

0800991e <__retarget_lock_acquire_recursive>:
 800991e:	4770      	bx	lr

08009920 <__retarget_lock_release_recursive>:
 8009920:	4770      	bx	lr

08009922 <memcpy>:
 8009922:	2300      	movs	r3, #0
 8009924:	b510      	push	{r4, lr}
 8009926:	429a      	cmp	r2, r3
 8009928:	d100      	bne.n	800992c <memcpy+0xa>
 800992a:	bd10      	pop	{r4, pc}
 800992c:	5ccc      	ldrb	r4, [r1, r3]
 800992e:	54c4      	strb	r4, [r0, r3]
 8009930:	3301      	adds	r3, #1
 8009932:	e7f8      	b.n	8009926 <memcpy+0x4>

08009934 <memset>:
 8009934:	0003      	movs	r3, r0
 8009936:	1882      	adds	r2, r0, r2
 8009938:	4293      	cmp	r3, r2
 800993a:	d100      	bne.n	800993e <memset+0xa>
 800993c:	4770      	bx	lr
 800993e:	7019      	strb	r1, [r3, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	e7f9      	b.n	8009938 <memset+0x4>

08009944 <sbrk_aligned>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	4e0f      	ldr	r6, [pc, #60]	; (8009984 <sbrk_aligned+0x40>)
 8009948:	000d      	movs	r5, r1
 800994a:	6831      	ldr	r1, [r6, #0]
 800994c:	0004      	movs	r4, r0
 800994e:	2900      	cmp	r1, #0
 8009950:	d102      	bne.n	8009958 <sbrk_aligned+0x14>
 8009952:	f000 fd71 	bl	800a438 <_sbrk_r>
 8009956:	6030      	str	r0, [r6, #0]
 8009958:	0029      	movs	r1, r5
 800995a:	0020      	movs	r0, r4
 800995c:	f000 fd6c 	bl	800a438 <_sbrk_r>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d00a      	beq.n	800997a <sbrk_aligned+0x36>
 8009964:	2303      	movs	r3, #3
 8009966:	1cc5      	adds	r5, r0, #3
 8009968:	439d      	bics	r5, r3
 800996a:	42a8      	cmp	r0, r5
 800996c:	d007      	beq.n	800997e <sbrk_aligned+0x3a>
 800996e:	1a29      	subs	r1, r5, r0
 8009970:	0020      	movs	r0, r4
 8009972:	f000 fd61 	bl	800a438 <_sbrk_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d101      	bne.n	800997e <sbrk_aligned+0x3a>
 800997a:	2501      	movs	r5, #1
 800997c:	426d      	negs	r5, r5
 800997e:	0028      	movs	r0, r5
 8009980:	bd70      	pop	{r4, r5, r6, pc}
 8009982:	46c0      	nop			; (mov r8, r8)
 8009984:	20001d74 	.word	0x20001d74

08009988 <_malloc_r>:
 8009988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800998a:	2203      	movs	r2, #3
 800998c:	1ccb      	adds	r3, r1, #3
 800998e:	4393      	bics	r3, r2
 8009990:	3308      	adds	r3, #8
 8009992:	0006      	movs	r6, r0
 8009994:	001f      	movs	r7, r3
 8009996:	2b0c      	cmp	r3, #12
 8009998:	d232      	bcs.n	8009a00 <_malloc_r+0x78>
 800999a:	270c      	movs	r7, #12
 800999c:	42b9      	cmp	r1, r7
 800999e:	d831      	bhi.n	8009a04 <_malloc_r+0x7c>
 80099a0:	0030      	movs	r0, r6
 80099a2:	f001 fd6d 	bl	800b480 <__malloc_lock>
 80099a6:	4d32      	ldr	r5, [pc, #200]	; (8009a70 <_malloc_r+0xe8>)
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	001c      	movs	r4, r3
 80099ac:	2c00      	cmp	r4, #0
 80099ae:	d12e      	bne.n	8009a0e <_malloc_r+0x86>
 80099b0:	0039      	movs	r1, r7
 80099b2:	0030      	movs	r0, r6
 80099b4:	f7ff ffc6 	bl	8009944 <sbrk_aligned>
 80099b8:	0004      	movs	r4, r0
 80099ba:	1c43      	adds	r3, r0, #1
 80099bc:	d11e      	bne.n	80099fc <_malloc_r+0x74>
 80099be:	682c      	ldr	r4, [r5, #0]
 80099c0:	0025      	movs	r5, r4
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	d14a      	bne.n	8009a5c <_malloc_r+0xd4>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	0029      	movs	r1, r5
 80099ca:	18e3      	adds	r3, r4, r3
 80099cc:	0030      	movs	r0, r6
 80099ce:	9301      	str	r3, [sp, #4]
 80099d0:	f000 fd32 	bl	800a438 <_sbrk_r>
 80099d4:	9b01      	ldr	r3, [sp, #4]
 80099d6:	4283      	cmp	r3, r0
 80099d8:	d143      	bne.n	8009a62 <_malloc_r+0xda>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	3703      	adds	r7, #3
 80099de:	1aff      	subs	r7, r7, r3
 80099e0:	2303      	movs	r3, #3
 80099e2:	439f      	bics	r7, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	2f0c      	cmp	r7, #12
 80099e8:	d200      	bcs.n	80099ec <_malloc_r+0x64>
 80099ea:	270c      	movs	r7, #12
 80099ec:	0039      	movs	r1, r7
 80099ee:	0030      	movs	r0, r6
 80099f0:	f7ff ffa8 	bl	8009944 <sbrk_aligned>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d034      	beq.n	8009a62 <_malloc_r+0xda>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	19df      	adds	r7, r3, r7
 80099fc:	6027      	str	r7, [r4, #0]
 80099fe:	e013      	b.n	8009a28 <_malloc_r+0xa0>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dacb      	bge.n	800999c <_malloc_r+0x14>
 8009a04:	230c      	movs	r3, #12
 8009a06:	2500      	movs	r5, #0
 8009a08:	6033      	str	r3, [r6, #0]
 8009a0a:	0028      	movs	r0, r5
 8009a0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	1bd1      	subs	r1, r2, r7
 8009a12:	d420      	bmi.n	8009a56 <_malloc_r+0xce>
 8009a14:	290b      	cmp	r1, #11
 8009a16:	d917      	bls.n	8009a48 <_malloc_r+0xc0>
 8009a18:	19e2      	adds	r2, r4, r7
 8009a1a:	6027      	str	r7, [r4, #0]
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d111      	bne.n	8009a44 <_malloc_r+0xbc>
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	6011      	str	r1, [r2, #0]
 8009a26:	6053      	str	r3, [r2, #4]
 8009a28:	0030      	movs	r0, r6
 8009a2a:	0025      	movs	r5, r4
 8009a2c:	f001 fd30 	bl	800b490 <__malloc_unlock>
 8009a30:	2207      	movs	r2, #7
 8009a32:	350b      	adds	r5, #11
 8009a34:	1d23      	adds	r3, r4, #4
 8009a36:	4395      	bics	r5, r2
 8009a38:	1aea      	subs	r2, r5, r3
 8009a3a:	429d      	cmp	r5, r3
 8009a3c:	d0e5      	beq.n	8009a0a <_malloc_r+0x82>
 8009a3e:	1b5b      	subs	r3, r3, r5
 8009a40:	50a3      	str	r3, [r4, r2]
 8009a42:	e7e2      	b.n	8009a0a <_malloc_r+0x82>
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	e7ec      	b.n	8009a22 <_malloc_r+0x9a>
 8009a48:	6862      	ldr	r2, [r4, #4]
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	d101      	bne.n	8009a52 <_malloc_r+0xca>
 8009a4e:	602a      	str	r2, [r5, #0]
 8009a50:	e7ea      	b.n	8009a28 <_malloc_r+0xa0>
 8009a52:	605a      	str	r2, [r3, #4]
 8009a54:	e7e8      	b.n	8009a28 <_malloc_r+0xa0>
 8009a56:	0023      	movs	r3, r4
 8009a58:	6864      	ldr	r4, [r4, #4]
 8009a5a:	e7a7      	b.n	80099ac <_malloc_r+0x24>
 8009a5c:	002c      	movs	r4, r5
 8009a5e:	686d      	ldr	r5, [r5, #4]
 8009a60:	e7af      	b.n	80099c2 <_malloc_r+0x3a>
 8009a62:	230c      	movs	r3, #12
 8009a64:	0030      	movs	r0, r6
 8009a66:	6033      	str	r3, [r6, #0]
 8009a68:	f001 fd12 	bl	800b490 <__malloc_unlock>
 8009a6c:	e7cd      	b.n	8009a0a <_malloc_r+0x82>
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	20001d70 	.word	0x20001d70

08009a74 <__cvt>:
 8009a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a76:	001e      	movs	r6, r3
 8009a78:	2300      	movs	r3, #0
 8009a7a:	0014      	movs	r4, r2
 8009a7c:	b08b      	sub	sp, #44	; 0x2c
 8009a7e:	429e      	cmp	r6, r3
 8009a80:	da04      	bge.n	8009a8c <__cvt+0x18>
 8009a82:	2180      	movs	r1, #128	; 0x80
 8009a84:	0609      	lsls	r1, r1, #24
 8009a86:	1873      	adds	r3, r6, r1
 8009a88:	001e      	movs	r6, r3
 8009a8a:	232d      	movs	r3, #45	; 0x2d
 8009a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a90:	7013      	strb	r3, [r2, #0]
 8009a92:	2320      	movs	r3, #32
 8009a94:	2203      	movs	r2, #3
 8009a96:	439f      	bics	r7, r3
 8009a98:	2f46      	cmp	r7, #70	; 0x46
 8009a9a:	d007      	beq.n	8009aac <__cvt+0x38>
 8009a9c:	003b      	movs	r3, r7
 8009a9e:	3b45      	subs	r3, #69	; 0x45
 8009aa0:	4259      	negs	r1, r3
 8009aa2:	414b      	adcs	r3, r1
 8009aa4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009aa6:	3a01      	subs	r2, #1
 8009aa8:	18cb      	adds	r3, r1, r3
 8009aaa:	9310      	str	r3, [sp, #64]	; 0x40
 8009aac:	ab09      	add	r3, sp, #36	; 0x24
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	ab08      	add	r3, sp, #32
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ab6:	9200      	str	r2, [sp, #0]
 8009ab8:	9302      	str	r3, [sp, #8]
 8009aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009abc:	0022      	movs	r2, r4
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	0033      	movs	r3, r6
 8009ac2:	f000 fdc9 	bl	800a658 <_dtoa_r>
 8009ac6:	0005      	movs	r5, r0
 8009ac8:	2f47      	cmp	r7, #71	; 0x47
 8009aca:	d102      	bne.n	8009ad2 <__cvt+0x5e>
 8009acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ace:	07db      	lsls	r3, r3, #31
 8009ad0:	d528      	bpl.n	8009b24 <__cvt+0xb0>
 8009ad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ad4:	18eb      	adds	r3, r5, r3
 8009ad6:	9307      	str	r3, [sp, #28]
 8009ad8:	2f46      	cmp	r7, #70	; 0x46
 8009ada:	d114      	bne.n	8009b06 <__cvt+0x92>
 8009adc:	782b      	ldrb	r3, [r5, #0]
 8009ade:	2b30      	cmp	r3, #48	; 0x30
 8009ae0:	d10c      	bne.n	8009afc <__cvt+0x88>
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	0020      	movs	r0, r4
 8009ae8:	0031      	movs	r1, r6
 8009aea:	f7f6 fcaf 	bl	800044c <__aeabi_dcmpeq>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d104      	bne.n	8009afc <__cvt+0x88>
 8009af2:	2301      	movs	r3, #1
 8009af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009afe:	9a07      	ldr	r2, [sp, #28]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	18d3      	adds	r3, r2, r3
 8009b04:	9307      	str	r3, [sp, #28]
 8009b06:	2200      	movs	r2, #0
 8009b08:	2300      	movs	r3, #0
 8009b0a:	0020      	movs	r0, r4
 8009b0c:	0031      	movs	r1, r6
 8009b0e:	f7f6 fc9d 	bl	800044c <__aeabi_dcmpeq>
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d001      	beq.n	8009b1a <__cvt+0xa6>
 8009b16:	9b07      	ldr	r3, [sp, #28]
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1a:	2230      	movs	r2, #48	; 0x30
 8009b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1e:	9907      	ldr	r1, [sp, #28]
 8009b20:	428b      	cmp	r3, r1
 8009b22:	d306      	bcc.n	8009b32 <__cvt+0xbe>
 8009b24:	0028      	movs	r0, r5
 8009b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b2a:	1b5b      	subs	r3, r3, r5
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	b00b      	add	sp, #44	; 0x2c
 8009b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b32:	1c59      	adds	r1, r3, #1
 8009b34:	9109      	str	r1, [sp, #36]	; 0x24
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e7f0      	b.n	8009b1c <__cvt+0xa8>

08009b3a <__exponent>:
 8009b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b3c:	1c83      	adds	r3, r0, #2
 8009b3e:	b087      	sub	sp, #28
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	0005      	movs	r5, r0
 8009b44:	000c      	movs	r4, r1
 8009b46:	232b      	movs	r3, #43	; 0x2b
 8009b48:	7002      	strb	r2, [r0, #0]
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	da01      	bge.n	8009b52 <__exponent+0x18>
 8009b4e:	424c      	negs	r4, r1
 8009b50:	3302      	adds	r3, #2
 8009b52:	706b      	strb	r3, [r5, #1]
 8009b54:	2c09      	cmp	r4, #9
 8009b56:	dd31      	ble.n	8009bbc <__exponent+0x82>
 8009b58:	270a      	movs	r7, #10
 8009b5a:	ab04      	add	r3, sp, #16
 8009b5c:	1dde      	adds	r6, r3, #7
 8009b5e:	0020      	movs	r0, r4
 8009b60:	0039      	movs	r1, r7
 8009b62:	9601      	str	r6, [sp, #4]
 8009b64:	f7f6 fc5c 	bl	8000420 <__aeabi_idivmod>
 8009b68:	3e01      	subs	r6, #1
 8009b6a:	3130      	adds	r1, #48	; 0x30
 8009b6c:	0020      	movs	r0, r4
 8009b6e:	7031      	strb	r1, [r6, #0]
 8009b70:	0039      	movs	r1, r7
 8009b72:	9402      	str	r4, [sp, #8]
 8009b74:	f7f6 fb6e 	bl	8000254 <__divsi3>
 8009b78:	9b02      	ldr	r3, [sp, #8]
 8009b7a:	0004      	movs	r4, r0
 8009b7c:	2b63      	cmp	r3, #99	; 0x63
 8009b7e:	dcee      	bgt.n	8009b5e <__exponent+0x24>
 8009b80:	9b01      	ldr	r3, [sp, #4]
 8009b82:	3430      	adds	r4, #48	; 0x30
 8009b84:	1e9a      	subs	r2, r3, #2
 8009b86:	0013      	movs	r3, r2
 8009b88:	9903      	ldr	r1, [sp, #12]
 8009b8a:	7014      	strb	r4, [r2, #0]
 8009b8c:	a804      	add	r0, sp, #16
 8009b8e:	3007      	adds	r0, #7
 8009b90:	4298      	cmp	r0, r3
 8009b92:	d80e      	bhi.n	8009bb2 <__exponent+0x78>
 8009b94:	ab04      	add	r3, sp, #16
 8009b96:	3307      	adds	r3, #7
 8009b98:	2000      	movs	r0, #0
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d804      	bhi.n	8009ba8 <__exponent+0x6e>
 8009b9e:	ab04      	add	r3, sp, #16
 8009ba0:	3009      	adds	r0, #9
 8009ba2:	18c0      	adds	r0, r0, r3
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	1ac0      	subs	r0, r0, r3
 8009ba8:	9b03      	ldr	r3, [sp, #12]
 8009baa:	1818      	adds	r0, r3, r0
 8009bac:	1b40      	subs	r0, r0, r5
 8009bae:	b007      	add	sp, #28
 8009bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb2:	7818      	ldrb	r0, [r3, #0]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	7008      	strb	r0, [r1, #0]
 8009bb8:	3101      	adds	r1, #1
 8009bba:	e7e7      	b.n	8009b8c <__exponent+0x52>
 8009bbc:	2330      	movs	r3, #48	; 0x30
 8009bbe:	18e4      	adds	r4, r4, r3
 8009bc0:	70ab      	strb	r3, [r5, #2]
 8009bc2:	1d28      	adds	r0, r5, #4
 8009bc4:	70ec      	strb	r4, [r5, #3]
 8009bc6:	e7f1      	b.n	8009bac <__exponent+0x72>

08009bc8 <_printf_float>:
 8009bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bca:	b095      	sub	sp, #84	; 0x54
 8009bcc:	000c      	movs	r4, r1
 8009bce:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd0:	001e      	movs	r6, r3
 8009bd2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009bd4:	0007      	movs	r7, r0
 8009bd6:	f001 fc25 	bl	800b424 <_localeconv_r>
 8009bda:	6803      	ldr	r3, [r0, #0]
 8009bdc:	0018      	movs	r0, r3
 8009bde:	930c      	str	r3, [sp, #48]	; 0x30
 8009be0:	f7f6 fa92 	bl	8000108 <strlen>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9312      	str	r3, [sp, #72]	; 0x48
 8009be8:	7e23      	ldrb	r3, [r4, #24]
 8009bea:	2207      	movs	r2, #7
 8009bec:	930a      	str	r3, [sp, #40]	; 0x28
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	900e      	str	r0, [sp, #56]	; 0x38
 8009bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	05c9      	lsls	r1, r1, #23
 8009bfa:	d547      	bpl.n	8009c8c <_printf_float+0xc4>
 8009bfc:	189b      	adds	r3, r3, r2
 8009bfe:	4393      	bics	r3, r2
 8009c00:	001a      	movs	r2, r3
 8009c02:	3208      	adds	r2, #8
 8009c04:	602a      	str	r2, [r5, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	64a2      	str	r2, [r4, #72]	; 0x48
 8009c0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009c0e:	2201      	movs	r2, #1
 8009c10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009c12:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009c14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c16:	006b      	lsls	r3, r5, #1
 8009c18:	085b      	lsrs	r3, r3, #1
 8009c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c1e:	4ba7      	ldr	r3, [pc, #668]	; (8009ebc <_printf_float+0x2f4>)
 8009c20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c22:	4252      	negs	r2, r2
 8009c24:	f7f8 fa68 	bl	80020f8 <__aeabi_dcmpun>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d131      	bne.n	8009c90 <_printf_float+0xc8>
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	4ba3      	ldr	r3, [pc, #652]	; (8009ebc <_printf_float+0x2f4>)
 8009c30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c34:	4252      	negs	r2, r2
 8009c36:	f7f6 fc19 	bl	800046c <__aeabi_dcmple>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d128      	bne.n	8009c90 <_printf_float+0xc8>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2300      	movs	r3, #0
 8009c42:	0029      	movs	r1, r5
 8009c44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009c46:	f7f6 fc07 	bl	8000458 <__aeabi_dcmplt>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d003      	beq.n	8009c56 <_printf_float+0x8e>
 8009c4e:	0023      	movs	r3, r4
 8009c50:	222d      	movs	r2, #45	; 0x2d
 8009c52:	3343      	adds	r3, #67	; 0x43
 8009c54:	701a      	strb	r2, [r3, #0]
 8009c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c58:	4d99      	ldr	r5, [pc, #612]	; (8009ec0 <_printf_float+0x2f8>)
 8009c5a:	2b47      	cmp	r3, #71	; 0x47
 8009c5c:	d900      	bls.n	8009c60 <_printf_float+0x98>
 8009c5e:	4d99      	ldr	r5, [pc, #612]	; (8009ec4 <_printf_float+0x2fc>)
 8009c60:	2303      	movs	r3, #3
 8009c62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	3301      	adds	r3, #1
 8009c68:	439a      	bics	r2, r3
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	6022      	str	r2, [r4, #0]
 8009c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c72:	0021      	movs	r1, r4
 8009c74:	0038      	movs	r0, r7
 8009c76:	9600      	str	r6, [sp, #0]
 8009c78:	aa13      	add	r2, sp, #76	; 0x4c
 8009c7a:	f000 f9e7 	bl	800a04c <_printf_common>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d000      	beq.n	8009c84 <_printf_float+0xbc>
 8009c82:	e0a2      	b.n	8009dca <_printf_float+0x202>
 8009c84:	2001      	movs	r0, #1
 8009c86:	4240      	negs	r0, r0
 8009c88:	b015      	add	sp, #84	; 0x54
 8009c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8c:	3307      	adds	r3, #7
 8009c8e:	e7b6      	b.n	8009bfe <_printf_float+0x36>
 8009c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c92:	002b      	movs	r3, r5
 8009c94:	0010      	movs	r0, r2
 8009c96:	0029      	movs	r1, r5
 8009c98:	f7f8 fa2e 	bl	80020f8 <__aeabi_dcmpun>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d00b      	beq.n	8009cb8 <_printf_float+0xf0>
 8009ca0:	2d00      	cmp	r5, #0
 8009ca2:	da03      	bge.n	8009cac <_printf_float+0xe4>
 8009ca4:	0023      	movs	r3, r4
 8009ca6:	222d      	movs	r2, #45	; 0x2d
 8009ca8:	3343      	adds	r3, #67	; 0x43
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cae:	4d86      	ldr	r5, [pc, #536]	; (8009ec8 <_printf_float+0x300>)
 8009cb0:	2b47      	cmp	r3, #71	; 0x47
 8009cb2:	d9d5      	bls.n	8009c60 <_printf_float+0x98>
 8009cb4:	4d85      	ldr	r5, [pc, #532]	; (8009ecc <_printf_float+0x304>)
 8009cb6:	e7d3      	b.n	8009c60 <_printf_float+0x98>
 8009cb8:	2220      	movs	r2, #32
 8009cba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	4391      	bics	r1, r2
 8009cc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	d149      	bne.n	8009d5a <_printf_float+0x192>
 8009cc6:	3307      	adds	r3, #7
 8009cc8:	6063      	str	r3, [r4, #4]
 8009cca:	2380      	movs	r3, #128	; 0x80
 8009ccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	9206      	str	r2, [sp, #24]
 8009cd6:	aa12      	add	r2, sp, #72	; 0x48
 8009cd8:	9205      	str	r2, [sp, #20]
 8009cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cdc:	a908      	add	r1, sp, #32
 8009cde:	9204      	str	r2, [sp, #16]
 8009ce0:	aa11      	add	r2, sp, #68	; 0x44
 8009ce2:	9203      	str	r2, [sp, #12]
 8009ce4:	2223      	movs	r2, #35	; 0x23
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	6863      	ldr	r3, [r4, #4]
 8009cec:	1852      	adds	r2, r2, r1
 8009cee:	9202      	str	r2, [sp, #8]
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	0038      	movs	r0, r7
 8009cf4:	002b      	movs	r3, r5
 8009cf6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cf8:	f7ff febc 	bl	8009a74 <__cvt>
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cfe:	0005      	movs	r5, r0
 8009d00:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d02:	2b47      	cmp	r3, #71	; 0x47
 8009d04:	d108      	bne.n	8009d18 <_printf_float+0x150>
 8009d06:	1ccb      	adds	r3, r1, #3
 8009d08:	db02      	blt.n	8009d10 <_printf_float+0x148>
 8009d0a:	6863      	ldr	r3, [r4, #4]
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	dd48      	ble.n	8009da2 <_printf_float+0x1da>
 8009d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d12:	3b02      	subs	r3, #2
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	930a      	str	r3, [sp, #40]	; 0x28
 8009d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1a:	2b65      	cmp	r3, #101	; 0x65
 8009d1c:	d824      	bhi.n	8009d68 <_printf_float+0x1a0>
 8009d1e:	0020      	movs	r0, r4
 8009d20:	001a      	movs	r2, r3
 8009d22:	3901      	subs	r1, #1
 8009d24:	3050      	adds	r0, #80	; 0x50
 8009d26:	9111      	str	r1, [sp, #68]	; 0x44
 8009d28:	f7ff ff07 	bl	8009b3a <__exponent>
 8009d2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d2e:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d30:	1813      	adds	r3, r2, r0
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2a01      	cmp	r2, #1
 8009d36:	dc02      	bgt.n	8009d3e <_printf_float+0x176>
 8009d38:	6822      	ldr	r2, [r4, #0]
 8009d3a:	07d2      	lsls	r2, r2, #31
 8009d3c:	d501      	bpl.n	8009d42 <_printf_float+0x17a>
 8009d3e:	3301      	adds	r3, #1
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	2323      	movs	r3, #35	; 0x23
 8009d44:	aa08      	add	r2, sp, #32
 8009d46:	189b      	adds	r3, r3, r2
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d100      	bne.n	8009d50 <_printf_float+0x188>
 8009d4e:	e78f      	b.n	8009c70 <_printf_float+0xa8>
 8009d50:	0023      	movs	r3, r4
 8009d52:	222d      	movs	r2, #45	; 0x2d
 8009d54:	3343      	adds	r3, #67	; 0x43
 8009d56:	701a      	strb	r2, [r3, #0]
 8009d58:	e78a      	b.n	8009c70 <_printf_float+0xa8>
 8009d5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d5c:	2a47      	cmp	r2, #71	; 0x47
 8009d5e:	d1b4      	bne.n	8009cca <_printf_float+0x102>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1b2      	bne.n	8009cca <_printf_float+0x102>
 8009d64:	3301      	adds	r3, #1
 8009d66:	e7af      	b.n	8009cc8 <_printf_float+0x100>
 8009d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6a:	2b66      	cmp	r3, #102	; 0x66
 8009d6c:	d11b      	bne.n	8009da6 <_printf_float+0x1de>
 8009d6e:	6863      	ldr	r3, [r4, #4]
 8009d70:	2900      	cmp	r1, #0
 8009d72:	dd0d      	ble.n	8009d90 <_printf_float+0x1c8>
 8009d74:	6121      	str	r1, [r4, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <_printf_float+0x1b8>
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	07d2      	lsls	r2, r2, #31
 8009d7e:	d502      	bpl.n	8009d86 <_printf_float+0x1be>
 8009d80:	3301      	adds	r3, #1
 8009d82:	1859      	adds	r1, r3, r1
 8009d84:	6121      	str	r1, [r4, #16]
 8009d86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d88:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8e:	e7d8      	b.n	8009d42 <_printf_float+0x17a>
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <_printf_float+0x1d4>
 8009d94:	2201      	movs	r2, #1
 8009d96:	6821      	ldr	r1, [r4, #0]
 8009d98:	4211      	tst	r1, r2
 8009d9a:	d000      	beq.n	8009d9e <_printf_float+0x1d6>
 8009d9c:	1c9a      	adds	r2, r3, #2
 8009d9e:	6122      	str	r2, [r4, #16]
 8009da0:	e7f1      	b.n	8009d86 <_printf_float+0x1be>
 8009da2:	2367      	movs	r3, #103	; 0x67
 8009da4:	930a      	str	r3, [sp, #40]	; 0x28
 8009da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009da8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009daa:	4293      	cmp	r3, r2
 8009dac:	db06      	blt.n	8009dbc <_printf_float+0x1f4>
 8009dae:	6822      	ldr	r2, [r4, #0]
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	07d2      	lsls	r2, r2, #31
 8009db4:	d5e7      	bpl.n	8009d86 <_printf_float+0x1be>
 8009db6:	3301      	adds	r3, #1
 8009db8:	6123      	str	r3, [r4, #16]
 8009dba:	e7e4      	b.n	8009d86 <_printf_float+0x1be>
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dc01      	bgt.n	8009dc6 <_printf_float+0x1fe>
 8009dc2:	1849      	adds	r1, r1, r1
 8009dc4:	1ac9      	subs	r1, r1, r3
 8009dc6:	1852      	adds	r2, r2, r1
 8009dc8:	e7e9      	b.n	8009d9e <_printf_float+0x1d6>
 8009dca:	6822      	ldr	r2, [r4, #0]
 8009dcc:	0553      	lsls	r3, r2, #21
 8009dce:	d407      	bmi.n	8009de0 <_printf_float+0x218>
 8009dd0:	6923      	ldr	r3, [r4, #16]
 8009dd2:	002a      	movs	r2, r5
 8009dd4:	0038      	movs	r0, r7
 8009dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd8:	47b0      	blx	r6
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d128      	bne.n	8009e30 <_printf_float+0x268>
 8009dde:	e751      	b.n	8009c84 <_printf_float+0xbc>
 8009de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009de2:	2b65      	cmp	r3, #101	; 0x65
 8009de4:	d800      	bhi.n	8009de8 <_printf_float+0x220>
 8009de6:	e0e1      	b.n	8009fac <_printf_float+0x3e4>
 8009de8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009dea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009dec:	2200      	movs	r2, #0
 8009dee:	2300      	movs	r3, #0
 8009df0:	f7f6 fb2c 	bl	800044c <__aeabi_dcmpeq>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d031      	beq.n	8009e5c <_printf_float+0x294>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	0038      	movs	r0, r7
 8009dfc:	4a34      	ldr	r2, [pc, #208]	; (8009ed0 <_printf_float+0x308>)
 8009dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e00:	47b0      	blx	r6
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d100      	bne.n	8009e08 <_printf_float+0x240>
 8009e06:	e73d      	b.n	8009c84 <_printf_float+0xbc>
 8009e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	db02      	blt.n	8009e16 <_printf_float+0x24e>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	07db      	lsls	r3, r3, #31
 8009e14:	d50c      	bpl.n	8009e30 <_printf_float+0x268>
 8009e16:	0038      	movs	r0, r7
 8009e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e1e:	47b0      	blx	r6
 8009e20:	2500      	movs	r5, #0
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d100      	bne.n	8009e28 <_printf_float+0x260>
 8009e26:	e72d      	b.n	8009c84 <_printf_float+0xbc>
 8009e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dc0a      	bgt.n	8009e46 <_printf_float+0x27e>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	079b      	lsls	r3, r3, #30
 8009e34:	d500      	bpl.n	8009e38 <_printf_float+0x270>
 8009e36:	e106      	b.n	800a046 <_printf_float+0x47e>
 8009e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e3a:	68e0      	ldr	r0, [r4, #12]
 8009e3c:	4298      	cmp	r0, r3
 8009e3e:	db00      	blt.n	8009e42 <_printf_float+0x27a>
 8009e40:	e722      	b.n	8009c88 <_printf_float+0xc0>
 8009e42:	0018      	movs	r0, r3
 8009e44:	e720      	b.n	8009c88 <_printf_float+0xc0>
 8009e46:	0022      	movs	r2, r4
 8009e48:	2301      	movs	r3, #1
 8009e4a:	0038      	movs	r0, r7
 8009e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e4e:	321a      	adds	r2, #26
 8009e50:	47b0      	blx	r6
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d100      	bne.n	8009e58 <_printf_float+0x290>
 8009e56:	e715      	b.n	8009c84 <_printf_float+0xbc>
 8009e58:	3501      	adds	r5, #1
 8009e5a:	e7e5      	b.n	8009e28 <_printf_float+0x260>
 8009e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dc38      	bgt.n	8009ed4 <_printf_float+0x30c>
 8009e62:	2301      	movs	r3, #1
 8009e64:	0038      	movs	r0, r7
 8009e66:	4a1a      	ldr	r2, [pc, #104]	; (8009ed0 <_printf_float+0x308>)
 8009e68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e6a:	47b0      	blx	r6
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d100      	bne.n	8009e72 <_printf_float+0x2aa>
 8009e70:	e708      	b.n	8009c84 <_printf_float+0xbc>
 8009e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e76:	4313      	orrs	r3, r2
 8009e78:	d102      	bne.n	8009e80 <_printf_float+0x2b8>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	07db      	lsls	r3, r3, #31
 8009e7e:	d5d7      	bpl.n	8009e30 <_printf_float+0x268>
 8009e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e82:	0038      	movs	r0, r7
 8009e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e88:	47b0      	blx	r6
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	d100      	bne.n	8009e90 <_printf_float+0x2c8>
 8009e8e:	e6f9      	b.n	8009c84 <_printf_float+0xbc>
 8009e90:	2300      	movs	r3, #0
 8009e92:	930a      	str	r3, [sp, #40]	; 0x28
 8009e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e98:	425b      	negs	r3, r3
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	dc01      	bgt.n	8009ea2 <_printf_float+0x2da>
 8009e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ea0:	e797      	b.n	8009dd2 <_printf_float+0x20a>
 8009ea2:	0022      	movs	r2, r4
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	0038      	movs	r0, r7
 8009ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eaa:	321a      	adds	r2, #26
 8009eac:	47b0      	blx	r6
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d100      	bne.n	8009eb4 <_printf_float+0x2ec>
 8009eb2:	e6e7      	b.n	8009c84 <_printf_float+0xbc>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	e7eb      	b.n	8009e92 <_printf_float+0x2ca>
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	7fefffff 	.word	0x7fefffff
 8009ec0:	0800c6d4 	.word	0x0800c6d4
 8009ec4:	0800c6d8 	.word	0x0800c6d8
 8009ec8:	0800c6dc 	.word	0x0800c6dc
 8009ecc:	0800c6e0 	.word	0x0800c6e0
 8009ed0:	0800c6e4 	.word	0x0800c6e4
 8009ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ed8:	920a      	str	r2, [sp, #40]	; 0x28
 8009eda:	429a      	cmp	r2, r3
 8009edc:	dd00      	ble.n	8009ee0 <_printf_float+0x318>
 8009ede:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dc3c      	bgt.n	8009f60 <_printf_float+0x398>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8009eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eec:	43db      	mvns	r3, r3
 8009eee:	17db      	asrs	r3, r3, #31
 8009ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ef4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	4013      	ands	r3, r2
 8009efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f02:	4293      	cmp	r3, r2
 8009f04:	dc34      	bgt.n	8009f70 <_printf_float+0x3a8>
 8009f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	db3d      	blt.n	8009f8a <_printf_float+0x3c2>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	07db      	lsls	r3, r3, #31
 8009f12:	d43a      	bmi.n	8009f8a <_printf_float+0x3c2>
 8009f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	1a52      	subs	r2, r2, r1
 8009f1e:	920a      	str	r2, [sp, #40]	; 0x28
 8009f20:	429a      	cmp	r2, r3
 8009f22:	dd00      	ble.n	8009f26 <_printf_float+0x35e>
 8009f24:	930a      	str	r3, [sp, #40]	; 0x28
 8009f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	dc36      	bgt.n	8009f9a <_printf_float+0x3d2>
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2e:	2500      	movs	r5, #0
 8009f30:	43db      	mvns	r3, r3
 8009f32:	17db      	asrs	r3, r3, #31
 8009f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f40:	400a      	ands	r2, r1
 8009f42:	1a9b      	subs	r3, r3, r2
 8009f44:	42ab      	cmp	r3, r5
 8009f46:	dc00      	bgt.n	8009f4a <_printf_float+0x382>
 8009f48:	e772      	b.n	8009e30 <_printf_float+0x268>
 8009f4a:	0022      	movs	r2, r4
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	0038      	movs	r0, r7
 8009f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f52:	321a      	adds	r2, #26
 8009f54:	47b0      	blx	r6
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d100      	bne.n	8009f5c <_printf_float+0x394>
 8009f5a:	e693      	b.n	8009c84 <_printf_float+0xbc>
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	e7ea      	b.n	8009f36 <_printf_float+0x36e>
 8009f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f62:	002a      	movs	r2, r5
 8009f64:	0038      	movs	r0, r7
 8009f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f68:	47b0      	blx	r6
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d1bb      	bne.n	8009ee6 <_printf_float+0x31e>
 8009f6e:	e689      	b.n	8009c84 <_printf_float+0xbc>
 8009f70:	0022      	movs	r2, r4
 8009f72:	2301      	movs	r3, #1
 8009f74:	0038      	movs	r0, r7
 8009f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f78:	321a      	adds	r2, #26
 8009f7a:	47b0      	blx	r6
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d100      	bne.n	8009f82 <_printf_float+0x3ba>
 8009f80:	e680      	b.n	8009c84 <_printf_float+0xbc>
 8009f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f84:	3301      	adds	r3, #1
 8009f86:	930d      	str	r3, [sp, #52]	; 0x34
 8009f88:	e7b3      	b.n	8009ef2 <_printf_float+0x32a>
 8009f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f8c:	0038      	movs	r0, r7
 8009f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f92:	47b0      	blx	r6
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d1bd      	bne.n	8009f14 <_printf_float+0x34c>
 8009f98:	e674      	b.n	8009c84 <_printf_float+0xbc>
 8009f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f9c:	0038      	movs	r0, r7
 8009f9e:	18ea      	adds	r2, r5, r3
 8009fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa4:	47b0      	blx	r6
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d1c0      	bne.n	8009f2c <_printf_float+0x364>
 8009faa:	e66b      	b.n	8009c84 <_printf_float+0xbc>
 8009fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	dc02      	bgt.n	8009fb8 <_printf_float+0x3f0>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	421a      	tst	r2, r3
 8009fb6:	d034      	beq.n	800a022 <_printf_float+0x45a>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	002a      	movs	r2, r5
 8009fbc:	0038      	movs	r0, r7
 8009fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fc0:	47b0      	blx	r6
 8009fc2:	1c43      	adds	r3, r0, #1
 8009fc4:	d100      	bne.n	8009fc8 <_printf_float+0x400>
 8009fc6:	e65d      	b.n	8009c84 <_printf_float+0xbc>
 8009fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fca:	0038      	movs	r0, r7
 8009fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fd0:	47b0      	blx	r6
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d100      	bne.n	8009fd8 <_printf_float+0x410>
 8009fd6:	e655      	b.n	8009c84 <_printf_float+0xbc>
 8009fd8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009fda:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f7f6 fa34 	bl	800044c <__aeabi_dcmpeq>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d11a      	bne.n	800a01e <_printf_float+0x456>
 8009fe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fea:	1c6a      	adds	r2, r5, #1
 8009fec:	3b01      	subs	r3, #1
 8009fee:	0038      	movs	r0, r7
 8009ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ff2:	47b0      	blx	r6
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d10e      	bne.n	800a016 <_printf_float+0x44e>
 8009ff8:	e644      	b.n	8009c84 <_printf_float+0xbc>
 8009ffa:	0022      	movs	r2, r4
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	0038      	movs	r0, r7
 800a000:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a002:	321a      	adds	r2, #26
 800a004:	47b0      	blx	r6
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d100      	bne.n	800a00c <_printf_float+0x444>
 800a00a:	e63b      	b.n	8009c84 <_printf_float+0xbc>
 800a00c:	3501      	adds	r5, #1
 800a00e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a010:	3b01      	subs	r3, #1
 800a012:	42ab      	cmp	r3, r5
 800a014:	dcf1      	bgt.n	8009ffa <_printf_float+0x432>
 800a016:	0022      	movs	r2, r4
 800a018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01a:	3250      	adds	r2, #80	; 0x50
 800a01c:	e6da      	b.n	8009dd4 <_printf_float+0x20c>
 800a01e:	2500      	movs	r5, #0
 800a020:	e7f5      	b.n	800a00e <_printf_float+0x446>
 800a022:	002a      	movs	r2, r5
 800a024:	e7e3      	b.n	8009fee <_printf_float+0x426>
 800a026:	0022      	movs	r2, r4
 800a028:	2301      	movs	r3, #1
 800a02a:	0038      	movs	r0, r7
 800a02c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a02e:	3219      	adds	r2, #25
 800a030:	47b0      	blx	r6
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	d100      	bne.n	800a038 <_printf_float+0x470>
 800a036:	e625      	b.n	8009c84 <_printf_float+0xbc>
 800a038:	3501      	adds	r5, #1
 800a03a:	68e3      	ldr	r3, [r4, #12]
 800a03c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	42ab      	cmp	r3, r5
 800a042:	dcf0      	bgt.n	800a026 <_printf_float+0x45e>
 800a044:	e6f8      	b.n	8009e38 <_printf_float+0x270>
 800a046:	2500      	movs	r5, #0
 800a048:	e7f7      	b.n	800a03a <_printf_float+0x472>
 800a04a:	46c0      	nop			; (mov r8, r8)

0800a04c <_printf_common>:
 800a04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a04e:	0015      	movs	r5, r2
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	688a      	ldr	r2, [r1, #8]
 800a054:	690b      	ldr	r3, [r1, #16]
 800a056:	000c      	movs	r4, r1
 800a058:	9000      	str	r0, [sp, #0]
 800a05a:	4293      	cmp	r3, r2
 800a05c:	da00      	bge.n	800a060 <_printf_common+0x14>
 800a05e:	0013      	movs	r3, r2
 800a060:	0022      	movs	r2, r4
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	3243      	adds	r2, #67	; 0x43
 800a066:	7812      	ldrb	r2, [r2, #0]
 800a068:	2a00      	cmp	r2, #0
 800a06a:	d001      	beq.n	800a070 <_printf_common+0x24>
 800a06c:	3301      	adds	r3, #1
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	069b      	lsls	r3, r3, #26
 800a074:	d502      	bpl.n	800a07c <_printf_common+0x30>
 800a076:	682b      	ldr	r3, [r5, #0]
 800a078:	3302      	adds	r3, #2
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	6822      	ldr	r2, [r4, #0]
 800a07e:	2306      	movs	r3, #6
 800a080:	0017      	movs	r7, r2
 800a082:	401f      	ands	r7, r3
 800a084:	421a      	tst	r2, r3
 800a086:	d027      	beq.n	800a0d8 <_printf_common+0x8c>
 800a088:	0023      	movs	r3, r4
 800a08a:	3343      	adds	r3, #67	; 0x43
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	1e5a      	subs	r2, r3, #1
 800a090:	4193      	sbcs	r3, r2
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	0692      	lsls	r2, r2, #26
 800a096:	d430      	bmi.n	800a0fa <_printf_common+0xae>
 800a098:	0022      	movs	r2, r4
 800a09a:	9901      	ldr	r1, [sp, #4]
 800a09c:	9800      	ldr	r0, [sp, #0]
 800a09e:	9e08      	ldr	r6, [sp, #32]
 800a0a0:	3243      	adds	r2, #67	; 0x43
 800a0a2:	47b0      	blx	r6
 800a0a4:	1c43      	adds	r3, r0, #1
 800a0a6:	d025      	beq.n	800a0f4 <_printf_common+0xa8>
 800a0a8:	2306      	movs	r3, #6
 800a0aa:	6820      	ldr	r0, [r4, #0]
 800a0ac:	682a      	ldr	r2, [r5, #0]
 800a0ae:	68e1      	ldr	r1, [r4, #12]
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	4003      	ands	r3, r0
 800a0b4:	2b04      	cmp	r3, #4
 800a0b6:	d103      	bne.n	800a0c0 <_printf_common+0x74>
 800a0b8:	1a8d      	subs	r5, r1, r2
 800a0ba:	43eb      	mvns	r3, r5
 800a0bc:	17db      	asrs	r3, r3, #31
 800a0be:	401d      	ands	r5, r3
 800a0c0:	68a3      	ldr	r3, [r4, #8]
 800a0c2:	6922      	ldr	r2, [r4, #16]
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	dd01      	ble.n	800a0cc <_printf_common+0x80>
 800a0c8:	1a9b      	subs	r3, r3, r2
 800a0ca:	18ed      	adds	r5, r5, r3
 800a0cc:	2700      	movs	r7, #0
 800a0ce:	42bd      	cmp	r5, r7
 800a0d0:	d120      	bne.n	800a114 <_printf_common+0xc8>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	e010      	b.n	800a0f8 <_printf_common+0xac>
 800a0d6:	3701      	adds	r7, #1
 800a0d8:	68e3      	ldr	r3, [r4, #12]
 800a0da:	682a      	ldr	r2, [r5, #0]
 800a0dc:	1a9b      	subs	r3, r3, r2
 800a0de:	42bb      	cmp	r3, r7
 800a0e0:	ddd2      	ble.n	800a088 <_printf_common+0x3c>
 800a0e2:	0022      	movs	r2, r4
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	9901      	ldr	r1, [sp, #4]
 800a0e8:	9800      	ldr	r0, [sp, #0]
 800a0ea:	9e08      	ldr	r6, [sp, #32]
 800a0ec:	3219      	adds	r2, #25
 800a0ee:	47b0      	blx	r6
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d1f0      	bne.n	800a0d6 <_printf_common+0x8a>
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	4240      	negs	r0, r0
 800a0f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0fa:	2030      	movs	r0, #48	; 0x30
 800a0fc:	18e1      	adds	r1, r4, r3
 800a0fe:	3143      	adds	r1, #67	; 0x43
 800a100:	7008      	strb	r0, [r1, #0]
 800a102:	0021      	movs	r1, r4
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	3145      	adds	r1, #69	; 0x45
 800a108:	7809      	ldrb	r1, [r1, #0]
 800a10a:	18a2      	adds	r2, r4, r2
 800a10c:	3243      	adds	r2, #67	; 0x43
 800a10e:	3302      	adds	r3, #2
 800a110:	7011      	strb	r1, [r2, #0]
 800a112:	e7c1      	b.n	800a098 <_printf_common+0x4c>
 800a114:	0022      	movs	r2, r4
 800a116:	2301      	movs	r3, #1
 800a118:	9901      	ldr	r1, [sp, #4]
 800a11a:	9800      	ldr	r0, [sp, #0]
 800a11c:	9e08      	ldr	r6, [sp, #32]
 800a11e:	321a      	adds	r2, #26
 800a120:	47b0      	blx	r6
 800a122:	1c43      	adds	r3, r0, #1
 800a124:	d0e6      	beq.n	800a0f4 <_printf_common+0xa8>
 800a126:	3701      	adds	r7, #1
 800a128:	e7d1      	b.n	800a0ce <_printf_common+0x82>
	...

0800a12c <_printf_i>:
 800a12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a12e:	b08b      	sub	sp, #44	; 0x2c
 800a130:	9206      	str	r2, [sp, #24]
 800a132:	000a      	movs	r2, r1
 800a134:	3243      	adds	r2, #67	; 0x43
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	9005      	str	r0, [sp, #20]
 800a13a:	9204      	str	r2, [sp, #16]
 800a13c:	7e0a      	ldrb	r2, [r1, #24]
 800a13e:	000c      	movs	r4, r1
 800a140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a142:	2a78      	cmp	r2, #120	; 0x78
 800a144:	d807      	bhi.n	800a156 <_printf_i+0x2a>
 800a146:	2a62      	cmp	r2, #98	; 0x62
 800a148:	d809      	bhi.n	800a15e <_printf_i+0x32>
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	d100      	bne.n	800a150 <_printf_i+0x24>
 800a14e:	e0c1      	b.n	800a2d4 <_printf_i+0x1a8>
 800a150:	2a58      	cmp	r2, #88	; 0x58
 800a152:	d100      	bne.n	800a156 <_printf_i+0x2a>
 800a154:	e08c      	b.n	800a270 <_printf_i+0x144>
 800a156:	0026      	movs	r6, r4
 800a158:	3642      	adds	r6, #66	; 0x42
 800a15a:	7032      	strb	r2, [r6, #0]
 800a15c:	e022      	b.n	800a1a4 <_printf_i+0x78>
 800a15e:	0010      	movs	r0, r2
 800a160:	3863      	subs	r0, #99	; 0x63
 800a162:	2815      	cmp	r0, #21
 800a164:	d8f7      	bhi.n	800a156 <_printf_i+0x2a>
 800a166:	f7f5 ffe1 	bl	800012c <__gnu_thumb1_case_shi>
 800a16a:	0016      	.short	0x0016
 800a16c:	fff6001f 	.word	0xfff6001f
 800a170:	fff6fff6 	.word	0xfff6fff6
 800a174:	001ffff6 	.word	0x001ffff6
 800a178:	fff6fff6 	.word	0xfff6fff6
 800a17c:	fff6fff6 	.word	0xfff6fff6
 800a180:	003600a8 	.word	0x003600a8
 800a184:	fff6009a 	.word	0xfff6009a
 800a188:	00b9fff6 	.word	0x00b9fff6
 800a18c:	0036fff6 	.word	0x0036fff6
 800a190:	fff6fff6 	.word	0xfff6fff6
 800a194:	009e      	.short	0x009e
 800a196:	0026      	movs	r6, r4
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	3642      	adds	r6, #66	; 0x42
 800a19c:	1d11      	adds	r1, r2, #4
 800a19e:	6019      	str	r1, [r3, #0]
 800a1a0:	6813      	ldr	r3, [r2, #0]
 800a1a2:	7033      	strb	r3, [r6, #0]
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e0a7      	b.n	800a2f8 <_printf_i+0x1cc>
 800a1a8:	6808      	ldr	r0, [r1, #0]
 800a1aa:	6819      	ldr	r1, [r3, #0]
 800a1ac:	1d0a      	adds	r2, r1, #4
 800a1ae:	0605      	lsls	r5, r0, #24
 800a1b0:	d50b      	bpl.n	800a1ca <_printf_i+0x9e>
 800a1b2:	680d      	ldr	r5, [r1, #0]
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	2d00      	cmp	r5, #0
 800a1b8:	da03      	bge.n	800a1c2 <_printf_i+0x96>
 800a1ba:	232d      	movs	r3, #45	; 0x2d
 800a1bc:	9a04      	ldr	r2, [sp, #16]
 800a1be:	426d      	negs	r5, r5
 800a1c0:	7013      	strb	r3, [r2, #0]
 800a1c2:	4b61      	ldr	r3, [pc, #388]	; (800a348 <_printf_i+0x21c>)
 800a1c4:	270a      	movs	r7, #10
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	e01b      	b.n	800a202 <_printf_i+0xd6>
 800a1ca:	680d      	ldr	r5, [r1, #0]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	0641      	lsls	r1, r0, #25
 800a1d0:	d5f1      	bpl.n	800a1b6 <_printf_i+0x8a>
 800a1d2:	b22d      	sxth	r5, r5
 800a1d4:	e7ef      	b.n	800a1b6 <_printf_i+0x8a>
 800a1d6:	680d      	ldr	r5, [r1, #0]
 800a1d8:	6819      	ldr	r1, [r3, #0]
 800a1da:	1d08      	adds	r0, r1, #4
 800a1dc:	6018      	str	r0, [r3, #0]
 800a1de:	062e      	lsls	r6, r5, #24
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_i+0xba>
 800a1e2:	680d      	ldr	r5, [r1, #0]
 800a1e4:	e003      	b.n	800a1ee <_printf_i+0xc2>
 800a1e6:	066d      	lsls	r5, r5, #25
 800a1e8:	d5fb      	bpl.n	800a1e2 <_printf_i+0xb6>
 800a1ea:	680d      	ldr	r5, [r1, #0]
 800a1ec:	b2ad      	uxth	r5, r5
 800a1ee:	4b56      	ldr	r3, [pc, #344]	; (800a348 <_printf_i+0x21c>)
 800a1f0:	2708      	movs	r7, #8
 800a1f2:	9303      	str	r3, [sp, #12]
 800a1f4:	2a6f      	cmp	r2, #111	; 0x6f
 800a1f6:	d000      	beq.n	800a1fa <_printf_i+0xce>
 800a1f8:	3702      	adds	r7, #2
 800a1fa:	0023      	movs	r3, r4
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	3343      	adds	r3, #67	; 0x43
 800a200:	701a      	strb	r2, [r3, #0]
 800a202:	6863      	ldr	r3, [r4, #4]
 800a204:	60a3      	str	r3, [r4, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	db03      	blt.n	800a212 <_printf_i+0xe6>
 800a20a:	2204      	movs	r2, #4
 800a20c:	6821      	ldr	r1, [r4, #0]
 800a20e:	4391      	bics	r1, r2
 800a210:	6021      	str	r1, [r4, #0]
 800a212:	2d00      	cmp	r5, #0
 800a214:	d102      	bne.n	800a21c <_printf_i+0xf0>
 800a216:	9e04      	ldr	r6, [sp, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00c      	beq.n	800a236 <_printf_i+0x10a>
 800a21c:	9e04      	ldr	r6, [sp, #16]
 800a21e:	0028      	movs	r0, r5
 800a220:	0039      	movs	r1, r7
 800a222:	f7f6 f813 	bl	800024c <__aeabi_uidivmod>
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	3e01      	subs	r6, #1
 800a22a:	5c5b      	ldrb	r3, [r3, r1]
 800a22c:	7033      	strb	r3, [r6, #0]
 800a22e:	002b      	movs	r3, r5
 800a230:	0005      	movs	r5, r0
 800a232:	429f      	cmp	r7, r3
 800a234:	d9f3      	bls.n	800a21e <_printf_i+0xf2>
 800a236:	2f08      	cmp	r7, #8
 800a238:	d109      	bne.n	800a24e <_printf_i+0x122>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	07db      	lsls	r3, r3, #31
 800a23e:	d506      	bpl.n	800a24e <_printf_i+0x122>
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	6922      	ldr	r2, [r4, #16]
 800a244:	4293      	cmp	r3, r2
 800a246:	dc02      	bgt.n	800a24e <_printf_i+0x122>
 800a248:	2330      	movs	r3, #48	; 0x30
 800a24a:	3e01      	subs	r6, #1
 800a24c:	7033      	strb	r3, [r6, #0]
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	1b9b      	subs	r3, r3, r6
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	9b07      	ldr	r3, [sp, #28]
 800a256:	0021      	movs	r1, r4
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	9805      	ldr	r0, [sp, #20]
 800a25c:	9b06      	ldr	r3, [sp, #24]
 800a25e:	aa09      	add	r2, sp, #36	; 0x24
 800a260:	f7ff fef4 	bl	800a04c <_printf_common>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d14c      	bne.n	800a302 <_printf_i+0x1d6>
 800a268:	2001      	movs	r0, #1
 800a26a:	4240      	negs	r0, r0
 800a26c:	b00b      	add	sp, #44	; 0x2c
 800a26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a270:	3145      	adds	r1, #69	; 0x45
 800a272:	700a      	strb	r2, [r1, #0]
 800a274:	4a34      	ldr	r2, [pc, #208]	; (800a348 <_printf_i+0x21c>)
 800a276:	9203      	str	r2, [sp, #12]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	6821      	ldr	r1, [r4, #0]
 800a27c:	ca20      	ldmia	r2!, {r5}
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	0608      	lsls	r0, r1, #24
 800a282:	d516      	bpl.n	800a2b2 <_printf_i+0x186>
 800a284:	07cb      	lsls	r3, r1, #31
 800a286:	d502      	bpl.n	800a28e <_printf_i+0x162>
 800a288:	2320      	movs	r3, #32
 800a28a:	4319      	orrs	r1, r3
 800a28c:	6021      	str	r1, [r4, #0]
 800a28e:	2710      	movs	r7, #16
 800a290:	2d00      	cmp	r5, #0
 800a292:	d1b2      	bne.n	800a1fa <_printf_i+0xce>
 800a294:	2320      	movs	r3, #32
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	439a      	bics	r2, r3
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	e7ad      	b.n	800a1fa <_printf_i+0xce>
 800a29e:	2220      	movs	r2, #32
 800a2a0:	6809      	ldr	r1, [r1, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	0022      	movs	r2, r4
 800a2a8:	2178      	movs	r1, #120	; 0x78
 800a2aa:	3245      	adds	r2, #69	; 0x45
 800a2ac:	7011      	strb	r1, [r2, #0]
 800a2ae:	4a27      	ldr	r2, [pc, #156]	; (800a34c <_printf_i+0x220>)
 800a2b0:	e7e1      	b.n	800a276 <_printf_i+0x14a>
 800a2b2:	0648      	lsls	r0, r1, #25
 800a2b4:	d5e6      	bpl.n	800a284 <_printf_i+0x158>
 800a2b6:	b2ad      	uxth	r5, r5
 800a2b8:	e7e4      	b.n	800a284 <_printf_i+0x158>
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	680d      	ldr	r5, [r1, #0]
 800a2be:	1d10      	adds	r0, r2, #4
 800a2c0:	6949      	ldr	r1, [r1, #20]
 800a2c2:	6018      	str	r0, [r3, #0]
 800a2c4:	6813      	ldr	r3, [r2, #0]
 800a2c6:	062e      	lsls	r6, r5, #24
 800a2c8:	d501      	bpl.n	800a2ce <_printf_i+0x1a2>
 800a2ca:	6019      	str	r1, [r3, #0]
 800a2cc:	e002      	b.n	800a2d4 <_printf_i+0x1a8>
 800a2ce:	066d      	lsls	r5, r5, #25
 800a2d0:	d5fb      	bpl.n	800a2ca <_printf_i+0x19e>
 800a2d2:	8019      	strh	r1, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9e04      	ldr	r6, [sp, #16]
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	e7bb      	b.n	800a254 <_printf_i+0x128>
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	1d11      	adds	r1, r2, #4
 800a2e0:	6019      	str	r1, [r3, #0]
 800a2e2:	6816      	ldr	r6, [r2, #0]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	0030      	movs	r0, r6
 800a2e8:	6862      	ldr	r2, [r4, #4]
 800a2ea:	f001 f8bd 	bl	800b468 <memchr>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d001      	beq.n	800a2f6 <_printf_i+0x1ca>
 800a2f2:	1b80      	subs	r0, r0, r6
 800a2f4:	6060      	str	r0, [r4, #4]
 800a2f6:	6863      	ldr	r3, [r4, #4]
 800a2f8:	6123      	str	r3, [r4, #16]
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	9a04      	ldr	r2, [sp, #16]
 800a2fe:	7013      	strb	r3, [r2, #0]
 800a300:	e7a8      	b.n	800a254 <_printf_i+0x128>
 800a302:	6923      	ldr	r3, [r4, #16]
 800a304:	0032      	movs	r2, r6
 800a306:	9906      	ldr	r1, [sp, #24]
 800a308:	9805      	ldr	r0, [sp, #20]
 800a30a:	9d07      	ldr	r5, [sp, #28]
 800a30c:	47a8      	blx	r5
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d0aa      	beq.n	800a268 <_printf_i+0x13c>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	079b      	lsls	r3, r3, #30
 800a316:	d415      	bmi.n	800a344 <_printf_i+0x218>
 800a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31a:	68e0      	ldr	r0, [r4, #12]
 800a31c:	4298      	cmp	r0, r3
 800a31e:	daa5      	bge.n	800a26c <_printf_i+0x140>
 800a320:	0018      	movs	r0, r3
 800a322:	e7a3      	b.n	800a26c <_printf_i+0x140>
 800a324:	0022      	movs	r2, r4
 800a326:	2301      	movs	r3, #1
 800a328:	9906      	ldr	r1, [sp, #24]
 800a32a:	9805      	ldr	r0, [sp, #20]
 800a32c:	9e07      	ldr	r6, [sp, #28]
 800a32e:	3219      	adds	r2, #25
 800a330:	47b0      	blx	r6
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	d098      	beq.n	800a268 <_printf_i+0x13c>
 800a336:	3501      	adds	r5, #1
 800a338:	68e3      	ldr	r3, [r4, #12]
 800a33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a33c:	1a9b      	subs	r3, r3, r2
 800a33e:	42ab      	cmp	r3, r5
 800a340:	dcf0      	bgt.n	800a324 <_printf_i+0x1f8>
 800a342:	e7e9      	b.n	800a318 <_printf_i+0x1ec>
 800a344:	2500      	movs	r5, #0
 800a346:	e7f7      	b.n	800a338 <_printf_i+0x20c>
 800a348:	0800c6e6 	.word	0x0800c6e6
 800a34c:	0800c6f7 	.word	0x0800c6f7

0800a350 <cleanup_glue>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	000d      	movs	r5, r1
 800a354:	6809      	ldr	r1, [r1, #0]
 800a356:	0004      	movs	r4, r0
 800a358:	2900      	cmp	r1, #0
 800a35a:	d001      	beq.n	800a360 <cleanup_glue+0x10>
 800a35c:	f7ff fff8 	bl	800a350 <cleanup_glue>
 800a360:	0029      	movs	r1, r5
 800a362:	0020      	movs	r0, r4
 800a364:	f001 fc64 	bl	800bc30 <_free_r>
 800a368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a36c <_reclaim_reent>:
 800a36c:	4b31      	ldr	r3, [pc, #196]	; (800a434 <_reclaim_reent+0xc8>)
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	0004      	movs	r4, r0
 800a374:	4283      	cmp	r3, r0
 800a376:	d049      	beq.n	800a40c <_reclaim_reent+0xa0>
 800a378:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <_reclaim_reent+0x28>
 800a37e:	2500      	movs	r5, #0
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	42ab      	cmp	r3, r5
 800a384:	d147      	bne.n	800a416 <_reclaim_reent+0xaa>
 800a386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a388:	6819      	ldr	r1, [r3, #0]
 800a38a:	2900      	cmp	r1, #0
 800a38c:	d002      	beq.n	800a394 <_reclaim_reent+0x28>
 800a38e:	0020      	movs	r0, r4
 800a390:	f001 fc4e 	bl	800bc30 <_free_r>
 800a394:	6961      	ldr	r1, [r4, #20]
 800a396:	2900      	cmp	r1, #0
 800a398:	d002      	beq.n	800a3a0 <_reclaim_reent+0x34>
 800a39a:	0020      	movs	r0, r4
 800a39c:	f001 fc48 	bl	800bc30 <_free_r>
 800a3a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	d002      	beq.n	800a3ac <_reclaim_reent+0x40>
 800a3a6:	0020      	movs	r0, r4
 800a3a8:	f001 fc42 	bl	800bc30 <_free_r>
 800a3ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	d002      	beq.n	800a3b8 <_reclaim_reent+0x4c>
 800a3b2:	0020      	movs	r0, r4
 800a3b4:	f001 fc3c 	bl	800bc30 <_free_r>
 800a3b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	d002      	beq.n	800a3c4 <_reclaim_reent+0x58>
 800a3be:	0020      	movs	r0, r4
 800a3c0:	f001 fc36 	bl	800bc30 <_free_r>
 800a3c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d002      	beq.n	800a3d0 <_reclaim_reent+0x64>
 800a3ca:	0020      	movs	r0, r4
 800a3cc:	f001 fc30 	bl	800bc30 <_free_r>
 800a3d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	d002      	beq.n	800a3dc <_reclaim_reent+0x70>
 800a3d6:	0020      	movs	r0, r4
 800a3d8:	f001 fc2a 	bl	800bc30 <_free_r>
 800a3dc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	d002      	beq.n	800a3e8 <_reclaim_reent+0x7c>
 800a3e2:	0020      	movs	r0, r4
 800a3e4:	f001 fc24 	bl	800bc30 <_free_r>
 800a3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ea:	2900      	cmp	r1, #0
 800a3ec:	d002      	beq.n	800a3f4 <_reclaim_reent+0x88>
 800a3ee:	0020      	movs	r0, r4
 800a3f0:	f001 fc1e 	bl	800bc30 <_free_r>
 800a3f4:	69a3      	ldr	r3, [r4, #24]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d008      	beq.n	800a40c <_reclaim_reent+0xa0>
 800a3fa:	0020      	movs	r0, r4
 800a3fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3fe:	4798      	blx	r3
 800a400:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a402:	2900      	cmp	r1, #0
 800a404:	d002      	beq.n	800a40c <_reclaim_reent+0xa0>
 800a406:	0020      	movs	r0, r4
 800a408:	f7ff ffa2 	bl	800a350 <cleanup_glue>
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
 800a40e:	5949      	ldr	r1, [r1, r5]
 800a410:	2900      	cmp	r1, #0
 800a412:	d108      	bne.n	800a426 <_reclaim_reent+0xba>
 800a414:	3504      	adds	r5, #4
 800a416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a418:	68d9      	ldr	r1, [r3, #12]
 800a41a:	2d80      	cmp	r5, #128	; 0x80
 800a41c:	d1f7      	bne.n	800a40e <_reclaim_reent+0xa2>
 800a41e:	0020      	movs	r0, r4
 800a420:	f001 fc06 	bl	800bc30 <_free_r>
 800a424:	e7af      	b.n	800a386 <_reclaim_reent+0x1a>
 800a426:	680e      	ldr	r6, [r1, #0]
 800a428:	0020      	movs	r0, r4
 800a42a:	f001 fc01 	bl	800bc30 <_free_r>
 800a42e:	0031      	movs	r1, r6
 800a430:	e7ee      	b.n	800a410 <_reclaim_reent+0xa4>
 800a432:	46c0      	nop			; (mov r8, r8)
 800a434:	20000014 	.word	0x20000014

0800a438 <_sbrk_r>:
 800a438:	2300      	movs	r3, #0
 800a43a:	b570      	push	{r4, r5, r6, lr}
 800a43c:	4d06      	ldr	r5, [pc, #24]	; (800a458 <_sbrk_r+0x20>)
 800a43e:	0004      	movs	r4, r0
 800a440:	0008      	movs	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f8 fc00 	bl	8002c48 <_sbrk>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d103      	bne.n	800a454 <_sbrk_r+0x1c>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d000      	beq.n	800a454 <_sbrk_r+0x1c>
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	20001d78 	.word	0x20001d78

0800a45c <__sread>:
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	000c      	movs	r4, r1
 800a460:	250e      	movs	r5, #14
 800a462:	5f49      	ldrsh	r1, [r1, r5]
 800a464:	f001 fc2e 	bl	800bcc4 <_read_r>
 800a468:	2800      	cmp	r0, #0
 800a46a:	db03      	blt.n	800a474 <__sread+0x18>
 800a46c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a46e:	181b      	adds	r3, r3, r0
 800a470:	6563      	str	r3, [r4, #84]	; 0x54
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	4a02      	ldr	r2, [pc, #8]	; (800a480 <__sread+0x24>)
 800a478:	4013      	ands	r3, r2
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	e7f9      	b.n	800a472 <__sread+0x16>
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	ffffefff 	.word	0xffffefff

0800a484 <__swrite>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	001f      	movs	r7, r3
 800a488:	898b      	ldrh	r3, [r1, #12]
 800a48a:	0005      	movs	r5, r0
 800a48c:	000c      	movs	r4, r1
 800a48e:	0016      	movs	r6, r2
 800a490:	05db      	lsls	r3, r3, #23
 800a492:	d505      	bpl.n	800a4a0 <__swrite+0x1c>
 800a494:	230e      	movs	r3, #14
 800a496:	5ec9      	ldrsh	r1, [r1, r3]
 800a498:	2200      	movs	r2, #0
 800a49a:	2302      	movs	r3, #2
 800a49c:	f000 ffc6 	bl	800b42c <_lseek_r>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <__swrite+0x34>)
 800a4a4:	0028      	movs	r0, r5
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	81a3      	strh	r3, [r4, #12]
 800a4aa:	0032      	movs	r2, r6
 800a4ac:	230e      	movs	r3, #14
 800a4ae:	5ee1      	ldrsh	r1, [r4, r3]
 800a4b0:	003b      	movs	r3, r7
 800a4b2:	f000 f81f 	bl	800a4f4 <_write_r>
 800a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b8:	ffffefff 	.word	0xffffefff

0800a4bc <__sseek>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	000c      	movs	r4, r1
 800a4c0:	250e      	movs	r5, #14
 800a4c2:	5f49      	ldrsh	r1, [r1, r5]
 800a4c4:	f000 ffb2 	bl	800b42c <_lseek_r>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	1c42      	adds	r2, r0, #1
 800a4cc:	d103      	bne.n	800a4d6 <__sseek+0x1a>
 800a4ce:	4a05      	ldr	r2, [pc, #20]	; (800a4e4 <__sseek+0x28>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	bd70      	pop	{r4, r5, r6, pc}
 800a4d6:	2280      	movs	r2, #128	; 0x80
 800a4d8:	0152      	lsls	r2, r2, #5
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	6560      	str	r0, [r4, #84]	; 0x54
 800a4e0:	e7f8      	b.n	800a4d4 <__sseek+0x18>
 800a4e2:	46c0      	nop			; (mov r8, r8)
 800a4e4:	ffffefff 	.word	0xffffefff

0800a4e8 <__sclose>:
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	230e      	movs	r3, #14
 800a4ec:	5ec9      	ldrsh	r1, [r1, r3]
 800a4ee:	f000 f815 	bl	800a51c <_close_r>
 800a4f2:	bd10      	pop	{r4, pc}

0800a4f4 <_write_r>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	0004      	movs	r4, r0
 800a4f8:	0008      	movs	r0, r1
 800a4fa:	0011      	movs	r1, r2
 800a4fc:	001a      	movs	r2, r3
 800a4fe:	2300      	movs	r3, #0
 800a500:	4d05      	ldr	r5, [pc, #20]	; (800a518 <_write_r+0x24>)
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	f7f8 fb57 	bl	8002bb6 <_write>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d103      	bne.n	800a514 <_write_r+0x20>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d000      	beq.n	800a514 <_write_r+0x20>
 800a512:	6023      	str	r3, [r4, #0]
 800a514:	bd70      	pop	{r4, r5, r6, pc}
 800a516:	46c0      	nop			; (mov r8, r8)
 800a518:	20001d78 	.word	0x20001d78

0800a51c <_close_r>:
 800a51c:	2300      	movs	r3, #0
 800a51e:	b570      	push	{r4, r5, r6, lr}
 800a520:	4d06      	ldr	r5, [pc, #24]	; (800a53c <_close_r+0x20>)
 800a522:	0004      	movs	r4, r0
 800a524:	0008      	movs	r0, r1
 800a526:	602b      	str	r3, [r5, #0]
 800a528:	f7f8 fb61 	bl	8002bee <_close>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d103      	bne.n	800a538 <_close_r+0x1c>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d000      	beq.n	800a538 <_close_r+0x1c>
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	bd70      	pop	{r4, r5, r6, pc}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	20001d78 	.word	0x20001d78

0800a540 <quorem>:
 800a540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a542:	0006      	movs	r6, r0
 800a544:	690b      	ldr	r3, [r1, #16]
 800a546:	6932      	ldr	r2, [r6, #16]
 800a548:	b087      	sub	sp, #28
 800a54a:	2000      	movs	r0, #0
 800a54c:	9103      	str	r1, [sp, #12]
 800a54e:	429a      	cmp	r2, r3
 800a550:	db65      	blt.n	800a61e <quorem+0xde>
 800a552:	3b01      	subs	r3, #1
 800a554:	009c      	lsls	r4, r3, #2
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	000b      	movs	r3, r1
 800a55a:	3314      	adds	r3, #20
 800a55c:	9305      	str	r3, [sp, #20]
 800a55e:	191b      	adds	r3, r3, r4
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	0033      	movs	r3, r6
 800a564:	3314      	adds	r3, #20
 800a566:	9302      	str	r3, [sp, #8]
 800a568:	191c      	adds	r4, r3, r4
 800a56a:	9b04      	ldr	r3, [sp, #16]
 800a56c:	6827      	ldr	r7, [r4, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	0038      	movs	r0, r7
 800a572:	1c5d      	adds	r5, r3, #1
 800a574:	0029      	movs	r1, r5
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	f7f5 fde2 	bl	8000140 <__udivsi3>
 800a57c:	9001      	str	r0, [sp, #4]
 800a57e:	42af      	cmp	r7, r5
 800a580:	d324      	bcc.n	800a5cc <quorem+0x8c>
 800a582:	2500      	movs	r5, #0
 800a584:	46ac      	mov	ip, r5
 800a586:	9802      	ldr	r0, [sp, #8]
 800a588:	9f05      	ldr	r7, [sp, #20]
 800a58a:	cf08      	ldmia	r7!, {r3}
 800a58c:	9a01      	ldr	r2, [sp, #4]
 800a58e:	b299      	uxth	r1, r3
 800a590:	4351      	muls	r1, r2
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	4353      	muls	r3, r2
 800a596:	1949      	adds	r1, r1, r5
 800a598:	0c0a      	lsrs	r2, r1, #16
 800a59a:	189b      	adds	r3, r3, r2
 800a59c:	6802      	ldr	r2, [r0, #0]
 800a59e:	b289      	uxth	r1, r1
 800a5a0:	b292      	uxth	r2, r2
 800a5a2:	4462      	add	r2, ip
 800a5a4:	1a52      	subs	r2, r2, r1
 800a5a6:	6801      	ldr	r1, [r0, #0]
 800a5a8:	0c1d      	lsrs	r5, r3, #16
 800a5aa:	0c09      	lsrs	r1, r1, #16
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	1acb      	subs	r3, r1, r3
 800a5b0:	1411      	asrs	r1, r2, #16
 800a5b2:	185b      	adds	r3, r3, r1
 800a5b4:	1419      	asrs	r1, r3, #16
 800a5b6:	b292      	uxth	r2, r2
 800a5b8:	041b      	lsls	r3, r3, #16
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	9b04      	ldr	r3, [sp, #16]
 800a5be:	468c      	mov	ip, r1
 800a5c0:	c004      	stmia	r0!, {r2}
 800a5c2:	42bb      	cmp	r3, r7
 800a5c4:	d2e1      	bcs.n	800a58a <quorem+0x4a>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d030      	beq.n	800a62e <quorem+0xee>
 800a5cc:	0030      	movs	r0, r6
 800a5ce:	9903      	ldr	r1, [sp, #12]
 800a5d0:	f001 f9ea 	bl	800b9a8 <__mcmp>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	db21      	blt.n	800a61c <quorem+0xdc>
 800a5d8:	0030      	movs	r0, r6
 800a5da:	2400      	movs	r4, #0
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	9903      	ldr	r1, [sp, #12]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	3014      	adds	r0, #20
 800a5e6:	3114      	adds	r1, #20
 800a5e8:	6803      	ldr	r3, [r0, #0]
 800a5ea:	c920      	ldmia	r1!, {r5}
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	1914      	adds	r4, r2, r4
 800a5f0:	b2aa      	uxth	r2, r5
 800a5f2:	1aa2      	subs	r2, r4, r2
 800a5f4:	0c1b      	lsrs	r3, r3, #16
 800a5f6:	0c2d      	lsrs	r5, r5, #16
 800a5f8:	1414      	asrs	r4, r2, #16
 800a5fa:	1b5b      	subs	r3, r3, r5
 800a5fc:	191b      	adds	r3, r3, r4
 800a5fe:	141c      	asrs	r4, r3, #16
 800a600:	b292      	uxth	r2, r2
 800a602:	041b      	lsls	r3, r3, #16
 800a604:	4313      	orrs	r3, r2
 800a606:	c008      	stmia	r0!, {r3}
 800a608:	9b04      	ldr	r3, [sp, #16]
 800a60a:	428b      	cmp	r3, r1
 800a60c:	d2ec      	bcs.n	800a5e8 <quorem+0xa8>
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	9a02      	ldr	r2, [sp, #8]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	18d3      	adds	r3, r2, r3
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d015      	beq.n	800a648 <quorem+0x108>
 800a61c:	9801      	ldr	r0, [sp, #4]
 800a61e:	b007      	add	sp, #28
 800a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a622:	6823      	ldr	r3, [r4, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d106      	bne.n	800a636 <quorem+0xf6>
 800a628:	9b00      	ldr	r3, [sp, #0]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	9b02      	ldr	r3, [sp, #8]
 800a630:	3c04      	subs	r4, #4
 800a632:	42a3      	cmp	r3, r4
 800a634:	d3f5      	bcc.n	800a622 <quorem+0xe2>
 800a636:	9b00      	ldr	r3, [sp, #0]
 800a638:	6133      	str	r3, [r6, #16]
 800a63a:	e7c7      	b.n	800a5cc <quorem+0x8c>
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	2a00      	cmp	r2, #0
 800a640:	d106      	bne.n	800a650 <quorem+0x110>
 800a642:	9a00      	ldr	r2, [sp, #0]
 800a644:	3a01      	subs	r2, #1
 800a646:	9200      	str	r2, [sp, #0]
 800a648:	9a02      	ldr	r2, [sp, #8]
 800a64a:	3b04      	subs	r3, #4
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d3f5      	bcc.n	800a63c <quorem+0xfc>
 800a650:	9b00      	ldr	r3, [sp, #0]
 800a652:	6133      	str	r3, [r6, #16]
 800a654:	e7e2      	b.n	800a61c <quorem+0xdc>
	...

0800a658 <_dtoa_r>:
 800a658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65a:	b09d      	sub	sp, #116	; 0x74
 800a65c:	9202      	str	r2, [sp, #8]
 800a65e:	9303      	str	r3, [sp, #12]
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	9c03      	ldr	r4, [sp, #12]
 800a664:	9308      	str	r3, [sp, #32]
 800a666:	9409      	str	r4, [sp, #36]	; 0x24
 800a668:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a66a:	0007      	movs	r7, r0
 800a66c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d10e      	bne.n	800a690 <_dtoa_r+0x38>
 800a672:	2010      	movs	r0, #16
 800a674:	f000 feee 	bl	800b454 <malloc>
 800a678:	1e02      	subs	r2, r0, #0
 800a67a:	6278      	str	r0, [r7, #36]	; 0x24
 800a67c:	d104      	bne.n	800a688 <_dtoa_r+0x30>
 800a67e:	21ea      	movs	r1, #234	; 0xea
 800a680:	4bc7      	ldr	r3, [pc, #796]	; (800a9a0 <_dtoa_r+0x348>)
 800a682:	48c8      	ldr	r0, [pc, #800]	; (800a9a4 <_dtoa_r+0x34c>)
 800a684:	f001 fb32 	bl	800bcec <__assert_func>
 800a688:	6044      	str	r4, [r0, #4]
 800a68a:	6084      	str	r4, [r0, #8]
 800a68c:	6004      	str	r4, [r0, #0]
 800a68e:	60c4      	str	r4, [r0, #12]
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	2900      	cmp	r1, #0
 800a696:	d00a      	beq.n	800a6ae <_dtoa_r+0x56>
 800a698:	685a      	ldr	r2, [r3, #4]
 800a69a:	2301      	movs	r3, #1
 800a69c:	4093      	lsls	r3, r2
 800a69e:	604a      	str	r2, [r1, #4]
 800a6a0:	608b      	str	r3, [r1, #8]
 800a6a2:	0038      	movs	r0, r7
 800a6a4:	f000 ff40 	bl	800b528 <_Bfree>
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	da20      	bge.n	800a6f6 <_dtoa_r+0x9e>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	9b03      	ldr	r3, [sp, #12]
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	085b      	lsrs	r3, r3, #1
 800a6be:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a6c2:	4bb9      	ldr	r3, [pc, #740]	; (800a9a8 <_dtoa_r+0x350>)
 800a6c4:	4ab8      	ldr	r2, [pc, #736]	; (800a9a8 <_dtoa_r+0x350>)
 800a6c6:	402b      	ands	r3, r5
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d117      	bne.n	800a6fc <_dtoa_r+0xa4>
 800a6cc:	4bb7      	ldr	r3, [pc, #732]	; (800a9ac <_dtoa_r+0x354>)
 800a6ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6d0:	0328      	lsls	r0, r5, #12
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	9b02      	ldr	r3, [sp, #8]
 800a6d6:	0b00      	lsrs	r0, r0, #12
 800a6d8:	4318      	orrs	r0, r3
 800a6da:	d101      	bne.n	800a6e0 <_dtoa_r+0x88>
 800a6dc:	f000 fdbf 	bl	800b25e <_dtoa_r+0xc06>
 800a6e0:	48b3      	ldr	r0, [pc, #716]	; (800a9b0 <_dtoa_r+0x358>)
 800a6e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6e4:	9006      	str	r0, [sp, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <_dtoa_r+0x98>
 800a6ea:	4bb2      	ldr	r3, [pc, #712]	; (800a9b4 <_dtoa_r+0x35c>)
 800a6ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	9806      	ldr	r0, [sp, #24]
 800a6f2:	b01d      	add	sp, #116	; 0x74
 800a6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	e7e1      	b.n	800a6c0 <_dtoa_r+0x68>
 800a6fc:	9b08      	ldr	r3, [sp, #32]
 800a6fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a700:	9312      	str	r3, [sp, #72]	; 0x48
 800a702:	9413      	str	r4, [sp, #76]	; 0x4c
 800a704:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a706:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	f7f5 fe9e 	bl	800044c <__aeabi_dcmpeq>
 800a710:	1e04      	subs	r4, r0, #0
 800a712:	d009      	beq.n	800a728 <_dtoa_r+0xd0>
 800a714:	2301      	movs	r3, #1
 800a716:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	4ba7      	ldr	r3, [pc, #668]	; (800a9b8 <_dtoa_r+0x360>)
 800a71c:	9306      	str	r3, [sp, #24]
 800a71e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0e5      	beq.n	800a6f0 <_dtoa_r+0x98>
 800a724:	4ba5      	ldr	r3, [pc, #660]	; (800a9bc <_dtoa_r+0x364>)
 800a726:	e7e1      	b.n	800a6ec <_dtoa_r+0x94>
 800a728:	ab1a      	add	r3, sp, #104	; 0x68
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	0038      	movs	r0, r7
 800a732:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a736:	f001 f9eb 	bl	800bb10 <__d2b>
 800a73a:	006e      	lsls	r6, r5, #1
 800a73c:	9005      	str	r0, [sp, #20]
 800a73e:	0d76      	lsrs	r6, r6, #21
 800a740:	d100      	bne.n	800a744 <_dtoa_r+0xec>
 800a742:	e07c      	b.n	800a83e <_dtoa_r+0x1e6>
 800a744:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a746:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a74a:	4a9d      	ldr	r2, [pc, #628]	; (800a9c0 <_dtoa_r+0x368>)
 800a74c:	031b      	lsls	r3, r3, #12
 800a74e:	0b1b      	lsrs	r3, r3, #12
 800a750:	431a      	orrs	r2, r3
 800a752:	0011      	movs	r1, r2
 800a754:	4b9b      	ldr	r3, [pc, #620]	; (800a9c4 <_dtoa_r+0x36c>)
 800a756:	9418      	str	r4, [sp, #96]	; 0x60
 800a758:	18f6      	adds	r6, r6, r3
 800a75a:	2200      	movs	r2, #0
 800a75c:	4b9a      	ldr	r3, [pc, #616]	; (800a9c8 <_dtoa_r+0x370>)
 800a75e:	f7f7 f939 	bl	80019d4 <__aeabi_dsub>
 800a762:	4a9a      	ldr	r2, [pc, #616]	; (800a9cc <_dtoa_r+0x374>)
 800a764:	4b9a      	ldr	r3, [pc, #616]	; (800a9d0 <_dtoa_r+0x378>)
 800a766:	f7f6 fec9 	bl	80014fc <__aeabi_dmul>
 800a76a:	4a9a      	ldr	r2, [pc, #616]	; (800a9d4 <_dtoa_r+0x37c>)
 800a76c:	4b9a      	ldr	r3, [pc, #616]	; (800a9d8 <_dtoa_r+0x380>)
 800a76e:	f7f5 ff87 	bl	8000680 <__aeabi_dadd>
 800a772:	0004      	movs	r4, r0
 800a774:	0030      	movs	r0, r6
 800a776:	000d      	movs	r5, r1
 800a778:	f7f7 fd12 	bl	80021a0 <__aeabi_i2d>
 800a77c:	4a97      	ldr	r2, [pc, #604]	; (800a9dc <_dtoa_r+0x384>)
 800a77e:	4b98      	ldr	r3, [pc, #608]	; (800a9e0 <_dtoa_r+0x388>)
 800a780:	f7f6 febc 	bl	80014fc <__aeabi_dmul>
 800a784:	0002      	movs	r2, r0
 800a786:	000b      	movs	r3, r1
 800a788:	0020      	movs	r0, r4
 800a78a:	0029      	movs	r1, r5
 800a78c:	f7f5 ff78 	bl	8000680 <__aeabi_dadd>
 800a790:	0004      	movs	r4, r0
 800a792:	000d      	movs	r5, r1
 800a794:	f7f7 fcce 	bl	8002134 <__aeabi_d2iz>
 800a798:	2200      	movs	r2, #0
 800a79a:	9002      	str	r0, [sp, #8]
 800a79c:	2300      	movs	r3, #0
 800a79e:	0020      	movs	r0, r4
 800a7a0:	0029      	movs	r1, r5
 800a7a2:	f7f5 fe59 	bl	8000458 <__aeabi_dcmplt>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d00b      	beq.n	800a7c2 <_dtoa_r+0x16a>
 800a7aa:	9802      	ldr	r0, [sp, #8]
 800a7ac:	f7f7 fcf8 	bl	80021a0 <__aeabi_i2d>
 800a7b0:	002b      	movs	r3, r5
 800a7b2:	0022      	movs	r2, r4
 800a7b4:	f7f5 fe4a 	bl	800044c <__aeabi_dcmpeq>
 800a7b8:	4243      	negs	r3, r0
 800a7ba:	4158      	adcs	r0, r3
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	1a1b      	subs	r3, r3, r0
 800a7c0:	9302      	str	r3, [sp, #8]
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	9316      	str	r3, [sp, #88]	; 0x58
 800a7c6:	9b02      	ldr	r3, [sp, #8]
 800a7c8:	2b16      	cmp	r3, #22
 800a7ca:	d80f      	bhi.n	800a7ec <_dtoa_r+0x194>
 800a7cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7d0:	00da      	lsls	r2, r3, #3
 800a7d2:	4b84      	ldr	r3, [pc, #528]	; (800a9e4 <_dtoa_r+0x38c>)
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f7f5 fe3d 	bl	8000458 <__aeabi_dcmplt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d049      	beq.n	800a876 <_dtoa_r+0x21e>
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	9302      	str	r3, [sp, #8]
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9316      	str	r3, [sp, #88]	; 0x58
 800a7ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a7ee:	1b9e      	subs	r6, r3, r6
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7f4:	0033      	movs	r3, r6
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	930d      	str	r3, [sp, #52]	; 0x34
 800a7fa:	d504      	bpl.n	800a806 <_dtoa_r+0x1ae>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	1b9b      	subs	r3, r3, r6
 800a800:	930a      	str	r3, [sp, #40]	; 0x28
 800a802:	2300      	movs	r3, #0
 800a804:	930d      	str	r3, [sp, #52]	; 0x34
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	db36      	blt.n	800a87a <_dtoa_r+0x222>
 800a80c:	9a02      	ldr	r2, [sp, #8]
 800a80e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a810:	4694      	mov	ip, r2
 800a812:	4463      	add	r3, ip
 800a814:	930d      	str	r3, [sp, #52]	; 0x34
 800a816:	2300      	movs	r3, #0
 800a818:	9215      	str	r2, [sp, #84]	; 0x54
 800a81a:	930e      	str	r3, [sp, #56]	; 0x38
 800a81c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a81e:	2401      	movs	r4, #1
 800a820:	2b09      	cmp	r3, #9
 800a822:	d864      	bhi.n	800a8ee <_dtoa_r+0x296>
 800a824:	2b05      	cmp	r3, #5
 800a826:	dd02      	ble.n	800a82e <_dtoa_r+0x1d6>
 800a828:	2400      	movs	r4, #0
 800a82a:	3b04      	subs	r3, #4
 800a82c:	9322      	str	r3, [sp, #136]	; 0x88
 800a82e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a830:	1e98      	subs	r0, r3, #2
 800a832:	2803      	cmp	r0, #3
 800a834:	d864      	bhi.n	800a900 <_dtoa_r+0x2a8>
 800a836:	f7f5 fc6f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a83a:	3829      	.short	0x3829
 800a83c:	5836      	.short	0x5836
 800a83e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a840:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a842:	189e      	adds	r6, r3, r2
 800a844:	4b68      	ldr	r3, [pc, #416]	; (800a9e8 <_dtoa_r+0x390>)
 800a846:	18f2      	adds	r2, r6, r3
 800a848:	2a20      	cmp	r2, #32
 800a84a:	dd0f      	ble.n	800a86c <_dtoa_r+0x214>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	1a9b      	subs	r3, r3, r2
 800a850:	409d      	lsls	r5, r3
 800a852:	4b66      	ldr	r3, [pc, #408]	; (800a9ec <_dtoa_r+0x394>)
 800a854:	9802      	ldr	r0, [sp, #8]
 800a856:	18f3      	adds	r3, r6, r3
 800a858:	40d8      	lsrs	r0, r3
 800a85a:	4328      	orrs	r0, r5
 800a85c:	f7f7 fcd0 	bl	8002200 <__aeabi_ui2d>
 800a860:	2301      	movs	r3, #1
 800a862:	4c63      	ldr	r4, [pc, #396]	; (800a9f0 <_dtoa_r+0x398>)
 800a864:	3e01      	subs	r6, #1
 800a866:	1909      	adds	r1, r1, r4
 800a868:	9318      	str	r3, [sp, #96]	; 0x60
 800a86a:	e776      	b.n	800a75a <_dtoa_r+0x102>
 800a86c:	2320      	movs	r3, #32
 800a86e:	9802      	ldr	r0, [sp, #8]
 800a870:	1a9b      	subs	r3, r3, r2
 800a872:	4098      	lsls	r0, r3
 800a874:	e7f2      	b.n	800a85c <_dtoa_r+0x204>
 800a876:	9016      	str	r0, [sp, #88]	; 0x58
 800a878:	e7b8      	b.n	800a7ec <_dtoa_r+0x194>
 800a87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87c:	9a02      	ldr	r2, [sp, #8]
 800a87e:	1a9b      	subs	r3, r3, r2
 800a880:	930a      	str	r3, [sp, #40]	; 0x28
 800a882:	4253      	negs	r3, r2
 800a884:	930e      	str	r3, [sp, #56]	; 0x38
 800a886:	2300      	movs	r3, #0
 800a888:	9315      	str	r3, [sp, #84]	; 0x54
 800a88a:	e7c7      	b.n	800a81c <_dtoa_r+0x1c4>
 800a88c:	2300      	movs	r3, #0
 800a88e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a890:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a892:	930c      	str	r3, [sp, #48]	; 0x30
 800a894:	9307      	str	r3, [sp, #28]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dc13      	bgt.n	800a8c2 <_dtoa_r+0x26a>
 800a89a:	2301      	movs	r3, #1
 800a89c:	001a      	movs	r2, r3
 800a89e:	930c      	str	r3, [sp, #48]	; 0x30
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	9223      	str	r2, [sp, #140]	; 0x8c
 800a8a4:	e00d      	b.n	800a8c2 <_dtoa_r+0x26a>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e7f1      	b.n	800a88e <_dtoa_r+0x236>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8b0:	4694      	mov	ip, r2
 800a8b2:	9b02      	ldr	r3, [sp, #8]
 800a8b4:	4463      	add	r3, ip
 800a8b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	9307      	str	r3, [sp, #28]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dc00      	bgt.n	800a8c2 <_dtoa_r+0x26a>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8c6:	6042      	str	r2, [r0, #4]
 800a8c8:	3204      	adds	r2, #4
 800a8ca:	0015      	movs	r5, r2
 800a8cc:	3514      	adds	r5, #20
 800a8ce:	6841      	ldr	r1, [r0, #4]
 800a8d0:	429d      	cmp	r5, r3
 800a8d2:	d919      	bls.n	800a908 <_dtoa_r+0x2b0>
 800a8d4:	0038      	movs	r0, r7
 800a8d6:	f000 fde3 	bl	800b4a0 <_Balloc>
 800a8da:	9006      	str	r0, [sp, #24]
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d117      	bne.n	800a910 <_dtoa_r+0x2b8>
 800a8e0:	21d5      	movs	r1, #213	; 0xd5
 800a8e2:	0002      	movs	r2, r0
 800a8e4:	4b43      	ldr	r3, [pc, #268]	; (800a9f4 <_dtoa_r+0x39c>)
 800a8e6:	0049      	lsls	r1, r1, #1
 800a8e8:	e6cb      	b.n	800a682 <_dtoa_r+0x2a>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e7de      	b.n	800a8ac <_dtoa_r+0x254>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	940f      	str	r4, [sp, #60]	; 0x3c
 800a8f2:	9322      	str	r3, [sp, #136]	; 0x88
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f8:	9307      	str	r3, [sp, #28]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	3313      	adds	r3, #19
 800a8fe:	e7d0      	b.n	800a8a2 <_dtoa_r+0x24a>
 800a900:	2301      	movs	r3, #1
 800a902:	930f      	str	r3, [sp, #60]	; 0x3c
 800a904:	3b02      	subs	r3, #2
 800a906:	e7f6      	b.n	800a8f6 <_dtoa_r+0x29e>
 800a908:	3101      	adds	r1, #1
 800a90a:	6041      	str	r1, [r0, #4]
 800a90c:	0052      	lsls	r2, r2, #1
 800a90e:	e7dc      	b.n	800a8ca <_dtoa_r+0x272>
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	9a06      	ldr	r2, [sp, #24]
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	9b07      	ldr	r3, [sp, #28]
 800a918:	2b0e      	cmp	r3, #14
 800a91a:	d900      	bls.n	800a91e <_dtoa_r+0x2c6>
 800a91c:	e0eb      	b.n	800aaf6 <_dtoa_r+0x49e>
 800a91e:	2c00      	cmp	r4, #0
 800a920:	d100      	bne.n	800a924 <_dtoa_r+0x2cc>
 800a922:	e0e8      	b.n	800aaf6 <_dtoa_r+0x49e>
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	dd68      	ble.n	800a9fc <_dtoa_r+0x3a4>
 800a92a:	001a      	movs	r2, r3
 800a92c:	210f      	movs	r1, #15
 800a92e:	4b2d      	ldr	r3, [pc, #180]	; (800a9e4 <_dtoa_r+0x38c>)
 800a930:	400a      	ands	r2, r1
 800a932:	00d2      	lsls	r2, r2, #3
 800a934:	189b      	adds	r3, r3, r2
 800a936:	681d      	ldr	r5, [r3, #0]
 800a938:	685e      	ldr	r6, [r3, #4]
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	111c      	asrs	r4, r3, #4
 800a93e:	2302      	movs	r3, #2
 800a940:	9310      	str	r3, [sp, #64]	; 0x40
 800a942:	9b02      	ldr	r3, [sp, #8]
 800a944:	05db      	lsls	r3, r3, #23
 800a946:	d50b      	bpl.n	800a960 <_dtoa_r+0x308>
 800a948:	4b2b      	ldr	r3, [pc, #172]	; (800a9f8 <_dtoa_r+0x3a0>)
 800a94a:	400c      	ands	r4, r1
 800a94c:	6a1a      	ldr	r2, [r3, #32]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a952:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a954:	f7f6 f9d0 	bl	8000cf8 <__aeabi_ddiv>
 800a958:	2303      	movs	r3, #3
 800a95a:	9008      	str	r0, [sp, #32]
 800a95c:	9109      	str	r1, [sp, #36]	; 0x24
 800a95e:	9310      	str	r3, [sp, #64]	; 0x40
 800a960:	4b25      	ldr	r3, [pc, #148]	; (800a9f8 <_dtoa_r+0x3a0>)
 800a962:	9314      	str	r3, [sp, #80]	; 0x50
 800a964:	2c00      	cmp	r4, #0
 800a966:	d108      	bne.n	800a97a <_dtoa_r+0x322>
 800a968:	9808      	ldr	r0, [sp, #32]
 800a96a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a96c:	002a      	movs	r2, r5
 800a96e:	0033      	movs	r3, r6
 800a970:	f7f6 f9c2 	bl	8000cf8 <__aeabi_ddiv>
 800a974:	9008      	str	r0, [sp, #32]
 800a976:	9109      	str	r1, [sp, #36]	; 0x24
 800a978:	e05c      	b.n	800aa34 <_dtoa_r+0x3dc>
 800a97a:	2301      	movs	r3, #1
 800a97c:	421c      	tst	r4, r3
 800a97e:	d00b      	beq.n	800a998 <_dtoa_r+0x340>
 800a980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a982:	0028      	movs	r0, r5
 800a984:	3301      	adds	r3, #1
 800a986:	9310      	str	r3, [sp, #64]	; 0x40
 800a988:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a98a:	0031      	movs	r1, r6
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	f7f6 fdb4 	bl	80014fc <__aeabi_dmul>
 800a994:	0005      	movs	r5, r0
 800a996:	000e      	movs	r6, r1
 800a998:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a99a:	1064      	asrs	r4, r4, #1
 800a99c:	3308      	adds	r3, #8
 800a99e:	e7e0      	b.n	800a962 <_dtoa_r+0x30a>
 800a9a0:	0800c715 	.word	0x0800c715
 800a9a4:	0800c72c 	.word	0x0800c72c
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	0000270f 	.word	0x0000270f
 800a9b0:	0800c711 	.word	0x0800c711
 800a9b4:	0800c714 	.word	0x0800c714
 800a9b8:	0800c6e4 	.word	0x0800c6e4
 800a9bc:	0800c6e5 	.word	0x0800c6e5
 800a9c0:	3ff00000 	.word	0x3ff00000
 800a9c4:	fffffc01 	.word	0xfffffc01
 800a9c8:	3ff80000 	.word	0x3ff80000
 800a9cc:	636f4361 	.word	0x636f4361
 800a9d0:	3fd287a7 	.word	0x3fd287a7
 800a9d4:	8b60c8b3 	.word	0x8b60c8b3
 800a9d8:	3fc68a28 	.word	0x3fc68a28
 800a9dc:	509f79fb 	.word	0x509f79fb
 800a9e0:	3fd34413 	.word	0x3fd34413
 800a9e4:	0800c820 	.word	0x0800c820
 800a9e8:	00000432 	.word	0x00000432
 800a9ec:	00000412 	.word	0x00000412
 800a9f0:	fe100000 	.word	0xfe100000
 800a9f4:	0800c787 	.word	0x0800c787
 800a9f8:	0800c7f8 	.word	0x0800c7f8
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	9310      	str	r3, [sp, #64]	; 0x40
 800aa00:	9b02      	ldr	r3, [sp, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <_dtoa_r+0x3dc>
 800aa06:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa08:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa0a:	425c      	negs	r4, r3
 800aa0c:	230f      	movs	r3, #15
 800aa0e:	4ab6      	ldr	r2, [pc, #728]	; (800ace8 <_dtoa_r+0x690>)
 800aa10:	4023      	ands	r3, r4
 800aa12:	00db      	lsls	r3, r3, #3
 800aa14:	18d3      	adds	r3, r2, r3
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f7f6 fd6f 	bl	80014fc <__aeabi_dmul>
 800aa1e:	2601      	movs	r6, #1
 800aa20:	2300      	movs	r3, #0
 800aa22:	9008      	str	r0, [sp, #32]
 800aa24:	9109      	str	r1, [sp, #36]	; 0x24
 800aa26:	4db1      	ldr	r5, [pc, #708]	; (800acec <_dtoa_r+0x694>)
 800aa28:	1124      	asrs	r4, r4, #4
 800aa2a:	2c00      	cmp	r4, #0
 800aa2c:	d000      	beq.n	800aa30 <_dtoa_r+0x3d8>
 800aa2e:	e094      	b.n	800ab5a <_dtoa_r+0x502>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d19f      	bne.n	800a974 <_dtoa_r+0x31c>
 800aa34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d100      	bne.n	800aa3c <_dtoa_r+0x3e4>
 800aa3a:	e09b      	b.n	800ab74 <_dtoa_r+0x51c>
 800aa3c:	9c08      	ldr	r4, [sp, #32]
 800aa3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa40:	2200      	movs	r2, #0
 800aa42:	0020      	movs	r0, r4
 800aa44:	0029      	movs	r1, r5
 800aa46:	4baa      	ldr	r3, [pc, #680]	; (800acf0 <_dtoa_r+0x698>)
 800aa48:	f7f5 fd06 	bl	8000458 <__aeabi_dcmplt>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d100      	bne.n	800aa52 <_dtoa_r+0x3fa>
 800aa50:	e090      	b.n	800ab74 <_dtoa_r+0x51c>
 800aa52:	9b07      	ldr	r3, [sp, #28]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d100      	bne.n	800aa5a <_dtoa_r+0x402>
 800aa58:	e08c      	b.n	800ab74 <_dtoa_r+0x51c>
 800aa5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd46      	ble.n	800aaee <_dtoa_r+0x496>
 800aa60:	9b02      	ldr	r3, [sp, #8]
 800aa62:	2200      	movs	r2, #0
 800aa64:	0020      	movs	r0, r4
 800aa66:	0029      	movs	r1, r5
 800aa68:	1e5e      	subs	r6, r3, #1
 800aa6a:	4ba2      	ldr	r3, [pc, #648]	; (800acf4 <_dtoa_r+0x69c>)
 800aa6c:	f7f6 fd46 	bl	80014fc <__aeabi_dmul>
 800aa70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa72:	9008      	str	r0, [sp, #32]
 800aa74:	9109      	str	r1, [sp, #36]	; 0x24
 800aa76:	3301      	adds	r3, #1
 800aa78:	9310      	str	r3, [sp, #64]	; 0x40
 800aa7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa7c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa7e:	9c08      	ldr	r4, [sp, #32]
 800aa80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aa82:	9314      	str	r3, [sp, #80]	; 0x50
 800aa84:	f7f7 fb8c 	bl	80021a0 <__aeabi_i2d>
 800aa88:	0022      	movs	r2, r4
 800aa8a:	002b      	movs	r3, r5
 800aa8c:	f7f6 fd36 	bl	80014fc <__aeabi_dmul>
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b99      	ldr	r3, [pc, #612]	; (800acf8 <_dtoa_r+0x6a0>)
 800aa94:	f7f5 fdf4 	bl	8000680 <__aeabi_dadd>
 800aa98:	9010      	str	r0, [sp, #64]	; 0x40
 800aa9a:	9111      	str	r1, [sp, #68]	; 0x44
 800aa9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaa0:	9208      	str	r2, [sp, #32]
 800aaa2:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa4:	4a95      	ldr	r2, [pc, #596]	; (800acfc <_dtoa_r+0x6a4>)
 800aaa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaa8:	4694      	mov	ip, r2
 800aaaa:	4463      	add	r3, ip
 800aaac:	9317      	str	r3, [sp, #92]	; 0x5c
 800aaae:	9309      	str	r3, [sp, #36]	; 0x24
 800aab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d161      	bne.n	800ab7a <_dtoa_r+0x522>
 800aab6:	2200      	movs	r2, #0
 800aab8:	0020      	movs	r0, r4
 800aaba:	0029      	movs	r1, r5
 800aabc:	4b90      	ldr	r3, [pc, #576]	; (800ad00 <_dtoa_r+0x6a8>)
 800aabe:	f7f6 ff89 	bl	80019d4 <__aeabi_dsub>
 800aac2:	9a08      	ldr	r2, [sp, #32]
 800aac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aac6:	0004      	movs	r4, r0
 800aac8:	000d      	movs	r5, r1
 800aaca:	f7f5 fcd9 	bl	8000480 <__aeabi_dcmpgt>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d000      	beq.n	800aad4 <_dtoa_r+0x47c>
 800aad2:	e2af      	b.n	800b034 <_dtoa_r+0x9dc>
 800aad4:	488b      	ldr	r0, [pc, #556]	; (800ad04 <_dtoa_r+0x6ac>)
 800aad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aad8:	4684      	mov	ip, r0
 800aada:	4461      	add	r1, ip
 800aadc:	000b      	movs	r3, r1
 800aade:	0020      	movs	r0, r4
 800aae0:	0029      	movs	r1, r5
 800aae2:	9a08      	ldr	r2, [sp, #32]
 800aae4:	f7f5 fcb8 	bl	8000458 <__aeabi_dcmplt>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	d000      	beq.n	800aaee <_dtoa_r+0x496>
 800aaec:	e29f      	b.n	800b02e <_dtoa_r+0x9d6>
 800aaee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaf0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800aaf2:	9308      	str	r3, [sp, #32]
 800aaf4:	9409      	str	r4, [sp, #36]	; 0x24
 800aaf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da00      	bge.n	800aafe <_dtoa_r+0x4a6>
 800aafc:	e172      	b.n	800ade4 <_dtoa_r+0x78c>
 800aafe:	9a02      	ldr	r2, [sp, #8]
 800ab00:	2a0e      	cmp	r2, #14
 800ab02:	dd00      	ble.n	800ab06 <_dtoa_r+0x4ae>
 800ab04:	e16e      	b.n	800ade4 <_dtoa_r+0x78c>
 800ab06:	4b78      	ldr	r3, [pc, #480]	; (800ace8 <_dtoa_r+0x690>)
 800ab08:	00d2      	lsls	r2, r2, #3
 800ab0a:	189b      	adds	r3, r3, r2
 800ab0c:	685c      	ldr	r4, [r3, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	930a      	str	r3, [sp, #40]	; 0x28
 800ab12:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	db00      	blt.n	800ab1c <_dtoa_r+0x4c4>
 800ab1a:	e0f7      	b.n	800ad0c <_dtoa_r+0x6b4>
 800ab1c:	9b07      	ldr	r3, [sp, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	dd00      	ble.n	800ab24 <_dtoa_r+0x4cc>
 800ab22:	e0f3      	b.n	800ad0c <_dtoa_r+0x6b4>
 800ab24:	d000      	beq.n	800ab28 <_dtoa_r+0x4d0>
 800ab26:	e282      	b.n	800b02e <_dtoa_r+0x9d6>
 800ab28:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4b74      	ldr	r3, [pc, #464]	; (800ad00 <_dtoa_r+0x6a8>)
 800ab30:	f7f6 fce4 	bl	80014fc <__aeabi_dmul>
 800ab34:	9a08      	ldr	r2, [sp, #32]
 800ab36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab38:	f7f5 fcac 	bl	8000494 <__aeabi_dcmpge>
 800ab3c:	9e07      	ldr	r6, [sp, #28]
 800ab3e:	0035      	movs	r5, r6
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d000      	beq.n	800ab46 <_dtoa_r+0x4ee>
 800ab44:	e259      	b.n	800affa <_dtoa_r+0x9a2>
 800ab46:	9b06      	ldr	r3, [sp, #24]
 800ab48:	9a06      	ldr	r2, [sp, #24]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	9308      	str	r3, [sp, #32]
 800ab4e:	2331      	movs	r3, #49	; 0x31
 800ab50:	7013      	strb	r3, [r2, #0]
 800ab52:	9b02      	ldr	r3, [sp, #8]
 800ab54:	3301      	adds	r3, #1
 800ab56:	9302      	str	r3, [sp, #8]
 800ab58:	e254      	b.n	800b004 <_dtoa_r+0x9ac>
 800ab5a:	4234      	tst	r4, r6
 800ab5c:	d007      	beq.n	800ab6e <_dtoa_r+0x516>
 800ab5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab60:	3301      	adds	r3, #1
 800ab62:	9310      	str	r3, [sp, #64]	; 0x40
 800ab64:	682a      	ldr	r2, [r5, #0]
 800ab66:	686b      	ldr	r3, [r5, #4]
 800ab68:	f7f6 fcc8 	bl	80014fc <__aeabi_dmul>
 800ab6c:	0033      	movs	r3, r6
 800ab6e:	1064      	asrs	r4, r4, #1
 800ab70:	3508      	adds	r5, #8
 800ab72:	e75a      	b.n	800aa2a <_dtoa_r+0x3d2>
 800ab74:	9e02      	ldr	r6, [sp, #8]
 800ab76:	9b07      	ldr	r3, [sp, #28]
 800ab78:	e780      	b.n	800aa7c <_dtoa_r+0x424>
 800ab7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ab7e:	1e5a      	subs	r2, r3, #1
 800ab80:	4b59      	ldr	r3, [pc, #356]	; (800ace8 <_dtoa_r+0x690>)
 800ab82:	00d2      	lsls	r2, r2, #3
 800ab84:	189b      	adds	r3, r3, r2
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	2900      	cmp	r1, #0
 800ab8c:	d051      	beq.n	800ac32 <_dtoa_r+0x5da>
 800ab8e:	2000      	movs	r0, #0
 800ab90:	495d      	ldr	r1, [pc, #372]	; (800ad08 <_dtoa_r+0x6b0>)
 800ab92:	f7f6 f8b1 	bl	8000cf8 <__aeabi_ddiv>
 800ab96:	9a08      	ldr	r2, [sp, #32]
 800ab98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9a:	f7f6 ff1b 	bl	80019d4 <__aeabi_dsub>
 800ab9e:	9a06      	ldr	r2, [sp, #24]
 800aba0:	9b06      	ldr	r3, [sp, #24]
 800aba2:	4694      	mov	ip, r2
 800aba4:	9317      	str	r3, [sp, #92]	; 0x5c
 800aba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aba8:	9010      	str	r0, [sp, #64]	; 0x40
 800abaa:	9111      	str	r1, [sp, #68]	; 0x44
 800abac:	4463      	add	r3, ip
 800abae:	9319      	str	r3, [sp, #100]	; 0x64
 800abb0:	0029      	movs	r1, r5
 800abb2:	0020      	movs	r0, r4
 800abb4:	f7f7 fabe 	bl	8002134 <__aeabi_d2iz>
 800abb8:	9014      	str	r0, [sp, #80]	; 0x50
 800abba:	f7f7 faf1 	bl	80021a0 <__aeabi_i2d>
 800abbe:	0002      	movs	r2, r0
 800abc0:	000b      	movs	r3, r1
 800abc2:	0020      	movs	r0, r4
 800abc4:	0029      	movs	r1, r5
 800abc6:	f7f6 ff05 	bl	80019d4 <__aeabi_dsub>
 800abca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abcc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800abce:	3301      	adds	r3, #1
 800abd0:	9308      	str	r3, [sp, #32]
 800abd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abd4:	0004      	movs	r4, r0
 800abd6:	3330      	adds	r3, #48	; 0x30
 800abd8:	7013      	strb	r3, [r2, #0]
 800abda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abde:	000d      	movs	r5, r1
 800abe0:	f7f5 fc3a 	bl	8000458 <__aeabi_dcmplt>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d175      	bne.n	800acd4 <_dtoa_r+0x67c>
 800abe8:	0022      	movs	r2, r4
 800abea:	002b      	movs	r3, r5
 800abec:	2000      	movs	r0, #0
 800abee:	4940      	ldr	r1, [pc, #256]	; (800acf0 <_dtoa_r+0x698>)
 800abf0:	f7f6 fef0 	bl	80019d4 <__aeabi_dsub>
 800abf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abf8:	f7f5 fc2e 	bl	8000458 <__aeabi_dcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d000      	beq.n	800ac02 <_dtoa_r+0x5aa>
 800ac00:	e0d2      	b.n	800ada8 <_dtoa_r+0x750>
 800ac02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac04:	9a08      	ldr	r2, [sp, #32]
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d100      	bne.n	800ac0c <_dtoa_r+0x5b4>
 800ac0a:	e770      	b.n	800aaee <_dtoa_r+0x496>
 800ac0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac10:	2200      	movs	r2, #0
 800ac12:	4b38      	ldr	r3, [pc, #224]	; (800acf4 <_dtoa_r+0x69c>)
 800ac14:	f7f6 fc72 	bl	80014fc <__aeabi_dmul>
 800ac18:	4b36      	ldr	r3, [pc, #216]	; (800acf4 <_dtoa_r+0x69c>)
 800ac1a:	9010      	str	r0, [sp, #64]	; 0x40
 800ac1c:	9111      	str	r1, [sp, #68]	; 0x44
 800ac1e:	2200      	movs	r2, #0
 800ac20:	0020      	movs	r0, r4
 800ac22:	0029      	movs	r1, r5
 800ac24:	f7f6 fc6a 	bl	80014fc <__aeabi_dmul>
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	0004      	movs	r4, r0
 800ac2c:	000d      	movs	r5, r1
 800ac2e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac30:	e7be      	b.n	800abb0 <_dtoa_r+0x558>
 800ac32:	9808      	ldr	r0, [sp, #32]
 800ac34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac36:	f7f6 fc61 	bl	80014fc <__aeabi_dmul>
 800ac3a:	9a06      	ldr	r2, [sp, #24]
 800ac3c:	9b06      	ldr	r3, [sp, #24]
 800ac3e:	4694      	mov	ip, r2
 800ac40:	9308      	str	r3, [sp, #32]
 800ac42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac44:	9010      	str	r0, [sp, #64]	; 0x40
 800ac46:	9111      	str	r1, [sp, #68]	; 0x44
 800ac48:	4463      	add	r3, ip
 800ac4a:	9319      	str	r3, [sp, #100]	; 0x64
 800ac4c:	0029      	movs	r1, r5
 800ac4e:	0020      	movs	r0, r4
 800ac50:	f7f7 fa70 	bl	8002134 <__aeabi_d2iz>
 800ac54:	9017      	str	r0, [sp, #92]	; 0x5c
 800ac56:	f7f7 faa3 	bl	80021a0 <__aeabi_i2d>
 800ac5a:	0002      	movs	r2, r0
 800ac5c:	000b      	movs	r3, r1
 800ac5e:	0020      	movs	r0, r4
 800ac60:	0029      	movs	r1, r5
 800ac62:	f7f6 feb7 	bl	80019d4 <__aeabi_dsub>
 800ac66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac68:	9a08      	ldr	r2, [sp, #32]
 800ac6a:	3330      	adds	r3, #48	; 0x30
 800ac6c:	7013      	strb	r3, [r2, #0]
 800ac6e:	0013      	movs	r3, r2
 800ac70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac72:	3301      	adds	r3, #1
 800ac74:	0004      	movs	r4, r0
 800ac76:	000d      	movs	r5, r1
 800ac78:	9308      	str	r3, [sp, #32]
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d12c      	bne.n	800acd8 <_dtoa_r+0x680>
 800ac7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac80:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac82:	9a06      	ldr	r2, [sp, #24]
 800ac84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac86:	4694      	mov	ip, r2
 800ac88:	4463      	add	r3, ip
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	9308      	str	r3, [sp, #32]
 800ac8e:	4b1e      	ldr	r3, [pc, #120]	; (800ad08 <_dtoa_r+0x6b0>)
 800ac90:	f7f5 fcf6 	bl	8000680 <__aeabi_dadd>
 800ac94:	0002      	movs	r2, r0
 800ac96:	000b      	movs	r3, r1
 800ac98:	0020      	movs	r0, r4
 800ac9a:	0029      	movs	r1, r5
 800ac9c:	f7f5 fbf0 	bl	8000480 <__aeabi_dcmpgt>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d000      	beq.n	800aca6 <_dtoa_r+0x64e>
 800aca4:	e080      	b.n	800ada8 <_dtoa_r+0x750>
 800aca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acaa:	2000      	movs	r0, #0
 800acac:	4916      	ldr	r1, [pc, #88]	; (800ad08 <_dtoa_r+0x6b0>)
 800acae:	f7f6 fe91 	bl	80019d4 <__aeabi_dsub>
 800acb2:	0002      	movs	r2, r0
 800acb4:	000b      	movs	r3, r1
 800acb6:	0020      	movs	r0, r4
 800acb8:	0029      	movs	r1, r5
 800acba:	f7f5 fbcd 	bl	8000458 <__aeabi_dcmplt>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d100      	bne.n	800acc4 <_dtoa_r+0x66c>
 800acc2:	e714      	b.n	800aaee <_dtoa_r+0x496>
 800acc4:	9b08      	ldr	r3, [sp, #32]
 800acc6:	001a      	movs	r2, r3
 800acc8:	3a01      	subs	r2, #1
 800acca:	9208      	str	r2, [sp, #32]
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	2a30      	cmp	r2, #48	; 0x30
 800acd0:	d0f8      	beq.n	800acc4 <_dtoa_r+0x66c>
 800acd2:	9308      	str	r3, [sp, #32]
 800acd4:	9602      	str	r6, [sp, #8]
 800acd6:	e055      	b.n	800ad84 <_dtoa_r+0x72c>
 800acd8:	2200      	movs	r2, #0
 800acda:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <_dtoa_r+0x69c>)
 800acdc:	f7f6 fc0e 	bl	80014fc <__aeabi_dmul>
 800ace0:	0004      	movs	r4, r0
 800ace2:	000d      	movs	r5, r1
 800ace4:	e7b2      	b.n	800ac4c <_dtoa_r+0x5f4>
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	0800c820 	.word	0x0800c820
 800acec:	0800c7f8 	.word	0x0800c7f8
 800acf0:	3ff00000 	.word	0x3ff00000
 800acf4:	40240000 	.word	0x40240000
 800acf8:	401c0000 	.word	0x401c0000
 800acfc:	fcc00000 	.word	0xfcc00000
 800ad00:	40140000 	.word	0x40140000
 800ad04:	7cc00000 	.word	0x7cc00000
 800ad08:	3fe00000 	.word	0x3fe00000
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	9e06      	ldr	r6, [sp, #24]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	199b      	adds	r3, r3, r6
 800ad14:	930c      	str	r3, [sp, #48]	; 0x30
 800ad16:	9c08      	ldr	r4, [sp, #32]
 800ad18:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ad1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad1e:	0020      	movs	r0, r4
 800ad20:	0029      	movs	r1, r5
 800ad22:	f7f5 ffe9 	bl	8000cf8 <__aeabi_ddiv>
 800ad26:	f7f7 fa05 	bl	8002134 <__aeabi_d2iz>
 800ad2a:	9007      	str	r0, [sp, #28]
 800ad2c:	f7f7 fa38 	bl	80021a0 <__aeabi_i2d>
 800ad30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad34:	f7f6 fbe2 	bl	80014fc <__aeabi_dmul>
 800ad38:	0002      	movs	r2, r0
 800ad3a:	000b      	movs	r3, r1
 800ad3c:	0020      	movs	r0, r4
 800ad3e:	0029      	movs	r1, r5
 800ad40:	f7f6 fe48 	bl	80019d4 <__aeabi_dsub>
 800ad44:	0033      	movs	r3, r6
 800ad46:	9a07      	ldr	r2, [sp, #28]
 800ad48:	3601      	adds	r6, #1
 800ad4a:	3230      	adds	r2, #48	; 0x30
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad50:	9608      	str	r6, [sp, #32]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d139      	bne.n	800adca <_dtoa_r+0x772>
 800ad56:	0002      	movs	r2, r0
 800ad58:	000b      	movs	r3, r1
 800ad5a:	f7f5 fc91 	bl	8000680 <__aeabi_dadd>
 800ad5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad62:	0004      	movs	r4, r0
 800ad64:	000d      	movs	r5, r1
 800ad66:	f7f5 fb8b 	bl	8000480 <__aeabi_dcmpgt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d11b      	bne.n	800ada6 <_dtoa_r+0x74e>
 800ad6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad72:	0020      	movs	r0, r4
 800ad74:	0029      	movs	r1, r5
 800ad76:	f7f5 fb69 	bl	800044c <__aeabi_dcmpeq>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d002      	beq.n	800ad84 <_dtoa_r+0x72c>
 800ad7e:	9b07      	ldr	r3, [sp, #28]
 800ad80:	07db      	lsls	r3, r3, #31
 800ad82:	d410      	bmi.n	800ada6 <_dtoa_r+0x74e>
 800ad84:	0038      	movs	r0, r7
 800ad86:	9905      	ldr	r1, [sp, #20]
 800ad88:	f000 fbce 	bl	800b528 <_Bfree>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9a08      	ldr	r2, [sp, #32]
 800ad90:	9802      	ldr	r0, [sp, #8]
 800ad92:	7013      	strb	r3, [r2, #0]
 800ad94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad96:	3001      	adds	r0, #1
 800ad98:	6018      	str	r0, [r3, #0]
 800ad9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d100      	bne.n	800ada2 <_dtoa_r+0x74a>
 800ada0:	e4a6      	b.n	800a6f0 <_dtoa_r+0x98>
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e4a4      	b.n	800a6f0 <_dtoa_r+0x98>
 800ada6:	9e02      	ldr	r6, [sp, #8]
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	9308      	str	r3, [sp, #32]
 800adac:	3b01      	subs	r3, #1
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	2a39      	cmp	r2, #57	; 0x39
 800adb2:	d106      	bne.n	800adc2 <_dtoa_r+0x76a>
 800adb4:	9a06      	ldr	r2, [sp, #24]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d1f7      	bne.n	800adaa <_dtoa_r+0x752>
 800adba:	2230      	movs	r2, #48	; 0x30
 800adbc:	9906      	ldr	r1, [sp, #24]
 800adbe:	3601      	adds	r6, #1
 800adc0:	700a      	strb	r2, [r1, #0]
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	3201      	adds	r2, #1
 800adc6:	701a      	strb	r2, [r3, #0]
 800adc8:	e784      	b.n	800acd4 <_dtoa_r+0x67c>
 800adca:	2200      	movs	r2, #0
 800adcc:	4baa      	ldr	r3, [pc, #680]	; (800b078 <_dtoa_r+0xa20>)
 800adce:	f7f6 fb95 	bl	80014fc <__aeabi_dmul>
 800add2:	2200      	movs	r2, #0
 800add4:	2300      	movs	r3, #0
 800add6:	0004      	movs	r4, r0
 800add8:	000d      	movs	r5, r1
 800adda:	f7f5 fb37 	bl	800044c <__aeabi_dcmpeq>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d09b      	beq.n	800ad1a <_dtoa_r+0x6c2>
 800ade2:	e7cf      	b.n	800ad84 <_dtoa_r+0x72c>
 800ade4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ade6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ade8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800adea:	2d00      	cmp	r5, #0
 800adec:	d012      	beq.n	800ae14 <_dtoa_r+0x7bc>
 800adee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adf0:	2a01      	cmp	r2, #1
 800adf2:	dc66      	bgt.n	800aec2 <_dtoa_r+0x86a>
 800adf4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adf6:	2a00      	cmp	r2, #0
 800adf8:	d05d      	beq.n	800aeb6 <_dtoa_r+0x85e>
 800adfa:	4aa0      	ldr	r2, [pc, #640]	; (800b07c <_dtoa_r+0xa24>)
 800adfc:	189b      	adds	r3, r3, r2
 800adfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae00:	2101      	movs	r1, #1
 800ae02:	18d2      	adds	r2, r2, r3
 800ae04:	920a      	str	r2, [sp, #40]	; 0x28
 800ae06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae08:	0038      	movs	r0, r7
 800ae0a:	18d3      	adds	r3, r2, r3
 800ae0c:	930d      	str	r3, [sp, #52]	; 0x34
 800ae0e:	f000 fc3b 	bl	800b688 <__i2b>
 800ae12:	0005      	movs	r5, r0
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	dd0e      	ble.n	800ae36 <_dtoa_r+0x7de>
 800ae18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dd0b      	ble.n	800ae36 <_dtoa_r+0x7de>
 800ae1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae20:	0023      	movs	r3, r4
 800ae22:	4294      	cmp	r4, r2
 800ae24:	dd00      	ble.n	800ae28 <_dtoa_r+0x7d0>
 800ae26:	0013      	movs	r3, r2
 800ae28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae2a:	1ae4      	subs	r4, r4, r3
 800ae2c:	1ad2      	subs	r2, r2, r3
 800ae2e:	920a      	str	r2, [sp, #40]	; 0x28
 800ae30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	930d      	str	r3, [sp, #52]	; 0x34
 800ae36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01f      	beq.n	800ae7c <_dtoa_r+0x824>
 800ae3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d054      	beq.n	800aeec <_dtoa_r+0x894>
 800ae42:	2e00      	cmp	r6, #0
 800ae44:	dd11      	ble.n	800ae6a <_dtoa_r+0x812>
 800ae46:	0029      	movs	r1, r5
 800ae48:	0032      	movs	r2, r6
 800ae4a:	0038      	movs	r0, r7
 800ae4c:	f000 fce2 	bl	800b814 <__pow5mult>
 800ae50:	9a05      	ldr	r2, [sp, #20]
 800ae52:	0001      	movs	r1, r0
 800ae54:	0005      	movs	r5, r0
 800ae56:	0038      	movs	r0, r7
 800ae58:	f000 fc2c 	bl	800b6b4 <__multiply>
 800ae5c:	9905      	ldr	r1, [sp, #20]
 800ae5e:	9014      	str	r0, [sp, #80]	; 0x50
 800ae60:	0038      	movs	r0, r7
 800ae62:	f000 fb61 	bl	800b528 <_Bfree>
 800ae66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae68:	9305      	str	r3, [sp, #20]
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae6c:	1b9a      	subs	r2, r3, r6
 800ae6e:	42b3      	cmp	r3, r6
 800ae70:	d004      	beq.n	800ae7c <_dtoa_r+0x824>
 800ae72:	0038      	movs	r0, r7
 800ae74:	9905      	ldr	r1, [sp, #20]
 800ae76:	f000 fccd 	bl	800b814 <__pow5mult>
 800ae7a:	9005      	str	r0, [sp, #20]
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	0038      	movs	r0, r7
 800ae80:	f000 fc02 	bl	800b688 <__i2b>
 800ae84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae86:	0006      	movs	r6, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dd31      	ble.n	800aef0 <_dtoa_r+0x898>
 800ae8c:	001a      	movs	r2, r3
 800ae8e:	0001      	movs	r1, r0
 800ae90:	0038      	movs	r0, r7
 800ae92:	f000 fcbf 	bl	800b814 <__pow5mult>
 800ae96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae98:	0006      	movs	r6, r0
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	dd2d      	ble.n	800aefa <_dtoa_r+0x8a2>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	930e      	str	r3, [sp, #56]	; 0x38
 800aea2:	6933      	ldr	r3, [r6, #16]
 800aea4:	3303      	adds	r3, #3
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	18f3      	adds	r3, r6, r3
 800aeaa:	6858      	ldr	r0, [r3, #4]
 800aeac:	f000 fba4 	bl	800b5f8 <__hi0bits>
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	1a18      	subs	r0, r3, r0
 800aeb4:	e039      	b.n	800af2a <_dtoa_r+0x8d2>
 800aeb6:	2336      	movs	r3, #54	; 0x36
 800aeb8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aeba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aebc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	e79d      	b.n	800adfe <_dtoa_r+0x7a6>
 800aec2:	9b07      	ldr	r3, [sp, #28]
 800aec4:	1e5e      	subs	r6, r3, #1
 800aec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aec8:	42b3      	cmp	r3, r6
 800aeca:	db07      	blt.n	800aedc <_dtoa_r+0x884>
 800aecc:	1b9e      	subs	r6, r3, r6
 800aece:	9b07      	ldr	r3, [sp, #28]
 800aed0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da93      	bge.n	800adfe <_dtoa_r+0x7a6>
 800aed6:	1ae4      	subs	r4, r4, r3
 800aed8:	2300      	movs	r3, #0
 800aeda:	e790      	b.n	800adfe <_dtoa_r+0x7a6>
 800aedc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aede:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aee0:	1af3      	subs	r3, r6, r3
 800aee2:	18d3      	adds	r3, r2, r3
 800aee4:	960e      	str	r6, [sp, #56]	; 0x38
 800aee6:	9315      	str	r3, [sp, #84]	; 0x54
 800aee8:	2600      	movs	r6, #0
 800aeea:	e7f0      	b.n	800aece <_dtoa_r+0x876>
 800aeec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeee:	e7c0      	b.n	800ae72 <_dtoa_r+0x81a>
 800aef0:	2300      	movs	r3, #0
 800aef2:	930e      	str	r3, [sp, #56]	; 0x38
 800aef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	dc13      	bgt.n	800af22 <_dtoa_r+0x8ca>
 800aefa:	2300      	movs	r3, #0
 800aefc:	930e      	str	r3, [sp, #56]	; 0x38
 800aefe:	9b08      	ldr	r3, [sp, #32]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10e      	bne.n	800af22 <_dtoa_r+0x8ca>
 800af04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af06:	031b      	lsls	r3, r3, #12
 800af08:	d10b      	bne.n	800af22 <_dtoa_r+0x8ca>
 800af0a:	4b5d      	ldr	r3, [pc, #372]	; (800b080 <_dtoa_r+0xa28>)
 800af0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af0e:	4213      	tst	r3, r2
 800af10:	d007      	beq.n	800af22 <_dtoa_r+0x8ca>
 800af12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af14:	3301      	adds	r3, #1
 800af16:	930a      	str	r3, [sp, #40]	; 0x28
 800af18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af1a:	3301      	adds	r3, #1
 800af1c:	930d      	str	r3, [sp, #52]	; 0x34
 800af1e:	2301      	movs	r3, #1
 800af20:	930e      	str	r3, [sp, #56]	; 0x38
 800af22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af24:	2001      	movs	r0, #1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1bb      	bne.n	800aea2 <_dtoa_r+0x84a>
 800af2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af2c:	221f      	movs	r2, #31
 800af2e:	1818      	adds	r0, r3, r0
 800af30:	0003      	movs	r3, r0
 800af32:	4013      	ands	r3, r2
 800af34:	4210      	tst	r0, r2
 800af36:	d046      	beq.n	800afc6 <_dtoa_r+0x96e>
 800af38:	3201      	adds	r2, #1
 800af3a:	1ad2      	subs	r2, r2, r3
 800af3c:	2a04      	cmp	r2, #4
 800af3e:	dd3f      	ble.n	800afc0 <_dtoa_r+0x968>
 800af40:	221c      	movs	r2, #28
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af46:	18e4      	adds	r4, r4, r3
 800af48:	18d2      	adds	r2, r2, r3
 800af4a:	920a      	str	r2, [sp, #40]	; 0x28
 800af4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af4e:	18d3      	adds	r3, r2, r3
 800af50:	930d      	str	r3, [sp, #52]	; 0x34
 800af52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af54:	2b00      	cmp	r3, #0
 800af56:	dd05      	ble.n	800af64 <_dtoa_r+0x90c>
 800af58:	001a      	movs	r2, r3
 800af5a:	0038      	movs	r0, r7
 800af5c:	9905      	ldr	r1, [sp, #20]
 800af5e:	f000 fcb5 	bl	800b8cc <__lshift>
 800af62:	9005      	str	r0, [sp, #20]
 800af64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af66:	2b00      	cmp	r3, #0
 800af68:	dd05      	ble.n	800af76 <_dtoa_r+0x91e>
 800af6a:	0031      	movs	r1, r6
 800af6c:	001a      	movs	r2, r3
 800af6e:	0038      	movs	r0, r7
 800af70:	f000 fcac 	bl	800b8cc <__lshift>
 800af74:	0006      	movs	r6, r0
 800af76:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d026      	beq.n	800afca <_dtoa_r+0x972>
 800af7c:	0031      	movs	r1, r6
 800af7e:	9805      	ldr	r0, [sp, #20]
 800af80:	f000 fd12 	bl	800b9a8 <__mcmp>
 800af84:	2800      	cmp	r0, #0
 800af86:	da20      	bge.n	800afca <_dtoa_r+0x972>
 800af88:	9b02      	ldr	r3, [sp, #8]
 800af8a:	220a      	movs	r2, #10
 800af8c:	3b01      	subs	r3, #1
 800af8e:	9302      	str	r3, [sp, #8]
 800af90:	0038      	movs	r0, r7
 800af92:	2300      	movs	r3, #0
 800af94:	9905      	ldr	r1, [sp, #20]
 800af96:	f000 faeb 	bl	800b570 <__multadd>
 800af9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af9c:	9005      	str	r0, [sp, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d100      	bne.n	800afa4 <_dtoa_r+0x94c>
 800afa2:	e166      	b.n	800b272 <_dtoa_r+0xc1a>
 800afa4:	2300      	movs	r3, #0
 800afa6:	0029      	movs	r1, r5
 800afa8:	220a      	movs	r2, #10
 800afaa:	0038      	movs	r0, r7
 800afac:	f000 fae0 	bl	800b570 <__multadd>
 800afb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb2:	0005      	movs	r5, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dc47      	bgt.n	800b048 <_dtoa_r+0x9f0>
 800afb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afba:	2b02      	cmp	r3, #2
 800afbc:	dc0d      	bgt.n	800afda <_dtoa_r+0x982>
 800afbe:	e043      	b.n	800b048 <_dtoa_r+0x9f0>
 800afc0:	2a04      	cmp	r2, #4
 800afc2:	d0c6      	beq.n	800af52 <_dtoa_r+0x8fa>
 800afc4:	0013      	movs	r3, r2
 800afc6:	331c      	adds	r3, #28
 800afc8:	e7bc      	b.n	800af44 <_dtoa_r+0x8ec>
 800afca:	9b07      	ldr	r3, [sp, #28]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dc35      	bgt.n	800b03c <_dtoa_r+0x9e4>
 800afd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	dd32      	ble.n	800b03c <_dtoa_r+0x9e4>
 800afd6:	9b07      	ldr	r3, [sp, #28]
 800afd8:	930c      	str	r3, [sp, #48]	; 0x30
 800afda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10c      	bne.n	800affa <_dtoa_r+0x9a2>
 800afe0:	0031      	movs	r1, r6
 800afe2:	2205      	movs	r2, #5
 800afe4:	0038      	movs	r0, r7
 800afe6:	f000 fac3 	bl	800b570 <__multadd>
 800afea:	0006      	movs	r6, r0
 800afec:	0001      	movs	r1, r0
 800afee:	9805      	ldr	r0, [sp, #20]
 800aff0:	f000 fcda 	bl	800b9a8 <__mcmp>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	dd00      	ble.n	800affa <_dtoa_r+0x9a2>
 800aff8:	e5a5      	b.n	800ab46 <_dtoa_r+0x4ee>
 800affa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800affc:	43db      	mvns	r3, r3
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	9b06      	ldr	r3, [sp, #24]
 800b002:	9308      	str	r3, [sp, #32]
 800b004:	2400      	movs	r4, #0
 800b006:	0031      	movs	r1, r6
 800b008:	0038      	movs	r0, r7
 800b00a:	f000 fa8d 	bl	800b528 <_Bfree>
 800b00e:	2d00      	cmp	r5, #0
 800b010:	d100      	bne.n	800b014 <_dtoa_r+0x9bc>
 800b012:	e6b7      	b.n	800ad84 <_dtoa_r+0x72c>
 800b014:	2c00      	cmp	r4, #0
 800b016:	d005      	beq.n	800b024 <_dtoa_r+0x9cc>
 800b018:	42ac      	cmp	r4, r5
 800b01a:	d003      	beq.n	800b024 <_dtoa_r+0x9cc>
 800b01c:	0021      	movs	r1, r4
 800b01e:	0038      	movs	r0, r7
 800b020:	f000 fa82 	bl	800b528 <_Bfree>
 800b024:	0029      	movs	r1, r5
 800b026:	0038      	movs	r0, r7
 800b028:	f000 fa7e 	bl	800b528 <_Bfree>
 800b02c:	e6aa      	b.n	800ad84 <_dtoa_r+0x72c>
 800b02e:	2600      	movs	r6, #0
 800b030:	0035      	movs	r5, r6
 800b032:	e7e2      	b.n	800affa <_dtoa_r+0x9a2>
 800b034:	9602      	str	r6, [sp, #8]
 800b036:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b038:	0035      	movs	r5, r6
 800b03a:	e584      	b.n	800ab46 <_dtoa_r+0x4ee>
 800b03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d100      	bne.n	800b044 <_dtoa_r+0x9ec>
 800b042:	e0ce      	b.n	800b1e2 <_dtoa_r+0xb8a>
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	930c      	str	r3, [sp, #48]	; 0x30
 800b048:	2c00      	cmp	r4, #0
 800b04a:	dd05      	ble.n	800b058 <_dtoa_r+0xa00>
 800b04c:	0029      	movs	r1, r5
 800b04e:	0022      	movs	r2, r4
 800b050:	0038      	movs	r0, r7
 800b052:	f000 fc3b 	bl	800b8cc <__lshift>
 800b056:	0005      	movs	r5, r0
 800b058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b05a:	0028      	movs	r0, r5
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d022      	beq.n	800b0a6 <_dtoa_r+0xa4e>
 800b060:	0038      	movs	r0, r7
 800b062:	6869      	ldr	r1, [r5, #4]
 800b064:	f000 fa1c 	bl	800b4a0 <_Balloc>
 800b068:	1e04      	subs	r4, r0, #0
 800b06a:	d10f      	bne.n	800b08c <_dtoa_r+0xa34>
 800b06c:	0002      	movs	r2, r0
 800b06e:	4b05      	ldr	r3, [pc, #20]	; (800b084 <_dtoa_r+0xa2c>)
 800b070:	4905      	ldr	r1, [pc, #20]	; (800b088 <_dtoa_r+0xa30>)
 800b072:	f7ff fb06 	bl	800a682 <_dtoa_r+0x2a>
 800b076:	46c0      	nop			; (mov r8, r8)
 800b078:	40240000 	.word	0x40240000
 800b07c:	00000433 	.word	0x00000433
 800b080:	7ff00000 	.word	0x7ff00000
 800b084:	0800c787 	.word	0x0800c787
 800b088:	000002ea 	.word	0x000002ea
 800b08c:	0029      	movs	r1, r5
 800b08e:	692b      	ldr	r3, [r5, #16]
 800b090:	310c      	adds	r1, #12
 800b092:	1c9a      	adds	r2, r3, #2
 800b094:	0092      	lsls	r2, r2, #2
 800b096:	300c      	adds	r0, #12
 800b098:	f7fe fc43 	bl	8009922 <memcpy>
 800b09c:	2201      	movs	r2, #1
 800b09e:	0021      	movs	r1, r4
 800b0a0:	0038      	movs	r0, r7
 800b0a2:	f000 fc13 	bl	800b8cc <__lshift>
 800b0a6:	9b06      	ldr	r3, [sp, #24]
 800b0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	189b      	adds	r3, r3, r2
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	002c      	movs	r4, r5
 800b0b4:	0005      	movs	r5, r0
 800b0b6:	9314      	str	r3, [sp, #80]	; 0x50
 800b0b8:	9b08      	ldr	r3, [sp, #32]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0be:	0031      	movs	r1, r6
 800b0c0:	9805      	ldr	r0, [sp, #20]
 800b0c2:	f7ff fa3d 	bl	800a540 <quorem>
 800b0c6:	0003      	movs	r3, r0
 800b0c8:	0021      	movs	r1, r4
 800b0ca:	3330      	adds	r3, #48	; 0x30
 800b0cc:	900d      	str	r0, [sp, #52]	; 0x34
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	9307      	str	r3, [sp, #28]
 800b0d2:	f000 fc69 	bl	800b9a8 <__mcmp>
 800b0d6:	002a      	movs	r2, r5
 800b0d8:	900e      	str	r0, [sp, #56]	; 0x38
 800b0da:	0031      	movs	r1, r6
 800b0dc:	0038      	movs	r0, r7
 800b0de:	f000 fc7f 	bl	800b9e0 <__mdiff>
 800b0e2:	68c3      	ldr	r3, [r0, #12]
 800b0e4:	9008      	str	r0, [sp, #32]
 800b0e6:	9310      	str	r3, [sp, #64]	; 0x40
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	930c      	str	r3, [sp, #48]	; 0x30
 800b0ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d104      	bne.n	800b0fc <_dtoa_r+0xaa4>
 800b0f2:	0001      	movs	r1, r0
 800b0f4:	9805      	ldr	r0, [sp, #20]
 800b0f6:	f000 fc57 	bl	800b9a8 <__mcmp>
 800b0fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b0fc:	0038      	movs	r0, r7
 800b0fe:	9908      	ldr	r1, [sp, #32]
 800b100:	f000 fa12 	bl	800b528 <_Bfree>
 800b104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b108:	3301      	adds	r3, #1
 800b10a:	9308      	str	r3, [sp, #32]
 800b10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b10e:	4313      	orrs	r3, r2
 800b110:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b112:	4313      	orrs	r3, r2
 800b114:	d10c      	bne.n	800b130 <_dtoa_r+0xad8>
 800b116:	9b07      	ldr	r3, [sp, #28]
 800b118:	2b39      	cmp	r3, #57	; 0x39
 800b11a:	d026      	beq.n	800b16a <_dtoa_r+0xb12>
 800b11c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dd02      	ble.n	800b128 <_dtoa_r+0xad0>
 800b122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b124:	3331      	adds	r3, #49	; 0x31
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12a:	9a07      	ldr	r2, [sp, #28]
 800b12c:	701a      	strb	r2, [r3, #0]
 800b12e:	e76a      	b.n	800b006 <_dtoa_r+0x9ae>
 800b130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b132:	2b00      	cmp	r3, #0
 800b134:	db04      	blt.n	800b140 <_dtoa_r+0xae8>
 800b136:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b138:	4313      	orrs	r3, r2
 800b13a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b13c:	4313      	orrs	r3, r2
 800b13e:	d11f      	bne.n	800b180 <_dtoa_r+0xb28>
 800b140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b142:	2b00      	cmp	r3, #0
 800b144:	ddf0      	ble.n	800b128 <_dtoa_r+0xad0>
 800b146:	9905      	ldr	r1, [sp, #20]
 800b148:	2201      	movs	r2, #1
 800b14a:	0038      	movs	r0, r7
 800b14c:	f000 fbbe 	bl	800b8cc <__lshift>
 800b150:	0031      	movs	r1, r6
 800b152:	9005      	str	r0, [sp, #20]
 800b154:	f000 fc28 	bl	800b9a8 <__mcmp>
 800b158:	2800      	cmp	r0, #0
 800b15a:	dc03      	bgt.n	800b164 <_dtoa_r+0xb0c>
 800b15c:	d1e4      	bne.n	800b128 <_dtoa_r+0xad0>
 800b15e:	9b07      	ldr	r3, [sp, #28]
 800b160:	07db      	lsls	r3, r3, #31
 800b162:	d5e1      	bpl.n	800b128 <_dtoa_r+0xad0>
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	2b39      	cmp	r3, #57	; 0x39
 800b168:	d1db      	bne.n	800b122 <_dtoa_r+0xaca>
 800b16a:	2339      	movs	r3, #57	; 0x39
 800b16c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b16e:	7013      	strb	r3, [r2, #0]
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	9308      	str	r3, [sp, #32]
 800b174:	3b01      	subs	r3, #1
 800b176:	781a      	ldrb	r2, [r3, #0]
 800b178:	2a39      	cmp	r2, #57	; 0x39
 800b17a:	d068      	beq.n	800b24e <_dtoa_r+0xbf6>
 800b17c:	3201      	adds	r2, #1
 800b17e:	e7d5      	b.n	800b12c <_dtoa_r+0xad4>
 800b180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b182:	2b00      	cmp	r3, #0
 800b184:	dd07      	ble.n	800b196 <_dtoa_r+0xb3e>
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	2b39      	cmp	r3, #57	; 0x39
 800b18a:	d0ee      	beq.n	800b16a <_dtoa_r+0xb12>
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b190:	3301      	adds	r3, #1
 800b192:	7013      	strb	r3, [r2, #0]
 800b194:	e737      	b.n	800b006 <_dtoa_r+0x9ae>
 800b196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b198:	9a07      	ldr	r2, [sp, #28]
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b19e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d03e      	beq.n	800b222 <_dtoa_r+0xbca>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	9905      	ldr	r1, [sp, #20]
 800b1aa:	0038      	movs	r0, r7
 800b1ac:	f000 f9e0 	bl	800b570 <__multadd>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9005      	str	r0, [sp, #20]
 800b1b4:	220a      	movs	r2, #10
 800b1b6:	0021      	movs	r1, r4
 800b1b8:	0038      	movs	r0, r7
 800b1ba:	42ac      	cmp	r4, r5
 800b1bc:	d106      	bne.n	800b1cc <_dtoa_r+0xb74>
 800b1be:	f000 f9d7 	bl	800b570 <__multadd>
 800b1c2:	0004      	movs	r4, r0
 800b1c4:	0005      	movs	r5, r0
 800b1c6:	9b08      	ldr	r3, [sp, #32]
 800b1c8:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ca:	e778      	b.n	800b0be <_dtoa_r+0xa66>
 800b1cc:	f000 f9d0 	bl	800b570 <__multadd>
 800b1d0:	0029      	movs	r1, r5
 800b1d2:	0004      	movs	r4, r0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	220a      	movs	r2, #10
 800b1d8:	0038      	movs	r0, r7
 800b1da:	f000 f9c9 	bl	800b570 <__multadd>
 800b1de:	0005      	movs	r5, r0
 800b1e0:	e7f1      	b.n	800b1c6 <_dtoa_r+0xb6e>
 800b1e2:	9b07      	ldr	r3, [sp, #28]
 800b1e4:	930c      	str	r3, [sp, #48]	; 0x30
 800b1e6:	2400      	movs	r4, #0
 800b1e8:	0031      	movs	r1, r6
 800b1ea:	9805      	ldr	r0, [sp, #20]
 800b1ec:	f7ff f9a8 	bl	800a540 <quorem>
 800b1f0:	9b06      	ldr	r3, [sp, #24]
 800b1f2:	3030      	adds	r0, #48	; 0x30
 800b1f4:	5518      	strb	r0, [r3, r4]
 800b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	9007      	str	r0, [sp, #28]
 800b1fc:	42a3      	cmp	r3, r4
 800b1fe:	dd07      	ble.n	800b210 <_dtoa_r+0xbb8>
 800b200:	2300      	movs	r3, #0
 800b202:	220a      	movs	r2, #10
 800b204:	0038      	movs	r0, r7
 800b206:	9905      	ldr	r1, [sp, #20]
 800b208:	f000 f9b2 	bl	800b570 <__multadd>
 800b20c:	9005      	str	r0, [sp, #20]
 800b20e:	e7eb      	b.n	800b1e8 <_dtoa_r+0xb90>
 800b210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b212:	2001      	movs	r0, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	dd00      	ble.n	800b21a <_dtoa_r+0xbc2>
 800b218:	0018      	movs	r0, r3
 800b21a:	2400      	movs	r4, #0
 800b21c:	9b06      	ldr	r3, [sp, #24]
 800b21e:	181b      	adds	r3, r3, r0
 800b220:	9308      	str	r3, [sp, #32]
 800b222:	9905      	ldr	r1, [sp, #20]
 800b224:	2201      	movs	r2, #1
 800b226:	0038      	movs	r0, r7
 800b228:	f000 fb50 	bl	800b8cc <__lshift>
 800b22c:	0031      	movs	r1, r6
 800b22e:	9005      	str	r0, [sp, #20]
 800b230:	f000 fbba 	bl	800b9a8 <__mcmp>
 800b234:	2800      	cmp	r0, #0
 800b236:	dc9b      	bgt.n	800b170 <_dtoa_r+0xb18>
 800b238:	d102      	bne.n	800b240 <_dtoa_r+0xbe8>
 800b23a:	9b07      	ldr	r3, [sp, #28]
 800b23c:	07db      	lsls	r3, r3, #31
 800b23e:	d497      	bmi.n	800b170 <_dtoa_r+0xb18>
 800b240:	9b08      	ldr	r3, [sp, #32]
 800b242:	9308      	str	r3, [sp, #32]
 800b244:	3b01      	subs	r3, #1
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	2a30      	cmp	r2, #48	; 0x30
 800b24a:	d0fa      	beq.n	800b242 <_dtoa_r+0xbea>
 800b24c:	e6db      	b.n	800b006 <_dtoa_r+0x9ae>
 800b24e:	9a06      	ldr	r2, [sp, #24]
 800b250:	429a      	cmp	r2, r3
 800b252:	d18e      	bne.n	800b172 <_dtoa_r+0xb1a>
 800b254:	9b02      	ldr	r3, [sp, #8]
 800b256:	3301      	adds	r3, #1
 800b258:	9302      	str	r3, [sp, #8]
 800b25a:	2331      	movs	r3, #49	; 0x31
 800b25c:	e799      	b.n	800b192 <_dtoa_r+0xb3a>
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <_dtoa_r+0xc2c>)
 800b260:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b262:	9306      	str	r3, [sp, #24]
 800b264:	4b08      	ldr	r3, [pc, #32]	; (800b288 <_dtoa_r+0xc30>)
 800b266:	2a00      	cmp	r2, #0
 800b268:	d001      	beq.n	800b26e <_dtoa_r+0xc16>
 800b26a:	f7ff fa3f 	bl	800a6ec <_dtoa_r+0x94>
 800b26e:	f7ff fa3f 	bl	800a6f0 <_dtoa_r+0x98>
 800b272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b274:	2b00      	cmp	r3, #0
 800b276:	dcb6      	bgt.n	800b1e6 <_dtoa_r+0xb8e>
 800b278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	dd00      	ble.n	800b280 <_dtoa_r+0xc28>
 800b27e:	e6ac      	b.n	800afda <_dtoa_r+0x982>
 800b280:	e7b1      	b.n	800b1e6 <_dtoa_r+0xb8e>
 800b282:	46c0      	nop			; (mov r8, r8)
 800b284:	0800c708 	.word	0x0800c708
 800b288:	0800c710 	.word	0x0800c710

0800b28c <__sflush_r>:
 800b28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b28e:	898b      	ldrh	r3, [r1, #12]
 800b290:	0005      	movs	r5, r0
 800b292:	000c      	movs	r4, r1
 800b294:	071a      	lsls	r2, r3, #28
 800b296:	d45f      	bmi.n	800b358 <__sflush_r+0xcc>
 800b298:	684a      	ldr	r2, [r1, #4]
 800b29a:	2a00      	cmp	r2, #0
 800b29c:	dc04      	bgt.n	800b2a8 <__sflush_r+0x1c>
 800b29e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	dc01      	bgt.n	800b2a8 <__sflush_r+0x1c>
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b2aa:	2f00      	cmp	r7, #0
 800b2ac:	d0fa      	beq.n	800b2a4 <__sflush_r+0x18>
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	2180      	movs	r1, #128	; 0x80
 800b2b2:	682e      	ldr	r6, [r5, #0]
 800b2b4:	602a      	str	r2, [r5, #0]
 800b2b6:	001a      	movs	r2, r3
 800b2b8:	0149      	lsls	r1, r1, #5
 800b2ba:	400a      	ands	r2, r1
 800b2bc:	420b      	tst	r3, r1
 800b2be:	d034      	beq.n	800b32a <__sflush_r+0x9e>
 800b2c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	075b      	lsls	r3, r3, #29
 800b2c6:	d506      	bpl.n	800b2d6 <__sflush_r+0x4a>
 800b2c8:	6863      	ldr	r3, [r4, #4]
 800b2ca:	1ac0      	subs	r0, r0, r3
 800b2cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <__sflush_r+0x4a>
 800b2d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2d4:	1ac0      	subs	r0, r0, r3
 800b2d6:	0002      	movs	r2, r0
 800b2d8:	6a21      	ldr	r1, [r4, #32]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	0028      	movs	r0, r5
 800b2de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b2e0:	47b8      	blx	r7
 800b2e2:	89a1      	ldrh	r1, [r4, #12]
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d106      	bne.n	800b2f6 <__sflush_r+0x6a>
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	2b1d      	cmp	r3, #29
 800b2ec:	d831      	bhi.n	800b352 <__sflush_r+0xc6>
 800b2ee:	4a2c      	ldr	r2, [pc, #176]	; (800b3a0 <__sflush_r+0x114>)
 800b2f0:	40da      	lsrs	r2, r3
 800b2f2:	07d3      	lsls	r3, r2, #31
 800b2f4:	d52d      	bpl.n	800b352 <__sflush_r+0xc6>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	6063      	str	r3, [r4, #4]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	04cb      	lsls	r3, r1, #19
 800b300:	d505      	bpl.n	800b30e <__sflush_r+0x82>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	d102      	bne.n	800b30c <__sflush_r+0x80>
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d100      	bne.n	800b30e <__sflush_r+0x82>
 800b30c:	6560      	str	r0, [r4, #84]	; 0x54
 800b30e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b310:	602e      	str	r6, [r5, #0]
 800b312:	2900      	cmp	r1, #0
 800b314:	d0c6      	beq.n	800b2a4 <__sflush_r+0x18>
 800b316:	0023      	movs	r3, r4
 800b318:	3344      	adds	r3, #68	; 0x44
 800b31a:	4299      	cmp	r1, r3
 800b31c:	d002      	beq.n	800b324 <__sflush_r+0x98>
 800b31e:	0028      	movs	r0, r5
 800b320:	f000 fc86 	bl	800bc30 <_free_r>
 800b324:	2000      	movs	r0, #0
 800b326:	6360      	str	r0, [r4, #52]	; 0x34
 800b328:	e7bd      	b.n	800b2a6 <__sflush_r+0x1a>
 800b32a:	2301      	movs	r3, #1
 800b32c:	0028      	movs	r0, r5
 800b32e:	6a21      	ldr	r1, [r4, #32]
 800b330:	47b8      	blx	r7
 800b332:	1c43      	adds	r3, r0, #1
 800b334:	d1c5      	bne.n	800b2c2 <__sflush_r+0x36>
 800b336:	682b      	ldr	r3, [r5, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0c2      	beq.n	800b2c2 <__sflush_r+0x36>
 800b33c:	2b1d      	cmp	r3, #29
 800b33e:	d001      	beq.n	800b344 <__sflush_r+0xb8>
 800b340:	2b16      	cmp	r3, #22
 800b342:	d101      	bne.n	800b348 <__sflush_r+0xbc>
 800b344:	602e      	str	r6, [r5, #0]
 800b346:	e7ad      	b.n	800b2a4 <__sflush_r+0x18>
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	89a2      	ldrh	r2, [r4, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	81a3      	strh	r3, [r4, #12]
 800b350:	e7a9      	b.n	800b2a6 <__sflush_r+0x1a>
 800b352:	2340      	movs	r3, #64	; 0x40
 800b354:	430b      	orrs	r3, r1
 800b356:	e7fa      	b.n	800b34e <__sflush_r+0xc2>
 800b358:	690f      	ldr	r7, [r1, #16]
 800b35a:	2f00      	cmp	r7, #0
 800b35c:	d0a2      	beq.n	800b2a4 <__sflush_r+0x18>
 800b35e:	680a      	ldr	r2, [r1, #0]
 800b360:	600f      	str	r7, [r1, #0]
 800b362:	1bd2      	subs	r2, r2, r7
 800b364:	9201      	str	r2, [sp, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	079b      	lsls	r3, r3, #30
 800b36a:	d100      	bne.n	800b36e <__sflush_r+0xe2>
 800b36c:	694a      	ldr	r2, [r1, #20]
 800b36e:	60a2      	str	r2, [r4, #8]
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	dc00      	bgt.n	800b378 <__sflush_r+0xec>
 800b376:	e795      	b.n	800b2a4 <__sflush_r+0x18>
 800b378:	003a      	movs	r2, r7
 800b37a:	0028      	movs	r0, r5
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	6a21      	ldr	r1, [r4, #32]
 800b380:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b382:	47b0      	blx	r6
 800b384:	2800      	cmp	r0, #0
 800b386:	dc06      	bgt.n	800b396 <__sflush_r+0x10a>
 800b388:	2340      	movs	r3, #64	; 0x40
 800b38a:	2001      	movs	r0, #1
 800b38c:	89a2      	ldrh	r2, [r4, #12]
 800b38e:	4240      	negs	r0, r0
 800b390:	4313      	orrs	r3, r2
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	e787      	b.n	800b2a6 <__sflush_r+0x1a>
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	183f      	adds	r7, r7, r0
 800b39a:	1a1b      	subs	r3, r3, r0
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	e7e7      	b.n	800b370 <__sflush_r+0xe4>
 800b3a0:	20400001 	.word	0x20400001

0800b3a4 <_fflush_r>:
 800b3a4:	690b      	ldr	r3, [r1, #16]
 800b3a6:	b570      	push	{r4, r5, r6, lr}
 800b3a8:	0005      	movs	r5, r0
 800b3aa:	000c      	movs	r4, r1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <_fflush_r+0x12>
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	0028      	movs	r0, r5
 800b3b4:	bd70      	pop	{r4, r5, r6, pc}
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d004      	beq.n	800b3c4 <_fflush_r+0x20>
 800b3ba:	6983      	ldr	r3, [r0, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <_fflush_r+0x20>
 800b3c0:	f7fe f9e8 	bl	8009794 <__sinit>
 800b3c4:	4b14      	ldr	r3, [pc, #80]	; (800b418 <_fflush_r+0x74>)
 800b3c6:	429c      	cmp	r4, r3
 800b3c8:	d11b      	bne.n	800b402 <_fflush_r+0x5e>
 800b3ca:	686c      	ldr	r4, [r5, #4]
 800b3cc:	220c      	movs	r2, #12
 800b3ce:	5ea3      	ldrsh	r3, [r4, r2]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0ed      	beq.n	800b3b0 <_fflush_r+0xc>
 800b3d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3d6:	07d2      	lsls	r2, r2, #31
 800b3d8:	d404      	bmi.n	800b3e4 <_fflush_r+0x40>
 800b3da:	059b      	lsls	r3, r3, #22
 800b3dc:	d402      	bmi.n	800b3e4 <_fflush_r+0x40>
 800b3de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3e0:	f7fe fa9d 	bl	800991e <__retarget_lock_acquire_recursive>
 800b3e4:	0028      	movs	r0, r5
 800b3e6:	0021      	movs	r1, r4
 800b3e8:	f7ff ff50 	bl	800b28c <__sflush_r>
 800b3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3ee:	0005      	movs	r5, r0
 800b3f0:	07db      	lsls	r3, r3, #31
 800b3f2:	d4de      	bmi.n	800b3b2 <_fflush_r+0xe>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	059b      	lsls	r3, r3, #22
 800b3f8:	d4db      	bmi.n	800b3b2 <_fflush_r+0xe>
 800b3fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3fc:	f7fe fa90 	bl	8009920 <__retarget_lock_release_recursive>
 800b400:	e7d7      	b.n	800b3b2 <_fflush_r+0xe>
 800b402:	4b06      	ldr	r3, [pc, #24]	; (800b41c <_fflush_r+0x78>)
 800b404:	429c      	cmp	r4, r3
 800b406:	d101      	bne.n	800b40c <_fflush_r+0x68>
 800b408:	68ac      	ldr	r4, [r5, #8]
 800b40a:	e7df      	b.n	800b3cc <_fflush_r+0x28>
 800b40c:	4b04      	ldr	r3, [pc, #16]	; (800b420 <_fflush_r+0x7c>)
 800b40e:	429c      	cmp	r4, r3
 800b410:	d1dc      	bne.n	800b3cc <_fflush_r+0x28>
 800b412:	68ec      	ldr	r4, [r5, #12]
 800b414:	e7da      	b.n	800b3cc <_fflush_r+0x28>
 800b416:	46c0      	nop			; (mov r8, r8)
 800b418:	0800c690 	.word	0x0800c690
 800b41c:	0800c6b0 	.word	0x0800c6b0
 800b420:	0800c670 	.word	0x0800c670

0800b424 <_localeconv_r>:
 800b424:	4800      	ldr	r0, [pc, #0]	; (800b428 <_localeconv_r+0x4>)
 800b426:	4770      	bx	lr
 800b428:	20000168 	.word	0x20000168

0800b42c <_lseek_r>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	0004      	movs	r4, r0
 800b430:	0008      	movs	r0, r1
 800b432:	0011      	movs	r1, r2
 800b434:	001a      	movs	r2, r3
 800b436:	2300      	movs	r3, #0
 800b438:	4d05      	ldr	r5, [pc, #20]	; (800b450 <_lseek_r+0x24>)
 800b43a:	602b      	str	r3, [r5, #0]
 800b43c:	f7f7 fbf8 	bl	8002c30 <_lseek>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d103      	bne.n	800b44c <_lseek_r+0x20>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d000      	beq.n	800b44c <_lseek_r+0x20>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd70      	pop	{r4, r5, r6, pc}
 800b44e:	46c0      	nop			; (mov r8, r8)
 800b450:	20001d78 	.word	0x20001d78

0800b454 <malloc>:
 800b454:	b510      	push	{r4, lr}
 800b456:	4b03      	ldr	r3, [pc, #12]	; (800b464 <malloc+0x10>)
 800b458:	0001      	movs	r1, r0
 800b45a:	6818      	ldr	r0, [r3, #0]
 800b45c:	f7fe fa94 	bl	8009988 <_malloc_r>
 800b460:	bd10      	pop	{r4, pc}
 800b462:	46c0      	nop			; (mov r8, r8)
 800b464:	20000014 	.word	0x20000014

0800b468 <memchr>:
 800b468:	b2c9      	uxtb	r1, r1
 800b46a:	1882      	adds	r2, r0, r2
 800b46c:	4290      	cmp	r0, r2
 800b46e:	d101      	bne.n	800b474 <memchr+0xc>
 800b470:	2000      	movs	r0, #0
 800b472:	4770      	bx	lr
 800b474:	7803      	ldrb	r3, [r0, #0]
 800b476:	428b      	cmp	r3, r1
 800b478:	d0fb      	beq.n	800b472 <memchr+0xa>
 800b47a:	3001      	adds	r0, #1
 800b47c:	e7f6      	b.n	800b46c <memchr+0x4>
	...

0800b480 <__malloc_lock>:
 800b480:	b510      	push	{r4, lr}
 800b482:	4802      	ldr	r0, [pc, #8]	; (800b48c <__malloc_lock+0xc>)
 800b484:	f7fe fa4b 	bl	800991e <__retarget_lock_acquire_recursive>
 800b488:	bd10      	pop	{r4, pc}
 800b48a:	46c0      	nop			; (mov r8, r8)
 800b48c:	20001d6c 	.word	0x20001d6c

0800b490 <__malloc_unlock>:
 800b490:	b510      	push	{r4, lr}
 800b492:	4802      	ldr	r0, [pc, #8]	; (800b49c <__malloc_unlock+0xc>)
 800b494:	f7fe fa44 	bl	8009920 <__retarget_lock_release_recursive>
 800b498:	bd10      	pop	{r4, pc}
 800b49a:	46c0      	nop			; (mov r8, r8)
 800b49c:	20001d6c 	.word	0x20001d6c

0800b4a0 <_Balloc>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4a4:	0006      	movs	r6, r0
 800b4a6:	000c      	movs	r4, r1
 800b4a8:	2d00      	cmp	r5, #0
 800b4aa:	d10e      	bne.n	800b4ca <_Balloc+0x2a>
 800b4ac:	2010      	movs	r0, #16
 800b4ae:	f7ff ffd1 	bl	800b454 <malloc>
 800b4b2:	1e02      	subs	r2, r0, #0
 800b4b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b4b6:	d104      	bne.n	800b4c2 <_Balloc+0x22>
 800b4b8:	2166      	movs	r1, #102	; 0x66
 800b4ba:	4b19      	ldr	r3, [pc, #100]	; (800b520 <_Balloc+0x80>)
 800b4bc:	4819      	ldr	r0, [pc, #100]	; (800b524 <_Balloc+0x84>)
 800b4be:	f000 fc15 	bl	800bcec <__assert_func>
 800b4c2:	6045      	str	r5, [r0, #4]
 800b4c4:	6085      	str	r5, [r0, #8]
 800b4c6:	6005      	str	r5, [r0, #0]
 800b4c8:	60c5      	str	r5, [r0, #12]
 800b4ca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b4cc:	68eb      	ldr	r3, [r5, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d013      	beq.n	800b4fa <_Balloc+0x5a>
 800b4d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b4d4:	00a2      	lsls	r2, r4, #2
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	189b      	adds	r3, r3, r2
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d118      	bne.n	800b512 <_Balloc+0x72>
 800b4e0:	2101      	movs	r1, #1
 800b4e2:	000d      	movs	r5, r1
 800b4e4:	40a5      	lsls	r5, r4
 800b4e6:	1d6a      	adds	r2, r5, #5
 800b4e8:	0030      	movs	r0, r6
 800b4ea:	0092      	lsls	r2, r2, #2
 800b4ec:	f000 fb74 	bl	800bbd8 <_calloc_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d00c      	beq.n	800b50e <_Balloc+0x6e>
 800b4f4:	6044      	str	r4, [r0, #4]
 800b4f6:	6085      	str	r5, [r0, #8]
 800b4f8:	e00d      	b.n	800b516 <_Balloc+0x76>
 800b4fa:	2221      	movs	r2, #33	; 0x21
 800b4fc:	2104      	movs	r1, #4
 800b4fe:	0030      	movs	r0, r6
 800b500:	f000 fb6a 	bl	800bbd8 <_calloc_r>
 800b504:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b506:	60e8      	str	r0, [r5, #12]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e1      	bne.n	800b4d2 <_Balloc+0x32>
 800b50e:	2000      	movs	r0, #0
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	6802      	ldr	r2, [r0, #0]
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	2300      	movs	r3, #0
 800b518:	6103      	str	r3, [r0, #16]
 800b51a:	60c3      	str	r3, [r0, #12]
 800b51c:	e7f8      	b.n	800b510 <_Balloc+0x70>
 800b51e:	46c0      	nop			; (mov r8, r8)
 800b520:	0800c715 	.word	0x0800c715
 800b524:	0800c798 	.word	0x0800c798

0800b528 <_Bfree>:
 800b528:	b570      	push	{r4, r5, r6, lr}
 800b52a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b52c:	0005      	movs	r5, r0
 800b52e:	000c      	movs	r4, r1
 800b530:	2e00      	cmp	r6, #0
 800b532:	d10e      	bne.n	800b552 <_Bfree+0x2a>
 800b534:	2010      	movs	r0, #16
 800b536:	f7ff ff8d 	bl	800b454 <malloc>
 800b53a:	1e02      	subs	r2, r0, #0
 800b53c:	6268      	str	r0, [r5, #36]	; 0x24
 800b53e:	d104      	bne.n	800b54a <_Bfree+0x22>
 800b540:	218a      	movs	r1, #138	; 0x8a
 800b542:	4b09      	ldr	r3, [pc, #36]	; (800b568 <_Bfree+0x40>)
 800b544:	4809      	ldr	r0, [pc, #36]	; (800b56c <_Bfree+0x44>)
 800b546:	f000 fbd1 	bl	800bcec <__assert_func>
 800b54a:	6046      	str	r6, [r0, #4]
 800b54c:	6086      	str	r6, [r0, #8]
 800b54e:	6006      	str	r6, [r0, #0]
 800b550:	60c6      	str	r6, [r0, #12]
 800b552:	2c00      	cmp	r4, #0
 800b554:	d007      	beq.n	800b566 <_Bfree+0x3e>
 800b556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b558:	6862      	ldr	r2, [r4, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	0092      	lsls	r2, r2, #2
 800b55e:	189b      	adds	r3, r3, r2
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	6022      	str	r2, [r4, #0]
 800b564:	601c      	str	r4, [r3, #0]
 800b566:	bd70      	pop	{r4, r5, r6, pc}
 800b568:	0800c715 	.word	0x0800c715
 800b56c:	0800c798 	.word	0x0800c798

0800b570 <__multadd>:
 800b570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b572:	000e      	movs	r6, r1
 800b574:	9001      	str	r0, [sp, #4]
 800b576:	000c      	movs	r4, r1
 800b578:	001d      	movs	r5, r3
 800b57a:	2000      	movs	r0, #0
 800b57c:	690f      	ldr	r7, [r1, #16]
 800b57e:	3614      	adds	r6, #20
 800b580:	6833      	ldr	r3, [r6, #0]
 800b582:	3001      	adds	r0, #1
 800b584:	b299      	uxth	r1, r3
 800b586:	4351      	muls	r1, r2
 800b588:	0c1b      	lsrs	r3, r3, #16
 800b58a:	4353      	muls	r3, r2
 800b58c:	1949      	adds	r1, r1, r5
 800b58e:	0c0d      	lsrs	r5, r1, #16
 800b590:	195b      	adds	r3, r3, r5
 800b592:	0c1d      	lsrs	r5, r3, #16
 800b594:	b289      	uxth	r1, r1
 800b596:	041b      	lsls	r3, r3, #16
 800b598:	185b      	adds	r3, r3, r1
 800b59a:	c608      	stmia	r6!, {r3}
 800b59c:	4287      	cmp	r7, r0
 800b59e:	dcef      	bgt.n	800b580 <__multadd+0x10>
 800b5a0:	2d00      	cmp	r5, #0
 800b5a2:	d022      	beq.n	800b5ea <__multadd+0x7a>
 800b5a4:	68a3      	ldr	r3, [r4, #8]
 800b5a6:	42bb      	cmp	r3, r7
 800b5a8:	dc19      	bgt.n	800b5de <__multadd+0x6e>
 800b5aa:	6863      	ldr	r3, [r4, #4]
 800b5ac:	9801      	ldr	r0, [sp, #4]
 800b5ae:	1c59      	adds	r1, r3, #1
 800b5b0:	f7ff ff76 	bl	800b4a0 <_Balloc>
 800b5b4:	1e06      	subs	r6, r0, #0
 800b5b6:	d105      	bne.n	800b5c4 <__multadd+0x54>
 800b5b8:	0002      	movs	r2, r0
 800b5ba:	21b5      	movs	r1, #181	; 0xb5
 800b5bc:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <__multadd+0x80>)
 800b5be:	480d      	ldr	r0, [pc, #52]	; (800b5f4 <__multadd+0x84>)
 800b5c0:	f000 fb94 	bl	800bcec <__assert_func>
 800b5c4:	0021      	movs	r1, r4
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	310c      	adds	r1, #12
 800b5ca:	1c9a      	adds	r2, r3, #2
 800b5cc:	0092      	lsls	r2, r2, #2
 800b5ce:	300c      	adds	r0, #12
 800b5d0:	f7fe f9a7 	bl	8009922 <memcpy>
 800b5d4:	0021      	movs	r1, r4
 800b5d6:	9801      	ldr	r0, [sp, #4]
 800b5d8:	f7ff ffa6 	bl	800b528 <_Bfree>
 800b5dc:	0034      	movs	r4, r6
 800b5de:	1d3b      	adds	r3, r7, #4
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	18e3      	adds	r3, r4, r3
 800b5e4:	605d      	str	r5, [r3, #4]
 800b5e6:	1c7b      	adds	r3, r7, #1
 800b5e8:	6123      	str	r3, [r4, #16]
 800b5ea:	0020      	movs	r0, r4
 800b5ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	0800c787 	.word	0x0800c787
 800b5f4:	0800c798 	.word	0x0800c798

0800b5f8 <__hi0bits>:
 800b5f8:	0003      	movs	r3, r0
 800b5fa:	0c02      	lsrs	r2, r0, #16
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4282      	cmp	r2, r0
 800b600:	d101      	bne.n	800b606 <__hi0bits+0xe>
 800b602:	041b      	lsls	r3, r3, #16
 800b604:	3010      	adds	r0, #16
 800b606:	0e1a      	lsrs	r2, r3, #24
 800b608:	d101      	bne.n	800b60e <__hi0bits+0x16>
 800b60a:	3008      	adds	r0, #8
 800b60c:	021b      	lsls	r3, r3, #8
 800b60e:	0f1a      	lsrs	r2, r3, #28
 800b610:	d101      	bne.n	800b616 <__hi0bits+0x1e>
 800b612:	3004      	adds	r0, #4
 800b614:	011b      	lsls	r3, r3, #4
 800b616:	0f9a      	lsrs	r2, r3, #30
 800b618:	d101      	bne.n	800b61e <__hi0bits+0x26>
 800b61a:	3002      	adds	r0, #2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db03      	blt.n	800b62a <__hi0bits+0x32>
 800b622:	3001      	adds	r0, #1
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	d400      	bmi.n	800b62a <__hi0bits+0x32>
 800b628:	2020      	movs	r0, #32
 800b62a:	4770      	bx	lr

0800b62c <__lo0bits>:
 800b62c:	6803      	ldr	r3, [r0, #0]
 800b62e:	0002      	movs	r2, r0
 800b630:	2107      	movs	r1, #7
 800b632:	0018      	movs	r0, r3
 800b634:	4008      	ands	r0, r1
 800b636:	420b      	tst	r3, r1
 800b638:	d00d      	beq.n	800b656 <__lo0bits+0x2a>
 800b63a:	3906      	subs	r1, #6
 800b63c:	2000      	movs	r0, #0
 800b63e:	420b      	tst	r3, r1
 800b640:	d105      	bne.n	800b64e <__lo0bits+0x22>
 800b642:	3002      	adds	r0, #2
 800b644:	4203      	tst	r3, r0
 800b646:	d003      	beq.n	800b650 <__lo0bits+0x24>
 800b648:	40cb      	lsrs	r3, r1
 800b64a:	0008      	movs	r0, r1
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	4770      	bx	lr
 800b650:	089b      	lsrs	r3, r3, #2
 800b652:	6013      	str	r3, [r2, #0]
 800b654:	e7fb      	b.n	800b64e <__lo0bits+0x22>
 800b656:	b299      	uxth	r1, r3
 800b658:	2900      	cmp	r1, #0
 800b65a:	d101      	bne.n	800b660 <__lo0bits+0x34>
 800b65c:	2010      	movs	r0, #16
 800b65e:	0c1b      	lsrs	r3, r3, #16
 800b660:	b2d9      	uxtb	r1, r3
 800b662:	2900      	cmp	r1, #0
 800b664:	d101      	bne.n	800b66a <__lo0bits+0x3e>
 800b666:	3008      	adds	r0, #8
 800b668:	0a1b      	lsrs	r3, r3, #8
 800b66a:	0719      	lsls	r1, r3, #28
 800b66c:	d101      	bne.n	800b672 <__lo0bits+0x46>
 800b66e:	3004      	adds	r0, #4
 800b670:	091b      	lsrs	r3, r3, #4
 800b672:	0799      	lsls	r1, r3, #30
 800b674:	d101      	bne.n	800b67a <__lo0bits+0x4e>
 800b676:	3002      	adds	r0, #2
 800b678:	089b      	lsrs	r3, r3, #2
 800b67a:	07d9      	lsls	r1, r3, #31
 800b67c:	d4e9      	bmi.n	800b652 <__lo0bits+0x26>
 800b67e:	3001      	adds	r0, #1
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	d1e6      	bne.n	800b652 <__lo0bits+0x26>
 800b684:	2020      	movs	r0, #32
 800b686:	e7e2      	b.n	800b64e <__lo0bits+0x22>

0800b688 <__i2b>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	000c      	movs	r4, r1
 800b68c:	2101      	movs	r1, #1
 800b68e:	f7ff ff07 	bl	800b4a0 <_Balloc>
 800b692:	2800      	cmp	r0, #0
 800b694:	d106      	bne.n	800b6a4 <__i2b+0x1c>
 800b696:	21a0      	movs	r1, #160	; 0xa0
 800b698:	0002      	movs	r2, r0
 800b69a:	4b04      	ldr	r3, [pc, #16]	; (800b6ac <__i2b+0x24>)
 800b69c:	4804      	ldr	r0, [pc, #16]	; (800b6b0 <__i2b+0x28>)
 800b69e:	0049      	lsls	r1, r1, #1
 800b6a0:	f000 fb24 	bl	800bcec <__assert_func>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	6144      	str	r4, [r0, #20]
 800b6a8:	6103      	str	r3, [r0, #16]
 800b6aa:	bd10      	pop	{r4, pc}
 800b6ac:	0800c787 	.word	0x0800c787
 800b6b0:	0800c798 	.word	0x0800c798

0800b6b4 <__multiply>:
 800b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b6:	690b      	ldr	r3, [r1, #16]
 800b6b8:	0014      	movs	r4, r2
 800b6ba:	6912      	ldr	r2, [r2, #16]
 800b6bc:	000d      	movs	r5, r1
 800b6be:	b089      	sub	sp, #36	; 0x24
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	da01      	bge.n	800b6c8 <__multiply+0x14>
 800b6c4:	0025      	movs	r5, r4
 800b6c6:	000c      	movs	r4, r1
 800b6c8:	692f      	ldr	r7, [r5, #16]
 800b6ca:	6926      	ldr	r6, [r4, #16]
 800b6cc:	6869      	ldr	r1, [r5, #4]
 800b6ce:	19bb      	adds	r3, r7, r6
 800b6d0:	9302      	str	r3, [sp, #8]
 800b6d2:	68ab      	ldr	r3, [r5, #8]
 800b6d4:	19ba      	adds	r2, r7, r6
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	da00      	bge.n	800b6dc <__multiply+0x28>
 800b6da:	3101      	adds	r1, #1
 800b6dc:	f7ff fee0 	bl	800b4a0 <_Balloc>
 800b6e0:	9001      	str	r0, [sp, #4]
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d106      	bne.n	800b6f4 <__multiply+0x40>
 800b6e6:	215e      	movs	r1, #94	; 0x5e
 800b6e8:	0002      	movs	r2, r0
 800b6ea:	4b48      	ldr	r3, [pc, #288]	; (800b80c <__multiply+0x158>)
 800b6ec:	4848      	ldr	r0, [pc, #288]	; (800b810 <__multiply+0x15c>)
 800b6ee:	31ff      	adds	r1, #255	; 0xff
 800b6f0:	f000 fafc 	bl	800bcec <__assert_func>
 800b6f4:	9b01      	ldr	r3, [sp, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	3314      	adds	r3, #20
 800b6fa:	469c      	mov	ip, r3
 800b6fc:	19bb      	adds	r3, r7, r6
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4463      	add	r3, ip
 800b702:	9303      	str	r3, [sp, #12]
 800b704:	4663      	mov	r3, ip
 800b706:	9903      	ldr	r1, [sp, #12]
 800b708:	428b      	cmp	r3, r1
 800b70a:	d32c      	bcc.n	800b766 <__multiply+0xb2>
 800b70c:	002b      	movs	r3, r5
 800b70e:	0022      	movs	r2, r4
 800b710:	3314      	adds	r3, #20
 800b712:	00bf      	lsls	r7, r7, #2
 800b714:	3214      	adds	r2, #20
 800b716:	9306      	str	r3, [sp, #24]
 800b718:	00b6      	lsls	r6, r6, #2
 800b71a:	19db      	adds	r3, r3, r7
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	1993      	adds	r3, r2, r6
 800b720:	9307      	str	r3, [sp, #28]
 800b722:	2304      	movs	r3, #4
 800b724:	9305      	str	r3, [sp, #20]
 800b726:	002b      	movs	r3, r5
 800b728:	9904      	ldr	r1, [sp, #16]
 800b72a:	3315      	adds	r3, #21
 800b72c:	9200      	str	r2, [sp, #0]
 800b72e:	4299      	cmp	r1, r3
 800b730:	d305      	bcc.n	800b73e <__multiply+0x8a>
 800b732:	1b4b      	subs	r3, r1, r5
 800b734:	3b15      	subs	r3, #21
 800b736:	089b      	lsrs	r3, r3, #2
 800b738:	3301      	adds	r3, #1
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	9305      	str	r3, [sp, #20]
 800b73e:	9b07      	ldr	r3, [sp, #28]
 800b740:	9a00      	ldr	r2, [sp, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d311      	bcc.n	800b76a <__multiply+0xb6>
 800b746:	9b02      	ldr	r3, [sp, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dd06      	ble.n	800b75a <__multiply+0xa6>
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	3b04      	subs	r3, #4
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d053      	beq.n	800b802 <__multiply+0x14e>
 800b75a:	9b01      	ldr	r3, [sp, #4]
 800b75c:	9a02      	ldr	r2, [sp, #8]
 800b75e:	0018      	movs	r0, r3
 800b760:	611a      	str	r2, [r3, #16]
 800b762:	b009      	add	sp, #36	; 0x24
 800b764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b766:	c304      	stmia	r3!, {r2}
 800b768:	e7cd      	b.n	800b706 <__multiply+0x52>
 800b76a:	9b00      	ldr	r3, [sp, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	b298      	uxth	r0, r3
 800b770:	2800      	cmp	r0, #0
 800b772:	d01b      	beq.n	800b7ac <__multiply+0xf8>
 800b774:	4667      	mov	r7, ip
 800b776:	2400      	movs	r4, #0
 800b778:	9e06      	ldr	r6, [sp, #24]
 800b77a:	ce02      	ldmia	r6!, {r1}
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	b28b      	uxth	r3, r1
 800b780:	4343      	muls	r3, r0
 800b782:	b292      	uxth	r2, r2
 800b784:	189b      	adds	r3, r3, r2
 800b786:	191b      	adds	r3, r3, r4
 800b788:	0c0c      	lsrs	r4, r1, #16
 800b78a:	4344      	muls	r4, r0
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	0c11      	lsrs	r1, r2, #16
 800b790:	1861      	adds	r1, r4, r1
 800b792:	0c1c      	lsrs	r4, r3, #16
 800b794:	1909      	adds	r1, r1, r4
 800b796:	0c0c      	lsrs	r4, r1, #16
 800b798:	b29b      	uxth	r3, r3
 800b79a:	0409      	lsls	r1, r1, #16
 800b79c:	430b      	orrs	r3, r1
 800b79e:	c708      	stmia	r7!, {r3}
 800b7a0:	9b04      	ldr	r3, [sp, #16]
 800b7a2:	42b3      	cmp	r3, r6
 800b7a4:	d8e9      	bhi.n	800b77a <__multiply+0xc6>
 800b7a6:	4663      	mov	r3, ip
 800b7a8:	9a05      	ldr	r2, [sp, #20]
 800b7aa:	509c      	str	r4, [r3, r2]
 800b7ac:	9b00      	ldr	r3, [sp, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	0c1e      	lsrs	r6, r3, #16
 800b7b2:	d020      	beq.n	800b7f6 <__multiply+0x142>
 800b7b4:	4663      	mov	r3, ip
 800b7b6:	002c      	movs	r4, r5
 800b7b8:	4660      	mov	r0, ip
 800b7ba:	2700      	movs	r7, #0
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3414      	adds	r4, #20
 800b7c0:	6822      	ldr	r2, [r4, #0]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	b291      	uxth	r1, r2
 800b7c6:	4371      	muls	r1, r6
 800b7c8:	6802      	ldr	r2, [r0, #0]
 800b7ca:	0c12      	lsrs	r2, r2, #16
 800b7cc:	1889      	adds	r1, r1, r2
 800b7ce:	19cf      	adds	r7, r1, r7
 800b7d0:	0439      	lsls	r1, r7, #16
 800b7d2:	430b      	orrs	r3, r1
 800b7d4:	6003      	str	r3, [r0, #0]
 800b7d6:	cc02      	ldmia	r4!, {r1}
 800b7d8:	6843      	ldr	r3, [r0, #4]
 800b7da:	0c09      	lsrs	r1, r1, #16
 800b7dc:	4371      	muls	r1, r6
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	0c3f      	lsrs	r7, r7, #16
 800b7e2:	18cb      	adds	r3, r1, r3
 800b7e4:	9a04      	ldr	r2, [sp, #16]
 800b7e6:	19db      	adds	r3, r3, r7
 800b7e8:	0c1f      	lsrs	r7, r3, #16
 800b7ea:	3004      	adds	r0, #4
 800b7ec:	42a2      	cmp	r2, r4
 800b7ee:	d8e7      	bhi.n	800b7c0 <__multiply+0x10c>
 800b7f0:	4662      	mov	r2, ip
 800b7f2:	9905      	ldr	r1, [sp, #20]
 800b7f4:	5053      	str	r3, [r2, r1]
 800b7f6:	9b00      	ldr	r3, [sp, #0]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	449c      	add	ip, r3
 800b800:	e79d      	b.n	800b73e <__multiply+0x8a>
 800b802:	9b02      	ldr	r3, [sp, #8]
 800b804:	3b01      	subs	r3, #1
 800b806:	9302      	str	r3, [sp, #8]
 800b808:	e79d      	b.n	800b746 <__multiply+0x92>
 800b80a:	46c0      	nop			; (mov r8, r8)
 800b80c:	0800c787 	.word	0x0800c787
 800b810:	0800c798 	.word	0x0800c798

0800b814 <__pow5mult>:
 800b814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b816:	2303      	movs	r3, #3
 800b818:	0015      	movs	r5, r2
 800b81a:	0007      	movs	r7, r0
 800b81c:	000e      	movs	r6, r1
 800b81e:	401a      	ands	r2, r3
 800b820:	421d      	tst	r5, r3
 800b822:	d008      	beq.n	800b836 <__pow5mult+0x22>
 800b824:	4925      	ldr	r1, [pc, #148]	; (800b8bc <__pow5mult+0xa8>)
 800b826:	3a01      	subs	r2, #1
 800b828:	0092      	lsls	r2, r2, #2
 800b82a:	5852      	ldr	r2, [r2, r1]
 800b82c:	2300      	movs	r3, #0
 800b82e:	0031      	movs	r1, r6
 800b830:	f7ff fe9e 	bl	800b570 <__multadd>
 800b834:	0006      	movs	r6, r0
 800b836:	10ad      	asrs	r5, r5, #2
 800b838:	d03d      	beq.n	800b8b6 <__pow5mult+0xa2>
 800b83a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b83c:	2c00      	cmp	r4, #0
 800b83e:	d10f      	bne.n	800b860 <__pow5mult+0x4c>
 800b840:	2010      	movs	r0, #16
 800b842:	f7ff fe07 	bl	800b454 <malloc>
 800b846:	1e02      	subs	r2, r0, #0
 800b848:	6278      	str	r0, [r7, #36]	; 0x24
 800b84a:	d105      	bne.n	800b858 <__pow5mult+0x44>
 800b84c:	21d7      	movs	r1, #215	; 0xd7
 800b84e:	4b1c      	ldr	r3, [pc, #112]	; (800b8c0 <__pow5mult+0xac>)
 800b850:	481c      	ldr	r0, [pc, #112]	; (800b8c4 <__pow5mult+0xb0>)
 800b852:	0049      	lsls	r1, r1, #1
 800b854:	f000 fa4a 	bl	800bcec <__assert_func>
 800b858:	6044      	str	r4, [r0, #4]
 800b85a:	6084      	str	r4, [r0, #8]
 800b85c:	6004      	str	r4, [r0, #0]
 800b85e:	60c4      	str	r4, [r0, #12]
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	689c      	ldr	r4, [r3, #8]
 800b864:	9301      	str	r3, [sp, #4]
 800b866:	2c00      	cmp	r4, #0
 800b868:	d108      	bne.n	800b87c <__pow5mult+0x68>
 800b86a:	0038      	movs	r0, r7
 800b86c:	4916      	ldr	r1, [pc, #88]	; (800b8c8 <__pow5mult+0xb4>)
 800b86e:	f7ff ff0b 	bl	800b688 <__i2b>
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	0004      	movs	r4, r0
 800b876:	6098      	str	r0, [r3, #8]
 800b878:	2300      	movs	r3, #0
 800b87a:	6003      	str	r3, [r0, #0]
 800b87c:	2301      	movs	r3, #1
 800b87e:	421d      	tst	r5, r3
 800b880:	d00a      	beq.n	800b898 <__pow5mult+0x84>
 800b882:	0031      	movs	r1, r6
 800b884:	0022      	movs	r2, r4
 800b886:	0038      	movs	r0, r7
 800b888:	f7ff ff14 	bl	800b6b4 <__multiply>
 800b88c:	0031      	movs	r1, r6
 800b88e:	9001      	str	r0, [sp, #4]
 800b890:	0038      	movs	r0, r7
 800b892:	f7ff fe49 	bl	800b528 <_Bfree>
 800b896:	9e01      	ldr	r6, [sp, #4]
 800b898:	106d      	asrs	r5, r5, #1
 800b89a:	d00c      	beq.n	800b8b6 <__pow5mult+0xa2>
 800b89c:	6820      	ldr	r0, [r4, #0]
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d107      	bne.n	800b8b2 <__pow5mult+0x9e>
 800b8a2:	0022      	movs	r2, r4
 800b8a4:	0021      	movs	r1, r4
 800b8a6:	0038      	movs	r0, r7
 800b8a8:	f7ff ff04 	bl	800b6b4 <__multiply>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	6020      	str	r0, [r4, #0]
 800b8b0:	6003      	str	r3, [r0, #0]
 800b8b2:	0004      	movs	r4, r0
 800b8b4:	e7e2      	b.n	800b87c <__pow5mult+0x68>
 800b8b6:	0030      	movs	r0, r6
 800b8b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	0800c8e8 	.word	0x0800c8e8
 800b8c0:	0800c715 	.word	0x0800c715
 800b8c4:	0800c798 	.word	0x0800c798
 800b8c8:	00000271 	.word	0x00000271

0800b8cc <__lshift>:
 800b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ce:	000c      	movs	r4, r1
 800b8d0:	0017      	movs	r7, r2
 800b8d2:	6923      	ldr	r3, [r4, #16]
 800b8d4:	1155      	asrs	r5, r2, #5
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	18eb      	adds	r3, r5, r3
 800b8da:	9302      	str	r3, [sp, #8]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	6849      	ldr	r1, [r1, #4]
 800b8e2:	68a3      	ldr	r3, [r4, #8]
 800b8e4:	9004      	str	r0, [sp, #16]
 800b8e6:	9a01      	ldr	r2, [sp, #4]
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	db10      	blt.n	800b90e <__lshift+0x42>
 800b8ec:	9804      	ldr	r0, [sp, #16]
 800b8ee:	f7ff fdd7 	bl	800b4a0 <_Balloc>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	0002      	movs	r2, r0
 800b8f6:	0006      	movs	r6, r0
 800b8f8:	0019      	movs	r1, r3
 800b8fa:	3214      	adds	r2, #20
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	d10c      	bne.n	800b91a <__lshift+0x4e>
 800b900:	21da      	movs	r1, #218	; 0xda
 800b902:	0002      	movs	r2, r0
 800b904:	4b26      	ldr	r3, [pc, #152]	; (800b9a0 <__lshift+0xd4>)
 800b906:	4827      	ldr	r0, [pc, #156]	; (800b9a4 <__lshift+0xd8>)
 800b908:	31ff      	adds	r1, #255	; 0xff
 800b90a:	f000 f9ef 	bl	800bcec <__assert_func>
 800b90e:	3101      	adds	r1, #1
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	e7e8      	b.n	800b8e6 <__lshift+0x1a>
 800b914:	0098      	lsls	r0, r3, #2
 800b916:	5011      	str	r1, [r2, r0]
 800b918:	3301      	adds	r3, #1
 800b91a:	42ab      	cmp	r3, r5
 800b91c:	dbfa      	blt.n	800b914 <__lshift+0x48>
 800b91e:	43eb      	mvns	r3, r5
 800b920:	17db      	asrs	r3, r3, #31
 800b922:	401d      	ands	r5, r3
 800b924:	211f      	movs	r1, #31
 800b926:	0023      	movs	r3, r4
 800b928:	0038      	movs	r0, r7
 800b92a:	00ad      	lsls	r5, r5, #2
 800b92c:	1955      	adds	r5, r2, r5
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	3314      	adds	r3, #20
 800b932:	0092      	lsls	r2, r2, #2
 800b934:	4008      	ands	r0, r1
 800b936:	4684      	mov	ip, r0
 800b938:	189a      	adds	r2, r3, r2
 800b93a:	420f      	tst	r7, r1
 800b93c:	d02a      	beq.n	800b994 <__lshift+0xc8>
 800b93e:	3101      	adds	r1, #1
 800b940:	1a09      	subs	r1, r1, r0
 800b942:	9105      	str	r1, [sp, #20]
 800b944:	2100      	movs	r1, #0
 800b946:	9503      	str	r5, [sp, #12]
 800b948:	4667      	mov	r7, ip
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	40b8      	lsls	r0, r7
 800b94e:	4301      	orrs	r1, r0
 800b950:	9803      	ldr	r0, [sp, #12]
 800b952:	c002      	stmia	r0!, {r1}
 800b954:	cb02      	ldmia	r3!, {r1}
 800b956:	9003      	str	r0, [sp, #12]
 800b958:	9805      	ldr	r0, [sp, #20]
 800b95a:	40c1      	lsrs	r1, r0
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d8f3      	bhi.n	800b948 <__lshift+0x7c>
 800b960:	0020      	movs	r0, r4
 800b962:	3015      	adds	r0, #21
 800b964:	2304      	movs	r3, #4
 800b966:	4282      	cmp	r2, r0
 800b968:	d304      	bcc.n	800b974 <__lshift+0xa8>
 800b96a:	1b13      	subs	r3, r2, r4
 800b96c:	3b15      	subs	r3, #21
 800b96e:	089b      	lsrs	r3, r3, #2
 800b970:	3301      	adds	r3, #1
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	50e9      	str	r1, [r5, r3]
 800b976:	2900      	cmp	r1, #0
 800b978:	d002      	beq.n	800b980 <__lshift+0xb4>
 800b97a:	9b02      	ldr	r3, [sp, #8]
 800b97c:	3302      	adds	r3, #2
 800b97e:	9301      	str	r3, [sp, #4]
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	9804      	ldr	r0, [sp, #16]
 800b984:	3b01      	subs	r3, #1
 800b986:	0021      	movs	r1, r4
 800b988:	6133      	str	r3, [r6, #16]
 800b98a:	f7ff fdcd 	bl	800b528 <_Bfree>
 800b98e:	0030      	movs	r0, r6
 800b990:	b007      	add	sp, #28
 800b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b994:	cb02      	ldmia	r3!, {r1}
 800b996:	c502      	stmia	r5!, {r1}
 800b998:	429a      	cmp	r2, r3
 800b99a:	d8fb      	bhi.n	800b994 <__lshift+0xc8>
 800b99c:	e7f0      	b.n	800b980 <__lshift+0xb4>
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	0800c787 	.word	0x0800c787
 800b9a4:	0800c798 	.word	0x0800c798

0800b9a8 <__mcmp>:
 800b9a8:	6902      	ldr	r2, [r0, #16]
 800b9aa:	690b      	ldr	r3, [r1, #16]
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	0004      	movs	r4, r0
 800b9b0:	1ad0      	subs	r0, r2, r3
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d10d      	bne.n	800b9d2 <__mcmp+0x2a>
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	3414      	adds	r4, #20
 800b9ba:	3114      	adds	r1, #20
 800b9bc:	18e2      	adds	r2, r4, r3
 800b9be:	18c9      	adds	r1, r1, r3
 800b9c0:	3a04      	subs	r2, #4
 800b9c2:	3904      	subs	r1, #4
 800b9c4:	6815      	ldr	r5, [r2, #0]
 800b9c6:	680b      	ldr	r3, [r1, #0]
 800b9c8:	429d      	cmp	r5, r3
 800b9ca:	d003      	beq.n	800b9d4 <__mcmp+0x2c>
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	429d      	cmp	r5, r3
 800b9d0:	d303      	bcc.n	800b9da <__mcmp+0x32>
 800b9d2:	bd30      	pop	{r4, r5, pc}
 800b9d4:	4294      	cmp	r4, r2
 800b9d6:	d3f3      	bcc.n	800b9c0 <__mcmp+0x18>
 800b9d8:	e7fb      	b.n	800b9d2 <__mcmp+0x2a>
 800b9da:	4240      	negs	r0, r0
 800b9dc:	e7f9      	b.n	800b9d2 <__mcmp+0x2a>
	...

0800b9e0 <__mdiff>:
 800b9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e2:	000e      	movs	r6, r1
 800b9e4:	0007      	movs	r7, r0
 800b9e6:	0011      	movs	r1, r2
 800b9e8:	0030      	movs	r0, r6
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	0014      	movs	r4, r2
 800b9ee:	f7ff ffdb 	bl	800b9a8 <__mcmp>
 800b9f2:	1e05      	subs	r5, r0, #0
 800b9f4:	d110      	bne.n	800ba18 <__mdiff+0x38>
 800b9f6:	0001      	movs	r1, r0
 800b9f8:	0038      	movs	r0, r7
 800b9fa:	f7ff fd51 	bl	800b4a0 <_Balloc>
 800b9fe:	1e02      	subs	r2, r0, #0
 800ba00:	d104      	bne.n	800ba0c <__mdiff+0x2c>
 800ba02:	4b40      	ldr	r3, [pc, #256]	; (800bb04 <__mdiff+0x124>)
 800ba04:	4940      	ldr	r1, [pc, #256]	; (800bb08 <__mdiff+0x128>)
 800ba06:	4841      	ldr	r0, [pc, #260]	; (800bb0c <__mdiff+0x12c>)
 800ba08:	f000 f970 	bl	800bcec <__assert_func>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	6145      	str	r5, [r0, #20]
 800ba10:	6103      	str	r3, [r0, #16]
 800ba12:	0010      	movs	r0, r2
 800ba14:	b007      	add	sp, #28
 800ba16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba18:	2301      	movs	r3, #1
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	db04      	blt.n	800ba2a <__mdiff+0x4a>
 800ba20:	0023      	movs	r3, r4
 800ba22:	0034      	movs	r4, r6
 800ba24:	001e      	movs	r6, r3
 800ba26:	2300      	movs	r3, #0
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	0038      	movs	r0, r7
 800ba2c:	6861      	ldr	r1, [r4, #4]
 800ba2e:	f7ff fd37 	bl	800b4a0 <_Balloc>
 800ba32:	1e02      	subs	r2, r0, #0
 800ba34:	d103      	bne.n	800ba3e <__mdiff+0x5e>
 800ba36:	2190      	movs	r1, #144	; 0x90
 800ba38:	4b32      	ldr	r3, [pc, #200]	; (800bb04 <__mdiff+0x124>)
 800ba3a:	0089      	lsls	r1, r1, #2
 800ba3c:	e7e3      	b.n	800ba06 <__mdiff+0x26>
 800ba3e:	9b01      	ldr	r3, [sp, #4]
 800ba40:	2700      	movs	r7, #0
 800ba42:	60c3      	str	r3, [r0, #12]
 800ba44:	6920      	ldr	r0, [r4, #16]
 800ba46:	3414      	adds	r4, #20
 800ba48:	9401      	str	r4, [sp, #4]
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	0084      	lsls	r4, r0, #2
 800ba4e:	191b      	adds	r3, r3, r4
 800ba50:	0034      	movs	r4, r6
 800ba52:	9302      	str	r3, [sp, #8]
 800ba54:	6933      	ldr	r3, [r6, #16]
 800ba56:	3414      	adds	r4, #20
 800ba58:	0099      	lsls	r1, r3, #2
 800ba5a:	1863      	adds	r3, r4, r1
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	0013      	movs	r3, r2
 800ba60:	3314      	adds	r3, #20
 800ba62:	469c      	mov	ip, r3
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	9304      	str	r3, [sp, #16]
 800ba6a:	9b04      	ldr	r3, [sp, #16]
 800ba6c:	cc02      	ldmia	r4!, {r1}
 800ba6e:	cb20      	ldmia	r3!, {r5}
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	b2ab      	uxth	r3, r5
 800ba74:	19df      	adds	r7, r3, r7
 800ba76:	b28b      	uxth	r3, r1
 800ba78:	1afb      	subs	r3, r7, r3
 800ba7a:	0c09      	lsrs	r1, r1, #16
 800ba7c:	0c2d      	lsrs	r5, r5, #16
 800ba7e:	1a6d      	subs	r5, r5, r1
 800ba80:	1419      	asrs	r1, r3, #16
 800ba82:	186d      	adds	r5, r5, r1
 800ba84:	4661      	mov	r1, ip
 800ba86:	142f      	asrs	r7, r5, #16
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	042d      	lsls	r5, r5, #16
 800ba8c:	432b      	orrs	r3, r5
 800ba8e:	c108      	stmia	r1!, {r3}
 800ba90:	9b03      	ldr	r3, [sp, #12]
 800ba92:	468c      	mov	ip, r1
 800ba94:	42a3      	cmp	r3, r4
 800ba96:	d8e8      	bhi.n	800ba6a <__mdiff+0x8a>
 800ba98:	0031      	movs	r1, r6
 800ba9a:	9c03      	ldr	r4, [sp, #12]
 800ba9c:	3115      	adds	r1, #21
 800ba9e:	2304      	movs	r3, #4
 800baa0:	428c      	cmp	r4, r1
 800baa2:	d304      	bcc.n	800baae <__mdiff+0xce>
 800baa4:	1ba3      	subs	r3, r4, r6
 800baa6:	3b15      	subs	r3, #21
 800baa8:	089b      	lsrs	r3, r3, #2
 800baaa:	3301      	adds	r3, #1
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	9901      	ldr	r1, [sp, #4]
 800bab0:	18cc      	adds	r4, r1, r3
 800bab2:	9905      	ldr	r1, [sp, #20]
 800bab4:	0026      	movs	r6, r4
 800bab6:	18cb      	adds	r3, r1, r3
 800bab8:	469c      	mov	ip, r3
 800baba:	9902      	ldr	r1, [sp, #8]
 800babc:	428e      	cmp	r6, r1
 800babe:	d310      	bcc.n	800bae2 <__mdiff+0x102>
 800bac0:	9e02      	ldr	r6, [sp, #8]
 800bac2:	1ee1      	subs	r1, r4, #3
 800bac4:	2500      	movs	r5, #0
 800bac6:	428e      	cmp	r6, r1
 800bac8:	d304      	bcc.n	800bad4 <__mdiff+0xf4>
 800baca:	0031      	movs	r1, r6
 800bacc:	3103      	adds	r1, #3
 800bace:	1b0c      	subs	r4, r1, r4
 800bad0:	08a4      	lsrs	r4, r4, #2
 800bad2:	00a5      	lsls	r5, r4, #2
 800bad4:	195b      	adds	r3, r3, r5
 800bad6:	3b04      	subs	r3, #4
 800bad8:	6819      	ldr	r1, [r3, #0]
 800bada:	2900      	cmp	r1, #0
 800badc:	d00f      	beq.n	800bafe <__mdiff+0x11e>
 800bade:	6110      	str	r0, [r2, #16]
 800bae0:	e797      	b.n	800ba12 <__mdiff+0x32>
 800bae2:	ce02      	ldmia	r6!, {r1}
 800bae4:	b28d      	uxth	r5, r1
 800bae6:	19ed      	adds	r5, r5, r7
 800bae8:	0c0f      	lsrs	r7, r1, #16
 800baea:	1429      	asrs	r1, r5, #16
 800baec:	1879      	adds	r1, r7, r1
 800baee:	140f      	asrs	r7, r1, #16
 800baf0:	b2ad      	uxth	r5, r5
 800baf2:	0409      	lsls	r1, r1, #16
 800baf4:	430d      	orrs	r5, r1
 800baf6:	4661      	mov	r1, ip
 800baf8:	c120      	stmia	r1!, {r5}
 800bafa:	468c      	mov	ip, r1
 800bafc:	e7dd      	b.n	800baba <__mdiff+0xda>
 800bafe:	3801      	subs	r0, #1
 800bb00:	e7e9      	b.n	800bad6 <__mdiff+0xf6>
 800bb02:	46c0      	nop			; (mov r8, r8)
 800bb04:	0800c787 	.word	0x0800c787
 800bb08:	00000232 	.word	0x00000232
 800bb0c:	0800c798 	.word	0x0800c798

0800bb10 <__d2b>:
 800bb10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb12:	2101      	movs	r1, #1
 800bb14:	0014      	movs	r4, r2
 800bb16:	001e      	movs	r6, r3
 800bb18:	9f08      	ldr	r7, [sp, #32]
 800bb1a:	f7ff fcc1 	bl	800b4a0 <_Balloc>
 800bb1e:	1e05      	subs	r5, r0, #0
 800bb20:	d105      	bne.n	800bb2e <__d2b+0x1e>
 800bb22:	0002      	movs	r2, r0
 800bb24:	4b26      	ldr	r3, [pc, #152]	; (800bbc0 <__d2b+0xb0>)
 800bb26:	4927      	ldr	r1, [pc, #156]	; (800bbc4 <__d2b+0xb4>)
 800bb28:	4827      	ldr	r0, [pc, #156]	; (800bbc8 <__d2b+0xb8>)
 800bb2a:	f000 f8df 	bl	800bcec <__assert_func>
 800bb2e:	0333      	lsls	r3, r6, #12
 800bb30:	0076      	lsls	r6, r6, #1
 800bb32:	0b1b      	lsrs	r3, r3, #12
 800bb34:	0d76      	lsrs	r6, r6, #21
 800bb36:	d124      	bne.n	800bb82 <__d2b+0x72>
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	2c00      	cmp	r4, #0
 800bb3c:	d027      	beq.n	800bb8e <__d2b+0x7e>
 800bb3e:	4668      	mov	r0, sp
 800bb40:	9400      	str	r4, [sp, #0]
 800bb42:	f7ff fd73 	bl	800b62c <__lo0bits>
 800bb46:	9c00      	ldr	r4, [sp, #0]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d01e      	beq.n	800bb8a <__d2b+0x7a>
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	2120      	movs	r1, #32
 800bb50:	001a      	movs	r2, r3
 800bb52:	1a09      	subs	r1, r1, r0
 800bb54:	408a      	lsls	r2, r1
 800bb56:	40c3      	lsrs	r3, r0
 800bb58:	4322      	orrs	r2, r4
 800bb5a:	616a      	str	r2, [r5, #20]
 800bb5c:	9301      	str	r3, [sp, #4]
 800bb5e:	9c01      	ldr	r4, [sp, #4]
 800bb60:	61ac      	str	r4, [r5, #24]
 800bb62:	1e63      	subs	r3, r4, #1
 800bb64:	419c      	sbcs	r4, r3
 800bb66:	3401      	adds	r4, #1
 800bb68:	612c      	str	r4, [r5, #16]
 800bb6a:	2e00      	cmp	r6, #0
 800bb6c:	d018      	beq.n	800bba0 <__d2b+0x90>
 800bb6e:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <__d2b+0xbc>)
 800bb70:	18f6      	adds	r6, r6, r3
 800bb72:	2335      	movs	r3, #53	; 0x35
 800bb74:	1836      	adds	r6, r6, r0
 800bb76:	1a18      	subs	r0, r3, r0
 800bb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7a:	603e      	str	r6, [r7, #0]
 800bb7c:	6018      	str	r0, [r3, #0]
 800bb7e:	0028      	movs	r0, r5
 800bb80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb82:	2280      	movs	r2, #128	; 0x80
 800bb84:	0352      	lsls	r2, r2, #13
 800bb86:	4313      	orrs	r3, r2
 800bb88:	e7d6      	b.n	800bb38 <__d2b+0x28>
 800bb8a:	616c      	str	r4, [r5, #20]
 800bb8c:	e7e7      	b.n	800bb5e <__d2b+0x4e>
 800bb8e:	a801      	add	r0, sp, #4
 800bb90:	f7ff fd4c 	bl	800b62c <__lo0bits>
 800bb94:	2401      	movs	r4, #1
 800bb96:	9b01      	ldr	r3, [sp, #4]
 800bb98:	612c      	str	r4, [r5, #16]
 800bb9a:	616b      	str	r3, [r5, #20]
 800bb9c:	3020      	adds	r0, #32
 800bb9e:	e7e4      	b.n	800bb6a <__d2b+0x5a>
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <__d2b+0xc0>)
 800bba2:	18c0      	adds	r0, r0, r3
 800bba4:	4b0b      	ldr	r3, [pc, #44]	; (800bbd4 <__d2b+0xc4>)
 800bba6:	6038      	str	r0, [r7, #0]
 800bba8:	18e3      	adds	r3, r4, r3
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	18eb      	adds	r3, r5, r3
 800bbae:	6958      	ldr	r0, [r3, #20]
 800bbb0:	f7ff fd22 	bl	800b5f8 <__hi0bits>
 800bbb4:	0164      	lsls	r4, r4, #5
 800bbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb8:	1a24      	subs	r4, r4, r0
 800bbba:	601c      	str	r4, [r3, #0]
 800bbbc:	e7df      	b.n	800bb7e <__d2b+0x6e>
 800bbbe:	46c0      	nop			; (mov r8, r8)
 800bbc0:	0800c787 	.word	0x0800c787
 800bbc4:	0000030a 	.word	0x0000030a
 800bbc8:	0800c798 	.word	0x0800c798
 800bbcc:	fffffbcd 	.word	0xfffffbcd
 800bbd0:	fffffbce 	.word	0xfffffbce
 800bbd4:	3fffffff 	.word	0x3fffffff

0800bbd8 <_calloc_r>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	0c13      	lsrs	r3, r2, #16
 800bbdc:	0c0d      	lsrs	r5, r1, #16
 800bbde:	d11e      	bne.n	800bc1e <_calloc_r+0x46>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10c      	bne.n	800bbfe <_calloc_r+0x26>
 800bbe4:	b289      	uxth	r1, r1
 800bbe6:	b294      	uxth	r4, r2
 800bbe8:	434c      	muls	r4, r1
 800bbea:	0021      	movs	r1, r4
 800bbec:	f7fd fecc 	bl	8009988 <_malloc_r>
 800bbf0:	1e05      	subs	r5, r0, #0
 800bbf2:	d01b      	beq.n	800bc2c <_calloc_r+0x54>
 800bbf4:	0022      	movs	r2, r4
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	f7fd fe9c 	bl	8009934 <memset>
 800bbfc:	e016      	b.n	800bc2c <_calloc_r+0x54>
 800bbfe:	1c1d      	adds	r5, r3, #0
 800bc00:	1c0b      	adds	r3, r1, #0
 800bc02:	b292      	uxth	r2, r2
 800bc04:	b289      	uxth	r1, r1
 800bc06:	b29c      	uxth	r4, r3
 800bc08:	4351      	muls	r1, r2
 800bc0a:	b2ab      	uxth	r3, r5
 800bc0c:	4363      	muls	r3, r4
 800bc0e:	0c0c      	lsrs	r4, r1, #16
 800bc10:	191c      	adds	r4, r3, r4
 800bc12:	0c22      	lsrs	r2, r4, #16
 800bc14:	d107      	bne.n	800bc26 <_calloc_r+0x4e>
 800bc16:	0424      	lsls	r4, r4, #16
 800bc18:	b289      	uxth	r1, r1
 800bc1a:	430c      	orrs	r4, r1
 800bc1c:	e7e5      	b.n	800bbea <_calloc_r+0x12>
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <_calloc_r+0x4e>
 800bc22:	1c13      	adds	r3, r2, #0
 800bc24:	e7ed      	b.n	800bc02 <_calloc_r+0x2a>
 800bc26:	230c      	movs	r3, #12
 800bc28:	2500      	movs	r5, #0
 800bc2a:	6003      	str	r3, [r0, #0]
 800bc2c:	0028      	movs	r0, r5
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}

0800bc30 <_free_r>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	0005      	movs	r5, r0
 800bc34:	2900      	cmp	r1, #0
 800bc36:	d010      	beq.n	800bc5a <_free_r+0x2a>
 800bc38:	1f0c      	subs	r4, r1, #4
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da00      	bge.n	800bc42 <_free_r+0x12>
 800bc40:	18e4      	adds	r4, r4, r3
 800bc42:	0028      	movs	r0, r5
 800bc44:	f7ff fc1c 	bl	800b480 <__malloc_lock>
 800bc48:	4a1d      	ldr	r2, [pc, #116]	; (800bcc0 <_free_r+0x90>)
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d105      	bne.n	800bc5c <_free_r+0x2c>
 800bc50:	6063      	str	r3, [r4, #4]
 800bc52:	6014      	str	r4, [r2, #0]
 800bc54:	0028      	movs	r0, r5
 800bc56:	f7ff fc1b 	bl	800b490 <__malloc_unlock>
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	d908      	bls.n	800bc72 <_free_r+0x42>
 800bc60:	6821      	ldr	r1, [r4, #0]
 800bc62:	1860      	adds	r0, r4, r1
 800bc64:	4283      	cmp	r3, r0
 800bc66:	d1f3      	bne.n	800bc50 <_free_r+0x20>
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	1841      	adds	r1, r0, r1
 800bc6e:	6021      	str	r1, [r4, #0]
 800bc70:	e7ee      	b.n	800bc50 <_free_r+0x20>
 800bc72:	001a      	movs	r2, r3
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <_free_r+0x4e>
 800bc7a:	42a3      	cmp	r3, r4
 800bc7c:	d9f9      	bls.n	800bc72 <_free_r+0x42>
 800bc7e:	6811      	ldr	r1, [r2, #0]
 800bc80:	1850      	adds	r0, r2, r1
 800bc82:	42a0      	cmp	r0, r4
 800bc84:	d10b      	bne.n	800bc9e <_free_r+0x6e>
 800bc86:	6820      	ldr	r0, [r4, #0]
 800bc88:	1809      	adds	r1, r1, r0
 800bc8a:	1850      	adds	r0, r2, r1
 800bc8c:	6011      	str	r1, [r2, #0]
 800bc8e:	4283      	cmp	r3, r0
 800bc90:	d1e0      	bne.n	800bc54 <_free_r+0x24>
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	1841      	adds	r1, r0, r1
 800bc98:	6011      	str	r1, [r2, #0]
 800bc9a:	6053      	str	r3, [r2, #4]
 800bc9c:	e7da      	b.n	800bc54 <_free_r+0x24>
 800bc9e:	42a0      	cmp	r0, r4
 800bca0:	d902      	bls.n	800bca8 <_free_r+0x78>
 800bca2:	230c      	movs	r3, #12
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	e7d5      	b.n	800bc54 <_free_r+0x24>
 800bca8:	6821      	ldr	r1, [r4, #0]
 800bcaa:	1860      	adds	r0, r4, r1
 800bcac:	4283      	cmp	r3, r0
 800bcae:	d103      	bne.n	800bcb8 <_free_r+0x88>
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	1841      	adds	r1, r0, r1
 800bcb6:	6021      	str	r1, [r4, #0]
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	6054      	str	r4, [r2, #4]
 800bcbc:	e7ca      	b.n	800bc54 <_free_r+0x24>
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	20001d70 	.word	0x20001d70

0800bcc4 <_read_r>:
 800bcc4:	b570      	push	{r4, r5, r6, lr}
 800bcc6:	0004      	movs	r4, r0
 800bcc8:	0008      	movs	r0, r1
 800bcca:	0011      	movs	r1, r2
 800bccc:	001a      	movs	r2, r3
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4d05      	ldr	r5, [pc, #20]	; (800bce8 <_read_r+0x24>)
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f6 ff52 	bl	8002b7c <_read>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d103      	bne.n	800bce4 <_read_r+0x20>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d000      	beq.n	800bce4 <_read_r+0x20>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	46c0      	nop			; (mov r8, r8)
 800bce8:	20001d78 	.word	0x20001d78

0800bcec <__assert_func>:
 800bcec:	b530      	push	{r4, r5, lr}
 800bcee:	0014      	movs	r4, r2
 800bcf0:	001a      	movs	r2, r3
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <__assert_func+0x2c>)
 800bcf4:	0005      	movs	r5, r0
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	68d8      	ldr	r0, [r3, #12]
 800bcfc:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <__assert_func+0x30>)
 800bcfe:	2c00      	cmp	r4, #0
 800bd00:	d101      	bne.n	800bd06 <__assert_func+0x1a>
 800bd02:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <__assert_func+0x34>)
 800bd04:	001c      	movs	r4, r3
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	9100      	str	r1, [sp, #0]
 800bd0a:	002b      	movs	r3, r5
 800bd0c:	4905      	ldr	r1, [pc, #20]	; (800bd24 <__assert_func+0x38>)
 800bd0e:	9402      	str	r4, [sp, #8]
 800bd10:	f000 f80a 	bl	800bd28 <fiprintf>
 800bd14:	f000 fa68 	bl	800c1e8 <abort>
 800bd18:	20000014 	.word	0x20000014
 800bd1c:	0800c8f4 	.word	0x0800c8f4
 800bd20:	0800c92f 	.word	0x0800c92f
 800bd24:	0800c901 	.word	0x0800c901

0800bd28 <fiprintf>:
 800bd28:	b40e      	push	{r1, r2, r3}
 800bd2a:	b503      	push	{r0, r1, lr}
 800bd2c:	0001      	movs	r1, r0
 800bd2e:	ab03      	add	r3, sp, #12
 800bd30:	4804      	ldr	r0, [pc, #16]	; (800bd44 <fiprintf+0x1c>)
 800bd32:	cb04      	ldmia	r3!, {r2}
 800bd34:	6800      	ldr	r0, [r0, #0]
 800bd36:	9301      	str	r3, [sp, #4]
 800bd38:	f000 f840 	bl	800bdbc <_vfiprintf_r>
 800bd3c:	b002      	add	sp, #8
 800bd3e:	bc08      	pop	{r3}
 800bd40:	b003      	add	sp, #12
 800bd42:	4718      	bx	r3
 800bd44:	20000014 	.word	0x20000014

0800bd48 <__ascii_mbtowc>:
 800bd48:	b082      	sub	sp, #8
 800bd4a:	2900      	cmp	r1, #0
 800bd4c:	d100      	bne.n	800bd50 <__ascii_mbtowc+0x8>
 800bd4e:	a901      	add	r1, sp, #4
 800bd50:	1e10      	subs	r0, r2, #0
 800bd52:	d006      	beq.n	800bd62 <__ascii_mbtowc+0x1a>
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d006      	beq.n	800bd66 <__ascii_mbtowc+0x1e>
 800bd58:	7813      	ldrb	r3, [r2, #0]
 800bd5a:	600b      	str	r3, [r1, #0]
 800bd5c:	7810      	ldrb	r0, [r2, #0]
 800bd5e:	1e43      	subs	r3, r0, #1
 800bd60:	4198      	sbcs	r0, r3
 800bd62:	b002      	add	sp, #8
 800bd64:	4770      	bx	lr
 800bd66:	2002      	movs	r0, #2
 800bd68:	4240      	negs	r0, r0
 800bd6a:	e7fa      	b.n	800bd62 <__ascii_mbtowc+0x1a>

0800bd6c <__sfputc_r>:
 800bd6c:	6893      	ldr	r3, [r2, #8]
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	3b01      	subs	r3, #1
 800bd72:	6093      	str	r3, [r2, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	da04      	bge.n	800bd82 <__sfputc_r+0x16>
 800bd78:	6994      	ldr	r4, [r2, #24]
 800bd7a:	42a3      	cmp	r3, r4
 800bd7c:	db07      	blt.n	800bd8e <__sfputc_r+0x22>
 800bd7e:	290a      	cmp	r1, #10
 800bd80:	d005      	beq.n	800bd8e <__sfputc_r+0x22>
 800bd82:	6813      	ldr	r3, [r2, #0]
 800bd84:	1c58      	adds	r0, r3, #1
 800bd86:	6010      	str	r0, [r2, #0]
 800bd88:	7019      	strb	r1, [r3, #0]
 800bd8a:	0008      	movs	r0, r1
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	f000 f94f 	bl	800c030 <__swbuf_r>
 800bd92:	0001      	movs	r1, r0
 800bd94:	e7f9      	b.n	800bd8a <__sfputc_r+0x1e>

0800bd96 <__sfputs_r>:
 800bd96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd98:	0006      	movs	r6, r0
 800bd9a:	000f      	movs	r7, r1
 800bd9c:	0014      	movs	r4, r2
 800bd9e:	18d5      	adds	r5, r2, r3
 800bda0:	42ac      	cmp	r4, r5
 800bda2:	d101      	bne.n	800bda8 <__sfputs_r+0x12>
 800bda4:	2000      	movs	r0, #0
 800bda6:	e007      	b.n	800bdb8 <__sfputs_r+0x22>
 800bda8:	7821      	ldrb	r1, [r4, #0]
 800bdaa:	003a      	movs	r2, r7
 800bdac:	0030      	movs	r0, r6
 800bdae:	f7ff ffdd 	bl	800bd6c <__sfputc_r>
 800bdb2:	3401      	adds	r4, #1
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d1f3      	bne.n	800bda0 <__sfputs_r+0xa>
 800bdb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdbc <_vfiprintf_r>:
 800bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdbe:	b0a1      	sub	sp, #132	; 0x84
 800bdc0:	0006      	movs	r6, r0
 800bdc2:	000c      	movs	r4, r1
 800bdc4:	001f      	movs	r7, r3
 800bdc6:	9203      	str	r2, [sp, #12]
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d004      	beq.n	800bdd6 <_vfiprintf_r+0x1a>
 800bdcc:	6983      	ldr	r3, [r0, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <_vfiprintf_r+0x1a>
 800bdd2:	f7fd fcdf 	bl	8009794 <__sinit>
 800bdd6:	4b8e      	ldr	r3, [pc, #568]	; (800c010 <_vfiprintf_r+0x254>)
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	d11c      	bne.n	800be16 <_vfiprintf_r+0x5a>
 800bddc:	6874      	ldr	r4, [r6, #4]
 800bdde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bde0:	07db      	lsls	r3, r3, #31
 800bde2:	d405      	bmi.n	800bdf0 <_vfiprintf_r+0x34>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	059b      	lsls	r3, r3, #22
 800bde8:	d402      	bmi.n	800bdf0 <_vfiprintf_r+0x34>
 800bdea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdec:	f7fd fd97 	bl	800991e <__retarget_lock_acquire_recursive>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	071b      	lsls	r3, r3, #28
 800bdf4:	d502      	bpl.n	800bdfc <_vfiprintf_r+0x40>
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d11d      	bne.n	800be38 <_vfiprintf_r+0x7c>
 800bdfc:	0021      	movs	r1, r4
 800bdfe:	0030      	movs	r0, r6
 800be00:	f000 f97a 	bl	800c0f8 <__swsetup_r>
 800be04:	2800      	cmp	r0, #0
 800be06:	d017      	beq.n	800be38 <_vfiprintf_r+0x7c>
 800be08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be0a:	07db      	lsls	r3, r3, #31
 800be0c:	d50d      	bpl.n	800be2a <_vfiprintf_r+0x6e>
 800be0e:	2001      	movs	r0, #1
 800be10:	4240      	negs	r0, r0
 800be12:	b021      	add	sp, #132	; 0x84
 800be14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be16:	4b7f      	ldr	r3, [pc, #508]	; (800c014 <_vfiprintf_r+0x258>)
 800be18:	429c      	cmp	r4, r3
 800be1a:	d101      	bne.n	800be20 <_vfiprintf_r+0x64>
 800be1c:	68b4      	ldr	r4, [r6, #8]
 800be1e:	e7de      	b.n	800bdde <_vfiprintf_r+0x22>
 800be20:	4b7d      	ldr	r3, [pc, #500]	; (800c018 <_vfiprintf_r+0x25c>)
 800be22:	429c      	cmp	r4, r3
 800be24:	d1db      	bne.n	800bdde <_vfiprintf_r+0x22>
 800be26:	68f4      	ldr	r4, [r6, #12]
 800be28:	e7d9      	b.n	800bdde <_vfiprintf_r+0x22>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	059b      	lsls	r3, r3, #22
 800be2e:	d4ee      	bmi.n	800be0e <_vfiprintf_r+0x52>
 800be30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be32:	f7fd fd75 	bl	8009920 <__retarget_lock_release_recursive>
 800be36:	e7ea      	b.n	800be0e <_vfiprintf_r+0x52>
 800be38:	2300      	movs	r3, #0
 800be3a:	ad08      	add	r5, sp, #32
 800be3c:	616b      	str	r3, [r5, #20]
 800be3e:	3320      	adds	r3, #32
 800be40:	766b      	strb	r3, [r5, #25]
 800be42:	3310      	adds	r3, #16
 800be44:	76ab      	strb	r3, [r5, #26]
 800be46:	9707      	str	r7, [sp, #28]
 800be48:	9f03      	ldr	r7, [sp, #12]
 800be4a:	783b      	ldrb	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d001      	beq.n	800be54 <_vfiprintf_r+0x98>
 800be50:	2b25      	cmp	r3, #37	; 0x25
 800be52:	d14e      	bne.n	800bef2 <_vfiprintf_r+0x136>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	1afb      	subs	r3, r7, r3
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	9b03      	ldr	r3, [sp, #12]
 800be5c:	429f      	cmp	r7, r3
 800be5e:	d00d      	beq.n	800be7c <_vfiprintf_r+0xc0>
 800be60:	9b05      	ldr	r3, [sp, #20]
 800be62:	0021      	movs	r1, r4
 800be64:	0030      	movs	r0, r6
 800be66:	9a03      	ldr	r2, [sp, #12]
 800be68:	f7ff ff95 	bl	800bd96 <__sfputs_r>
 800be6c:	1c43      	adds	r3, r0, #1
 800be6e:	d100      	bne.n	800be72 <_vfiprintf_r+0xb6>
 800be70:	e0b5      	b.n	800bfde <_vfiprintf_r+0x222>
 800be72:	696a      	ldr	r2, [r5, #20]
 800be74:	9b05      	ldr	r3, [sp, #20]
 800be76:	4694      	mov	ip, r2
 800be78:	4463      	add	r3, ip
 800be7a:	616b      	str	r3, [r5, #20]
 800be7c:	783b      	ldrb	r3, [r7, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d100      	bne.n	800be84 <_vfiprintf_r+0xc8>
 800be82:	e0ac      	b.n	800bfde <_vfiprintf_r+0x222>
 800be84:	2201      	movs	r2, #1
 800be86:	1c7b      	adds	r3, r7, #1
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	2300      	movs	r3, #0
 800be8c:	4252      	negs	r2, r2
 800be8e:	606a      	str	r2, [r5, #4]
 800be90:	a904      	add	r1, sp, #16
 800be92:	3254      	adds	r2, #84	; 0x54
 800be94:	1852      	adds	r2, r2, r1
 800be96:	602b      	str	r3, [r5, #0]
 800be98:	60eb      	str	r3, [r5, #12]
 800be9a:	60ab      	str	r3, [r5, #8]
 800be9c:	7013      	strb	r3, [r2, #0]
 800be9e:	65ab      	str	r3, [r5, #88]	; 0x58
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	2205      	movs	r2, #5
 800bea4:	7819      	ldrb	r1, [r3, #0]
 800bea6:	485d      	ldr	r0, [pc, #372]	; (800c01c <_vfiprintf_r+0x260>)
 800bea8:	f7ff fade 	bl	800b468 <memchr>
 800beac:	9b03      	ldr	r3, [sp, #12]
 800beae:	1c5f      	adds	r7, r3, #1
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d120      	bne.n	800bef6 <_vfiprintf_r+0x13a>
 800beb4:	682a      	ldr	r2, [r5, #0]
 800beb6:	06d3      	lsls	r3, r2, #27
 800beb8:	d504      	bpl.n	800bec4 <_vfiprintf_r+0x108>
 800beba:	2353      	movs	r3, #83	; 0x53
 800bebc:	a904      	add	r1, sp, #16
 800bebe:	185b      	adds	r3, r3, r1
 800bec0:	2120      	movs	r1, #32
 800bec2:	7019      	strb	r1, [r3, #0]
 800bec4:	0713      	lsls	r3, r2, #28
 800bec6:	d504      	bpl.n	800bed2 <_vfiprintf_r+0x116>
 800bec8:	2353      	movs	r3, #83	; 0x53
 800beca:	a904      	add	r1, sp, #16
 800becc:	185b      	adds	r3, r3, r1
 800bece:	212b      	movs	r1, #43	; 0x2b
 800bed0:	7019      	strb	r1, [r3, #0]
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2b2a      	cmp	r3, #42	; 0x2a
 800bed8:	d016      	beq.n	800bf08 <_vfiprintf_r+0x14c>
 800beda:	2100      	movs	r1, #0
 800bedc:	68eb      	ldr	r3, [r5, #12]
 800bede:	9f03      	ldr	r7, [sp, #12]
 800bee0:	783a      	ldrb	r2, [r7, #0]
 800bee2:	1c78      	adds	r0, r7, #1
 800bee4:	3a30      	subs	r2, #48	; 0x30
 800bee6:	4684      	mov	ip, r0
 800bee8:	2a09      	cmp	r2, #9
 800beea:	d94f      	bls.n	800bf8c <_vfiprintf_r+0x1d0>
 800beec:	2900      	cmp	r1, #0
 800beee:	d111      	bne.n	800bf14 <_vfiprintf_r+0x158>
 800bef0:	e017      	b.n	800bf22 <_vfiprintf_r+0x166>
 800bef2:	3701      	adds	r7, #1
 800bef4:	e7a9      	b.n	800be4a <_vfiprintf_r+0x8e>
 800bef6:	4b49      	ldr	r3, [pc, #292]	; (800c01c <_vfiprintf_r+0x260>)
 800bef8:	682a      	ldr	r2, [r5, #0]
 800befa:	1ac0      	subs	r0, r0, r3
 800befc:	2301      	movs	r3, #1
 800befe:	4083      	lsls	r3, r0
 800bf00:	4313      	orrs	r3, r2
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	9703      	str	r7, [sp, #12]
 800bf06:	e7cb      	b.n	800bea0 <_vfiprintf_r+0xe4>
 800bf08:	9b07      	ldr	r3, [sp, #28]
 800bf0a:	1d19      	adds	r1, r3, #4
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	9107      	str	r1, [sp, #28]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	db01      	blt.n	800bf18 <_vfiprintf_r+0x15c>
 800bf14:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf16:	e004      	b.n	800bf22 <_vfiprintf_r+0x166>
 800bf18:	425b      	negs	r3, r3
 800bf1a:	60eb      	str	r3, [r5, #12]
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	602b      	str	r3, [r5, #0]
 800bf22:	783b      	ldrb	r3, [r7, #0]
 800bf24:	2b2e      	cmp	r3, #46	; 0x2e
 800bf26:	d10a      	bne.n	800bf3e <_vfiprintf_r+0x182>
 800bf28:	787b      	ldrb	r3, [r7, #1]
 800bf2a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf2c:	d137      	bne.n	800bf9e <_vfiprintf_r+0x1e2>
 800bf2e:	9b07      	ldr	r3, [sp, #28]
 800bf30:	3702      	adds	r7, #2
 800bf32:	1d1a      	adds	r2, r3, #4
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	9207      	str	r2, [sp, #28]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	db2d      	blt.n	800bf98 <_vfiprintf_r+0x1dc>
 800bf3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3e:	2203      	movs	r2, #3
 800bf40:	7839      	ldrb	r1, [r7, #0]
 800bf42:	4837      	ldr	r0, [pc, #220]	; (800c020 <_vfiprintf_r+0x264>)
 800bf44:	f7ff fa90 	bl	800b468 <memchr>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d007      	beq.n	800bf5c <_vfiprintf_r+0x1a0>
 800bf4c:	4b34      	ldr	r3, [pc, #208]	; (800c020 <_vfiprintf_r+0x264>)
 800bf4e:	682a      	ldr	r2, [r5, #0]
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	2340      	movs	r3, #64	; 0x40
 800bf54:	4083      	lsls	r3, r0
 800bf56:	4313      	orrs	r3, r2
 800bf58:	3701      	adds	r7, #1
 800bf5a:	602b      	str	r3, [r5, #0]
 800bf5c:	7839      	ldrb	r1, [r7, #0]
 800bf5e:	1c7b      	adds	r3, r7, #1
 800bf60:	2206      	movs	r2, #6
 800bf62:	4830      	ldr	r0, [pc, #192]	; (800c024 <_vfiprintf_r+0x268>)
 800bf64:	9303      	str	r3, [sp, #12]
 800bf66:	7629      	strb	r1, [r5, #24]
 800bf68:	f7ff fa7e 	bl	800b468 <memchr>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d045      	beq.n	800bffc <_vfiprintf_r+0x240>
 800bf70:	4b2d      	ldr	r3, [pc, #180]	; (800c028 <_vfiprintf_r+0x26c>)
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d127      	bne.n	800bfc6 <_vfiprintf_r+0x20a>
 800bf76:	2207      	movs	r2, #7
 800bf78:	9b07      	ldr	r3, [sp, #28]
 800bf7a:	3307      	adds	r3, #7
 800bf7c:	4393      	bics	r3, r2
 800bf7e:	3308      	adds	r3, #8
 800bf80:	9307      	str	r3, [sp, #28]
 800bf82:	696b      	ldr	r3, [r5, #20]
 800bf84:	9a04      	ldr	r2, [sp, #16]
 800bf86:	189b      	adds	r3, r3, r2
 800bf88:	616b      	str	r3, [r5, #20]
 800bf8a:	e75d      	b.n	800be48 <_vfiprintf_r+0x8c>
 800bf8c:	210a      	movs	r1, #10
 800bf8e:	434b      	muls	r3, r1
 800bf90:	4667      	mov	r7, ip
 800bf92:	189b      	adds	r3, r3, r2
 800bf94:	3909      	subs	r1, #9
 800bf96:	e7a3      	b.n	800bee0 <_vfiprintf_r+0x124>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	425b      	negs	r3, r3
 800bf9c:	e7ce      	b.n	800bf3c <_vfiprintf_r+0x180>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	001a      	movs	r2, r3
 800bfa2:	3701      	adds	r7, #1
 800bfa4:	606b      	str	r3, [r5, #4]
 800bfa6:	7839      	ldrb	r1, [r7, #0]
 800bfa8:	1c78      	adds	r0, r7, #1
 800bfaa:	3930      	subs	r1, #48	; 0x30
 800bfac:	4684      	mov	ip, r0
 800bfae:	2909      	cmp	r1, #9
 800bfb0:	d903      	bls.n	800bfba <_vfiprintf_r+0x1fe>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0c3      	beq.n	800bf3e <_vfiprintf_r+0x182>
 800bfb6:	9209      	str	r2, [sp, #36]	; 0x24
 800bfb8:	e7c1      	b.n	800bf3e <_vfiprintf_r+0x182>
 800bfba:	230a      	movs	r3, #10
 800bfbc:	435a      	muls	r2, r3
 800bfbe:	4667      	mov	r7, ip
 800bfc0:	1852      	adds	r2, r2, r1
 800bfc2:	3b09      	subs	r3, #9
 800bfc4:	e7ef      	b.n	800bfa6 <_vfiprintf_r+0x1ea>
 800bfc6:	ab07      	add	r3, sp, #28
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	0022      	movs	r2, r4
 800bfcc:	0029      	movs	r1, r5
 800bfce:	0030      	movs	r0, r6
 800bfd0:	4b16      	ldr	r3, [pc, #88]	; (800c02c <_vfiprintf_r+0x270>)
 800bfd2:	f7fd fdf9 	bl	8009bc8 <_printf_float>
 800bfd6:	9004      	str	r0, [sp, #16]
 800bfd8:	9b04      	ldr	r3, [sp, #16]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	d1d1      	bne.n	800bf82 <_vfiprintf_r+0x1c6>
 800bfde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfe0:	07db      	lsls	r3, r3, #31
 800bfe2:	d405      	bmi.n	800bff0 <_vfiprintf_r+0x234>
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	059b      	lsls	r3, r3, #22
 800bfe8:	d402      	bmi.n	800bff0 <_vfiprintf_r+0x234>
 800bfea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfec:	f7fd fc98 	bl	8009920 <__retarget_lock_release_recursive>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	065b      	lsls	r3, r3, #25
 800bff4:	d500      	bpl.n	800bff8 <_vfiprintf_r+0x23c>
 800bff6:	e70a      	b.n	800be0e <_vfiprintf_r+0x52>
 800bff8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bffa:	e70a      	b.n	800be12 <_vfiprintf_r+0x56>
 800bffc:	ab07      	add	r3, sp, #28
 800bffe:	9300      	str	r3, [sp, #0]
 800c000:	0022      	movs	r2, r4
 800c002:	0029      	movs	r1, r5
 800c004:	0030      	movs	r0, r6
 800c006:	4b09      	ldr	r3, [pc, #36]	; (800c02c <_vfiprintf_r+0x270>)
 800c008:	f7fe f890 	bl	800a12c <_printf_i>
 800c00c:	e7e3      	b.n	800bfd6 <_vfiprintf_r+0x21a>
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	0800c690 	.word	0x0800c690
 800c014:	0800c6b0 	.word	0x0800c6b0
 800c018:	0800c670 	.word	0x0800c670
 800c01c:	0800c93a 	.word	0x0800c93a
 800c020:	0800c940 	.word	0x0800c940
 800c024:	0800c944 	.word	0x0800c944
 800c028:	08009bc9 	.word	0x08009bc9
 800c02c:	0800bd97 	.word	0x0800bd97

0800c030 <__swbuf_r>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	0005      	movs	r5, r0
 800c034:	000e      	movs	r6, r1
 800c036:	0014      	movs	r4, r2
 800c038:	2800      	cmp	r0, #0
 800c03a:	d004      	beq.n	800c046 <__swbuf_r+0x16>
 800c03c:	6983      	ldr	r3, [r0, #24]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <__swbuf_r+0x16>
 800c042:	f7fd fba7 	bl	8009794 <__sinit>
 800c046:	4b22      	ldr	r3, [pc, #136]	; (800c0d0 <__swbuf_r+0xa0>)
 800c048:	429c      	cmp	r4, r3
 800c04a:	d12e      	bne.n	800c0aa <__swbuf_r+0x7a>
 800c04c:	686c      	ldr	r4, [r5, #4]
 800c04e:	69a3      	ldr	r3, [r4, #24]
 800c050:	60a3      	str	r3, [r4, #8]
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	071b      	lsls	r3, r3, #28
 800c056:	d532      	bpl.n	800c0be <__swbuf_r+0x8e>
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d02f      	beq.n	800c0be <__swbuf_r+0x8e>
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	6922      	ldr	r2, [r4, #16]
 800c062:	b2f7      	uxtb	r7, r6
 800c064:	1a98      	subs	r0, r3, r2
 800c066:	6963      	ldr	r3, [r4, #20]
 800c068:	b2f6      	uxtb	r6, r6
 800c06a:	4283      	cmp	r3, r0
 800c06c:	dc05      	bgt.n	800c07a <__swbuf_r+0x4a>
 800c06e:	0021      	movs	r1, r4
 800c070:	0028      	movs	r0, r5
 800c072:	f7ff f997 	bl	800b3a4 <_fflush_r>
 800c076:	2800      	cmp	r0, #0
 800c078:	d127      	bne.n	800c0ca <__swbuf_r+0x9a>
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	3001      	adds	r0, #1
 800c07e:	3b01      	subs	r3, #1
 800c080:	60a3      	str	r3, [r4, #8]
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	6022      	str	r2, [r4, #0]
 800c088:	701f      	strb	r7, [r3, #0]
 800c08a:	6963      	ldr	r3, [r4, #20]
 800c08c:	4283      	cmp	r3, r0
 800c08e:	d004      	beq.n	800c09a <__swbuf_r+0x6a>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	07db      	lsls	r3, r3, #31
 800c094:	d507      	bpl.n	800c0a6 <__swbuf_r+0x76>
 800c096:	2e0a      	cmp	r6, #10
 800c098:	d105      	bne.n	800c0a6 <__swbuf_r+0x76>
 800c09a:	0021      	movs	r1, r4
 800c09c:	0028      	movs	r0, r5
 800c09e:	f7ff f981 	bl	800b3a4 <_fflush_r>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d111      	bne.n	800c0ca <__swbuf_r+0x9a>
 800c0a6:	0030      	movs	r0, r6
 800c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <__swbuf_r+0xa4>)
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	d101      	bne.n	800c0b4 <__swbuf_r+0x84>
 800c0b0:	68ac      	ldr	r4, [r5, #8]
 800c0b2:	e7cc      	b.n	800c04e <__swbuf_r+0x1e>
 800c0b4:	4b08      	ldr	r3, [pc, #32]	; (800c0d8 <__swbuf_r+0xa8>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d1c9      	bne.n	800c04e <__swbuf_r+0x1e>
 800c0ba:	68ec      	ldr	r4, [r5, #12]
 800c0bc:	e7c7      	b.n	800c04e <__swbuf_r+0x1e>
 800c0be:	0021      	movs	r1, r4
 800c0c0:	0028      	movs	r0, r5
 800c0c2:	f000 f819 	bl	800c0f8 <__swsetup_r>
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	d0c9      	beq.n	800c05e <__swbuf_r+0x2e>
 800c0ca:	2601      	movs	r6, #1
 800c0cc:	4276      	negs	r6, r6
 800c0ce:	e7ea      	b.n	800c0a6 <__swbuf_r+0x76>
 800c0d0:	0800c690 	.word	0x0800c690
 800c0d4:	0800c6b0 	.word	0x0800c6b0
 800c0d8:	0800c670 	.word	0x0800c670

0800c0dc <__ascii_wctomb>:
 800c0dc:	0003      	movs	r3, r0
 800c0de:	1e08      	subs	r0, r1, #0
 800c0e0:	d005      	beq.n	800c0ee <__ascii_wctomb+0x12>
 800c0e2:	2aff      	cmp	r2, #255	; 0xff
 800c0e4:	d904      	bls.n	800c0f0 <__ascii_wctomb+0x14>
 800c0e6:	228a      	movs	r2, #138	; 0x8a
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	4240      	negs	r0, r0
 800c0ee:	4770      	bx	lr
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	700a      	strb	r2, [r1, #0]
 800c0f4:	e7fb      	b.n	800c0ee <__ascii_wctomb+0x12>
	...

0800c0f8 <__swsetup_r>:
 800c0f8:	4b37      	ldr	r3, [pc, #220]	; (800c1d8 <__swsetup_r+0xe0>)
 800c0fa:	b570      	push	{r4, r5, r6, lr}
 800c0fc:	681d      	ldr	r5, [r3, #0]
 800c0fe:	0006      	movs	r6, r0
 800c100:	000c      	movs	r4, r1
 800c102:	2d00      	cmp	r5, #0
 800c104:	d005      	beq.n	800c112 <__swsetup_r+0x1a>
 800c106:	69ab      	ldr	r3, [r5, #24]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d102      	bne.n	800c112 <__swsetup_r+0x1a>
 800c10c:	0028      	movs	r0, r5
 800c10e:	f7fd fb41 	bl	8009794 <__sinit>
 800c112:	4b32      	ldr	r3, [pc, #200]	; (800c1dc <__swsetup_r+0xe4>)
 800c114:	429c      	cmp	r4, r3
 800c116:	d10f      	bne.n	800c138 <__swsetup_r+0x40>
 800c118:	686c      	ldr	r4, [r5, #4]
 800c11a:	230c      	movs	r3, #12
 800c11c:	5ee2      	ldrsh	r2, [r4, r3]
 800c11e:	b293      	uxth	r3, r2
 800c120:	0711      	lsls	r1, r2, #28
 800c122:	d42d      	bmi.n	800c180 <__swsetup_r+0x88>
 800c124:	06d9      	lsls	r1, r3, #27
 800c126:	d411      	bmi.n	800c14c <__swsetup_r+0x54>
 800c128:	2309      	movs	r3, #9
 800c12a:	2001      	movs	r0, #1
 800c12c:	6033      	str	r3, [r6, #0]
 800c12e:	3337      	adds	r3, #55	; 0x37
 800c130:	4313      	orrs	r3, r2
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	4240      	negs	r0, r0
 800c136:	bd70      	pop	{r4, r5, r6, pc}
 800c138:	4b29      	ldr	r3, [pc, #164]	; (800c1e0 <__swsetup_r+0xe8>)
 800c13a:	429c      	cmp	r4, r3
 800c13c:	d101      	bne.n	800c142 <__swsetup_r+0x4a>
 800c13e:	68ac      	ldr	r4, [r5, #8]
 800c140:	e7eb      	b.n	800c11a <__swsetup_r+0x22>
 800c142:	4b28      	ldr	r3, [pc, #160]	; (800c1e4 <__swsetup_r+0xec>)
 800c144:	429c      	cmp	r4, r3
 800c146:	d1e8      	bne.n	800c11a <__swsetup_r+0x22>
 800c148:	68ec      	ldr	r4, [r5, #12]
 800c14a:	e7e6      	b.n	800c11a <__swsetup_r+0x22>
 800c14c:	075b      	lsls	r3, r3, #29
 800c14e:	d513      	bpl.n	800c178 <__swsetup_r+0x80>
 800c150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c152:	2900      	cmp	r1, #0
 800c154:	d008      	beq.n	800c168 <__swsetup_r+0x70>
 800c156:	0023      	movs	r3, r4
 800c158:	3344      	adds	r3, #68	; 0x44
 800c15a:	4299      	cmp	r1, r3
 800c15c:	d002      	beq.n	800c164 <__swsetup_r+0x6c>
 800c15e:	0030      	movs	r0, r6
 800c160:	f7ff fd66 	bl	800bc30 <_free_r>
 800c164:	2300      	movs	r3, #0
 800c166:	6363      	str	r3, [r4, #52]	; 0x34
 800c168:	2224      	movs	r2, #36	; 0x24
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	4393      	bics	r3, r2
 800c16e:	81a3      	strh	r3, [r4, #12]
 800c170:	2300      	movs	r3, #0
 800c172:	6063      	str	r3, [r4, #4]
 800c174:	6923      	ldr	r3, [r4, #16]
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	2308      	movs	r3, #8
 800c17a:	89a2      	ldrh	r2, [r4, #12]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	6923      	ldr	r3, [r4, #16]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10b      	bne.n	800c19e <__swsetup_r+0xa6>
 800c186:	21a0      	movs	r1, #160	; 0xa0
 800c188:	2280      	movs	r2, #128	; 0x80
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	0089      	lsls	r1, r1, #2
 800c18e:	0092      	lsls	r2, r2, #2
 800c190:	400b      	ands	r3, r1
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <__swsetup_r+0xa6>
 800c196:	0021      	movs	r1, r4
 800c198:	0030      	movs	r0, r6
 800c19a:	f000 f855 	bl	800c248 <__smakebuf_r>
 800c19e:	220c      	movs	r2, #12
 800c1a0:	5ea3      	ldrsh	r3, [r4, r2]
 800c1a2:	2001      	movs	r0, #1
 800c1a4:	001a      	movs	r2, r3
 800c1a6:	b299      	uxth	r1, r3
 800c1a8:	4002      	ands	r2, r0
 800c1aa:	4203      	tst	r3, r0
 800c1ac:	d00f      	beq.n	800c1ce <__swsetup_r+0xd6>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	60a2      	str	r2, [r4, #8]
 800c1b2:	6962      	ldr	r2, [r4, #20]
 800c1b4:	4252      	negs	r2, r2
 800c1b6:	61a2      	str	r2, [r4, #24]
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	6922      	ldr	r2, [r4, #16]
 800c1bc:	4282      	cmp	r2, r0
 800c1be:	d1ba      	bne.n	800c136 <__swsetup_r+0x3e>
 800c1c0:	060a      	lsls	r2, r1, #24
 800c1c2:	d5b8      	bpl.n	800c136 <__swsetup_r+0x3e>
 800c1c4:	2240      	movs	r2, #64	; 0x40
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	3801      	subs	r0, #1
 800c1cc:	e7b3      	b.n	800c136 <__swsetup_r+0x3e>
 800c1ce:	0788      	lsls	r0, r1, #30
 800c1d0:	d400      	bmi.n	800c1d4 <__swsetup_r+0xdc>
 800c1d2:	6962      	ldr	r2, [r4, #20]
 800c1d4:	60a2      	str	r2, [r4, #8]
 800c1d6:	e7ef      	b.n	800c1b8 <__swsetup_r+0xc0>
 800c1d8:	20000014 	.word	0x20000014
 800c1dc:	0800c690 	.word	0x0800c690
 800c1e0:	0800c6b0 	.word	0x0800c6b0
 800c1e4:	0800c670 	.word	0x0800c670

0800c1e8 <abort>:
 800c1e8:	2006      	movs	r0, #6
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	f000 f89a 	bl	800c324 <raise>
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	f7f6 fcb7 	bl	8002b64 <_exit>
	...

0800c1f8 <__swhatbuf_r>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	000e      	movs	r6, r1
 800c1fc:	001d      	movs	r5, r3
 800c1fe:	230e      	movs	r3, #14
 800c200:	5ec9      	ldrsh	r1, [r1, r3]
 800c202:	0014      	movs	r4, r2
 800c204:	b096      	sub	sp, #88	; 0x58
 800c206:	2900      	cmp	r1, #0
 800c208:	da08      	bge.n	800c21c <__swhatbuf_r+0x24>
 800c20a:	220c      	movs	r2, #12
 800c20c:	5eb3      	ldrsh	r3, [r6, r2]
 800c20e:	2200      	movs	r2, #0
 800c210:	602a      	str	r2, [r5, #0]
 800c212:	061b      	lsls	r3, r3, #24
 800c214:	d411      	bmi.n	800c23a <__swhatbuf_r+0x42>
 800c216:	2380      	movs	r3, #128	; 0x80
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	e00f      	b.n	800c23c <__swhatbuf_r+0x44>
 800c21c:	466a      	mov	r2, sp
 800c21e:	f000 f8a1 	bl	800c364 <_fstat_r>
 800c222:	2800      	cmp	r0, #0
 800c224:	dbf1      	blt.n	800c20a <__swhatbuf_r+0x12>
 800c226:	23f0      	movs	r3, #240	; 0xf0
 800c228:	9901      	ldr	r1, [sp, #4]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	4019      	ands	r1, r3
 800c22e:	4b05      	ldr	r3, [pc, #20]	; (800c244 <__swhatbuf_r+0x4c>)
 800c230:	18c9      	adds	r1, r1, r3
 800c232:	424b      	negs	r3, r1
 800c234:	4159      	adcs	r1, r3
 800c236:	6029      	str	r1, [r5, #0]
 800c238:	e7ed      	b.n	800c216 <__swhatbuf_r+0x1e>
 800c23a:	2340      	movs	r3, #64	; 0x40
 800c23c:	2000      	movs	r0, #0
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	b016      	add	sp, #88	; 0x58
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	ffffe000 	.word	0xffffe000

0800c248 <__smakebuf_r>:
 800c248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c24a:	2602      	movs	r6, #2
 800c24c:	898b      	ldrh	r3, [r1, #12]
 800c24e:	0005      	movs	r5, r0
 800c250:	000c      	movs	r4, r1
 800c252:	4233      	tst	r3, r6
 800c254:	d006      	beq.n	800c264 <__smakebuf_r+0x1c>
 800c256:	0023      	movs	r3, r4
 800c258:	3347      	adds	r3, #71	; 0x47
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	6123      	str	r3, [r4, #16]
 800c25e:	2301      	movs	r3, #1
 800c260:	6163      	str	r3, [r4, #20]
 800c262:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c264:	466a      	mov	r2, sp
 800c266:	ab01      	add	r3, sp, #4
 800c268:	f7ff ffc6 	bl	800c1f8 <__swhatbuf_r>
 800c26c:	9900      	ldr	r1, [sp, #0]
 800c26e:	0007      	movs	r7, r0
 800c270:	0028      	movs	r0, r5
 800c272:	f7fd fb89 	bl	8009988 <_malloc_r>
 800c276:	2800      	cmp	r0, #0
 800c278:	d108      	bne.n	800c28c <__smakebuf_r+0x44>
 800c27a:	220c      	movs	r2, #12
 800c27c:	5ea3      	ldrsh	r3, [r4, r2]
 800c27e:	059a      	lsls	r2, r3, #22
 800c280:	d4ef      	bmi.n	800c262 <__smakebuf_r+0x1a>
 800c282:	2203      	movs	r2, #3
 800c284:	4393      	bics	r3, r2
 800c286:	431e      	orrs	r6, r3
 800c288:	81a6      	strh	r6, [r4, #12]
 800c28a:	e7e4      	b.n	800c256 <__smakebuf_r+0xe>
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <__smakebuf_r+0x84>)
 800c28e:	62ab      	str	r3, [r5, #40]	; 0x28
 800c290:	2380      	movs	r3, #128	; 0x80
 800c292:	89a2      	ldrh	r2, [r4, #12]
 800c294:	6020      	str	r0, [r4, #0]
 800c296:	4313      	orrs	r3, r2
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	9b00      	ldr	r3, [sp, #0]
 800c29c:	6120      	str	r0, [r4, #16]
 800c29e:	6163      	str	r3, [r4, #20]
 800c2a0:	9b01      	ldr	r3, [sp, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00d      	beq.n	800c2c2 <__smakebuf_r+0x7a>
 800c2a6:	0028      	movs	r0, r5
 800c2a8:	230e      	movs	r3, #14
 800c2aa:	5ee1      	ldrsh	r1, [r4, r3]
 800c2ac:	f000 f86c 	bl	800c388 <_isatty_r>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d006      	beq.n	800c2c2 <__smakebuf_r+0x7a>
 800c2b4:	2203      	movs	r2, #3
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	4393      	bics	r3, r2
 800c2ba:	001a      	movs	r2, r3
 800c2bc:	2301      	movs	r3, #1
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	81a3      	strh	r3, [r4, #12]
 800c2c2:	89a0      	ldrh	r0, [r4, #12]
 800c2c4:	4307      	orrs	r7, r0
 800c2c6:	81a7      	strh	r7, [r4, #12]
 800c2c8:	e7cb      	b.n	800c262 <__smakebuf_r+0x1a>
 800c2ca:	46c0      	nop			; (mov r8, r8)
 800c2cc:	08009719 	.word	0x08009719

0800c2d0 <_raise_r>:
 800c2d0:	b570      	push	{r4, r5, r6, lr}
 800c2d2:	0004      	movs	r4, r0
 800c2d4:	000d      	movs	r5, r1
 800c2d6:	291f      	cmp	r1, #31
 800c2d8:	d904      	bls.n	800c2e4 <_raise_r+0x14>
 800c2da:	2316      	movs	r3, #22
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	2001      	movs	r0, #1
 800c2e0:	4240      	negs	r0, r0
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d004      	beq.n	800c2f4 <_raise_r+0x24>
 800c2ea:	008a      	lsls	r2, r1, #2
 800c2ec:	189b      	adds	r3, r3, r2
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d108      	bne.n	800c306 <_raise_r+0x36>
 800c2f4:	0020      	movs	r0, r4
 800c2f6:	f000 f831 	bl	800c35c <_getpid_r>
 800c2fa:	002a      	movs	r2, r5
 800c2fc:	0001      	movs	r1, r0
 800c2fe:	0020      	movs	r0, r4
 800c300:	f000 f81a 	bl	800c338 <_kill_r>
 800c304:	e7ed      	b.n	800c2e2 <_raise_r+0x12>
 800c306:	2000      	movs	r0, #0
 800c308:	2a01      	cmp	r2, #1
 800c30a:	d0ea      	beq.n	800c2e2 <_raise_r+0x12>
 800c30c:	1c51      	adds	r1, r2, #1
 800c30e:	d103      	bne.n	800c318 <_raise_r+0x48>
 800c310:	2316      	movs	r3, #22
 800c312:	3001      	adds	r0, #1
 800c314:	6023      	str	r3, [r4, #0]
 800c316:	e7e4      	b.n	800c2e2 <_raise_r+0x12>
 800c318:	2400      	movs	r4, #0
 800c31a:	0028      	movs	r0, r5
 800c31c:	601c      	str	r4, [r3, #0]
 800c31e:	4790      	blx	r2
 800c320:	0020      	movs	r0, r4
 800c322:	e7de      	b.n	800c2e2 <_raise_r+0x12>

0800c324 <raise>:
 800c324:	b510      	push	{r4, lr}
 800c326:	4b03      	ldr	r3, [pc, #12]	; (800c334 <raise+0x10>)
 800c328:	0001      	movs	r1, r0
 800c32a:	6818      	ldr	r0, [r3, #0]
 800c32c:	f7ff ffd0 	bl	800c2d0 <_raise_r>
 800c330:	bd10      	pop	{r4, pc}
 800c332:	46c0      	nop			; (mov r8, r8)
 800c334:	20000014 	.word	0x20000014

0800c338 <_kill_r>:
 800c338:	2300      	movs	r3, #0
 800c33a:	b570      	push	{r4, r5, r6, lr}
 800c33c:	4d06      	ldr	r5, [pc, #24]	; (800c358 <_kill_r+0x20>)
 800c33e:	0004      	movs	r4, r0
 800c340:	0008      	movs	r0, r1
 800c342:	0011      	movs	r1, r2
 800c344:	602b      	str	r3, [r5, #0]
 800c346:	f7f6 fbfd 	bl	8002b44 <_kill>
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	d103      	bne.n	800c356 <_kill_r+0x1e>
 800c34e:	682b      	ldr	r3, [r5, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d000      	beq.n	800c356 <_kill_r+0x1e>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	20001d78 	.word	0x20001d78

0800c35c <_getpid_r>:
 800c35c:	b510      	push	{r4, lr}
 800c35e:	f7f6 fbeb 	bl	8002b38 <_getpid>
 800c362:	bd10      	pop	{r4, pc}

0800c364 <_fstat_r>:
 800c364:	2300      	movs	r3, #0
 800c366:	b570      	push	{r4, r5, r6, lr}
 800c368:	4d06      	ldr	r5, [pc, #24]	; (800c384 <_fstat_r+0x20>)
 800c36a:	0004      	movs	r4, r0
 800c36c:	0008      	movs	r0, r1
 800c36e:	0011      	movs	r1, r2
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	f7f6 fc46 	bl	8002c02 <_fstat>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d103      	bne.n	800c382 <_fstat_r+0x1e>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d000      	beq.n	800c382 <_fstat_r+0x1e>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	20001d78 	.word	0x20001d78

0800c388 <_isatty_r>:
 800c388:	2300      	movs	r3, #0
 800c38a:	b570      	push	{r4, r5, r6, lr}
 800c38c:	4d06      	ldr	r5, [pc, #24]	; (800c3a8 <_isatty_r+0x20>)
 800c38e:	0004      	movs	r4, r0
 800c390:	0008      	movs	r0, r1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	f7f6 fc43 	bl	8002c1e <_isatty>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d103      	bne.n	800c3a4 <_isatty_r+0x1c>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d000      	beq.n	800c3a4 <_isatty_r+0x1c>
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	bd70      	pop	{r4, r5, r6, pc}
 800c3a6:	46c0      	nop			; (mov r8, r8)
 800c3a8:	20001d78 	.word	0x20001d78

0800c3ac <_init>:
 800c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3b2:	bc08      	pop	{r3}
 800c3b4:	469e      	mov	lr, r3
 800c3b6:	4770      	bx	lr

0800c3b8 <_fini>:
 800c3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ba:	46c0      	nop			; (mov r8, r8)
 800c3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3be:	bc08      	pop	{r3}
 800c3c0:	469e      	mov	lr, r3
 800c3c2:	4770      	bx	lr
